
Micro_ros_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b3f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f64  0802b5c8  0802b5c8  0002c5c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803052c  0803052c  000325b0  2**0
                  CONTENTS
  4 .ARM          00000008  0803052c  0803052c  0003152c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030534  08030534  000325b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08030534  08030534  00031534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803053c  0803053c  0003153c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000470  20000000  08030540  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000470  080309b0  00032470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000510  08030a50  00032510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00046dc8  200005b0  08030af0  000325b0  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20047378  08030af0  00033378  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000325b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000418ee  00000000  00000000  000325e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000991c  00000000  00000000  00073ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002e30  00000000  00000000  0007d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000249e  00000000  00000000  00080620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a150  00000000  00000000  00082abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047c0a  00000000  00000000  0009cc0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00125937  00000000  00000000  000e4818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000076  00000000  00000000  0020a14f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d3b0  00000000  00000000  0020a1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  00217578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200005b0 	.word	0x200005b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802b5ac 	.word	0x0802b5ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200005b4 	.word	0x200005b4
 800020c:	0802b5ac 	.word	0x0802b5ac

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c26:	f000 b9b5 	b.w	8000f94 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8000fa4:	f009 fa26 	bl	800a3f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fa8:	4b40      	ldr	r3, [pc, #256]	@ (80010ac <pvPortMallocMicroROS+0x114>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fb0:	f000 f930 	bl	8001214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80010b0 <pvPortMallocMicroROS+0x118>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d16d      	bne.n	800109c <pvPortMallocMicroROS+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00d      	beq.n	8000fe2 <pvPortMallocMicroROS+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d004      	beq.n	8000fe2 <pvPortMallocMicroROS+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f023 0307 	bic.w	r3, r3, #7
 8000fde:	3308      	adds	r3, #8
 8000fe0:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d059      	beq.n	800109c <pvPortMallocMicroROS+0x104>
 8000fe8:	4b32      	ldr	r3, [pc, #200]	@ (80010b4 <pvPortMallocMicroROS+0x11c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d854      	bhi.n	800109c <pvPortMallocMicroROS+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000ff2:	4b31      	ldr	r3, [pc, #196]	@ (80010b8 <pvPortMallocMicroROS+0x120>)
 8000ff4:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8000ff6:	4b30      	ldr	r3, [pc, #192]	@ (80010b8 <pvPortMallocMicroROS+0x120>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ffc:	e004      	b.n	8001008 <pvPortMallocMicroROS+0x70>
				{
					pxPreviousBlock = pxBlock;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	429a      	cmp	r2, r3
 8001010:	d903      	bls.n	800101a <pvPortMallocMicroROS+0x82>
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f1      	bne.n	8000ffe <pvPortMallocMicroROS+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800101a:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <pvPortMallocMicroROS+0x114>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	429a      	cmp	r2, r3
 8001022:	d03b      	beq.n	800109c <pvPortMallocMicroROS+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2208      	movs	r2, #8
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	1ad2      	subs	r2, r2, r3
 800103e:	2308      	movs	r3, #8
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	429a      	cmp	r2, r3
 8001044:	d90f      	bls.n	8001066 <pvPortMallocMicroROS+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	1ad2      	subs	r2, r2, r3
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001060:	68b8      	ldr	r0, [r7, #8]
 8001062:	f000 f93b 	bl	80012dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <pvPortMallocMicroROS+0x11c>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <pvPortMallocMicroROS+0x11c>)
 8001072:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <pvPortMallocMicroROS+0x11c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <pvPortMallocMicroROS+0x124>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d203      	bcs.n	8001088 <pvPortMallocMicroROS+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <pvPortMallocMicroROS+0x11c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <pvPortMallocMicroROS+0x124>)
 8001086:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <pvPortMallocMicroROS+0x118>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	431a      	orrs	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800109c:	f009 f9b8 	bl	800a410 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 80010a0:	68fb      	ldr	r3, [r7, #12]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20018c74 	.word	0x20018c74
 80010b0:	20018c80 	.word	0x20018c80
 80010b4:	20018c78 	.word	0x20018c78
 80010b8:	20018c6c 	.word	0x20018c6c
 80010bc:	20018c7c 	.word	0x20018c7c

080010c0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d027      	beq.n	8001122 <vPortFreeMicroROS+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80010d2:	2308      	movs	r3, #8
 80010d4:	425b      	negs	r3, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4413      	add	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <vPortFreeMicroROS+0x6c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d019      	beq.n	8001122 <vPortFreeMicroROS+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d115      	bne.n	8001122 <vPortFreeMicroROS+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <vPortFreeMicroROS+0x6c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001106:	f009 f975 	bl	800a3f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <vPortFreeMicroROS+0x70>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <vPortFreeMicroROS+0x70>)
 8001116:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	f000 f8df 	bl	80012dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800111e:	f009 f977 	bl	800a410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20018c80 	.word	0x20018c80
 8001130:	20018c78 	.word	0x20018c78

08001134 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001134:	b480      	push	{r7}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001140:	2308      	movs	r3, #8
 8001142:	425b      	negs	r3, r3
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	4413      	add	r3, r2
 8001148:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <getBlockSize+0x38>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	43db      	mvns	r3, r3
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]

	return count;
 800115c:	68fb      	ldr	r3, [r7, #12]
}
 800115e:	4618      	mov	r0, r3
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20018c80 	.word	0x20018c80

08001170 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800117a:	f009 f93b 	bl	800a3f4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800117e:	6838      	ldr	r0, [r7, #0]
 8001180:	f7ff ff0a 	bl	8000f98 <pvPortMallocMicroROS>
 8001184:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d017      	beq.n	80011bc <pvPortReallocMicroROS+0x4c>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d014      	beq.n	80011bc <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffce 	bl	8001134 <getBlockSize>
 8001198:	4603      	mov	r3, r0
 800119a:	2208      	movs	r2, #8
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d201      	bcs.n	80011ac <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	68b8      	ldr	r0, [r7, #8]
 80011b2:	f028 fb5a 	bl	802986a <memcpy>

		vPortFreeMicroROS(pv);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff82 	bl	80010c0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80011bc:	f009 f928 	bl	800a410 <xTaskResumeAll>

	return newmem;
 80011c0:	68bb      	ldr	r3, [r7, #8]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80011d4:	f009 f90e 	bl	800a3f4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff fed8 	bl	8000f98 <pvPortMallocMicroROS>
 80011e8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	613b      	str	r3, [r7, #16]

  	while(count--)
 80011ee:	e004      	b.n	80011fa <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	613a      	str	r2, [r7, #16]
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	1e5a      	subs	r2, r3, #1
 80011fe:	617a      	str	r2, [r7, #20]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f5      	bne.n	80011f0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001204:	f009 f904 	bl	800a410 <xTaskResumeAll>
  	return mem;
 8001208:	68fb      	ldr	r3, [r7, #12]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800121a:	4b29      	ldr	r3, [pc, #164]	@ (80012c0 <prvHeapInit+0xac>)
 800121c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800121e:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <prvHeapInit+0xb0>)
 8001220:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00c      	beq.n	8001246 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3307      	adds	r3, #7
 8001230:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f023 0307 	bic.w	r3, r3, #7
 8001238:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	4a20      	ldr	r2, [pc, #128]	@ (80012c4 <prvHeapInit+0xb0>)
 8001242:	4413      	add	r3, r2
 8001244:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800124a:	4a1f      	ldr	r2, [pc, #124]	@ (80012c8 <prvHeapInit+0xb4>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001250:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <prvHeapInit+0xb4>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800125e:	2208      	movs	r2, #8
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	1a9b      	subs	r3, r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f023 0307 	bic.w	r3, r3, #7
 800126c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4a16      	ldr	r2, [pc, #88]	@ (80012cc <prvHeapInit+0xb8>)
 8001272:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <prvHeapInit+0xb8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800127c:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <prvHeapInit+0xb8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	1ad2      	subs	r2, r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <prvHeapInit+0xb8>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <prvHeapInit+0xbc>)
 80012a0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a0b      	ldr	r2, [pc, #44]	@ (80012d4 <prvHeapInit+0xc0>)
 80012a8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <prvHeapInit+0xc4>)
 80012ac:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80012b0:	601a      	str	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	000186a0 	.word	0x000186a0
 80012c4:	200005cc 	.word	0x200005cc
 80012c8:	20018c6c 	.word	0x20018c6c
 80012cc:	20018c74 	.word	0x20018c74
 80012d0:	20018c7c 	.word	0x20018c7c
 80012d4:	20018c78 	.word	0x20018c78
 80012d8:	20018c80 	.word	0x20018c80

080012dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80012e4:	4b28      	ldr	r3, [pc, #160]	@ (8001388 <prvInsertBlockIntoFreeList+0xac>)
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	e002      	b.n	80012f0 <prvInsertBlockIntoFreeList+0x14>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d8f7      	bhi.n	80012ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	4413      	add	r3, r2
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	d108      	bne.n	800131e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	441a      	add	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	441a      	add	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d118      	bne.n	8001364 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <prvInsertBlockIntoFreeList+0xb0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d00d      	beq.n	800135a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	441a      	add	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e008      	b.n	800136c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <prvInsertBlockIntoFreeList+0xb0>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	e003      	b.n	800136c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	d002      	beq.n	800137a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20018c6c 	.word	0x20018c6c
 800138c:	20018c74 	.word	0x20018c74

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001394:	f001 f967 	bl	8002666 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001398:	f000 f81c 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139c:	f000 f90c 	bl	80015b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a0:	f000 f8e4 	bl	800156c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80013a4:	f000 f884 	bl	80014b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013a8:	f000 f8b2 	bl	8001510 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013ac:	f007 f87e 	bl	80084ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013b0:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <main+0x38>)
 80013b2:	2100      	movs	r1, #0
 80013b4:	4805      	ldr	r0, [pc, #20]	@ (80013cc <main+0x3c>)
 80013b6:	f007 f90b 	bl	80085d0 <osThreadNew>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <main+0x40>)
 80013be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013c0:	f007 f8a8 	bl	8008514 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <main+0x34>
 80013c8:	0802f34c 	.word	0x0802f34c
 80013cc:	08001751 	.word	0x08001751
 80013d0:	200192ac 	.word	0x200192ac

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	@ 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2230      	movs	r2, #48	@ 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f028 f91e 	bl	8029624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013f8:	f003 fb4c 	bl	8004a94 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <SystemClock_Config+0xd4>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	4a29      	ldr	r2, [pc, #164]	@ (80014a8 <SystemClock_Config+0xd4>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	@ 0x40
 8001408:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <SystemClock_Config+0xd4>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	4b25      	ldr	r3, [pc, #148]	@ (80014ac <SystemClock_Config+0xd8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a24      	ldr	r2, [pc, #144]	@ (80014ac <SystemClock_Config+0xd8>)
 800141a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b22      	ldr	r3, [pc, #136]	@ (80014ac <SystemClock_Config+0xd8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800142c:	2301      	movs	r3, #1
 800142e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001430:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001436:	2302      	movs	r3, #2
 8001438:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800143e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001440:	2304      	movs	r3, #4
 8001442:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001444:	23d8      	movs	r3, #216	@ 0xd8
 8001446:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001448:	2302      	movs	r3, #2
 800144a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800144c:	2309      	movs	r3, #9
 800144e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	f107 0320 	add.w	r3, r7, #32
 8001454:	4618      	mov	r0, r3
 8001456:	f003 fb7d 	bl	8004b54 <HAL_RCC_OscConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001460:	f000 fa8e 	bl	8001980 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001464:	f003 fb26 	bl	8004ab4 <HAL_PWREx_EnableOverDrive>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800146e:	f000 fa87 	bl	8001980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001472:	230f      	movs	r3, #15
 8001474:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001476:	2302      	movs	r3, #2
 8001478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800147e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001482:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001484:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001488:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2107      	movs	r1, #7
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fe03 	bl	800509c <HAL_RCC_ClockConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800149c:	f000 fa70 	bl	8001980 <Error_Handler>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3750      	adds	r7, #80	@ 0x50
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40007000 	.word	0x40007000

080014b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <MX_USART3_UART_Init+0x58>)
 80014b6:	4a15      	ldr	r2, [pc, #84]	@ (800150c <MX_USART3_UART_Init+0x5c>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 80014ba:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <MX_USART3_UART_Init+0x58>)
 80014bc:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80014c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_USART3_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <MX_USART3_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_USART3_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_USART3_UART_Init+0x58>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <MX_USART3_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_USART3_UART_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <MX_USART3_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_USART3_UART_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_USART3_UART_Init+0x58>)
 80014f4:	f004 feee 	bl	80062d4 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014fe:	f000 fa3f 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20018c84 	.word	0x20018c84
 800150c:	40004800 	.word	0x40004800

08001510 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001516:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800151a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800151e:	2206      	movs	r2, #6
 8001520:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001524:	2202      	movs	r2, #2
 8001526:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001528:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001530:	2202      	movs	r2, #2
 8001532:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001536:	2201      	movs	r2, #1
 8001538:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001548:	2201      	movs	r2, #1
 800154a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001554:	f003 f963 	bl	800481e <HAL_PCD_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800155e:	f000 fa0f 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20018dcc 	.word	0x20018dcc

0800156c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <MX_DMA_Init+0x48>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <MX_DMA_Init+0x48>)
 8001578:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <MX_DMA_Init+0x48>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2105      	movs	r1, #5
 800158e:	200c      	movs	r0, #12
 8001590:	f001 f972 	bl	8002878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001594:	200c      	movs	r0, #12
 8001596:	f001 f98b 	bl	80028b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2105      	movs	r1, #5
 800159e:	200e      	movs	r0, #14
 80015a0:	f001 f96a 	bl	8002878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80015a4:	200e      	movs	r0, #14
 80015a6:	f001 f983 	bl	80028b0 <HAL_NVIC_EnableIRQ>

}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	@ 0x30
 80015bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	4b47      	ldr	r3, [pc, #284]	@ (80016ec <MX_GPIO_Init+0x134>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a46      	ldr	r2, [pc, #280]	@ (80016ec <MX_GPIO_Init+0x134>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b44      	ldr	r3, [pc, #272]	@ (80016ec <MX_GPIO_Init+0x134>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e6:	4b41      	ldr	r3, [pc, #260]	@ (80016ec <MX_GPIO_Init+0x134>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a40      	ldr	r2, [pc, #256]	@ (80016ec <MX_GPIO_Init+0x134>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b3e      	ldr	r3, [pc, #248]	@ (80016ec <MX_GPIO_Init+0x134>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	4b3b      	ldr	r3, [pc, #236]	@ (80016ec <MX_GPIO_Init+0x134>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a3a      	ldr	r2, [pc, #232]	@ (80016ec <MX_GPIO_Init+0x134>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b38      	ldr	r3, [pc, #224]	@ (80016ec <MX_GPIO_Init+0x134>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	4b35      	ldr	r3, [pc, #212]	@ (80016ec <MX_GPIO_Init+0x134>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a34      	ldr	r2, [pc, #208]	@ (80016ec <MX_GPIO_Init+0x134>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b32      	ldr	r3, [pc, #200]	@ (80016ec <MX_GPIO_Init+0x134>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800162e:	4b2f      	ldr	r3, [pc, #188]	@ (80016ec <MX_GPIO_Init+0x134>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a2e      	ldr	r2, [pc, #184]	@ (80016ec <MX_GPIO_Init+0x134>)
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b2c      	ldr	r3, [pc, #176]	@ (80016ec <MX_GPIO_Init+0x134>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001646:	4b29      	ldr	r3, [pc, #164]	@ (80016ec <MX_GPIO_Init+0x134>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a28      	ldr	r2, [pc, #160]	@ (80016ec <MX_GPIO_Init+0x134>)
 800164c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b26      	ldr	r3, [pc, #152]	@ (80016ec <MX_GPIO_Init+0x134>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001664:	4822      	ldr	r0, [pc, #136]	@ (80016f0 <MX_GPIO_Init+0x138>)
 8001666:	f003 f8c1 	bl	80047ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2140      	movs	r1, #64	@ 0x40
 800166e:	4821      	ldr	r0, [pc, #132]	@ (80016f4 <MX_GPIO_Init+0x13c>)
 8001670:	f003 f8bc 	bl	80047ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001674:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800167a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800167e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	481b      	ldr	r0, [pc, #108]	@ (80016f8 <MX_GPIO_Init+0x140>)
 800168c:	f002 ff02 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001690:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	4619      	mov	r1, r3
 80016a8:	4811      	ldr	r0, [pc, #68]	@ (80016f0 <MX_GPIO_Init+0x138>)
 80016aa:	f002 fef3 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016ae:	2340      	movs	r3, #64	@ 0x40
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	4619      	mov	r1, r3
 80016c4:	480b      	ldr	r0, [pc, #44]	@ (80016f4 <MX_GPIO_Init+0x13c>)
 80016c6:	f002 fee5 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016ca:	2380      	movs	r3, #128	@ 0x80
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_GPIO_Init+0x13c>)
 80016de:	f002 fed9 	bl	8004494 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e2:	bf00      	nop
 80016e4:	3730      	adds	r7, #48	@ 0x30
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40021800 	.word	0x40021800
 80016f8:	40020800 	.word	0x40020800

080016fc <subscription_callback>:
}

#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){error_loop();}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){error_loop();}}

void subscription_callback(const void *msgin) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	   const std_msgs__msg__UInt16MultiArray *received_msg = (const std_msgs__msg__UInt16MultiArray *)msgin;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	60bb      	str	r3, [r7, #8]

	    // Process the message data safely
	    for (size_t i = 0; i < received_msg->data.size; i++) {
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e011      	b.n	8001732 <subscription_callback+0x36>
	        value[i] = received_msg->data.data[i];
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	8819      	ldrh	r1, [r3, #0]
 800171a:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <subscription_callback+0x4c>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	        printf("Received value[%zu]: %u\n", i, value);}
 8001722:	4a09      	ldr	r2, [pc, #36]	@ (8001748 <subscription_callback+0x4c>)
 8001724:	68f9      	ldr	r1, [r7, #12]
 8001726:	4809      	ldr	r0, [pc, #36]	@ (800174c <subscription_callback+0x50>)
 8001728:	f027 fdfc 	bl	8029324 <iprintf>
	    for (size_t i = 0; i < received_msg->data.size; i++) {
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3301      	adds	r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d3e8      	bcc.n	800170e <subscription_callback+0x12>
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200192d0 	.word	0x200192d0
 800174c:	0802b5d4 	.word	0x0802b5d4

08001750 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b0ce      	sub	sp, #312	@ 0x138
 8001754:	af02      	add	r7, sp, #8
 8001756:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800175a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800175e:	6018      	str	r0, [r3, #0]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001760:	f006 f856 	bl	8007810 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
    // Micro-ROS custom transport setup
    rmw_uros_set_custom_transport(
 8001764:	4b6e      	ldr	r3, [pc, #440]	@ (8001920 <StartDefaultTask+0x1d0>)
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	4b6e      	ldr	r3, [pc, #440]	@ (8001924 <StartDefaultTask+0x1d4>)
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	4b6e      	ldr	r3, [pc, #440]	@ (8001928 <StartDefaultTask+0x1d8>)
 800176e:	4a6f      	ldr	r2, [pc, #444]	@ (800192c <StartDefaultTask+0x1dc>)
 8001770:	496f      	ldr	r1, [pc, #444]	@ (8001930 <StartDefaultTask+0x1e0>)
 8001772:	2000      	movs	r0, #0
 8001774:	f01b fa0c 	bl	801cb90 <rmw_uros_set_custom_transport>
        cubemx_transport_write_udp,
        cubemx_transport_read_udp
    );

    // Custom FreeRTOS allocator setup
    rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001778:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800177c:	4618      	mov	r0, r3
 800177e:	f01b f941 	bl	801ca04 <rcutils_get_zero_initialized_allocator>
    freeRTOS_allocator.allocate = microros_allocate;
 8001782:	4b6c      	ldr	r3, [pc, #432]	@ (8001934 <StartDefaultTask+0x1e4>)
 8001784:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    freeRTOS_allocator.deallocate = microros_deallocate;
 8001788:	4b6b      	ldr	r3, [pc, #428]	@ (8001938 <StartDefaultTask+0x1e8>)
 800178a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    freeRTOS_allocator.reallocate = microros_reallocate;
 800178e:	4b6b      	ldr	r3, [pc, #428]	@ (800193c <StartDefaultTask+0x1ec>)
 8001790:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001794:	4b6a      	ldr	r3, [pc, #424]	@ (8001940 <StartDefaultTask+0x1f0>)
 8001796:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    // Set default allocator
    if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800179a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800179e:	4618      	mov	r0, r3
 80017a0:	f01b f93e 	bl	801ca20 <rcutils_set_default_allocator>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f083 0301 	eor.w	r3, r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f040 80a7 	bne.w	8001900 <StartDefaultTask+0x1b0>
    rcl_allocator_t allocator;
    rclc_support_t support;
    rcl_node_t node;

    // Get default allocator
    allocator = rcl_get_default_allocator();
 80017b2:	463b      	mov	r3, r7
 80017b4:	4618      	mov	r0, r3
 80017b6:	f01b f951 	bl	801ca5c <rcutils_get_default_allocator>
 80017ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80017be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80017c2:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80017c6:	461d      	mov	r5, r3
 80017c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017cc:	682b      	ldr	r3, [r5, #0]
 80017ce:	6023      	str	r3, [r4, #0]

    // Initialize support
    rcl_ret_t support_ret = rclc_support_init(&support, 0, NULL, &allocator);
 80017d0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80017d4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	f01b f844 	bl	801c868 <rclc_support_init>
 80017e0:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c


    std_msgs__msg__UInt16MultiArray__init(&joy_msg);
 80017e4:	4857      	ldr	r0, [pc, #348]	@ (8001944 <StartDefaultTask+0x1f4>)
 80017e6:	f01b f9e9 	bl	801cbbc <std_msgs__msg__UInt16MultiArray__init>
    joy_msg.data.capacity = 4;
 80017ea:	4b56      	ldr	r3, [pc, #344]	@ (8001944 <StartDefaultTask+0x1f4>)
 80017ec:	2204      	movs	r2, #4
 80017ee:	619a      	str	r2, [r3, #24]
    joy_msg.data.data = (uint16_t *)malloc(sizeof(uint16_t) * joy_msg.data.capacity);
 80017f0:	4b54      	ldr	r3, [pc, #336]	@ (8001944 <StartDefaultTask+0x1f4>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4618      	mov	r0, r3
 80017f8:	f026 fdc4 	bl	8028384 <malloc>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	4b50      	ldr	r3, [pc, #320]	@ (8001944 <StartDefaultTask+0x1f4>)
 8001802:	611a      	str	r2, [r3, #16]
    rcl_ret_t node_ret = rclc_node_init_default(&node, "velocity_node", "", &support);
 8001804:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001808:	f107 0020 	add.w	r0, r7, #32
 800180c:	4a4e      	ldr	r2, [pc, #312]	@ (8001948 <StartDefaultTask+0x1f8>)
 800180e:	494f      	ldr	r1, [pc, #316]	@ (800194c <StartDefaultTask+0x1fc>)
 8001810:	f01b f874 	bl	801c8fc <rclc_node_init_default>
 8001814:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    if (node_ret != RCL_RET_OK) {
 8001818:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800181c:	2b00      	cmp	r3, #0
 800181e:	d171      	bne.n	8001904 <StartDefaultTask+0x1b4>
    }
    // Initialize message before subscription

    // Create subscriber

    rcl_ret_t sub_ret = rclc_subscription_init_default(
 8001820:	f01b f9fc 	bl	801cc1c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>
 8001824:	4602      	mov	r2, r0
 8001826:	f107 0120 	add.w	r1, r7, #32
 800182a:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 800182e:	4b48      	ldr	r3, [pc, #288]	@ (8001950 <StartDefaultTask+0x200>)
 8001830:	f01b f8a6 	bl	801c980 <rclc_subscription_init_default>
 8001834:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt16MultiArray),
        "joy_combined");


    // Create executor
    rcl_ret_t exec_ret = rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001838:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800183c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001840:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8001844:	2201      	movs	r2, #1
 8001846:	f01a fd2f 	bl	801c2a8 <rclc_executor_init>
 800184a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120


    // Add subscription to executor
    rcl_ret_t add_sub_ret = rclc_executor_add_subscription(
 800184e:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8001852:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8001856:	2300      	movs	r3, #0
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	4b3e      	ldr	r3, [pc, #248]	@ (8001954 <StartDefaultTask+0x204>)
 800185c:	4a39      	ldr	r2, [pc, #228]	@ (8001944 <StartDefaultTask+0x1f4>)
 800185e:	f01a fd9f 	bl	801c3a0 <rclc_executor_add_subscription>
 8001862:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
        &subscriber,
        &joy_msg,
        &subscription_callback,
        ON_NEW_DATA
    );
    if (add_sub_ret != RCL_RET_OK) {
 8001866:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800186a:	2b00      	cmp	r3, #0
 800186c:	d14c      	bne.n	8001908 <StartDefaultTask+0x1b8>
         return;
    }

    // Main task loop
    for (;;) {
        uint32_t free_heap = xPortGetFreeHeapSize();
 800186e:	f00a f871 	bl	800b954 <xPortGetFreeHeapSize>
 8001872:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        // Spin executor with error handling
        rcl_ret_t spin_ret = rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8001876:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800187a:	a327      	add	r3, pc, #156	@ (adr r3, 8001918 <StartDefaultTask+0x1c8>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	4608      	mov	r0, r1
 8001882:	f01a ffb7 	bl	801c7f4 <rclc_executor_spin_some>
 8001886:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        // Error handling
        switch(spin_ret) {
 800188a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800188e:	2b0b      	cmp	r3, #11
 8001890:	d82e      	bhi.n	80018f0 <StartDefaultTask+0x1a0>
 8001892:	a201      	add	r2, pc, #4	@ (adr r2, 8001898 <StartDefaultTask+0x148>)
 8001894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001898:	080018c9 	.word	0x080018c9
 800189c:	080018d9 	.word	0x080018d9
 80018a0:	080018d1 	.word	0x080018d1
 80018a4:	080018f1 	.word	0x080018f1
 80018a8:	080018f1 	.word	0x080018f1
 80018ac:	080018f1 	.word	0x080018f1
 80018b0:	080018f1 	.word	0x080018f1
 80018b4:	080018f1 	.word	0x080018f1
 80018b8:	080018f1 	.word	0x080018f1
 80018bc:	080018f1 	.word	0x080018f1
 80018c0:	080018e1 	.word	0x080018e1
 80018c4:	080018e9 	.word	0x080018e9
                   case RCL_RET_OK:
                	   error=10;
 80018c8:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <StartDefaultTask+0x208>)
 80018ca:	220a      	movs	r2, #10
 80018cc:	601a      	str	r2, [r3, #0]
                       // Normal operation
                       break;
 80018ce:	e013      	b.n	80018f8 <StartDefaultTask+0x1a8>

                   case RCL_RET_TIMEOUT:
                        error=0;
 80018d0:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <StartDefaultTask+0x208>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
                       break;
 80018d6:	e00f      	b.n	80018f8 <StartDefaultTask+0x1a8>

                   case RCL_RET_ERROR:
                        error=1;
 80018d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <StartDefaultTask+0x208>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
                       break;
 80018de:	e00b      	b.n	80018f8 <StartDefaultTask+0x1a8>

                   case RCL_RET_BAD_ALLOC:
                        error=2;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <StartDefaultTask+0x208>)
 80018e2:	2202      	movs	r2, #2
 80018e4:	601a      	str	r2, [r3, #0]
                       break;
 80018e6:	e007      	b.n	80018f8 <StartDefaultTask+0x1a8>

                   case RCL_RET_INVALID_ARGUMENT:

                       error=3;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <StartDefaultTask+0x208>)
 80018ea:	2203      	movs	r2, #3
 80018ec:	601a      	str	r2, [r3, #0]
                       break;
 80018ee:	e003      	b.n	80018f8 <StartDefaultTask+0x1a8>

                   default:

                       error=4;
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <StartDefaultTask+0x208>)
 80018f2:	2204      	movs	r2, #4
 80018f4:	601a      	str	r2, [r3, #0]
                       break;
 80018f6:	bf00      	nop
               }


        // Small delay to prevent task blocking
        osDelay(10);
 80018f8:	200a      	movs	r0, #10
 80018fa:	f006 ff0f 	bl	800871c <osDelay>
    for (;;) {
 80018fe:	e7b6      	b.n	800186e <StartDefaultTask+0x11e>
         return;  // Exit if allocator setup fails
 8001900:	bf00      	nop
 8001902:	e002      	b.n	800190a <StartDefaultTask+0x1ba>
         return;
 8001904:	bf00      	nop
 8001906:	e000      	b.n	800190a <StartDefaultTask+0x1ba>
         return;
 8001908:	bf00      	nop
    }
    /* USER CODE END 5 */
}
 800190a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800190e:	46bd      	mov	sp, r7
 8001910:	bdb0      	pop	{r4, r5, r7, pc}
 8001912:	bf00      	nop
 8001914:	f3af 8000 	nop.w
 8001918:	05f5e100 	.word	0x05f5e100
 800191c:	00000000 	.word	0x00000000
 8001920:	08002379 	.word	0x08002379
 8001924:	08002305 	.word	0x08002305
 8001928:	080022d1 	.word	0x080022d1
 800192c:	08002275 	.word	0x08002275
 8001930:	0802b5f0 	.word	0x0802b5f0
 8001934:	0800198d 	.word	0x0800198d
 8001938:	080019d1 	.word	0x080019d1
 800193c:	08001a09 	.word	0x08001a09
 8001940:	08001a75 	.word	0x08001a75
 8001944:	200192b0 	.word	0x200192b0
 8001948:	0802b600 	.word	0x0802b600
 800194c:	0802b604 	.word	0x0802b604
 8001950:	0802b614 	.word	0x0802b614
 8001954:	080016fd 	.word	0x080016fd
 8001958:	200192cc 	.word	0x200192cc

0800195c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a04      	ldr	r2, [pc, #16]	@ (800197c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800196e:	f000 fe87 	bl	8002680 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40010000 	.word	0x40010000

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <Error_Handler+0x8>

0800198c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001996:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <microros_allocate+0x3c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <microros_allocate+0x3c>)
 80019a4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <microros_allocate+0x40>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <microros_allocate+0x40>)
 80019b4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff faee 	bl	8000f98 <pvPortMallocMicroROS>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200192d8 	.word	0x200192d8
 80019cc:	200192dc 	.word	0x200192dc

080019d0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00c      	beq.n	80019fa <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff fba7 	bl	8001134 <getBlockSize>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a06      	ldr	r2, [pc, #24]	@ (8001a04 <microros_deallocate+0x34>)
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <microros_deallocate+0x34>)
 80019f2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fb63 	bl	80010c0 <vPortFreeMicroROS>
  }
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200192dc 	.word	0x200192dc

08001a08 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <microros_reallocate+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <microros_reallocate+0x64>)
 8001a22:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001a24:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <microros_reallocate+0x68>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <microros_reallocate+0x68>)
 8001a32:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d104      	bne.n	8001a44 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001a3a:	68b8      	ldr	r0, [r7, #8]
 8001a3c:	f7ff faac 	bl	8000f98 <pvPortMallocMicroROS>
 8001a40:	4603      	mov	r3, r0
 8001a42:	e00e      	b.n	8001a62 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f7ff fb75 	bl	8001134 <getBlockSize>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a08      	ldr	r2, [pc, #32]	@ (8001a70 <microros_reallocate+0x68>)
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <microros_reallocate+0x68>)
 8001a56:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff fb88 	bl	8001170 <pvPortReallocMicroROS>
 8001a60:	4603      	mov	r3, r0
  }
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200192d8 	.word	0x200192d8
 8001a70:	200192dc 	.word	0x200192dc

08001a74 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
 8001a88:	4a0c      	ldr	r2, [pc, #48]	@ (8001abc <microros_zero_allocate+0x48>)
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <microros_zero_allocate+0x48>)
 8001a92:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	4a08      	ldr	r2, [pc, #32]	@ (8001ac0 <microros_zero_allocate+0x4c>)
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <microros_zero_allocate+0x4c>)
 8001aa6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff fb8d 	bl	80011ca <pvPortCallocMicroROS>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200192d8 	.word	0x200192d8
 8001ac0:	200192dc 	.word	0x200192dc
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001ac8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001ada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ade:	a320      	add	r3, pc, #128	@ (adr r3, 8001b60 <UTILS_NanosecondsToTimespec+0x98>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7ff f890 	bl	8000c08 <__aeabi_ldivmod>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001af2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001af6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001b60 <UTILS_NanosecondsToTimespec+0x98>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f7ff f884 	bl	8000c08 <__aeabi_ldivmod>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	da20      	bge.n	8001b4e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a11      	ldr	r2, [pc, #68]	@ (8001b58 <UTILS_NanosecondsToTimespec+0x90>)
 8001b12:	fb82 1203 	smull	r1, r2, r2, r3
 8001b16:	1712      	asrs	r2, r2, #28
 8001b18:	17db      	asrs	r3, r3, #31
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	6979      	ldr	r1, [r7, #20]
 8001b28:	17c8      	asrs	r0, r1, #31
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	4605      	mov	r5, r0
 8001b2e:	ebb2 0804 	subs.w	r8, r2, r4
 8001b32:	eb63 0905 	sbc.w	r9, r3, r5
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	4906      	ldr	r1, [pc, #24]	@ (8001b5c <UTILS_NanosecondsToTimespec+0x94>)
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	441a      	add	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
    }
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b58:	44b82fa1 	.word	0x44b82fa1
 8001b5c:	3b9aca00 	.word	0x3b9aca00
 8001b60:	3b9aca00 	.word	0x3b9aca00
 8001b64:	00000000 	.word	0x00000000

08001b68 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b6c:	b08e      	sub	sp, #56	@ 0x38
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6278      	str	r0, [r7, #36]	@ 0x24
 8001b72:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001b74:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001b78:	2300      	movs	r3, #0
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001b8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f008 fe76 	bl	800a880 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b96:	17da      	asrs	r2, r3, #31
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	61fa      	str	r2, [r7, #28]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	69b9      	ldr	r1, [r7, #24]
 8001ba6:	000b      	movs	r3, r1
 8001ba8:	2200      	movs	r2, #0
 8001baa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	461c      	mov	r4, r3
 8001bb4:	4615      	mov	r5, r2
 8001bb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bba:	1911      	adds	r1, r2, r4
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	416b      	adcs	r3, r5
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001bc6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001bca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	f04f 0400 	mov.w	r4, #0
 8001bd6:	f04f 0500 	mov.w	r5, #0
 8001bda:	015d      	lsls	r5, r3, #5
 8001bdc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001be0:	0154      	lsls	r4, r2, #5
 8001be2:	4622      	mov	r2, r4
 8001be4:	462b      	mov	r3, r5
 8001be6:	ebb2 0800 	subs.w	r8, r2, r0
 8001bea:	eb63 0901 	sbc.w	r9, r3, r1
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001bfa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001bfe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001c02:	4690      	mov	r8, r2
 8001c04:	4699      	mov	r9, r3
 8001c06:	eb18 0a00 	adds.w	sl, r8, r0
 8001c0a:	eb49 0b01 	adc.w	fp, r9, r1
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c1a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c1e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c22:	ebb2 040a 	subs.w	r4, r2, sl
 8001c26:	603c      	str	r4, [r7, #0]
 8001c28:	eb63 030b 	sbc.w	r3, r3, fp
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c32:	4623      	mov	r3, r4
 8001c34:	181b      	adds	r3, r3, r0
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	462b      	mov	r3, r5
 8001c3a:	eb41 0303 	adc.w	r3, r1, r3
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	6a3a      	ldr	r2, [r7, #32]
 8001c42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c46:	f7ff ff3f 	bl	8001ac8 <UTILS_NanosecondsToTimespec>

    return 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3738      	adds	r7, #56	@ 0x38
 8001c50:	46bd      	mov	sp, r7
 8001c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	4a10      	ldr	r2, [pc, #64]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	210f      	movs	r1, #15
 8001c92:	f06f 0001 	mvn.w	r0, #1
 8001c96:	f000 fdef 	bl	8002878 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0aa      	sub	sp, #168	@ 0xa8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	2284      	movs	r2, #132	@ 0x84
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f027 fcab 	bl	8029624 <memset>
  if(huart->Instance==USART3)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a56      	ldr	r2, [pc, #344]	@ (8001e2c <HAL_UART_MspInit+0x184>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	f040 80a4 	bne.w	8001e22 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cde:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 fc2f 	bl	800554c <HAL_RCCEx_PeriphCLKConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001cf4:	f7ff fe44 	bl	8001980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8001e30 <HAL_UART_MspInit+0x188>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	4a4c      	ldr	r2, [pc, #304]	@ (8001e30 <HAL_UART_MspInit+0x188>)
 8001cfe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d04:	4b4a      	ldr	r3, [pc, #296]	@ (8001e30 <HAL_UART_MspInit+0x188>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d10:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <HAL_UART_MspInit+0x188>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d14:	4a46      	ldr	r2, [pc, #280]	@ (8001e30 <HAL_UART_MspInit+0x188>)
 8001d16:	f043 0308 	orr.w	r3, r3, #8
 8001d1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1c:	4b44      	ldr	r3, [pc, #272]	@ (8001e30 <HAL_UART_MspInit+0x188>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d42:	2307      	movs	r3, #7
 8001d44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d48:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4839      	ldr	r0, [pc, #228]	@ (8001e34 <HAL_UART_MspInit+0x18c>)
 8001d50:	f002 fba0 	bl	8004494 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d54:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <HAL_UART_MspInit+0x190>)
 8001d56:	4a39      	ldr	r2, [pc, #228]	@ (8001e3c <HAL_UART_MspInit+0x194>)
 8001d58:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001d5a:	4b37      	ldr	r3, [pc, #220]	@ (8001e38 <HAL_UART_MspInit+0x190>)
 8001d5c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d60:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d62:	4b35      	ldr	r3, [pc, #212]	@ (8001e38 <HAL_UART_MspInit+0x190>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d68:	4b33      	ldr	r3, [pc, #204]	@ (8001e38 <HAL_UART_MspInit+0x190>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d6e:	4b32      	ldr	r3, [pc, #200]	@ (8001e38 <HAL_UART_MspInit+0x190>)
 8001d70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d74:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d76:	4b30      	ldr	r3, [pc, #192]	@ (8001e38 <HAL_UART_MspInit+0x190>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <HAL_UART_MspInit+0x190>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001d82:	4b2d      	ldr	r3, [pc, #180]	@ (8001e38 <HAL_UART_MspInit+0x190>)
 8001d84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d88:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e38 <HAL_UART_MspInit+0x190>)
 8001d8c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d90:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d92:	4b29      	ldr	r3, [pc, #164]	@ (8001e38 <HAL_UART_MspInit+0x190>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d98:	4827      	ldr	r0, [pc, #156]	@ (8001e38 <HAL_UART_MspInit+0x190>)
 8001d9a:	f000 fd97 	bl	80028cc <HAL_DMA_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001da4:	f7ff fdec 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a23      	ldr	r2, [pc, #140]	@ (8001e38 <HAL_UART_MspInit+0x190>)
 8001dac:	675a      	str	r2, [r3, #116]	@ 0x74
 8001dae:	4a22      	ldr	r2, [pc, #136]	@ (8001e38 <HAL_UART_MspInit+0x190>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001db4:	4b22      	ldr	r3, [pc, #136]	@ (8001e40 <HAL_UART_MspInit+0x198>)
 8001db6:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <HAL_UART_MspInit+0x19c>)
 8001db8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001dba:	4b21      	ldr	r3, [pc, #132]	@ (8001e40 <HAL_UART_MspInit+0x198>)
 8001dbc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dc0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e40 <HAL_UART_MspInit+0x198>)
 8001dc4:	2240      	movs	r2, #64	@ 0x40
 8001dc6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <HAL_UART_MspInit+0x198>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <HAL_UART_MspInit+0x198>)
 8001dd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dd4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <HAL_UART_MspInit+0x198>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <HAL_UART_MspInit+0x198>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001de2:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <HAL_UART_MspInit+0x198>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001de8:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <HAL_UART_MspInit+0x198>)
 8001dea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001dee:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001df0:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <HAL_UART_MspInit+0x198>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001df6:	4812      	ldr	r0, [pc, #72]	@ (8001e40 <HAL_UART_MspInit+0x198>)
 8001df8:	f000 fd68 	bl	80028cc <HAL_DMA_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8001e02:	f7ff fdbd 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <HAL_UART_MspInit+0x198>)
 8001e0a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e40 <HAL_UART_MspInit+0x198>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2105      	movs	r1, #5
 8001e16:	2027      	movs	r0, #39	@ 0x27
 8001e18:	f000 fd2e 	bl	8002878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e1c:	2027      	movs	r0, #39	@ 0x27
 8001e1e:	f000 fd47 	bl	80028b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001e22:	bf00      	nop
 8001e24:	37a8      	adds	r7, #168	@ 0xa8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40004800 	.word	0x40004800
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	20018d0c 	.word	0x20018d0c
 8001e3c:	40026028 	.word	0x40026028
 8001e40:	20018d6c 	.word	0x20018d6c
 8001e44:	40026058 	.word	0x40026058

08001e48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b0ac      	sub	sp, #176	@ 0xb0
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e60:	f107 0318 	add.w	r3, r7, #24
 8001e64:	2284      	movs	r2, #132	@ 0x84
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f027 fbdb 	bl	8029624 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e76:	d159      	bne.n	8001f2c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001e78:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e84:	f107 0318 	add.w	r3, r7, #24
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 fb5f 	bl	800554c <HAL_RCCEx_PeriphCLKConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001e94:	f7ff fd74 	bl	8001980 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	4b26      	ldr	r3, [pc, #152]	@ (8001f34 <HAL_PCD_MspInit+0xec>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9c:	4a25      	ldr	r2, [pc, #148]	@ (8001f34 <HAL_PCD_MspInit+0xec>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea4:	4b23      	ldr	r3, [pc, #140]	@ (8001f34 <HAL_PCD_MspInit+0xec>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001eb0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001eb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001eca:	230a      	movs	r3, #10
 8001ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4818      	ldr	r0, [pc, #96]	@ (8001f38 <HAL_PCD_MspInit+0xf0>)
 8001ed8:	f002 fadc 	bl	8004494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001edc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4810      	ldr	r0, [pc, #64]	@ (8001f38 <HAL_PCD_MspInit+0xf0>)
 8001ef8:	f002 facc 	bl	8004494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001efc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_PCD_MspInit+0xec>)
 8001efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f00:	4a0c      	ldr	r2, [pc, #48]	@ (8001f34 <HAL_PCD_MspInit+0xec>)
 8001f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f06:	6353      	str	r3, [r2, #52]	@ 0x34
 8001f08:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_PCD_MspInit+0xec>)
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <HAL_PCD_MspInit+0xec>)
 8001f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f18:	4a06      	ldr	r2, [pc, #24]	@ (8001f34 <HAL_PCD_MspInit+0xec>)
 8001f1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f20:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <HAL_PCD_MspInit+0xec>)
 8001f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001f2c:	bf00      	nop
 8001f2e:	37b0      	adds	r7, #176	@ 0xb0
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020000 	.word	0x40020000

08001f3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08c      	sub	sp, #48	@ 0x30
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800200c <HAL_InitTick+0xd0>)
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f50:	4a2e      	ldr	r2, [pc, #184]	@ (800200c <HAL_InitTick+0xd0>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f58:	4b2c      	ldr	r3, [pc, #176]	@ (800200c <HAL_InitTick+0xd0>)
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f64:	f107 020c 	add.w	r2, r7, #12
 8001f68:	f107 0310 	add.w	r3, r7, #16
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 faba 	bl	80054e8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001f74:	f003 faa4 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f80:	4a23      	ldr	r2, [pc, #140]	@ (8002010 <HAL_InitTick+0xd4>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	0c9b      	lsrs	r3, r3, #18
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f8c:	4b21      	ldr	r3, [pc, #132]	@ (8002014 <HAL_InitTick+0xd8>)
 8001f8e:	4a22      	ldr	r2, [pc, #136]	@ (8002018 <HAL_InitTick+0xdc>)
 8001f90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f92:	4b20      	ldr	r3, [pc, #128]	@ (8002014 <HAL_InitTick+0xd8>)
 8001f94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002014 <HAL_InitTick+0xd8>)
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8002014 <HAL_InitTick+0xd8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <HAL_InitTick+0xd8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fac:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_InitTick+0xd8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001fb2:	4818      	ldr	r0, [pc, #96]	@ (8002014 <HAL_InitTick+0xd8>)
 8001fb4:	f003 feba 	bl	8005d2c <HAL_TIM_Base_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d11b      	bne.n	8001ffe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001fc6:	4813      	ldr	r0, [pc, #76]	@ (8002014 <HAL_InitTick+0xd8>)
 8001fc8:	f003 ff12 	bl	8005df0 <HAL_TIM_Base_Start_IT>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d111      	bne.n	8001ffe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fda:	2019      	movs	r0, #25
 8001fdc:	f000 fc68 	bl	80028b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b0f      	cmp	r3, #15
 8001fe4:	d808      	bhi.n	8001ff8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	2019      	movs	r0, #25
 8001fec:	f000 fc44 	bl	8002878 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <HAL_InitTick+0xe0>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e002      	b.n	8001ffe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002002:	4618      	mov	r0, r3
 8002004:	3730      	adds	r7, #48	@ 0x30
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	431bde83 	.word	0x431bde83
 8002014:	200192e0 	.word	0x200192e0
 8002018:	40010000 	.word	0x40010000
 800201c:	2000000c 	.word	0x2000000c

08002020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <NMI_Handler+0x4>

08002028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <HardFault_Handler+0x4>

08002030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <MemManage_Handler+0x4>

08002038 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <BusFault_Handler+0x4>

08002040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <UsageFault_Handler+0x4>

08002048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <DMA1_Stream1_IRQHandler+0x10>)
 800205e:	f000 fd75 	bl	8002b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20018d0c 	.word	0x20018d0c

0800206c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <DMA1_Stream3_IRQHandler+0x10>)
 8002072:	f000 fd6b 	bl	8002b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20018d6c 	.word	0x20018d6c

08002080 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002086:	f003 ff2b 	bl	8005ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200192e0 	.word	0x200192e0

08002094 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <USART3_IRQHandler+0x10>)
 800209a:	f004 f969 	bl	8006370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20018c84 	.word	0x20018c84

080020a8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80020ac:	4802      	ldr	r0, [pc, #8]	@ (80020b8 <ETH_IRQHandler+0x10>)
 80020ae:	f001 fb17 	bl	80036e0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2001dd44 	.word	0x2001dd44

080020bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return 1;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_kill>:

int _kill(int pid, int sig)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020d6:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <_kill+0x20>)
 80020d8:	2216      	movs	r2, #22
 80020da:	601a      	str	r2, [r3, #0]
  return -1;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	20047370 	.word	0x20047370

080020f0 <_exit>:

void _exit (int status)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ffe5 	bl	80020cc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002102:	bf00      	nop
 8002104:	e7fd      	b.n	8002102 <_exit+0x12>

08002106 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	e00a      	b.n	800212e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002118:	f3af 8000 	nop.w
 800211c:	4601      	mov	r1, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	60ba      	str	r2, [r7, #8]
 8002124:	b2ca      	uxtb	r2, r1
 8002126:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	429a      	cmp	r2, r3
 8002134:	dbf0      	blt.n	8002118 <_read+0x12>
  }

  return len;
 8002136:	687b      	ldr	r3, [r7, #4]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e009      	b.n	8002166 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	60ba      	str	r2, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	dbf1      	blt.n	8002152 <_write+0x12>
  }
  return len;
 800216e:	687b      	ldr	r3, [r7, #4]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <_close>:

int _close(int file)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021a0:	605a      	str	r2, [r3, #4]
  return 0;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_isatty>:

int _isatty(int file)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e8:	4a14      	ldr	r2, [pc, #80]	@ (800223c <_sbrk+0x5c>)
 80021ea:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <_sbrk+0x60>)
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f4:	4b13      	ldr	r3, [pc, #76]	@ (8002244 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021fc:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <_sbrk+0x64>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	@ (8002248 <_sbrk+0x68>)
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002202:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	429a      	cmp	r2, r3
 800220e:	d205      	bcs.n	800221c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002210:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <_sbrk+0x6c>)
 8002212:	220c      	movs	r2, #12
 8002214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800221a:	e009      	b.n	8002230 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800221c:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002222:	4b08      	ldr	r3, [pc, #32]	@ (8002244 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	4a06      	ldr	r2, [pc, #24]	@ (8002244 <_sbrk+0x64>)
 800222c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222e:	68fb      	ldr	r3, [r7, #12]
}
 8002230:	4618      	mov	r0, r3
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	20050000 	.word	0x20050000
 8002240:	00000400 	.word	0x00000400
 8002244:	20019330 	.word	0x20019330
 8002248:	20047378 	.word	0x20047378
 800224c:	20047370 	.word	0x20047370

08002250 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <SystemInit+0x20>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	4a05      	ldr	r2, [pc, #20]	@ (8002270 <SystemInit+0x20>)
 800225c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <cubemx_transport_open_udp>:

// --- micro-ROS Transports ---
#define UDP_PORT        8888
static int sock_fd = -1;

bool cubemx_transport_open_udp(struct uxrCustomTransport * transport){
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    sock_fd = socket(AF_INET, SOCK_DGRAM, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2102      	movs	r1, #2
 8002280:	2002      	movs	r0, #2
 8002282:	f00c fbab 	bl	800e9dc <lwip_socket>
 8002286:	4603      	mov	r3, r0
 8002288:	4a10      	ldr	r2, [pc, #64]	@ (80022cc <cubemx_transport_open_udp+0x58>)
 800228a:	6013      	str	r3, [r2, #0]
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
 800228c:	2302      	movs	r3, #2
 800228e:	727b      	strb	r3, [r7, #9]
    addr.sin_port = htons(UDP_PORT);
 8002290:	f242 20b8 	movw	r0, #8888	@ 0x22b8
 8002294:	f00d fb7e 	bl	800f994 <lwip_htons>
 8002298:	4603      	mov	r3, r0
 800229a:	817b      	strh	r3, [r7, #10]
    addr.sin_addr.s_addr = htonl(INADDR_ANY);
 800229c:	2000      	movs	r0, #0
 800229e:	f00d fb8e 	bl	800f9be <lwip_htonl>
 80022a2:	4603      	mov	r3, r0
 80022a4:	60fb      	str	r3, [r7, #12]
    
    if (bind(sock_fd, (struct sockaddr *)&addr, sizeof(addr)) == -1)
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <cubemx_transport_open_udp+0x58>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f107 0108 	add.w	r1, r7, #8
 80022ae:	2210      	movs	r2, #16
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00b fe8f 	bl	800dfd4 <lwip_bind>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022bc:	d101      	bne.n	80022c2 <cubemx_transport_open_udp+0x4e>
    {
        return false;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <cubemx_transport_open_udp+0x50>
    }

    return true;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000008 	.word	0x20000008

080022d0 <cubemx_transport_close_udp>:

bool cubemx_transport_close_udp(struct uxrCustomTransport * transport){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    if (sock_fd != -1)
 80022d8:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <cubemx_transport_close_udp+0x30>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022e0:	d008      	beq.n	80022f4 <cubemx_transport_close_udp+0x24>
    {
        closesocket(sock_fd);
 80022e2:	4b07      	ldr	r3, [pc, #28]	@ (8002300 <cubemx_transport_close_udp+0x30>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f00b fee2 	bl	800e0b0 <lwip_close>
        sock_fd = -1;
 80022ec:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <cubemx_transport_close_udp+0x30>)
 80022ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022f2:	601a      	str	r2, [r3, #0]
    }
    return true;
 80022f4:	2301      	movs	r3, #1
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000008 	.word	0x20000008

08002304 <cubemx_transport_write_udp>:

size_t cubemx_transport_write_udp(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002304:	b580      	push	{r7, lr}
 8002306:	b08e      	sub	sp, #56	@ 0x38
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
    if (sock_fd == -1)
 8002312:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <cubemx_transport_write_udp+0x70>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800231a:	d101      	bne.n	8002320 <cubemx_transport_write_udp+0x1c>
    {
        return 0;
 800231c:	2300      	movs	r3, #0
 800231e:	e024      	b.n	800236a <cubemx_transport_write_udp+0x66>
    }
    const char * ip_addr = (const char*) transport->args;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
 8002328:	2302      	movs	r3, #2
 800232a:	757b      	strb	r3, [r7, #21]
    addr.sin_port = htons(UDP_PORT);
 800232c:	f242 20b8 	movw	r0, #8888	@ 0x22b8
 8002330:	f00d fb30 	bl	800f994 <lwip_htons>
 8002334:	4603      	mov	r3, r0
 8002336:	82fb      	strh	r3, [r7, #22]
    addr.sin_addr.s_addr = inet_addr(ip_addr);
 8002338:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800233a:	f018 fa62 	bl	801a802 <ipaddr_addr>
 800233e:	4603      	mov	r3, r0
 8002340:	61bb      	str	r3, [r7, #24]
    int ret = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	62bb      	str	r3, [r7, #40]	@ 0x28
    ret = sendto(sock_fd, buf, len, 0, (struct sockaddr *)&addr, sizeof(addr));
 8002346:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <cubemx_transport_write_udp+0x70>)
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	2310      	movs	r3, #16
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	2300      	movs	r3, #0
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	f00c fa8d 	bl	800e878 <lwip_sendto>
 800235e:	62b8      	str	r0, [r7, #40]	@ 0x28
    size_t writed = ret>0? ret:0;
 8002360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002362:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24

    return writed;
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800236a:	4618      	mov	r0, r3
 800236c:	3730      	adds	r7, #48	@ 0x30
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000008 	.word	0x20000008

08002378 <cubemx_transport_read_udp>:

size_t cubemx_transport_read_udp(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b08c      	sub	sp, #48	@ 0x30
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]

    int ret = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
    //set timeout
    struct timeval tv_out;
    tv_out.tv_sec = timeout / 1000;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	4a1c      	ldr	r2, [pc, #112]	@ (8002400 <cubemx_transport_read_udp+0x88>)
 800238e:	fb82 1203 	smull	r1, r2, r2, r3
 8002392:	1192      	asrs	r2, r2, #6
 8002394:	17db      	asrs	r3, r3, #31
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	17da      	asrs	r2, r3, #31
 800239a:	461c      	mov	r4, r3
 800239c:	4615      	mov	r5, r2
 800239e:	e9c7 4504 	strd	r4, r5, [r7, #16]
    tv_out.tv_usec = (timeout % 1000) * 1000;
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <cubemx_transport_read_udp+0x88>)
 80023a6:	fb83 1302 	smull	r1, r3, r3, r2
 80023aa:	1199      	asrs	r1, r3, #6
 80023ac:	17d3      	asrs	r3, r2, #31
 80023ae:	1acb      	subs	r3, r1, r3
 80023b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	61bb      	str	r3, [r7, #24]
    setsockopt(sock_fd, SOL_SOCKET, SO_RCVTIMEO,&tv_out, sizeof(tv_out));
 80023c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <cubemx_transport_read_udp+0x8c>)
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	2210      	movs	r2, #16
 80023ce:	9200      	str	r2, [sp, #0]
 80023d0:	f241 0206 	movw	r2, #4102	@ 0x1006
 80023d4:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80023d8:	f00c fd16 	bl	800ee08 <lwip_setsockopt>
    ret = recv(sock_fd, buf, len, MSG_WAITALL);
 80023dc:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <cubemx_transport_read_udp+0x8c>)
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	2302      	movs	r3, #2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	f00c f9d3 	bl	800e790 <lwip_recv>
 80023ea:	6278      	str	r0, [r7, #36]	@ 0x24
    size_t readed = ret > 0 ? ret : 0;
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80023f2:	623b      	str	r3, [r7, #32]
    return readed;
 80023f4:	6a3b      	ldr	r3, [r7, #32]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3728      	adds	r7, #40	@ 0x28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bdb0      	pop	{r4, r5, r7, pc}
 80023fe:	bf00      	nop
 8002400:	10624dd3 	.word	0x10624dd3
 8002404:	20000008 	.word	0x20000008

08002408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002408:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002440 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800240c:	f7ff ff20 	bl	8002250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002410:	480c      	ldr	r0, [pc, #48]	@ (8002444 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002412:	490d      	ldr	r1, [pc, #52]	@ (8002448 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002414:	4a0d      	ldr	r2, [pc, #52]	@ (800244c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002418:	e002      	b.n	8002420 <LoopCopyDataInit>

0800241a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800241c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241e:	3304      	adds	r3, #4

08002420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002424:	d3f9      	bcc.n	800241a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002426:	4a0a      	ldr	r2, [pc, #40]	@ (8002450 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002428:	4c0a      	ldr	r4, [pc, #40]	@ (8002454 <LoopFillZerobss+0x22>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800242c:	e001      	b.n	8002432 <LoopFillZerobss>

0800242e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002430:	3204      	adds	r2, #4

08002432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002434:	d3fb      	bcc.n	800242e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002436:	f027 f9e9 	bl	802980c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243a:	f7fe ffa9 	bl	8001390 <main>
  bx  lr    
 800243e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002440:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002448:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 800244c:	08030540 	.word	0x08030540
  ldr r2, =_sbss
 8002450:	200005b0 	.word	0x200005b0
  ldr r4, =_ebss
 8002454:	20047378 	.word	0x20047378

08002458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002458:	e7fe      	b.n	8002458 <ADC_IRQHandler>

0800245a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <LAN8742_RegisterBusIO+0x28>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <LAN8742_RegisterBusIO+0x28>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <LAN8742_RegisterBusIO+0x28>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d102      	bne.n	8002488 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002486:	e014      	b.n	80024b2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d139      	bne.n	800254e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	e01c      	b.n	800252e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	f107 020c 	add.w	r2, r7, #12
 80024fc:	2112      	movs	r1, #18
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	4798      	blx	r3
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	da03      	bge.n	8002510 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002508:	f06f 0304 	mvn.w	r3, #4
 800250c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800250e:	e00b      	b.n	8002528 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	429a      	cmp	r2, r3
 800251a:	d105      	bne.n	8002528 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
         break;
 8002526:	e005      	b.n	8002534 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3301      	adds	r3, #1
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b1f      	cmp	r3, #31
 8002532:	d9df      	bls.n	80024f4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b1f      	cmp	r3, #31
 800253a:	d902      	bls.n	8002542 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800253c:	f06f 0302 	mvn.w	r3, #2
 8002540:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800254e:	693b      	ldr	r3, [r7, #16]
 }
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6810      	ldr	r0, [r2, #0]
 800256c:	f107 020c 	add.w	r2, r7, #12
 8002570:	2101      	movs	r1, #1
 8002572:	4798      	blx	r3
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	da02      	bge.n	8002580 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800257a:	f06f 0304 	mvn.w	r3, #4
 800257e:	e06e      	b.n	800265e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6810      	ldr	r0, [r2, #0]
 8002588:	f107 020c 	add.w	r2, r7, #12
 800258c:	2101      	movs	r1, #1
 800258e:	4798      	blx	r3
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	da02      	bge.n	800259c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002596:	f06f 0304 	mvn.w	r3, #4
 800259a:	e060      	b.n	800265e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e059      	b.n	800265e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6810      	ldr	r0, [r2, #0]
 80025b2:	f107 020c 	add.w	r2, r7, #12
 80025b6:	2100      	movs	r1, #0
 80025b8:	4798      	blx	r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da02      	bge.n	80025c6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025c0:	f06f 0304 	mvn.w	r3, #4
 80025c4:	e04b      	b.n	800265e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d11b      	bne.n	8002608 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <LAN8742_GetLinkState+0x90>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80025e4:	2302      	movs	r3, #2
 80025e6:	e03a      	b.n	800265e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e033      	b.n	800265e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002600:	2304      	movs	r3, #4
 8002602:	e02c      	b.n	800265e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002604:	2305      	movs	r3, #5
 8002606:	e02a      	b.n	800265e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6810      	ldr	r0, [r2, #0]
 8002610:	f107 020c 	add.w	r2, r7, #12
 8002614:	211f      	movs	r1, #31
 8002616:	4798      	blx	r3
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	da02      	bge.n	8002624 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800261e:	f06f 0304 	mvn.w	r3, #4
 8002622:	e01c      	b.n	800265e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800262e:	2306      	movs	r3, #6
 8002630:	e015      	b.n	800265e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 031c 	and.w	r3, r3, #28
 8002638:	2b18      	cmp	r3, #24
 800263a:	d101      	bne.n	8002640 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800263c:	2302      	movs	r3, #2
 800263e:	e00e      	b.n	800265e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 031c 	and.w	r3, r3, #28
 8002646:	2b08      	cmp	r3, #8
 8002648:	d101      	bne.n	800264e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800264a:	2303      	movs	r3, #3
 800264c:	e007      	b.n	800265e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 031c 	and.w	r3, r3, #28
 8002654:	2b14      	cmp	r3, #20
 8002656:	d101      	bne.n	800265c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002658:	2304      	movs	r3, #4
 800265a:	e000      	b.n	800265e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800265c:	2305      	movs	r3, #5
    }
  }
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800266a:	2003      	movs	r0, #3
 800266c:	f000 f8f9 	bl	8002862 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002670:	200f      	movs	r0, #15
 8002672:	f7ff fc63 	bl	8001f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002676:	f7ff faef 	bl	8001c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <HAL_IncTick+0x20>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_IncTick+0x24>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4413      	add	r3, r2
 8002690:	4a04      	ldr	r2, [pc, #16]	@ (80026a4 <HAL_IncTick+0x24>)
 8002692:	6013      	str	r3, [r2, #0]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000010 	.word	0x20000010
 80026a4:	20019334 	.word	0x20019334

080026a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return uwTick;
 80026ac:	4b03      	ldr	r3, [pc, #12]	@ (80026bc <HAL_GetTick+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20019334 	.word	0x20019334

080026c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff ffee 	bl	80026a8 <HAL_GetTick>
 80026cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026d8:	d005      	beq.n	80026e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026da:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <HAL_Delay+0x44>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026e6:	bf00      	nop
 80026e8:	f7ff ffde 	bl	80026a8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d8f7      	bhi.n	80026e8 <HAL_Delay+0x28>
  {
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000010 	.word	0x20000010

08002708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <__NVIC_SetPriorityGrouping+0x40>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002724:	4013      	ands	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002730:	4b06      	ldr	r3, [pc, #24]	@ (800274c <__NVIC_SetPriorityGrouping+0x44>)
 8002732:	4313      	orrs	r3, r2
 8002734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002736:	4a04      	ldr	r2, [pc, #16]	@ (8002748 <__NVIC_SetPriorityGrouping+0x40>)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	60d3      	str	r3, [r2, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00
 800274c:	05fa0000 	.word	0x05fa0000

08002750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <__NVIC_GetPriorityGrouping+0x18>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0307 	and.w	r3, r3, #7
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db0b      	blt.n	8002796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4907      	ldr	r1, [pc, #28]	@ (80027a4 <__NVIC_EnableIRQ+0x38>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2001      	movs	r0, #1
 800278e:	fa00 f202 	lsl.w	r2, r0, r2
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000e100 	.word	0xe000e100

080027a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	6039      	str	r1, [r7, #0]
 80027b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	db0a      	blt.n	80027d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	490c      	ldr	r1, [pc, #48]	@ (80027f4 <__NVIC_SetPriority+0x4c>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	440b      	add	r3, r1
 80027cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d0:	e00a      	b.n	80027e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4908      	ldr	r1, [pc, #32]	@ (80027f8 <__NVIC_SetPriority+0x50>)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	3b04      	subs	r3, #4
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	440b      	add	r3, r1
 80027e6:	761a      	strb	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000e100 	.word	0xe000e100
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	@ 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f1c3 0307 	rsb	r3, r3, #7
 8002816:	2b04      	cmp	r3, #4
 8002818:	bf28      	it	cs
 800281a:	2304      	movcs	r3, #4
 800281c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3304      	adds	r3, #4
 8002822:	2b06      	cmp	r3, #6
 8002824:	d902      	bls.n	800282c <NVIC_EncodePriority+0x30>
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3b03      	subs	r3, #3
 800282a:	e000      	b.n	800282e <NVIC_EncodePriority+0x32>
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	401a      	ands	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002844:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	43d9      	mvns	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	4313      	orrs	r3, r2
         );
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	@ 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ff4c 	bl	8002708 <__NVIC_SetPriorityGrouping>
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800288a:	f7ff ff61 	bl	8002750 <__NVIC_GetPriorityGrouping>
 800288e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	6978      	ldr	r0, [r7, #20]
 8002896:	f7ff ffb1 	bl	80027fc <NVIC_EncodePriority>
 800289a:	4602      	mov	r2, r0
 800289c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff80 	bl	80027a8 <__NVIC_SetPriority>
}
 80028a8:	bf00      	nop
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff54 	bl	800276c <__NVIC_EnableIRQ>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028d8:	f7ff fee6 	bl	80026a8 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e099      	b.n	8002a1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002908:	e00f      	b.n	800292a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800290a:	f7ff fecd 	bl	80026a8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b05      	cmp	r3, #5
 8002916:	d908      	bls.n	800292a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2203      	movs	r2, #3
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e078      	b.n	8002a1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e8      	bne.n	800290a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4b38      	ldr	r3, [pc, #224]	@ (8002a24 <HAL_DMA_Init+0x158>)
 8002944:	4013      	ands	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002956:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	2b04      	cmp	r3, #4
 8002982:	d107      	bne.n	8002994 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298c:	4313      	orrs	r3, r2
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f023 0307 	bic.w	r3, r3, #7
 80029aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d117      	bne.n	80029ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00e      	beq.n	80029ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fa7b 	bl	8002ecc <DMA_CheckFifoParam>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2240      	movs	r2, #64	@ 0x40
 80029e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80029ea:	2301      	movs	r3, #1
 80029ec:	e016      	b.n	8002a1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fa32 	bl	8002e60 <DMA_CalcBaseAndBitshift>
 80029fc:	4603      	mov	r3, r0
 80029fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a04:	223f      	movs	r2, #63	@ 0x3f
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	f010803f 	.word	0xf010803f

08002a28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a36:	f7ff fe37 	bl	80026a8 <HAL_GetTick>
 8002a3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d008      	beq.n	8002a5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2280      	movs	r2, #128	@ 0x80
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e052      	b.n	8002b00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0216 	bic.w	r2, r2, #22
 8002a68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d103      	bne.n	8002a8a <HAL_DMA_Abort+0x62>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0208 	bic.w	r2, r2, #8
 8002a98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aaa:	e013      	b.n	8002ad4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aac:	f7ff fdfc 	bl	80026a8 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d90c      	bls.n	8002ad4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2220      	movs	r2, #32
 8002abe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e015      	b.n	8002b00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e4      	bne.n	8002aac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae6:	223f      	movs	r2, #63	@ 0x3f
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d004      	beq.n	8002b26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2280      	movs	r2, #128	@ 0x80
 8002b20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00c      	b.n	8002b40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2205      	movs	r2, #5
 8002b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002b58:	4b8e      	ldr	r3, [pc, #568]	@ (8002d94 <HAL_DMA_IRQHandler+0x248>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a8e      	ldr	r2, [pc, #568]	@ (8002d98 <HAL_DMA_IRQHandler+0x24c>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	0a9b      	lsrs	r3, r3, #10
 8002b64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b76:	2208      	movs	r2, #8
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01a      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0204 	bic.w	r2, r2, #4
 8002b9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d012      	beq.n	8002bee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00b      	beq.n	8002bee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bda:	2201      	movs	r2, #1
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	f043 0202 	orr.w	r2, r3, #2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d012      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c10:	2204      	movs	r2, #4
 8002c12:	409a      	lsls	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1c:	f043 0204 	orr.w	r2, r3, #4
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c28:	2210      	movs	r2, #16
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d043      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d03c      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c46:	2210      	movs	r2, #16
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d018      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d108      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d024      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
 8002c7a:	e01f      	b.n	8002cbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01b      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4798      	blx	r3
 8002c8c:	e016      	b.n	8002cbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0208 	bic.w	r2, r2, #8
 8002caa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 808f 	beq.w	8002dec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8087 	beq.w	8002dec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	d136      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0216 	bic.w	r2, r2, #22
 8002d04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d103      	bne.n	8002d26 <HAL_DMA_IRQHandler+0x1da>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d007      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0208 	bic.w	r2, r2, #8
 8002d34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	223f      	movs	r2, #63	@ 0x3f
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d07e      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
        }
        return;
 8002d62:	e079      	b.n	8002e58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01d      	beq.n	8002dae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10d      	bne.n	8002d9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d031      	beq.n	8002dec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
 8002d90:	e02c      	b.n	8002dec <HAL_DMA_IRQHandler+0x2a0>
 8002d92:	bf00      	nop
 8002d94:	20000004 	.word	0x20000004
 8002d98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d023      	beq.n	8002dec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
 8002dac:	e01e      	b.n	8002dec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10f      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0210 	bic.w	r2, r2, #16
 8002dca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d032      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d022      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2205      	movs	r2, #5
 8002e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d307      	bcc.n	8002e34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f2      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x2cc>
 8002e32:	e000      	b.n	8002e36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4798      	blx	r3
 8002e56:	e000      	b.n	8002e5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e58:	bf00      	nop
    }
  }
}
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	3b10      	subs	r3, #16
 8002e70:	4a13      	ldr	r2, [pc, #76]	@ (8002ec0 <DMA_CalcBaseAndBitshift+0x60>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e7a:	4a12      	ldr	r2, [pc, #72]	@ (8002ec4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d908      	bls.n	8002ea0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	1d1a      	adds	r2, r3, #4
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e9e:	e006      	b.n	8002eae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b08      	ldr	r3, [pc, #32]	@ (8002ec8 <DMA_CalcBaseAndBitshift+0x68>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	aaaaaaab 	.word	0xaaaaaaab
 8002ec4:	0802f388 	.word	0x0802f388
 8002ec8:	fffffc00 	.word	0xfffffc00

08002ecc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002edc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d11f      	bne.n	8002f26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d856      	bhi.n	8002f9a <DMA_CheckFifoParam+0xce>
 8002eec:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef4 <DMA_CheckFifoParam+0x28>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f17 	.word	0x08002f17
 8002efc:	08002f05 	.word	0x08002f05
 8002f00:	08002f9b 	.word	0x08002f9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d046      	beq.n	8002f9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f14:	e043      	b.n	8002f9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f1e:	d140      	bne.n	8002fa2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f24:	e03d      	b.n	8002fa2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f2e:	d121      	bne.n	8002f74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d837      	bhi.n	8002fa6 <DMA_CheckFifoParam+0xda>
 8002f36:	a201      	add	r2, pc, #4	@ (adr r2, 8002f3c <DMA_CheckFifoParam+0x70>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f53 	.word	0x08002f53
 8002f44:	08002f4d 	.word	0x08002f4d
 8002f48:	08002f65 	.word	0x08002f65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e030      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d025      	beq.n	8002faa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f62:	e022      	b.n	8002faa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f68:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f6c:	d11f      	bne.n	8002fae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f72:	e01c      	b.n	8002fae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d903      	bls.n	8002f82 <DMA_CheckFifoParam+0xb6>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d003      	beq.n	8002f88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f80:	e018      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
      break;
 8002f86:	e015      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      break;
 8002f98:	e00b      	b.n	8002fb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e00a      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e008      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e006      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e004      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop

08002fc4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e086      	b.n	80030e4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d106      	bne.n	8002fee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2223      	movs	r2, #35	@ 0x23
 8002fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f005 f83f 	bl	800806c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fee:	4b3f      	ldr	r3, [pc, #252]	@ (80030ec <HAL_ETH_Init+0x128>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff2:	4a3e      	ldr	r2, [pc, #248]	@ (80030ec <HAL_ETH_Init+0x128>)
 8002ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ffa:	4b3c      	ldr	r3, [pc, #240]	@ (80030ec <HAL_ETH_Init+0x128>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003006:	4b3a      	ldr	r3, [pc, #232]	@ (80030f0 <HAL_ETH_Init+0x12c>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4a39      	ldr	r2, [pc, #228]	@ (80030f0 <HAL_ETH_Init+0x12c>)
 800300c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003010:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003012:	4b37      	ldr	r3, [pc, #220]	@ (80030f0 <HAL_ETH_Init+0x12c>)
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4935      	ldr	r1, [pc, #212]	@ (80030f0 <HAL_ETH_Init+0x12c>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003020:	4b33      	ldr	r3, [pc, #204]	@ (80030f0 <HAL_ETH_Init+0x12c>)
 8003022:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800303a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800303c:	f7ff fb34 	bl	80026a8 <HAL_GetTick>
 8003040:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003042:	e011      	b.n	8003068 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003044:	f7ff fb30 	bl	80026a8 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003052:	d909      	bls.n	8003068 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2204      	movs	r2, #4
 8003058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	22e0      	movs	r2, #224	@ 0xe0
 8003060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e03d      	b.n	80030e4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e4      	bne.n	8003044 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 ff4e 	bl	8003f1c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fff9 	bl	8004078 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f001 f84f 	bl	800412a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	461a      	mov	r2, r3
 8003092:	2100      	movs	r1, #0
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 ffb7 	bl	8004008 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80030a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b0f      	ldr	r3, [pc, #60]	@ (80030f4 <HAL_ETH_Init+0x130>)
 80030b8:	430b      	orrs	r3, r1
 80030ba:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80030ce:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2210      	movs	r2, #16
 80030de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40013800 	.word	0x40013800
 80030f4:	00020060 	.word	0x00020060

080030f8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003106:	2b10      	cmp	r3, #16
 8003108:	d15f      	bne.n	80031ca <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2223      	movs	r2, #35	@ 0x23
 800310e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2204      	movs	r2, #4
 800311c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f9f6 	bl	8003510 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800312c:	2001      	movs	r0, #1
 800312e:	f7ff fac7 	bl	80026c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800314c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003150:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003168:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fd73 	bl	8003c56 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0208 	orr.w	r2, r2, #8
 800317e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003188:	2001      	movs	r0, #1
 800318a:	f7ff fa99 	bl	80026c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0204 	orr.w	r2, r2, #4
 80031a4:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031ae:	69d9      	ldr	r1, [r3, #28]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b07      	ldr	r3, [pc, #28]	@ (80031d4 <HAL_ETH_Start_IT+0xdc>)
 80031b6:	430b      	orrs	r3, r1
 80031b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031bc:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2223      	movs	r2, #35	@ 0x23
 80031c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	0001a0c1 	.word	0x0001a0c1

080031d8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031e6:	2b23      	cmp	r3, #35	@ 0x23
 80031e8:	d16e      	bne.n	80032c8 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2223      	movs	r2, #35	@ 0x23
 80031ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031fa:	69d9      	ldr	r1, [r3, #28]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b34      	ldr	r3, [pc, #208]	@ (80032d4 <HAL_ETH_Stop_IT+0xfc>)
 8003202:	400b      	ands	r3, r1
 8003204:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003208:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800321c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003220:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	f023 0302 	bic.w	r3, r3, #2
 8003234:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003238:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0204 	bic.w	r2, r2, #4
 8003248:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003252:	2001      	movs	r0, #1
 8003254:	f7ff fa34 	bl	80026c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fcf8 	bl	8003c56 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0208 	bic.w	r2, r2, #8
 8003274:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800327e:	2001      	movs	r0, #1
 8003280:	f7ff fa1e 	bl	80026c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e00e      	b.n	80032b0 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	3212      	adds	r2, #18
 8003298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800329c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	3301      	adds	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d9ed      	bls.n	8003292 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2210      	movs	r2, #16
 80032c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	e000      	b.n	80032ca <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
  }
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	fffe5f3e 	.word	0xfffe5f3e

080032d8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e045      	b.n	8003388 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003302:	2b23      	cmp	r3, #35	@ 0x23
 8003304:	d13f      	bne.n	8003386 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800330e:	2201      	movs	r2, #1
 8003310:	6839      	ldr	r1, [r7, #0]
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 ff78 	bl	8004208 <ETH_Prepare_Tx_Descriptors>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003324:	f043 0202 	orr.w	r2, r3, #2
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e02a      	b.n	8003388 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003332:	f3bf 8f4f 	dsb	sy
}
 8003336:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	629a      	str	r2, [r3, #40]	@ 0x28
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003346:	2b03      	cmp	r3, #3
 8003348:	d904      	bls.n	8003354 <HAL_ETH_Transmit_IT+0x7c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334e:	1f1a      	subs	r2, r3, #4
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800336e:	461a      	mov	r2, r3
 8003370:	2304      	movs	r3, #4
 8003372:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800337c:	461a      	mov	r2, r3
 800337e:	2300      	movs	r3, #0
 8003380:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e000      	b.n	8003388 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
  }
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d109      	bne.n	80033bc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0a4      	b.n	8003506 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033c2:	2b23      	cmp	r3, #35	@ 0x23
 80033c4:	d001      	beq.n	80033ca <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e09d      	b.n	8003506 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ce:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	3212      	adds	r2, #18
 80033d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033da:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033e0:	f1c3 0304 	rsb	r3, r3, #4
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80033e6:	e066      	b.n	80034b6 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	69da      	ldr	r2, [r3, #28]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	699a      	ldr	r2, [r3, #24]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800340c:	2b00      	cmp	r3, #0
 800340e:	d103      	bne.n	8003418 <HAL_ETH_ReadData+0x88>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d03c      	beq.n	8003492 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800343a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003450:	2301      	movs	r3, #1
 8003452:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800346c:	461a      	mov	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	b29b      	uxth	r3, r3
 8003472:	f004 ffc7 	bl	8008404 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	441a      	add	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2200      	movs	r2, #0
 8003490:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3301      	adds	r3, #1
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d902      	bls.n	80034a4 <HAL_ETH_ReadData+0x114>
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3b04      	subs	r3, #4
 80034a2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	3212      	adds	r2, #18
 80034aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ae:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3301      	adds	r3, #1
 80034b4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	db06      	blt.n	80034cc <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d202      	bcs.n	80034cc <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80034c6:	7cfb      	ldrb	r3, [r7, #19]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d08d      	beq.n	80033e8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	441a      	add	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f815 	bl	8003510 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80034ec:	7cfb      	ldrb	r3, [r7, #19]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d108      	bne.n	8003504 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
}
 8003506:	4618      	mov	r0, r3
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800351c:	2301      	movs	r3, #1
 800351e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003524:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	3212      	adds	r2, #18
 800352c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003530:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003536:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003538:	e042      	b.n	80035c0 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d112      	bne.n	8003568 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003542:	f107 0308 	add.w	r3, r7, #8
 8003546:	4618      	mov	r0, r3
 8003548:	f004 ff2c 	bl	80083a4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d102      	bne.n	8003558 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	74fb      	strb	r3, [r7, #19]
 8003556:	e007      	b.n	8003568 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	461a      	mov	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	461a      	mov	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d028      	beq.n	80035c0 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	4b26      	ldr	r3, [pc, #152]	@ (8003614 <ETH_UpdateDescriptor+0x104>)
 800357c:	4313      	orrs	r3, r2
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	6053      	str	r3, [r2, #4]
 8003582:	e005      	b.n	8003590 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	3301      	adds	r3, #1
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d902      	bls.n	80035ae <ETH_UpdateDescriptor+0x9e>
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	3b04      	subs	r3, #4
 80035ac:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	3212      	adds	r2, #18
 80035b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b8:	617b      	str	r3, [r7, #20]
      desccount--;
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	3b01      	subs	r3, #1
 80035be:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <ETH_UpdateDescriptor+0xbc>
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1b6      	bne.n	800353a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d01a      	beq.n	800360c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3301      	adds	r3, #1
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80035e0:	f3bf 8f5f 	dmb	sy
}
 80035e4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6919      	ldr	r1, [r3, #16]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	18ca      	adds	r2, r1, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035fe:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800360c:	bf00      	nop
 800360e:	3720      	adds	r7, #32
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	80004000 	.word	0x80004000

08003618 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3318      	adds	r3, #24
 8003624:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003630:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003636:	e047      	b.n	80036c8 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8003638:	2301      	movs	r3, #1
 800363a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	3b01      	subs	r3, #1
 8003640:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	3304      	adds	r3, #4
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	3301      	adds	r3, #1
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b03      	cmp	r3, #3
 800365c:	d902      	bls.n	8003664 <HAL_ETH_ReleaseTxPacket+0x4c>
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3b04      	subs	r3, #4
 8003662:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8003668:	7bbb      	ldrb	r3, [r7, #14]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d02c      	beq.n	80036c8 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68d9      	ldr	r1, [r3, #12]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	440b      	add	r3, r1
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db1f      	blt.n	80036c4 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	3304      	adds	r3, #4
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4618      	mov	r0, r3
 8003692:	f004 fef9 	bl	8008488 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	3304      	adds	r3, #4
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	2200      	movs	r2, #0
 80036a2:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	3301      	adds	r3, #1
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d902      	bls.n	80036b6 <HAL_ETH_ReleaseTxPacket+0x9e>
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	3b04      	subs	r3, #4
 80036b4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036c2:	e001      	b.n	80036c8 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_ETH_ReleaseTxPacket+0xbc>
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1b1      	bne.n	8003638 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ee:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003708:	4b4b      	ldr	r3, [pc, #300]	@ (8003838 <HAL_ETH_IRQHandler+0x158>)
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00e      	beq.n	8003736 <HAL_ETH_IRQHandler+0x56>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800372a:	461a      	mov	r2, r3
 800372c:	4b43      	ldr	r3, [pc, #268]	@ (800383c <HAL_ETH_IRQHandler+0x15c>)
 800372e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f004 f9e5 	bl	8007b00 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00f      	beq.n	8003760 <HAL_ETH_IRQHandler+0x80>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003752:	461a      	mov	r2, r3
 8003754:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003758:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f004 f9e0 	bl	8007b20 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d042      	beq.n	80037f0 <HAL_ETH_IRQHandler+0x110>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d03d      	beq.n	80037f0 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377a:	f043 0208 	orr.w	r2, r3, #8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01a      	beq.n	80037c4 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	4b29      	ldr	r3, [pc, #164]	@ (8003840 <HAL_ETH_IRQHandler+0x160>)
 800379a:	4013      	ands	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80037b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037b8:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	22e0      	movs	r2, #224	@ 0xe0
 80037be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80037c2:	e012      	b.n	80037ea <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	f248 6380 	movw	r3, #34432	@ 0x8680
 80037d2:	4013      	ands	r3, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037e2:	461a      	mov	r2, r3
 80037e4:	f248 6380 	movw	r3, #34432	@ 0x8680
 80037e8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f004 f9a8 	bl	8007b40 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00e      	beq.n	8003818 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f81a 	bl	8003844 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003822:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <HAL_ETH_IRQHandler+0x158>)
 8003824:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003828:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f814 	bl	8003858 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003830:	bf00      	nop
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40013c00 	.word	0x40013c00
 800383c:	00010040 	.word	0x00010040
 8003840:	007e2000 	.word	0x007e2000

08003844 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 031c 	and.w	r3, r3, #28
 8003888:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	02db      	lsls	r3, r3, #11
 800388e:	b29b      	uxth	r3, r3
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	019b      	lsls	r3, r3, #6
 800389a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0302 	bic.w	r3, r3, #2
 80038aa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80038bc:	f7fe fef4 	bl	80026a8 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80038c2:	e00d      	b.n	80038e0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80038c4:	f7fe fef0 	bl	80026a8 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d2:	d301      	bcc.n	80038d8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e010      	b.n	80038fa <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ec      	bne.n	80038c4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 031c 	and.w	r3, r3, #28
 800391e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	02db      	lsls	r3, r3, #11
 8003924:	b29b      	uxth	r3, r3
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	019b      	lsls	r3, r3, #6
 8003930:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f043 0302 	orr.w	r3, r3, #2
 8003940:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800395c:	f7fe fea4 	bl	80026a8 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003962:	e00d      	b.n	8003980 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003964:	f7fe fea0 	bl	80026a8 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003972:	d301      	bcc.n	8003978 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e009      	b.n	800398c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1ec      	bne.n	8003964 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0e6      	b.n	8003b76 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf14      	ite	ne
 80039b6:	2301      	movne	r3, #1
 80039b8:	2300      	moveq	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf14      	ite	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	2300      	moveq	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bf0c      	ite	eq
 8003a16:	2301      	moveq	r3, #1
 8003a18:	2300      	movne	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	bf14      	ite	ne
 8003ac2:	2301      	movne	r3, #1
 8003ac4:	2300      	moveq	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf14      	ite	ne
 8003adc:	2301      	movne	r3, #1
 8003ade:	2300      	moveq	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf14      	ite	ne
 8003af6:	2301      	movne	r3, #1
 8003af8:	2300      	moveq	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	bf0c      	ite	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	2300      	movne	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bf14      	ite	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	2300      	moveq	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bf14      	ite	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	2300      	moveq	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e00b      	b.n	8003bae <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d105      	bne.n	8003bac <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003ba0:	6839      	ldr	r1, [r7, #0]
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f87c 	bl	8003ca0 <ETH_SetMACConfig>

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 031c 	bic.w	r3, r3, #28
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003bd0:	f001 fc56 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 8003bd4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4a14      	ldr	r2, [pc, #80]	@ (8003c2c <HAL_ETH_SetMDIOClockRange+0x74>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d804      	bhi.n	8003be8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f043 0308 	orr.w	r3, r3, #8
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	e019      	b.n	8003c1c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4a11      	ldr	r2, [pc, #68]	@ (8003c30 <HAL_ETH_SetMDIOClockRange+0x78>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d204      	bcs.n	8003bfa <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f043 030c 	orr.w	r3, r3, #12
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e010      	b.n	8003c1c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c34 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d90c      	bls.n	8003c1c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	4a0c      	ldr	r2, [pc, #48]	@ (8003c38 <HAL_ETH_SetMDIOClockRange+0x80>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d804      	bhi.n	8003c14 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f043 0304 	orr.w	r3, r3, #4
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e003      	b.n	8003c1c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f043 0310 	orr.w	r3, r3, #16
 8003c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	611a      	str	r2, [r3, #16]
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	02160ebf 	.word	0x02160ebf
 8003c30:	03938700 	.word	0x03938700
 8003c34:	05f5e0ff 	.word	0x05f5e0ff
 8003c38:	08f0d17f 	.word	0x08f0d17f

08003c3c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c78:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c86:	2001      	movs	r0, #1
 8003c88:	f7fe fd1a 	bl	80026c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c96:	6193      	str	r3, [r2, #24]
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4b53      	ldr	r3, [pc, #332]	@ (8003e04 <ETH_SetMACConfig+0x164>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	7b9b      	ldrb	r3, [r3, #14]
 8003cbe:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	7c12      	ldrb	r2, [r2, #16]
 8003cc4:	2a00      	cmp	r2, #0
 8003cc6:	d102      	bne.n	8003cce <ETH_SetMACConfig+0x2e>
 8003cc8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ccc:	e000      	b.n	8003cd0 <ETH_SetMACConfig+0x30>
 8003cce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003cd0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	7c52      	ldrb	r2, [r2, #17]
 8003cd6:	2a00      	cmp	r2, #0
 8003cd8:	d102      	bne.n	8003ce0 <ETH_SetMACConfig+0x40>
 8003cda:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003cde:	e000      	b.n	8003ce2 <ETH_SetMACConfig+0x42>
 8003ce0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ce2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003ce8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	7fdb      	ldrb	r3, [r3, #31]
 8003cee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003cf0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003cf6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	7f92      	ldrb	r2, [r2, #30]
 8003cfc:	2a00      	cmp	r2, #0
 8003cfe:	d102      	bne.n	8003d06 <ETH_SetMACConfig+0x66>
 8003d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d04:	e000      	b.n	8003d08 <ETH_SetMACConfig+0x68>
 8003d06:	2200      	movs	r2, #0
                        macconf->Speed |
 8003d08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	7f1b      	ldrb	r3, [r3, #28]
 8003d0e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d10:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	791b      	ldrb	r3, [r3, #4]
 8003d1c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003d1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003d26:	2a00      	cmp	r2, #0
 8003d28:	d102      	bne.n	8003d30 <ETH_SetMACConfig+0x90>
 8003d2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d2e:	e000      	b.n	8003d32 <ETH_SetMACConfig+0x92>
 8003d30:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d32:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	7bdb      	ldrb	r3, [r3, #15]
 8003d38:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003d3a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d48:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d62:	2001      	movs	r0, #1
 8003d64:	f7fe fcac 	bl	80026c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003d7e:	4013      	ands	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d86:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003d8e:	2a00      	cmp	r2, #0
 8003d90:	d101      	bne.n	8003d96 <ETH_SetMACConfig+0xf6>
 8003d92:	2280      	movs	r2, #128	@ 0x80
 8003d94:	e000      	b.n	8003d98 <ETH_SetMACConfig+0xf8>
 8003d96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d98:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003da6:	2a01      	cmp	r2, #1
 8003da8:	d101      	bne.n	8003dae <ETH_SetMACConfig+0x10e>
 8003daa:	2208      	movs	r2, #8
 8003dac:	e000      	b.n	8003db0 <ETH_SetMACConfig+0x110>
 8003dae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003db0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003db8:	2a01      	cmp	r2, #1
 8003dba:	d101      	bne.n	8003dc0 <ETH_SetMACConfig+0x120>
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	e000      	b.n	8003dc2 <ETH_SetMACConfig+0x122>
 8003dc0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003dc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003dca:	2a01      	cmp	r2, #1
 8003dcc:	d101      	bne.n	8003dd2 <ETH_SetMACConfig+0x132>
 8003dce:	2202      	movs	r2, #2
 8003dd0:	e000      	b.n	8003dd4 <ETH_SetMACConfig+0x134>
 8003dd2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dec:	2001      	movs	r0, #1
 8003dee:	f7fe fc67 	bl	80026c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	619a      	str	r2, [r3, #24]
}
 8003dfa:	bf00      	nop
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	fd20810f 	.word	0xfd20810f

08003e08 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4b3d      	ldr	r3, [pc, #244]	@ (8003f18 <ETH_SetDMAConfig+0x110>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	7b1b      	ldrb	r3, [r3, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <ETH_SetDMAConfig+0x2c>
 8003e2e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003e32:	e000      	b.n	8003e36 <ETH_SetDMAConfig+0x2e>
 8003e34:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	7b5b      	ldrb	r3, [r3, #13]
 8003e3a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e3c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	7f52      	ldrb	r2, [r2, #29]
 8003e42:	2a00      	cmp	r2, #0
 8003e44:	d102      	bne.n	8003e4c <ETH_SetDMAConfig+0x44>
 8003e46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003e4a:	e000      	b.n	8003e4e <ETH_SetDMAConfig+0x46>
 8003e4c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e4e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	7b9b      	ldrb	r3, [r3, #14]
 8003e54:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e56:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e5c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	7f1b      	ldrb	r3, [r3, #28]
 8003e62:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003e64:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	7f9b      	ldrb	r3, [r3, #30]
 8003e6a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e6c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e72:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e7a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	f7fe fc0e 	bl	80026c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eac:	461a      	mov	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	791b      	ldrb	r3, [r3, #4]
 8003eb6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ebc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003ec2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ec8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ed0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003ed2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003eda:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ee0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003eea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003eee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003efc:	2001      	movs	r0, #1
 8003efe:	f7fe fbdf 	bl	80026c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6013      	str	r3, [r2, #0]
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	f8de3f23 	.word	0xf8de3f23

08003f1c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b0a6      	sub	sp, #152	@ 0x98
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003f24:	2301      	movs	r3, #1
 8003f26:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003f30:	2300      	movs	r3, #0
 8003f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f34:	2300      	movs	r3, #0
 8003f36:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003f84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f88:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003f96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fe7f 	bl	8003ca0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003fd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003fd6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003fd8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003fdc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003fde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fe2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003ff2:	f107 0308 	add.w	r3, r7, #8
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ff05 	bl	8003e08 <ETH_SetDMAConfig>
}
 8003ffe:	bf00      	nop
 8004000:	3798      	adds	r7, #152	@ 0x98
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3305      	adds	r3, #5
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	3204      	adds	r2, #4
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	4b11      	ldr	r3, [pc, #68]	@ (8004070 <ETH_MACAddressConfig+0x68>)
 800402a:	4413      	add	r3, r2
 800402c:	461a      	mov	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3303      	adds	r3, #3
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	061a      	lsls	r2, r3, #24
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3302      	adds	r3, #2
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3301      	adds	r3, #1
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	4313      	orrs	r3, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	7812      	ldrb	r2, [r2, #0]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <ETH_MACAddressConfig+0x6c>)
 800405a:	4413      	add	r3, r2
 800405c:	461a      	mov	r2, r3
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	6013      	str	r3, [r2, #0]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40028040 	.word	0x40028040
 8004074:	40028044 	.word	0x40028044

08004078 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e03e      	b.n	8004104 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68d9      	ldr	r1, [r3, #12]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	440b      	add	r3, r1
 8004096:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2200      	movs	r2, #0
 80040a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2200      	movs	r2, #0
 80040a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2200      	movs	r2, #0
 80040ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	3206      	adds	r2, #6
 80040b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d80c      	bhi.n	80040e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68d9      	ldr	r1, [r3, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	440b      	add	r3, r1
 80040e0:	461a      	mov	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	60da      	str	r2, [r3, #12]
 80040e6:	e004      	b.n	80040f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	461a      	mov	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3301      	adds	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d9bd      	bls.n	8004086 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800411c:	611a      	str	r2, [r3, #16]
}
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	e048      	b.n	80041ca <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6919      	ldr	r1, [r3, #16]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	440b      	add	r3, r1
 8004148:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2200      	movs	r2, #0
 8004154:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2200      	movs	r2, #0
 800415a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2200      	movs	r2, #0
 8004160:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2200      	movs	r2, #0
 8004166:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2200      	movs	r2, #0
 800416c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004174:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	3212      	adds	r2, #18
 8004196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d80c      	bhi.n	80041ba <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6919      	ldr	r1, [r3, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	440b      	add	r3, r1
 80041b2:	461a      	mov	r2, r3
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	60da      	str	r2, [r3, #12]
 80041b8:	e004      	b.n	80041c4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	461a      	mov	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3301      	adds	r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d9b3      	bls.n	8004138 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041fa:	60da      	str	r2, [r3, #12]
}
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004208:	b480      	push	{r7}
 800420a:	b091      	sub	sp, #68	@ 0x44
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3318      	adds	r3, #24
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800422e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004232:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004246:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800424a:	d007      	beq.n	800425c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800424c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800424e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004250:	3304      	adds	r3, #4
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800425c:	2302      	movs	r3, #2
 800425e:	e111      	b.n	8004484 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004262:	3301      	adds	r3, #1
 8004264:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	4b86      	ldr	r3, [pc, #536]	@ (8004490 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004276:	4013      	ands	r3, r2
 8004278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800427a:	6852      	ldr	r2, [r2, #4]
 800427c:	431a      	orrs	r2, r3
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800428e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	431a      	orrs	r2, r3
 800429c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	431a      	orrs	r2, r3
 80042ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042bc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80042ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80042d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80042e2:	e082      	b.n	80043ea <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80042e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80042ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ee:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e005      	b.n	8004310 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800430c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004312:	3301      	adds	r3, #1
 8004314:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004318:	2b03      	cmp	r3, #3
 800431a:	d902      	bls.n	8004322 <ETH_Prepare_Tx_Descriptors+0x11a>
 800431c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800431e:	3b04      	subs	r3, #4
 8004320:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800432a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004334:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004338:	d007      	beq.n	800434a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800433a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433e:	3304      	adds	r3, #4
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d029      	beq.n	800439e <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004356:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004358:	2300      	movs	r3, #0
 800435a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800435c:	e019      	b.n	8004392 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800435e:	f3bf 8f5f 	dmb	sy
}
 8004362:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800436c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004372:	3301      	adds	r3, #1
 8004374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004378:	2b03      	cmp	r3, #3
 800437a:	d902      	bls.n	8004382 <ETH_Prepare_Tx_Descriptors+0x17a>
 800437c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437e:	3b04      	subs	r3, #4
 8004380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800438a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800438c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438e:	3301      	adds	r3, #1
 8004390:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004392:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004396:	429a      	cmp	r2, r3
 8004398:	d3e1      	bcc.n	800435e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800439a:	2302      	movs	r3, #2
 800439c:	e072      	b.n	8004484 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80043a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80043aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ac:	3301      	adds	r3, #1
 80043ae:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80043b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80043b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043be:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80043c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	4b32      	ldr	r3, [pc, #200]	@ (8004490 <ETH_Prepare_Tx_Descriptors+0x288>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043ca:	6852      	ldr	r2, [r2, #4]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80043d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d4:	3301      	adds	r3, #1
 80043d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80043d8:	f3bf 8f5f 	dmb	sy
}
 80043dc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80043ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f47f af78 	bne.w	80042e4 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d006      	beq.n	8004408 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80043fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e005      	b.n	8004414 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004412:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800441c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004422:	6a3a      	ldr	r2, [r7, #32]
 8004424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004428:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800442a:	f3bf 8f5f 	dmb	sy
}
 800442e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004440:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004444:	3304      	adds	r3, #4
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004450:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004452:	f3ef 8310 	mrs	r3, PRIMASK
 8004456:	613b      	str	r3, [r7, #16]
  return(result);
 8004458:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	2301      	movs	r3, #1
 800445e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f383 8810 	msr	PRIMASK, r3
}
 8004466:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800446c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446e:	4413      	add	r3, r2
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	629a      	str	r2, [r3, #40]	@ 0x28
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	f383 8810 	msr	PRIMASK, r3
}
 8004480:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3744      	adds	r7, #68	@ 0x44
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	ffffe000 	.word	0xffffe000

08004494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004494:	b480      	push	{r7}
 8004496:	b089      	sub	sp, #36	@ 0x24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e175      	b.n	80047a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80044b4:	2201      	movs	r2, #1
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4013      	ands	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	f040 8164 	bne.w	800479a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d005      	beq.n	80044ea <HAL_GPIO_Init+0x56>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d130      	bne.n	800454c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	2203      	movs	r2, #3
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4313      	orrs	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004520:	2201      	movs	r2, #1
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f003 0201 	and.w	r2, r3, #1
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b03      	cmp	r3, #3
 8004556:	d017      	beq.n	8004588 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	2203      	movs	r2, #3
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d123      	bne.n	80045dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	08da      	lsrs	r2, r3, #3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3208      	adds	r2, #8
 800459c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	220f      	movs	r2, #15
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	08da      	lsrs	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3208      	adds	r2, #8
 80045d6:	69b9      	ldr	r1, [r7, #24]
 80045d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	2203      	movs	r2, #3
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0203 	and.w	r2, r3, #3
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80be 	beq.w	800479a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800461e:	4b66      	ldr	r3, [pc, #408]	@ (80047b8 <HAL_GPIO_Init+0x324>)
 8004620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004622:	4a65      	ldr	r2, [pc, #404]	@ (80047b8 <HAL_GPIO_Init+0x324>)
 8004624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004628:	6453      	str	r3, [r2, #68]	@ 0x44
 800462a:	4b63      	ldr	r3, [pc, #396]	@ (80047b8 <HAL_GPIO_Init+0x324>)
 800462c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004636:	4a61      	ldr	r2, [pc, #388]	@ (80047bc <HAL_GPIO_Init+0x328>)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	089b      	lsrs	r3, r3, #2
 800463c:	3302      	adds	r3, #2
 800463e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	220f      	movs	r2, #15
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43db      	mvns	r3, r3
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	4013      	ands	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a58      	ldr	r2, [pc, #352]	@ (80047c0 <HAL_GPIO_Init+0x32c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d037      	beq.n	80046d2 <HAL_GPIO_Init+0x23e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a57      	ldr	r2, [pc, #348]	@ (80047c4 <HAL_GPIO_Init+0x330>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d031      	beq.n	80046ce <HAL_GPIO_Init+0x23a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a56      	ldr	r2, [pc, #344]	@ (80047c8 <HAL_GPIO_Init+0x334>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d02b      	beq.n	80046ca <HAL_GPIO_Init+0x236>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a55      	ldr	r2, [pc, #340]	@ (80047cc <HAL_GPIO_Init+0x338>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d025      	beq.n	80046c6 <HAL_GPIO_Init+0x232>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a54      	ldr	r2, [pc, #336]	@ (80047d0 <HAL_GPIO_Init+0x33c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01f      	beq.n	80046c2 <HAL_GPIO_Init+0x22e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a53      	ldr	r2, [pc, #332]	@ (80047d4 <HAL_GPIO_Init+0x340>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d019      	beq.n	80046be <HAL_GPIO_Init+0x22a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a52      	ldr	r2, [pc, #328]	@ (80047d8 <HAL_GPIO_Init+0x344>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <HAL_GPIO_Init+0x226>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a51      	ldr	r2, [pc, #324]	@ (80047dc <HAL_GPIO_Init+0x348>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00d      	beq.n	80046b6 <HAL_GPIO_Init+0x222>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a50      	ldr	r2, [pc, #320]	@ (80047e0 <HAL_GPIO_Init+0x34c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d007      	beq.n	80046b2 <HAL_GPIO_Init+0x21e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a4f      	ldr	r2, [pc, #316]	@ (80047e4 <HAL_GPIO_Init+0x350>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <HAL_GPIO_Init+0x21a>
 80046aa:	2309      	movs	r3, #9
 80046ac:	e012      	b.n	80046d4 <HAL_GPIO_Init+0x240>
 80046ae:	230a      	movs	r3, #10
 80046b0:	e010      	b.n	80046d4 <HAL_GPIO_Init+0x240>
 80046b2:	2308      	movs	r3, #8
 80046b4:	e00e      	b.n	80046d4 <HAL_GPIO_Init+0x240>
 80046b6:	2307      	movs	r3, #7
 80046b8:	e00c      	b.n	80046d4 <HAL_GPIO_Init+0x240>
 80046ba:	2306      	movs	r3, #6
 80046bc:	e00a      	b.n	80046d4 <HAL_GPIO_Init+0x240>
 80046be:	2305      	movs	r3, #5
 80046c0:	e008      	b.n	80046d4 <HAL_GPIO_Init+0x240>
 80046c2:	2304      	movs	r3, #4
 80046c4:	e006      	b.n	80046d4 <HAL_GPIO_Init+0x240>
 80046c6:	2303      	movs	r3, #3
 80046c8:	e004      	b.n	80046d4 <HAL_GPIO_Init+0x240>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e002      	b.n	80046d4 <HAL_GPIO_Init+0x240>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <HAL_GPIO_Init+0x240>
 80046d2:	2300      	movs	r3, #0
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	f002 0203 	and.w	r2, r2, #3
 80046da:	0092      	lsls	r2, r2, #2
 80046dc:	4093      	lsls	r3, r2
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80046e4:	4935      	ldr	r1, [pc, #212]	@ (80047bc <HAL_GPIO_Init+0x328>)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	089b      	lsrs	r3, r3, #2
 80046ea:	3302      	adds	r3, #2
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046f2:	4b3d      	ldr	r3, [pc, #244]	@ (80047e8 <HAL_GPIO_Init+0x354>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	43db      	mvns	r3, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4013      	ands	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004716:	4a34      	ldr	r2, [pc, #208]	@ (80047e8 <HAL_GPIO_Init+0x354>)
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800471c:	4b32      	ldr	r3, [pc, #200]	@ (80047e8 <HAL_GPIO_Init+0x354>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004740:	4a29      	ldr	r2, [pc, #164]	@ (80047e8 <HAL_GPIO_Init+0x354>)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004746:	4b28      	ldr	r3, [pc, #160]	@ (80047e8 <HAL_GPIO_Init+0x354>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	43db      	mvns	r3, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4013      	ands	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800476a:	4a1f      	ldr	r2, [pc, #124]	@ (80047e8 <HAL_GPIO_Init+0x354>)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004770:	4b1d      	ldr	r3, [pc, #116]	@ (80047e8 <HAL_GPIO_Init+0x354>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004794:	4a14      	ldr	r2, [pc, #80]	@ (80047e8 <HAL_GPIO_Init+0x354>)
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	3301      	adds	r3, #1
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	2b0f      	cmp	r3, #15
 80047a4:	f67f ae86 	bls.w	80044b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	3724      	adds	r7, #36	@ 0x24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40013800 	.word	0x40013800
 80047c0:	40020000 	.word	0x40020000
 80047c4:	40020400 	.word	0x40020400
 80047c8:	40020800 	.word	0x40020800
 80047cc:	40020c00 	.word	0x40020c00
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40021400 	.word	0x40021400
 80047d8:	40021800 	.word	0x40021800
 80047dc:	40021c00 	.word	0x40021c00
 80047e0:	40022000 	.word	0x40022000
 80047e4:	40022400 	.word	0x40022400
 80047e8:	40013c00 	.word	0x40013c00

080047ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	807b      	strh	r3, [r7, #2]
 80047f8:	4613      	mov	r3, r2
 80047fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047fc:	787b      	ldrb	r3, [r7, #1]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004802:	887a      	ldrh	r2, [r7, #2]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004808:	e003      	b.n	8004812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800480a:	887b      	ldrh	r3, [r7, #2]
 800480c:	041a      	lsls	r2, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	619a      	str	r2, [r3, #24]
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b086      	sub	sp, #24
 8004822:	af02      	add	r7, sp, #8
 8004824:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e108      	b.n	8004a42 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fd fafc 	bl	8001e48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2203      	movs	r2, #3
 8004854:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800485e:	d102      	bne.n	8004866 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f002 fd3a 	bl	80072e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	7c1a      	ldrb	r2, [r3, #16]
 8004878:	f88d 2000 	strb.w	r2, [sp]
 800487c:	3304      	adds	r3, #4
 800487e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004880:	f002 fcd6 	bl	8007230 <USB_CoreInit>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2202      	movs	r2, #2
 800488e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e0d5      	b.n	8004a42 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f002 fd32 	bl	8007306 <USB_SetCurrentMode>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0c6      	b.n	8004a42 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048b4:	2300      	movs	r3, #0
 80048b6:	73fb      	strb	r3, [r7, #15]
 80048b8:	e04a      	b.n	8004950 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048ba:	7bfa      	ldrb	r2, [r7, #15]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	3315      	adds	r3, #21
 80048ca:	2201      	movs	r2, #1
 80048cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048ce:	7bfa      	ldrb	r2, [r7, #15]
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	3314      	adds	r3, #20
 80048de:	7bfa      	ldrb	r2, [r7, #15]
 80048e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048e2:	7bfa      	ldrb	r2, [r7, #15]
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	b298      	uxth	r0, r3
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	332e      	adds	r3, #46	@ 0x2e
 80048f6:	4602      	mov	r2, r0
 80048f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048fa:	7bfa      	ldrb	r2, [r7, #15]
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	3318      	adds	r3, #24
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800490e:	7bfa      	ldrb	r2, [r7, #15]
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	331c      	adds	r3, #28
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004922:	7bfa      	ldrb	r2, [r7, #15]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	3320      	adds	r3, #32
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004936:	7bfa      	ldrb	r2, [r7, #15]
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	3324      	adds	r3, #36	@ 0x24
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	3301      	adds	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	791b      	ldrb	r3, [r3, #4]
 8004954:	7bfa      	ldrb	r2, [r7, #15]
 8004956:	429a      	cmp	r2, r3
 8004958:	d3af      	bcc.n	80048ba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800495a:	2300      	movs	r3, #0
 800495c:	73fb      	strb	r3, [r7, #15]
 800495e:	e044      	b.n	80049ea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004960:	7bfa      	ldrb	r2, [r7, #15]
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004976:	7bfa      	ldrb	r2, [r7, #15]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004988:	7bfa      	ldrb	r2, [r7, #15]
 800498a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800498c:	7bfa      	ldrb	r2, [r7, #15]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049a2:	7bfa      	ldrb	r2, [r7, #15]
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049b8:	7bfa      	ldrb	r2, [r7, #15]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049ce:	7bfa      	ldrb	r2, [r7, #15]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	3301      	adds	r3, #1
 80049e8:	73fb      	strb	r3, [r7, #15]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	791b      	ldrb	r3, [r3, #4]
 80049ee:	7bfa      	ldrb	r2, [r7, #15]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d3b5      	bcc.n	8004960 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	7c1a      	ldrb	r2, [r3, #16]
 80049fc:	f88d 2000 	strb.w	r2, [sp]
 8004a00:	3304      	adds	r3, #4
 8004a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a04:	f002 fccc 	bl	80073a0 <USB_DevInit>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e013      	b.n	8004a42 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	7b1b      	ldrb	r3, [r3, #12]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d102      	bne.n	8004a36 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f80b 	bl	8004a4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f002 fe87 	bl	800774e <USB_DevDisconnect>

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a7a:	4b05      	ldr	r3, [pc, #20]	@ (8004a90 <HAL_PCDEx_ActivateLPM+0x44>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	10000003 	.word	0x10000003

08004a94 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a98:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a04      	ldr	r2, [pc, #16]	@ (8004ab0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aa2:	6013      	str	r3, [r2, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40007000 	.word	0x40007000

08004ab4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004abe:	4b23      	ldr	r3, [pc, #140]	@ (8004b4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	4a22      	ldr	r2, [pc, #136]	@ (8004b4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aca:	4b20      	ldr	r3, [pc, #128]	@ (8004b4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1d      	ldr	r2, [pc, #116]	@ (8004b50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ae0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ae2:	f7fd fde1 	bl	80026a8 <HAL_GetTick>
 8004ae6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ae8:	e009      	b.n	8004afe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004aea:	f7fd fddd 	bl	80026a8 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004af8:	d901      	bls.n	8004afe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e022      	b.n	8004b44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004afe:	4b14      	ldr	r3, [pc, #80]	@ (8004b50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b0a:	d1ee      	bne.n	8004aea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004b0c:	4b10      	ldr	r3, [pc, #64]	@ (8004b50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a0f      	ldr	r2, [pc, #60]	@ (8004b50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b18:	f7fd fdc6 	bl	80026a8 <HAL_GetTick>
 8004b1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b1e:	e009      	b.n	8004b34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b20:	f7fd fdc2 	bl	80026a8 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b2e:	d901      	bls.n	8004b34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e007      	b.n	8004b44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b34:	4b06      	ldr	r3, [pc, #24]	@ (8004b50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b40:	d1ee      	bne.n	8004b20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40007000 	.word	0x40007000

08004b54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e291      	b.n	800508e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8087 	beq.w	8004c86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b78:	4b96      	ldr	r3, [pc, #600]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 030c 	and.w	r3, r3, #12
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d00c      	beq.n	8004b9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b84:	4b93      	ldr	r3, [pc, #588]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d112      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x62>
 8004b90:	4b90      	ldr	r3, [pc, #576]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b9c:	d10b      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d06c      	beq.n	8004c84 <HAL_RCC_OscConfig+0x130>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d168      	bne.n	8004c84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e26b      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bbe:	d106      	bne.n	8004bce <HAL_RCC_OscConfig+0x7a>
 8004bc0:	4b84      	ldr	r3, [pc, #528]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a83      	ldr	r2, [pc, #524]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	e02e      	b.n	8004c2c <HAL_RCC_OscConfig+0xd8>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x9c>
 8004bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a7e      	ldr	r2, [pc, #504]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	4b7c      	ldr	r3, [pc, #496]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a7b      	ldr	r2, [pc, #492]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004be8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	e01d      	b.n	8004c2c <HAL_RCC_OscConfig+0xd8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCC_OscConfig+0xc0>
 8004bfa:	4b76      	ldr	r3, [pc, #472]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a75      	ldr	r2, [pc, #468]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	4b73      	ldr	r3, [pc, #460]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a72      	ldr	r2, [pc, #456]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e00b      	b.n	8004c2c <HAL_RCC_OscConfig+0xd8>
 8004c14:	4b6f      	ldr	r3, [pc, #444]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6e      	ldr	r2, [pc, #440]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	4b6c      	ldr	r3, [pc, #432]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a6b      	ldr	r2, [pc, #428]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d013      	beq.n	8004c5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fd fd38 	bl	80026a8 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c3c:	f7fd fd34 	bl	80026a8 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	@ 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e21f      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4e:	4b61      	ldr	r3, [pc, #388]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0xe8>
 8004c5a:	e014      	b.n	8004c86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5c:	f7fd fd24 	bl	80026a8 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c64:	f7fd fd20 	bl	80026a8 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b64      	cmp	r3, #100	@ 0x64
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e20b      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c76:	4b57      	ldr	r3, [pc, #348]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCC_OscConfig+0x110>
 8004c82:	e000      	b.n	8004c86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d069      	beq.n	8004d66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c92:	4b50      	ldr	r3, [pc, #320]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c9e:	4b4d      	ldr	r3, [pc, #308]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 030c 	and.w	r3, r3, #12
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d11c      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x190>
 8004caa:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d116      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb6:	4b47      	ldr	r3, [pc, #284]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d005      	beq.n	8004cce <HAL_RCC_OscConfig+0x17a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d001      	beq.n	8004cce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e1df      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cce:	4b41      	ldr	r3, [pc, #260]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	493d      	ldr	r1, [pc, #244]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce2:	e040      	b.n	8004d66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d023      	beq.n	8004d34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cec:	4b39      	ldr	r3, [pc, #228]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a38      	ldr	r2, [pc, #224]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fd fcd6 	bl	80026a8 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d00:	f7fd fcd2 	bl	80026a8 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e1bd      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d12:	4b30      	ldr	r3, [pc, #192]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4929      	ldr	r1, [pc, #164]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]
 8004d32:	e018      	b.n	8004d66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d34:	4b27      	ldr	r3, [pc, #156]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a26      	ldr	r2, [pc, #152]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd fcb2 	bl	80026a8 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d48:	f7fd fcae 	bl	80026a8 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e199      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d038      	beq.n	8004de4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d019      	beq.n	8004dae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7a:	4b16      	ldr	r3, [pc, #88]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d7e:	4a15      	ldr	r2, [pc, #84]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d86:	f7fd fc8f 	bl	80026a8 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d8c:	e008      	b.n	8004da0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d8e:	f7fd fc8b 	bl	80026a8 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e176      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da0:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0f0      	beq.n	8004d8e <HAL_RCC_OscConfig+0x23a>
 8004dac:	e01a      	b.n	8004de4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dae:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db2:	4a08      	ldr	r2, [pc, #32]	@ (8004dd4 <HAL_RCC_OscConfig+0x280>)
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dba:	f7fd fc75 	bl	80026a8 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc0:	e00a      	b.n	8004dd8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc2:	f7fd fc71 	bl	80026a8 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d903      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e15c      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
 8004dd4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd8:	4b91      	ldr	r3, [pc, #580]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1ee      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80a4 	beq.w	8004f3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df2:	4b8b      	ldr	r3, [pc, #556]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10d      	bne.n	8004e1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfe:	4b88      	ldr	r3, [pc, #544]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e02:	4a87      	ldr	r2, [pc, #540]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e0a:	4b85      	ldr	r3, [pc, #532]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e12:	60bb      	str	r3, [r7, #8]
 8004e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e16:	2301      	movs	r3, #1
 8004e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e1a:	4b82      	ldr	r3, [pc, #520]	@ (8005024 <HAL_RCC_OscConfig+0x4d0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d118      	bne.n	8004e58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004e26:	4b7f      	ldr	r3, [pc, #508]	@ (8005024 <HAL_RCC_OscConfig+0x4d0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a7e      	ldr	r2, [pc, #504]	@ (8005024 <HAL_RCC_OscConfig+0x4d0>)
 8004e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e32:	f7fd fc39 	bl	80026a8 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3a:	f7fd fc35 	bl	80026a8 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b64      	cmp	r3, #100	@ 0x64
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e120      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e4c:	4b75      	ldr	r3, [pc, #468]	@ (8005024 <HAL_RCC_OscConfig+0x4d0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d106      	bne.n	8004e6e <HAL_RCC_OscConfig+0x31a>
 8004e60:	4b6f      	ldr	r3, [pc, #444]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e64:	4a6e      	ldr	r2, [pc, #440]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e6c:	e02d      	b.n	8004eca <HAL_RCC_OscConfig+0x376>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCC_OscConfig+0x33c>
 8004e76:	4b6a      	ldr	r3, [pc, #424]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7a:	4a69      	ldr	r2, [pc, #420]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e82:	4b67      	ldr	r3, [pc, #412]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e86:	4a66      	ldr	r2, [pc, #408]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004e88:	f023 0304 	bic.w	r3, r3, #4
 8004e8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e8e:	e01c      	b.n	8004eca <HAL_RCC_OscConfig+0x376>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b05      	cmp	r3, #5
 8004e96:	d10c      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x35e>
 8004e98:	4b61      	ldr	r3, [pc, #388]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9c:	4a60      	ldr	r2, [pc, #384]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004e9e:	f043 0304 	orr.w	r3, r3, #4
 8004ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea4:	4b5e      	ldr	r3, [pc, #376]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea8:	4a5d      	ldr	r2, [pc, #372]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eb0:	e00b      	b.n	8004eca <HAL_RCC_OscConfig+0x376>
 8004eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb6:	4a5a      	ldr	r2, [pc, #360]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ebe:	4b58      	ldr	r3, [pc, #352]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec2:	4a57      	ldr	r2, [pc, #348]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004ec4:	f023 0304 	bic.w	r3, r3, #4
 8004ec8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d015      	beq.n	8004efe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed2:	f7fd fbe9 	bl	80026a8 <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed8:	e00a      	b.n	8004ef0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eda:	f7fd fbe5 	bl	80026a8 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e0ce      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0ee      	beq.n	8004eda <HAL_RCC_OscConfig+0x386>
 8004efc:	e014      	b.n	8004f28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efe:	f7fd fbd3 	bl	80026a8 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f04:	e00a      	b.n	8004f1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fd fbcf 	bl	80026a8 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e0b8      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1c:	4b40      	ldr	r3, [pc, #256]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ee      	bne.n	8004f06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d105      	bne.n	8004f3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	4a3b      	ldr	r2, [pc, #236]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004f34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f38:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 80a4 	beq.w	800508c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f44:	4b36      	ldr	r3, [pc, #216]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 030c 	and.w	r3, r3, #12
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d06b      	beq.n	8005028 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d149      	bne.n	8004fec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f58:	4b31      	ldr	r3, [pc, #196]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a30      	ldr	r2, [pc, #192]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004f5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fd fba0 	bl	80026a8 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fd fb9c 	bl	80026a8 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e087      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7e:	4b28      	ldr	r3, [pc, #160]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	019b      	lsls	r3, r3, #6
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fac:	061b      	lsls	r3, r3, #24
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004fb2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004fb6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fb8:	4b19      	ldr	r3, [pc, #100]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a18      	ldr	r2, [pc, #96]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fd fb70 	bl	80026a8 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fd fb6c 	bl	80026a8 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e057      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fde:	4b10      	ldr	r3, [pc, #64]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0x478>
 8004fea:	e04f      	b.n	800508c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fec:	4b0c      	ldr	r3, [pc, #48]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004ff2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff8:	f7fd fb56 	bl	80026a8 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005000:	f7fd fb52 	bl	80026a8 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e03d      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005012:	4b03      	ldr	r3, [pc, #12]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f0      	bne.n	8005000 <HAL_RCC_OscConfig+0x4ac>
 800501e:	e035      	b.n	800508c <HAL_RCC_OscConfig+0x538>
 8005020:	40023800 	.word	0x40023800
 8005024:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005028:	4b1b      	ldr	r3, [pc, #108]	@ (8005098 <HAL_RCC_OscConfig+0x544>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d028      	beq.n	8005088 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005040:	429a      	cmp	r2, r3
 8005042:	d121      	bne.n	8005088 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504e:	429a      	cmp	r2, r3
 8005050:	d11a      	bne.n	8005088 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005058:	4013      	ands	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800505e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005060:	4293      	cmp	r3, r2
 8005062:	d111      	bne.n	8005088 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	3b01      	subs	r3, #1
 8005072:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005074:	429a      	cmp	r2, r3
 8005076:	d107      	bne.n	8005088 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40023800 	.word	0x40023800

0800509c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0d0      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050b4:	4b6a      	ldr	r3, [pc, #424]	@ (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d910      	bls.n	80050e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c2:	4b67      	ldr	r3, [pc, #412]	@ (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f023 020f 	bic.w	r2, r3, #15
 80050ca:	4965      	ldr	r1, [pc, #404]	@ (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d2:	4b63      	ldr	r3, [pc, #396]	@ (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d001      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0b8      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d020      	beq.n	8005132 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050fc:	4b59      	ldr	r3, [pc, #356]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	4a58      	ldr	r2, [pc, #352]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 8005102:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005106:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005114:	4b53      	ldr	r3, [pc, #332]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	4a52      	ldr	r2, [pc, #328]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 800511a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800511e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005120:	4b50      	ldr	r3, [pc, #320]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	494d      	ldr	r1, [pc, #308]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d040      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d107      	bne.n	8005156 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005146:	4b47      	ldr	r3, [pc, #284]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d115      	bne.n	800517e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e07f      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d107      	bne.n	800516e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515e:	4b41      	ldr	r3, [pc, #260]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e073      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516e:	4b3d      	ldr	r3, [pc, #244]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e06b      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800517e:	4b39      	ldr	r3, [pc, #228]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f023 0203 	bic.w	r2, r3, #3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	4936      	ldr	r1, [pc, #216]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 800518c:	4313      	orrs	r3, r2
 800518e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005190:	f7fd fa8a 	bl	80026a8 <HAL_GetTick>
 8005194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005196:	e00a      	b.n	80051ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005198:	f7fd fa86 	bl	80026a8 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e053      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 020c 	and.w	r2, r3, #12
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	429a      	cmp	r2, r3
 80051be:	d1eb      	bne.n	8005198 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051c0:	4b27      	ldr	r3, [pc, #156]	@ (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d210      	bcs.n	80051f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ce:	4b24      	ldr	r3, [pc, #144]	@ (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f023 020f 	bic.w	r2, r3, #15
 80051d6:	4922      	ldr	r1, [pc, #136]	@ (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051de:	4b20      	ldr	r3, [pc, #128]	@ (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e032      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051fc:	4b19      	ldr	r3, [pc, #100]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4916      	ldr	r1, [pc, #88]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d009      	beq.n	800522e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800521a:	4b12      	ldr	r3, [pc, #72]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	490e      	ldr	r1, [pc, #56]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 800522a:	4313      	orrs	r3, r2
 800522c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800522e:	f000 f821 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 8005232:	4602      	mov	r2, r0
 8005234:	4b0b      	ldr	r3, [pc, #44]	@ (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	091b      	lsrs	r3, r3, #4
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	490a      	ldr	r1, [pc, #40]	@ (8005268 <HAL_RCC_ClockConfig+0x1cc>)
 8005240:	5ccb      	ldrb	r3, [r1, r3]
 8005242:	fa22 f303 	lsr.w	r3, r2, r3
 8005246:	4a09      	ldr	r2, [pc, #36]	@ (800526c <HAL_RCC_ClockConfig+0x1d0>)
 8005248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800524a:	4b09      	ldr	r3, [pc, #36]	@ (8005270 <HAL_RCC_ClockConfig+0x1d4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f7fc fe74 	bl	8001f3c <HAL_InitTick>

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40023c00 	.word	0x40023c00
 8005264:	40023800 	.word	0x40023800
 8005268:	0802f370 	.word	0x0802f370
 800526c:	20000004 	.word	0x20000004
 8005270:	2000000c 	.word	0x2000000c

08005274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005278:	b094      	sub	sp, #80	@ 0x50
 800527a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005280:	2300      	movs	r3, #0
 8005282:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005284:	2300      	movs	r3, #0
 8005286:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800528c:	4b79      	ldr	r3, [pc, #484]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x200>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 030c 	and.w	r3, r3, #12
 8005294:	2b08      	cmp	r3, #8
 8005296:	d00d      	beq.n	80052b4 <HAL_RCC_GetSysClockFreq+0x40>
 8005298:	2b08      	cmp	r3, #8
 800529a:	f200 80e1 	bhi.w	8005460 <HAL_RCC_GetSysClockFreq+0x1ec>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_RCC_GetSysClockFreq+0x34>
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d003      	beq.n	80052ae <HAL_RCC_GetSysClockFreq+0x3a>
 80052a6:	e0db      	b.n	8005460 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052a8:	4b73      	ldr	r3, [pc, #460]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x204>)
 80052aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052ac:	e0db      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052ae:	4b73      	ldr	r3, [pc, #460]	@ (800547c <HAL_RCC_GetSysClockFreq+0x208>)
 80052b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052b2:	e0d8      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052b4:	4b6f      	ldr	r3, [pc, #444]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80052be:	4b6d      	ldr	r3, [pc, #436]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d063      	beq.n	8005392 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x200>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	099b      	lsrs	r3, r3, #6
 80052d0:	2200      	movs	r2, #0
 80052d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80052de:	2300      	movs	r3, #0
 80052e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052e6:	4622      	mov	r2, r4
 80052e8:	462b      	mov	r3, r5
 80052ea:	f04f 0000 	mov.w	r0, #0
 80052ee:	f04f 0100 	mov.w	r1, #0
 80052f2:	0159      	lsls	r1, r3, #5
 80052f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052f8:	0150      	lsls	r0, r2, #5
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4621      	mov	r1, r4
 8005300:	1a51      	subs	r1, r2, r1
 8005302:	6139      	str	r1, [r7, #16]
 8005304:	4629      	mov	r1, r5
 8005306:	eb63 0301 	sbc.w	r3, r3, r1
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005318:	4659      	mov	r1, fp
 800531a:	018b      	lsls	r3, r1, #6
 800531c:	4651      	mov	r1, sl
 800531e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005322:	4651      	mov	r1, sl
 8005324:	018a      	lsls	r2, r1, #6
 8005326:	4651      	mov	r1, sl
 8005328:	ebb2 0801 	subs.w	r8, r2, r1
 800532c:	4659      	mov	r1, fp
 800532e:	eb63 0901 	sbc.w	r9, r3, r1
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800533e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005346:	4690      	mov	r8, r2
 8005348:	4699      	mov	r9, r3
 800534a:	4623      	mov	r3, r4
 800534c:	eb18 0303 	adds.w	r3, r8, r3
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	462b      	mov	r3, r5
 8005354:	eb49 0303 	adc.w	r3, r9, r3
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005366:	4629      	mov	r1, r5
 8005368:	024b      	lsls	r3, r1, #9
 800536a:	4621      	mov	r1, r4
 800536c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005370:	4621      	mov	r1, r4
 8005372:	024a      	lsls	r2, r1, #9
 8005374:	4610      	mov	r0, r2
 8005376:	4619      	mov	r1, r3
 8005378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800537a:	2200      	movs	r2, #0
 800537c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800537e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005380:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005384:	f7fb fc90 	bl	8000ca8 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4613      	mov	r3, r2
 800538e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005390:	e058      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005392:	4b38      	ldr	r3, [pc, #224]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x200>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	099b      	lsrs	r3, r3, #6
 8005398:	2200      	movs	r2, #0
 800539a:	4618      	mov	r0, r3
 800539c:	4611      	mov	r1, r2
 800539e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053a2:	623b      	str	r3, [r7, #32]
 80053a4:	2300      	movs	r3, #0
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053ac:	4642      	mov	r2, r8
 80053ae:	464b      	mov	r3, r9
 80053b0:	f04f 0000 	mov.w	r0, #0
 80053b4:	f04f 0100 	mov.w	r1, #0
 80053b8:	0159      	lsls	r1, r3, #5
 80053ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053be:	0150      	lsls	r0, r2, #5
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4641      	mov	r1, r8
 80053c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80053ca:	4649      	mov	r1, r9
 80053cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053e4:	ebb2 040a 	subs.w	r4, r2, sl
 80053e8:	eb63 050b 	sbc.w	r5, r3, fp
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	00eb      	lsls	r3, r5, #3
 80053f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053fa:	00e2      	lsls	r2, r4, #3
 80053fc:	4614      	mov	r4, r2
 80053fe:	461d      	mov	r5, r3
 8005400:	4643      	mov	r3, r8
 8005402:	18e3      	adds	r3, r4, r3
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	464b      	mov	r3, r9
 8005408:	eb45 0303 	adc.w	r3, r5, r3
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	e9d7 4500 	ldrd	r4, r5, [r7]
 800541a:	4629      	mov	r1, r5
 800541c:	028b      	lsls	r3, r1, #10
 800541e:	4621      	mov	r1, r4
 8005420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005424:	4621      	mov	r1, r4
 8005426:	028a      	lsls	r2, r1, #10
 8005428:	4610      	mov	r0, r2
 800542a:	4619      	mov	r1, r3
 800542c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800542e:	2200      	movs	r2, #0
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	61fa      	str	r2, [r7, #28]
 8005434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005438:	f7fb fc36 	bl	8000ca8 <__aeabi_uldivmod>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4613      	mov	r3, r2
 8005442:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005444:	4b0b      	ldr	r3, [pc, #44]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x200>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	3301      	adds	r3, #1
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005454:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005458:	fbb2 f3f3 	udiv	r3, r2, r3
 800545c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800545e:	e002      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005460:	4b05      	ldr	r3, [pc, #20]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x204>)
 8005462:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005468:	4618      	mov	r0, r3
 800546a:	3750      	adds	r7, #80	@ 0x50
 800546c:	46bd      	mov	sp, r7
 800546e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800
 8005478:	00f42400 	.word	0x00f42400
 800547c:	007a1200 	.word	0x007a1200

08005480 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005484:	4b03      	ldr	r3, [pc, #12]	@ (8005494 <HAL_RCC_GetHCLKFreq+0x14>)
 8005486:	681b      	ldr	r3, [r3, #0]
}
 8005488:	4618      	mov	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	20000004 	.word	0x20000004

08005498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800549c:	f7ff fff0 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4b05      	ldr	r3, [pc, #20]	@ (80054b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	0a9b      	lsrs	r3, r3, #10
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	4903      	ldr	r1, [pc, #12]	@ (80054bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ae:	5ccb      	ldrb	r3, [r1, r3]
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40023800 	.word	0x40023800
 80054bc:	0802f380 	.word	0x0802f380

080054c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054c4:	f7ff ffdc 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4b05      	ldr	r3, [pc, #20]	@ (80054e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	0b5b      	lsrs	r3, r3, #13
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4903      	ldr	r1, [pc, #12]	@ (80054e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d6:	5ccb      	ldrb	r3, [r1, r3]
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054dc:	4618      	mov	r0, r3
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40023800 	.word	0x40023800
 80054e4:	0802f380 	.word	0x0802f380

080054e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	220f      	movs	r2, #15
 80054f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054f8:	4b12      	ldr	r3, [pc, #72]	@ (8005544 <HAL_RCC_GetClockConfig+0x5c>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0203 	and.w	r2, r3, #3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005504:	4b0f      	ldr	r3, [pc, #60]	@ (8005544 <HAL_RCC_GetClockConfig+0x5c>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005510:	4b0c      	ldr	r3, [pc, #48]	@ (8005544 <HAL_RCC_GetClockConfig+0x5c>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800551c:	4b09      	ldr	r3, [pc, #36]	@ (8005544 <HAL_RCC_GetClockConfig+0x5c>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	08db      	lsrs	r3, r3, #3
 8005522:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800552a:	4b07      	ldr	r3, [pc, #28]	@ (8005548 <HAL_RCC_GetClockConfig+0x60>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 020f 	and.w	r2, r3, #15
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	601a      	str	r2, [r3, #0]
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40023800 	.word	0x40023800
 8005548:	40023c00 	.word	0x40023c00

0800554c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d012      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005574:	4b69      	ldr	r3, [pc, #420]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	4a68      	ldr	r2, [pc, #416]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800557e:	6093      	str	r3, [r2, #8]
 8005580:	4b66      	ldr	r3, [pc, #408]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005588:	4964      	ldr	r1, [pc, #400]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005596:	2301      	movs	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d017      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055a6:	4b5d      	ldr	r3, [pc, #372]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b4:	4959      	ldr	r1, [pc, #356]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055c4:	d101      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80055c6:	2301      	movs	r3, #1
 80055c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80055d2:	2301      	movs	r3, #1
 80055d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d017      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055e2:	4b4e      	ldr	r3, [pc, #312]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	494a      	ldr	r1, [pc, #296]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005600:	d101      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005602:	2301      	movs	r3, #1
 8005604:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800560e:	2301      	movs	r3, #1
 8005610:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800561e:	2301      	movs	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 808b 	beq.w	8005746 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005630:	4b3a      	ldr	r3, [pc, #232]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005634:	4a39      	ldr	r2, [pc, #228]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800563a:	6413      	str	r3, [r2, #64]	@ 0x40
 800563c:	4b37      	ldr	r3, [pc, #220]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800563e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005648:	4b35      	ldr	r3, [pc, #212]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a34      	ldr	r2, [pc, #208]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800564e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005654:	f7fd f828 	bl	80026a8 <HAL_GetTick>
 8005658:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800565a:	e008      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565c:	f7fd f824 	bl	80026a8 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	@ 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e357      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800566e:	4b2c      	ldr	r3, [pc, #176]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800567a:	4b28      	ldr	r3, [pc, #160]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005682:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d035      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	429a      	cmp	r2, r3
 8005696:	d02e      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005698:	4b20      	ldr	r3, [pc, #128]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056a2:	4b1e      	ldr	r3, [pc, #120]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a6:	4a1d      	ldr	r2, [pc, #116]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ac:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056ae:	4b1b      	ldr	r3, [pc, #108]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b2:	4a1a      	ldr	r2, [pc, #104]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056ba:	4a18      	ldr	r2, [pc, #96]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056c0:	4b16      	ldr	r3, [pc, #88]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d114      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fc ffec 	bl	80026a8 <HAL_GetTick>
 80056d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d2:	e00a      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d4:	f7fc ffe8 	bl	80026a8 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d901      	bls.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e319      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ea:	4b0c      	ldr	r3, [pc, #48]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0ee      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005702:	d111      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005704:	4b05      	ldr	r3, [pc, #20]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005710:	4b04      	ldr	r3, [pc, #16]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005712:	400b      	ands	r3, r1
 8005714:	4901      	ldr	r1, [pc, #4]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005716:	4313      	orrs	r3, r2
 8005718:	608b      	str	r3, [r1, #8]
 800571a:	e00b      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800571c:	40023800 	.word	0x40023800
 8005720:	40007000 	.word	0x40007000
 8005724:	0ffffcff 	.word	0x0ffffcff
 8005728:	4baa      	ldr	r3, [pc, #680]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	4aa9      	ldr	r2, [pc, #676]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800572e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005732:	6093      	str	r3, [r2, #8]
 8005734:	4ba7      	ldr	r3, [pc, #668]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005736:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005740:	49a4      	ldr	r1, [pc, #656]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005742:	4313      	orrs	r3, r2
 8005744:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0310 	and.w	r3, r3, #16
 800574e:	2b00      	cmp	r3, #0
 8005750:	d010      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005752:	4ba0      	ldr	r3, [pc, #640]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005754:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005758:	4a9e      	ldr	r2, [pc, #632]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800575a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800575e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005762:	4b9c      	ldr	r3, [pc, #624]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005764:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576c:	4999      	ldr	r1, [pc, #612]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00a      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005780:	4b94      	ldr	r3, [pc, #592]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005786:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800578e:	4991      	ldr	r1, [pc, #580]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005790:	4313      	orrs	r3, r2
 8005792:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057a2:	4b8c      	ldr	r3, [pc, #560]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057b0:	4988      	ldr	r1, [pc, #544]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057c4:	4b83      	ldr	r3, [pc, #524]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d2:	4980      	ldr	r1, [pc, #512]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057e6:	4b7b      	ldr	r3, [pc, #492]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f4:	4977      	ldr	r1, [pc, #476]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005808:	4b72      	ldr	r3, [pc, #456]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800580a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580e:	f023 0203 	bic.w	r2, r3, #3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005816:	496f      	ldr	r1, [pc, #444]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800582a:	4b6a      	ldr	r3, [pc, #424]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005830:	f023 020c 	bic.w	r2, r3, #12
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005838:	4966      	ldr	r1, [pc, #408]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800584c:	4b61      	ldr	r3, [pc, #388]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005852:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800585a:	495e      	ldr	r1, [pc, #376]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800586e:	4b59      	ldr	r3, [pc, #356]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005874:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800587c:	4955      	ldr	r1, [pc, #340]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005890:	4b50      	ldr	r3, [pc, #320]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005896:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589e:	494d      	ldr	r1, [pc, #308]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80058b2:	4b48      	ldr	r3, [pc, #288]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c0:	4944      	ldr	r1, [pc, #272]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80058d4:	4b3f      	ldr	r3, [pc, #252]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058da:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058e2:	493c      	ldr	r1, [pc, #240]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80058f6:	4b37      	ldr	r3, [pc, #220]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005904:	4933      	ldr	r1, [pc, #204]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005918:	4b2e      	ldr	r3, [pc, #184]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005926:	492b      	ldr	r1, [pc, #172]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d011      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800593a:	4b26      	ldr	r3, [pc, #152]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005940:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005948:	4922      	ldr	r1, [pc, #136]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005954:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005958:	d101      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800595a:	2301      	movs	r3, #1
 800595c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800596a:	2301      	movs	r3, #1
 800596c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800597a:	4b16      	ldr	r3, [pc, #88]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800597c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005980:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005988:	4912      	ldr	r1, [pc, #72]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800599c:	4b0d      	ldr	r3, [pc, #52]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800599e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ac:	4909      	ldr	r1, [pc, #36]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d006      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 80d9 	beq.w	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059c8:	4b02      	ldr	r3, [pc, #8]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a01      	ldr	r2, [pc, #4]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059d2:	e001      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80059d4:	40023800 	.word	0x40023800
 80059d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059da:	f7fc fe65 	bl	80026a8 <HAL_GetTick>
 80059de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059e0:	e008      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059e2:	f7fc fe61 	bl	80026a8 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b64      	cmp	r3, #100	@ 0x64
 80059ee:	d901      	bls.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e194      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059f4:	4b6c      	ldr	r3, [pc, #432]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f0      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d021      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d11d      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a14:	4b64      	ldr	r3, [pc, #400]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a1a:	0c1b      	lsrs	r3, r3, #16
 8005a1c:	f003 0303 	and.w	r3, r3, #3
 8005a20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a22:	4b61      	ldr	r3, [pc, #388]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a28:	0e1b      	lsrs	r3, r3, #24
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	019a      	lsls	r2, r3, #6
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	041b      	lsls	r3, r3, #16
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	061b      	lsls	r3, r3, #24
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	071b      	lsls	r3, r3, #28
 8005a48:	4957      	ldr	r1, [pc, #348]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d004      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a64:	d00a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d02e      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a7a:	d129      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a7c:	4b4a      	ldr	r3, [pc, #296]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a82:	0c1b      	lsrs	r3, r3, #16
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a8a:	4b47      	ldr	r3, [pc, #284]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a90:	0f1b      	lsrs	r3, r3, #28
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	019a      	lsls	r2, r3, #6
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	041b      	lsls	r3, r3, #16
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	061b      	lsls	r3, r3, #24
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	071b      	lsls	r3, r3, #28
 8005ab0:	493d      	ldr	r1, [pc, #244]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005abe:	f023 021f 	bic.w	r2, r3, #31
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	4937      	ldr	r1, [pc, #220]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01d      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005adc:	4b32      	ldr	r3, [pc, #200]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae2:	0e1b      	lsrs	r3, r3, #24
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005aea:	4b2f      	ldr	r3, [pc, #188]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005af0:	0f1b      	lsrs	r3, r3, #28
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	019a      	lsls	r2, r3, #6
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	041b      	lsls	r3, r3, #16
 8005b04:	431a      	orrs	r2, r3
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	061b      	lsls	r3, r3, #24
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	071b      	lsls	r3, r3, #28
 8005b10:	4925      	ldr	r1, [pc, #148]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d011      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	019a      	lsls	r2, r3, #6
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	041b      	lsls	r3, r3, #16
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	061b      	lsls	r3, r3, #24
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	071b      	lsls	r3, r3, #28
 8005b40:	4919      	ldr	r1, [pc, #100]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b48:	4b17      	ldr	r3, [pc, #92]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a16      	ldr	r2, [pc, #88]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b54:	f7fc fda8 	bl	80026a8 <HAL_GetTick>
 8005b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b5c:	f7fc fda4 	bl	80026a8 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b64      	cmp	r3, #100	@ 0x64
 8005b68:	d901      	bls.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e0d7      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 80cd 	bne.w	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b82:	4b09      	ldr	r3, [pc, #36]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a08      	ldr	r2, [pc, #32]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b8e:	f7fc fd8b 	bl	80026a8 <HAL_GetTick>
 8005b92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b94:	e00a      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b96:	f7fc fd87 	bl	80026a8 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b64      	cmp	r3, #100	@ 0x64
 8005ba2:	d903      	bls.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e0ba      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005ba8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bac:	4b5e      	ldr	r3, [pc, #376]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bb8:	d0ed      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d02e      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d12a      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005be2:	4b51      	ldr	r3, [pc, #324]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be8:	0c1b      	lsrs	r3, r3, #16
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf6:	0f1b      	lsrs	r3, r3, #28
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	019a      	lsls	r2, r3, #6
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	041b      	lsls	r3, r3, #16
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	061b      	lsls	r3, r3, #24
 8005c10:	431a      	orrs	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	071b      	lsls	r3, r3, #28
 8005c16:	4944      	ldr	r1, [pc, #272]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c1e:	4b42      	ldr	r3, [pc, #264]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c24:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	493d      	ldr	r1, [pc, #244]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d022      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c4c:	d11d      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c4e:	4b36      	ldr	r3, [pc, #216]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c54:	0e1b      	lsrs	r3, r3, #24
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c5c:	4b32      	ldr	r3, [pc, #200]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c62:	0f1b      	lsrs	r3, r3, #28
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	019a      	lsls	r2, r3, #6
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	041b      	lsls	r3, r3, #16
 8005c76:	431a      	orrs	r2, r3
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	061b      	lsls	r3, r3, #24
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	071b      	lsls	r3, r3, #28
 8005c82:	4929      	ldr	r1, [pc, #164]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d028      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c96:	4b24      	ldr	r3, [pc, #144]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9c:	0e1b      	lsrs	r3, r3, #24
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ca4:	4b20      	ldr	r3, [pc, #128]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005caa:	0c1b      	lsrs	r3, r3, #16
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	019a      	lsls	r2, r3, #6
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	041b      	lsls	r3, r3, #16
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	061b      	lsls	r3, r3, #24
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	071b      	lsls	r3, r3, #28
 8005cca:	4917      	ldr	r1, [pc, #92]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005cd2:	4b15      	ldr	r3, [pc, #84]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	4911      	ldr	r1, [pc, #68]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a0e      	ldr	r2, [pc, #56]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf4:	f7fc fcd8 	bl	80026a8 <HAL_GetTick>
 8005cf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cfc:	f7fc fcd4 	bl	80026a8 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b64      	cmp	r3, #100	@ 0x64
 8005d08:	d901      	bls.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e007      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d0e:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d1a:	d1ef      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3720      	adds	r7, #32
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40023800 	.word	0x40023800

08005d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e049      	b.n	8005dd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f841 	bl	8005dda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f000 f9e8 	bl	8006140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d001      	beq.n	8005e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e054      	b.n	8005eb2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a26      	ldr	r2, [pc, #152]	@ (8005ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d022      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x80>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e32:	d01d      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x80>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a22      	ldr	r2, [pc, #136]	@ (8005ec4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d018      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x80>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a21      	ldr	r2, [pc, #132]	@ (8005ec8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d013      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x80>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8005ecc <HAL_TIM_Base_Start_IT+0xdc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00e      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x80>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x80>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x80>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed8 <HAL_TIM_Base_Start_IT+0xe8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d115      	bne.n	8005e9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	4b19      	ldr	r3, [pc, #100]	@ (8005edc <HAL_TIM_Base_Start_IT+0xec>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b06      	cmp	r3, #6
 8005e80:	d015      	beq.n	8005eae <HAL_TIM_Base_Start_IT+0xbe>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e88:	d011      	beq.n	8005eae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0201 	orr.w	r2, r2, #1
 8005e98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9a:	e008      	b.n	8005eae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0201 	orr.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	e000      	b.n	8005eb0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	40010000 	.word	0x40010000
 8005ec4:	40000400 	.word	0x40000400
 8005ec8:	40000800 	.word	0x40000800
 8005ecc:	40000c00 	.word	0x40000c00
 8005ed0:	40010400 	.word	0x40010400
 8005ed4:	40014000 	.word	0x40014000
 8005ed8:	40001800 	.word	0x40001800
 8005edc:	00010007 	.word	0x00010007

08005ee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d020      	beq.n	8005f44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01b      	beq.n	8005f44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0202 	mvn.w	r2, #2
 8005f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f8e9 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f8db 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f8ec 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d020      	beq.n	8005f90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01b      	beq.n	8005f90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0204 	mvn.w	r2, #4
 8005f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f8c3 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005f7c:	e005      	b.n	8005f8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f8b5 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f8c6 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d020      	beq.n	8005fdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01b      	beq.n	8005fdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f06f 0208 	mvn.w	r2, #8
 8005fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2204      	movs	r2, #4
 8005fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f89d 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005fc8:	e005      	b.n	8005fd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f88f 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f8a0 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d020      	beq.n	8006028 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01b      	beq.n	8006028 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0210 	mvn.w	r2, #16
 8005ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2208      	movs	r2, #8
 8005ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f877 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8006014:	e005      	b.n	8006022 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f869 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f87a 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00c      	beq.n	800604c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f06f 0201 	mvn.w	r2, #1
 8006044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fb fc88 	bl	800195c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006052:	2b00      	cmp	r3, #0
 8006054:	d104      	bne.n	8006060 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00c      	beq.n	800607a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006066:	2b00      	cmp	r3, #0
 8006068:	d007      	beq.n	800607a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f919 	bl	80062ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00c      	beq.n	800609e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608a:	2b00      	cmp	r3, #0
 800608c:	d007      	beq.n	800609e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f911 	bl	80062c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00c      	beq.n	80060c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f834 	bl	800612a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00c      	beq.n	80060e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d007      	beq.n	80060e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f06f 0220 	mvn.w	r2, #32
 80060de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f8d9 	bl	8006298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a46      	ldr	r2, [pc, #280]	@ (800626c <TIM_Base_SetConfig+0x12c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d013      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800615e:	d00f      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a43      	ldr	r2, [pc, #268]	@ (8006270 <TIM_Base_SetConfig+0x130>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00b      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a42      	ldr	r2, [pc, #264]	@ (8006274 <TIM_Base_SetConfig+0x134>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a41      	ldr	r2, [pc, #260]	@ (8006278 <TIM_Base_SetConfig+0x138>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a40      	ldr	r2, [pc, #256]	@ (800627c <TIM_Base_SetConfig+0x13c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d108      	bne.n	8006192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a35      	ldr	r2, [pc, #212]	@ (800626c <TIM_Base_SetConfig+0x12c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d02b      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a0:	d027      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a32      	ldr	r2, [pc, #200]	@ (8006270 <TIM_Base_SetConfig+0x130>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d023      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a31      	ldr	r2, [pc, #196]	@ (8006274 <TIM_Base_SetConfig+0x134>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d01f      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a30      	ldr	r2, [pc, #192]	@ (8006278 <TIM_Base_SetConfig+0x138>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01b      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a2f      	ldr	r2, [pc, #188]	@ (800627c <TIM_Base_SetConfig+0x13c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d017      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006280 <TIM_Base_SetConfig+0x140>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a2d      	ldr	r2, [pc, #180]	@ (8006284 <TIM_Base_SetConfig+0x144>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00f      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006288 <TIM_Base_SetConfig+0x148>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00b      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2b      	ldr	r2, [pc, #172]	@ (800628c <TIM_Base_SetConfig+0x14c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d007      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006290 <TIM_Base_SetConfig+0x150>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a29      	ldr	r2, [pc, #164]	@ (8006294 <TIM_Base_SetConfig+0x154>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d108      	bne.n	8006204 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a10      	ldr	r2, [pc, #64]	@ (800626c <TIM_Base_SetConfig+0x12c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_Base_SetConfig+0xf8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a12      	ldr	r2, [pc, #72]	@ (800627c <TIM_Base_SetConfig+0x13c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d103      	bne.n	8006240 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b01      	cmp	r3, #1
 8006250:	d105      	bne.n	800625e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f023 0201 	bic.w	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	611a      	str	r2, [r3, #16]
  }
}
 800625e:	bf00      	nop
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40010000 	.word	0x40010000
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40010400 	.word	0x40010400
 8006280:	40014000 	.word	0x40014000
 8006284:	40014400 	.word	0x40014400
 8006288:	40014800 	.word	0x40014800
 800628c:	40001800 	.word	0x40001800
 8006290:	40001c00 	.word	0x40001c00
 8006294:	40002000 	.word	0x40002000

08006298 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e040      	b.n	8006368 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7fb fcd6 	bl	8001ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2224      	movs	r2, #36	@ 0x24
 8006300:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0201 	bic.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fd7e 	bl	8006e1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fb17 	bl	8006954 <UART_SetConfig>
 8006326:	4603      	mov	r3, r0
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e01b      	b.n	8006368 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800633e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800634e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fdfd 	bl	8006f60 <UART_CheckIdleState>
 8006366:	4603      	mov	r3, r0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b0ba      	sub	sp, #232	@ 0xe8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006396:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800639a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800639e:	4013      	ands	r3, r2
 80063a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80063a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d115      	bne.n	80063d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80063ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00f      	beq.n	80063d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d009      	beq.n	80063d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8297 	beq.w	80068fc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	4798      	blx	r3
      }
      return;
 80063d6:	e291      	b.n	80068fc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 8117 	beq.w	8006610 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80063ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80063f2:	4b85      	ldr	r3, [pc, #532]	@ (8006608 <HAL_UART_IRQHandler+0x298>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 810a 	beq.w	8006610 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d011      	beq.n	800642c <HAL_UART_IRQHandler+0xbc>
 8006408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800640c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00b      	beq.n	800642c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2201      	movs	r2, #1
 800641a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006422:	f043 0201 	orr.w	r2, r3, #1
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800642c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d011      	beq.n	800645c <HAL_UART_IRQHandler+0xec>
 8006438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00b      	beq.n	800645c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2202      	movs	r2, #2
 800644a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006452:	f043 0204 	orr.w	r2, r3, #4
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800645c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d011      	beq.n	800648c <HAL_UART_IRQHandler+0x11c>
 8006468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00b      	beq.n	800648c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2204      	movs	r2, #4
 800647a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006482:	f043 0202 	orr.w	r2, r3, #2
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800648c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d017      	beq.n	80064c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800649c:	f003 0320 	and.w	r3, r3, #32
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d105      	bne.n	80064b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80064a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2208      	movs	r2, #8
 80064b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064be:	f043 0208 	orr.w	r2, r3, #8
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d012      	beq.n	80064fa <HAL_UART_IRQHandler+0x18a>
 80064d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00c      	beq.n	80064fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064f0:	f043 0220 	orr.w	r2, r3, #32
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 81fd 	beq.w	8006900 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00d      	beq.n	800652e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006534:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006542:	2b40      	cmp	r3, #64	@ 0x40
 8006544:	d005      	beq.n	8006552 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800654a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800654e:	2b00      	cmp	r3, #0
 8006550:	d04f      	beq.n	80065f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fdc8 	bl	80070e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006562:	2b40      	cmp	r3, #64	@ 0x40
 8006564:	d141      	bne.n	80065ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3308      	adds	r3, #8
 800656c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800657c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3308      	adds	r3, #8
 800658e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006592:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006596:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800659e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80065aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1d9      	bne.n	8006566 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d013      	beq.n	80065e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065be:	4a13      	ldr	r2, [pc, #76]	@ (800660c <HAL_UART_IRQHandler+0x29c>)
 80065c0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fc fa9e 	bl	8002b08 <HAL_DMA_Abort_IT>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d017      	beq.n	8006602 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80065dc:	4610      	mov	r0, r2
 80065de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e0:	e00f      	b.n	8006602 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f9a0 	bl	8006928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e8:	e00b      	b.n	8006602 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f99c 	bl	8006928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f0:	e007      	b.n	8006602 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f998 	bl	8006928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006600:	e17e      	b.n	8006900 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006602:	bf00      	nop
    return;
 8006604:	e17c      	b.n	8006900 <HAL_UART_IRQHandler+0x590>
 8006606:	bf00      	nop
 8006608:	04000120 	.word	0x04000120
 800660c:	080071b1 	.word	0x080071b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006614:	2b01      	cmp	r3, #1
 8006616:	f040 814c 	bne.w	80068b2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800661a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800661e:	f003 0310 	and.w	r3, r3, #16
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 8145 	beq.w	80068b2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 813e 	beq.w	80068b2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2210      	movs	r2, #16
 800663c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006648:	2b40      	cmp	r3, #64	@ 0x40
 800664a:	f040 80b6 	bne.w	80067ba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800665a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8150 	beq.w	8006904 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800666a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800666e:	429a      	cmp	r2, r3
 8006670:	f080 8148 	bcs.w	8006904 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800667a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006688:	f000 8086 	beq.w	8006798 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80066a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80066c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80066ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1da      	bne.n	800668c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3308      	adds	r3, #8
 80066dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80066e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066e8:	f023 0301 	bic.w	r3, r3, #1
 80066ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3308      	adds	r3, #8
 80066f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006702:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800670c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e1      	bne.n	80066d6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3308      	adds	r3, #8
 8006718:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3308      	adds	r3, #8
 8006732:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006736:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006738:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800673c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e3      	bne.n	8006712 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006768:	f023 0310 	bic.w	r3, r3, #16
 800676c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800677a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800677c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006780:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e4      	bne.n	8006758 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006792:	4618      	mov	r0, r3
 8006794:	f7fc f948 	bl	8002a28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f8c2 	bl	800693c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067b8:	e0a4      	b.n	8006904 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 8096 	beq.w	8006908 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80067dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 8091 	beq.w	8006908 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006808:	647b      	str	r3, [r7, #68]	@ 0x44
 800680a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800680e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e4      	bne.n	80067e6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3308      	adds	r3, #8
 8006822:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	623b      	str	r3, [r7, #32]
   return(result);
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	f023 0301 	bic.w	r3, r3, #1
 8006832:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3308      	adds	r3, #8
 800683c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006840:	633a      	str	r2, [r7, #48]	@ 0x30
 8006842:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e3      	bne.n	800681c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2220      	movs	r2, #32
 8006858:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	60fb      	str	r3, [r7, #12]
   return(result);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f023 0310 	bic.w	r3, r3, #16
 800687c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	69b9      	ldr	r1, [r7, #24]
 8006890:	69fa      	ldr	r2, [r7, #28]
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	617b      	str	r3, [r7, #20]
   return(result);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e4      	bne.n	8006868 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068a8:	4619      	mov	r1, r3
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f846 	bl	800693c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068b0:	e02a      	b.n	8006908 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80068b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00e      	beq.n	80068dc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d008      	beq.n	80068dc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d01c      	beq.n	800690c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
    }
    return;
 80068da:	e017      	b.n	800690c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d012      	beq.n	800690e <HAL_UART_IRQHandler+0x59e>
 80068e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00c      	beq.n	800690e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fc71 	bl	80071dc <UART_EndTransmit_IT>
    return;
 80068fa:	e008      	b.n	800690e <HAL_UART_IRQHandler+0x59e>
      return;
 80068fc:	bf00      	nop
 80068fe:	e006      	b.n	800690e <HAL_UART_IRQHandler+0x59e>
    return;
 8006900:	bf00      	nop
 8006902:	e004      	b.n	800690e <HAL_UART_IRQHandler+0x59e>
      return;
 8006904:	bf00      	nop
 8006906:	e002      	b.n	800690e <HAL_UART_IRQHandler+0x59e>
      return;
 8006908:	bf00      	nop
 800690a:	e000      	b.n	800690e <HAL_UART_IRQHandler+0x59e>
    return;
 800690c:	bf00      	nop
  }

}
 800690e:	37e8      	adds	r7, #232	@ 0xe8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	4313      	orrs	r3, r2
 8006976:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4ba6      	ldr	r3, [pc, #664]	@ (8006c18 <UART_SetConfig+0x2c4>)
 8006980:	4013      	ands	r3, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	6979      	ldr	r1, [r7, #20]
 8006988:	430b      	orrs	r3, r1
 800698a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a94      	ldr	r2, [pc, #592]	@ (8006c1c <UART_SetConfig+0x2c8>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d120      	bne.n	8006a12 <UART_SetConfig+0xbe>
 80069d0:	4b93      	ldr	r3, [pc, #588]	@ (8006c20 <UART_SetConfig+0x2cc>)
 80069d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d816      	bhi.n	8006a0c <UART_SetConfig+0xb8>
 80069de:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <UART_SetConfig+0x90>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	080069f5 	.word	0x080069f5
 80069e8:	08006a01 	.word	0x08006a01
 80069ec:	080069fb 	.word	0x080069fb
 80069f0:	08006a07 	.word	0x08006a07
 80069f4:	2301      	movs	r3, #1
 80069f6:	77fb      	strb	r3, [r7, #31]
 80069f8:	e150      	b.n	8006c9c <UART_SetConfig+0x348>
 80069fa:	2302      	movs	r3, #2
 80069fc:	77fb      	strb	r3, [r7, #31]
 80069fe:	e14d      	b.n	8006c9c <UART_SetConfig+0x348>
 8006a00:	2304      	movs	r3, #4
 8006a02:	77fb      	strb	r3, [r7, #31]
 8006a04:	e14a      	b.n	8006c9c <UART_SetConfig+0x348>
 8006a06:	2308      	movs	r3, #8
 8006a08:	77fb      	strb	r3, [r7, #31]
 8006a0a:	e147      	b.n	8006c9c <UART_SetConfig+0x348>
 8006a0c:	2310      	movs	r3, #16
 8006a0e:	77fb      	strb	r3, [r7, #31]
 8006a10:	e144      	b.n	8006c9c <UART_SetConfig+0x348>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a83      	ldr	r2, [pc, #524]	@ (8006c24 <UART_SetConfig+0x2d0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d132      	bne.n	8006a82 <UART_SetConfig+0x12e>
 8006a1c:	4b80      	ldr	r3, [pc, #512]	@ (8006c20 <UART_SetConfig+0x2cc>)
 8006a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a22:	f003 030c 	and.w	r3, r3, #12
 8006a26:	2b0c      	cmp	r3, #12
 8006a28:	d828      	bhi.n	8006a7c <UART_SetConfig+0x128>
 8006a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a30 <UART_SetConfig+0xdc>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006a65 	.word	0x08006a65
 8006a34:	08006a7d 	.word	0x08006a7d
 8006a38:	08006a7d 	.word	0x08006a7d
 8006a3c:	08006a7d 	.word	0x08006a7d
 8006a40:	08006a71 	.word	0x08006a71
 8006a44:	08006a7d 	.word	0x08006a7d
 8006a48:	08006a7d 	.word	0x08006a7d
 8006a4c:	08006a7d 	.word	0x08006a7d
 8006a50:	08006a6b 	.word	0x08006a6b
 8006a54:	08006a7d 	.word	0x08006a7d
 8006a58:	08006a7d 	.word	0x08006a7d
 8006a5c:	08006a7d 	.word	0x08006a7d
 8006a60:	08006a77 	.word	0x08006a77
 8006a64:	2300      	movs	r3, #0
 8006a66:	77fb      	strb	r3, [r7, #31]
 8006a68:	e118      	b.n	8006c9c <UART_SetConfig+0x348>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	77fb      	strb	r3, [r7, #31]
 8006a6e:	e115      	b.n	8006c9c <UART_SetConfig+0x348>
 8006a70:	2304      	movs	r3, #4
 8006a72:	77fb      	strb	r3, [r7, #31]
 8006a74:	e112      	b.n	8006c9c <UART_SetConfig+0x348>
 8006a76:	2308      	movs	r3, #8
 8006a78:	77fb      	strb	r3, [r7, #31]
 8006a7a:	e10f      	b.n	8006c9c <UART_SetConfig+0x348>
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	77fb      	strb	r3, [r7, #31]
 8006a80:	e10c      	b.n	8006c9c <UART_SetConfig+0x348>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a68      	ldr	r2, [pc, #416]	@ (8006c28 <UART_SetConfig+0x2d4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d120      	bne.n	8006ace <UART_SetConfig+0x17a>
 8006a8c:	4b64      	ldr	r3, [pc, #400]	@ (8006c20 <UART_SetConfig+0x2cc>)
 8006a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a92:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a96:	2b30      	cmp	r3, #48	@ 0x30
 8006a98:	d013      	beq.n	8006ac2 <UART_SetConfig+0x16e>
 8006a9a:	2b30      	cmp	r3, #48	@ 0x30
 8006a9c:	d814      	bhi.n	8006ac8 <UART_SetConfig+0x174>
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	d009      	beq.n	8006ab6 <UART_SetConfig+0x162>
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	d810      	bhi.n	8006ac8 <UART_SetConfig+0x174>
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <UART_SetConfig+0x15c>
 8006aaa:	2b10      	cmp	r3, #16
 8006aac:	d006      	beq.n	8006abc <UART_SetConfig+0x168>
 8006aae:	e00b      	b.n	8006ac8 <UART_SetConfig+0x174>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e0f2      	b.n	8006c9c <UART_SetConfig+0x348>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	77fb      	strb	r3, [r7, #31]
 8006aba:	e0ef      	b.n	8006c9c <UART_SetConfig+0x348>
 8006abc:	2304      	movs	r3, #4
 8006abe:	77fb      	strb	r3, [r7, #31]
 8006ac0:	e0ec      	b.n	8006c9c <UART_SetConfig+0x348>
 8006ac2:	2308      	movs	r3, #8
 8006ac4:	77fb      	strb	r3, [r7, #31]
 8006ac6:	e0e9      	b.n	8006c9c <UART_SetConfig+0x348>
 8006ac8:	2310      	movs	r3, #16
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e0e6      	b.n	8006c9c <UART_SetConfig+0x348>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a56      	ldr	r2, [pc, #344]	@ (8006c2c <UART_SetConfig+0x2d8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d120      	bne.n	8006b1a <UART_SetConfig+0x1c6>
 8006ad8:	4b51      	ldr	r3, [pc, #324]	@ (8006c20 <UART_SetConfig+0x2cc>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ade:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ae2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ae4:	d013      	beq.n	8006b0e <UART_SetConfig+0x1ba>
 8006ae6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ae8:	d814      	bhi.n	8006b14 <UART_SetConfig+0x1c0>
 8006aea:	2b80      	cmp	r3, #128	@ 0x80
 8006aec:	d009      	beq.n	8006b02 <UART_SetConfig+0x1ae>
 8006aee:	2b80      	cmp	r3, #128	@ 0x80
 8006af0:	d810      	bhi.n	8006b14 <UART_SetConfig+0x1c0>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d002      	beq.n	8006afc <UART_SetConfig+0x1a8>
 8006af6:	2b40      	cmp	r3, #64	@ 0x40
 8006af8:	d006      	beq.n	8006b08 <UART_SetConfig+0x1b4>
 8006afa:	e00b      	b.n	8006b14 <UART_SetConfig+0x1c0>
 8006afc:	2300      	movs	r3, #0
 8006afe:	77fb      	strb	r3, [r7, #31]
 8006b00:	e0cc      	b.n	8006c9c <UART_SetConfig+0x348>
 8006b02:	2302      	movs	r3, #2
 8006b04:	77fb      	strb	r3, [r7, #31]
 8006b06:	e0c9      	b.n	8006c9c <UART_SetConfig+0x348>
 8006b08:	2304      	movs	r3, #4
 8006b0a:	77fb      	strb	r3, [r7, #31]
 8006b0c:	e0c6      	b.n	8006c9c <UART_SetConfig+0x348>
 8006b0e:	2308      	movs	r3, #8
 8006b10:	77fb      	strb	r3, [r7, #31]
 8006b12:	e0c3      	b.n	8006c9c <UART_SetConfig+0x348>
 8006b14:	2310      	movs	r3, #16
 8006b16:	77fb      	strb	r3, [r7, #31]
 8006b18:	e0c0      	b.n	8006c9c <UART_SetConfig+0x348>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a44      	ldr	r2, [pc, #272]	@ (8006c30 <UART_SetConfig+0x2dc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d125      	bne.n	8006b70 <UART_SetConfig+0x21c>
 8006b24:	4b3e      	ldr	r3, [pc, #248]	@ (8006c20 <UART_SetConfig+0x2cc>)
 8006b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b32:	d017      	beq.n	8006b64 <UART_SetConfig+0x210>
 8006b34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b38:	d817      	bhi.n	8006b6a <UART_SetConfig+0x216>
 8006b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b3e:	d00b      	beq.n	8006b58 <UART_SetConfig+0x204>
 8006b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b44:	d811      	bhi.n	8006b6a <UART_SetConfig+0x216>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <UART_SetConfig+0x1fe>
 8006b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b4e:	d006      	beq.n	8006b5e <UART_SetConfig+0x20a>
 8006b50:	e00b      	b.n	8006b6a <UART_SetConfig+0x216>
 8006b52:	2300      	movs	r3, #0
 8006b54:	77fb      	strb	r3, [r7, #31]
 8006b56:	e0a1      	b.n	8006c9c <UART_SetConfig+0x348>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	77fb      	strb	r3, [r7, #31]
 8006b5c:	e09e      	b.n	8006c9c <UART_SetConfig+0x348>
 8006b5e:	2304      	movs	r3, #4
 8006b60:	77fb      	strb	r3, [r7, #31]
 8006b62:	e09b      	b.n	8006c9c <UART_SetConfig+0x348>
 8006b64:	2308      	movs	r3, #8
 8006b66:	77fb      	strb	r3, [r7, #31]
 8006b68:	e098      	b.n	8006c9c <UART_SetConfig+0x348>
 8006b6a:	2310      	movs	r3, #16
 8006b6c:	77fb      	strb	r3, [r7, #31]
 8006b6e:	e095      	b.n	8006c9c <UART_SetConfig+0x348>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a2f      	ldr	r2, [pc, #188]	@ (8006c34 <UART_SetConfig+0x2e0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d125      	bne.n	8006bc6 <UART_SetConfig+0x272>
 8006b7a:	4b29      	ldr	r3, [pc, #164]	@ (8006c20 <UART_SetConfig+0x2cc>)
 8006b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b88:	d017      	beq.n	8006bba <UART_SetConfig+0x266>
 8006b8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b8e:	d817      	bhi.n	8006bc0 <UART_SetConfig+0x26c>
 8006b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b94:	d00b      	beq.n	8006bae <UART_SetConfig+0x25a>
 8006b96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b9a:	d811      	bhi.n	8006bc0 <UART_SetConfig+0x26c>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <UART_SetConfig+0x254>
 8006ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba4:	d006      	beq.n	8006bb4 <UART_SetConfig+0x260>
 8006ba6:	e00b      	b.n	8006bc0 <UART_SetConfig+0x26c>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	77fb      	strb	r3, [r7, #31]
 8006bac:	e076      	b.n	8006c9c <UART_SetConfig+0x348>
 8006bae:	2302      	movs	r3, #2
 8006bb0:	77fb      	strb	r3, [r7, #31]
 8006bb2:	e073      	b.n	8006c9c <UART_SetConfig+0x348>
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	77fb      	strb	r3, [r7, #31]
 8006bb8:	e070      	b.n	8006c9c <UART_SetConfig+0x348>
 8006bba:	2308      	movs	r3, #8
 8006bbc:	77fb      	strb	r3, [r7, #31]
 8006bbe:	e06d      	b.n	8006c9c <UART_SetConfig+0x348>
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	77fb      	strb	r3, [r7, #31]
 8006bc4:	e06a      	b.n	8006c9c <UART_SetConfig+0x348>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1b      	ldr	r2, [pc, #108]	@ (8006c38 <UART_SetConfig+0x2e4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d138      	bne.n	8006c42 <UART_SetConfig+0x2ee>
 8006bd0:	4b13      	ldr	r3, [pc, #76]	@ (8006c20 <UART_SetConfig+0x2cc>)
 8006bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006bda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bde:	d017      	beq.n	8006c10 <UART_SetConfig+0x2bc>
 8006be0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006be4:	d82a      	bhi.n	8006c3c <UART_SetConfig+0x2e8>
 8006be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bea:	d00b      	beq.n	8006c04 <UART_SetConfig+0x2b0>
 8006bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bf0:	d824      	bhi.n	8006c3c <UART_SetConfig+0x2e8>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <UART_SetConfig+0x2aa>
 8006bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bfa:	d006      	beq.n	8006c0a <UART_SetConfig+0x2b6>
 8006bfc:	e01e      	b.n	8006c3c <UART_SetConfig+0x2e8>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	77fb      	strb	r3, [r7, #31]
 8006c02:	e04b      	b.n	8006c9c <UART_SetConfig+0x348>
 8006c04:	2302      	movs	r3, #2
 8006c06:	77fb      	strb	r3, [r7, #31]
 8006c08:	e048      	b.n	8006c9c <UART_SetConfig+0x348>
 8006c0a:	2304      	movs	r3, #4
 8006c0c:	77fb      	strb	r3, [r7, #31]
 8006c0e:	e045      	b.n	8006c9c <UART_SetConfig+0x348>
 8006c10:	2308      	movs	r3, #8
 8006c12:	77fb      	strb	r3, [r7, #31]
 8006c14:	e042      	b.n	8006c9c <UART_SetConfig+0x348>
 8006c16:	bf00      	nop
 8006c18:	efff69f3 	.word	0xefff69f3
 8006c1c:	40011000 	.word	0x40011000
 8006c20:	40023800 	.word	0x40023800
 8006c24:	40004400 	.word	0x40004400
 8006c28:	40004800 	.word	0x40004800
 8006c2c:	40004c00 	.word	0x40004c00
 8006c30:	40005000 	.word	0x40005000
 8006c34:	40011400 	.word	0x40011400
 8006c38:	40007800 	.word	0x40007800
 8006c3c:	2310      	movs	r3, #16
 8006c3e:	77fb      	strb	r3, [r7, #31]
 8006c40:	e02c      	b.n	8006c9c <UART_SetConfig+0x348>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a72      	ldr	r2, [pc, #456]	@ (8006e10 <UART_SetConfig+0x4bc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d125      	bne.n	8006c98 <UART_SetConfig+0x344>
 8006c4c:	4b71      	ldr	r3, [pc, #452]	@ (8006e14 <UART_SetConfig+0x4c0>)
 8006c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c52:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006c56:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c5a:	d017      	beq.n	8006c8c <UART_SetConfig+0x338>
 8006c5c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c60:	d817      	bhi.n	8006c92 <UART_SetConfig+0x33e>
 8006c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c66:	d00b      	beq.n	8006c80 <UART_SetConfig+0x32c>
 8006c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c6c:	d811      	bhi.n	8006c92 <UART_SetConfig+0x33e>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <UART_SetConfig+0x326>
 8006c72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c76:	d006      	beq.n	8006c86 <UART_SetConfig+0x332>
 8006c78:	e00b      	b.n	8006c92 <UART_SetConfig+0x33e>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	77fb      	strb	r3, [r7, #31]
 8006c7e:	e00d      	b.n	8006c9c <UART_SetConfig+0x348>
 8006c80:	2302      	movs	r3, #2
 8006c82:	77fb      	strb	r3, [r7, #31]
 8006c84:	e00a      	b.n	8006c9c <UART_SetConfig+0x348>
 8006c86:	2304      	movs	r3, #4
 8006c88:	77fb      	strb	r3, [r7, #31]
 8006c8a:	e007      	b.n	8006c9c <UART_SetConfig+0x348>
 8006c8c:	2308      	movs	r3, #8
 8006c8e:	77fb      	strb	r3, [r7, #31]
 8006c90:	e004      	b.n	8006c9c <UART_SetConfig+0x348>
 8006c92:	2310      	movs	r3, #16
 8006c94:	77fb      	strb	r3, [r7, #31]
 8006c96:	e001      	b.n	8006c9c <UART_SetConfig+0x348>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ca4:	d15b      	bne.n	8006d5e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006ca6:	7ffb      	ldrb	r3, [r7, #31]
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d828      	bhi.n	8006cfe <UART_SetConfig+0x3aa>
 8006cac:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb4 <UART_SetConfig+0x360>)
 8006cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb2:	bf00      	nop
 8006cb4:	08006cd9 	.word	0x08006cd9
 8006cb8:	08006ce1 	.word	0x08006ce1
 8006cbc:	08006ce9 	.word	0x08006ce9
 8006cc0:	08006cff 	.word	0x08006cff
 8006cc4:	08006cef 	.word	0x08006cef
 8006cc8:	08006cff 	.word	0x08006cff
 8006ccc:	08006cff 	.word	0x08006cff
 8006cd0:	08006cff 	.word	0x08006cff
 8006cd4:	08006cf7 	.word	0x08006cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cd8:	f7fe fbde 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8006cdc:	61b8      	str	r0, [r7, #24]
        break;
 8006cde:	e013      	b.n	8006d08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce0:	f7fe fbee 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8006ce4:	61b8      	str	r0, [r7, #24]
        break;
 8006ce6:	e00f      	b.n	8006d08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8006e18 <UART_SetConfig+0x4c4>)
 8006cea:	61bb      	str	r3, [r7, #24]
        break;
 8006cec:	e00c      	b.n	8006d08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cee:	f7fe fac1 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 8006cf2:	61b8      	str	r0, [r7, #24]
        break;
 8006cf4:	e008      	b.n	8006d08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cfa:	61bb      	str	r3, [r7, #24]
        break;
 8006cfc:	e004      	b.n	8006d08 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	77bb      	strb	r3, [r7, #30]
        break;
 8006d06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d074      	beq.n	8006df8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	005a      	lsls	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	441a      	add	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	2b0f      	cmp	r3, #15
 8006d28:	d916      	bls.n	8006d58 <UART_SetConfig+0x404>
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d30:	d212      	bcs.n	8006d58 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f023 030f 	bic.w	r3, r3, #15
 8006d3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	085b      	lsrs	r3, r3, #1
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	89fb      	ldrh	r3, [r7, #14]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	89fa      	ldrh	r2, [r7, #14]
 8006d54:	60da      	str	r2, [r3, #12]
 8006d56:	e04f      	b.n	8006df8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	77bb      	strb	r3, [r7, #30]
 8006d5c:	e04c      	b.n	8006df8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d5e:	7ffb      	ldrb	r3, [r7, #31]
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d828      	bhi.n	8006db6 <UART_SetConfig+0x462>
 8006d64:	a201      	add	r2, pc, #4	@ (adr r2, 8006d6c <UART_SetConfig+0x418>)
 8006d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6a:	bf00      	nop
 8006d6c:	08006d91 	.word	0x08006d91
 8006d70:	08006d99 	.word	0x08006d99
 8006d74:	08006da1 	.word	0x08006da1
 8006d78:	08006db7 	.word	0x08006db7
 8006d7c:	08006da7 	.word	0x08006da7
 8006d80:	08006db7 	.word	0x08006db7
 8006d84:	08006db7 	.word	0x08006db7
 8006d88:	08006db7 	.word	0x08006db7
 8006d8c:	08006daf 	.word	0x08006daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d90:	f7fe fb82 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8006d94:	61b8      	str	r0, [r7, #24]
        break;
 8006d96:	e013      	b.n	8006dc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d98:	f7fe fb92 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8006d9c:	61b8      	str	r0, [r7, #24]
        break;
 8006d9e:	e00f      	b.n	8006dc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006da0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e18 <UART_SetConfig+0x4c4>)
 8006da2:	61bb      	str	r3, [r7, #24]
        break;
 8006da4:	e00c      	b.n	8006dc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006da6:	f7fe fa65 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 8006daa:	61b8      	str	r0, [r7, #24]
        break;
 8006dac:	e008      	b.n	8006dc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006db2:	61bb      	str	r3, [r7, #24]
        break;
 8006db4:	e004      	b.n	8006dc0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	77bb      	strb	r3, [r7, #30]
        break;
 8006dbe:	bf00      	nop
    }

    if (pclk != 0U)
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d018      	beq.n	8006df8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	085a      	lsrs	r2, r3, #1
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	441a      	add	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b0f      	cmp	r3, #15
 8006dde:	d909      	bls.n	8006df4 <UART_SetConfig+0x4a0>
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006de6:	d205      	bcs.n	8006df4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60da      	str	r2, [r3, #12]
 8006df2:	e001      	b.n	8006df8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006e04:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3720      	adds	r7, #32
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	40007c00 	.word	0x40007c00
 8006e14:	40023800 	.word	0x40023800
 8006e18:	00f42400 	.word	0x00f42400

08006e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01a      	beq.n	8006f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f1a:	d10a      	bne.n	8006f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	605a      	str	r2, [r3, #4]
  }
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08c      	sub	sp, #48	@ 0x30
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f70:	f7fb fb9a 	bl	80026a8 <HAL_GetTick>
 8006f74:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d12e      	bne.n	8006fe2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f83b 	bl	800700e <UART_WaitOnFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d021      	beq.n	8006fe2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fb2:	623b      	str	r3, [r7, #32]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	61fb      	str	r3, [r7, #28]
 8006fbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	69b9      	ldr	r1, [r7, #24]
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e6      	bne.n	8006f9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e011      	b.n	8007006 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3728      	adds	r7, #40	@ 0x28
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	603b      	str	r3, [r7, #0]
 800701a:	4613      	mov	r3, r2
 800701c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800701e:	e04f      	b.n	80070c0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007026:	d04b      	beq.n	80070c0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007028:	f7fb fb3e 	bl	80026a8 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	429a      	cmp	r2, r3
 8007036:	d302      	bcc.n	800703e <UART_WaitOnFlagUntilTimeout+0x30>
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e04e      	b.n	80070e0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d037      	beq.n	80070c0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b80      	cmp	r3, #128	@ 0x80
 8007054:	d034      	beq.n	80070c0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b40      	cmp	r3, #64	@ 0x40
 800705a:	d031      	beq.n	80070c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b08      	cmp	r3, #8
 8007068:	d110      	bne.n	800708c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2208      	movs	r2, #8
 8007070:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f838 	bl	80070e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2208      	movs	r2, #8
 800707c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e029      	b.n	80070e0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007096:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800709a:	d111      	bne.n	80070c0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 f81e 	bl	80070e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e00f      	b.n	80070e0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	69da      	ldr	r2, [r3, #28]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	4013      	ands	r3, r2
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	bf0c      	ite	eq
 80070d0:	2301      	moveq	r3, #1
 80070d2:	2300      	movne	r3, #0
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	79fb      	ldrb	r3, [r7, #7]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d0a0      	beq.n	8007020 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b095      	sub	sp, #84	@ 0x54
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007100:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007104:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800710e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007110:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007114:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800711c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e6      	bne.n	80070f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3308      	adds	r3, #8
 8007128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	61fb      	str	r3, [r7, #28]
   return(result);
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	f023 0301 	bic.w	r3, r3, #1
 8007138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3308      	adds	r3, #8
 8007140:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007142:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007144:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e5      	bne.n	8007122 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800715a:	2b01      	cmp	r3, #1
 800715c:	d118      	bne.n	8007190 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	e853 3f00 	ldrex	r3, [r3]
 800716a:	60bb      	str	r3, [r7, #8]
   return(result);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f023 0310 	bic.w	r3, r3, #16
 8007172:	647b      	str	r3, [r7, #68]	@ 0x44
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800717c:	61bb      	str	r3, [r7, #24]
 800717e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007180:	6979      	ldr	r1, [r7, #20]
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	e841 2300 	strex	r3, r2, [r1]
 8007188:	613b      	str	r3, [r7, #16]
   return(result);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1e6      	bne.n	800715e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2220      	movs	r2, #32
 8007194:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80071a4:	bf00      	nop
 80071a6:	3754      	adds	r7, #84	@ 0x54
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fbaa 	bl	8006928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071d4:	bf00      	nop
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071f8:	61fb      	str	r3, [r7, #28]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	6979      	ldr	r1, [r7, #20]
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	613b      	str	r3, [r7, #16]
   return(result);
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e6      	bne.n	80071e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff fb76 	bl	8006914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007228:	bf00      	nop
 800722a:	3720      	adds	r7, #32
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007230:	b084      	sub	sp, #16
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	f107 001c 	add.w	r0, r7, #28
 800723e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007242:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007246:	2b01      	cmp	r3, #1
 8007248:	d121      	bne.n	800728e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	4b21      	ldr	r3, [pc, #132]	@ (80072e0 <USB_CoreInit+0xb0>)
 800725c:	4013      	ands	r3, r2
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800726e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007272:	2b01      	cmp	r3, #1
 8007274:	d105      	bne.n	8007282 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fa92 	bl	80077ac <USB_CoreReset>
 8007288:	4603      	mov	r3, r0
 800728a:	73fb      	strb	r3, [r7, #15]
 800728c:	e010      	b.n	80072b0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa86 	bl	80077ac <USB_CoreReset>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80072b0:	7fbb      	ldrb	r3, [r7, #30]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d10b      	bne.n	80072ce <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f043 0206 	orr.w	r2, r3, #6
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f043 0220 	orr.w	r2, r3, #32
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072da:	b004      	add	sp, #16
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	ffbdffbf 	.word	0xffbdffbf

080072e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f023 0201 	bic.w	r2, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d115      	bne.n	8007354 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007334:	200a      	movs	r0, #10
 8007336:	f7fb f9c3 	bl	80026c0 <HAL_Delay>
      ms += 10U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	330a      	adds	r3, #10
 800733e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fa25 	bl	8007790 <USB_GetMode>
 8007346:	4603      	mov	r3, r0
 8007348:	2b01      	cmp	r3, #1
 800734a:	d01e      	beq.n	800738a <USB_SetCurrentMode+0x84>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007350:	d9f0      	bls.n	8007334 <USB_SetCurrentMode+0x2e>
 8007352:	e01a      	b.n	800738a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d115      	bne.n	8007386 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007366:	200a      	movs	r0, #10
 8007368:	f7fb f9aa 	bl	80026c0 <HAL_Delay>
      ms += 10U;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	330a      	adds	r3, #10
 8007370:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa0c 	bl	8007790 <USB_GetMode>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <USB_SetCurrentMode+0x84>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2bc7      	cmp	r3, #199	@ 0xc7
 8007382:	d9f0      	bls.n	8007366 <USB_SetCurrentMode+0x60>
 8007384:	e001      	b.n	800738a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e005      	b.n	8007396 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2bc8      	cmp	r3, #200	@ 0xc8
 800738e:	d101      	bne.n	8007394 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e000      	b.n	8007396 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073a0:	b084      	sub	sp, #16
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b086      	sub	sp, #24
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80073ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073ba:	2300      	movs	r3, #0
 80073bc:	613b      	str	r3, [r7, #16]
 80073be:	e009      	b.n	80073d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	3340      	adds	r3, #64	@ 0x40
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	3301      	adds	r3, #1
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b0e      	cmp	r3, #14
 80073d8:	d9f2      	bls.n	80073c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d11c      	bne.n	800741c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073f0:	f043 0302 	orr.w	r3, r3, #2
 80073f4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	e005      	b.n	8007428 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007420:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800742e:	461a      	mov	r2, r3
 8007430:	2300      	movs	r3, #0
 8007432:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007434:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007438:	2b01      	cmp	r3, #1
 800743a:	d10d      	bne.n	8007458 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800743c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007440:	2b00      	cmp	r3, #0
 8007442:	d104      	bne.n	800744e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007444:	2100      	movs	r1, #0
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f968 	bl	800771c <USB_SetDevSpeed>
 800744c:	e008      	b.n	8007460 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800744e:	2101      	movs	r1, #1
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f963 	bl	800771c <USB_SetDevSpeed>
 8007456:	e003      	b.n	8007460 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007458:	2103      	movs	r1, #3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f95e 	bl	800771c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007460:	2110      	movs	r1, #16
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f8fa 	bl	800765c <USB_FlushTxFifo>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f924 	bl	80076c0 <USB_FlushRxFifo>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007488:	461a      	mov	r2, r3
 800748a:	2300      	movs	r3, #0
 800748c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007494:	461a      	mov	r2, r3
 8007496:	2300      	movs	r3, #0
 8007498:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a0:	461a      	mov	r2, r3
 80074a2:	2300      	movs	r3, #0
 80074a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	e043      	b.n	8007534 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074c2:	d118      	bne.n	80074f6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d6:	461a      	mov	r2, r3
 80074d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074dc:	6013      	str	r3, [r2, #0]
 80074de:	e013      	b.n	8007508 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ec:	461a      	mov	r2, r3
 80074ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	e008      	b.n	8007508 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007502:	461a      	mov	r2, r3
 8007504:	2300      	movs	r3, #0
 8007506:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007514:	461a      	mov	r2, r3
 8007516:	2300      	movs	r3, #0
 8007518:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007526:	461a      	mov	r2, r3
 8007528:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800752c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	3301      	adds	r3, #1
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007538:	461a      	mov	r2, r3
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	4293      	cmp	r3, r2
 800753e:	d3b5      	bcc.n	80074ac <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007540:	2300      	movs	r3, #0
 8007542:	613b      	str	r3, [r7, #16]
 8007544:	e043      	b.n	80075ce <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007558:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800755c:	d118      	bne.n	8007590 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10a      	bne.n	800757a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007570:	461a      	mov	r2, r3
 8007572:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	e013      	b.n	80075a2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007586:	461a      	mov	r2, r3
 8007588:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	e008      	b.n	80075a2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800759c:	461a      	mov	r2, r3
 800759e:	2300      	movs	r3, #0
 80075a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ae:	461a      	mov	r2, r3
 80075b0:	2300      	movs	r3, #0
 80075b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075c0:	461a      	mov	r2, r3
 80075c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80075c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	3301      	adds	r3, #1
 80075cc:	613b      	str	r3, [r7, #16]
 80075ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80075d2:	461a      	mov	r2, r3
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d3b5      	bcc.n	8007546 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80075fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007600:	2b00      	cmp	r3, #0
 8007602:	d105      	bne.n	8007610 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	f043 0210 	orr.w	r2, r3, #16
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699a      	ldr	r2, [r3, #24]
 8007614:	4b0f      	ldr	r3, [pc, #60]	@ (8007654 <USB_DevInit+0x2b4>)
 8007616:	4313      	orrs	r3, r2
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800761c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007620:	2b00      	cmp	r3, #0
 8007622:	d005      	beq.n	8007630 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	f043 0208 	orr.w	r2, r3, #8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007630:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007634:	2b01      	cmp	r3, #1
 8007636:	d105      	bne.n	8007644 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	699a      	ldr	r2, [r3, #24]
 800763c:	4b06      	ldr	r3, [pc, #24]	@ (8007658 <USB_DevInit+0x2b8>)
 800763e:	4313      	orrs	r3, r2
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007644:	7dfb      	ldrb	r3, [r7, #23]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007650:	b004      	add	sp, #16
 8007652:	4770      	bx	lr
 8007654:	803c3800 	.word	0x803c3800
 8007658:	40000004 	.word	0x40000004

0800765c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3301      	adds	r3, #1
 800766e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007676:	d901      	bls.n	800767c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e01b      	b.n	80076b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	daf2      	bge.n	800766a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	019b      	lsls	r3, r3, #6
 800768c:	f043 0220 	orr.w	r2, r3, #32
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3301      	adds	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076a0:	d901      	bls.n	80076a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e006      	b.n	80076b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f003 0320 	and.w	r3, r3, #32
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d0f0      	beq.n	8007694 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3301      	adds	r3, #1
 80076d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076d8:	d901      	bls.n	80076de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e018      	b.n	8007710 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	daf2      	bge.n	80076cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2210      	movs	r2, #16
 80076ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3301      	adds	r3, #1
 80076f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076fc:	d901      	bls.n	8007702 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e006      	b.n	8007710 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	f003 0310 	and.w	r3, r3, #16
 800770a:	2b10      	cmp	r3, #16
 800770c:	d0f0      	beq.n	80076f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	68f9      	ldr	r1, [r7, #12]
 8007738:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800773c:	4313      	orrs	r3, r2
 800773e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007768:	f023 0303 	bic.w	r3, r3, #3
 800776c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800777c:	f043 0302 	orr.w	r3, r3, #2
 8007780:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	f003 0301 	and.w	r3, r3, #1
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3301      	adds	r3, #1
 80077bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077c4:	d901      	bls.n	80077ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e01b      	b.n	8007802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	daf2      	bge.n	80077b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f043 0201 	orr.w	r2, r3, #1
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3301      	adds	r3, #1
 80077e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077ee:	d901      	bls.n	80077f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e006      	b.n	8007802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d0f0      	beq.n	80077e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
	...

08007810 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007816:	4b92      	ldr	r3, [pc, #584]	@ (8007a60 <MX_LWIP_Init+0x250>)
 8007818:	22c0      	movs	r2, #192	@ 0xc0
 800781a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800781c:	4b90      	ldr	r3, [pc, #576]	@ (8007a60 <MX_LWIP_Init+0x250>)
 800781e:	22a8      	movs	r2, #168	@ 0xa8
 8007820:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8007822:	4b8f      	ldr	r3, [pc, #572]	@ (8007a60 <MX_LWIP_Init+0x250>)
 8007824:	2201      	movs	r2, #1
 8007826:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8007828:	4b8d      	ldr	r3, [pc, #564]	@ (8007a60 <MX_LWIP_Init+0x250>)
 800782a:	2202      	movs	r2, #2
 800782c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800782e:	4b8d      	ldr	r3, [pc, #564]	@ (8007a64 <MX_LWIP_Init+0x254>)
 8007830:	22ff      	movs	r2, #255	@ 0xff
 8007832:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007834:	4b8b      	ldr	r3, [pc, #556]	@ (8007a64 <MX_LWIP_Init+0x254>)
 8007836:	22ff      	movs	r2, #255	@ 0xff
 8007838:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800783a:	4b8a      	ldr	r3, [pc, #552]	@ (8007a64 <MX_LWIP_Init+0x254>)
 800783c:	22ff      	movs	r2, #255	@ 0xff
 800783e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007840:	4b88      	ldr	r3, [pc, #544]	@ (8007a64 <MX_LWIP_Init+0x254>)
 8007842:	2200      	movs	r2, #0
 8007844:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007846:	4b88      	ldr	r3, [pc, #544]	@ (8007a68 <MX_LWIP_Init+0x258>)
 8007848:	22c0      	movs	r2, #192	@ 0xc0
 800784a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800784c:	4b86      	ldr	r3, [pc, #536]	@ (8007a68 <MX_LWIP_Init+0x258>)
 800784e:	22a8      	movs	r2, #168	@ 0xa8
 8007850:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8007852:	4b85      	ldr	r3, [pc, #532]	@ (8007a68 <MX_LWIP_Init+0x258>)
 8007854:	2201      	movs	r2, #1
 8007856:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007858:	4b83      	ldr	r3, [pc, #524]	@ (8007a68 <MX_LWIP_Init+0x258>)
 800785a:	2201      	movs	r2, #1
 800785c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800785e:	2100      	movs	r1, #0
 8007860:	2000      	movs	r0, #0
 8007862:	f008 f84d 	bl	800f900 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007866:	4b7e      	ldr	r3, [pc, #504]	@ (8007a60 <MX_LWIP_Init+0x250>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	061a      	lsls	r2, r3, #24
 800786c:	4b7c      	ldr	r3, [pc, #496]	@ (8007a60 <MX_LWIP_Init+0x250>)
 800786e:	785b      	ldrb	r3, [r3, #1]
 8007870:	041b      	lsls	r3, r3, #16
 8007872:	431a      	orrs	r2, r3
 8007874:	4b7a      	ldr	r3, [pc, #488]	@ (8007a60 <MX_LWIP_Init+0x250>)
 8007876:	789b      	ldrb	r3, [r3, #2]
 8007878:	021b      	lsls	r3, r3, #8
 800787a:	4313      	orrs	r3, r2
 800787c:	4a78      	ldr	r2, [pc, #480]	@ (8007a60 <MX_LWIP_Init+0x250>)
 800787e:	78d2      	ldrb	r2, [r2, #3]
 8007880:	4313      	orrs	r3, r2
 8007882:	061a      	lsls	r2, r3, #24
 8007884:	4b76      	ldr	r3, [pc, #472]	@ (8007a60 <MX_LWIP_Init+0x250>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	0619      	lsls	r1, r3, #24
 800788a:	4b75      	ldr	r3, [pc, #468]	@ (8007a60 <MX_LWIP_Init+0x250>)
 800788c:	785b      	ldrb	r3, [r3, #1]
 800788e:	041b      	lsls	r3, r3, #16
 8007890:	4319      	orrs	r1, r3
 8007892:	4b73      	ldr	r3, [pc, #460]	@ (8007a60 <MX_LWIP_Init+0x250>)
 8007894:	789b      	ldrb	r3, [r3, #2]
 8007896:	021b      	lsls	r3, r3, #8
 8007898:	430b      	orrs	r3, r1
 800789a:	4971      	ldr	r1, [pc, #452]	@ (8007a60 <MX_LWIP_Init+0x250>)
 800789c:	78c9      	ldrb	r1, [r1, #3]
 800789e:	430b      	orrs	r3, r1
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80078a6:	431a      	orrs	r2, r3
 80078a8:	4b6d      	ldr	r3, [pc, #436]	@ (8007a60 <MX_LWIP_Init+0x250>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	0619      	lsls	r1, r3, #24
 80078ae:	4b6c      	ldr	r3, [pc, #432]	@ (8007a60 <MX_LWIP_Init+0x250>)
 80078b0:	785b      	ldrb	r3, [r3, #1]
 80078b2:	041b      	lsls	r3, r3, #16
 80078b4:	4319      	orrs	r1, r3
 80078b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007a60 <MX_LWIP_Init+0x250>)
 80078b8:	789b      	ldrb	r3, [r3, #2]
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	430b      	orrs	r3, r1
 80078be:	4968      	ldr	r1, [pc, #416]	@ (8007a60 <MX_LWIP_Init+0x250>)
 80078c0:	78c9      	ldrb	r1, [r1, #3]
 80078c2:	430b      	orrs	r3, r1
 80078c4:	0a1b      	lsrs	r3, r3, #8
 80078c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80078ca:	431a      	orrs	r2, r3
 80078cc:	4b64      	ldr	r3, [pc, #400]	@ (8007a60 <MX_LWIP_Init+0x250>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	0619      	lsls	r1, r3, #24
 80078d2:	4b63      	ldr	r3, [pc, #396]	@ (8007a60 <MX_LWIP_Init+0x250>)
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	041b      	lsls	r3, r3, #16
 80078d8:	4319      	orrs	r1, r3
 80078da:	4b61      	ldr	r3, [pc, #388]	@ (8007a60 <MX_LWIP_Init+0x250>)
 80078dc:	789b      	ldrb	r3, [r3, #2]
 80078de:	021b      	lsls	r3, r3, #8
 80078e0:	430b      	orrs	r3, r1
 80078e2:	495f      	ldr	r1, [pc, #380]	@ (8007a60 <MX_LWIP_Init+0x250>)
 80078e4:	78c9      	ldrb	r1, [r1, #3]
 80078e6:	430b      	orrs	r3, r1
 80078e8:	0e1b      	lsrs	r3, r3, #24
 80078ea:	4313      	orrs	r3, r2
 80078ec:	4a5f      	ldr	r2, [pc, #380]	@ (8007a6c <MX_LWIP_Init+0x25c>)
 80078ee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80078f0:	4b5c      	ldr	r3, [pc, #368]	@ (8007a64 <MX_LWIP_Init+0x254>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	061a      	lsls	r2, r3, #24
 80078f6:	4b5b      	ldr	r3, [pc, #364]	@ (8007a64 <MX_LWIP_Init+0x254>)
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	041b      	lsls	r3, r3, #16
 80078fc:	431a      	orrs	r2, r3
 80078fe:	4b59      	ldr	r3, [pc, #356]	@ (8007a64 <MX_LWIP_Init+0x254>)
 8007900:	789b      	ldrb	r3, [r3, #2]
 8007902:	021b      	lsls	r3, r3, #8
 8007904:	4313      	orrs	r3, r2
 8007906:	4a57      	ldr	r2, [pc, #348]	@ (8007a64 <MX_LWIP_Init+0x254>)
 8007908:	78d2      	ldrb	r2, [r2, #3]
 800790a:	4313      	orrs	r3, r2
 800790c:	061a      	lsls	r2, r3, #24
 800790e:	4b55      	ldr	r3, [pc, #340]	@ (8007a64 <MX_LWIP_Init+0x254>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	0619      	lsls	r1, r3, #24
 8007914:	4b53      	ldr	r3, [pc, #332]	@ (8007a64 <MX_LWIP_Init+0x254>)
 8007916:	785b      	ldrb	r3, [r3, #1]
 8007918:	041b      	lsls	r3, r3, #16
 800791a:	4319      	orrs	r1, r3
 800791c:	4b51      	ldr	r3, [pc, #324]	@ (8007a64 <MX_LWIP_Init+0x254>)
 800791e:	789b      	ldrb	r3, [r3, #2]
 8007920:	021b      	lsls	r3, r3, #8
 8007922:	430b      	orrs	r3, r1
 8007924:	494f      	ldr	r1, [pc, #316]	@ (8007a64 <MX_LWIP_Init+0x254>)
 8007926:	78c9      	ldrb	r1, [r1, #3]
 8007928:	430b      	orrs	r3, r1
 800792a:	021b      	lsls	r3, r3, #8
 800792c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007930:	431a      	orrs	r2, r3
 8007932:	4b4c      	ldr	r3, [pc, #304]	@ (8007a64 <MX_LWIP_Init+0x254>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	0619      	lsls	r1, r3, #24
 8007938:	4b4a      	ldr	r3, [pc, #296]	@ (8007a64 <MX_LWIP_Init+0x254>)
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	041b      	lsls	r3, r3, #16
 800793e:	4319      	orrs	r1, r3
 8007940:	4b48      	ldr	r3, [pc, #288]	@ (8007a64 <MX_LWIP_Init+0x254>)
 8007942:	789b      	ldrb	r3, [r3, #2]
 8007944:	021b      	lsls	r3, r3, #8
 8007946:	430b      	orrs	r3, r1
 8007948:	4946      	ldr	r1, [pc, #280]	@ (8007a64 <MX_LWIP_Init+0x254>)
 800794a:	78c9      	ldrb	r1, [r1, #3]
 800794c:	430b      	orrs	r3, r1
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007954:	431a      	orrs	r2, r3
 8007956:	4b43      	ldr	r3, [pc, #268]	@ (8007a64 <MX_LWIP_Init+0x254>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	0619      	lsls	r1, r3, #24
 800795c:	4b41      	ldr	r3, [pc, #260]	@ (8007a64 <MX_LWIP_Init+0x254>)
 800795e:	785b      	ldrb	r3, [r3, #1]
 8007960:	041b      	lsls	r3, r3, #16
 8007962:	4319      	orrs	r1, r3
 8007964:	4b3f      	ldr	r3, [pc, #252]	@ (8007a64 <MX_LWIP_Init+0x254>)
 8007966:	789b      	ldrb	r3, [r3, #2]
 8007968:	021b      	lsls	r3, r3, #8
 800796a:	430b      	orrs	r3, r1
 800796c:	493d      	ldr	r1, [pc, #244]	@ (8007a64 <MX_LWIP_Init+0x254>)
 800796e:	78c9      	ldrb	r1, [r1, #3]
 8007970:	430b      	orrs	r3, r1
 8007972:	0e1b      	lsrs	r3, r3, #24
 8007974:	4313      	orrs	r3, r2
 8007976:	4a3e      	ldr	r2, [pc, #248]	@ (8007a70 <MX_LWIP_Init+0x260>)
 8007978:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800797a:	4b3b      	ldr	r3, [pc, #236]	@ (8007a68 <MX_LWIP_Init+0x258>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	061a      	lsls	r2, r3, #24
 8007980:	4b39      	ldr	r3, [pc, #228]	@ (8007a68 <MX_LWIP_Init+0x258>)
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	041b      	lsls	r3, r3, #16
 8007986:	431a      	orrs	r2, r3
 8007988:	4b37      	ldr	r3, [pc, #220]	@ (8007a68 <MX_LWIP_Init+0x258>)
 800798a:	789b      	ldrb	r3, [r3, #2]
 800798c:	021b      	lsls	r3, r3, #8
 800798e:	4313      	orrs	r3, r2
 8007990:	4a35      	ldr	r2, [pc, #212]	@ (8007a68 <MX_LWIP_Init+0x258>)
 8007992:	78d2      	ldrb	r2, [r2, #3]
 8007994:	4313      	orrs	r3, r2
 8007996:	061a      	lsls	r2, r3, #24
 8007998:	4b33      	ldr	r3, [pc, #204]	@ (8007a68 <MX_LWIP_Init+0x258>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	0619      	lsls	r1, r3, #24
 800799e:	4b32      	ldr	r3, [pc, #200]	@ (8007a68 <MX_LWIP_Init+0x258>)
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	041b      	lsls	r3, r3, #16
 80079a4:	4319      	orrs	r1, r3
 80079a6:	4b30      	ldr	r3, [pc, #192]	@ (8007a68 <MX_LWIP_Init+0x258>)
 80079a8:	789b      	ldrb	r3, [r3, #2]
 80079aa:	021b      	lsls	r3, r3, #8
 80079ac:	430b      	orrs	r3, r1
 80079ae:	492e      	ldr	r1, [pc, #184]	@ (8007a68 <MX_LWIP_Init+0x258>)
 80079b0:	78c9      	ldrb	r1, [r1, #3]
 80079b2:	430b      	orrs	r3, r1
 80079b4:	021b      	lsls	r3, r3, #8
 80079b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079ba:	431a      	orrs	r2, r3
 80079bc:	4b2a      	ldr	r3, [pc, #168]	@ (8007a68 <MX_LWIP_Init+0x258>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	0619      	lsls	r1, r3, #24
 80079c2:	4b29      	ldr	r3, [pc, #164]	@ (8007a68 <MX_LWIP_Init+0x258>)
 80079c4:	785b      	ldrb	r3, [r3, #1]
 80079c6:	041b      	lsls	r3, r3, #16
 80079c8:	4319      	orrs	r1, r3
 80079ca:	4b27      	ldr	r3, [pc, #156]	@ (8007a68 <MX_LWIP_Init+0x258>)
 80079cc:	789b      	ldrb	r3, [r3, #2]
 80079ce:	021b      	lsls	r3, r3, #8
 80079d0:	430b      	orrs	r3, r1
 80079d2:	4925      	ldr	r1, [pc, #148]	@ (8007a68 <MX_LWIP_Init+0x258>)
 80079d4:	78c9      	ldrb	r1, [r1, #3]
 80079d6:	430b      	orrs	r3, r1
 80079d8:	0a1b      	lsrs	r3, r3, #8
 80079da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80079de:	431a      	orrs	r2, r3
 80079e0:	4b21      	ldr	r3, [pc, #132]	@ (8007a68 <MX_LWIP_Init+0x258>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	0619      	lsls	r1, r3, #24
 80079e6:	4b20      	ldr	r3, [pc, #128]	@ (8007a68 <MX_LWIP_Init+0x258>)
 80079e8:	785b      	ldrb	r3, [r3, #1]
 80079ea:	041b      	lsls	r3, r3, #16
 80079ec:	4319      	orrs	r1, r3
 80079ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007a68 <MX_LWIP_Init+0x258>)
 80079f0:	789b      	ldrb	r3, [r3, #2]
 80079f2:	021b      	lsls	r3, r3, #8
 80079f4:	430b      	orrs	r3, r1
 80079f6:	491c      	ldr	r1, [pc, #112]	@ (8007a68 <MX_LWIP_Init+0x258>)
 80079f8:	78c9      	ldrb	r1, [r1, #3]
 80079fa:	430b      	orrs	r3, r1
 80079fc:	0e1b      	lsrs	r3, r3, #24
 80079fe:	4313      	orrs	r3, r2
 8007a00:	4a1c      	ldr	r2, [pc, #112]	@ (8007a74 <MX_LWIP_Init+0x264>)
 8007a02:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007a04:	4b1c      	ldr	r3, [pc, #112]	@ (8007a78 <MX_LWIP_Init+0x268>)
 8007a06:	9302      	str	r3, [sp, #8]
 8007a08:	4b1c      	ldr	r3, [pc, #112]	@ (8007a7c <MX_LWIP_Init+0x26c>)
 8007a0a:	9301      	str	r3, [sp, #4]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	4b18      	ldr	r3, [pc, #96]	@ (8007a74 <MX_LWIP_Init+0x264>)
 8007a12:	4a17      	ldr	r2, [pc, #92]	@ (8007a70 <MX_LWIP_Init+0x260>)
 8007a14:	4915      	ldr	r1, [pc, #84]	@ (8007a6c <MX_LWIP_Init+0x25c>)
 8007a16:	481a      	ldr	r0, [pc, #104]	@ (8007a80 <MX_LWIP_Init+0x270>)
 8007a18:	f008 fdbc 	bl	8010594 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007a1c:	4818      	ldr	r0, [pc, #96]	@ (8007a80 <MX_LWIP_Init+0x270>)
 8007a1e:	f008 ff7f 	bl	8010920 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007a22:	4817      	ldr	r0, [pc, #92]	@ (8007a80 <MX_LWIP_Init+0x270>)
 8007a24:	f008 ff8c 	bl	8010940 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007a28:	4916      	ldr	r1, [pc, #88]	@ (8007a84 <MX_LWIP_Init+0x274>)
 8007a2a:	4815      	ldr	r0, [pc, #84]	@ (8007a80 <MX_LWIP_Init+0x270>)
 8007a2c:	f009 f894 	bl	8010b58 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007a30:	2224      	movs	r2, #36	@ 0x24
 8007a32:	2100      	movs	r1, #0
 8007a34:	4814      	ldr	r0, [pc, #80]	@ (8007a88 <MX_LWIP_Init+0x278>)
 8007a36:	f021 fdf5 	bl	8029624 <memset>
  attributes.name = "EthLink";
 8007a3a:	4b13      	ldr	r3, [pc, #76]	@ (8007a88 <MX_LWIP_Init+0x278>)
 8007a3c:	4a13      	ldr	r2, [pc, #76]	@ (8007a8c <MX_LWIP_Init+0x27c>)
 8007a3e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007a40:	4b11      	ldr	r3, [pc, #68]	@ (8007a88 <MX_LWIP_Init+0x278>)
 8007a42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a46:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8007a48:	4b0f      	ldr	r3, [pc, #60]	@ (8007a88 <MX_LWIP_Init+0x278>)
 8007a4a:	2210      	movs	r2, #16
 8007a4c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8007a88 <MX_LWIP_Init+0x278>)
 8007a50:	490b      	ldr	r1, [pc, #44]	@ (8007a80 <MX_LWIP_Init+0x270>)
 8007a52:	480f      	ldr	r0, [pc, #60]	@ (8007a90 <MX_LWIP_Init+0x280>)
 8007a54:	f000 fdbc 	bl	80085d0 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007a58:	bf00      	nop
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20019380 	.word	0x20019380
 8007a64:	20019384 	.word	0x20019384
 8007a68:	20019388 	.word	0x20019388
 8007a6c:	20019374 	.word	0x20019374
 8007a70:	20019378 	.word	0x20019378
 8007a74:	2001937c 	.word	0x2001937c
 8007a78:	0800f811 	.word	0x0800f811
 8007a7c:	08007fc1 	.word	0x08007fc1
 8007a80:	20019338 	.word	0x20019338
 8007a84:	08007a95 	.word	0x08007a95
 8007a88:	2001938c 	.word	0x2001938c
 8007a8c:	0802b624 	.word	0x0802b624
 8007a90:	08008289 	.word	0x08008289

08007a94 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007aba:	2320      	movs	r3, #32
 8007abc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007abe:	f3bf 8f4f 	dsb	sy
}
 8007ac2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007ac4:	e00b      	b.n	8007ade <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007ac6:	4a0d      	ldr	r2, [pc, #52]	@ (8007afc <SCB_InvalidateDCache_by_Addr+0x54>)
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	dcf0      	bgt.n	8007ac6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007ae4:	f3bf 8f4f 	dsb	sy
}
 8007ae8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007aea:	f3bf 8f6f 	isb	sy
}
 8007aee:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007af0:	bf00      	nop
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	e000ed00 	.word	0xe000ed00

08007b00 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007b08:	4b04      	ldr	r3, [pc, #16]	@ (8007b1c <HAL_ETH_RxCpltCallback+0x1c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 f87d 	bl	8008c0c <osSemaphoreRelease>
}
 8007b12:	bf00      	nop
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	2001dd3c 	.word	0x2001dd3c

08007b20 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007b28:	4b04      	ldr	r3, [pc, #16]	@ (8007b3c <HAL_ETH_TxCpltCallback+0x1c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 f86d 	bl	8008c0c <osSemaphoreRelease>
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	2001dd40 	.word	0x2001dd40

08007b40 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7fc f877 	bl	8003c3c <HAL_ETH_GetDMAError>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b54:	2b80      	cmp	r3, #128	@ 0x80
 8007b56:	d104      	bne.n	8007b62 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007b58:	4b04      	ldr	r3, [pc, #16]	@ (8007b6c <HAL_ETH_ErrorCallback+0x2c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f001 f855 	bl	8008c0c <osSemaphoreRelease>
  }
}
 8007b62:	bf00      	nop
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	2001dd3c 	.word	0x2001dd3c

08007b70 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b0aa      	sub	sp, #168	@ 0xa8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8007b8a:	f107 0310 	add.w	r3, r7, #16
 8007b8e:	2264      	movs	r2, #100	@ 0x64
 8007b90:	2100      	movs	r1, #0
 8007b92:	4618      	mov	r0, r3
 8007b94:	f021 fd46 	bl	8029624 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007b98:	4b8e      	ldr	r3, [pc, #568]	@ (8007dd4 <low_level_init+0x264>)
 8007b9a:	4a8f      	ldr	r2, [pc, #572]	@ (8007dd8 <low_level_init+0x268>)
 8007b9c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007ba2:	2380      	movs	r3, #128	@ 0x80
 8007ba4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007ba6:	23e1      	movs	r3, #225	@ 0xe1
 8007ba8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007baa:	2300      	movs	r3, #0
 8007bac:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007bb6:	4a87      	ldr	r2, [pc, #540]	@ (8007dd4 <low_level_init+0x264>)
 8007bb8:	f107 0308 	add.w	r3, r7, #8
 8007bbc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007bbe:	4b85      	ldr	r3, [pc, #532]	@ (8007dd4 <low_level_init+0x264>)
 8007bc0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007bc4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007bc6:	4b83      	ldr	r3, [pc, #524]	@ (8007dd4 <low_level_init+0x264>)
 8007bc8:	4a84      	ldr	r2, [pc, #528]	@ (8007ddc <low_level_init+0x26c>)
 8007bca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007bcc:	4b81      	ldr	r3, [pc, #516]	@ (8007dd4 <low_level_init+0x264>)
 8007bce:	4a84      	ldr	r2, [pc, #528]	@ (8007de0 <low_level_init+0x270>)
 8007bd0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007bd2:	4b80      	ldr	r3, [pc, #512]	@ (8007dd4 <low_level_init+0x264>)
 8007bd4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007bd8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
  netif->flags |= NETIF_FLAG_IGMP;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007be0:	f043 0320 	orr.w	r3, r3, #32
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007bec:	4879      	ldr	r0, [pc, #484]	@ (8007dd4 <low_level_init+0x264>)
 8007bee:	f7fb f9e9 	bl	8002fc4 <HAL_ETH_Init>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007bf8:	2238      	movs	r2, #56	@ 0x38
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	4879      	ldr	r0, [pc, #484]	@ (8007de4 <low_level_init+0x274>)
 8007bfe:	f021 fd11 	bl	8029624 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007c02:	4b78      	ldr	r3, [pc, #480]	@ (8007de4 <low_level_init+0x274>)
 8007c04:	2221      	movs	r2, #33	@ 0x21
 8007c06:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007c08:	4b76      	ldr	r3, [pc, #472]	@ (8007de4 <low_level_init+0x274>)
 8007c0a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8007c0e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007c10:	4b74      	ldr	r3, [pc, #464]	@ (8007de4 <low_level_init+0x274>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007c16:	4874      	ldr	r0, [pc, #464]	@ (8007de8 <low_level_init+0x278>)
 8007c18:	f008 fb76 	bl	8010308 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2206      	movs	r2, #6
 8007c20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007c24:	4b6b      	ldr	r3, [pc, #428]	@ (8007dd4 <low_level_init+0x264>)
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	781a      	ldrb	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007c30:	4b68      	ldr	r3, [pc, #416]	@ (8007dd4 <low_level_init+0x264>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	785a      	ldrb	r2, [r3, #1]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007c3c:	4b65      	ldr	r3, [pc, #404]	@ (8007dd4 <low_level_init+0x264>)
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	789a      	ldrb	r2, [r3, #2]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007c48:	4b62      	ldr	r3, [pc, #392]	@ (8007dd4 <low_level_init+0x264>)
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	78da      	ldrb	r2, [r3, #3]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007c54:	4b5f      	ldr	r3, [pc, #380]	@ (8007dd4 <low_level_init+0x264>)
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	791a      	ldrb	r2, [r3, #4]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007c60:	4b5c      	ldr	r3, [pc, #368]	@ (8007dd4 <low_level_init+0x264>)
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	795a      	ldrb	r2, [r3, #5]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8007c72:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007c7a:	f043 030a 	orr.w	r3, r3, #10
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8007c86:	2200      	movs	r2, #0
 8007c88:	2100      	movs	r1, #0
 8007c8a:	2001      	movs	r0, #1
 8007c8c:	f000 febc 	bl	8008a08 <osSemaphoreNew>
 8007c90:	4603      	mov	r3, r0
 8007c92:	4a56      	ldr	r2, [pc, #344]	@ (8007dec <low_level_init+0x27c>)
 8007c94:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8007c96:	2200      	movs	r2, #0
 8007c98:	2100      	movs	r1, #0
 8007c9a:	2001      	movs	r0, #1
 8007c9c:	f000 feb4 	bl	8008a08 <osSemaphoreNew>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	4a53      	ldr	r2, [pc, #332]	@ (8007df0 <low_level_init+0x280>)
 8007ca4:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007ca6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007caa:	2224      	movs	r2, #36	@ 0x24
 8007cac:	2100      	movs	r1, #0
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f021 fcb8 	bl	8029624 <memset>
  attributes.name = "EthIf";
 8007cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8007df4 <low_level_init+0x284>)
 8007cb6:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007cb8:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8007cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8007cc0:	2330      	movs	r3, #48	@ 0x30
 8007cc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8007cc6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007cca:	461a      	mov	r2, r3
 8007ccc:	6879      	ldr	r1, [r7, #4]
 8007cce:	484a      	ldr	r0, [pc, #296]	@ (8007df8 <low_level_init+0x288>)
 8007cd0:	f000 fc7e 	bl	80085d0 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007cd4:	4949      	ldr	r1, [pc, #292]	@ (8007dfc <low_level_init+0x28c>)
 8007cd6:	484a      	ldr	r0, [pc, #296]	@ (8007e00 <low_level_init+0x290>)
 8007cd8:	f7fa fbbf 	bl	800245a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8007cdc:	4848      	ldr	r0, [pc, #288]	@ (8007e00 <low_level_init+0x290>)
 8007cde:	f7fa fbee 	bl	80024be <LAN8742_Init>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d006      	beq.n	8007cf6 <low_level_init+0x186>
  {
    netif_set_link_down(netif);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f008 ff05 	bl	8010af8 <netif_set_link_down>
    netif_set_down(netif);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f008 fe9c 	bl	8010a2c <netif_set_down>
 8007cf4:	e06b      	b.n	8007dce <low_level_init+0x25e>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8007cf6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d165      	bne.n	8007dca <low_level_init+0x25a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007cfe:	4840      	ldr	r0, [pc, #256]	@ (8007e00 <low_level_init+0x290>)
 8007d00:	f7fa fc2a 	bl	8002558 <LAN8742_GetLinkState>
 8007d04:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8007d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	dc06      	bgt.n	8007d1e <low_level_init+0x1ae>
    {
      netif_set_link_down(netif);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f008 fef1 	bl	8010af8 <netif_set_link_down>
      netif_set_down(netif);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f008 fe88 	bl	8010a2c <netif_set_down>
 8007d1c:	e057      	b.n	8007dce <low_level_init+0x25e>
    }
    else
    {
      switch (PHYLinkState)
 8007d1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d22:	3b02      	subs	r3, #2
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	d82b      	bhi.n	8007d80 <low_level_init+0x210>
 8007d28:	a201      	add	r2, pc, #4	@ (adr r2, 8007d30 <low_level_init+0x1c0>)
 8007d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2e:	bf00      	nop
 8007d30:	08007d41 	.word	0x08007d41
 8007d34:	08007d53 	.word	0x08007d53
 8007d38:	08007d63 	.word	0x08007d63
 8007d3c:	08007d73 	.word	0x08007d73
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007d40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007d48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007d50:	e01f      	b.n	8007d92 <low_level_init+0x222>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8007d52:	2300      	movs	r3, #0
 8007d54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007d58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007d5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007d60:	e017      	b.n	8007d92 <low_level_init+0x222>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007d62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007d70:	e00f      	b.n	8007d92 <low_level_init+0x222>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8007d72:	2300      	movs	r3, #0
 8007d74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007d7e:	e008      	b.n	8007d92 <low_level_init+0x222>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8007d80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007d88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007d8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007d90:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007d92:	f107 0310 	add.w	r3, r7, #16
 8007d96:	4619      	mov	r1, r3
 8007d98:	480e      	ldr	r0, [pc, #56]	@ (8007dd4 <low_level_init+0x264>)
 8007d9a:	f7fb fdfb 	bl	8003994 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8007d9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007da2:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8007da4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007da8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007daa:	f107 0310 	add.w	r3, r7, #16
 8007dae:	4619      	mov	r1, r3
 8007db0:	4808      	ldr	r0, [pc, #32]	@ (8007dd4 <low_level_init+0x264>)
 8007db2:	f7fb fee6 	bl	8003b82 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8007db6:	4807      	ldr	r0, [pc, #28]	@ (8007dd4 <low_level_init+0x264>)
 8007db8:	f7fb f99e 	bl	80030f8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f008 fdbf 	bl	8010940 <netif_set_up>
    netif_set_link_up(netif);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f008 fe64 	bl	8010a90 <netif_set_link_up>
 8007dc8:	e001      	b.n	8007dce <low_level_init+0x25e>
    }

  }
  else
  {
    Error_Handler();
 8007dca:	f7f9 fdd9 	bl	8001980 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8007dce:	37a8      	adds	r7, #168	@ 0xa8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	2001dd44 	.word	0x2001dd44
 8007dd8:	40028000 	.word	0x40028000
 8007ddc:	20000510 	.word	0x20000510
 8007de0:	20000470 	.word	0x20000470
 8007de4:	2001ddf4 	.word	0x2001ddf4
 8007de8:	0802f390 	.word	0x0802f390
 8007dec:	2001dd3c 	.word	0x2001dd3c
 8007df0:	2001dd40 	.word	0x2001dd40
 8007df4:	0802b62c 	.word	0x0802b62c
 8007df8:	08007f6d 	.word	0x08007f6d
 8007dfc:	20000014 	.word	0x20000014
 8007e00:	2001de2c 	.word	0x2001de2c

08007e04 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b092      	sub	sp, #72	@ 0x48
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007e1c:	f107 030c 	add.w	r3, r7, #12
 8007e20:	2230      	movs	r2, #48	@ 0x30
 8007e22:	2100      	movs	r1, #0
 8007e24:	4618      	mov	r0, r3
 8007e26:	f021 fbfd 	bl	8029624 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007e2a:	f107 030c 	add.w	r3, r7, #12
 8007e2e:	2230      	movs	r2, #48	@ 0x30
 8007e30:	2100      	movs	r1, #0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f021 fbf6 	bl	8029624 <memset>

  for(q = p; q != NULL; q = q->next)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e3c:	e045      	b.n	8007eca <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d902      	bls.n	8007e4a <low_level_output+0x46>
      return ERR_IF;
 8007e44:	f06f 030b 	mvn.w	r3, #11
 8007e48:	e06c      	b.n	8007f24 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8007e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e4c:	6859      	ldr	r1, [r3, #4]
 8007e4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e50:	4613      	mov	r3, r2
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	4413      	add	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	3348      	adds	r3, #72	@ 0x48
 8007e5a:	443b      	add	r3, r7
 8007e5c:	3b3c      	subs	r3, #60	@ 0x3c
 8007e5e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e62:	895b      	ldrh	r3, [r3, #10]
 8007e64:	4619      	mov	r1, r3
 8007e66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e68:	4613      	mov	r3, r2
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	3348      	adds	r3, #72	@ 0x48
 8007e72:	443b      	add	r3, r7
 8007e74:	3b38      	subs	r3, #56	@ 0x38
 8007e76:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d011      	beq.n	8007ea2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e80:	1e5a      	subs	r2, r3, #1
 8007e82:	f107 000c 	add.w	r0, r7, #12
 8007e86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e88:	460b      	mov	r3, r1
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	440b      	add	r3, r1
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	18c1      	adds	r1, r0, r3
 8007e92:	4613      	mov	r3, r2
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	3348      	adds	r3, #72	@ 0x48
 8007e9c:	443b      	add	r3, r7
 8007e9e:	3b34      	subs	r3, #52	@ 0x34
 8007ea0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d109      	bne.n	8007ebe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007eaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007eac:	4613      	mov	r3, r2
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	3348      	adds	r3, #72	@ 0x48
 8007eb6:	443b      	add	r3, r7
 8007eb8:	3b34      	subs	r3, #52	@ 0x34
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8007ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1b6      	bne.n	8007e3e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	891b      	ldrh	r3, [r3, #8]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	4b15      	ldr	r3, [pc, #84]	@ (8007f2c <low_level_output+0x128>)
 8007ed8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007eda:	4a14      	ldr	r2, [pc, #80]	@ (8007f2c <low_level_output+0x128>)
 8007edc:	f107 030c 	add.w	r3, r7, #12
 8007ee0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007ee2:	4a12      	ldr	r2, [pc, #72]	@ (8007f2c <low_level_output+0x128>)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8007ee8:	6838      	ldr	r0, [r7, #0]
 8007eea:	f009 faf3 	bl	80114d4 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8007eee:	490f      	ldr	r1, [pc, #60]	@ (8007f2c <low_level_output+0x128>)
 8007ef0:	480f      	ldr	r0, [pc, #60]	@ (8007f30 <low_level_output+0x12c>)
 8007ef2:	f7fb f9f1 	bl	80032d8 <HAL_ETH_Transmit_IT>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10e      	bne.n	8007f1a <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8007efc:	bf00      	nop
 8007efe:	4b0d      	ldr	r3, [pc, #52]	@ (8007f34 <low_level_output+0x130>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fe1a 	bl	8008b40 <osSemaphoreAcquire>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1f5      	bne.n	8007efe <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8007f12:	4807      	ldr	r0, [pc, #28]	@ (8007f30 <low_level_output+0x12c>)
 8007f14:	f7fb fb80 	bl	8003618 <HAL_ETH_ReleaseTxPacket>
 8007f18:	e002      	b.n	8007f20 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8007f1a:	6838      	ldr	r0, [r7, #0]
 8007f1c:	f009 fa34 	bl	8011388 <pbuf_free>
  }

  return errval;
 8007f20:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3748      	adds	r7, #72	@ 0x48
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	2001ddf4 	.word	0x2001ddf4
 8007f30:	2001dd44 	.word	0x2001dd44
 8007f34:	2001dd40 	.word	0x2001dd40

08007f38 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007f44:	4b07      	ldr	r3, [pc, #28]	@ (8007f64 <low_level_input+0x2c>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d105      	bne.n	8007f58 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007f4c:	f107 030c 	add.w	r3, r7, #12
 8007f50:	4619      	mov	r1, r3
 8007f52:	4805      	ldr	r0, [pc, #20]	@ (8007f68 <low_level_input+0x30>)
 8007f54:	f7fb fa1c 	bl	8003390 <HAL_ETH_ReadData>
  }

  return p;
 8007f58:	68fb      	ldr	r3, [r7, #12]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	2001dd38 	.word	0x2001dd38
 8007f68:	2001dd44 	.word	0x2001dd44

08007f6c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007fbc <ethernetif_input+0x50>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 fddb 	bl	8008b40 <osSemaphoreAcquire>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1f5      	bne.n	8007f7c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8007f90:	68b8      	ldr	r0, [r7, #8]
 8007f92:	f7ff ffd1 	bl	8007f38 <low_level_input>
 8007f96:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	68b9      	ldr	r1, [r7, #8]
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	4798      	blx	r3
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f009 f9ea 	bl	8011388 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1ea      	bne.n	8007f90 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007fba:	e7df      	b.n	8007f7c <ethernetif_input+0x10>
 8007fbc:	2001dd3c 	.word	0x2001dd3c

08007fc0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <ethernetif_init+0x1c>
 8007fce:	4b0e      	ldr	r3, [pc, #56]	@ (8008008 <ethernetif_init+0x48>)
 8007fd0:	f240 12fd 	movw	r2, #509	@ 0x1fd
 8007fd4:	490d      	ldr	r1, [pc, #52]	@ (800800c <ethernetif_init+0x4c>)
 8007fd6:	480e      	ldr	r0, [pc, #56]	@ (8008010 <ethernetif_init+0x50>)
 8007fd8:	f021 f9a4 	bl	8029324 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2273      	movs	r2, #115	@ 0x73
 8007fe0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2274      	movs	r2, #116	@ 0x74
 8007fe8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a09      	ldr	r2, [pc, #36]	@ (8008014 <ethernetif_init+0x54>)
 8007ff0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a08      	ldr	r2, [pc, #32]	@ (8008018 <ethernetif_init+0x58>)
 8007ff6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff fdb9 	bl	8007b70 <low_level_init>

  return ERR_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	0802b634 	.word	0x0802b634
 800800c:	0802b650 	.word	0x0802b650
 8008010:	0802b660 	.word	0x0802b660
 8008014:	08018ea5 	.word	0x08018ea5
 8008018:	08007e05 	.word	0x08007e05

0800801c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008028:	68f9      	ldr	r1, [r7, #12]
 800802a:	4809      	ldr	r0, [pc, #36]	@ (8008050 <pbuf_free_custom+0x34>)
 800802c:	f008 fa5c 	bl	80104e8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008030:	4b08      	ldr	r3, [pc, #32]	@ (8008054 <pbuf_free_custom+0x38>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d107      	bne.n	8008048 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008038:	4b06      	ldr	r3, [pc, #24]	@ (8008054 <pbuf_free_custom+0x38>)
 800803a:	2200      	movs	r2, #0
 800803c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800803e:	4b06      	ldr	r3, [pc, #24]	@ (8008058 <pbuf_free_custom+0x3c>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fde2 	bl	8008c0c <osSemaphoreRelease>
  }
}
 8008048:	bf00      	nop
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	0802f390 	.word	0x0802f390
 8008054:	2001dd38 	.word	0x2001dd38
 8008058:	2001dd3c 	.word	0x2001dd3c

0800805c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008060:	f7fa fb22 	bl	80026a8 <HAL_GetTick>
 8008064:	4603      	mov	r3, r0
}
 8008066:	4618      	mov	r0, r3
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08e      	sub	sp, #56	@ 0x38
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	605a      	str	r2, [r3, #4]
 800807e:	609a      	str	r2, [r3, #8]
 8008080:	60da      	str	r2, [r3, #12]
 8008082:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a52      	ldr	r2, [pc, #328]	@ (80081d4 <HAL_ETH_MspInit+0x168>)
 800808a:	4293      	cmp	r3, r2
 800808c:	f040 809e 	bne.w	80081cc <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008090:	4b51      	ldr	r3, [pc, #324]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 8008092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008094:	4a50      	ldr	r2, [pc, #320]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 8008096:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800809a:	6313      	str	r3, [r2, #48]	@ 0x30
 800809c:	4b4e      	ldr	r3, [pc, #312]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 800809e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080a4:	623b      	str	r3, [r7, #32]
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	4b4b      	ldr	r3, [pc, #300]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 80080aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ac:	4a4a      	ldr	r2, [pc, #296]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 80080ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80080b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80080b4:	4b48      	ldr	r3, [pc, #288]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 80080b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80080bc:	61fb      	str	r3, [r7, #28]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	4b45      	ldr	r3, [pc, #276]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 80080c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c4:	4a44      	ldr	r2, [pc, #272]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 80080c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80080ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80080cc:	4b42      	ldr	r3, [pc, #264]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 80080ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080d8:	4b3f      	ldr	r3, [pc, #252]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 80080da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080dc:	4a3e      	ldr	r2, [pc, #248]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 80080de:	f043 0304 	orr.w	r3, r3, #4
 80080e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80080e4:	4b3c      	ldr	r3, [pc, #240]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 80080e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080f0:	4b39      	ldr	r3, [pc, #228]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 80080f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f4:	4a38      	ldr	r2, [pc, #224]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 80080f6:	f043 0301 	orr.w	r3, r3, #1
 80080fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80080fc:	4b36      	ldr	r3, [pc, #216]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 80080fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	613b      	str	r3, [r7, #16]
 8008106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008108:	4b33      	ldr	r3, [pc, #204]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 800810a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810c:	4a32      	ldr	r2, [pc, #200]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 800810e:	f043 0302 	orr.w	r3, r3, #2
 8008112:	6313      	str	r3, [r2, #48]	@ 0x30
 8008114:	4b30      	ldr	r3, [pc, #192]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 8008116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008120:	4b2d      	ldr	r3, [pc, #180]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 8008122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008124:	4a2c      	ldr	r2, [pc, #176]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 8008126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800812a:	6313      	str	r3, [r2, #48]	@ 0x30
 800812c:	4b2a      	ldr	r3, [pc, #168]	@ (80081d8 <HAL_ETH_MspInit+0x16c>)
 800812e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008134:	60bb      	str	r3, [r7, #8]
 8008136:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008138:	2332      	movs	r3, #50	@ 0x32
 800813a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800813c:	2302      	movs	r3, #2
 800813e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008140:	2300      	movs	r3, #0
 8008142:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008144:	2303      	movs	r3, #3
 8008146:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008148:	230b      	movs	r3, #11
 800814a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800814c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008150:	4619      	mov	r1, r3
 8008152:	4822      	ldr	r0, [pc, #136]	@ (80081dc <HAL_ETH_MspInit+0x170>)
 8008154:	f7fc f99e 	bl	8004494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008158:	2386      	movs	r3, #134	@ 0x86
 800815a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800815c:	2302      	movs	r3, #2
 800815e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008160:	2300      	movs	r3, #0
 8008162:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008164:	2303      	movs	r3, #3
 8008166:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008168:	230b      	movs	r3, #11
 800816a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800816c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008170:	4619      	mov	r1, r3
 8008172:	481b      	ldr	r0, [pc, #108]	@ (80081e0 <HAL_ETH_MspInit+0x174>)
 8008174:	f7fc f98e 	bl	8004494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008178:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800817c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800817e:	2302      	movs	r3, #2
 8008180:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008182:	2300      	movs	r3, #0
 8008184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008186:	2303      	movs	r3, #3
 8008188:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800818a:	230b      	movs	r3, #11
 800818c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800818e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008192:	4619      	mov	r1, r3
 8008194:	4813      	ldr	r0, [pc, #76]	@ (80081e4 <HAL_ETH_MspInit+0x178>)
 8008196:	f7fc f97d 	bl	8004494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800819a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800819e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081a0:	2302      	movs	r3, #2
 80081a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081a4:	2300      	movs	r3, #0
 80081a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081a8:	2303      	movs	r3, #3
 80081aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80081ac:	230b      	movs	r3, #11
 80081ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80081b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081b4:	4619      	mov	r1, r3
 80081b6:	480c      	ldr	r0, [pc, #48]	@ (80081e8 <HAL_ETH_MspInit+0x17c>)
 80081b8:	f7fc f96c 	bl	8004494 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80081bc:	2200      	movs	r2, #0
 80081be:	2105      	movs	r1, #5
 80081c0:	203d      	movs	r0, #61	@ 0x3d
 80081c2:	f7fa fb59 	bl	8002878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80081c6:	203d      	movs	r0, #61	@ 0x3d
 80081c8:	f7fa fb72 	bl	80028b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80081cc:	bf00      	nop
 80081ce:	3738      	adds	r7, #56	@ 0x38
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	40028000 	.word	0x40028000
 80081d8:	40023800 	.word	0x40023800
 80081dc:	40020800 	.word	0x40020800
 80081e0:	40020000 	.word	0x40020000
 80081e4:	40020400 	.word	0x40020400
 80081e8:	40021800 	.word	0x40021800

080081ec <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80081f0:	4802      	ldr	r0, [pc, #8]	@ (80081fc <ETH_PHY_IO_Init+0x10>)
 80081f2:	f7fb fce1 	bl	8003bb8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	2001dd44 	.word	0x2001dd44

08008200 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  return 0;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	68f9      	ldr	r1, [r7, #12]
 8008222:	4807      	ldr	r0, [pc, #28]	@ (8008240 <ETH_PHY_IO_ReadReg+0x30>)
 8008224:	f7fb fb22 	bl	800386c <HAL_ETH_ReadPHYRegister>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800822e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008232:	e000      	b.n	8008236 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	2001dd44 	.word	0x2001dd44

08008244 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	68f9      	ldr	r1, [r7, #12]
 8008256:	4807      	ldr	r0, [pc, #28]	@ (8008274 <ETH_PHY_IO_WriteReg+0x30>)
 8008258:	f7fb fb53 	bl	8003902 <HAL_ETH_WritePHYRegister>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008266:	e000      	b.n	800826a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	2001dd44 	.word	0x2001dd44

08008278 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800827c:	f7fa fa14 	bl	80026a8 <HAL_GetTick>
 8008280:	4603      	mov	r3, r0
}
 8008282:	4618      	mov	r0, r3
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b0a0      	sub	sp, #128	@ 0x80
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008290:	f107 0308 	add.w	r3, r7, #8
 8008294:	2264      	movs	r2, #100	@ 0x64
 8008296:	2100      	movs	r1, #0
 8008298:	4618      	mov	r0, r3
 800829a:	f021 f9c3 	bl	8029624 <memset>
  int32_t PHYLinkState = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80082a6:	2300      	movs	r3, #0
 80082a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082aa:	2300      	movs	r3, #0
 80082ac:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80082b2:	483a      	ldr	r0, [pc, #232]	@ (800839c <ethernet_link_thread+0x114>)
 80082b4:	f7fa f950 	bl	8002558 <LAN8742_GetLinkState>
 80082b8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80082ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80082c0:	089b      	lsrs	r3, r3, #2
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00c      	beq.n	80082e6 <ethernet_link_thread+0x5e>
 80082cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	dc09      	bgt.n	80082e6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80082d2:	4833      	ldr	r0, [pc, #204]	@ (80083a0 <ethernet_link_thread+0x118>)
 80082d4:	f7fa ff80 	bl	80031d8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80082d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80082da:	f008 fba7 	bl	8010a2c <netif_set_down>
    netif_set_link_down(netif);
 80082de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80082e0:	f008 fc0a 	bl	8010af8 <netif_set_link_down>
 80082e4:	e055      	b.n	8008392 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80082e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082e8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d14e      	bne.n	8008392 <ethernet_link_thread+0x10a>
 80082f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	dd4b      	ble.n	8008392 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80082fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082fc:	3b02      	subs	r3, #2
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d82a      	bhi.n	8008358 <ethernet_link_thread+0xd0>
 8008302:	a201      	add	r2, pc, #4	@ (adr r2, 8008308 <ethernet_link_thread+0x80>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	08008319 	.word	0x08008319
 800830c:	0800832b 	.word	0x0800832b
 8008310:	0800833b 	.word	0x0800833b
 8008314:	0800834b 	.word	0x0800834b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008318:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800831c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800831e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008322:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008324:	2301      	movs	r3, #1
 8008326:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008328:	e017      	b.n	800835a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800832a:	2300      	movs	r3, #0
 800832c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800832e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008332:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008334:	2301      	movs	r3, #1
 8008336:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008338:	e00f      	b.n	800835a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800833a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800833e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8008340:	2300      	movs	r3, #0
 8008342:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008344:	2301      	movs	r3, #1
 8008346:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008348:	e007      	b.n	800835a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800834a:	2300      	movs	r3, #0
 800834c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800834e:	2300      	movs	r3, #0
 8008350:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008352:	2301      	movs	r3, #1
 8008354:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008356:	e000      	b.n	800835a <ethernet_link_thread+0xd2>
    default:
      break;
 8008358:	bf00      	nop
    }

    if(linkchanged)
 800835a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d018      	beq.n	8008392 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008360:	f107 0308 	add.w	r3, r7, #8
 8008364:	4619      	mov	r1, r3
 8008366:	480e      	ldr	r0, [pc, #56]	@ (80083a0 <ethernet_link_thread+0x118>)
 8008368:	f7fb fb14 	bl	8003994 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800836c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800836e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008370:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008372:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008374:	f107 0308 	add.w	r3, r7, #8
 8008378:	4619      	mov	r1, r3
 800837a:	4809      	ldr	r0, [pc, #36]	@ (80083a0 <ethernet_link_thread+0x118>)
 800837c:	f7fb fc01 	bl	8003b82 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8008380:	4807      	ldr	r0, [pc, #28]	@ (80083a0 <ethernet_link_thread+0x118>)
 8008382:	f7fa feb9 	bl	80030f8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008386:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008388:	f008 fada 	bl	8010940 <netif_set_up>
      netif_set_link_up(netif);
 800838c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800838e:	f008 fb7f 	bl	8010a90 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008392:	2064      	movs	r0, #100	@ 0x64
 8008394:	f000 f9c2 	bl	800871c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008398:	e78b      	b.n	80082b2 <ethernet_link_thread+0x2a>
 800839a:	bf00      	nop
 800839c:	2001de2c 	.word	0x2001de2c
 80083a0:	2001dd44 	.word	0x2001dd44

080083a4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80083ac:	4812      	ldr	r0, [pc, #72]	@ (80083f8 <HAL_ETH_RxAllocateCallback+0x54>)
 80083ae:	f008 f827 	bl	8010400 <memp_malloc_pool>
 80083b2:	60f8      	str	r0, [r7, #12]
  if (p)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d014      	beq.n	80083e4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f103 0220 	add.w	r2, r3, #32
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4a0d      	ldr	r2, [pc, #52]	@ (80083fc <HAL_ETH_RxAllocateCallback+0x58>)
 80083c8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80083d2:	9201      	str	r2, [sp, #4]
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2241      	movs	r2, #65	@ 0x41
 80083da:	2100      	movs	r1, #0
 80083dc:	2000      	movs	r0, #0
 80083de:	f008 fde7 	bl	8010fb0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80083e2:	e005      	b.n	80083f0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80083e4:	4b06      	ldr	r3, [pc, #24]	@ (8008400 <HAL_ETH_RxAllocateCallback+0x5c>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]
}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	0802f390 	.word	0x0802f390
 80083fc:	0800801d 	.word	0x0800801d
 8008400:	2001dd38 	.word	0x2001dd38

08008404 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
 8008410:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800841a:	2300      	movs	r3, #0
 800841c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3b20      	subs	r3, #32
 8008422:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	2200      	movs	r2, #0
 800842e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	887a      	ldrh	r2, [r7, #2]
 8008434:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d103      	bne.n	8008446 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	69fa      	ldr	r2, [r7, #28]
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	e003      	b.n	800844e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	69fa      	ldr	r2, [r7, #28]
 800844c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	69fa      	ldr	r2, [r7, #28]
 8008452:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	61fb      	str	r3, [r7, #28]
 800845a:	e009      	b.n	8008470 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	891a      	ldrh	r2, [r3, #8]
 8008460:	887b      	ldrh	r3, [r7, #2]
 8008462:	4413      	add	r3, r2
 8008464:	b29a      	uxth	r2, r3
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	61fb      	str	r3, [r7, #28]
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1f2      	bne.n	800845c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8008476:	887b      	ldrh	r3, [r7, #2]
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7ff fb14 	bl	8007aa8 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008480:	bf00      	nop
 8008482:	3720      	adds	r7, #32
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f008 ff79 	bl	8011388 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800849e:	b480      	push	{r7}
 80084a0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80084a2:	bf00      	nop
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084b2:	f3ef 8305 	mrs	r3, IPSR
 80084b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80084b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10f      	bne.n	80084de <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084be:	f3ef 8310 	mrs	r3, PRIMASK
 80084c2:	607b      	str	r3, [r7, #4]
  return(result);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d105      	bne.n	80084d6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084ca:	f3ef 8311 	mrs	r3, BASEPRI
 80084ce:	603b      	str	r3, [r7, #0]
  return(result);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d007      	beq.n	80084e6 <osKernelInitialize+0x3a>
 80084d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008510 <osKernelInitialize+0x64>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d103      	bne.n	80084e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80084de:	f06f 0305 	mvn.w	r3, #5
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e00c      	b.n	8008500 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008510 <osKernelInitialize+0x64>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d105      	bne.n	80084fa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80084ee:	4b08      	ldr	r3, [pc, #32]	@ (8008510 <osKernelInitialize+0x64>)
 80084f0:	2201      	movs	r2, #1
 80084f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e002      	b.n	8008500 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80084fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008500:	68fb      	ldr	r3, [r7, #12]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	2001de4c 	.word	0x2001de4c

08008514 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800851a:	f3ef 8305 	mrs	r3, IPSR
 800851e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008520:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10f      	bne.n	8008546 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008526:	f3ef 8310 	mrs	r3, PRIMASK
 800852a:	607b      	str	r3, [r7, #4]
  return(result);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d105      	bne.n	800853e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008532:	f3ef 8311 	mrs	r3, BASEPRI
 8008536:	603b      	str	r3, [r7, #0]
  return(result);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d007      	beq.n	800854e <osKernelStart+0x3a>
 800853e:	4b0f      	ldr	r3, [pc, #60]	@ (800857c <osKernelStart+0x68>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b02      	cmp	r3, #2
 8008544:	d103      	bne.n	800854e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008546:	f06f 0305 	mvn.w	r3, #5
 800854a:	60fb      	str	r3, [r7, #12]
 800854c:	e010      	b.n	8008570 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800854e:	4b0b      	ldr	r3, [pc, #44]	@ (800857c <osKernelStart+0x68>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d109      	bne.n	800856a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008556:	f7ff ffa2 	bl	800849e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800855a:	4b08      	ldr	r3, [pc, #32]	@ (800857c <osKernelStart+0x68>)
 800855c:	2202      	movs	r2, #2
 800855e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008560:	f001 fee6 	bl	800a330 <vTaskStartScheduler>
      stat = osOK;
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]
 8008568:	e002      	b.n	8008570 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800856a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800856e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008570:	68fb      	ldr	r3, [r7, #12]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	2001de4c 	.word	0x2001de4c

08008580 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008586:	f3ef 8305 	mrs	r3, IPSR
 800858a:	60bb      	str	r3, [r7, #8]
  return(result);
 800858c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10f      	bne.n	80085b2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008592:	f3ef 8310 	mrs	r3, PRIMASK
 8008596:	607b      	str	r3, [r7, #4]
  return(result);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d105      	bne.n	80085aa <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800859e:	f3ef 8311 	mrs	r3, BASEPRI
 80085a2:	603b      	str	r3, [r7, #0]
  return(result);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d007      	beq.n	80085ba <osKernelGetTickCount+0x3a>
 80085aa:	4b08      	ldr	r3, [pc, #32]	@ (80085cc <osKernelGetTickCount+0x4c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d103      	bne.n	80085ba <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80085b2:	f001 ffcb 	bl	800a54c <xTaskGetTickCountFromISR>
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	e002      	b.n	80085c0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80085ba:	f001 ffb7 	bl	800a52c <xTaskGetTickCount>
 80085be:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80085c0:	68fb      	ldr	r3, [r7, #12]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	2001de4c 	.word	0x2001de4c

080085d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b090      	sub	sp, #64	@ 0x40
 80085d4:	af04      	add	r7, sp, #16
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80085dc:	2300      	movs	r3, #0
 80085de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085e0:	f3ef 8305 	mrs	r3, IPSR
 80085e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80085e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f040 808f 	bne.w	800870c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ee:	f3ef 8310 	mrs	r3, PRIMASK
 80085f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d105      	bne.n	8008606 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085fa:	f3ef 8311 	mrs	r3, BASEPRI
 80085fe:	617b      	str	r3, [r7, #20]
  return(result);
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <osThreadNew+0x3e>
 8008606:	4b44      	ldr	r3, [pc, #272]	@ (8008718 <osThreadNew+0x148>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b02      	cmp	r3, #2
 800860c:	d07e      	beq.n	800870c <osThreadNew+0x13c>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d07b      	beq.n	800870c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008614:	2380      	movs	r3, #128	@ 0x80
 8008616:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008618:	2318      	movs	r3, #24
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800861c:	2300      	movs	r3, #0
 800861e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8008620:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008624:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d045      	beq.n	80086b8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <osThreadNew+0x6a>
        name = attr->name;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864a:	2b00      	cmp	r3, #0
 800864c:	d008      	beq.n	8008660 <osThreadNew+0x90>
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	2b38      	cmp	r3, #56	@ 0x38
 8008652:	d805      	bhi.n	8008660 <osThreadNew+0x90>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <osThreadNew+0x94>
        return (NULL);
 8008660:	2300      	movs	r3, #0
 8008662:	e054      	b.n	800870e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	089b      	lsrs	r3, r3, #2
 8008672:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00e      	beq.n	800869a <osThreadNew+0xca>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	2bb7      	cmp	r3, #183	@ 0xb7
 8008682:	d90a      	bls.n	800869a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008688:	2b00      	cmp	r3, #0
 800868a:	d006      	beq.n	800869a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <osThreadNew+0xca>
        mem = 1;
 8008694:	2301      	movs	r3, #1
 8008696:	623b      	str	r3, [r7, #32]
 8008698:	e010      	b.n	80086bc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10c      	bne.n	80086bc <osThreadNew+0xec>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d108      	bne.n	80086bc <osThreadNew+0xec>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d104      	bne.n	80086bc <osThreadNew+0xec>
          mem = 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	623b      	str	r3, [r7, #32]
 80086b6:	e001      	b.n	80086bc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80086b8:	2300      	movs	r3, #0
 80086ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d110      	bne.n	80086e4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086ca:	9202      	str	r2, [sp, #8]
 80086cc:	9301      	str	r3, [sp, #4]
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f001 fc87 	bl	8009fec <xTaskCreateStatic>
 80086de:	4603      	mov	r3, r0
 80086e0:	613b      	str	r3, [r7, #16]
 80086e2:	e013      	b.n	800870c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d110      	bne.n	800870c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80086ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	f107 0310 	add.w	r3, r7, #16
 80086f2:	9301      	str	r3, [sp, #4]
 80086f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f001 fca8 	bl	800a052 <xTaskCreate>
 8008702:	4603      	mov	r3, r0
 8008704:	2b01      	cmp	r3, #1
 8008706:	d001      	beq.n	800870c <osThreadNew+0x13c>
          hTask = NULL;
 8008708:	2300      	movs	r3, #0
 800870a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800870c:	693b      	ldr	r3, [r7, #16]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3730      	adds	r7, #48	@ 0x30
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	2001de4c 	.word	0x2001de4c

0800871c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008724:	f3ef 8305 	mrs	r3, IPSR
 8008728:	613b      	str	r3, [r7, #16]
  return(result);
 800872a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10f      	bne.n	8008750 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008730:	f3ef 8310 	mrs	r3, PRIMASK
 8008734:	60fb      	str	r3, [r7, #12]
  return(result);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d105      	bne.n	8008748 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800873c:	f3ef 8311 	mrs	r3, BASEPRI
 8008740:	60bb      	str	r3, [r7, #8]
  return(result);
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d007      	beq.n	8008758 <osDelay+0x3c>
 8008748:	4b0a      	ldr	r3, [pc, #40]	@ (8008774 <osDelay+0x58>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d103      	bne.n	8008758 <osDelay+0x3c>
    stat = osErrorISR;
 8008750:	f06f 0305 	mvn.w	r3, #5
 8008754:	617b      	str	r3, [r7, #20]
 8008756:	e007      	b.n	8008768 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008758:	2300      	movs	r3, #0
 800875a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f001 fdc0 	bl	800a2e8 <vTaskDelay>
    }
  }

  return (stat);
 8008768:	697b      	ldr	r3, [r7, #20]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	2001de4c 	.word	0x2001de4c

08008778 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008778:	b580      	push	{r7, lr}
 800877a:	b08a      	sub	sp, #40	@ 0x28
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008780:	2300      	movs	r3, #0
 8008782:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008784:	f3ef 8305 	mrs	r3, IPSR
 8008788:	613b      	str	r3, [r7, #16]
  return(result);
 800878a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800878c:	2b00      	cmp	r3, #0
 800878e:	f040 8085 	bne.w	800889c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008792:	f3ef 8310 	mrs	r3, PRIMASK
 8008796:	60fb      	str	r3, [r7, #12]
  return(result);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d105      	bne.n	80087aa <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800879e:	f3ef 8311 	mrs	r3, BASEPRI
 80087a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <osMutexNew+0x3a>
 80087aa:	4b3f      	ldr	r3, [pc, #252]	@ (80088a8 <osMutexNew+0x130>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d074      	beq.n	800889c <osMutexNew+0x124>
    if (attr != NULL) {
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d003      	beq.n	80087c0 <osMutexNew+0x48>
      type = attr->attr_bits;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	623b      	str	r3, [r7, #32]
 80087be:	e001      	b.n	80087c4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d002      	beq.n	80087d4 <osMutexNew+0x5c>
      rmtx = 1U;
 80087ce:	2301      	movs	r3, #1
 80087d0:	61fb      	str	r3, [r7, #28]
 80087d2:	e001      	b.n	80087d8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d15c      	bne.n	800889c <osMutexNew+0x124>
      mem = -1;
 80087e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087e6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d015      	beq.n	800881a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d006      	beq.n	8008804 <osMutexNew+0x8c>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	2b4f      	cmp	r3, #79	@ 0x4f
 80087fc:	d902      	bls.n	8008804 <osMutexNew+0x8c>
          mem = 1;
 80087fe:	2301      	movs	r3, #1
 8008800:	61bb      	str	r3, [r7, #24]
 8008802:	e00c      	b.n	800881e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d108      	bne.n	800881e <osMutexNew+0xa6>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d104      	bne.n	800881e <osMutexNew+0xa6>
            mem = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	61bb      	str	r3, [r7, #24]
 8008818:	e001      	b.n	800881e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800881a:	2300      	movs	r3, #0
 800881c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d112      	bne.n	800884a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d007      	beq.n	800883a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	4619      	mov	r1, r3
 8008830:	2004      	movs	r0, #4
 8008832:	f000 fe38 	bl	80094a6 <xQueueCreateMutexStatic>
 8008836:	6278      	str	r0, [r7, #36]	@ 0x24
 8008838:	e016      	b.n	8008868 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	4619      	mov	r1, r3
 8008840:	2001      	movs	r0, #1
 8008842:	f000 fe30 	bl	80094a6 <xQueueCreateMutexStatic>
 8008846:	6278      	str	r0, [r7, #36]	@ 0x24
 8008848:	e00e      	b.n	8008868 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10b      	bne.n	8008868 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d004      	beq.n	8008860 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008856:	2004      	movs	r0, #4
 8008858:	f000 fe0d 	bl	8009476 <xQueueCreateMutex>
 800885c:	6278      	str	r0, [r7, #36]	@ 0x24
 800885e:	e003      	b.n	8008868 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008860:	2001      	movs	r0, #1
 8008862:	f000 fe08 	bl	8009476 <xQueueCreateMutex>
 8008866:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00c      	beq.n	8008888 <osMutexNew+0x110>
        if (attr != NULL) {
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <osMutexNew+0x104>
          name = attr->name;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	617b      	str	r3, [r7, #20]
 800887a:	e001      	b.n	8008880 <osMutexNew+0x108>
        } else {
          name = NULL;
 800887c:	2300      	movs	r3, #0
 800887e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008880:	6979      	ldr	r1, [r7, #20]
 8008882:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008884:	f001 fb2a 	bl	8009edc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888a:	2b00      	cmp	r3, #0
 800888c:	d006      	beq.n	800889c <osMutexNew+0x124>
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008896:	f043 0301 	orr.w	r3, r3, #1
 800889a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800889c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3728      	adds	r7, #40	@ 0x28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	2001de4c 	.word	0x2001de4c

080088ac <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b088      	sub	sp, #32
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f023 0301 	bic.w	r3, r3, #1
 80088bc:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088ca:	f3ef 8305 	mrs	r3, IPSR
 80088ce:	613b      	str	r3, [r7, #16]
  return(result);
 80088d0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10f      	bne.n	80088f6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088d6:	f3ef 8310 	mrs	r3, PRIMASK
 80088da:	60fb      	str	r3, [r7, #12]
  return(result);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d105      	bne.n	80088ee <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088e2:	f3ef 8311 	mrs	r3, BASEPRI
 80088e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d007      	beq.n	80088fe <osMutexAcquire+0x52>
 80088ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008964 <osMutexAcquire+0xb8>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d103      	bne.n	80088fe <osMutexAcquire+0x52>
    stat = osErrorISR;
 80088f6:	f06f 0305 	mvn.w	r3, #5
 80088fa:	61fb      	str	r3, [r7, #28]
 80088fc:	e02c      	b.n	8008958 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d103      	bne.n	800890c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008904:	f06f 0303 	mvn.w	r3, #3
 8008908:	61fb      	str	r3, [r7, #28]
 800890a:	e025      	b.n	8008958 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d011      	beq.n	8008936 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	69b8      	ldr	r0, [r7, #24]
 8008916:	f000 fe07 	bl	8009528 <xQueueTakeMutexRecursive>
 800891a:	4603      	mov	r3, r0
 800891c:	2b01      	cmp	r3, #1
 800891e:	d01b      	beq.n	8008958 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d003      	beq.n	800892e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008926:	f06f 0301 	mvn.w	r3, #1
 800892a:	61fb      	str	r3, [r7, #28]
 800892c:	e014      	b.n	8008958 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800892e:	f06f 0302 	mvn.w	r3, #2
 8008932:	61fb      	str	r3, [r7, #28]
 8008934:	e010      	b.n	8008958 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	69b8      	ldr	r0, [r7, #24]
 800893a:	f001 f84f 	bl	80099dc <xQueueSemaphoreTake>
 800893e:	4603      	mov	r3, r0
 8008940:	2b01      	cmp	r3, #1
 8008942:	d009      	beq.n	8008958 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800894a:	f06f 0301 	mvn.w	r3, #1
 800894e:	61fb      	str	r3, [r7, #28]
 8008950:	e002      	b.n	8008958 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008952:	f06f 0302 	mvn.w	r3, #2
 8008956:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008958:	69fb      	ldr	r3, [r7, #28]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3720      	adds	r7, #32
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	2001de4c 	.word	0x2001de4c

08008968 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008968:	b580      	push	{r7, lr}
 800896a:	b088      	sub	sp, #32
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f023 0301 	bic.w	r3, r3, #1
 8008976:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008980:	2300      	movs	r3, #0
 8008982:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008984:	f3ef 8305 	mrs	r3, IPSR
 8008988:	613b      	str	r3, [r7, #16]
  return(result);
 800898a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10f      	bne.n	80089b0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008990:	f3ef 8310 	mrs	r3, PRIMASK
 8008994:	60fb      	str	r3, [r7, #12]
  return(result);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d105      	bne.n	80089a8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800899c:	f3ef 8311 	mrs	r3, BASEPRI
 80089a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d007      	beq.n	80089b8 <osMutexRelease+0x50>
 80089a8:	4b16      	ldr	r3, [pc, #88]	@ (8008a04 <osMutexRelease+0x9c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d103      	bne.n	80089b8 <osMutexRelease+0x50>
    stat = osErrorISR;
 80089b0:	f06f 0305 	mvn.w	r3, #5
 80089b4:	61fb      	str	r3, [r7, #28]
 80089b6:	e01f      	b.n	80089f8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d103      	bne.n	80089c6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80089be:	f06f 0303 	mvn.w	r3, #3
 80089c2:	61fb      	str	r3, [r7, #28]
 80089c4:	e018      	b.n	80089f8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d009      	beq.n	80089e0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80089cc:	69b8      	ldr	r0, [r7, #24]
 80089ce:	f000 fd85 	bl	80094dc <xQueueGiveMutexRecursive>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d00f      	beq.n	80089f8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80089d8:	f06f 0302 	mvn.w	r3, #2
 80089dc:	61fb      	str	r3, [r7, #28]
 80089de:	e00b      	b.n	80089f8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80089e0:	2300      	movs	r3, #0
 80089e2:	2200      	movs	r2, #0
 80089e4:	2100      	movs	r1, #0
 80089e6:	69b8      	ldr	r0, [r7, #24]
 80089e8:	f000 fdf6 	bl	80095d8 <xQueueGenericSend>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d002      	beq.n	80089f8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80089f2:	f06f 0302 	mvn.w	r3, #2
 80089f6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80089f8:	69fb      	ldr	r3, [r7, #28]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3720      	adds	r7, #32
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	2001de4c 	.word	0x2001de4c

08008a08 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b08c      	sub	sp, #48	@ 0x30
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008a14:	2300      	movs	r3, #0
 8008a16:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a18:	f3ef 8305 	mrs	r3, IPSR
 8008a1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a1e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f040 8086 	bne.w	8008b32 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a26:	f3ef 8310 	mrs	r3, PRIMASK
 8008a2a:	617b      	str	r3, [r7, #20]
  return(result);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d105      	bne.n	8008a3e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a32:	f3ef 8311 	mrs	r3, BASEPRI
 8008a36:	613b      	str	r3, [r7, #16]
  return(result);
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d003      	beq.n	8008a46 <osSemaphoreNew+0x3e>
 8008a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8008b3c <osSemaphoreNew+0x134>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d075      	beq.n	8008b32 <osSemaphoreNew+0x12a>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d072      	beq.n	8008b32 <osSemaphoreNew+0x12a>
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d86e      	bhi.n	8008b32 <osSemaphoreNew+0x12a>
    mem = -1;
 8008a54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d015      	beq.n	8008a8c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d006      	beq.n	8008a76 <osSemaphoreNew+0x6e>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	2b4f      	cmp	r3, #79	@ 0x4f
 8008a6e:	d902      	bls.n	8008a76 <osSemaphoreNew+0x6e>
        mem = 1;
 8008a70:	2301      	movs	r3, #1
 8008a72:	623b      	str	r3, [r7, #32]
 8008a74:	e00c      	b.n	8008a90 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d108      	bne.n	8008a90 <osSemaphoreNew+0x88>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d104      	bne.n	8008a90 <osSemaphoreNew+0x88>
          mem = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	623b      	str	r3, [r7, #32]
 8008a8a:	e001      	b.n	8008a90 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a96:	d04c      	beq.n	8008b32 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d128      	bne.n	8008af0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8008a9e:	6a3b      	ldr	r3, [r7, #32]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d10a      	bne.n	8008aba <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	2203      	movs	r2, #3
 8008aaa:	9200      	str	r2, [sp, #0]
 8008aac:	2200      	movs	r2, #0
 8008aae:	2100      	movs	r1, #0
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	f000 fc4f 	bl	8009354 <xQueueGenericCreateStatic>
 8008ab6:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ab8:	e005      	b.n	8008ac6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008aba:	2203      	movs	r2, #3
 8008abc:	2100      	movs	r1, #0
 8008abe:	2001      	movs	r0, #1
 8008ac0:	f000 fc6a 	bl	8009398 <xQueueGenericCreate>
 8008ac4:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d022      	beq.n	8008b12 <osSemaphoreNew+0x10a>
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d01f      	beq.n	8008b12 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ada:	f000 fd7d 	bl	80095d8 <xQueueGenericSend>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d016      	beq.n	8008b12 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008ae4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ae6:	f001 f8bc 	bl	8009c62 <vQueueDelete>
            hSemaphore = NULL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008aee:	e010      	b.n	8008b12 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d108      	bne.n	8008b08 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	461a      	mov	r2, r3
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 fd3a 	bl	8009578 <xQueueCreateCountingSemaphoreStatic>
 8008b04:	6278      	str	r0, [r7, #36]	@ 0x24
 8008b06:	e004      	b.n	8008b12 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008b08:	68b9      	ldr	r1, [r7, #8]
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 fd4e 	bl	80095ac <xQueueCreateCountingSemaphore>
 8008b10:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00c      	beq.n	8008b32 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <osSemaphoreNew+0x11e>
          name = attr->name;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	61fb      	str	r3, [r7, #28]
 8008b24:	e001      	b.n	8008b2a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008b26:	2300      	movs	r3, #0
 8008b28:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008b2a:	69f9      	ldr	r1, [r7, #28]
 8008b2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b2e:	f001 f9d5 	bl	8009edc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3728      	adds	r7, #40	@ 0x28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	2001de4c 	.word	0x2001de4c

08008b40 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b088      	sub	sp, #32
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d103      	bne.n	8008b60 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008b58:	f06f 0303 	mvn.w	r3, #3
 8008b5c:	61fb      	str	r3, [r7, #28]
 8008b5e:	e04b      	b.n	8008bf8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b60:	f3ef 8305 	mrs	r3, IPSR
 8008b64:	617b      	str	r3, [r7, #20]
  return(result);
 8008b66:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10f      	bne.n	8008b8c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b70:	613b      	str	r3, [r7, #16]
  return(result);
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d105      	bne.n	8008b84 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b78:	f3ef 8311 	mrs	r3, BASEPRI
 8008b7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d026      	beq.n	8008bd2 <osSemaphoreAcquire+0x92>
 8008b84:	4b1f      	ldr	r3, [pc, #124]	@ (8008c04 <osSemaphoreAcquire+0xc4>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d122      	bne.n	8008bd2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d003      	beq.n	8008b9a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008b92:	f06f 0303 	mvn.w	r3, #3
 8008b96:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008b98:	e02d      	b.n	8008bf6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008b9e:	f107 0308 	add.w	r3, r7, #8
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	69b8      	ldr	r0, [r7, #24]
 8008ba8:	f000 ffe0 	bl	8009b6c <xQueueReceiveFromISR>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d003      	beq.n	8008bba <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008bb2:	f06f 0302 	mvn.w	r3, #2
 8008bb6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008bb8:	e01d      	b.n	8008bf6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d01a      	beq.n	8008bf6 <osSemaphoreAcquire+0xb6>
 8008bc0:	4b11      	ldr	r3, [pc, #68]	@ (8008c08 <osSemaphoreAcquire+0xc8>)
 8008bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008bd0:	e011      	b.n	8008bf6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	69b8      	ldr	r0, [r7, #24]
 8008bd6:	f000 ff01 	bl	80099dc <xQueueSemaphoreTake>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d00b      	beq.n	8008bf8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008be6:	f06f 0301 	mvn.w	r3, #1
 8008bea:	61fb      	str	r3, [r7, #28]
 8008bec:	e004      	b.n	8008bf8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008bee:	f06f 0302 	mvn.w	r3, #2
 8008bf2:	61fb      	str	r3, [r7, #28]
 8008bf4:	e000      	b.n	8008bf8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008bf6:	bf00      	nop
      }
    }
  }

  return (stat);
 8008bf8:	69fb      	ldr	r3, [r7, #28]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3720      	adds	r7, #32
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	2001de4c 	.word	0x2001de4c
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d103      	bne.n	8008c2a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008c22:	f06f 0303 	mvn.w	r3, #3
 8008c26:	61fb      	str	r3, [r7, #28]
 8008c28:	e03e      	b.n	8008ca8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c2a:	f3ef 8305 	mrs	r3, IPSR
 8008c2e:	617b      	str	r3, [r7, #20]
  return(result);
 8008c30:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10f      	bne.n	8008c56 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c36:	f3ef 8310 	mrs	r3, PRIMASK
 8008c3a:	613b      	str	r3, [r7, #16]
  return(result);
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d105      	bne.n	8008c4e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c42:	f3ef 8311 	mrs	r3, BASEPRI
 8008c46:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d01e      	beq.n	8008c8c <osSemaphoreRelease+0x80>
 8008c4e:	4b19      	ldr	r3, [pc, #100]	@ (8008cb4 <osSemaphoreRelease+0xa8>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d11a      	bne.n	8008c8c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008c56:	2300      	movs	r3, #0
 8008c58:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008c5a:	f107 0308 	add.w	r3, r7, #8
 8008c5e:	4619      	mov	r1, r3
 8008c60:	69b8      	ldr	r0, [r7, #24]
 8008c62:	f000 fdc1 	bl	80097e8 <xQueueGiveFromISR>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d003      	beq.n	8008c74 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008c6c:	f06f 0302 	mvn.w	r3, #2
 8008c70:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008c72:	e018      	b.n	8008ca6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d015      	beq.n	8008ca6 <osSemaphoreRelease+0x9a>
 8008c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008cb8 <osSemaphoreRelease+0xac>)
 8008c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008c8a:	e00c      	b.n	8008ca6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2100      	movs	r1, #0
 8008c92:	69b8      	ldr	r0, [r7, #24]
 8008c94:	f000 fca0 	bl	80095d8 <xQueueGenericSend>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d004      	beq.n	8008ca8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008c9e:	f06f 0302 	mvn.w	r3, #2
 8008ca2:	61fb      	str	r3, [r7, #28]
 8008ca4:	e000      	b.n	8008ca8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008ca6:	bf00      	nop
    }
  }

  return (stat);
 8008ca8:	69fb      	ldr	r3, [r7, #28]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3720      	adds	r7, #32
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	2001de4c 	.word	0x2001de4c
 8008cb8:	e000ed04 	.word	0xe000ed04

08008cbc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cc8:	f3ef 8305 	mrs	r3, IPSR
 8008ccc:	617b      	str	r3, [r7, #20]
  return(result);
 8008cce:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10f      	bne.n	8008cf4 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8008cd8:	613b      	str	r3, [r7, #16]
  return(result);
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d105      	bne.n	8008cec <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8008ce4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d007      	beq.n	8008cfc <osSemaphoreDelete+0x40>
 8008cec:	4b0d      	ldr	r3, [pc, #52]	@ (8008d24 <osSemaphoreDelete+0x68>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d103      	bne.n	8008cfc <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8008cf4:	f06f 0305 	mvn.w	r3, #5
 8008cf8:	61fb      	str	r3, [r7, #28]
 8008cfa:	e00e      	b.n	8008d1a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8008d02:	f06f 0303 	mvn.w	r3, #3
 8008d06:	61fb      	str	r3, [r7, #28]
 8008d08:	e007      	b.n	8008d1a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008d0a:	69b8      	ldr	r0, [r7, #24]
 8008d0c:	f001 f910 	bl	8009f30 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8008d14:	69b8      	ldr	r0, [r7, #24]
 8008d16:	f000 ffa4 	bl	8009c62 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008d1a:	69fb      	ldr	r3, [r7, #28]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3720      	adds	r7, #32
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	2001de4c 	.word	0x2001de4c

08008d28 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08c      	sub	sp, #48	@ 0x30
 8008d2c:	af02      	add	r7, sp, #8
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d38:	f3ef 8305 	mrs	r3, IPSR
 8008d3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d3e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d16f      	bne.n	8008e24 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d44:	f3ef 8310 	mrs	r3, PRIMASK
 8008d48:	617b      	str	r3, [r7, #20]
  return(result);
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d105      	bne.n	8008d5c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d50:	f3ef 8311 	mrs	r3, BASEPRI
 8008d54:	613b      	str	r3, [r7, #16]
  return(result);
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <osMessageQueueNew+0x3c>
 8008d5c:	4b34      	ldr	r3, [pc, #208]	@ (8008e30 <osMessageQueueNew+0x108>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d05f      	beq.n	8008e24 <osMessageQueueNew+0xfc>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d05c      	beq.n	8008e24 <osMessageQueueNew+0xfc>
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d059      	beq.n	8008e24 <osMessageQueueNew+0xfc>
    mem = -1;
 8008d70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d74:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d029      	beq.n	8008dd0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d012      	beq.n	8008daa <osMessageQueueNew+0x82>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	2b4f      	cmp	r3, #79	@ 0x4f
 8008d8a:	d90e      	bls.n	8008daa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00a      	beq.n	8008daa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	695a      	ldr	r2, [r3, #20]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	68b9      	ldr	r1, [r7, #8]
 8008d9c:	fb01 f303 	mul.w	r3, r1, r3
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d302      	bcc.n	8008daa <osMessageQueueNew+0x82>
        mem = 1;
 8008da4:	2301      	movs	r3, #1
 8008da6:	623b      	str	r3, [r7, #32]
 8008da8:	e014      	b.n	8008dd4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d110      	bne.n	8008dd4 <osMessageQueueNew+0xac>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10c      	bne.n	8008dd4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d108      	bne.n	8008dd4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d104      	bne.n	8008dd4 <osMessageQueueNew+0xac>
          mem = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	623b      	str	r3, [r7, #32]
 8008dce:	e001      	b.n	8008dd4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d10b      	bne.n	8008df2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	691a      	ldr	r2, [r3, #16]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	2100      	movs	r1, #0
 8008de4:	9100      	str	r1, [sp, #0]
 8008de6:	68b9      	ldr	r1, [r7, #8]
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 fab3 	bl	8009354 <xQueueGenericCreateStatic>
 8008dee:	6278      	str	r0, [r7, #36]	@ 0x24
 8008df0:	e008      	b.n	8008e04 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d105      	bne.n	8008e04 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008df8:	2200      	movs	r2, #0
 8008dfa:	68b9      	ldr	r1, [r7, #8]
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 facb 	bl	8009398 <xQueueGenericCreate>
 8008e02:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00c      	beq.n	8008e24 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <osMessageQueueNew+0xf0>
        name = attr->name;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	e001      	b.n	8008e1c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008e1c:	69f9      	ldr	r1, [r7, #28]
 8008e1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e20:	f001 f85c 	bl	8009edc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3728      	adds	r7, #40	@ 0x28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	2001de4c 	.word	0x2001de4c

08008e34 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08a      	sub	sp, #40	@ 0x28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	603b      	str	r3, [r7, #0]
 8008e40:	4613      	mov	r3, r2
 8008e42:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e4c:	f3ef 8305 	mrs	r3, IPSR
 8008e50:	61fb      	str	r3, [r7, #28]
  return(result);
 8008e52:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10f      	bne.n	8008e78 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e58:	f3ef 8310 	mrs	r3, PRIMASK
 8008e5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d105      	bne.n	8008e70 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e64:	f3ef 8311 	mrs	r3, BASEPRI
 8008e68:	617b      	str	r3, [r7, #20]
  return(result);
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d02c      	beq.n	8008eca <osMessageQueuePut+0x96>
 8008e70:	4b28      	ldr	r3, [pc, #160]	@ (8008f14 <osMessageQueuePut+0xe0>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d128      	bne.n	8008eca <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d005      	beq.n	8008e8a <osMessageQueuePut+0x56>
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <osMessageQueuePut+0x56>
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008e8a:	f06f 0303 	mvn.w	r3, #3
 8008e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e90:	e039      	b.n	8008f06 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008e92:	2300      	movs	r3, #0
 8008e94:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008e96:	f107 0210 	add.w	r2, r7, #16
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	6a38      	ldr	r0, [r7, #32]
 8008ea0:	f000 fc44 	bl	800972c <xQueueGenericSendFromISR>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d003      	beq.n	8008eb2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008eaa:	f06f 0302 	mvn.w	r3, #2
 8008eae:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008eb0:	e029      	b.n	8008f06 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d026      	beq.n	8008f06 <osMessageQueuePut+0xd2>
 8008eb8:	4b17      	ldr	r3, [pc, #92]	@ (8008f18 <osMessageQueuePut+0xe4>)
 8008eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ebe:	601a      	str	r2, [r3, #0]
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ec8:	e01d      	b.n	8008f06 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <osMessageQueuePut+0xa2>
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d103      	bne.n	8008ede <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008ed6:	f06f 0303 	mvn.w	r3, #3
 8008eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8008edc:	e014      	b.n	8008f08 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008ede:	2300      	movs	r3, #0
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	6a38      	ldr	r0, [r7, #32]
 8008ee6:	f000 fb77 	bl	80095d8 <xQueueGenericSend>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d00b      	beq.n	8008f08 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8008ef6:	f06f 0301 	mvn.w	r3, #1
 8008efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008efc:	e004      	b.n	8008f08 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008efe:	f06f 0302 	mvn.w	r3, #2
 8008f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f04:	e000      	b.n	8008f08 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f06:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3728      	adds	r7, #40	@ 0x28
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	2001de4c 	.word	0x2001de4c
 8008f18:	e000ed04 	.word	0xe000ed04

08008f1c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b08a      	sub	sp, #40	@ 0x28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f32:	f3ef 8305 	mrs	r3, IPSR
 8008f36:	61fb      	str	r3, [r7, #28]
  return(result);
 8008f38:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10f      	bne.n	8008f5e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f42:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d105      	bne.n	8008f56 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f4a:	f3ef 8311 	mrs	r3, BASEPRI
 8008f4e:	617b      	str	r3, [r7, #20]
  return(result);
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d02c      	beq.n	8008fb0 <osMessageQueueGet+0x94>
 8008f56:	4b28      	ldr	r3, [pc, #160]	@ (8008ff8 <osMessageQueueGet+0xdc>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d128      	bne.n	8008fb0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <osMessageQueueGet+0x54>
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <osMessageQueueGet+0x54>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d003      	beq.n	8008f78 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008f70:	f06f 0303 	mvn.w	r3, #3
 8008f74:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f76:	e038      	b.n	8008fea <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008f7c:	f107 0310 	add.w	r3, r7, #16
 8008f80:	461a      	mov	r2, r3
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	6a38      	ldr	r0, [r7, #32]
 8008f86:	f000 fdf1 	bl	8009b6c <xQueueReceiveFromISR>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d003      	beq.n	8008f98 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008f90:	f06f 0302 	mvn.w	r3, #2
 8008f94:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f96:	e028      	b.n	8008fea <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d025      	beq.n	8008fea <osMessageQueueGet+0xce>
 8008f9e:	4b17      	ldr	r3, [pc, #92]	@ (8008ffc <osMessageQueueGet+0xe0>)
 8008fa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008fae:	e01c      	b.n	8008fea <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d002      	beq.n	8008fbc <osMessageQueueGet+0xa0>
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d103      	bne.n	8008fc4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008fbc:	f06f 0303 	mvn.w	r3, #3
 8008fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fc2:	e013      	b.n	8008fec <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	68b9      	ldr	r1, [r7, #8]
 8008fc8:	6a38      	ldr	r0, [r7, #32]
 8008fca:	f000 fc65 	bl	8009898 <xQueueReceive>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d00b      	beq.n	8008fec <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008fda:	f06f 0301 	mvn.w	r3, #1
 8008fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fe0:	e004      	b.n	8008fec <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008fe2:	f06f 0302 	mvn.w	r3, #2
 8008fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fe8:	e000      	b.n	8008fec <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008fea:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3728      	adds	r7, #40	@ 0x28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	2001de4c 	.word	0x2001de4c
 8008ffc:	e000ed04 	.word	0xe000ed04

08009000 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d102      	bne.n	8009018 <osMessageQueueGetCount+0x18>
    count = 0U;
 8009012:	2300      	movs	r3, #0
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	e01e      	b.n	8009056 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009018:	f3ef 8305 	mrs	r3, IPSR
 800901c:	617b      	str	r3, [r7, #20]
  return(result);
 800901e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10f      	bne.n	8009044 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009024:	f3ef 8310 	mrs	r3, PRIMASK
 8009028:	613b      	str	r3, [r7, #16]
  return(result);
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d105      	bne.n	800903c <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009030:	f3ef 8311 	mrs	r3, BASEPRI
 8009034:	60fb      	str	r3, [r7, #12]
  return(result);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d008      	beq.n	800904e <osMessageQueueGetCount+0x4e>
 800903c:	4b08      	ldr	r3, [pc, #32]	@ (8009060 <osMessageQueueGetCount+0x60>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d104      	bne.n	800904e <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009044:	69b8      	ldr	r0, [r7, #24]
 8009046:	f000 fdfc 	bl	8009c42 <uxQueueMessagesWaitingFromISR>
 800904a:	61f8      	str	r0, [r7, #28]
 800904c:	e003      	b.n	8009056 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800904e:	69b8      	ldr	r0, [r7, #24]
 8009050:	f000 fde7 	bl	8009c22 <uxQueueMessagesWaiting>
 8009054:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8009056:	69fb      	ldr	r3, [r7, #28]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3720      	adds	r7, #32
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	2001de4c 	.word	0x2001de4c

08009064 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009070:	f3ef 8305 	mrs	r3, IPSR
 8009074:	617b      	str	r3, [r7, #20]
  return(result);
 8009076:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10f      	bne.n	800909c <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800907c:	f3ef 8310 	mrs	r3, PRIMASK
 8009080:	613b      	str	r3, [r7, #16]
  return(result);
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d105      	bne.n	8009094 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009088:	f3ef 8311 	mrs	r3, BASEPRI
 800908c:	60fb      	str	r3, [r7, #12]
  return(result);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d007      	beq.n	80090a4 <osMessageQueueDelete+0x40>
 8009094:	4b0d      	ldr	r3, [pc, #52]	@ (80090cc <osMessageQueueDelete+0x68>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b02      	cmp	r3, #2
 800909a:	d103      	bne.n	80090a4 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800909c:	f06f 0305 	mvn.w	r3, #5
 80090a0:	61fb      	str	r3, [r7, #28]
 80090a2:	e00e      	b.n	80090c2 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d103      	bne.n	80090b2 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 80090aa:	f06f 0303 	mvn.w	r3, #3
 80090ae:	61fb      	str	r3, [r7, #28]
 80090b0:	e007      	b.n	80090c2 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80090b2:	69b8      	ldr	r0, [r7, #24]
 80090b4:	f000 ff3c 	bl	8009f30 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 80090bc:	69b8      	ldr	r0, [r7, #24]
 80090be:	f000 fdd0 	bl	8009c62 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80090c2:	69fb      	ldr	r3, [r7, #28]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3720      	adds	r7, #32
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	2001de4c 	.word	0x2001de4c

080090d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4a07      	ldr	r2, [pc, #28]	@ (80090fc <vApplicationGetIdleTaskMemory+0x2c>)
 80090e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4a06      	ldr	r2, [pc, #24]	@ (8009100 <vApplicationGetIdleTaskMemory+0x30>)
 80090e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2280      	movs	r2, #128	@ 0x80
 80090ec:	601a      	str	r2, [r3, #0]
}
 80090ee:	bf00      	nop
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	2001de50 	.word	0x2001de50
 8009100:	2001df08 	.word	0x2001df08

08009104 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4a07      	ldr	r2, [pc, #28]	@ (8009130 <vApplicationGetTimerTaskMemory+0x2c>)
 8009114:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	4a06      	ldr	r2, [pc, #24]	@ (8009134 <vApplicationGetTimerTaskMemory+0x30>)
 800911a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009122:	601a      	str	r2, [r3, #0]
}
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	2001e108 	.word	0x2001e108
 8009134:	2001e1c0 	.word	0x2001e1c0

08009138 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f103 0208 	add.w	r2, r3, #8
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009150:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f103 0208 	add.w	r2, r3, #8
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f103 0208 	add.w	r2, r3, #8
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009192:	b480      	push	{r7}
 8009194:	b085      	sub	sp, #20
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	689a      	ldr	r2, [r3, #8]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	683a      	ldr	r2, [r7, #0]
 80091b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	1c5a      	adds	r2, r3, #1
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
}
 80091ce:	bf00      	nop
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091da:	b480      	push	{r7}
 80091dc:	b085      	sub	sp, #20
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091f0:	d103      	bne.n	80091fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	e00c      	b.n	8009214 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	3308      	adds	r3, #8
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	e002      	b.n	8009208 <vListInsert+0x2e>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	429a      	cmp	r2, r3
 8009212:	d2f6      	bcs.n	8009202 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	601a      	str	r2, [r3, #0]
}
 8009240:	bf00      	nop
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	6892      	ldr	r2, [r2, #8]
 8009262:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	6852      	ldr	r2, [r2, #4]
 800926c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	429a      	cmp	r2, r3
 8009276:	d103      	bne.n	8009280 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	1e5a      	subs	r2, r3, #1
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 80092ae:	f002 f9b1 	bl	800b614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ba:	68f9      	ldr	r1, [r7, #12]
 80092bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80092be:	fb01 f303 	mul.w	r3, r1, r3
 80092c2:	441a      	add	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092de:	3b01      	subs	r3, #1
 80092e0:	68f9      	ldr	r1, [r7, #12]
 80092e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80092e4:	fb01 f303 	mul.w	r3, r1, r3
 80092e8:	441a      	add	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	22ff      	movs	r2, #255	@ 0xff
 80092f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	22ff      	movs	r2, #255	@ 0xff
 80092fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d114      	bne.n	800932e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d01a      	beq.n	8009342 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	3310      	adds	r3, #16
 8009310:	4618      	mov	r0, r3
 8009312:	f001 fa5f 	bl	800a7d4 <xTaskRemoveFromEventList>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d012      	beq.n	8009342 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800931c:	4b0c      	ldr	r3, [pc, #48]	@ (8009350 <xQueueGenericReset+0xb0>)
 800931e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	e009      	b.n	8009342 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3310      	adds	r3, #16
 8009332:	4618      	mov	r0, r3
 8009334:	f7ff ff00 	bl	8009138 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	3324      	adds	r3, #36	@ 0x24
 800933c:	4618      	mov	r0, r3
 800933e:	f7ff fefb 	bl	8009138 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009342:	f002 f983 	bl	800b64c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009346:	2301      	movs	r3, #1
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	e000ed04 	.word	0xe000ed04

08009354 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af02      	add	r7, sp, #8
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009362:	2350      	movs	r3, #80	@ 0x50
 8009364:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009366:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00d      	beq.n	800938e <xQueueGenericCreateStatic+0x3a>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800937a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	4613      	mov	r3, r2
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	68b9      	ldr	r1, [r7, #8]
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 f837 	bl	80093fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800938e:	697b      	ldr	r3, [r7, #20]
	}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08a      	sub	sp, #40	@ 0x28
 800939c:	af02      	add	r7, sp, #8
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	4613      	mov	r3, r2
 80093a4:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	61fb      	str	r3, [r7, #28]
 80093b0:	e004      	b.n	80093bc <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	fb02 f303 	mul.w	r3, r2, r3
 80093ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	3350      	adds	r3, #80	@ 0x50
 80093c0:	4618      	mov	r0, r3
 80093c2:	f002 f9f9 	bl	800b7b8 <pvPortMalloc>
 80093c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d011      	beq.n	80093f2 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	3350      	adds	r3, #80	@ 0x50
 80093d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093e0:	79fa      	ldrb	r2, [r7, #7]
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	4613      	mov	r3, r2
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f000 f805 	bl	80093fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80093f2:	69bb      	ldr	r3, [r7, #24]
	}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3720      	adds	r7, #32
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d103      	bne.n	8009418 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	e002      	b.n	800941e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800942a:	2101      	movs	r1, #1
 800942c:	69b8      	ldr	r0, [r7, #24]
 800942e:	f7ff ff37 	bl	80092a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	78fa      	ldrb	r2, [r7, #3]
 8009436:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800943a:	bf00      	nop
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009442:	b580      	push	{r7, lr}
 8009444:	b082      	sub	sp, #8
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00e      	beq.n	800946e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009462:	2300      	movs	r3, #0
 8009464:	2200      	movs	r2, #0
 8009466:	2100      	movs	r1, #0
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f8b5 	bl	80095d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009476:	b580      	push	{r7, lr}
 8009478:	b086      	sub	sp, #24
 800947a:	af00      	add	r7, sp, #0
 800947c:	4603      	mov	r3, r0
 800947e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009480:	2301      	movs	r3, #1
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	2300      	movs	r3, #0
 8009486:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009488:	79fb      	ldrb	r3, [r7, #7]
 800948a:	461a      	mov	r2, r3
 800948c:	6939      	ldr	r1, [r7, #16]
 800948e:	6978      	ldr	r0, [r7, #20]
 8009490:	f7ff ff82 	bl	8009398 <xQueueGenericCreate>
 8009494:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f7ff ffd3 	bl	8009442 <prvInitialiseMutex>

		return xNewQueue;
 800949c:	68fb      	ldr	r3, [r7, #12]
	}
 800949e:	4618      	mov	r0, r3
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b088      	sub	sp, #32
 80094aa:	af02      	add	r7, sp, #8
 80094ac:	4603      	mov	r3, r0
 80094ae:	6039      	str	r1, [r7, #0]
 80094b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80094b2:	2301      	movs	r3, #1
 80094b4:	617b      	str	r3, [r7, #20]
 80094b6:	2300      	movs	r3, #0
 80094b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2200      	movs	r2, #0
 80094c2:	6939      	ldr	r1, [r7, #16]
 80094c4:	6978      	ldr	r0, [r7, #20]
 80094c6:	f7ff ff45 	bl	8009354 <xQueueGenericCreateStatic>
 80094ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff ffb8 	bl	8009442 <prvInitialiseMutex>

		return xNewQueue;
 80094d2:	68fb      	ldr	r3, [r7, #12]
	}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80094dc:	b590      	push	{r4, r7, lr}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	60bb      	str	r3, [r7, #8]
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	689c      	ldr	r4, [r3, #8]
 80094ec:	f001 fb12 	bl	800ab14 <xTaskGetCurrentTaskHandle>
 80094f0:	4603      	mov	r3, r0
 80094f2:	429c      	cmp	r4, r3
 80094f4:	d111      	bne.n	800951a <xQueueGiveMutexRecursive+0x3e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	1e5a      	subs	r2, r3, #1
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d105      	bne.n	8009514 <xQueueGiveMutexRecursive+0x38>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009508:	2300      	movs	r3, #0
 800950a:	2200      	movs	r2, #0
 800950c:	2100      	movs	r1, #0
 800950e:	68b8      	ldr	r0, [r7, #8]
 8009510:	f000 f862 	bl	80095d8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009514:	2301      	movs	r3, #1
 8009516:	60fb      	str	r3, [r7, #12]
 8009518:	e001      	b.n	800951e <xQueueGiveMutexRecursive+0x42>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800951a:	2300      	movs	r3, #0
 800951c:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800951e:	68fb      	ldr	r3, [r7, #12]
	}
 8009520:	4618      	mov	r0, r3
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	bd90      	pop	{r4, r7, pc}

08009528 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009528:	b590      	push	{r4, r7, lr}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	60bb      	str	r3, [r7, #8]
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	689c      	ldr	r4, [r3, #8]
 800953a:	f001 faeb 	bl	800ab14 <xTaskGetCurrentTaskHandle>
 800953e:	4603      	mov	r3, r0
 8009540:	429c      	cmp	r4, r3
 8009542:	d107      	bne.n	8009554 <xQueueTakeMutexRecursive+0x2c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	1c5a      	adds	r2, r3, #1
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800954e:	2301      	movs	r3, #1
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	e00c      	b.n	800956e <xQueueTakeMutexRecursive+0x46>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	68b8      	ldr	r0, [r7, #8]
 8009558:	f000 fa40 	bl	80099dc <xQueueSemaphoreTake>
 800955c:	60f8      	str	r0, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <xQueueTakeMutexRecursive+0x46>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	1c5a      	adds	r2, r3, #1
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800956e:	68fb      	ldr	r3, [r7, #12]
	}
 8009570:	4618      	mov	r0, r3
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	bd90      	pop	{r4, r7, pc}

08009578 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009578:	b580      	push	{r7, lr}
 800957a:	b088      	sub	sp, #32
 800957c:	af02      	add	r7, sp, #8
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009584:	2302      	movs	r3, #2
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	2100      	movs	r1, #0
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f7ff fee0 	bl	8009354 <xQueueGenericCreateStatic>
 8009594:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <xQueueCreateCountingSemaphoreStatic+0x2a>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80095a2:	697b      	ldr	r3, [r7, #20]
	}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80095b6:	2202      	movs	r2, #2
 80095b8:	2100      	movs	r1, #0
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7ff feec 	bl	8009398 <xQueueGenericCreate>
 80095c0:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80095ce:	68fb      	ldr	r3, [r7, #12]
	}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b08a      	sub	sp, #40	@ 0x28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80095e6:	2300      	movs	r3, #0
 80095e8:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095ee:	f002 f811 	bl	800b614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d302      	bcc.n	8009604 <xQueueGenericSend+0x2c>
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	2b02      	cmp	r3, #2
 8009602:	d129      	bne.n	8009658 <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	68b9      	ldr	r1, [r7, #8]
 8009608:	6a38      	ldr	r0, [r7, #32]
 800960a:	f000 fb57 	bl	8009cbc <prvCopyDataToQueue>
 800960e:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009614:	2b00      	cmp	r3, #0
 8009616:	d010      	beq.n	800963a <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	3324      	adds	r3, #36	@ 0x24
 800961c:	4618      	mov	r0, r3
 800961e:	f001 f8d9 	bl	800a7d4 <xTaskRemoveFromEventList>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d013      	beq.n	8009650 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009628:	4b3f      	ldr	r3, [pc, #252]	@ (8009728 <xQueueGenericSend+0x150>)
 800962a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	e00a      	b.n	8009650 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d007      	beq.n	8009650 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009640:	4b39      	ldr	r3, [pc, #228]	@ (8009728 <xQueueGenericSend+0x150>)
 8009642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009650:	f001 fffc 	bl	800b64c <vPortExitCritical>
				return pdPASS;
 8009654:	2301      	movs	r3, #1
 8009656:	e063      	b.n	8009720 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d103      	bne.n	8009666 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800965e:	f001 fff5 	bl	800b64c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009662:	2300      	movs	r3, #0
 8009664:	e05c      	b.n	8009720 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009668:	2b00      	cmp	r3, #0
 800966a:	d106      	bne.n	800967a <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800966c:	f107 0314 	add.w	r3, r7, #20
 8009670:	4618      	mov	r0, r3
 8009672:	f001 f91d 	bl	800a8b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009676:	2301      	movs	r3, #1
 8009678:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800967a:	f001 ffe7 	bl	800b64c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800967e:	f000 feb9 	bl	800a3f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009682:	f001 ffc7 	bl	800b614 <vPortEnterCritical>
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800968c:	b25b      	sxtb	r3, r3
 800968e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009692:	d103      	bne.n	800969c <xQueueGenericSend+0xc4>
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096a2:	b25b      	sxtb	r3, r3
 80096a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096a8:	d103      	bne.n	80096b2 <xQueueGenericSend+0xda>
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096b2:	f001 ffcb 	bl	800b64c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096b6:	1d3a      	adds	r2, r7, #4
 80096b8:	f107 0314 	add.w	r3, r7, #20
 80096bc:	4611      	mov	r1, r2
 80096be:	4618      	mov	r0, r3
 80096c0:	f001 f90c 	bl	800a8dc <xTaskCheckForTimeOut>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d124      	bne.n	8009714 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80096ca:	6a38      	ldr	r0, [r7, #32]
 80096cc:	f000 fbee 	bl	8009eac <prvIsQueueFull>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d018      	beq.n	8009708 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	3310      	adds	r3, #16
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	4611      	mov	r1, r2
 80096de:	4618      	mov	r0, r3
 80096e0:	f001 f844 	bl	800a76c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80096e4:	6a38      	ldr	r0, [r7, #32]
 80096e6:	f000 fb79 	bl	8009ddc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80096ea:	f000 fe91 	bl	800a410 <xTaskResumeAll>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f47f af7c 	bne.w	80095ee <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 80096f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009728 <xQueueGenericSend+0x150>)
 80096f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	e772      	b.n	80095ee <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009708:	6a38      	ldr	r0, [r7, #32]
 800970a:	f000 fb67 	bl	8009ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800970e:	f000 fe7f 	bl	800a410 <xTaskResumeAll>
 8009712:	e76c      	b.n	80095ee <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009714:	6a38      	ldr	r0, [r7, #32]
 8009716:	f000 fb61 	bl	8009ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800971a:	f000 fe79 	bl	800a410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800971e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009720:	4618      	mov	r0, r3
 8009722:	3728      	adds	r7, #40	@ 0x28
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	e000ed04 	.word	0xe000ed04

0800972c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b08c      	sub	sp, #48	@ 0x30
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
 8009738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	62bb      	str	r3, [r7, #40]	@ 0x28
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800973e:	f002 f825 	bl	800b78c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009742:	f3ef 8211 	mrs	r2, BASEPRI
 8009746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974a:	b672      	cpsid	i
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	b662      	cpsie	i
 800975a:	61fa      	str	r2, [r7, #28]
 800975c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800975e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009760:	627b      	str	r3, [r7, #36]	@ 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800976a:	429a      	cmp	r2, r3
 800976c:	d302      	bcc.n	8009774 <xQueueGenericSendFromISR+0x48>
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2b02      	cmp	r3, #2
 8009772:	d12c      	bne.n	80097ce <xQueueGenericSendFromISR+0xa2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009776:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800977a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	68b9      	ldr	r1, [r7, #8]
 8009782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009784:	f000 fa9a 	bl	8009cbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009788:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800978c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009790:	d112      	bne.n	80097b8 <xQueueGenericSendFromISR+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009796:	2b00      	cmp	r3, #0
 8009798:	d016      	beq.n	80097c8 <xQueueGenericSendFromISR+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800979a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800979c:	3324      	adds	r3, #36	@ 0x24
 800979e:	4618      	mov	r0, r3
 80097a0:	f001 f818 	bl	800a7d4 <xTaskRemoveFromEventList>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00e      	beq.n	80097c8 <xQueueGenericSendFromISR+0x9c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00b      	beq.n	80097c8 <xQueueGenericSendFromISR+0x9c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	e007      	b.n	80097c8 <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80097bc:	3301      	adds	r3, #1
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	b25a      	sxtb	r2, r3
 80097c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80097c8:	2301      	movs	r3, #1
 80097ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
 80097cc:	e001      	b.n	80097d2 <xQueueGenericSendFromISR+0xa6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3730      	adds	r7, #48	@ 0x30
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08a      	sub	sp, #40	@ 0x28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	623b      	str	r3, [r7, #32]
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097f6:	f001 ffc9 	bl	800b78c <vPortValidateInterruptPriority>
	__asm volatile
 80097fa:	f3ef 8211 	mrs	r2, BASEPRI
 80097fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009802:	b672      	cpsid	i
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	b662      	cpsie	i
 8009812:	613a      	str	r2, [r7, #16]
 8009814:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8009816:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009818:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981e:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	429a      	cmp	r2, r3
 8009828:	d229      	bcs.n	800987e <xQueueGiveFromISR+0x96>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009830:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800983a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800983e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009842:	d112      	bne.n	800986a <xQueueGiveFromISR+0x82>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009848:	2b00      	cmp	r3, #0
 800984a:	d015      	beq.n	8009878 <xQueueGiveFromISR+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800984c:	6a3b      	ldr	r3, [r7, #32]
 800984e:	3324      	adds	r3, #36	@ 0x24
 8009850:	4618      	mov	r0, r3
 8009852:	f000 ffbf 	bl	800a7d4 <xTaskRemoveFromEventList>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00d      	beq.n	8009878 <xQueueGiveFromISR+0x90>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00a      	beq.n	8009878 <xQueueGiveFromISR+0x90>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2201      	movs	r2, #1
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	e006      	b.n	8009878 <xQueueGiveFromISR+0x90>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	3301      	adds	r3, #1
 800986e:	b2db      	uxtb	r3, r3
 8009870:	b25a      	sxtb	r2, r3
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009878:	2301      	movs	r3, #1
 800987a:	627b      	str	r3, [r7, #36]	@ 0x24
 800987c:	e001      	b.n	8009882 <xQueueGiveFromISR+0x9a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800987e:	2300      	movs	r3, #0
 8009880:	627b      	str	r3, [r7, #36]	@ 0x24
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	f383 8811 	msr	BASEPRI, r3
}
 800988c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800988e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009890:	4618      	mov	r0, r3
 8009892:	3728      	adds	r7, #40	@ 0x28
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08a      	sub	sp, #40	@ 0x28
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80098a4:	2300      	movs	r3, #0
 80098a6:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098ac:	f001 feb2 	bl	800b614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d01f      	beq.n	80098fc <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098bc:	68b9      	ldr	r1, [r7, #8]
 80098be:	6a38      	ldr	r0, [r7, #32]
 80098c0:	f000 fa66 	bl	8009d90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	1e5a      	subs	r2, r3, #1
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00f      	beq.n	80098f4 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	3310      	adds	r3, #16
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 ff7b 	bl	800a7d4 <xTaskRemoveFromEventList>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d007      	beq.n	80098f4 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098e4:	4b3c      	ldr	r3, [pc, #240]	@ (80099d8 <xQueueReceive+0x140>)
 80098e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098f4:	f001 feaa 	bl	800b64c <vPortExitCritical>
				return pdPASS;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e069      	b.n	80099d0 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d103      	bne.n	800990a <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009902:	f001 fea3 	bl	800b64c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009906:	2300      	movs	r3, #0
 8009908:	e062      	b.n	80099d0 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990c:	2b00      	cmp	r3, #0
 800990e:	d106      	bne.n	800991e <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009910:	f107 0314 	add.w	r3, r7, #20
 8009914:	4618      	mov	r0, r3
 8009916:	f000 ffcb 	bl	800a8b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800991a:	2301      	movs	r3, #1
 800991c:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800991e:	f001 fe95 	bl	800b64c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009922:	f000 fd67 	bl	800a3f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009926:	f001 fe75 	bl	800b614 <vPortEnterCritical>
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009930:	b25b      	sxtb	r3, r3
 8009932:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009936:	d103      	bne.n	8009940 <xQueueReceive+0xa8>
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009946:	b25b      	sxtb	r3, r3
 8009948:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800994c:	d103      	bne.n	8009956 <xQueueReceive+0xbe>
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009956:	f001 fe79 	bl	800b64c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800995a:	1d3a      	adds	r2, r7, #4
 800995c:	f107 0314 	add.w	r3, r7, #20
 8009960:	4611      	mov	r1, r2
 8009962:	4618      	mov	r0, r3
 8009964:	f000 ffba 	bl	800a8dc <xTaskCheckForTimeOut>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d123      	bne.n	80099b6 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800996e:	6a38      	ldr	r0, [r7, #32]
 8009970:	f000 fa86 	bl	8009e80 <prvIsQueueEmpty>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d017      	beq.n	80099aa <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	3324      	adds	r3, #36	@ 0x24
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	4611      	mov	r1, r2
 8009982:	4618      	mov	r0, r3
 8009984:	f000 fef2 	bl	800a76c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009988:	6a38      	ldr	r0, [r7, #32]
 800998a:	f000 fa27 	bl	8009ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800998e:	f000 fd3f 	bl	800a410 <xTaskResumeAll>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d189      	bne.n	80098ac <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8009998:	4b0f      	ldr	r3, [pc, #60]	@ (80099d8 <xQueueReceive+0x140>)
 800999a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	e780      	b.n	80098ac <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80099aa:	6a38      	ldr	r0, [r7, #32]
 80099ac:	f000 fa16 	bl	8009ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099b0:	f000 fd2e 	bl	800a410 <xTaskResumeAll>
 80099b4:	e77a      	b.n	80098ac <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80099b6:	6a38      	ldr	r0, [r7, #32]
 80099b8:	f000 fa10 	bl	8009ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099bc:	f000 fd28 	bl	800a410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099c0:	6a38      	ldr	r0, [r7, #32]
 80099c2:	f000 fa5d 	bl	8009e80 <prvIsQueueEmpty>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f43f af6f 	beq.w	80098ac <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3728      	adds	r7, #40	@ 0x28
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	e000ed04 	.word	0xe000ed04

080099dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b08a      	sub	sp, #40	@ 0x28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80099e6:	2300      	movs	r3, #0
 80099e8:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099f2:	f001 fe0f 	bl	800b614 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099fa:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d024      	beq.n	8009a4c <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	1e5a      	subs	r2, r3, #1
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d104      	bne.n	8009a1c <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009a12:	f001 f9c1 	bl	800ad98 <pvTaskIncrementMutexHeldCount>
 8009a16:	4602      	mov	r2, r0
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00f      	beq.n	8009a44 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	3310      	adds	r3, #16
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 fed3 	bl	800a7d4 <xTaskRemoveFromEventList>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d007      	beq.n	8009a44 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a34:	4b4c      	ldr	r3, [pc, #304]	@ (8009b68 <xQueueSemaphoreTake+0x18c>)
 8009a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a44:	f001 fe02 	bl	800b64c <vPortExitCritical>
				return pdPASS;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e089      	b.n	8009b60 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d103      	bne.n	8009a5a <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a52:	f001 fdfb 	bl	800b64c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a56:	2300      	movs	r3, #0
 8009a58:	e082      	b.n	8009b60 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d106      	bne.n	8009a6e <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a60:	f107 030c 	add.w	r3, r7, #12
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 ff23 	bl	800a8b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a6e:	f001 fded 	bl	800b64c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a72:	f000 fcbf 	bl	800a3f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a76:	f001 fdcd 	bl	800b614 <vPortEnterCritical>
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a80:	b25b      	sxtb	r3, r3
 8009a82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a86:	d103      	bne.n	8009a90 <xQueueSemaphoreTake+0xb4>
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a96:	b25b      	sxtb	r3, r3
 8009a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a9c:	d103      	bne.n	8009aa6 <xQueueSemaphoreTake+0xca>
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009aa6:	f001 fdd1 	bl	800b64c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009aaa:	463a      	mov	r2, r7
 8009aac:	f107 030c 	add.w	r3, r7, #12
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 ff12 	bl	800a8dc <xTaskCheckForTimeOut>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d132      	bne.n	8009b24 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009abe:	69f8      	ldr	r0, [r7, #28]
 8009ac0:	f000 f9de 	bl	8009e80 <prvIsQueueEmpty>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d026      	beq.n	8009b18 <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d109      	bne.n	8009ae6 <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 8009ad2:	f001 fd9f 	bl	800b614 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f001 f848 	bl	800ab70 <xTaskPriorityInherit>
 8009ae0:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8009ae2:	f001 fdb3 	bl	800b64c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	3324      	adds	r3, #36	@ 0x24
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	4611      	mov	r1, r2
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 fe3c 	bl	800a76c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009af4:	69f8      	ldr	r0, [r7, #28]
 8009af6:	f000 f971 	bl	8009ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009afa:	f000 fc89 	bl	800a410 <xTaskResumeAll>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f47f af76 	bne.w	80099f2 <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 8009b06:	4b18      	ldr	r3, [pc, #96]	@ (8009b68 <xQueueSemaphoreTake+0x18c>)
 8009b08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	e76c      	b.n	80099f2 <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009b18:	69f8      	ldr	r0, [r7, #28]
 8009b1a:	f000 f95f 	bl	8009ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b1e:	f000 fc77 	bl	800a410 <xTaskResumeAll>
 8009b22:	e766      	b.n	80099f2 <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009b24:	69f8      	ldr	r0, [r7, #28]
 8009b26:	f000 f959 	bl	8009ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b2a:	f000 fc71 	bl	800a410 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b2e:	69f8      	ldr	r0, [r7, #28]
 8009b30:	f000 f9a6 	bl	8009e80 <prvIsQueueEmpty>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f43f af5b 	beq.w	80099f2 <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00d      	beq.n	8009b5e <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 8009b42:	f001 fd67 	bl	800b614 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009b46:	69f8      	ldr	r0, [r7, #28]
 8009b48:	f000 f8a0 	bl	8009c8c <prvGetDisinheritPriorityAfterTimeout>
 8009b4c:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	6979      	ldr	r1, [r7, #20]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f001 f8bf 	bl	800acd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009b5a:	f001 fd77 	bl	800b64c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3728      	adds	r7, #40	@ 0x28
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	e000ed04 	.word	0xe000ed04

08009b6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08c      	sub	sp, #48	@ 0x30
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b7c:	f001 fe06 	bl	800b78c <vPortValidateInterruptPriority>
	__asm volatile
 8009b80:	f3ef 8211 	mrs	r2, BASEPRI
 8009b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b88:	b672      	cpsid	i
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	b662      	cpsie	i
 8009b98:	61ba      	str	r2, [r7, #24]
 8009b9a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009b9c:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b9e:	627b      	str	r3, [r7, #36]	@ 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba4:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ba6:	6a3b      	ldr	r3, [r7, #32]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d02d      	beq.n	8009c08 <xQueueReceiveFromISR+0x9c>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bb2:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bb4:	68b9      	ldr	r1, [r7, #8]
 8009bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bb8:	f000 f8ea 	bl	8009d90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	1e5a      	subs	r2, r3, #1
 8009bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009bc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bcc:	d112      	bne.n	8009bf4 <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d015      	beq.n	8009c02 <xQueueReceiveFromISR+0x96>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd8:	3310      	adds	r3, #16
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 fdfa 	bl	800a7d4 <xTaskRemoveFromEventList>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00d      	beq.n	8009c02 <xQueueReceiveFromISR+0x96>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00a      	beq.n	8009c02 <xQueueReceiveFromISR+0x96>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	e006      	b.n	8009c02 <xQueueReceiveFromISR+0x96>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009bf4:	7ffb      	ldrb	r3, [r7, #31]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	b25a      	sxtb	r2, r3
 8009bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009c02:	2301      	movs	r3, #1
 8009c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c06:	e001      	b.n	8009c0c <xQueueReceiveFromISR+0xa0>
		}
		else
		{
			xReturn = pdFAIL;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f383 8811 	msr	BASEPRI, r3
}
 8009c16:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3730      	adds	r7, #48	@ 0x30
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 8009c2a:	f001 fcf3 	bl	800b614 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c32:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009c34:	f001 fd0a 	bl	800b64c <vPortExitCritical>

	return uxReturn;
 8009c38:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009c42:	b480      	push	{r7}
 8009c44:	b085      	sub	sp, #20
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c52:	60bb      	str	r3, [r7, #8]

	return uxReturn;
 8009c54:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009c56:	4618      	mov	r0, r3
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f000 f95e 	bl	8009f30 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d102      	bne.n	8009c84 <vQueueDelete+0x22>
		{
			vPortFree( pxQueue );
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f001 fe2e 	bl	800b8e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009c84:	bf00      	nop
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d006      	beq.n	8009caa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009ca6:	60fb      	str	r3, [r7, #12]
 8009ca8:	e001      	b.n	8009cae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009caa:	2300      	movs	r3, #0
 8009cac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009cae:	68fb      	ldr	r3, [r7, #12]
	}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10d      	bne.n	8009cf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d14d      	bne.n	8009d7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 ffaa 	bl	800ac40 <xTaskPriorityDisinherit>
 8009cec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	609a      	str	r2, [r3, #8]
 8009cf4:	e043      	b.n	8009d7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d119      	bne.n	8009d30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6858      	ldr	r0, [r3, #4]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d04:	461a      	mov	r2, r3
 8009d06:	68b9      	ldr	r1, [r7, #8]
 8009d08:	f01f fdaf 	bl	802986a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	685a      	ldr	r2, [r3, #4]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d14:	441a      	add	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d32b      	bcc.n	8009d7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	605a      	str	r2, [r3, #4]
 8009d2e:	e026      	b.n	8009d7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	68d8      	ldr	r0, [r3, #12]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d38:	461a      	mov	r2, r3
 8009d3a:	68b9      	ldr	r1, [r7, #8]
 8009d3c:	f01f fd95 	bl	802986a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	68da      	ldr	r2, [r3, #12]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d48:	425b      	negs	r3, r3
 8009d4a:	441a      	add	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d207      	bcs.n	8009d6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	689a      	ldr	r2, [r3, #8]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d64:	425b      	negs	r3, r3
 8009d66:	441a      	add	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d105      	bne.n	8009d7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009d86:	697b      	ldr	r3, [r7, #20]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d018      	beq.n	8009dd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68da      	ldr	r2, [r3, #12]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009daa:	441a      	add	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	68da      	ldr	r2, [r3, #12]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d303      	bcc.n	8009dc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68d9      	ldr	r1, [r3, #12]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dcc:	461a      	mov	r2, r3
 8009dce:	6838      	ldr	r0, [r7, #0]
 8009dd0:	f01f fd4b 	bl	802986a <memcpy>
	}
}
 8009dd4:	bf00      	nop
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009de4:	f001 fc16 	bl	800b614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009df0:	e011      	b.n	8009e16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d012      	beq.n	8009e20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3324      	adds	r3, #36	@ 0x24
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fce8 	bl	800a7d4 <xTaskRemoveFromEventList>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e0a:	f000 fdad 	bl	800a968 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	3b01      	subs	r3, #1
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	dce9      	bgt.n	8009df2 <prvUnlockQueue+0x16>
 8009e1e:	e000      	b.n	8009e22 <prvUnlockQueue+0x46>
					break;
 8009e20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	22ff      	movs	r2, #255	@ 0xff
 8009e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009e2a:	f001 fc0f 	bl	800b64c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e2e:	f001 fbf1 	bl	800b614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e3a:	e011      	b.n	8009e60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d012      	beq.n	8009e6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3310      	adds	r3, #16
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f000 fcc3 	bl	800a7d4 <xTaskRemoveFromEventList>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e54:	f000 fd88 	bl	800a968 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dce9      	bgt.n	8009e3c <prvUnlockQueue+0x60>
 8009e68:	e000      	b.n	8009e6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	22ff      	movs	r2, #255	@ 0xff
 8009e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009e74:	f001 fbea 	bl	800b64c <vPortExitCritical>
}
 8009e78:	bf00      	nop
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e88:	f001 fbc4 	bl	800b614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d102      	bne.n	8009e9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e94:	2301      	movs	r3, #1
 8009e96:	60fb      	str	r3, [r7, #12]
 8009e98:	e001      	b.n	8009e9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e9e:	f001 fbd5 	bl	800b64c <vPortExitCritical>

	return xReturn;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009eb4:	f001 fbae 	bl	800b614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d102      	bne.n	8009eca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	e001      	b.n	8009ece <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ece:	f001 fbbd 	bl	800b64c <vPortExitCritical>

	return xReturn;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60fb      	str	r3, [r7, #12]
 8009eea:	e014      	b.n	8009f16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009eec:	4a0f      	ldr	r2, [pc, #60]	@ (8009f2c <vQueueAddToRegistry+0x50>)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10b      	bne.n	8009f10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ef8:	490c      	ldr	r1, [pc, #48]	@ (8009f2c <vQueueAddToRegistry+0x50>)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f02:	4a0a      	ldr	r2, [pc, #40]	@ (8009f2c <vQueueAddToRegistry+0x50>)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	00db      	lsls	r3, r3, #3
 8009f08:	4413      	add	r3, r2
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f0e:	e006      	b.n	8009f1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3301      	adds	r3, #1
 8009f14:	60fb      	str	r3, [r7, #12]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2b07      	cmp	r3, #7
 8009f1a:	d9e7      	bls.n	8009eec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f1c:	bf00      	nop
 8009f1e:	bf00      	nop
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	2001e5c0 	.word	0x2001e5c0

08009f30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f38:	2300      	movs	r3, #0
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	e016      	b.n	8009f6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009f3e:	4a10      	ldr	r2, [pc, #64]	@ (8009f80 <vQueueUnregisterQueue+0x50>)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	4413      	add	r3, r2
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d10b      	bne.n	8009f66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8009f80 <vQueueUnregisterQueue+0x50>)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2100      	movs	r1, #0
 8009f54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009f58:	4a09      	ldr	r2, [pc, #36]	@ (8009f80 <vQueueUnregisterQueue+0x50>)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	00db      	lsls	r3, r3, #3
 8009f5e:	4413      	add	r3, r2
 8009f60:	2200      	movs	r2, #0
 8009f62:	605a      	str	r2, [r3, #4]
				break;
 8009f64:	e006      	b.n	8009f74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	60fb      	str	r3, [r7, #12]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b07      	cmp	r3, #7
 8009f70:	d9e5      	bls.n	8009f3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009f72:	bf00      	nop
 8009f74:	bf00      	nop
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	2001e5c0 	.word	0x2001e5c0

08009f84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f94:	f001 fb3e 	bl	800b614 <vPortEnterCritical>
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f9e:	b25b      	sxtb	r3, r3
 8009fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fa4:	d103      	bne.n	8009fae <vQueueWaitForMessageRestricted+0x2a>
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fb4:	b25b      	sxtb	r3, r3
 8009fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fba:	d103      	bne.n	8009fc4 <vQueueWaitForMessageRestricted+0x40>
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009fc4:	f001 fb42 	bl	800b64c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d106      	bne.n	8009fde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	3324      	adds	r3, #36	@ 0x24
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	68b9      	ldr	r1, [r7, #8]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f000 fbdd 	bl	800a798 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009fde:	6978      	ldr	r0, [r7, #20]
 8009fe0:	f7ff fefc 	bl	8009ddc <prvUnlockQueue>
	}
 8009fe4:	bf00      	nop
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08c      	sub	sp, #48	@ 0x30
 8009ff0:	af04      	add	r7, sp, #16
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
 8009ff8:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ffa:	23b8      	movs	r3, #184	@ 0xb8
 8009ffc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ffe:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a002:	2b00      	cmp	r3, #0
 800a004:	d01e      	beq.n	800a044 <xTaskCreateStatic+0x58>
 800a006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d01b      	beq.n	800a044 <xTaskCreateStatic+0x58>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a014:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	2202      	movs	r2, #2
 800a01a:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a01e:	2300      	movs	r3, #0
 800a020:	9303      	str	r3, [sp, #12]
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	9302      	str	r3, [sp, #8]
 800a026:	f107 0318 	add.w	r3, r7, #24
 800a02a:	9301      	str	r3, [sp, #4]
 800a02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	68b9      	ldr	r1, [r7, #8]
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f000 f850 	bl	800a0dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a03c:	69f8      	ldr	r0, [r7, #28]
 800a03e:	f000 f8e3 	bl	800a208 <prvAddNewTaskToReadyList>
 800a042:	e001      	b.n	800a048 <xTaskCreateStatic+0x5c>
		}
		else
		{
			xReturn = NULL;
 800a044:	2300      	movs	r3, #0
 800a046:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a048:	69bb      	ldr	r3, [r7, #24]
	}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3720      	adds	r7, #32
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a052:	b580      	push	{r7, lr}
 800a054:	b08c      	sub	sp, #48	@ 0x30
 800a056:	af04      	add	r7, sp, #16
 800a058:	60f8      	str	r0, [r7, #12]
 800a05a:	60b9      	str	r1, [r7, #8]
 800a05c:	603b      	str	r3, [r7, #0]
 800a05e:	4613      	mov	r3, r2
 800a060:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a062:	88fb      	ldrh	r3, [r7, #6]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4618      	mov	r0, r3
 800a068:	f001 fba6 	bl	800b7b8 <pvPortMalloc>
 800a06c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00e      	beq.n	800a092 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a074:	20b8      	movs	r0, #184	@ 0xb8
 800a076:	f001 fb9f 	bl	800b7b8 <pvPortMalloc>
 800a07a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d003      	beq.n	800a08a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	631a      	str	r2, [r3, #48]	@ 0x30
 800a088:	e005      	b.n	800a096 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a08a:	6978      	ldr	r0, [r7, #20]
 800a08c:	f001 fc28 	bl	800b8e0 <vPortFree>
 800a090:	e001      	b.n	800a096 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a092:	2300      	movs	r3, #0
 800a094:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d017      	beq.n	800a0cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0a4:	88fa      	ldrh	r2, [r7, #6]
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	9303      	str	r3, [sp, #12]
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	9302      	str	r3, [sp, #8]
 800a0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	68b9      	ldr	r1, [r7, #8]
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 f80e 	bl	800a0dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0c0:	69f8      	ldr	r0, [r7, #28]
 800a0c2:	f000 f8a1 	bl	800a208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	61bb      	str	r3, [r7, #24]
 800a0ca:	e002      	b.n	800a0d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0d2:	69bb      	ldr	r3, [r7, #24]
	}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3720      	adds	r7, #32
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
 800a0e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	21a5      	movs	r1, #165	@ 0xa5
 800a0f6:	f01f fa95 	bl	8029624 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800a104:	440b      	add	r3, r1
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	f023 0307 	bic.w	r3, r3, #7
 800a112:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d01f      	beq.n	800a15a <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a11a:	2300      	movs	r3, #0
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	e012      	b.n	800a146 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	4413      	add	r3, r2
 800a126:	7819      	ldrb	r1, [r3, #0]
 800a128:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	4413      	add	r3, r2
 800a12e:	3334      	adds	r3, #52	@ 0x34
 800a130:	460a      	mov	r2, r1
 800a132:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	4413      	add	r3, r2
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d006      	beq.n	800a14e <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	3301      	adds	r3, #1
 800a144:	617b      	str	r3, [r7, #20]
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	2b1d      	cmp	r3, #29
 800a14a:	d9e9      	bls.n	800a120 <prvInitialiseNewTask+0x44>
 800a14c:	e000      	b.n	800a150 <prvInitialiseNewTask+0x74>
			{
				break;
 800a14e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800a158:	e003      	b.n	800a162 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	2b37      	cmp	r3, #55	@ 0x37
 800a166:	d901      	bls.n	800a16c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a168:	2337      	movs	r3, #55	@ 0x37
 800a16a:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16e:	6a3a      	ldr	r2, [r7, #32]
 800a170:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a174:	6a3a      	ldr	r2, [r7, #32]
 800a176:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800a178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17a:	2200      	movs	r2, #0
 800a17c:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a180:	3304      	adds	r3, #4
 800a182:	4618      	mov	r0, r3
 800a184:	f7fe fff8 	bl	8009178 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18a:	3318      	adds	r3, #24
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fe fff3 	bl	8009178 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a196:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ba:	3364      	adds	r3, #100	@ 0x64
 800a1bc:	224c      	movs	r2, #76	@ 0x4c
 800a1be:	2100      	movs	r1, #0
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f01f fa2f 	bl	8029624 <memset>
 800a1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c8:	4a0c      	ldr	r2, [pc, #48]	@ (800a1fc <prvInitialiseNewTask+0x120>)
 800a1ca:	669a      	str	r2, [r3, #104]	@ 0x68
 800a1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ce:	4a0c      	ldr	r2, [pc, #48]	@ (800a200 <prvInitialiseNewTask+0x124>)
 800a1d0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d4:	4a0b      	ldr	r2, [pc, #44]	@ (800a204 <prvInitialiseNewTask+0x128>)
 800a1d6:	671a      	str	r2, [r3, #112]	@ 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	68f9      	ldr	r1, [r7, #12]
 800a1dc:	6938      	ldr	r0, [r7, #16]
 800a1de:	f001 f935 	bl	800b44c <pxPortInitialiseStack>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d002      	beq.n	800a1f4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1f4:	bf00      	nop
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20047234 	.word	0x20047234
 800a200:	2004729c 	.word	0x2004729c
 800a204:	20047304 	.word	0x20047304

0800a208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a210:	f001 fa00 	bl	800b614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a214:	4b2d      	ldr	r3, [pc, #180]	@ (800a2cc <prvAddNewTaskToReadyList+0xc4>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3301      	adds	r3, #1
 800a21a:	4a2c      	ldr	r2, [pc, #176]	@ (800a2cc <prvAddNewTaskToReadyList+0xc4>)
 800a21c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a21e:	4b2c      	ldr	r3, [pc, #176]	@ (800a2d0 <prvAddNewTaskToReadyList+0xc8>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d109      	bne.n	800a23a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a226:	4a2a      	ldr	r2, [pc, #168]	@ (800a2d0 <prvAddNewTaskToReadyList+0xc8>)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a22c:	4b27      	ldr	r3, [pc, #156]	@ (800a2cc <prvAddNewTaskToReadyList+0xc4>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d110      	bne.n	800a256 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a234:	f000 fbbc 	bl	800a9b0 <prvInitialiseTaskLists>
 800a238:	e00d      	b.n	800a256 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a23a:	4b26      	ldr	r3, [pc, #152]	@ (800a2d4 <prvAddNewTaskToReadyList+0xcc>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d109      	bne.n	800a256 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a242:	4b23      	ldr	r3, [pc, #140]	@ (800a2d0 <prvAddNewTaskToReadyList+0xc8>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d802      	bhi.n	800a256 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a250:	4a1f      	ldr	r2, [pc, #124]	@ (800a2d0 <prvAddNewTaskToReadyList+0xc8>)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a256:	4b20      	ldr	r3, [pc, #128]	@ (800a2d8 <prvAddNewTaskToReadyList+0xd0>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3301      	adds	r3, #1
 800a25c:	4a1e      	ldr	r2, [pc, #120]	@ (800a2d8 <prvAddNewTaskToReadyList+0xd0>)
 800a25e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a260:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d8 <prvAddNewTaskToReadyList+0xd0>)
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a26c:	4b1b      	ldr	r3, [pc, #108]	@ (800a2dc <prvAddNewTaskToReadyList+0xd4>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	429a      	cmp	r2, r3
 800a272:	d903      	bls.n	800a27c <prvAddNewTaskToReadyList+0x74>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a278:	4a18      	ldr	r2, [pc, #96]	@ (800a2dc <prvAddNewTaskToReadyList+0xd4>)
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a280:	4613      	mov	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4a15      	ldr	r2, [pc, #84]	@ (800a2e0 <prvAddNewTaskToReadyList+0xd8>)
 800a28a:	441a      	add	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3304      	adds	r3, #4
 800a290:	4619      	mov	r1, r3
 800a292:	4610      	mov	r0, r2
 800a294:	f7fe ff7d 	bl	8009192 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a298:	f001 f9d8 	bl	800b64c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a29c:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d4 <prvAddNewTaskToReadyList+0xcc>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00e      	beq.n	800a2c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d0 <prvAddNewTaskToReadyList+0xc8>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d207      	bcs.n	800a2c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a2e4 <prvAddNewTaskToReadyList+0xdc>)
 800a2b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2c2:	bf00      	nop
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	2001ead4 	.word	0x2001ead4
 800a2d0:	2001e600 	.word	0x2001e600
 800a2d4:	2001eae0 	.word	0x2001eae0
 800a2d8:	2001eaf0 	.word	0x2001eaf0
 800a2dc:	2001eadc 	.word	0x2001eadc
 800a2e0:	2001e604 	.word	0x2001e604
 800a2e4:	e000ed04 	.word	0xe000ed04

0800a2e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d008      	beq.n	800a30c <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800a2fa:	f000 f87b 	bl	800a3f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a2fe:	2100      	movs	r1, #0
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 fd5d 	bl	800adc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a306:	f000 f883 	bl	800a410 <xTaskResumeAll>
 800a30a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d107      	bne.n	800a322 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 800a312:	4b06      	ldr	r3, [pc, #24]	@ (800a32c <vTaskDelay+0x44>)
 800a314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a318:	601a      	str	r2, [r3, #0]
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a322:	bf00      	nop
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	e000ed04 	.word	0xe000ed04

0800a330 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b08a      	sub	sp, #40	@ 0x28
 800a334:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a336:	2300      	movs	r3, #0
 800a338:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a33a:	2300      	movs	r3, #0
 800a33c:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a33e:	1d3a      	adds	r2, r7, #4
 800a340:	f107 0108 	add.w	r1, r7, #8
 800a344:	f107 030c 	add.w	r3, r7, #12
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fe fec1 	bl	80090d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a34e:	6879      	ldr	r1, [r7, #4]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	9202      	str	r2, [sp, #8]
 800a356:	9301      	str	r3, [sp, #4]
 800a358:	2300      	movs	r3, #0
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	2300      	movs	r3, #0
 800a35e:	460a      	mov	r2, r1
 800a360:	491c      	ldr	r1, [pc, #112]	@ (800a3d4 <vTaskStartScheduler+0xa4>)
 800a362:	481d      	ldr	r0, [pc, #116]	@ (800a3d8 <vTaskStartScheduler+0xa8>)
 800a364:	f7ff fe42 	bl	8009fec <xTaskCreateStatic>
 800a368:	4603      	mov	r3, r0
 800a36a:	4a1c      	ldr	r2, [pc, #112]	@ (800a3dc <vTaskStartScheduler+0xac>)
 800a36c:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a36e:	4b1b      	ldr	r3, [pc, #108]	@ (800a3dc <vTaskStartScheduler+0xac>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 800a376:	2301      	movs	r3, #1
 800a378:	617b      	str	r3, [r7, #20]
 800a37a:	e001      	b.n	800a380 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 800a37c:	2300      	movs	r3, #0
 800a37e:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d102      	bne.n	800a38c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800a386:	f000 fd6f 	bl	800ae68 <xTimerCreateTimerTask>
 800a38a:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d11c      	bne.n	800a3cc <vTaskStartScheduler+0x9c>
	__asm volatile
 800a392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a396:	b672      	cpsid	i
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	b662      	cpsie	i
 800a3a6:	613b      	str	r3, [r7, #16]
}
 800a3a8:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e0 <vTaskStartScheduler+0xb0>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	3364      	adds	r3, #100	@ 0x64
 800a3b0:	4a0c      	ldr	r2, [pc, #48]	@ (800a3e4 <vTaskStartScheduler+0xb4>)
 800a3b2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a3b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e8 <vTaskStartScheduler+0xb8>)
 800a3b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a3bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a3ec <vTaskStartScheduler+0xbc>)
 800a3be:	2201      	movs	r2, #1
 800a3c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a3c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a3f0 <vTaskStartScheduler+0xc0>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a3c8:	f001 f8ba 	bl	800b540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a3cc:	bf00      	nop
 800a3ce:	3718      	adds	r7, #24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	0802b688 	.word	0x0802b688
 800a3d8:	0800a981 	.word	0x0800a981
 800a3dc:	2001eaf8 	.word	0x2001eaf8
 800a3e0:	2001e600 	.word	0x2001e600
 800a3e4:	200002b4 	.word	0x200002b4
 800a3e8:	2001eaf4 	.word	0x2001eaf4
 800a3ec:	2001eae0 	.word	0x2001eae0
 800a3f0:	2001ead8 	.word	0x2001ead8

0800a3f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a3f8:	4b04      	ldr	r3, [pc, #16]	@ (800a40c <vTaskSuspendAll+0x18>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	4a03      	ldr	r2, [pc, #12]	@ (800a40c <vTaskSuspendAll+0x18>)
 800a400:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a402:	bf00      	nop
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr
 800a40c:	2001eafc 	.word	0x2001eafc

0800a410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a416:	2300      	movs	r3, #0
 800a418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a41a:	2300      	movs	r3, #0
 800a41c:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a41e:	f001 f8f9 	bl	800b614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a422:	4b39      	ldr	r3, [pc, #228]	@ (800a508 <xTaskResumeAll+0xf8>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	3b01      	subs	r3, #1
 800a428:	4a37      	ldr	r2, [pc, #220]	@ (800a508 <xTaskResumeAll+0xf8>)
 800a42a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a42c:	4b36      	ldr	r3, [pc, #216]	@ (800a508 <xTaskResumeAll+0xf8>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d162      	bne.n	800a4fa <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a434:	4b35      	ldr	r3, [pc, #212]	@ (800a50c <xTaskResumeAll+0xfc>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d05e      	beq.n	800a4fa <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a43c:	e02f      	b.n	800a49e <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a43e:	4b34      	ldr	r3, [pc, #208]	@ (800a510 <xTaskResumeAll+0x100>)
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3318      	adds	r3, #24
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fefe 	bl	800924c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	3304      	adds	r3, #4
 800a454:	4618      	mov	r0, r3
 800a456:	f7fe fef9 	bl	800924c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a45e:	4b2d      	ldr	r3, [pc, #180]	@ (800a514 <xTaskResumeAll+0x104>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	429a      	cmp	r2, r3
 800a464:	d903      	bls.n	800a46e <xTaskResumeAll+0x5e>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46a:	4a2a      	ldr	r2, [pc, #168]	@ (800a514 <xTaskResumeAll+0x104>)
 800a46c:	6013      	str	r3, [r2, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a472:	4613      	mov	r3, r2
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	4413      	add	r3, r2
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4a27      	ldr	r2, [pc, #156]	@ (800a518 <xTaskResumeAll+0x108>)
 800a47c:	441a      	add	r2, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3304      	adds	r3, #4
 800a482:	4619      	mov	r1, r3
 800a484:	4610      	mov	r0, r2
 800a486:	f7fe fe84 	bl	8009192 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a48e:	4b23      	ldr	r3, [pc, #140]	@ (800a51c <xTaskResumeAll+0x10c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a494:	429a      	cmp	r2, r3
 800a496:	d302      	bcc.n	800a49e <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 800a498:	4b21      	ldr	r3, [pc, #132]	@ (800a520 <xTaskResumeAll+0x110>)
 800a49a:	2201      	movs	r2, #1
 800a49c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a49e:	4b1c      	ldr	r3, [pc, #112]	@ (800a510 <xTaskResumeAll+0x100>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1cb      	bne.n	800a43e <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d001      	beq.n	800a4b0 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a4ac:	f000 fb12 	bl	800aad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a4b0:	4b1c      	ldr	r3, [pc, #112]	@ (800a524 <xTaskResumeAll+0x114>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d010      	beq.n	800a4de <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a4bc:	f000 f858 	bl	800a570 <xTaskIncrementTick>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 800a4c6:	4b16      	ldr	r3, [pc, #88]	@ (800a520 <xTaskResumeAll+0x110>)
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1f1      	bne.n	800a4bc <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
 800a4d8:	4b12      	ldr	r3, [pc, #72]	@ (800a524 <xTaskResumeAll+0x114>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a4de:	4b10      	ldr	r3, [pc, #64]	@ (800a520 <xTaskResumeAll+0x110>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d009      	beq.n	800a4fa <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a4ea:	4b0f      	ldr	r3, [pc, #60]	@ (800a528 <xTaskResumeAll+0x118>)
 800a4ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4f0:	601a      	str	r2, [r3, #0]
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4fa:	f001 f8a7 	bl	800b64c <vPortExitCritical>

	return xAlreadyYielded;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	2001eafc 	.word	0x2001eafc
 800a50c:	2001ead4 	.word	0x2001ead4
 800a510:	2001ea94 	.word	0x2001ea94
 800a514:	2001eadc 	.word	0x2001eadc
 800a518:	2001e604 	.word	0x2001e604
 800a51c:	2001e600 	.word	0x2001e600
 800a520:	2001eae8 	.word	0x2001eae8
 800a524:	2001eae4 	.word	0x2001eae4
 800a528:	e000ed04 	.word	0xe000ed04

0800a52c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a532:	4b05      	ldr	r3, [pc, #20]	@ (800a548 <xTaskGetTickCount+0x1c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a538:	687b      	ldr	r3, [r7, #4]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	2001ead8 	.word	0x2001ead8

0800a54c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a552:	f001 f91b 	bl	800b78c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a556:	2300      	movs	r3, #0
 800a558:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a55a:	4b04      	ldr	r3, [pc, #16]	@ (800a56c <xTaskGetTickCountFromISR+0x20>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a560:	683b      	ldr	r3, [r7, #0]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	2001ead8 	.word	0x2001ead8

0800a570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a576:	2300      	movs	r3, #0
 800a578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a57a:	4b46      	ldr	r3, [pc, #280]	@ (800a694 <xTaskIncrementTick+0x124>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d178      	bne.n	800a674 <xTaskIncrementTick+0x104>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a582:	4b45      	ldr	r3, [pc, #276]	@ (800a698 <xTaskIncrementTick+0x128>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	3301      	adds	r3, #1
 800a588:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a58a:	4a43      	ldr	r2, [pc, #268]	@ (800a698 <xTaskIncrementTick+0x128>)
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d110      	bne.n	800a5b8 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 800a596:	4b41      	ldr	r3, [pc, #260]	@ (800a69c <xTaskIncrementTick+0x12c>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	4b40      	ldr	r3, [pc, #256]	@ (800a6a0 <xTaskIncrementTick+0x130>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a3e      	ldr	r2, [pc, #248]	@ (800a69c <xTaskIncrementTick+0x12c>)
 800a5a2:	6013      	str	r3, [r2, #0]
 800a5a4:	4a3e      	ldr	r2, [pc, #248]	@ (800a6a0 <xTaskIncrementTick+0x130>)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6013      	str	r3, [r2, #0]
 800a5aa:	4b3e      	ldr	r3, [pc, #248]	@ (800a6a4 <xTaskIncrementTick+0x134>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	4a3c      	ldr	r2, [pc, #240]	@ (800a6a4 <xTaskIncrementTick+0x134>)
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	f000 fa8e 	bl	800aad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a5b8:	4b3b      	ldr	r3, [pc, #236]	@ (800a6a8 <xTaskIncrementTick+0x138>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d349      	bcc.n	800a656 <xTaskIncrementTick+0xe6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5c2:	4b36      	ldr	r3, [pc, #216]	@ (800a69c <xTaskIncrementTick+0x12c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d104      	bne.n	800a5d6 <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5cc:	4b36      	ldr	r3, [pc, #216]	@ (800a6a8 <xTaskIncrementTick+0x138>)
 800a5ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5d2:	601a      	str	r2, [r3, #0]
					break;
 800a5d4:	e03f      	b.n	800a656 <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5d6:	4b31      	ldr	r3, [pc, #196]	@ (800a69c <xTaskIncrementTick+0x12c>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a5e6:	693a      	ldr	r2, [r7, #16]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d203      	bcs.n	800a5f6 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a5ee:	4a2e      	ldr	r2, [pc, #184]	@ (800a6a8 <xTaskIncrementTick+0x138>)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5f4:	e02f      	b.n	800a656 <xTaskIncrementTick+0xe6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fe fe26 	bl	800924c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a604:	2b00      	cmp	r3, #0
 800a606:	d004      	beq.n	800a612 <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	3318      	adds	r3, #24
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fe fe1d 	bl	800924c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a616:	4b25      	ldr	r3, [pc, #148]	@ (800a6ac <xTaskIncrementTick+0x13c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d903      	bls.n	800a626 <xTaskIncrementTick+0xb6>
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a622:	4a22      	ldr	r2, [pc, #136]	@ (800a6ac <xTaskIncrementTick+0x13c>)
 800a624:	6013      	str	r3, [r2, #0]
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a62a:	4613      	mov	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4413      	add	r3, r2
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	4a1f      	ldr	r2, [pc, #124]	@ (800a6b0 <xTaskIncrementTick+0x140>)
 800a634:	441a      	add	r2, r3
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	3304      	adds	r3, #4
 800a63a:	4619      	mov	r1, r3
 800a63c:	4610      	mov	r0, r2
 800a63e:	f7fe fda8 	bl	8009192 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a646:	4b1b      	ldr	r3, [pc, #108]	@ (800a6b4 <xTaskIncrementTick+0x144>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d3b8      	bcc.n	800a5c2 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 800a650:	2301      	movs	r3, #1
 800a652:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a654:	e7b5      	b.n	800a5c2 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a656:	4b17      	ldr	r3, [pc, #92]	@ (800a6b4 <xTaskIncrementTick+0x144>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a65c:	4914      	ldr	r1, [pc, #80]	@ (800a6b0 <xTaskIncrementTick+0x140>)
 800a65e:	4613      	mov	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	4413      	add	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	440b      	add	r3, r1
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d907      	bls.n	800a67e <xTaskIncrementTick+0x10e>
			{
				xSwitchRequired = pdTRUE;
 800a66e:	2301      	movs	r3, #1
 800a670:	617b      	str	r3, [r7, #20]
 800a672:	e004      	b.n	800a67e <xTaskIncrementTick+0x10e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a674:	4b10      	ldr	r3, [pc, #64]	@ (800a6b8 <xTaskIncrementTick+0x148>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	3301      	adds	r3, #1
 800a67a:	4a0f      	ldr	r2, [pc, #60]	@ (800a6b8 <xTaskIncrementTick+0x148>)
 800a67c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a67e:	4b0f      	ldr	r3, [pc, #60]	@ (800a6bc <xTaskIncrementTick+0x14c>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <xTaskIncrementTick+0x11a>
		{
			xSwitchRequired = pdTRUE;
 800a686:	2301      	movs	r3, #1
 800a688:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a68a:	697b      	ldr	r3, [r7, #20]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3718      	adds	r7, #24
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	2001eafc 	.word	0x2001eafc
 800a698:	2001ead8 	.word	0x2001ead8
 800a69c:	2001ea8c 	.word	0x2001ea8c
 800a6a0:	2001ea90 	.word	0x2001ea90
 800a6a4:	2001eaec 	.word	0x2001eaec
 800a6a8:	2001eaf4 	.word	0x2001eaf4
 800a6ac:	2001eadc 	.word	0x2001eadc
 800a6b0:	2001e604 	.word	0x2001e604
 800a6b4:	2001e600 	.word	0x2001e600
 800a6b8:	2001eae4 	.word	0x2001eae4
 800a6bc:	2001eae8 	.word	0x2001eae8

0800a6c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6c6:	4b23      	ldr	r3, [pc, #140]	@ (800a754 <vTaskSwitchContext+0x94>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a6ce:	4b22      	ldr	r3, [pc, #136]	@ (800a758 <vTaskSwitchContext+0x98>)
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a6d4:	e038      	b.n	800a748 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 800a6d6:	4b20      	ldr	r3, [pc, #128]	@ (800a758 <vTaskSwitchContext+0x98>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6dc:	4b1f      	ldr	r3, [pc, #124]	@ (800a75c <vTaskSwitchContext+0x9c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	607b      	str	r3, [r7, #4]
 800a6e2:	e002      	b.n	800a6ea <vTaskSwitchContext+0x2a>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	607b      	str	r3, [r7, #4]
 800a6ea:	491d      	ldr	r1, [pc, #116]	@ (800a760 <vTaskSwitchContext+0xa0>)
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	440b      	add	r3, r1
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d0f2      	beq.n	800a6e4 <vTaskSwitchContext+0x24>
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	4613      	mov	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4413      	add	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4a15      	ldr	r2, [pc, #84]	@ (800a760 <vTaskSwitchContext+0xa0>)
 800a70a:	4413      	add	r3, r2
 800a70c:	603b      	str	r3, [r7, #0]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	605a      	str	r2, [r3, #4]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	3308      	adds	r3, #8
 800a720:	429a      	cmp	r2, r3
 800a722:	d104      	bne.n	800a72e <vTaskSwitchContext+0x6e>
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	685a      	ldr	r2, [r3, #4]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	605a      	str	r2, [r3, #4]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	4a0b      	ldr	r2, [pc, #44]	@ (800a764 <vTaskSwitchContext+0xa4>)
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	4a08      	ldr	r2, [pc, #32]	@ (800a75c <vTaskSwitchContext+0x9c>)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a73e:	4b09      	ldr	r3, [pc, #36]	@ (800a764 <vTaskSwitchContext+0xa4>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3364      	adds	r3, #100	@ 0x64
 800a744:	4a08      	ldr	r2, [pc, #32]	@ (800a768 <vTaskSwitchContext+0xa8>)
 800a746:	6013      	str	r3, [r2, #0]
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	2001eafc 	.word	0x2001eafc
 800a758:	2001eae8 	.word	0x2001eae8
 800a75c:	2001eadc 	.word	0x2001eadc
 800a760:	2001e604 	.word	0x2001e604
 800a764:	2001e600 	.word	0x2001e600
 800a768:	200002b4 	.word	0x200002b4

0800a76c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a776:	4b07      	ldr	r3, [pc, #28]	@ (800a794 <vTaskPlaceOnEventList+0x28>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	3318      	adds	r3, #24
 800a77c:	4619      	mov	r1, r3
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f7fe fd2b 	bl	80091da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a784:	2101      	movs	r1, #1
 800a786:	6838      	ldr	r0, [r7, #0]
 800a788:	f000 fb1a 	bl	800adc0 <prvAddCurrentTaskToDelayedList>
}
 800a78c:	bf00      	nop
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	2001e600 	.word	0x2001e600

0800a798 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d0 <vTaskPlaceOnEventListRestricted+0x38>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3318      	adds	r3, #24
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f7fe fcf0 	bl	8009192 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d002      	beq.n	800a7be <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 800a7b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a7bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a7be:	6879      	ldr	r1, [r7, #4]
 800a7c0:	68b8      	ldr	r0, [r7, #8]
 800a7c2:	f000 fafd 	bl	800adc0 <prvAddCurrentTaskToDelayedList>
	}
 800a7c6:	bf00      	nop
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	2001e600 	.word	0x2001e600

0800a7d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	3318      	adds	r3, #24
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fe fd2f 	bl	800924c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7ee:	4b1e      	ldr	r3, [pc, #120]	@ (800a868 <xTaskRemoveFromEventList+0x94>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d11d      	bne.n	800a832 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fe fd26 	bl	800924c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a804:	4b19      	ldr	r3, [pc, #100]	@ (800a86c <xTaskRemoveFromEventList+0x98>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d903      	bls.n	800a814 <xTaskRemoveFromEventList+0x40>
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a810:	4a16      	ldr	r2, [pc, #88]	@ (800a86c <xTaskRemoveFromEventList+0x98>)
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a818:	4613      	mov	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4a13      	ldr	r2, [pc, #76]	@ (800a870 <xTaskRemoveFromEventList+0x9c>)
 800a822:	441a      	add	r2, r3
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	3304      	adds	r3, #4
 800a828:	4619      	mov	r1, r3
 800a82a:	4610      	mov	r0, r2
 800a82c:	f7fe fcb1 	bl	8009192 <vListInsertEnd>
 800a830:	e005      	b.n	800a83e <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	3318      	adds	r3, #24
 800a836:	4619      	mov	r1, r3
 800a838:	480e      	ldr	r0, [pc, #56]	@ (800a874 <xTaskRemoveFromEventList+0xa0>)
 800a83a:	f7fe fcaa 	bl	8009192 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a842:	4b0d      	ldr	r3, [pc, #52]	@ (800a878 <xTaskRemoveFromEventList+0xa4>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a848:	429a      	cmp	r2, r3
 800a84a:	d905      	bls.n	800a858 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a84c:	2301      	movs	r3, #1
 800a84e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a850:	4b0a      	ldr	r3, [pc, #40]	@ (800a87c <xTaskRemoveFromEventList+0xa8>)
 800a852:	2201      	movs	r2, #1
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	e001      	b.n	800a85c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 800a858:	2300      	movs	r3, #0
 800a85a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800a85c:	68fb      	ldr	r3, [r7, #12]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	2001eafc 	.word	0x2001eafc
 800a86c:	2001eadc 	.word	0x2001eadc
 800a870:	2001e604 	.word	0x2001e604
 800a874:	2001ea94 	.word	0x2001ea94
 800a878:	2001e600 	.word	0x2001e600
 800a87c:	2001eae8 	.word	0x2001eae8

0800a880 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 800a888:	f000 fec4 	bl	800b614 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a88c:	4b06      	ldr	r3, [pc, #24]	@ (800a8a8 <vTaskSetTimeOutState+0x28>)
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a894:	4b05      	ldr	r3, [pc, #20]	@ (800a8ac <vTaskSetTimeOutState+0x2c>)
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a89c:	f000 fed6 	bl	800b64c <vPortExitCritical>
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	2001eaec 	.word	0x2001eaec
 800a8ac:	2001ead8 	.word	0x2001ead8

0800a8b0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a8b8:	4b06      	ldr	r3, [pc, #24]	@ (800a8d4 <vTaskInternalSetTimeOutState+0x24>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a8c0:	4b05      	ldr	r3, [pc, #20]	@ (800a8d8 <vTaskInternalSetTimeOutState+0x28>)
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	605a      	str	r2, [r3, #4]
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	2001eaec 	.word	0x2001eaec
 800a8d8:	2001ead8 	.word	0x2001ead8

0800a8dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 800a8e6:	f000 fe95 	bl	800b614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8ea:	4b1d      	ldr	r3, [pc, #116]	@ (800a960 <xTaskCheckForTimeOut+0x84>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a902:	d102      	bne.n	800a90a <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a904:	2300      	movs	r3, #0
 800a906:	617b      	str	r3, [r7, #20]
 800a908:	e023      	b.n	800a952 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	4b15      	ldr	r3, [pc, #84]	@ (800a964 <xTaskCheckForTimeOut+0x88>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	429a      	cmp	r2, r3
 800a914:	d007      	beq.n	800a926 <xTaskCheckForTimeOut+0x4a>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	693a      	ldr	r2, [r7, #16]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d302      	bcc.n	800a926 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a920:	2301      	movs	r3, #1
 800a922:	617b      	str	r3, [r7, #20]
 800a924:	e015      	b.n	800a952 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d20b      	bcs.n	800a948 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	1ad2      	subs	r2, r2, r3
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff ffb7 	bl	800a8b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a942:	2300      	movs	r3, #0
 800a944:	617b      	str	r3, [r7, #20]
 800a946:	e004      	b.n	800a952 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	2200      	movs	r2, #0
 800a94c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a94e:	2301      	movs	r3, #1
 800a950:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800a952:	f000 fe7b 	bl	800b64c <vPortExitCritical>

	return xReturn;
 800a956:	697b      	ldr	r3, [r7, #20]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3718      	adds	r7, #24
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	2001ead8 	.word	0x2001ead8
 800a964:	2001eaec 	.word	0x2001eaec

0800a968 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a968:	b480      	push	{r7}
 800a96a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a96c:	4b03      	ldr	r3, [pc, #12]	@ (800a97c <vTaskMissedYield+0x14>)
 800a96e:	2201      	movs	r2, #1
 800a970:	601a      	str	r2, [r3, #0]
}
 800a972:	bf00      	nop
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	2001eae8 	.word	0x2001eae8

0800a980 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a988:	f000 f852 	bl	800aa30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a98c:	4b06      	ldr	r3, [pc, #24]	@ (800a9a8 <prvIdleTask+0x28>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d9f9      	bls.n	800a988 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a994:	4b05      	ldr	r3, [pc, #20]	@ (800a9ac <prvIdleTask+0x2c>)
 800a996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a99a:	601a      	str	r2, [r3, #0]
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a9a4:	e7f0      	b.n	800a988 <prvIdleTask+0x8>
 800a9a6:	bf00      	nop
 800a9a8:	2001e604 	.word	0x2001e604
 800a9ac:	e000ed04 	.word	0xe000ed04

0800a9b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	607b      	str	r3, [r7, #4]
 800a9ba:	e00c      	b.n	800a9d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	4413      	add	r3, r2
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4a12      	ldr	r2, [pc, #72]	@ (800aa10 <prvInitialiseTaskLists+0x60>)
 800a9c8:	4413      	add	r3, r2
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe fbb4 	bl	8009138 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	607b      	str	r3, [r7, #4]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2b37      	cmp	r3, #55	@ 0x37
 800a9da:	d9ef      	bls.n	800a9bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9dc:	480d      	ldr	r0, [pc, #52]	@ (800aa14 <prvInitialiseTaskLists+0x64>)
 800a9de:	f7fe fbab 	bl	8009138 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9e2:	480d      	ldr	r0, [pc, #52]	@ (800aa18 <prvInitialiseTaskLists+0x68>)
 800a9e4:	f7fe fba8 	bl	8009138 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9e8:	480c      	ldr	r0, [pc, #48]	@ (800aa1c <prvInitialiseTaskLists+0x6c>)
 800a9ea:	f7fe fba5 	bl	8009138 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9ee:	480c      	ldr	r0, [pc, #48]	@ (800aa20 <prvInitialiseTaskLists+0x70>)
 800a9f0:	f7fe fba2 	bl	8009138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9f4:	480b      	ldr	r0, [pc, #44]	@ (800aa24 <prvInitialiseTaskLists+0x74>)
 800a9f6:	f7fe fb9f 	bl	8009138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9fa:	4b0b      	ldr	r3, [pc, #44]	@ (800aa28 <prvInitialiseTaskLists+0x78>)
 800a9fc:	4a05      	ldr	r2, [pc, #20]	@ (800aa14 <prvInitialiseTaskLists+0x64>)
 800a9fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa00:	4b0a      	ldr	r3, [pc, #40]	@ (800aa2c <prvInitialiseTaskLists+0x7c>)
 800aa02:	4a05      	ldr	r2, [pc, #20]	@ (800aa18 <prvInitialiseTaskLists+0x68>)
 800aa04:	601a      	str	r2, [r3, #0]
}
 800aa06:	bf00      	nop
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	2001e604 	.word	0x2001e604
 800aa14:	2001ea64 	.word	0x2001ea64
 800aa18:	2001ea78 	.word	0x2001ea78
 800aa1c:	2001ea94 	.word	0x2001ea94
 800aa20:	2001eaa8 	.word	0x2001eaa8
 800aa24:	2001eac0 	.word	0x2001eac0
 800aa28:	2001ea8c 	.word	0x2001ea8c
 800aa2c:	2001ea90 	.word	0x2001ea90

0800aa30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa36:	e019      	b.n	800aa6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa38:	f000 fdec 	bl	800b614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa3c:	4b10      	ldr	r3, [pc, #64]	@ (800aa80 <prvCheckTasksWaitingTermination+0x50>)
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	3304      	adds	r3, #4
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fbff 	bl	800924c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa4e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa84 <prvCheckTasksWaitingTermination+0x54>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	4a0b      	ldr	r2, [pc, #44]	@ (800aa84 <prvCheckTasksWaitingTermination+0x54>)
 800aa56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa58:	4b0b      	ldr	r3, [pc, #44]	@ (800aa88 <prvCheckTasksWaitingTermination+0x58>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	4a0a      	ldr	r2, [pc, #40]	@ (800aa88 <prvCheckTasksWaitingTermination+0x58>)
 800aa60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa62:	f000 fdf3 	bl	800b64c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f810 	bl	800aa8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa6c:	4b06      	ldr	r3, [pc, #24]	@ (800aa88 <prvCheckTasksWaitingTermination+0x58>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e1      	bne.n	800aa38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	2001eaa8 	.word	0x2001eaa8
 800aa84:	2001ead4 	.word	0x2001ead4
 800aa88:	2001eabc 	.word	0x2001eabc

0800aa8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	3364      	adds	r3, #100	@ 0x64
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f01e fe15 	bl	80296c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d108      	bne.n	800aaba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 ff17 	bl	800b8e0 <vPortFree>
				vPortFree( pxTCB );
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 ff14 	bl	800b8e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aab8:	e007      	b.n	800aaca <prvDeleteTCB+0x3e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d102      	bne.n	800aaca <prvDeleteTCB+0x3e>
				vPortFree( pxTCB );
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 ff0b 	bl	800b8e0 <vPortFree>
	}
 800aaca:	bf00      	nop
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
	...

0800aad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aada:	4b0c      	ldr	r3, [pc, #48]	@ (800ab0c <prvResetNextTaskUnblockTime+0x38>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d104      	bne.n	800aaee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aae4:	4b0a      	ldr	r3, [pc, #40]	@ (800ab10 <prvResetNextTaskUnblockTime+0x3c>)
 800aae6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aaea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aaec:	e008      	b.n	800ab00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaee:	4b07      	ldr	r3, [pc, #28]	@ (800ab0c <prvResetNextTaskUnblockTime+0x38>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	4a04      	ldr	r2, [pc, #16]	@ (800ab10 <prvResetNextTaskUnblockTime+0x3c>)
 800aafe:	6013      	str	r3, [r2, #0]
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	2001ea8c 	.word	0x2001ea8c
 800ab10:	2001eaf4 	.word	0x2001eaf4

0800ab14 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ab1a:	4b05      	ldr	r3, [pc, #20]	@ (800ab30 <xTaskGetCurrentTaskHandle+0x1c>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ab20:	687b      	ldr	r3, [r7, #4]
	}
 800ab22:	4618      	mov	r0, r3
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	2001e600 	.word	0x2001e600

0800ab34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ab68 <xTaskGetSchedulerState+0x34>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d102      	bne.n	800ab48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab42:	2301      	movs	r3, #1
 800ab44:	607b      	str	r3, [r7, #4]
 800ab46:	e008      	b.n	800ab5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab48:	4b08      	ldr	r3, [pc, #32]	@ (800ab6c <xTaskGetSchedulerState+0x38>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d102      	bne.n	800ab56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab50:	2302      	movs	r3, #2
 800ab52:	607b      	str	r3, [r7, #4]
 800ab54:	e001      	b.n	800ab5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab56:	2300      	movs	r3, #0
 800ab58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab5a:	687b      	ldr	r3, [r7, #4]
	}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	2001eae0 	.word	0x2001eae0
 800ab6c:	2001eafc 	.word	0x2001eafc

0800ab70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d051      	beq.n	800ac2a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab8a:	4b2a      	ldr	r3, [pc, #168]	@ (800ac34 <xTaskPriorityInherit+0xc4>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d241      	bcs.n	800ac18 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	db06      	blt.n	800abaa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab9c:	4b25      	ldr	r3, [pc, #148]	@ (800ac34 <xTaskPriorityInherit+0xc4>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aba2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	6959      	ldr	r1, [r3, #20]
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abb2:	4613      	mov	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4a1f      	ldr	r2, [pc, #124]	@ (800ac38 <xTaskPriorityInherit+0xc8>)
 800abbc:	4413      	add	r3, r2
 800abbe:	4299      	cmp	r1, r3
 800abc0:	d122      	bne.n	800ac08 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	3304      	adds	r3, #4
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fe fb40 	bl	800924c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abcc:	4b19      	ldr	r3, [pc, #100]	@ (800ac34 <xTaskPriorityInherit+0xc4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abda:	4b18      	ldr	r3, [pc, #96]	@ (800ac3c <xTaskPriorityInherit+0xcc>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d903      	bls.n	800abea <xTaskPriorityInherit+0x7a>
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abe6:	4a15      	ldr	r2, [pc, #84]	@ (800ac3c <xTaskPriorityInherit+0xcc>)
 800abe8:	6013      	str	r3, [r2, #0]
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abee:	4613      	mov	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4a10      	ldr	r2, [pc, #64]	@ (800ac38 <xTaskPriorityInherit+0xc8>)
 800abf8:	441a      	add	r2, r3
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	3304      	adds	r3, #4
 800abfe:	4619      	mov	r1, r3
 800ac00:	4610      	mov	r0, r2
 800ac02:	f7fe fac6 	bl	8009192 <vListInsertEnd>
 800ac06:	e004      	b.n	800ac12 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac08:	4b0a      	ldr	r3, [pc, #40]	@ (800ac34 <xTaskPriorityInherit+0xc4>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ac12:	2301      	movs	r3, #1
 800ac14:	60fb      	str	r3, [r7, #12]
 800ac16:	e008      	b.n	800ac2a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ac1c:	4b05      	ldr	r3, [pc, #20]	@ (800ac34 <xTaskPriorityInherit+0xc4>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d201      	bcs.n	800ac2a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ac26:	2301      	movs	r3, #1
 800ac28:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
	}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	2001e600 	.word	0x2001e600
 800ac38:	2001e604 	.word	0x2001e604
 800ac3c:	2001eadc 	.word	0x2001eadc

0800ac40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d037      	beq.n	800acc6 <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac5a:	1e5a      	subs	r2, r3, #1
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d02c      	beq.n	800acc6 <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d128      	bne.n	800acc6 <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	3304      	adds	r3, #4
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7fe fae7 	bl	800924c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac96:	4b0e      	ldr	r3, [pc, #56]	@ (800acd0 <xTaskPriorityDisinherit+0x90>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d903      	bls.n	800aca6 <xTaskPriorityDisinherit+0x66>
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca2:	4a0b      	ldr	r2, [pc, #44]	@ (800acd0 <xTaskPriorityDisinherit+0x90>)
 800aca4:	6013      	str	r3, [r2, #0]
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4a08      	ldr	r2, [pc, #32]	@ (800acd4 <xTaskPriorityDisinherit+0x94>)
 800acb4:	441a      	add	r2, r3
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	3304      	adds	r3, #4
 800acba:	4619      	mov	r1, r3
 800acbc:	4610      	mov	r0, r2
 800acbe:	f7fe fa68 	bl	8009192 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800acc2:	2301      	movs	r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acc6:	68fb      	ldr	r3, [r7, #12]
	}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	2001eadc 	.word	0x2001eadc
 800acd4:	2001e604 	.word	0x2001e604

0800acd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ace6:	2301      	movs	r3, #1
 800ace8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d04b      	beq.n	800ad88 <vTaskPriorityDisinheritAfterTimeout+0xb0>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d902      	bls.n	800ad00 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	617b      	str	r3, [r7, #20]
 800acfe:	e002      	b.n	800ad06 <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad04:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d03b      	beq.n	800ad88 <vTaskPriorityDisinheritAfterTimeout+0xb0>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d136      	bne.n	800ad88 <vTaskPriorityDisinheritAfterTimeout+0xb0>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad1e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	db04      	blt.n	800ad38 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	6959      	ldr	r1, [r3, #20]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4413      	add	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4a12      	ldr	r2, [pc, #72]	@ (800ad90 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800ad48:	4413      	add	r3, r2
 800ad4a:	4299      	cmp	r1, r3
 800ad4c:	d11c      	bne.n	800ad88 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	3304      	adds	r3, #4
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fe fa7a 	bl	800924c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ad94 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d903      	bls.n	800ad6c <vTaskPriorityDisinheritAfterTimeout+0x94>
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad68:	4a0a      	ldr	r2, [pc, #40]	@ (800ad94 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800ad6a:	6013      	str	r3, [r2, #0]
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad70:	4613      	mov	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	4413      	add	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4a05      	ldr	r2, [pc, #20]	@ (800ad90 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800ad7a:	441a      	add	r2, r3
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	4619      	mov	r1, r3
 800ad82:	4610      	mov	r0, r2
 800ad84:	f7fe fa05 	bl	8009192 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad88:	bf00      	nop
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	2001e604 	.word	0x2001e604
 800ad94:	2001eadc 	.word	0x2001eadc

0800ad98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ad98:	b480      	push	{r7}
 800ad9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ad9c:	4b07      	ldr	r3, [pc, #28]	@ (800adbc <pvTaskIncrementMutexHeldCount+0x24>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d004      	beq.n	800adae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ada4:	4b05      	ldr	r3, [pc, #20]	@ (800adbc <pvTaskIncrementMutexHeldCount+0x24>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800adaa:	3201      	adds	r2, #1
 800adac:	661a      	str	r2, [r3, #96]	@ 0x60
		}

		return pxCurrentTCB;
 800adae:	4b03      	ldr	r3, [pc, #12]	@ (800adbc <pvTaskIncrementMutexHeldCount+0x24>)
 800adb0:	681b      	ldr	r3, [r3, #0]
	}
 800adb2:	4618      	mov	r0, r3
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	2001e600 	.word	0x2001e600

0800adc0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800adca:	4b21      	ldr	r3, [pc, #132]	@ (800ae50 <prvAddCurrentTaskToDelayedList+0x90>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800add0:	4b20      	ldr	r3, [pc, #128]	@ (800ae54 <prvAddCurrentTaskToDelayedList+0x94>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3304      	adds	r3, #4
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe fa38 	bl	800924c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ade2:	d10a      	bne.n	800adfa <prvAddCurrentTaskToDelayedList+0x3a>
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d007      	beq.n	800adfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adea:	4b1a      	ldr	r3, [pc, #104]	@ (800ae54 <prvAddCurrentTaskToDelayedList+0x94>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3304      	adds	r3, #4
 800adf0:	4619      	mov	r1, r3
 800adf2:	4819      	ldr	r0, [pc, #100]	@ (800ae58 <prvAddCurrentTaskToDelayedList+0x98>)
 800adf4:	f7fe f9cd 	bl	8009192 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800adf8:	e026      	b.n	800ae48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4413      	add	r3, r2
 800ae00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae02:	4b14      	ldr	r3, [pc, #80]	@ (800ae54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68ba      	ldr	r2, [r7, #8]
 800ae08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d209      	bcs.n	800ae26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae12:	4b12      	ldr	r3, [pc, #72]	@ (800ae5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	4b0f      	ldr	r3, [pc, #60]	@ (800ae54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	4610      	mov	r0, r2
 800ae20:	f7fe f9db 	bl	80091da <vListInsert>
}
 800ae24:	e010      	b.n	800ae48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae26:	4b0e      	ldr	r3, [pc, #56]	@ (800ae60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3304      	adds	r3, #4
 800ae30:	4619      	mov	r1, r3
 800ae32:	4610      	mov	r0, r2
 800ae34:	f7fe f9d1 	bl	80091da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae38:	4b0a      	ldr	r3, [pc, #40]	@ (800ae64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d202      	bcs.n	800ae48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ae42:	4a08      	ldr	r2, [pc, #32]	@ (800ae64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	6013      	str	r3, [r2, #0]
}
 800ae48:	bf00      	nop
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	2001ead8 	.word	0x2001ead8
 800ae54:	2001e600 	.word	0x2001e600
 800ae58:	2001eac0 	.word	0x2001eac0
 800ae5c:	2001ea90 	.word	0x2001ea90
 800ae60:	2001ea8c 	.word	0x2001ea8c
 800ae64:	2001eaf4 	.word	0x2001eaf4

0800ae68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b088      	sub	sp, #32
 800ae6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ae72:	f000 faab 	bl	800b3cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae76:	4b15      	ldr	r3, [pc, #84]	@ (800aecc <xTimerCreateTimerTask+0x64>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d020      	beq.n	800aec0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae82:	2300      	movs	r3, #0
 800ae84:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae86:	463a      	mov	r2, r7
 800ae88:	1d39      	adds	r1, r7, #4
 800ae8a:	f107 0308 	add.w	r3, r7, #8
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fe f938 	bl	8009104 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68ba      	ldr	r2, [r7, #8]
 800ae9a:	9202      	str	r2, [sp, #8]
 800ae9c:	9301      	str	r3, [sp, #4]
 800ae9e:	2302      	movs	r3, #2
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	2300      	movs	r3, #0
 800aea4:	460a      	mov	r2, r1
 800aea6:	490a      	ldr	r1, [pc, #40]	@ (800aed0 <xTimerCreateTimerTask+0x68>)
 800aea8:	480a      	ldr	r0, [pc, #40]	@ (800aed4 <xTimerCreateTimerTask+0x6c>)
 800aeaa:	f7ff f89f 	bl	8009fec <xTaskCreateStatic>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	4a09      	ldr	r2, [pc, #36]	@ (800aed8 <xTimerCreateTimerTask+0x70>)
 800aeb2:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aeb4:	4b08      	ldr	r3, [pc, #32]	@ (800aed8 <xTimerCreateTimerTask+0x70>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800aebc:	2301      	movs	r3, #1
 800aebe:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 800aec0:	68fb      	ldr	r3, [r7, #12]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	2001eb30 	.word	0x2001eb30
 800aed0:	0802b690 	.word	0x0802b690
 800aed4:	0800afdd 	.word	0x0800afdd
 800aed8:	2001eb34 	.word	0x2001eb34

0800aedc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08a      	sub	sp, #40	@ 0x28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	627b      	str	r3, [r7, #36]	@ 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aeee:	4b1a      	ldr	r3, [pc, #104]	@ (800af58 <xTimerGenericCommand+0x7c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d02a      	beq.n	800af4c <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	2b05      	cmp	r3, #5
 800af06:	dc18      	bgt.n	800af3a <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800af08:	f7ff fe14 	bl	800ab34 <xTaskGetSchedulerState>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d109      	bne.n	800af26 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800af12:	4b11      	ldr	r3, [pc, #68]	@ (800af58 <xTimerGenericCommand+0x7c>)
 800af14:	6818      	ldr	r0, [r3, #0]
 800af16:	f107 0114 	add.w	r1, r7, #20
 800af1a:	2300      	movs	r3, #0
 800af1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af1e:	f7fe fb5b 	bl	80095d8 <xQueueGenericSend>
 800af22:	6278      	str	r0, [r7, #36]	@ 0x24
 800af24:	e012      	b.n	800af4c <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af26:	4b0c      	ldr	r3, [pc, #48]	@ (800af58 <xTimerGenericCommand+0x7c>)
 800af28:	6818      	ldr	r0, [r3, #0]
 800af2a:	f107 0114 	add.w	r1, r7, #20
 800af2e:	2300      	movs	r3, #0
 800af30:	2200      	movs	r2, #0
 800af32:	f7fe fb51 	bl	80095d8 <xQueueGenericSend>
 800af36:	6278      	str	r0, [r7, #36]	@ 0x24
 800af38:	e008      	b.n	800af4c <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af3a:	4b07      	ldr	r3, [pc, #28]	@ (800af58 <xTimerGenericCommand+0x7c>)
 800af3c:	6818      	ldr	r0, [r3, #0]
 800af3e:	f107 0114 	add.w	r1, r7, #20
 800af42:	2300      	movs	r3, #0
 800af44:	683a      	ldr	r2, [r7, #0]
 800af46:	f7fe fbf1 	bl	800972c <xQueueGenericSendFromISR>
 800af4a:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3728      	adds	r7, #40	@ 0x28
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	2001eb30 	.word	0x2001eb30

0800af5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af02      	add	r7, sp, #8
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af66:	4b1c      	ldr	r3, [pc, #112]	@ (800afd8 <prvProcessExpiredTimer+0x7c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	3304      	adds	r3, #4
 800af74:	4618      	mov	r0, r3
 800af76:	f7fe f969 	bl	800924c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af80:	f003 0304 	and.w	r3, r3, #4
 800af84:	2b00      	cmp	r3, #0
 800af86:	d015      	beq.n	800afb4 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	699a      	ldr	r2, [r3, #24]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	18d1      	adds	r1, r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f000 f8c7 	bl	800b128 <prvInsertTimerInActiveList>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d012      	beq.n	800afc6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afa0:	2300      	movs	r3, #0
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	2300      	movs	r3, #0
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	2100      	movs	r1, #0
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f7ff ff96 	bl	800aedc <xTimerGenericCommand>
 800afb0:	60b8      	str	r0, [r7, #8]
 800afb2:	e008      	b.n	800afc6 <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afba:	f023 0301 	bic.w	r3, r3, #1
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	4798      	blx	r3
}
 800afce:	bf00      	nop
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	2001eb28 	.word	0x2001eb28

0800afdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afe4:	f107 0308 	add.w	r3, r7, #8
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 f859 	bl	800b0a0 <prvGetNextExpireTime>
 800afee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	4619      	mov	r1, r3
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f000 f805 	bl	800b004 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800affa:	f000 f8d7 	bl	800b1ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800affe:	bf00      	nop
 800b000:	e7f0      	b.n	800afe4 <prvTimerTask+0x8>
	...

0800b004 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b00e:	f7ff f9f1 	bl	800a3f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b012:	f107 0308 	add.w	r3, r7, #8
 800b016:	4618      	mov	r0, r3
 800b018:	f000 f866 	bl	800b0e8 <prvSampleTimeNow>
 800b01c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d130      	bne.n	800b086 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10a      	bne.n	800b040 <prvProcessTimerOrBlockTask+0x3c>
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d806      	bhi.n	800b040 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b032:	f7ff f9ed 	bl	800a410 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b036:	68f9      	ldr	r1, [r7, #12]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff ff8f 	bl	800af5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b03e:	e024      	b.n	800b08a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d008      	beq.n	800b058 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b046:	4b13      	ldr	r3, [pc, #76]	@ (800b094 <prvProcessTimerOrBlockTask+0x90>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d101      	bne.n	800b054 <prvProcessTimerOrBlockTask+0x50>
 800b050:	2301      	movs	r3, #1
 800b052:	e000      	b.n	800b056 <prvProcessTimerOrBlockTask+0x52>
 800b054:	2300      	movs	r3, #0
 800b056:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b058:	4b0f      	ldr	r3, [pc, #60]	@ (800b098 <prvProcessTimerOrBlockTask+0x94>)
 800b05a:	6818      	ldr	r0, [r3, #0]
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	4619      	mov	r1, r3
 800b066:	f7fe ff8d 	bl	8009f84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b06a:	f7ff f9d1 	bl	800a410 <xTaskResumeAll>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b074:	4b09      	ldr	r3, [pc, #36]	@ (800b09c <prvProcessTimerOrBlockTask+0x98>)
 800b076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b07a:	601a      	str	r2, [r3, #0]
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	f3bf 8f6f 	isb	sy
}
 800b084:	e001      	b.n	800b08a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b086:	f7ff f9c3 	bl	800a410 <xTaskResumeAll>
}
 800b08a:	bf00      	nop
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	2001eb2c 	.word	0x2001eb2c
 800b098:	2001eb30 	.word	0x2001eb30
 800b09c:	e000ed04 	.word	0xe000ed04

0800b0a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0a8:	4b0e      	ldr	r3, [pc, #56]	@ (800b0e4 <prvGetNextExpireTime+0x44>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d101      	bne.n	800b0b6 <prvGetNextExpireTime+0x16>
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	e000      	b.n	800b0b8 <prvGetNextExpireTime+0x18>
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d105      	bne.n	800b0d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0c4:	4b07      	ldr	r3, [pc, #28]	@ (800b0e4 <prvGetNextExpireTime+0x44>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68db      	ldr	r3, [r3, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	e001      	b.n	800b0d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	2001eb28 	.word	0x2001eb28

0800b0e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0f0:	f7ff fa1c 	bl	800a52c <xTaskGetTickCount>
 800b0f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b124 <prvSampleTimeNow+0x3c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d205      	bcs.n	800b10c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b100:	f000 f90e 	bl	800b320 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	601a      	str	r2, [r3, #0]
 800b10a:	e002      	b.n	800b112 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b112:	4a04      	ldr	r2, [pc, #16]	@ (800b124 <prvSampleTimeNow+0x3c>)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b118:	68fb      	ldr	r3, [r7, #12]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	2001eb38 	.word	0x2001eb38

0800b128 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
 800b134:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b136:	2300      	movs	r3, #0
 800b138:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d812      	bhi.n	800b174 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	1ad2      	subs	r2, r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d302      	bcc.n	800b162 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b15c:	2301      	movs	r3, #1
 800b15e:	617b      	str	r3, [r7, #20]
 800b160:	e01b      	b.n	800b19a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b162:	4b10      	ldr	r3, [pc, #64]	@ (800b1a4 <prvInsertTimerInActiveList+0x7c>)
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3304      	adds	r3, #4
 800b16a:	4619      	mov	r1, r3
 800b16c:	4610      	mov	r0, r2
 800b16e:	f7fe f834 	bl	80091da <vListInsert>
 800b172:	e012      	b.n	800b19a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d206      	bcs.n	800b18a <prvInsertTimerInActiveList+0x62>
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	d302      	bcc.n	800b18a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b184:	2301      	movs	r3, #1
 800b186:	617b      	str	r3, [r7, #20]
 800b188:	e007      	b.n	800b19a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b18a:	4b07      	ldr	r3, [pc, #28]	@ (800b1a8 <prvInsertTimerInActiveList+0x80>)
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3304      	adds	r3, #4
 800b192:	4619      	mov	r1, r3
 800b194:	4610      	mov	r0, r2
 800b196:	f7fe f820 	bl	80091da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b19a:	697b      	ldr	r3, [r7, #20]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	2001eb2c 	.word	0x2001eb2c
 800b1a8:	2001eb28 	.word	0x2001eb28

0800b1ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08c      	sub	sp, #48	@ 0x30
 800b1b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1b2:	e0a2      	b.n	800b2fa <prvProcessReceivedCommands+0x14e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	da0b      	bge.n	800b1d2 <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b1ba:	f107 0308 	add.w	r3, r7, #8
 800b1be:	3304      	adds	r3, #4
 800b1c0:	627b      	str	r3, [r7, #36]	@ 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1c8:	6850      	ldr	r0, [r2, #4]
 800b1ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1cc:	6892      	ldr	r2, [r2, #8]
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f2c0 8090 	blt.w	800b2fa <prvProcessReceivedCommands+0x14e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d004      	beq.n	800b1f0 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1e6:	6a3b      	ldr	r3, [r7, #32]
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe f82e 	bl	800924c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1f0:	1d3b      	adds	r3, r7, #4
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7ff ff78 	bl	800b0e8 <prvSampleTimeNow>
 800b1f8:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	2b09      	cmp	r3, #9
 800b1fe:	d879      	bhi.n	800b2f4 <prvProcessReceivedCommands+0x148>
 800b200:	a201      	add	r2, pc, #4	@ (adr r2, 800b208 <prvProcessReceivedCommands+0x5c>)
 800b202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b206:	bf00      	nop
 800b208:	0800b231 	.word	0x0800b231
 800b20c:	0800b231 	.word	0x0800b231
 800b210:	0800b231 	.word	0x0800b231
 800b214:	0800b28b 	.word	0x0800b28b
 800b218:	0800b29f 	.word	0x0800b29f
 800b21c:	0800b2cb 	.word	0x0800b2cb
 800b220:	0800b231 	.word	0x0800b231
 800b224:	0800b231 	.word	0x0800b231
 800b228:	0800b28b 	.word	0x0800b28b
 800b22c:	0800b29f 	.word	0x0800b29f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b230:	6a3b      	ldr	r3, [r7, #32]
 800b232:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b236:	f043 0301 	orr.w	r3, r3, #1
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	6a3b      	ldr	r3, [r7, #32]
 800b23e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	6a3b      	ldr	r3, [r7, #32]
 800b246:	699b      	ldr	r3, [r3, #24]
 800b248:	18d1      	adds	r1, r2, r3
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	69fa      	ldr	r2, [r7, #28]
 800b24e:	6a38      	ldr	r0, [r7, #32]
 800b250:	f7ff ff6a 	bl	800b128 <prvInsertTimerInActiveList>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d04e      	beq.n	800b2f8 <prvProcessReceivedCommands+0x14c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b25a:	6a3b      	ldr	r3, [r7, #32]
 800b25c:	6a1b      	ldr	r3, [r3, #32]
 800b25e:	6a38      	ldr	r0, [r7, #32]
 800b260:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b268:	f003 0304 	and.w	r3, r3, #4
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d043      	beq.n	800b2f8 <prvProcessReceivedCommands+0x14c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	441a      	add	r2, r3
 800b278:	2300      	movs	r3, #0
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	2300      	movs	r3, #0
 800b27e:	2100      	movs	r1, #0
 800b280:	6a38      	ldr	r0, [r7, #32]
 800b282:	f7ff fe2b 	bl	800aedc <xTimerGenericCommand>
 800b286:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 800b288:	e036      	b.n	800b2f8 <prvProcessReceivedCommands+0x14c>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b28a:	6a3b      	ldr	r3, [r7, #32]
 800b28c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b290:	f023 0301 	bic.w	r3, r3, #1
 800b294:	b2da      	uxtb	r2, r3
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b29c:	e02d      	b.n	800b2fa <prvProcessReceivedCommands+0x14e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b29e:	6a3b      	ldr	r3, [r7, #32]
 800b2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2a4:	f043 0301 	orr.w	r3, r3, #1
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	6a3b      	ldr	r3, [r7, #32]
 800b2b4:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2b6:	6a3b      	ldr	r3, [r7, #32]
 800b2b8:	699a      	ldr	r2, [r3, #24]
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	18d1      	adds	r1, r2, r3
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	69fa      	ldr	r2, [r7, #28]
 800b2c2:	6a38      	ldr	r0, [r7, #32]
 800b2c4:	f7ff ff30 	bl	800b128 <prvInsertTimerInActiveList>
					break;
 800b2c8:	e017      	b.n	800b2fa <prvProcessReceivedCommands+0x14e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2ca:	6a3b      	ldr	r3, [r7, #32]
 800b2cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2d0:	f003 0302 	and.w	r3, r3, #2
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d103      	bne.n	800b2e0 <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 800b2d8:	6a38      	ldr	r0, [r7, #32]
 800b2da:	f000 fb01 	bl	800b8e0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2de:	e00c      	b.n	800b2fa <prvProcessReceivedCommands+0x14e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2e0:	6a3b      	ldr	r3, [r7, #32]
 800b2e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2e6:	f023 0301 	bic.w	r3, r3, #1
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b2f2:	e002      	b.n	800b2fa <prvProcessReceivedCommands+0x14e>

				default	:
					/* Don't expect to get here. */
					break;
 800b2f4:	bf00      	nop
 800b2f6:	e000      	b.n	800b2fa <prvProcessReceivedCommands+0x14e>
					break;
 800b2f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2fa:	4b08      	ldr	r3, [pc, #32]	@ (800b31c <prvProcessReceivedCommands+0x170>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f107 0108 	add.w	r1, r7, #8
 800b302:	2200      	movs	r2, #0
 800b304:	4618      	mov	r0, r3
 800b306:	f7fe fac7 	bl	8009898 <xQueueReceive>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f47f af51 	bne.w	800b1b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b312:	bf00      	nop
 800b314:	bf00      	nop
 800b316:	3728      	adds	r7, #40	@ 0x28
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	2001eb30 	.word	0x2001eb30

0800b320 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b088      	sub	sp, #32
 800b324:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b326:	e03a      	b.n	800b39e <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b328:	4b26      	ldr	r3, [pc, #152]	@ (800b3c4 <prvSwitchTimerLists+0xa4>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b332:	4b24      	ldr	r3, [pc, #144]	@ (800b3c4 <prvSwitchTimerLists+0xa4>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	3304      	adds	r3, #4
 800b340:	4618      	mov	r0, r3
 800b342:	f7fd ff83 	bl	800924c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b354:	f003 0304 	and.w	r3, r3, #4
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d020      	beq.n	800b39e <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	693a      	ldr	r2, [r7, #16]
 800b362:	4413      	add	r3, r2
 800b364:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d90e      	bls.n	800b38c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b37a:	4b12      	ldr	r3, [pc, #72]	@ (800b3c4 <prvSwitchTimerLists+0xa4>)
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3304      	adds	r3, #4
 800b382:	4619      	mov	r1, r3
 800b384:	4610      	mov	r0, r2
 800b386:	f7fd ff28 	bl	80091da <vListInsert>
 800b38a:	e008      	b.n	800b39e <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b38c:	2300      	movs	r3, #0
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	2300      	movs	r3, #0
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	2100      	movs	r1, #0
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f7ff fda0 	bl	800aedc <xTimerGenericCommand>
 800b39c:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b39e:	4b09      	ldr	r3, [pc, #36]	@ (800b3c4 <prvSwitchTimerLists+0xa4>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1bf      	bne.n	800b328 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3a8:	4b06      	ldr	r3, [pc, #24]	@ (800b3c4 <prvSwitchTimerLists+0xa4>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3ae:	4b06      	ldr	r3, [pc, #24]	@ (800b3c8 <prvSwitchTimerLists+0xa8>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a04      	ldr	r2, [pc, #16]	@ (800b3c4 <prvSwitchTimerLists+0xa4>)
 800b3b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3b6:	4a04      	ldr	r2, [pc, #16]	@ (800b3c8 <prvSwitchTimerLists+0xa8>)
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	6013      	str	r3, [r2, #0]
}
 800b3bc:	bf00      	nop
 800b3be:	3718      	adds	r7, #24
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	2001eb28 	.word	0x2001eb28
 800b3c8:	2001eb2c 	.word	0x2001eb2c

0800b3cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b3d2:	f000 f91f 	bl	800b614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b3d6:	4b15      	ldr	r3, [pc, #84]	@ (800b42c <prvCheckForValidListAndQueue+0x60>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d120      	bne.n	800b420 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3de:	4814      	ldr	r0, [pc, #80]	@ (800b430 <prvCheckForValidListAndQueue+0x64>)
 800b3e0:	f7fd feaa 	bl	8009138 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b3e4:	4813      	ldr	r0, [pc, #76]	@ (800b434 <prvCheckForValidListAndQueue+0x68>)
 800b3e6:	f7fd fea7 	bl	8009138 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b3ea:	4b13      	ldr	r3, [pc, #76]	@ (800b438 <prvCheckForValidListAndQueue+0x6c>)
 800b3ec:	4a10      	ldr	r2, [pc, #64]	@ (800b430 <prvCheckForValidListAndQueue+0x64>)
 800b3ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b3f0:	4b12      	ldr	r3, [pc, #72]	@ (800b43c <prvCheckForValidListAndQueue+0x70>)
 800b3f2:	4a10      	ldr	r2, [pc, #64]	@ (800b434 <prvCheckForValidListAndQueue+0x68>)
 800b3f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	4b11      	ldr	r3, [pc, #68]	@ (800b440 <prvCheckForValidListAndQueue+0x74>)
 800b3fc:	4a11      	ldr	r2, [pc, #68]	@ (800b444 <prvCheckForValidListAndQueue+0x78>)
 800b3fe:	2110      	movs	r1, #16
 800b400:	200a      	movs	r0, #10
 800b402:	f7fd ffa7 	bl	8009354 <xQueueGenericCreateStatic>
 800b406:	4603      	mov	r3, r0
 800b408:	4a08      	ldr	r2, [pc, #32]	@ (800b42c <prvCheckForValidListAndQueue+0x60>)
 800b40a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b40c:	4b07      	ldr	r3, [pc, #28]	@ (800b42c <prvCheckForValidListAndQueue+0x60>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d005      	beq.n	800b420 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b414:	4b05      	ldr	r3, [pc, #20]	@ (800b42c <prvCheckForValidListAndQueue+0x60>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	490b      	ldr	r1, [pc, #44]	@ (800b448 <prvCheckForValidListAndQueue+0x7c>)
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fe fd5e 	bl	8009edc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b420:	f000 f914 	bl	800b64c <vPortExitCritical>
}
 800b424:	bf00      	nop
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	2001eb30 	.word	0x2001eb30
 800b430:	2001eb00 	.word	0x2001eb00
 800b434:	2001eb14 	.word	0x2001eb14
 800b438:	2001eb28 	.word	0x2001eb28
 800b43c:	2001eb2c 	.word	0x2001eb2c
 800b440:	2001ebdc 	.word	0x2001ebdc
 800b444:	2001eb3c 	.word	0x2001eb3c
 800b448:	0802b698 	.word	0x0802b698

0800b44c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	3b04      	subs	r3, #4
 800b45c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	3b04      	subs	r3, #4
 800b46a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	f023 0201 	bic.w	r2, r3, #1
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3b04      	subs	r3, #4
 800b47a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b47c:	4a0c      	ldr	r2, [pc, #48]	@ (800b4b0 <pxPortInitialiseStack+0x64>)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	3b14      	subs	r3, #20
 800b486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	3b04      	subs	r3, #4
 800b492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f06f 0202 	mvn.w	r2, #2
 800b49a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3b20      	subs	r3, #32
 800b4a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3714      	adds	r7, #20
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	0800b4b5 	.word	0x0800b4b5

0800b4b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c2:	b672      	cpsid	i
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	b662      	cpsie	i
 800b4d2:	607b      	str	r3, [r7, #4]
}
 800b4d4:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b4d6:	bf00      	nop
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d0fc      	beq.n	800b4d8 <prvTaskExitError+0x24>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b4de:	bf00      	nop
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr
 800b4ec:	0000      	movs	r0, r0
	...

0800b4f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b4f0:	4b07      	ldr	r3, [pc, #28]	@ (800b510 <pxCurrentTCBConst2>)
 800b4f2:	6819      	ldr	r1, [r3, #0]
 800b4f4:	6808      	ldr	r0, [r1, #0]
 800b4f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fa:	f380 8809 	msr	PSP, r0
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f04f 0000 	mov.w	r0, #0
 800b506:	f380 8811 	msr	BASEPRI, r0
 800b50a:	4770      	bx	lr
 800b50c:	f3af 8000 	nop.w

0800b510 <pxCurrentTCBConst2>:
 800b510:	2001e600 	.word	0x2001e600
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop

0800b518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b518:	4808      	ldr	r0, [pc, #32]	@ (800b53c <prvPortStartFirstTask+0x24>)
 800b51a:	6800      	ldr	r0, [r0, #0]
 800b51c:	6800      	ldr	r0, [r0, #0]
 800b51e:	f380 8808 	msr	MSP, r0
 800b522:	f04f 0000 	mov.w	r0, #0
 800b526:	f380 8814 	msr	CONTROL, r0
 800b52a:	b662      	cpsie	i
 800b52c:	b661      	cpsie	f
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	df00      	svc	0
 800b538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b53a:	bf00      	nop
 800b53c:	e000ed08 	.word	0xe000ed08

0800b540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b546:	4b2d      	ldr	r3, [pc, #180]	@ (800b5fc <xPortStartScheduler+0xbc>)
 800b548:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	22ff      	movs	r2, #255	@ 0xff
 800b556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b560:	79fb      	ldrb	r3, [r7, #7]
 800b562:	b2db      	uxtb	r3, r3
 800b564:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	4b25      	ldr	r3, [pc, #148]	@ (800b600 <xPortStartScheduler+0xc0>)
 800b56c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b56e:	4b25      	ldr	r3, [pc, #148]	@ (800b604 <xPortStartScheduler+0xc4>)
 800b570:	2207      	movs	r2, #7
 800b572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b574:	e009      	b.n	800b58a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b576:	4b23      	ldr	r3, [pc, #140]	@ (800b604 <xPortStartScheduler+0xc4>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	4a21      	ldr	r2, [pc, #132]	@ (800b604 <xPortStartScheduler+0xc4>)
 800b57e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b580:	79fb      	ldrb	r3, [r7, #7]
 800b582:	b2db      	uxtb	r3, r3
 800b584:	005b      	lsls	r3, r3, #1
 800b586:	b2db      	uxtb	r3, r3
 800b588:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b58a:	79fb      	ldrb	r3, [r7, #7]
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b592:	2b80      	cmp	r3, #128	@ 0x80
 800b594:	d0ef      	beq.n	800b576 <xPortStartScheduler+0x36>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b596:	4b1b      	ldr	r3, [pc, #108]	@ (800b604 <xPortStartScheduler+0xc4>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	021b      	lsls	r3, r3, #8
 800b59c:	4a19      	ldr	r2, [pc, #100]	@ (800b604 <xPortStartScheduler+0xc4>)
 800b59e:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5a0:	4b18      	ldr	r3, [pc, #96]	@ (800b604 <xPortStartScheduler+0xc4>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b5a8:	4a16      	ldr	r2, [pc, #88]	@ (800b604 <xPortStartScheduler+0xc4>)
 800b5aa:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	b2da      	uxtb	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5b4:	4b14      	ldr	r3, [pc, #80]	@ (800b608 <xPortStartScheduler+0xc8>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a13      	ldr	r2, [pc, #76]	@ (800b608 <xPortStartScheduler+0xc8>)
 800b5ba:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b5be:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5c0:	4b11      	ldr	r3, [pc, #68]	@ (800b608 <xPortStartScheduler+0xc8>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a10      	ldr	r2, [pc, #64]	@ (800b608 <xPortStartScheduler+0xc8>)
 800b5c6:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b5ca:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5cc:	f000 f8b0 	bl	800b730 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b5d0:	4b0e      	ldr	r3, [pc, #56]	@ (800b60c <xPortStartScheduler+0xcc>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b5d6:	f000 f8cf 	bl	800b778 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b5da:	4b0d      	ldr	r3, [pc, #52]	@ (800b610 <xPortStartScheduler+0xd0>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a0c      	ldr	r2, [pc, #48]	@ (800b610 <xPortStartScheduler+0xd0>)
 800b5e0:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b5e4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5e6:	f7ff ff97 	bl	800b518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5ea:	f7ff f869 	bl	800a6c0 <vTaskSwitchContext>
	prvTaskExitError();
 800b5ee:	f7ff ff61 	bl	800b4b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	e000e400 	.word	0xe000e400
 800b600:	2001ec2c 	.word	0x2001ec2c
 800b604:	2001ec30 	.word	0x2001ec30
 800b608:	e000ed20 	.word	0xe000ed20
 800b60c:	20000028 	.word	0x20000028
 800b610:	e000ef34 	.word	0xe000ef34

0800b614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
	__asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61e:	b672      	cpsid	i
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	b662      	cpsie	i
 800b62e:	607b      	str	r3, [r7, #4]
}
 800b630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b632:	4b05      	ldr	r3, [pc, #20]	@ (800b648 <vPortEnterCritical+0x34>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	3301      	adds	r3, #1
 800b638:	4a03      	ldr	r2, [pc, #12]	@ (800b648 <vPortEnterCritical+0x34>)
 800b63a:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr
 800b648:	20000028 	.word	0x20000028

0800b64c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800b652:	4b0a      	ldr	r3, [pc, #40]	@ (800b67c <vPortExitCritical+0x30>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	3b01      	subs	r3, #1
 800b658:	4a08      	ldr	r2, [pc, #32]	@ (800b67c <vPortExitCritical+0x30>)
 800b65a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b65c:	4b07      	ldr	r3, [pc, #28]	@ (800b67c <vPortExitCritical+0x30>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d105      	bne.n	800b670 <vPortExitCritical+0x24>
 800b664:	2300      	movs	r3, #0
 800b666:	607b      	str	r3, [r7, #4]
	__asm volatile
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f383 8811 	msr	BASEPRI, r3
}
 800b66e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	20000028 	.word	0x20000028

0800b680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b680:	f3ef 8009 	mrs	r0, PSP
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	4b15      	ldr	r3, [pc, #84]	@ (800b6e0 <pxCurrentTCBConst>)
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	f01e 0f10 	tst.w	lr, #16
 800b690:	bf08      	it	eq
 800b692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69a:	6010      	str	r0, [r2, #0]
 800b69c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b6a4:	b672      	cpsid	i
 800b6a6:	f380 8811 	msr	BASEPRI, r0
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	b662      	cpsie	i
 800b6b4:	f7ff f804 	bl	800a6c0 <vTaskSwitchContext>
 800b6b8:	f04f 0000 	mov.w	r0, #0
 800b6bc:	f380 8811 	msr	BASEPRI, r0
 800b6c0:	bc09      	pop	{r0, r3}
 800b6c2:	6819      	ldr	r1, [r3, #0]
 800b6c4:	6808      	ldr	r0, [r1, #0]
 800b6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ca:	f01e 0f10 	tst.w	lr, #16
 800b6ce:	bf08      	it	eq
 800b6d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6d4:	f380 8809 	msr	PSP, r0
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop

0800b6e0 <pxCurrentTCBConst>:
 800b6e0:	2001e600 	.word	0x2001e600
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6e4:	bf00      	nop
 800b6e6:	bf00      	nop

0800b6e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f2:	b672      	cpsid	i
 800b6f4:	f383 8811 	msr	BASEPRI, r3
 800b6f8:	f3bf 8f6f 	isb	sy
 800b6fc:	f3bf 8f4f 	dsb	sy
 800b700:	b662      	cpsie	i
 800b702:	607b      	str	r3, [r7, #4]
}
 800b704:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b706:	f7fe ff33 	bl	800a570 <xTaskIncrementTick>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d003      	beq.n	800b718 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b710:	4b06      	ldr	r3, [pc, #24]	@ (800b72c <SysTick_Handler+0x44>)
 800b712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b716:	601a      	str	r2, [r3, #0]
 800b718:	2300      	movs	r3, #0
 800b71a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	f383 8811 	msr	BASEPRI, r3
}
 800b722:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b724:	bf00      	nop
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	e000ed04 	.word	0xe000ed04

0800b730 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b730:	b480      	push	{r7}
 800b732:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b734:	4b0b      	ldr	r3, [pc, #44]	@ (800b764 <vPortSetupTimerInterrupt+0x34>)
 800b736:	2200      	movs	r2, #0
 800b738:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b73a:	4b0b      	ldr	r3, [pc, #44]	@ (800b768 <vPortSetupTimerInterrupt+0x38>)
 800b73c:	2200      	movs	r2, #0
 800b73e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b740:	4b0a      	ldr	r3, [pc, #40]	@ (800b76c <vPortSetupTimerInterrupt+0x3c>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a0a      	ldr	r2, [pc, #40]	@ (800b770 <vPortSetupTimerInterrupt+0x40>)
 800b746:	fba2 2303 	umull	r2, r3, r2, r3
 800b74a:	099b      	lsrs	r3, r3, #6
 800b74c:	4a09      	ldr	r2, [pc, #36]	@ (800b774 <vPortSetupTimerInterrupt+0x44>)
 800b74e:	3b01      	subs	r3, #1
 800b750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b752:	4b04      	ldr	r3, [pc, #16]	@ (800b764 <vPortSetupTimerInterrupt+0x34>)
 800b754:	2207      	movs	r2, #7
 800b756:	601a      	str	r2, [r3, #0]
}
 800b758:	bf00      	nop
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	e000e010 	.word	0xe000e010
 800b768:	e000e018 	.word	0xe000e018
 800b76c:	20000004 	.word	0x20000004
 800b770:	10624dd3 	.word	0x10624dd3
 800b774:	e000e014 	.word	0xe000e014

0800b778 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b778:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b788 <vPortEnableVFP+0x10>
 800b77c:	6801      	ldr	r1, [r0, #0]
 800b77e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b782:	6001      	str	r1, [r0, #0]
 800b784:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b786:	bf00      	nop
 800b788:	e000ed88 	.word	0xe000ed88

0800b78c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b792:	f3ef 8305 	mrs	r3, IPSR
 800b796:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2b0f      	cmp	r3, #15
 800b79c:	d904      	bls.n	800b7a8 <vPortValidateInterruptPriority+0x1c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b79e:	4a05      	ldr	r2, [pc, #20]	@ (800b7b4 <vPortValidateInterruptPriority+0x28>)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	70fb      	strb	r3, [r7, #3]
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
	}
 800b7a8:	bf00      	nop
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	e000e3f0 	.word	0xe000e3f0

0800b7b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800b7c4:	f7fe fe16 	bl	800a3f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7c8:	4b40      	ldr	r3, [pc, #256]	@ (800b8cc <pvPortMalloc+0x114>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d101      	bne.n	800b7d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7d0:	f000 f8cc 	bl	800b96c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7d4:	4b3e      	ldr	r3, [pc, #248]	@ (800b8d0 <pvPortMalloc+0x118>)
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4013      	ands	r3, r2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d16d      	bne.n	800b8bc <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00d      	beq.n	800b802 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 800b7e6:	2208      	movs	r2, #8
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f003 0307 	and.w	r3, r3, #7
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d004      	beq.n	800b802 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f023 0307 	bic.w	r3, r3, #7
 800b7fe:	3308      	adds	r3, #8
 800b800:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d059      	beq.n	800b8bc <pvPortMalloc+0x104>
 800b808:	4b32      	ldr	r3, [pc, #200]	@ (800b8d4 <pvPortMalloc+0x11c>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d854      	bhi.n	800b8bc <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b812:	4b31      	ldr	r3, [pc, #196]	@ (800b8d8 <pvPortMalloc+0x120>)
 800b814:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800b816:	4b30      	ldr	r3, [pc, #192]	@ (800b8d8 <pvPortMalloc+0x120>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b81c:	e004      	b.n	800b828 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d903      	bls.n	800b83a <pvPortMalloc+0x82>
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1f1      	bne.n	800b81e <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b83a:	4b24      	ldr	r3, [pc, #144]	@ (800b8cc <pvPortMalloc+0x114>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	429a      	cmp	r2, r3
 800b842:	d03b      	beq.n	800b8bc <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2208      	movs	r2, #8
 800b84a:	4413      	add	r3, r2
 800b84c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	685a      	ldr	r2, [r3, #4]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	1ad2      	subs	r2, r2, r3
 800b85e:	2308      	movs	r3, #8
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	429a      	cmp	r2, r3
 800b864:	d90f      	bls.n	800b886 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4413      	add	r3, r2
 800b86c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	685a      	ldr	r2, [r3, #4]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	1ad2      	subs	r2, r2, r3
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b880:	68b8      	ldr	r0, [r7, #8]
 800b882:	f000 f8d7 	bl	800ba34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b886:	4b13      	ldr	r3, [pc, #76]	@ (800b8d4 <pvPortMalloc+0x11c>)
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	4a10      	ldr	r2, [pc, #64]	@ (800b8d4 <pvPortMalloc+0x11c>)
 800b892:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b894:	4b0f      	ldr	r3, [pc, #60]	@ (800b8d4 <pvPortMalloc+0x11c>)
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	4b10      	ldr	r3, [pc, #64]	@ (800b8dc <pvPortMalloc+0x124>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d203      	bcs.n	800b8a8 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b8d4 <pvPortMalloc+0x11c>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a0d      	ldr	r2, [pc, #52]	@ (800b8dc <pvPortMalloc+0x124>)
 800b8a6:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	685a      	ldr	r2, [r3, #4]
 800b8ac:	4b08      	ldr	r3, [pc, #32]	@ (800b8d0 <pvPortMalloc+0x118>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	431a      	orrs	r2, r3
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8bc:	f7fe fda8 	bl	800a410 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3718      	adds	r7, #24
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	200372dc 	.word	0x200372dc
 800b8d0:	200372e8 	.word	0x200372e8
 800b8d4:	200372e0 	.word	0x200372e0
 800b8d8:	200372d4 	.word	0x200372d4
 800b8dc:	200372e4 	.word	0x200372e4

0800b8e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d027      	beq.n	800b942 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b8f2:	2308      	movs	r3, #8
 800b8f4:	425b      	negs	r3, r3
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	4b11      	ldr	r3, [pc, #68]	@ (800b94c <vPortFree+0x6c>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4013      	ands	r3, r2
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d019      	beq.n	800b942 <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d115      	bne.n	800b942 <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	685a      	ldr	r2, [r3, #4]
 800b91a:	4b0c      	ldr	r3, [pc, #48]	@ (800b94c <vPortFree+0x6c>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	43db      	mvns	r3, r3
 800b920:	401a      	ands	r2, r3
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b926:	f7fe fd65 	bl	800a3f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	4b08      	ldr	r3, [pc, #32]	@ (800b950 <vPortFree+0x70>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4413      	add	r3, r2
 800b934:	4a06      	ldr	r2, [pc, #24]	@ (800b950 <vPortFree+0x70>)
 800b936:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b938:	68b8      	ldr	r0, [r7, #8]
 800b93a:	f000 f87b 	bl	800ba34 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b93e:	f7fe fd67 	bl	800a410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b942:	bf00      	nop
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	200372e8 	.word	0x200372e8
 800b950:	200372e0 	.word	0x200372e0

0800b954 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800b954:	b480      	push	{r7}
 800b956:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800b958:	4b03      	ldr	r3, [pc, #12]	@ (800b968 <xPortGetFreeHeapSize+0x14>)
 800b95a:	681b      	ldr	r3, [r3, #0]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	200372e0 	.word	0x200372e0

0800b96c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b972:	4b29      	ldr	r3, [pc, #164]	@ (800ba18 <prvHeapInit+0xac>)
 800b974:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b976:	4b29      	ldr	r3, [pc, #164]	@ (800ba1c <prvHeapInit+0xb0>)
 800b978:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f003 0307 	and.w	r3, r3, #7
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00c      	beq.n	800b99e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	3307      	adds	r3, #7
 800b988:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f023 0307 	bic.w	r3, r3, #7
 800b990:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	4a20      	ldr	r2, [pc, #128]	@ (800ba1c <prvHeapInit+0xb0>)
 800b99a:	4413      	add	r3, r2
 800b99c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9a2:	4a1f      	ldr	r2, [pc, #124]	@ (800ba20 <prvHeapInit+0xb4>)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b9a8:	4b1d      	ldr	r3, [pc, #116]	@ (800ba20 <prvHeapInit+0xb4>)
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9b6:	2208      	movs	r2, #8
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	1a9b      	subs	r3, r3, r2
 800b9bc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f023 0307 	bic.w	r3, r3, #7
 800b9c4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	4a16      	ldr	r2, [pc, #88]	@ (800ba24 <prvHeapInit+0xb8>)
 800b9ca:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b9cc:	4b15      	ldr	r3, [pc, #84]	@ (800ba24 <prvHeapInit+0xb8>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b9d4:	4b13      	ldr	r3, [pc, #76]	@ (800ba24 <prvHeapInit+0xb8>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	1ad2      	subs	r2, r2, r3
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b9ea:	4b0e      	ldr	r3, [pc, #56]	@ (800ba24 <prvHeapInit+0xb8>)
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	4a0c      	ldr	r2, [pc, #48]	@ (800ba28 <prvHeapInit+0xbc>)
 800b9f8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	4a0b      	ldr	r2, [pc, #44]	@ (800ba2c <prvHeapInit+0xc0>)
 800ba00:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba02:	4b0b      	ldr	r3, [pc, #44]	@ (800ba30 <prvHeapInit+0xc4>)
 800ba04:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ba08:	601a      	str	r2, [r3, #0]
}
 800ba0a:	bf00      	nop
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	000186a0 	.word	0x000186a0
 800ba1c:	2001ec34 	.word	0x2001ec34
 800ba20:	200372d4 	.word	0x200372d4
 800ba24:	200372dc 	.word	0x200372dc
 800ba28:	200372e4 	.word	0x200372e4
 800ba2c:	200372e0 	.word	0x200372e0
 800ba30:	200372e8 	.word	0x200372e8

0800ba34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba3c:	4b28      	ldr	r3, [pc, #160]	@ (800bae0 <prvInsertBlockIntoFreeList+0xac>)
 800ba3e:	60fb      	str	r3, [r7, #12]
 800ba40:	e002      	b.n	800ba48 <prvInsertBlockIntoFreeList+0x14>
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	60fb      	str	r3, [r7, #12]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d8f7      	bhi.n	800ba42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d108      	bne.n	800ba76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	685a      	ldr	r2, [r3, #4]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	441a      	add	r2, r3
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	441a      	add	r2, r3
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d118      	bne.n	800babc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	4b15      	ldr	r3, [pc, #84]	@ (800bae4 <prvInsertBlockIntoFreeList+0xb0>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d00d      	beq.n	800bab2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	685a      	ldr	r2, [r3, #4]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	441a      	add	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	601a      	str	r2, [r3, #0]
 800bab0:	e008      	b.n	800bac4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bab2:	4b0c      	ldr	r3, [pc, #48]	@ (800bae4 <prvInsertBlockIntoFreeList+0xb0>)
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	601a      	str	r2, [r3, #0]
 800baba:	e003      	b.n	800bac4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d002      	beq.n	800bad2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bad2:	bf00      	nop
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	200372d4 	.word	0x200372d4
 800bae4:	200372dc 	.word	0x200372dc

0800bae8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	330c      	adds	r3, #12
 800baf8:	461a      	mov	r2, r3
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f003 fee9 	bl	800f8d4 <tcpip_send_msg_wait_sem>
 800bb02:	4603      	mov	r3, r0
 800bb04:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800bb06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d103      	bne.n	800bb16 <netconn_apimsg+0x2e>
    return apimsg->err;
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bb14:	e001      	b.n	800bb1a <netconn_apimsg+0x32>
  }
  return err;
 800bb16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
	...

0800bb24 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b08c      	sub	sp, #48	@ 0x30
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	603a      	str	r2, [r7, #0]
 800bb2e:	71fb      	strb	r3, [r7, #7]
 800bb30:	460b      	mov	r3, r1
 800bb32:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800bb34:	79fb      	ldrb	r3, [r7, #7]
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f001 f88b 	bl	800cc54 <netconn_alloc>
 800bb3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800bb40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d054      	beq.n	800bbf0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800bb46:	79bb      	ldrb	r3, [r7, #6]
 800bb48:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800bb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb4c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800bb4e:	f107 0308 	add.w	r3, r7, #8
 800bb52:	4619      	mov	r1, r3
 800bb54:	4829      	ldr	r0, [pc, #164]	@ (800bbfc <netconn_new_with_proto_and_callback+0xd8>)
 800bb56:	f7ff ffc7 	bl	800bae8 <netconn_apimsg>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800bb60:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d043      	beq.n	800bbf0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800bb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d005      	beq.n	800bb7c <netconn_new_with_proto_and_callback+0x58>
 800bb70:	4b23      	ldr	r3, [pc, #140]	@ (800bc00 <netconn_new_with_proto_and_callback+0xdc>)
 800bb72:	22a3      	movs	r2, #163	@ 0xa3
 800bb74:	4923      	ldr	r1, [pc, #140]	@ (800bc04 <netconn_new_with_proto_and_callback+0xe0>)
 800bb76:	4824      	ldr	r0, [pc, #144]	@ (800bc08 <netconn_new_with_proto_and_callback+0xe4>)
 800bb78:	f01d fbd4 	bl	8029324 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800bb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7e:	3310      	adds	r3, #16
 800bb80:	4618      	mov	r0, r3
 800bb82:	f00f ff1f 	bl	801b9c4 <sys_mbox_valid>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d105      	bne.n	800bb98 <netconn_new_with_proto_and_callback+0x74>
 800bb8c:	4b1c      	ldr	r3, [pc, #112]	@ (800bc00 <netconn_new_with_proto_and_callback+0xdc>)
 800bb8e:	22a4      	movs	r2, #164	@ 0xa4
 800bb90:	491e      	ldr	r1, [pc, #120]	@ (800bc0c <netconn_new_with_proto_and_callback+0xe8>)
 800bb92:	481d      	ldr	r0, [pc, #116]	@ (800bc08 <netconn_new_with_proto_and_callback+0xe4>)
 800bb94:	f01d fbc6 	bl	8029324 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800bb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb9a:	3314      	adds	r3, #20
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f00f ff11 	bl	801b9c4 <sys_mbox_valid>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d005      	beq.n	800bbb4 <netconn_new_with_proto_and_callback+0x90>
 800bba8:	4b15      	ldr	r3, [pc, #84]	@ (800bc00 <netconn_new_with_proto_and_callback+0xdc>)
 800bbaa:	22a6      	movs	r2, #166	@ 0xa6
 800bbac:	4918      	ldr	r1, [pc, #96]	@ (800bc10 <netconn_new_with_proto_and_callback+0xec>)
 800bbae:	4816      	ldr	r0, [pc, #88]	@ (800bc08 <netconn_new_with_proto_and_callback+0xe4>)
 800bbb0:	f01d fbb8 	bl	8029324 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800bbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbb6:	330c      	adds	r3, #12
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f00f ff91 	bl	801bae0 <sys_sem_valid>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d105      	bne.n	800bbd0 <netconn_new_with_proto_and_callback+0xac>
 800bbc4:	4b0e      	ldr	r3, [pc, #56]	@ (800bc00 <netconn_new_with_proto_and_callback+0xdc>)
 800bbc6:	22a9      	movs	r2, #169	@ 0xa9
 800bbc8:	4912      	ldr	r1, [pc, #72]	@ (800bc14 <netconn_new_with_proto_and_callback+0xf0>)
 800bbca:	480f      	ldr	r0, [pc, #60]	@ (800bc08 <netconn_new_with_proto_and_callback+0xe4>)
 800bbcc:	f01d fbaa 	bl	8029324 <iprintf>
      sys_sem_free(&conn->op_completed);
 800bbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbd2:	330c      	adds	r3, #12
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f00f ff76 	bl	801bac6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800bbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbdc:	3310      	adds	r3, #16
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f00f fe7c 	bl	801b8dc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800bbe4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbe6:	2007      	movs	r0, #7
 800bbe8:	f004 fca2 	bl	8010530 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800bbec:	2300      	movs	r3, #0
 800bbee:	e000      	b.n	800bbf2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800bbf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3730      	adds	r7, #48	@ 0x30
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	0800cc29 	.word	0x0800cc29
 800bc00:	0802b6a0 	.word	0x0802b6a0
 800bc04:	0802b6d4 	.word	0x0802b6d4
 800bc08:	0802b6f8 	.word	0x0802b6f8
 800bc0c:	0802b720 	.word	0x0802b720
 800bc10:	0802b738 	.word	0x0802b738
 800bc14:	0802b75c 	.word	0x0802b75c

0800bc18 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b08c      	sub	sp, #48	@ 0x30
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d101      	bne.n	800bc2a <netconn_prepare_delete+0x12>
    return ERR_OK;
 800bc26:	2300      	movs	r3, #0
 800bc28:	e014      	b.n	800bc54 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800bc2e:	2329      	movs	r3, #41	@ 0x29
 800bc30:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800bc32:	f107 030c 	add.w	r3, r7, #12
 800bc36:	4619      	mov	r1, r3
 800bc38:	4808      	ldr	r0, [pc, #32]	@ (800bc5c <netconn_prepare_delete+0x44>)
 800bc3a:	f7ff ff55 	bl	800bae8 <netconn_apimsg>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800bc44:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <netconn_prepare_delete+0x3a>
    return err;
 800bc4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bc50:	e000      	b.n	800bc54 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3730      	adds	r7, #48	@ 0x30
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	0800d19d 	.word	0x0800d19d

0800bc60 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <netconn_delete+0x12>
    return ERR_OK;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e00d      	b.n	800bc8e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7ff ffd0 	bl	800bc18 <netconn_prepare_delete>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800bc7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d102      	bne.n	800bc8a <netconn_delete+0x2a>
    netconn_free(conn);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f001 f857 	bl	800cd38 <netconn_free>
  }
  return err;
 800bc8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
	...

0800bc98 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b08e      	sub	sp, #56	@ 0x38
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d109      	bne.n	800bcc0 <netconn_getaddr+0x28>
 800bcac:	4b1d      	ldr	r3, [pc, #116]	@ (800bd24 <netconn_getaddr+0x8c>)
 800bcae:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800bcb2:	491d      	ldr	r1, [pc, #116]	@ (800bd28 <netconn_getaddr+0x90>)
 800bcb4:	481d      	ldr	r0, [pc, #116]	@ (800bd2c <netconn_getaddr+0x94>)
 800bcb6:	f01d fb35 	bl	8029324 <iprintf>
 800bcba:	f06f 030f 	mvn.w	r3, #15
 800bcbe:	e02d      	b.n	800bd1c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d109      	bne.n	800bcda <netconn_getaddr+0x42>
 800bcc6:	4b17      	ldr	r3, [pc, #92]	@ (800bd24 <netconn_getaddr+0x8c>)
 800bcc8:	f240 1213 	movw	r2, #275	@ 0x113
 800bccc:	4918      	ldr	r1, [pc, #96]	@ (800bd30 <netconn_getaddr+0x98>)
 800bcce:	4817      	ldr	r0, [pc, #92]	@ (800bd2c <netconn_getaddr+0x94>)
 800bcd0:	f01d fb28 	bl	8029324 <iprintf>
 800bcd4:	f06f 030f 	mvn.w	r3, #15
 800bcd8:	e020      	b.n	800bd1c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d109      	bne.n	800bcf4 <netconn_getaddr+0x5c>
 800bce0:	4b10      	ldr	r3, [pc, #64]	@ (800bd24 <netconn_getaddr+0x8c>)
 800bce2:	f44f 728a 	mov.w	r2, #276	@ 0x114
 800bce6:	4913      	ldr	r1, [pc, #76]	@ (800bd34 <netconn_getaddr+0x9c>)
 800bce8:	4810      	ldr	r0, [pc, #64]	@ (800bd2c <netconn_getaddr+0x94>)
 800bcea:	f01d fb1b 	bl	8029324 <iprintf>
 800bcee:	f06f 030f 	mvn.w	r3, #15
 800bcf2:	e013      	b.n	800bd1c <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800bcf8:	78fb      	ldrb	r3, [r7, #3]
 800bcfa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800bd06:	f107 0314 	add.w	r3, r7, #20
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	480a      	ldr	r0, [pc, #40]	@ (800bd38 <netconn_getaddr+0xa0>)
 800bd0e:	f7ff feeb 	bl	800bae8 <netconn_apimsg>
 800bd12:	4603      	mov	r3, r0
 800bd14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800bd18:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3738      	adds	r7, #56	@ 0x38
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	0802b6a0 	.word	0x0802b6a0
 800bd28:	0802b778 	.word	0x0802b778
 800bd2c:	0802b6f8 	.word	0x0802b6f8
 800bd30:	0802b798 	.word	0x0802b798
 800bd34:	0802b7b8 	.word	0x0802b7b8
 800bd38:	0800d999 	.word	0x0800d999

0800bd3c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b08e      	sub	sp, #56	@ 0x38
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	4613      	mov	r3, r2
 800bd48:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d109      	bne.n	800bd64 <netconn_bind+0x28>
 800bd50:	4b11      	ldr	r3, [pc, #68]	@ (800bd98 <netconn_bind+0x5c>)
 800bd52:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800bd56:	4911      	ldr	r1, [pc, #68]	@ (800bd9c <netconn_bind+0x60>)
 800bd58:	4811      	ldr	r0, [pc, #68]	@ (800bda0 <netconn_bind+0x64>)
 800bd5a:	f01d fae3 	bl	8029324 <iprintf>
 800bd5e:	f06f 030f 	mvn.w	r3, #15
 800bd62:	e015      	b.n	800bd90 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800bd6a:	4b0e      	ldr	r3, [pc, #56]	@ (800bda4 <netconn_bind+0x68>)
 800bd6c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800bd76:	88fb      	ldrh	r3, [r7, #6]
 800bd78:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800bd7a:	f107 0314 	add.w	r3, r7, #20
 800bd7e:	4619      	mov	r1, r3
 800bd80:	4809      	ldr	r0, [pc, #36]	@ (800bda8 <netconn_bind+0x6c>)
 800bd82:	f7ff feb1 	bl	800bae8 <netconn_apimsg>
 800bd86:	4603      	mov	r3, r0
 800bd88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800bd8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3738      	adds	r7, #56	@ 0x38
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	0802b6a0 	.word	0x0802b6a0
 800bd9c:	0802b7d8 	.word	0x0802b7d8
 800bda0:	0802b6f8 	.word	0x0802b6f8
 800bda4:	0802f50c 	.word	0x0802f50c
 800bda8:	0800d369 	.word	0x0800d369

0800bdac <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b088      	sub	sp, #32
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d109      	bne.n	800bdd8 <netconn_recv_data+0x2c>
 800bdc4:	4b5e      	ldr	r3, [pc, #376]	@ (800bf40 <netconn_recv_data+0x194>)
 800bdc6:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800bdca:	495e      	ldr	r1, [pc, #376]	@ (800bf44 <netconn_recv_data+0x198>)
 800bdcc:	485e      	ldr	r0, [pc, #376]	@ (800bf48 <netconn_recv_data+0x19c>)
 800bdce:	f01d faa9 	bl	8029324 <iprintf>
 800bdd2:	f06f 030f 	mvn.w	r3, #15
 800bdd6:	e0ae      	b.n	800bf36 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	2200      	movs	r2, #0
 800bddc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d109      	bne.n	800bdf8 <netconn_recv_data+0x4c>
 800bde4:	4b56      	ldr	r3, [pc, #344]	@ (800bf40 <netconn_recv_data+0x194>)
 800bde6:	f240 224a 	movw	r2, #586	@ 0x24a
 800bdea:	4958      	ldr	r1, [pc, #352]	@ (800bf4c <netconn_recv_data+0x1a0>)
 800bdec:	4856      	ldr	r0, [pc, #344]	@ (800bf48 <netconn_recv_data+0x19c>)
 800bdee:	f01d fa99 	bl	8029324 <iprintf>
 800bdf2:	f06f 030f 	mvn.w	r3, #15
 800bdf6:	e09e      	b.n	800bf36 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3310      	adds	r3, #16
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f00f fde1 	bl	801b9c4 <sys_mbox_valid>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10e      	bne.n	800be26 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f000 fb13 	bl	800c434 <netconn_err>
 800be0e:	4603      	mov	r3, r0
 800be10:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800be12:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d002      	beq.n	800be20 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800be1a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800be1e:	e08a      	b.n	800bf36 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 800be20:	f06f 030a 	mvn.w	r3, #10
 800be24:	e087      	b.n	800bf36 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be2c:	f003 0302 	and.w	r3, r3, #2
 800be30:	2b00      	cmp	r3, #0
 800be32:	d110      	bne.n	800be56 <netconn_recv_data+0xaa>
 800be34:	79fb      	ldrb	r3, [r7, #7]
 800be36:	f003 0304 	and.w	r3, r3, #4
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d10b      	bne.n	800be56 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be44:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d104      	bne.n	800be56 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d024      	beq.n	800bea0 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3310      	adds	r3, #16
 800be5a:	f107 0218 	add.w	r2, r7, #24
 800be5e:	4611      	mov	r1, r2
 800be60:	4618      	mov	r0, r3
 800be62:	f00f fd98 	bl	801b996 <sys_arch_mbox_tryfetch>
 800be66:	4603      	mov	r3, r0
 800be68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be6c:	d129      	bne.n	800bec2 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f000 fae0 	bl	800c434 <netconn_err>
 800be74:	4603      	mov	r3, r0
 800be76:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800be78:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 800be80:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800be84:	e057      	b.n	800bf36 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be8c:	f003 0301 	and.w	r3, r3, #1
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <netconn_recv_data+0xee>
        return ERR_CONN;
 800be94:	f06f 030a 	mvn.w	r3, #10
 800be98:	e04d      	b.n	800bf36 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 800be9a:	f06f 0306 	mvn.w	r3, #6
 800be9e:	e04a      	b.n	800bf36 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f103 0010 	add.w	r0, r3, #16
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	69da      	ldr	r2, [r3, #28]
 800beaa:	f107 0318 	add.w	r3, r7, #24
 800beae:	4619      	mov	r1, r3
 800beb0:	f00f fd40 	bl	801b934 <sys_arch_mbox_fetch>
 800beb4:	4603      	mov	r3, r0
 800beb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800beba:	d102      	bne.n	800bec2 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 800bebc:	f06f 0302 	mvn.w	r3, #2
 800bec0:	e039      	b.n	800bf36 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800beca:	2b10      	cmp	r3, #16
 800becc:	d117      	bne.n	800befe <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	f107 0217 	add.w	r2, r7, #23
 800bed4:	4611      	mov	r1, r2
 800bed6:	4618      	mov	r0, r3
 800bed8:	f000 fb3e 	bl	800c558 <lwip_netconn_is_err_msg>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d009      	beq.n	800bef6 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800bee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bee6:	f113 0f0f 	cmn.w	r3, #15
 800beea:	d101      	bne.n	800bef0 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	e022      	b.n	800bf36 <netconn_recv_data+0x18a>
      }
      return err;
 800bef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bef4:	e01f      	b.n	800bf36 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	891b      	ldrh	r3, [r3, #8]
 800befa:	83fb      	strh	r3, [r7, #30]
 800befc:	e00d      	b.n	800bf1a <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d106      	bne.n	800bf12 <netconn_recv_data+0x166>
 800bf04:	4b0e      	ldr	r3, [pc, #56]	@ (800bf40 <netconn_recv_data+0x194>)
 800bf06:	f240 2291 	movw	r2, #657	@ 0x291
 800bf0a:	4911      	ldr	r1, [pc, #68]	@ (800bf50 <netconn_recv_data+0x1a4>)
 800bf0c:	480e      	ldr	r0, [pc, #56]	@ (800bf48 <netconn_recv_data+0x19c>)
 800bf0e:	f01d fa09 	bl	8029324 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	891b      	ldrh	r3, [r3, #8]
 800bf18:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d005      	beq.n	800bf2e <netconn_recv_data+0x182>
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf26:	8bfa      	ldrh	r2, [r7, #30]
 800bf28:	2101      	movs	r1, #1
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800bf2e:	69ba      	ldr	r2, [r7, #24]
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3720      	adds	r7, #32
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	0802b6a0 	.word	0x0802b6a0
 800bf44:	0802b8b8 	.word	0x0802b8b8
 800bf48:	0802b6f8 	.word	0x0802b6f8
 800bf4c:	0802b8d8 	.word	0x0802b8d8
 800bf50:	0802b8f4 	.word	0x0802b8f4

0800bf54 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d005      	beq.n	800bf72 <netconn_tcp_recvd_msg+0x1e>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf6e:	2b10      	cmp	r3, #16
 800bf70:	d009      	beq.n	800bf86 <netconn_tcp_recvd_msg+0x32>
 800bf72:	4b0c      	ldr	r3, [pc, #48]	@ (800bfa4 <netconn_tcp_recvd_msg+0x50>)
 800bf74:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800bf78:	490b      	ldr	r1, [pc, #44]	@ (800bfa8 <netconn_tcp_recvd_msg+0x54>)
 800bf7a:	480c      	ldr	r0, [pc, #48]	@ (800bfac <netconn_tcp_recvd_msg+0x58>)
 800bf7c:	f01d f9d2 	bl	8029324 <iprintf>
 800bf80:	f06f 030f 	mvn.w	r3, #15
 800bf84:	e00a      	b.n	800bf9c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	68ba      	ldr	r2, [r7, #8]
 800bf90:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800bf92:	6879      	ldr	r1, [r7, #4]
 800bf94:	4806      	ldr	r0, [pc, #24]	@ (800bfb0 <netconn_tcp_recvd_msg+0x5c>)
 800bf96:	f7ff fda7 	bl	800bae8 <netconn_apimsg>
 800bf9a:	4603      	mov	r3, r0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	0802b6a0 	.word	0x0802b6a0
 800bfa8:	0802b900 	.word	0x0802b900
 800bfac:	0802b6f8 	.word	0x0802b6f8
 800bfb0:	0800d477 	.word	0x0800d477

0800bfb4 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b08c      	sub	sp, #48	@ 0x30
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d005      	beq.n	800bfd0 <netconn_tcp_recvd+0x1c>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bfcc:	2b10      	cmp	r3, #16
 800bfce:	d009      	beq.n	800bfe4 <netconn_tcp_recvd+0x30>
 800bfd0:	4b0c      	ldr	r3, [pc, #48]	@ (800c004 <netconn_tcp_recvd+0x50>)
 800bfd2:	f240 22b5 	movw	r2, #693	@ 0x2b5
 800bfd6:	490c      	ldr	r1, [pc, #48]	@ (800c008 <netconn_tcp_recvd+0x54>)
 800bfd8:	480c      	ldr	r0, [pc, #48]	@ (800c00c <netconn_tcp_recvd+0x58>)
 800bfda:	f01d f9a3 	bl	8029324 <iprintf>
 800bfde:	f06f 030f 	mvn.w	r3, #15
 800bfe2:	e00b      	b.n	800bffc <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800bfe4:	f107 030c 	add.w	r3, r7, #12
 800bfe8:	461a      	mov	r2, r3
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f7ff ffb1 	bl	800bf54 <netconn_tcp_recvd_msg>
 800bff2:	4603      	mov	r3, r0
 800bff4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800bff8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3730      	adds	r7, #48	@ 0x30
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	0802b6a0 	.word	0x0802b6a0
 800c008:	0802b900 	.word	0x0802b900
 800c00c:	0802b6f8 	.word	0x0802b6f8

0800c010 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b090      	sub	sp, #64	@ 0x40
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	4613      	mov	r3, r2
 800c01c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3310      	adds	r3, #16
 800c022:	4618      	mov	r0, r3
 800c024:	f00f fcce 	bl	801b9c4 <sys_mbox_valid>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d102      	bne.n	800c034 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800c02e:	f06f 030a 	mvn.w	r3, #10
 800c032:	e072      	b.n	800c11a <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c03a:	b25b      	sxtb	r3, r3
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	da09      	bge.n	800c054 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c04a:	b2da      	uxtb	r2, r3
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 800c052:	e03b      	b.n	800c0cc <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c054:	79fb      	ldrb	r3, [r7, #7]
 800c056:	461a      	mov	r2, r3
 800c058:	68b9      	ldr	r1, [r7, #8]
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f7ff fea6 	bl	800bdac <netconn_recv_data>
 800c060:	4603      	mov	r3, r0
 800c062:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800c066:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d002      	beq.n	800c074 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800c06e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c072:	e052      	b.n	800c11a <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800c07a:	79fb      	ldrb	r3, [r7, #7]
 800c07c:	f003 0308 	and.w	r3, r3, #8
 800c080:	2b00      	cmp	r3, #0
 800c082:	d10e      	bne.n	800c0a2 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800c084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c086:	2b00      	cmp	r3, #0
 800c088:	d002      	beq.n	800c090 <netconn_recv_data_tcp+0x80>
 800c08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c08c:	891b      	ldrh	r3, [r3, #8]
 800c08e:	e000      	b.n	800c092 <netconn_recv_data_tcp+0x82>
 800c090:	2301      	movs	r3, #1
 800c092:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800c094:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c096:	f107 0214 	add.w	r2, r7, #20
 800c09a:	4619      	mov	r1, r3
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f7ff ff59 	bl	800bf54 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d136      	bne.n	800c116 <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 800c0a8:	79fb      	ldrb	r3, [r7, #7]
 800c0aa:	f003 0310 	and.w	r3, r3, #16
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00b      	beq.n	800c0ca <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c0b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c0bc:	b2da      	uxtb	r2, r3
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 800c0c4:	f06f 0306 	mvn.w	r3, #6
 800c0c8:	e027      	b.n	800c11a <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 800c0ca:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d005      	beq.n	800c0e0 <netconn_recv_data_tcp+0xd0>
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d8:	2200      	movs	r2, #0
 800c0da:	2101      	movs	r1, #1
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d10f      	bne.n	800c108 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f000 f9a3 	bl	800c434 <netconn_err>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800c0f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <netconn_recv_data_tcp+0xf2>
          return err;
 800c0fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c100:	e00b      	b.n	800c11a <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 800c102:	f06f 030d 	mvn.w	r3, #13
 800c106:	e008      	b.n	800c11a <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800c108:	2101      	movs	r1, #1
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f000 f962 	bl	800c3d4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800c110:	f06f 030e 	mvn.w	r3, #14
 800c114:	e001      	b.n	800c11a <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 800c116:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3740      	adds	r7, #64	@ 0x40
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
	...

0800c124 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	4613      	mov	r3, r2
 800c130:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d005      	beq.n	800c144 <netconn_recv_tcp_pbuf_flags+0x20>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c140:	2b10      	cmp	r3, #16
 800c142:	d009      	beq.n	800c158 <netconn_recv_tcp_pbuf_flags+0x34>
 800c144:	4b0a      	ldr	r3, [pc, #40]	@ (800c170 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800c146:	f240 3225 	movw	r2, #805	@ 0x325
 800c14a:	490a      	ldr	r1, [pc, #40]	@ (800c174 <netconn_recv_tcp_pbuf_flags+0x50>)
 800c14c:	480a      	ldr	r0, [pc, #40]	@ (800c178 <netconn_recv_tcp_pbuf_flags+0x54>)
 800c14e:	f01d f8e9 	bl	8029324 <iprintf>
 800c152:	f06f 030f 	mvn.w	r3, #15
 800c156:	e006      	b.n	800c166 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800c158:	79fb      	ldrb	r3, [r7, #7]
 800c15a:	461a      	mov	r2, r3
 800c15c:	68b9      	ldr	r1, [r7, #8]
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f7ff ff56 	bl	800c010 <netconn_recv_data_tcp>
 800c164:	4603      	mov	r3, r0
}
 800c166:	4618      	mov	r0, r3
 800c168:	3710      	adds	r7, #16
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	0802b6a0 	.word	0x0802b6a0
 800c174:	0802b900 	.word	0x0802b900
 800c178:	0802b6f8 	.word	0x0802b6f8

0800c17c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	4613      	mov	r3, r2
 800c188:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d005      	beq.n	800c19c <netconn_recv_udp_raw_netbuf_flags+0x20>
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c198:	2b10      	cmp	r3, #16
 800c19a:	d109      	bne.n	800c1b0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800c19c:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c8 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800c19e:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800c1a2:	490a      	ldr	r1, [pc, #40]	@ (800c1cc <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800c1a4:	480a      	ldr	r0, [pc, #40]	@ (800c1d0 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800c1a6:	f01d f8bd 	bl	8029324 <iprintf>
 800c1aa:	f06f 030f 	mvn.w	r3, #15
 800c1ae:	e006      	b.n	800c1be <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c1b0:	79fb      	ldrb	r3, [r7, #7]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	68b9      	ldr	r1, [r7, #8]
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f7ff fdf8 	bl	800bdac <netconn_recv_data>
 800c1bc:	4603      	mov	r3, r0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	0802b6a0 	.word	0x0802b6a0
 800c1cc:	0802b924 	.word	0x0802b924
 800c1d0:	0802b6f8 	.word	0x0802b6f8

0800c1d4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b08c      	sub	sp, #48	@ 0x30
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d109      	bne.n	800c1f8 <netconn_send+0x24>
 800c1e4:	4b0e      	ldr	r3, [pc, #56]	@ (800c220 <netconn_send+0x4c>)
 800c1e6:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800c1ea:	490e      	ldr	r1, [pc, #56]	@ (800c224 <netconn_send+0x50>)
 800c1ec:	480e      	ldr	r0, [pc, #56]	@ (800c228 <netconn_send+0x54>)
 800c1ee:	f01d f899 	bl	8029324 <iprintf>
 800c1f2:	f06f 030f 	mvn.w	r3, #15
 800c1f6:	e00e      	b.n	800c216 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800c200:	f107 030c 	add.w	r3, r7, #12
 800c204:	4619      	mov	r1, r3
 800c206:	4809      	ldr	r0, [pc, #36]	@ (800c22c <netconn_send+0x58>)
 800c208:	f7ff fc6e 	bl	800bae8 <netconn_apimsg>
 800c20c:	4603      	mov	r3, r0
 800c20e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c212:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c216:	4618      	mov	r0, r3
 800c218:	3730      	adds	r7, #48	@ 0x30
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	0802b6a0 	.word	0x0802b6a0
 800c224:	0802b95c 	.word	0x0802b95c
 800c228:	0802b6f8 	.word	0x0802b6f8
 800c22c:	0800d3dd 	.word	0x0800d3dd

0800c230 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b088      	sub	sp, #32
 800c234:	af02      	add	r7, sp, #8
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
 800c23c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800c246:	78fa      	ldrb	r2, [r7, #3]
 800c248:	f107 0110 	add.w	r1, r7, #16
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	4613      	mov	r3, r2
 800c252:	2201      	movs	r2, #1
 800c254:	68f8      	ldr	r0, [r7, #12]
 800c256:	f000 f805 	bl	800c264 <netconn_write_vectors_partly>
 800c25a:	4603      	mov	r3, r0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3718      	adds	r7, #24
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b092      	sub	sp, #72	@ 0x48
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	4611      	mov	r1, r2
 800c270:	461a      	mov	r2, r3
 800c272:	460b      	mov	r3, r1
 800c274:	80fb      	strh	r3, [r7, #6]
 800c276:	4613      	mov	r3, r2
 800c278:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d109      	bne.n	800c294 <netconn_write_vectors_partly+0x30>
 800c280:	4b4e      	ldr	r3, [pc, #312]	@ (800c3bc <netconn_write_vectors_partly+0x158>)
 800c282:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c286:	494e      	ldr	r1, [pc, #312]	@ (800c3c0 <netconn_write_vectors_partly+0x15c>)
 800c288:	484e      	ldr	r0, [pc, #312]	@ (800c3c4 <netconn_write_vectors_partly+0x160>)
 800c28a:	f01d f84b 	bl	8029324 <iprintf>
 800c28e:	f06f 030f 	mvn.w	r3, #15
 800c292:	e08f      	b.n	800c3b4 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c29c:	2b10      	cmp	r3, #16
 800c29e:	d009      	beq.n	800c2b4 <netconn_write_vectors_partly+0x50>
 800c2a0:	4b46      	ldr	r3, [pc, #280]	@ (800c3bc <netconn_write_vectors_partly+0x158>)
 800c2a2:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800c2a6:	4948      	ldr	r1, [pc, #288]	@ (800c3c8 <netconn_write_vectors_partly+0x164>)
 800c2a8:	4846      	ldr	r0, [pc, #280]	@ (800c3c4 <netconn_write_vectors_partly+0x160>)
 800c2aa:	f01d f83b 	bl	8029324 <iprintf>
 800c2ae:	f06f 0305 	mvn.w	r3, #5
 800c2b2:	e07f      	b.n	800c3b4 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c2ba:	f003 0302 	and.w	r3, r3, #2
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d104      	bne.n	800c2cc <netconn_write_vectors_partly+0x68>
 800c2c2:	797b      	ldrb	r3, [r7, #5]
 800c2c4:	f003 0304 	and.w	r3, r3, #4
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d001      	beq.n	800c2d0 <netconn_write_vectors_partly+0x6c>
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e000      	b.n	800c2d2 <netconn_write_vectors_partly+0x6e>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800c2d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d005      	beq.n	800c2ea <netconn_write_vectors_partly+0x86>
 800c2de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d102      	bne.n	800c2ea <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800c2e4:	f06f 0305 	mvn.w	r3, #5
 800c2e8:	e064      	b.n	800c3b4 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2f2:	e015      	b.n	800c320 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 800c2f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c300:	4413      	add	r3, r2
 800c302:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800c304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	4413      	add	r3, r2
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c310:	429a      	cmp	r2, r3
 800c312:	d202      	bcs.n	800c31a <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 800c314:	f06f 0305 	mvn.w	r3, #5
 800c318:	e04c      	b.n	800c3b4 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 800c31a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c31c:	3301      	adds	r3, #1
 800c31e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c320:	88fb      	ldrh	r3, [r7, #6]
 800c322:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c324:	429a      	cmp	r2, r3
 800c326:	dbe5      	blt.n	800c2f4 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 800c328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 800c32e:	2300      	movs	r3, #0
 800c330:	e040      	b.n	800c3b4 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 800c332:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c334:	2b00      	cmp	r3, #0
 800c336:	da0a      	bge.n	800c34e <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800c338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d102      	bne.n	800c344 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 800c33e:	f06f 0305 	mvn.w	r3, #5
 800c342:	e037      	b.n	800c3b4 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800c344:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c348:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800c34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c34c:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800c356:	88fb      	ldrh	r3, [r7, #6]
 800c358:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800c35e:	797b      	ldrb	r3, [r7, #5]
 800c360:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800c364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c366:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800c368:	2300      	movs	r3, #0
 800c36a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800c36c:	f107 0314 	add.w	r3, r7, #20
 800c370:	4619      	mov	r1, r3
 800c372:	4816      	ldr	r0, [pc, #88]	@ (800c3cc <netconn_write_vectors_partly+0x168>)
 800c374:	f7ff fbb8 	bl	800bae8 <netconn_apimsg>
 800c378:	4603      	mov	r3, r0
 800c37a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800c37e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c382:	2b00      	cmp	r3, #0
 800c384:	d114      	bne.n	800c3b0 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 800c386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d002      	beq.n	800c392 <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800c38c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c38e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c390:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800c392:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c396:	2b00      	cmp	r3, #0
 800c398:	d10a      	bne.n	800c3b0 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800c39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c39c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d006      	beq.n	800c3b0 <netconn_write_vectors_partly+0x14c>
 800c3a2:	4b06      	ldr	r3, [pc, #24]	@ (800c3bc <netconn_write_vectors_partly+0x158>)
 800c3a4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c3a8:	4909      	ldr	r1, [pc, #36]	@ (800c3d0 <netconn_write_vectors_partly+0x16c>)
 800c3aa:	4806      	ldr	r0, [pc, #24]	@ (800c3c4 <netconn_write_vectors_partly+0x160>)
 800c3ac:	f01c ffba 	bl	8029324 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800c3b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3748      	adds	r7, #72	@ 0x48
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	0802b6a0 	.word	0x0802b6a0
 800c3c0:	0802b978 	.word	0x0802b978
 800c3c4:	0802b6f8 	.word	0x0802b6f8
 800c3c8:	0802b994 	.word	0x0802b994
 800c3cc:	0800d881 	.word	0x0800d881
 800c3d0:	0802b9b8 	.word	0x0802b9b8

0800c3d4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b08c      	sub	sp, #48	@ 0x30
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	460b      	mov	r3, r1
 800c3de:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d109      	bne.n	800c3fa <netconn_close_shutdown+0x26>
 800c3e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c424 <netconn_close_shutdown+0x50>)
 800c3e8:	f240 4247 	movw	r2, #1095	@ 0x447
 800c3ec:	490e      	ldr	r1, [pc, #56]	@ (800c428 <netconn_close_shutdown+0x54>)
 800c3ee:	480f      	ldr	r0, [pc, #60]	@ (800c42c <netconn_close_shutdown+0x58>)
 800c3f0:	f01c ff98 	bl	8029324 <iprintf>
 800c3f4:	f06f 030f 	mvn.w	r3, #15
 800c3f8:	e010      	b.n	800c41c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800c3fe:	78fb      	ldrb	r3, [r7, #3]
 800c400:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c402:	2329      	movs	r3, #41	@ 0x29
 800c404:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800c406:	f107 030c 	add.w	r3, r7, #12
 800c40a:	4619      	mov	r1, r3
 800c40c:	4808      	ldr	r0, [pc, #32]	@ (800c430 <netconn_close_shutdown+0x5c>)
 800c40e:	f7ff fb6b 	bl	800bae8 <netconn_apimsg>
 800c412:	4603      	mov	r3, r0
 800c414:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c418:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3730      	adds	r7, #48	@ 0x30
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	0802b6a0 	.word	0x0802b6a0
 800c428:	0802b9dc 	.word	0x0802b9dc
 800c42c:	0802b6f8 	.word	0x0802b6f8
 800c430:	0800daa5 	.word	0x0800daa5

0800c434 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d101      	bne.n	800c446 <netconn_err+0x12>
    return ERR_OK;
 800c442:	2300      	movs	r3, #0
 800c444:	e00d      	b.n	800c462 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800c446:	f00f fbc7 	bl	801bbd8 <sys_arch_protect>
 800c44a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	7a1b      	ldrb	r3, [r3, #8]
 800c450:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f00f fbcb 	bl	801bbf4 <sys_arch_unprotect>
  return err;
 800c45e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
	...

0800c46c <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b08e      	sub	sp, #56	@ 0x38
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
 800c478:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d109      	bne.n	800c494 <netconn_join_leave_group+0x28>
 800c480:	4b15      	ldr	r3, [pc, #84]	@ (800c4d8 <netconn_join_leave_group+0x6c>)
 800c482:	f240 42a5 	movw	r2, #1189	@ 0x4a5
 800c486:	4915      	ldr	r1, [pc, #84]	@ (800c4dc <netconn_join_leave_group+0x70>)
 800c488:	4815      	ldr	r0, [pc, #84]	@ (800c4e0 <netconn_join_leave_group+0x74>)
 800c48a:	f01c ff4b 	bl	8029324 <iprintf>
 800c48e:	f06f 030f 	mvn.w	r3, #15
 800c492:	e01d      	b.n	800c4d0 <netconn_join_leave_group+0x64>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d101      	bne.n	800c49e <netconn_join_leave_group+0x32>
    multiaddr = IP4_ADDR_ANY;
 800c49a:	4b12      	ldr	r3, [pc, #72]	@ (800c4e4 <netconn_join_leave_group+0x78>)
 800c49c:	60bb      	str	r3, [r7, #8]
  }
  if (netif_addr == NULL) {
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d101      	bne.n	800c4a8 <netconn_join_leave_group+0x3c>
    netif_addr = IP4_ADDR_ANY;
 800c4a4:	4b0f      	ldr	r3, [pc, #60]	@ (800c4e4 <netconn_join_leave_group+0x78>)
 800c4a6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	623b      	str	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
 800c4b4:	78fb      	ldrb	r3, [r7, #3]
 800c4b6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
 800c4ba:	f107 0314 	add.w	r3, r7, #20
 800c4be:	4619      	mov	r1, r3
 800c4c0:	4809      	ldr	r0, [pc, #36]	@ (800c4e8 <netconn_join_leave_group+0x7c>)
 800c4c2:	f7ff fb11 	bl	800bae8 <netconn_apimsg>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800c4cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3738      	adds	r7, #56	@ 0x38
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	0802b6a0 	.word	0x0802b6a0
 800c4dc:	0802b9f8 	.word	0x0802b9f8
 800c4e0:	0802b6f8 	.word	0x0802b6f8
 800c4e4:	0802f50c 	.word	0x0802f50c
 800c4e8:	0800dbbd 	.word	0x0800dbbd

0800c4ec <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800c4f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4fa:	f113 0f0d 	cmn.w	r3, #13
 800c4fe:	d009      	beq.n	800c514 <lwip_netconn_err_to_msg+0x28>
 800c500:	f113 0f0d 	cmn.w	r3, #13
 800c504:	dc0c      	bgt.n	800c520 <lwip_netconn_err_to_msg+0x34>
 800c506:	f113 0f0f 	cmn.w	r3, #15
 800c50a:	d007      	beq.n	800c51c <lwip_netconn_err_to_msg+0x30>
 800c50c:	f113 0f0e 	cmn.w	r3, #14
 800c510:	d002      	beq.n	800c518 <lwip_netconn_err_to_msg+0x2c>
 800c512:	e005      	b.n	800c520 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800c514:	4b0a      	ldr	r3, [pc, #40]	@ (800c540 <lwip_netconn_err_to_msg+0x54>)
 800c516:	e00e      	b.n	800c536 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800c518:	4b0a      	ldr	r3, [pc, #40]	@ (800c544 <lwip_netconn_err_to_msg+0x58>)
 800c51a:	e00c      	b.n	800c536 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800c51c:	4b0a      	ldr	r3, [pc, #40]	@ (800c548 <lwip_netconn_err_to_msg+0x5c>)
 800c51e:	e00a      	b.n	800c536 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800c520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d005      	beq.n	800c534 <lwip_netconn_err_to_msg+0x48>
 800c528:	4b08      	ldr	r3, [pc, #32]	@ (800c54c <lwip_netconn_err_to_msg+0x60>)
 800c52a:	227d      	movs	r2, #125	@ 0x7d
 800c52c:	4908      	ldr	r1, [pc, #32]	@ (800c550 <lwip_netconn_err_to_msg+0x64>)
 800c52e:	4809      	ldr	r0, [pc, #36]	@ (800c554 <lwip_netconn_err_to_msg+0x68>)
 800c530:	f01c fef8 	bl	8029324 <iprintf>
      return NULL;
 800c534:	2300      	movs	r3, #0
  }
}
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	0802f39c 	.word	0x0802f39c
 800c544:	0802f39d 	.word	0x0802f39d
 800c548:	0802f39e 	.word	0x0802f39e
 800c54c:	0802ba20 	.word	0x0802ba20
 800c550:	0802ba54 	.word	0x0802ba54
 800c554:	0802ba64 	.word	0x0802ba64

0800c558 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d105      	bne.n	800c574 <lwip_netconn_is_err_msg+0x1c>
 800c568:	4b12      	ldr	r3, [pc, #72]	@ (800c5b4 <lwip_netconn_is_err_msg+0x5c>)
 800c56a:	2285      	movs	r2, #133	@ 0x85
 800c56c:	4912      	ldr	r1, [pc, #72]	@ (800c5b8 <lwip_netconn_is_err_msg+0x60>)
 800c56e:	4813      	ldr	r0, [pc, #76]	@ (800c5bc <lwip_netconn_is_err_msg+0x64>)
 800c570:	f01c fed8 	bl	8029324 <iprintf>

  if (msg == &netconn_aborted) {
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a12      	ldr	r2, [pc, #72]	@ (800c5c0 <lwip_netconn_is_err_msg+0x68>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d104      	bne.n	800c586 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	22f3      	movs	r2, #243	@ 0xf3
 800c580:	701a      	strb	r2, [r3, #0]
    return 1;
 800c582:	2301      	movs	r3, #1
 800c584:	e012      	b.n	800c5ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4a0e      	ldr	r2, [pc, #56]	@ (800c5c4 <lwip_netconn_is_err_msg+0x6c>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d104      	bne.n	800c598 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	22f2      	movs	r2, #242	@ 0xf2
 800c592:	701a      	strb	r2, [r3, #0]
    return 1;
 800c594:	2301      	movs	r3, #1
 800c596:	e009      	b.n	800c5ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a0b      	ldr	r2, [pc, #44]	@ (800c5c8 <lwip_netconn_is_err_msg+0x70>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d104      	bne.n	800c5aa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	22f1      	movs	r2, #241	@ 0xf1
 800c5a4:	701a      	strb	r2, [r3, #0]
    return 1;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e000      	b.n	800c5ac <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	0802ba20 	.word	0x0802ba20
 800c5b8:	0802ba8c 	.word	0x0802ba8c
 800c5bc:	0802ba64 	.word	0x0802ba64
 800c5c0:	0802f39c 	.word	0x0802f39c
 800c5c4:	0802f39d 	.word	0x0802f39d
 800c5c8:	0802f39e 	.word	0x0802f39e

0800c5cc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b088      	sub	sp, #32
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
 800c5d8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d105      	bne.n	800c5ec <recv_udp+0x20>
 800c5e0:	4b34      	ldr	r3, [pc, #208]	@ (800c6b4 <recv_udp+0xe8>)
 800c5e2:	22e5      	movs	r2, #229	@ 0xe5
 800c5e4:	4934      	ldr	r1, [pc, #208]	@ (800c6b8 <recv_udp+0xec>)
 800c5e6:	4835      	ldr	r0, [pc, #212]	@ (800c6bc <recv_udp+0xf0>)
 800c5e8:	f01c fe9c 	bl	8029324 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d105      	bne.n	800c5fe <recv_udp+0x32>
 800c5f2:	4b30      	ldr	r3, [pc, #192]	@ (800c6b4 <recv_udp+0xe8>)
 800c5f4:	22e6      	movs	r2, #230	@ 0xe6
 800c5f6:	4932      	ldr	r1, [pc, #200]	@ (800c6c0 <recv_udp+0xf4>)
 800c5f8:	4830      	ldr	r0, [pc, #192]	@ (800c6bc <recv_udp+0xf0>)
 800c5fa:	f01c fe93 	bl	8029324 <iprintf>
  conn = (struct netconn *)arg;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d103      	bne.n	800c610 <recv_udp+0x44>
    pbuf_free(p);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f004 febd 	bl	8011388 <pbuf_free>
    return;
 800c60e:	e04d      	b.n	800c6ac <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	68ba      	ldr	r2, [r7, #8]
 800c616:	429a      	cmp	r2, r3
 800c618:	d005      	beq.n	800c626 <recv_udp+0x5a>
 800c61a:	4b26      	ldr	r3, [pc, #152]	@ (800c6b4 <recv_udp+0xe8>)
 800c61c:	22ee      	movs	r2, #238	@ 0xee
 800c61e:	4929      	ldr	r1, [pc, #164]	@ (800c6c4 <recv_udp+0xf8>)
 800c620:	4826      	ldr	r0, [pc, #152]	@ (800c6bc <recv_udp+0xf0>)
 800c622:	f01c fe7f 	bl	8029324 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	3310      	adds	r3, #16
 800c62a:	4618      	mov	r0, r3
 800c62c:	f00f f9ca 	bl	801b9c4 <sys_mbox_valid>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d103      	bne.n	800c63e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f004 fea6 	bl	8011388 <pbuf_free>
    return;
 800c63c:	e036      	b.n	800c6ac <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c63e:	2006      	movs	r0, #6
 800c640:	f003 ff00 	bl	8010444 <memp_malloc>
 800c644:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d103      	bne.n	800c654 <recv_udp+0x88>
    pbuf_free(p);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f004 fe9b 	bl	8011388 <pbuf_free>
    return;
 800c652:	e02b      	b.n	800c6ac <recv_udp+0xe0>
  } else {
    buf->p = p;
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d002      	beq.n	800c66c <recv_udp+0xa0>
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	e000      	b.n	800c66e <recv_udp+0xa2>
 800c66c:	2300      	movs	r3, #0
 800c66e:	69ba      	ldr	r2, [r7, #24]
 800c670:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c676:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	891b      	ldrh	r3, [r3, #8]
 800c67c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	3310      	adds	r3, #16
 800c682:	69b9      	ldr	r1, [r7, #24]
 800c684:	4618      	mov	r0, r3
 800c686:	f00f f93b 	bl	801b900 <sys_mbox_trypost>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d003      	beq.n	800c698 <recv_udp+0xcc>
    netbuf_delete(buf);
 800c690:	69b8      	ldr	r0, [r7, #24]
 800c692:	f001 faeb 	bl	800dc6c <netbuf_delete>
    return;
 800c696:	e009      	b.n	800c6ac <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d005      	beq.n	800c6ac <recv_udp+0xe0>
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6a4:	8afa      	ldrh	r2, [r7, #22]
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	69f8      	ldr	r0, [r7, #28]
 800c6aa:	4798      	blx	r3
  }
}
 800c6ac:	3720      	adds	r7, #32
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	0802ba20 	.word	0x0802ba20
 800c6b8:	0802ba98 	.word	0x0802ba98
 800c6bc:	0802ba64 	.word	0x0802ba64
 800c6c0:	0802babc 	.word	0x0802babc
 800c6c4:	0802badc 	.word	0x0802badc

0800c6c8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b088      	sub	sp, #32
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]
 800c6d4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d106      	bne.n	800c6ea <recv_tcp+0x22>
 800c6dc:	4b36      	ldr	r3, [pc, #216]	@ (800c7b8 <recv_tcp+0xf0>)
 800c6de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800c6e2:	4936      	ldr	r1, [pc, #216]	@ (800c7bc <recv_tcp+0xf4>)
 800c6e4:	4836      	ldr	r0, [pc, #216]	@ (800c7c0 <recv_tcp+0xf8>)
 800c6e6:	f01c fe1d 	bl	8029324 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d106      	bne.n	800c6fe <recv_tcp+0x36>
 800c6f0:	4b31      	ldr	r3, [pc, #196]	@ (800c7b8 <recv_tcp+0xf0>)
 800c6f2:	f240 122d 	movw	r2, #301	@ 0x12d
 800c6f6:	4933      	ldr	r1, [pc, #204]	@ (800c7c4 <recv_tcp+0xfc>)
 800c6f8:	4831      	ldr	r0, [pc, #196]	@ (800c7c0 <recv_tcp+0xf8>)
 800c6fa:	f01c fe13 	bl	8029324 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800c6fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d006      	beq.n	800c714 <recv_tcp+0x4c>
 800c706:	4b2c      	ldr	r3, [pc, #176]	@ (800c7b8 <recv_tcp+0xf0>)
 800c708:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800c70c:	492e      	ldr	r1, [pc, #184]	@ (800c7c8 <recv_tcp+0x100>)
 800c70e:	482c      	ldr	r0, [pc, #176]	@ (800c7c0 <recv_tcp+0xf8>)
 800c710:	f01c fe08 	bl	8029324 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d102      	bne.n	800c724 <recv_tcp+0x5c>
    return ERR_VAL;
 800c71e:	f06f 0305 	mvn.w	r3, #5
 800c722:	e045      	b.n	800c7b0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d006      	beq.n	800c73c <recv_tcp+0x74>
 800c72e:	4b22      	ldr	r3, [pc, #136]	@ (800c7b8 <recv_tcp+0xf0>)
 800c730:	f240 1235 	movw	r2, #309	@ 0x135
 800c734:	4925      	ldr	r1, [pc, #148]	@ (800c7cc <recv_tcp+0x104>)
 800c736:	4822      	ldr	r0, [pc, #136]	@ (800c7c0 <recv_tcp+0xf8>)
 800c738:	f01c fdf4 	bl	8029324 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	3310      	adds	r3, #16
 800c740:	4618      	mov	r0, r3
 800c742:	f00f f93f 	bl	801b9c4 <sys_mbox_valid>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10d      	bne.n	800c768 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d008      	beq.n	800c764 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	891b      	ldrh	r3, [r3, #8]
 800c756:	4619      	mov	r1, r3
 800c758:	68b8      	ldr	r0, [r7, #8]
 800c75a:	f005 fd2d 	bl	80121b8 <tcp_recved>
      pbuf_free(p);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f004 fe12 	bl	8011388 <pbuf_free>
    }
    return ERR_OK;
 800c764:	2300      	movs	r3, #0
 800c766:	e023      	b.n	800c7b0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d005      	beq.n	800c77a <recv_tcp+0xb2>
    msg = p;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	891b      	ldrh	r3, [r3, #8]
 800c776:	83fb      	strh	r3, [r7, #30]
 800c778:	e003      	b.n	800c782 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800c77a:	4b15      	ldr	r3, [pc, #84]	@ (800c7d0 <recv_tcp+0x108>)
 800c77c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	3310      	adds	r3, #16
 800c786:	69b9      	ldr	r1, [r7, #24]
 800c788:	4618      	mov	r0, r3
 800c78a:	f00f f8b9 	bl	801b900 <sys_mbox_trypost>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d002      	beq.n	800c79a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800c794:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c798:	e00a      	b.n	800c7b0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d005      	beq.n	800c7ae <recv_tcp+0xe6>
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7a6:	8bfa      	ldrh	r2, [r7, #30]
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	6978      	ldr	r0, [r7, #20]
 800c7ac:	4798      	blx	r3
  }

  return ERR_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3720      	adds	r7, #32
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	0802ba20 	.word	0x0802ba20
 800c7bc:	0802bafc 	.word	0x0802bafc
 800c7c0:	0802ba64 	.word	0x0802ba64
 800c7c4:	0802bb20 	.word	0x0802bb20
 800c7c8:	0802bb40 	.word	0x0802bb40
 800c7cc:	0802bb58 	.word	0x0802bb58
 800c7d0:	0802f39e 	.word	0x0802f39e

0800c7d4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d106      	bne.n	800c7f6 <poll_tcp+0x22>
 800c7e8:	4b2b      	ldr	r3, [pc, #172]	@ (800c898 <poll_tcp+0xc4>)
 800c7ea:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800c7ee:	492b      	ldr	r1, [pc, #172]	@ (800c89c <poll_tcp+0xc8>)
 800c7f0:	482b      	ldr	r0, [pc, #172]	@ (800c8a0 <poll_tcp+0xcc>)
 800c7f2:	f01c fd97 	bl	8029324 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	785b      	ldrb	r3, [r3, #1]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d104      	bne.n	800c808 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c7fe:	2101      	movs	r1, #1
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f000 fe6d 	bl	800d4e0 <lwip_netconn_do_writemore>
 800c806:	e016      	b.n	800c836 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	785b      	ldrb	r3, [r3, #1]
 800c80c:	2b04      	cmp	r3, #4
 800c80e:	d112      	bne.n	800c836 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00a      	beq.n	800c82e <poll_tcp+0x5a>
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c81c:	7a5b      	ldrb	r3, [r3, #9]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d005      	beq.n	800c82e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c826:	7a5a      	ldrb	r2, [r3, #9]
 800c828:	3a01      	subs	r2, #1
 800c82a:	b2d2      	uxtb	r2, r2
 800c82c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c82e:	2101      	movs	r1, #1
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f000 fb49 	bl	800cec8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c83c:	f003 0310 	and.w	r3, r3, #16
 800c840:	2b00      	cmp	r3, #0
 800c842:	d023      	beq.n	800c88c <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d01f      	beq.n	800c88c <poll_tcp+0xb8>
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c854:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800c858:	d318      	bcc.n	800c88c <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c862:	2b04      	cmp	r3, #4
 800c864:	d812      	bhi.n	800c88c <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c86c:	f023 0310 	bic.w	r3, r3, #16
 800c870:	b2da      	uxtb	r2, r3
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d005      	beq.n	800c88c <poll_tcp+0xb8>
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c884:	2200      	movs	r2, #0
 800c886:	2102      	movs	r1, #2
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c88c:	2300      	movs	r3, #0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	0802ba20 	.word	0x0802ba20
 800c89c:	0802bb78 	.word	0x0802bb78
 800c8a0:	0802ba64 	.word	0x0802ba64

0800c8a4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b086      	sub	sp, #24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d106      	bne.n	800c8ca <sent_tcp+0x26>
 800c8bc:	4b21      	ldr	r3, [pc, #132]	@ (800c944 <sent_tcp+0xa0>)
 800c8be:	f240 1293 	movw	r2, #403	@ 0x193
 800c8c2:	4921      	ldr	r1, [pc, #132]	@ (800c948 <sent_tcp+0xa4>)
 800c8c4:	4821      	ldr	r0, [pc, #132]	@ (800c94c <sent_tcp+0xa8>)
 800c8c6:	f01c fd2d 	bl	8029324 <iprintf>

  if (conn) {
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d034      	beq.n	800c93a <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	785b      	ldrb	r3, [r3, #1]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d104      	bne.n	800c8e2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c8d8:	2101      	movs	r1, #1
 800c8da:	6978      	ldr	r0, [r7, #20]
 800c8dc:	f000 fe00 	bl	800d4e0 <lwip_netconn_do_writemore>
 800c8e0:	e007      	b.n	800c8f2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	785b      	ldrb	r3, [r3, #1]
 800c8e6:	2b04      	cmp	r3, #4
 800c8e8:	d103      	bne.n	800c8f2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c8ea:	2101      	movs	r1, #1
 800c8ec:	6978      	ldr	r0, [r7, #20]
 800c8ee:	f000 faeb 	bl	800cec8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d01f      	beq.n	800c93a <sent_tcp+0x96>
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c902:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800c906:	d318      	bcc.n	800c93a <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c910:	2b04      	cmp	r3, #4
 800c912:	d812      	bhi.n	800c93a <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c91a:	f023 0310 	bic.w	r3, r3, #16
 800c91e:	b2da      	uxtb	r2, r3
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d005      	beq.n	800c93a <sent_tcp+0x96>
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c932:	88fa      	ldrh	r2, [r7, #6]
 800c934:	2102      	movs	r1, #2
 800c936:	6978      	ldr	r0, [r7, #20]
 800c938:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3718      	adds	r7, #24
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	0802ba20 	.word	0x0802ba20
 800c948:	0802bb78 	.word	0x0802bb78
 800c94c:	0802ba64 	.word	0x0802ba64

0800c950 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b088      	sub	sp, #32
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	460b      	mov	r3, r1
 800c95a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d106      	bne.n	800c974 <err_tcp+0x24>
 800c966:	4b61      	ldr	r3, [pc, #388]	@ (800caec <err_tcp+0x19c>)
 800c968:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800c96c:	4960      	ldr	r1, [pc, #384]	@ (800caf0 <err_tcp+0x1a0>)
 800c96e:	4861      	ldr	r0, [pc, #388]	@ (800caf4 <err_tcp+0x1a4>)
 800c970:	f01c fcd8 	bl	8029324 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800c974:	f00f f930 	bl	801bbd8 <sys_arch_protect>
 800c978:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	2200      	movs	r2, #0
 800c97e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	78fa      	ldrb	r2, [r7, #3]
 800c984:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c98c:	f043 0301 	orr.w	r3, r3, #1
 800c990:	b2da      	uxtb	r2, r3
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	785b      	ldrb	r3, [r3, #1]
 800c99c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800c9a4:	69b8      	ldr	r0, [r7, #24]
 800c9a6:	f00f f925 	bl	801bbf4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d005      	beq.n	800c9be <err_tcp+0x6e>
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	2104      	movs	r1, #4
 800c9ba:	69f8      	ldr	r0, [r7, #28]
 800c9bc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d005      	beq.n	800c9d2 <err_tcp+0x82>
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	69f8      	ldr	r0, [r7, #28]
 800c9d0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d005      	beq.n	800c9e6 <err_tcp+0x96>
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9de:	2200      	movs	r2, #0
 800c9e0:	2102      	movs	r1, #2
 800c9e2:	69f8      	ldr	r0, [r7, #28]
 800c9e4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800c9e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7ff fd7e 	bl	800c4ec <lwip_netconn_err_to_msg>
 800c9f0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	3310      	adds	r3, #16
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f00e ffe4 	bl	801b9c4 <sys_mbox_valid>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d005      	beq.n	800ca0e <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	3310      	adds	r3, #16
 800ca06:	6939      	ldr	r1, [r7, #16]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f00e ff79 	bl	801b900 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	3314      	adds	r3, #20
 800ca12:	4618      	mov	r0, r3
 800ca14:	f00e ffd6 	bl	801b9c4 <sys_mbox_valid>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d005      	beq.n	800ca2a <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800ca1e:	69fb      	ldr	r3, [r7, #28]
 800ca20:	3314      	adds	r3, #20
 800ca22:	6939      	ldr	r1, [r7, #16]
 800ca24:	4618      	mov	r0, r3
 800ca26:	f00e ff6b 	bl	801b900 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800ca2a:	7dfb      	ldrb	r3, [r7, #23]
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d005      	beq.n	800ca3c <err_tcp+0xec>
 800ca30:	7dfb      	ldrb	r3, [r7, #23]
 800ca32:	2b04      	cmp	r3, #4
 800ca34:	d002      	beq.n	800ca3c <err_tcp+0xec>
 800ca36:	7dfb      	ldrb	r3, [r7, #23]
 800ca38:	2b03      	cmp	r3, #3
 800ca3a:	d146      	bne.n	800caca <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca42:	f003 0304 	and.w	r3, r3, #4
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	bf14      	ite	ne
 800ca4a:	2301      	movne	r3, #1
 800ca4c:	2300      	moveq	r3, #0
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca58:	f023 0304 	bic.w	r3, r3, #4
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d13b      	bne.n	800cae2 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d106      	bne.n	800ca80 <err_tcp+0x130>
 800ca72:	4b1e      	ldr	r3, [pc, #120]	@ (800caec <err_tcp+0x19c>)
 800ca74:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ca78:	491f      	ldr	r1, [pc, #124]	@ (800caf8 <err_tcp+0x1a8>)
 800ca7a:	481e      	ldr	r0, [pc, #120]	@ (800caf4 <err_tcp+0x1a4>)
 800ca7c:	f01c fc52 	bl	8029324 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
 800ca82:	2b04      	cmp	r3, #4
 800ca84:	d104      	bne.n	800ca90 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	711a      	strb	r2, [r3, #4]
 800ca8e:	e003      	b.n	800ca98 <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca94:	78fa      	ldrb	r2, [r7, #3]
 800ca96:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	330c      	adds	r3, #12
 800caa0:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800caa2:	68b8      	ldr	r0, [r7, #8]
 800caa4:	f00f f81c 	bl	801bae0 <sys_sem_valid>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d106      	bne.n	800cabc <err_tcp+0x16c>
 800caae:	4b0f      	ldr	r3, [pc, #60]	@ (800caec <err_tcp+0x19c>)
 800cab0:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800cab4:	4911      	ldr	r1, [pc, #68]	@ (800cafc <err_tcp+0x1ac>)
 800cab6:	480f      	ldr	r0, [pc, #60]	@ (800caf4 <err_tcp+0x1a4>)
 800cab8:	f01c fc34 	bl	8029324 <iprintf>
      conn->current_msg = NULL;
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	2200      	movs	r2, #0
 800cac0:	625a      	str	r2, [r3, #36]	@ 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800cac2:	68b8      	ldr	r0, [r7, #8]
 800cac4:	f00e fff2 	bl	801baac <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800cac8:	e00b      	b.n	800cae2 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d008      	beq.n	800cae4 <err_tcp+0x194>
 800cad2:	4b06      	ldr	r3, [pc, #24]	@ (800caec <err_tcp+0x19c>)
 800cad4:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800cad8:	4909      	ldr	r1, [pc, #36]	@ (800cb00 <err_tcp+0x1b0>)
 800cada:	4806      	ldr	r0, [pc, #24]	@ (800caf4 <err_tcp+0x1a4>)
 800cadc:	f01c fc22 	bl	8029324 <iprintf>
  }
}
 800cae0:	e000      	b.n	800cae4 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 800cae2:	bf00      	nop
}
 800cae4:	bf00      	nop
 800cae6:	3720      	adds	r7, #32
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	0802ba20 	.word	0x0802ba20
 800caf0:	0802bb78 	.word	0x0802bb78
 800caf4:	0802ba64 	.word	0x0802ba64
 800caf8:	0802bb88 	.word	0x0802bb88
 800cafc:	0802bba4 	.word	0x0802bba4
 800cb00:	0802bbc0 	.word	0x0802bbc0

0800cb04 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800cb12:	6879      	ldr	r1, [r7, #4]
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f006 fa17 	bl	8012f48 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800cb1a:	490a      	ldr	r1, [pc, #40]	@ (800cb44 <setup_tcp+0x40>)
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f006 fa25 	bl	8012f6c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800cb22:	4909      	ldr	r1, [pc, #36]	@ (800cb48 <setup_tcp+0x44>)
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f006 fa43 	bl	8012fb0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800cb2a:	2202      	movs	r2, #2
 800cb2c:	4907      	ldr	r1, [pc, #28]	@ (800cb4c <setup_tcp+0x48>)
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f006 fa9a 	bl	8013068 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800cb34:	4906      	ldr	r1, [pc, #24]	@ (800cb50 <setup_tcp+0x4c>)
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	f006 fa5c 	bl	8012ff4 <tcp_err>
}
 800cb3c:	bf00      	nop
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	0800c6c9 	.word	0x0800c6c9
 800cb48:	0800c8a5 	.word	0x0800c8a5
 800cb4c:	0800c7d5 	.word	0x0800c7d5
 800cb50:	0800c951 	.word	0x0800c951

0800cb54 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800cb54:	b590      	push	{r4, r7, lr}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d006      	beq.n	800cb78 <pcb_new+0x24>
 800cb6a:	4b2b      	ldr	r3, [pc, #172]	@ (800cc18 <pcb_new+0xc4>)
 800cb6c:	f240 2265 	movw	r2, #613	@ 0x265
 800cb70:	492a      	ldr	r1, [pc, #168]	@ (800cc1c <pcb_new+0xc8>)
 800cb72:	482b      	ldr	r0, [pc, #172]	@ (800cc20 <pcb_new+0xcc>)
 800cb74:	f01c fbd6 	bl	8029324 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cb82:	2b10      	cmp	r3, #16
 800cb84:	d022      	beq.n	800cbcc <pcb_new+0x78>
 800cb86:	2b20      	cmp	r3, #32
 800cb88:	d133      	bne.n	800cbf2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681c      	ldr	r4, [r3, #0]
 800cb8e:	7bfb      	ldrb	r3, [r7, #15]
 800cb90:	4618      	mov	r0, r3
 800cb92:	f00b fcfd 	bl	8018590 <udp_new_ip_type>
 800cb96:	4603      	mov	r3, r0
 800cb98:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d02a      	beq.n	800cbfa <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	2b22      	cmp	r3, #34	@ 0x22
 800cbac:	d104      	bne.n	800cbb8 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6858      	ldr	r0, [r3, #4]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	4917      	ldr	r1, [pc, #92]	@ (800cc24 <pcb_new+0xd0>)
 800cbc6:	f00b fc67 	bl	8018498 <udp_recv>
      }
      break;
 800cbca:	e016      	b.n	800cbfa <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681c      	ldr	r4, [r3, #0]
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f006 f9aa 	bl	8012f2c <tcp_new_ip_type>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00b      	beq.n	800cbfe <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff ff8a 	bl	800cb04 <setup_tcp>
      }
      break;
 800cbf0:	e005      	b.n	800cbfe <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	22fa      	movs	r2, #250	@ 0xfa
 800cbf6:	711a      	strb	r2, [r3, #4]
      return;
 800cbf8:	e00a      	b.n	800cc10 <pcb_new+0xbc>
      break;
 800cbfa:	bf00      	nop
 800cbfc:	e000      	b.n	800cc00 <pcb_new+0xac>
      break;
 800cbfe:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d102      	bne.n	800cc10 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	22ff      	movs	r2, #255	@ 0xff
 800cc0e:	711a      	strb	r2, [r3, #4]
  }
}
 800cc10:	3714      	adds	r7, #20
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd90      	pop	{r4, r7, pc}
 800cc16:	bf00      	nop
 800cc18:	0802ba20 	.word	0x0802ba20
 800cc1c:	0802bc04 	.word	0x0802bc04
 800cc20:	0802ba64 	.word	0x0802ba64
 800cc24:	0800c5cd 	.word	0x0800c5cd

0800cc28 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2200      	movs	r2, #0
 800cc38:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d102      	bne.n	800cc4a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f7ff ff85 	bl	800cb54 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800cc4a:	bf00      	nop
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	6039      	str	r1, [r7, #0]
 800cc5e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800cc60:	2300      	movs	r3, #0
 800cc62:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800cc64:	2007      	movs	r0, #7
 800cc66:	f003 fbed 	bl	8010444 <memp_malloc>
 800cc6a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d101      	bne.n	800cc76 <netconn_alloc+0x22>
    return NULL;
 800cc72:	2300      	movs	r3, #0
 800cc74:	e056      	b.n	800cd24 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	79fa      	ldrb	r2, [r7, #7]
 800cc80:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2200      	movs	r2, #0
 800cc86:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800cc88:	79fb      	ldrb	r3, [r7, #7]
 800cc8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cc8e:	2b10      	cmp	r3, #16
 800cc90:	d004      	beq.n	800cc9c <netconn_alloc+0x48>
 800cc92:	2b20      	cmp	r3, #32
 800cc94:	d105      	bne.n	800cca2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800cc96:	2306      	movs	r3, #6
 800cc98:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800cc9a:	e00a      	b.n	800ccb2 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800cc9c:	2306      	movs	r3, #6
 800cc9e:	617b      	str	r3, [r7, #20]
      break;
 800cca0:	e007      	b.n	800ccb2 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800cca2:	4b22      	ldr	r3, [pc, #136]	@ (800cd2c <netconn_alloc+0xd8>)
 800cca4:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800cca8:	4921      	ldr	r1, [pc, #132]	@ (800cd30 <netconn_alloc+0xdc>)
 800ccaa:	4822      	ldr	r0, [pc, #136]	@ (800cd34 <netconn_alloc+0xe0>)
 800ccac:	f01c fb3a 	bl	8029324 <iprintf>
      goto free_and_return;
 800ccb0:	e033      	b.n	800cd1a <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	3310      	adds	r3, #16
 800ccb6:	6979      	ldr	r1, [r7, #20]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f00e fdf5 	bl	801b8a8 <sys_mbox_new>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d129      	bne.n	800cd18 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	330c      	adds	r3, #12
 800ccc8:	2100      	movs	r1, #0
 800ccca:	4618      	mov	r0, r3
 800cccc:	f00e fe98 	bl	801ba00 <sys_sem_new>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d005      	beq.n	800cce2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	3310      	adds	r3, #16
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f00e fdfe 	bl	801b8dc <sys_mbox_free>
    goto free_and_return;
 800cce0:	e01b      	b.n	800cd1a <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	3314      	adds	r3, #20
 800cce6:	4618      	mov	r0, r3
 800cce8:	f00e fe7d 	bl	801b9e6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ccf8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	683a      	ldr	r2, [r7, #0]
 800ccfe:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2200      	movs	r2, #0
 800cd04:	625a      	str	r2, [r3, #36]	@ 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	7cfa      	ldrb	r2, [r7, #19]
 800cd10:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	e005      	b.n	800cd24 <netconn_alloc+0xd0>
    goto free_and_return;
 800cd18:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800cd1a:	68f9      	ldr	r1, [r7, #12]
 800cd1c:	2007      	movs	r0, #7
 800cd1e:	f003 fc07 	bl	8010530 <memp_free>
  return NULL;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3718      	adds	r7, #24
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	0802ba20 	.word	0x0802ba20
 800cd30:	0802bc24 	.word	0x0802bc24
 800cd34:	0802ba64 	.word	0x0802ba64

0800cd38 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d006      	beq.n	800cd56 <netconn_free+0x1e>
 800cd48:	4b1b      	ldr	r3, [pc, #108]	@ (800cdb8 <netconn_free+0x80>)
 800cd4a:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800cd4e:	491b      	ldr	r1, [pc, #108]	@ (800cdbc <netconn_free+0x84>)
 800cd50:	481b      	ldr	r0, [pc, #108]	@ (800cdc0 <netconn_free+0x88>)
 800cd52:	f01c fae7 	bl	8029324 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	3310      	adds	r3, #16
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f00e fe32 	bl	801b9c4 <sys_mbox_valid>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d006      	beq.n	800cd74 <netconn_free+0x3c>
 800cd66:	4b14      	ldr	r3, [pc, #80]	@ (800cdb8 <netconn_free+0x80>)
 800cd68:	f240 3223 	movw	r2, #803	@ 0x323
 800cd6c:	4915      	ldr	r1, [pc, #84]	@ (800cdc4 <netconn_free+0x8c>)
 800cd6e:	4814      	ldr	r0, [pc, #80]	@ (800cdc0 <netconn_free+0x88>)
 800cd70:	f01c fad8 	bl	8029324 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	3314      	adds	r3, #20
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f00e fe23 	bl	801b9c4 <sys_mbox_valid>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d006      	beq.n	800cd92 <netconn_free+0x5a>
 800cd84:	4b0c      	ldr	r3, [pc, #48]	@ (800cdb8 <netconn_free+0x80>)
 800cd86:	f240 3226 	movw	r2, #806	@ 0x326
 800cd8a:	490f      	ldr	r1, [pc, #60]	@ (800cdc8 <netconn_free+0x90>)
 800cd8c:	480c      	ldr	r0, [pc, #48]	@ (800cdc0 <netconn_free+0x88>)
 800cd8e:	f01c fac9 	bl	8029324 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	330c      	adds	r3, #12
 800cd96:	4618      	mov	r0, r3
 800cd98:	f00e fe95 	bl	801bac6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	330c      	adds	r3, #12
 800cda0:	4618      	mov	r0, r3
 800cda2:	f00e feae 	bl	801bb02 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800cda6:	6879      	ldr	r1, [r7, #4]
 800cda8:	2007      	movs	r0, #7
 800cdaa:	f003 fbc1 	bl	8010530 <memp_free>
}
 800cdae:	bf00      	nop
 800cdb0:	3708      	adds	r7, #8
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	0802ba20 	.word	0x0802ba20
 800cdbc:	0802bc4c 	.word	0x0802bc4c
 800cdc0:	0802ba64 	.word	0x0802ba64
 800cdc4:	0802bc7c 	.word	0x0802bc7c
 800cdc8:	0802bcb8 	.word	0x0802bcb8

0800cdcc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	3310      	adds	r3, #16
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f00e fdf3 	bl	801b9c4 <sys_mbox_valid>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d02f      	beq.n	800ce44 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800cde4:	e018      	b.n	800ce18 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cdee:	2b10      	cmp	r3, #16
 800cdf0:	d10e      	bne.n	800ce10 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	f107 020f 	add.w	r2, r7, #15
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7ff fbac 	bl	800c558 <lwip_netconn_is_err_msg>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d108      	bne.n	800ce18 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f004 fabd 	bl	8011388 <pbuf_free>
 800ce0e:	e003      	b.n	800ce18 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	4618      	mov	r0, r3
 800ce14:	f000 ff2a 	bl	800dc6c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	3310      	adds	r3, #16
 800ce1c:	f107 0210 	add.w	r2, r7, #16
 800ce20:	4611      	mov	r1, r2
 800ce22:	4618      	mov	r0, r3
 800ce24:	f00e fdb7 	bl	801b996 <sys_arch_mbox_tryfetch>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce2e:	d1da      	bne.n	800cde6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	3310      	adds	r3, #16
 800ce34:	4618      	mov	r0, r3
 800ce36:	f00e fd51 	bl	801b8dc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	3310      	adds	r3, #16
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f00e fdd1 	bl	801b9e6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	3314      	adds	r3, #20
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f00e fdbb 	bl	801b9c4 <sys_mbox_valid>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d034      	beq.n	800cebe <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ce54:	e01d      	b.n	800ce92 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	f107 020e 	add.w	r2, r7, #14
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7ff fb7a 	bl	800c558 <lwip_netconn_is_err_msg>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d113      	bne.n	800ce92 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800ce6e:	6978      	ldr	r0, [r7, #20]
 800ce70:	f7ff ffac 	bl	800cdcc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d007      	beq.n	800ce8c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f005 f881 	bl	8011f88 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800ce8c:	6978      	ldr	r0, [r7, #20]
 800ce8e:	f7ff ff53 	bl	800cd38 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3314      	adds	r3, #20
 800ce96:	f107 0210 	add.w	r2, r7, #16
 800ce9a:	4611      	mov	r1, r2
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f00e fd7a 	bl	801b996 <sys_arch_mbox_tryfetch>
 800cea2:	4603      	mov	r3, r0
 800cea4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cea8:	d1d5      	bne.n	800ce56 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	3314      	adds	r3, #20
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f00e fd14 	bl	801b8dc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	3314      	adds	r3, #20
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f00e fd94 	bl	801b9e6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800cebe:	bf00      	nop
 800cec0:	3718      	adds	r7, #24
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
	...

0800cec8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b086      	sub	sp, #24
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	460b      	mov	r3, r1
 800ced2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d106      	bne.n	800ceec <lwip_netconn_do_close_internal+0x24>
 800cede:	4b87      	ldr	r3, [pc, #540]	@ (800d0fc <lwip_netconn_do_close_internal+0x234>)
 800cee0:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800cee4:	4986      	ldr	r1, [pc, #536]	@ (800d100 <lwip_netconn_do_close_internal+0x238>)
 800cee6:	4887      	ldr	r0, [pc, #540]	@ (800d104 <lwip_netconn_do_close_internal+0x23c>)
 800cee8:	f01c fa1c 	bl	8029324 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cef4:	2b10      	cmp	r3, #16
 800cef6:	d006      	beq.n	800cf06 <lwip_netconn_do_close_internal+0x3e>
 800cef8:	4b80      	ldr	r3, [pc, #512]	@ (800d0fc <lwip_netconn_do_close_internal+0x234>)
 800cefa:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800cefe:	4982      	ldr	r1, [pc, #520]	@ (800d108 <lwip_netconn_do_close_internal+0x240>)
 800cf00:	4880      	ldr	r0, [pc, #512]	@ (800d104 <lwip_netconn_do_close_internal+0x23c>)
 800cf02:	f01c fa0f 	bl	8029324 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	785b      	ldrb	r3, [r3, #1]
 800cf0a:	2b04      	cmp	r3, #4
 800cf0c:	d006      	beq.n	800cf1c <lwip_netconn_do_close_internal+0x54>
 800cf0e:	4b7b      	ldr	r3, [pc, #492]	@ (800d0fc <lwip_netconn_do_close_internal+0x234>)
 800cf10:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800cf14:	497d      	ldr	r1, [pc, #500]	@ (800d10c <lwip_netconn_do_close_internal+0x244>)
 800cf16:	487b      	ldr	r0, [pc, #492]	@ (800d104 <lwip_netconn_do_close_internal+0x23c>)
 800cf18:	f01c fa04 	bl	8029324 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d106      	bne.n	800cf32 <lwip_netconn_do_close_internal+0x6a>
 800cf24:	4b75      	ldr	r3, [pc, #468]	@ (800d0fc <lwip_netconn_do_close_internal+0x234>)
 800cf26:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800cf2a:	4979      	ldr	r1, [pc, #484]	@ (800d110 <lwip_netconn_do_close_internal+0x248>)
 800cf2c:	4875      	ldr	r0, [pc, #468]	@ (800d104 <lwip_netconn_do_close_internal+0x23c>)
 800cf2e:	f01c f9f9 	bl	8029324 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d106      	bne.n	800cf48 <lwip_netconn_do_close_internal+0x80>
 800cf3a:	4b70      	ldr	r3, [pc, #448]	@ (800d0fc <lwip_netconn_do_close_internal+0x234>)
 800cf3c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800cf40:	4974      	ldr	r1, [pc, #464]	@ (800d114 <lwip_netconn_do_close_internal+0x24c>)
 800cf42:	4870      	ldr	r0, [pc, #448]	@ (800d104 <lwip_netconn_do_close_internal+0x23c>)
 800cf44:	f01c f9ee 	bl	8029324 <iprintf>

  tpcb = conn->pcb.tcp;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf52:	7a1b      	ldrb	r3, [r3, #8]
 800cf54:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800cf56:	7bfb      	ldrb	r3, [r7, #15]
 800cf58:	f003 0301 	and.w	r3, r3, #1
 800cf5c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800cf5e:	7bfb      	ldrb	r3, [r7, #15]
 800cf60:	f003 0302 	and.w	r3, r3, #2
 800cf64:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800cf66:	7bfb      	ldrb	r3, [r7, #15]
 800cf68:	2b03      	cmp	r3, #3
 800cf6a:	d102      	bne.n	800cf72 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	75bb      	strb	r3, [r7, #22]
 800cf70:	e01f      	b.n	800cfb2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800cf72:	7bbb      	ldrb	r3, [r7, #14]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00e      	beq.n	800cf96 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800cf7c:	2b05      	cmp	r3, #5
 800cf7e:	d007      	beq.n	800cf90 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800cf84:	2b06      	cmp	r3, #6
 800cf86:	d003      	beq.n	800cf90 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800cf8c:	2b08      	cmp	r3, #8
 800cf8e:	d102      	bne.n	800cf96 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800cf90:	2301      	movs	r3, #1
 800cf92:	75bb      	strb	r3, [r7, #22]
 800cf94:	e00d      	b.n	800cfb2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800cf96:	7b7b      	ldrb	r3, [r7, #13]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d008      	beq.n	800cfae <lwip_netconn_do_close_internal+0xe6>
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	8b5b      	ldrh	r3, [r3, #26]
 800cfa0:	f003 0310 	and.w	r3, r3, #16
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d002      	beq.n	800cfae <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	75bb      	strb	r3, [r7, #22]
 800cfac:	e001      	b.n	800cfb2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800cfb2:	7dbb      	ldrb	r3, [r7, #22]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d003      	beq.n	800cfc0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800cfb8:	2100      	movs	r1, #0
 800cfba:	6938      	ldr	r0, [r7, #16]
 800cfbc:	f005 ffc4 	bl	8012f48 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	7d1b      	ldrb	r3, [r3, #20]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d104      	bne.n	800cfd2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800cfc8:	2100      	movs	r1, #0
 800cfca:	6938      	ldr	r0, [r7, #16]
 800cfcc:	f006 f834 	bl	8013038 <tcp_accept>
 800cfd0:	e01d      	b.n	800d00e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800cfd2:	7bbb      	ldrb	r3, [r7, #14]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d007      	beq.n	800cfe8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800cfd8:	2100      	movs	r1, #0
 800cfda:	6938      	ldr	r0, [r7, #16]
 800cfdc:	f005 ffc6 	bl	8012f6c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	6938      	ldr	r0, [r7, #16]
 800cfe4:	f006 f828 	bl	8013038 <tcp_accept>
    }
    if (shut_tx) {
 800cfe8:	7b7b      	ldrb	r3, [r7, #13]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d003      	beq.n	800cff6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800cfee:	2100      	movs	r1, #0
 800cff0:	6938      	ldr	r0, [r7, #16]
 800cff2:	f005 ffdd 	bl	8012fb0 <tcp_sent>
    }
    if (shut_close) {
 800cff6:	7dbb      	ldrb	r3, [r7, #22]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d008      	beq.n	800d00e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800cffc:	2200      	movs	r2, #0
 800cffe:	2100      	movs	r1, #0
 800d000:	6938      	ldr	r0, [r7, #16]
 800d002:	f006 f831 	bl	8013068 <tcp_poll>
      tcp_err(tpcb, NULL);
 800d006:	2100      	movs	r1, #0
 800d008:	6938      	ldr	r0, [r7, #16]
 800d00a:	f005 fff3 	bl	8012ff4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d00e:	7dbb      	ldrb	r3, [r7, #22]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d005      	beq.n	800d020 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d014:	6938      	ldr	r0, [r7, #16]
 800d016:	f004 fe71 	bl	8011cfc <tcp_close>
 800d01a:	4603      	mov	r3, r0
 800d01c:	75fb      	strb	r3, [r7, #23]
 800d01e:	e007      	b.n	800d030 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d020:	7bbb      	ldrb	r3, [r7, #14]
 800d022:	7b7a      	ldrb	r2, [r7, #13]
 800d024:	4619      	mov	r1, r3
 800d026:	6938      	ldr	r0, [r7, #16]
 800d028:	f004 fe94 	bl	8011d54 <tcp_shutdown>
 800d02c:	4603      	mov	r3, r0
 800d02e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800d030:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d102      	bne.n	800d03e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d038:	2301      	movs	r3, #1
 800d03a:	757b      	strb	r3, [r7, #21]
 800d03c:	e016      	b.n	800d06c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d03e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d042:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d046:	d10f      	bne.n	800d068 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d04c:	7a5b      	ldrb	r3, [r3, #9]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d10c      	bne.n	800d06c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d052:	2301      	movs	r3, #1
 800d054:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800d056:	7dbb      	ldrb	r3, [r7, #22]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d007      	beq.n	800d06c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d05c:	6938      	ldr	r0, [r7, #16]
 800d05e:	f004 ff93 	bl	8011f88 <tcp_abort>
          err = ERR_OK;
 800d062:	2300      	movs	r3, #0
 800d064:	75fb      	strb	r3, [r7, #23]
 800d066:	e001      	b.n	800d06c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d068:	2301      	movs	r3, #1
 800d06a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800d06c:	7d7b      	ldrb	r3, [r7, #21]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d052      	beq.n	800d118 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	330c      	adds	r3, #12
 800d07a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d080:	7dfa      	ldrb	r2, [r7, #23]
 800d082:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800d090:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d129      	bne.n	800d0ec <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800d098:	7dbb      	ldrb	r3, [r7, #22]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00c      	beq.n	800d0b8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d005      	beq.n	800d0b8 <lwip_netconn_do_close_internal+0x1f0>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	2104      	movs	r1, #4
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	4798      	blx	r3
      }
      if (shut_rx) {
 800d0b8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d009      	beq.n	800d0d2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d005      	beq.n	800d0d2 <lwip_netconn_do_close_internal+0x20a>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	4798      	blx	r3
      }
      if (shut_tx) {
 800d0d2:	7b7b      	ldrb	r3, [r7, #13]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d009      	beq.n	800d0ec <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d005      	beq.n	800d0ec <lwip_netconn_do_close_internal+0x224>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	2102      	movs	r1, #2
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d0ec:	78fb      	ldrb	r3, [r7, #3]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d002      	beq.n	800d0f8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800d0f2:	68b8      	ldr	r0, [r7, #8]
 800d0f4:	f00e fcda 	bl	801baac <sys_sem_signal>
    }
    return ERR_OK;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	e03c      	b.n	800d176 <lwip_netconn_do_close_internal+0x2ae>
 800d0fc:	0802ba20 	.word	0x0802ba20
 800d100:	0802bcf4 	.word	0x0802bcf4
 800d104:	0802ba64 	.word	0x0802ba64
 800d108:	0802bd04 	.word	0x0802bd04
 800d10c:	0802bd24 	.word	0x0802bd24
 800d110:	0802bd48 	.word	0x0802bd48
 800d114:	0802bb88 	.word	0x0802bb88
  }
  if (!close_finished) {
 800d118:	7d7b      	ldrb	r3, [r7, #21]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d11e      	bne.n	800d15c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	7d1b      	ldrb	r3, [r3, #20]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d106      	bne.n	800d134 <lwip_netconn_do_close_internal+0x26c>
 800d126:	4b16      	ldr	r3, [pc, #88]	@ (800d180 <lwip_netconn_do_close_internal+0x2b8>)
 800d128:	f240 4241 	movw	r2, #1089	@ 0x441
 800d12c:	4915      	ldr	r1, [pc, #84]	@ (800d184 <lwip_netconn_do_close_internal+0x2bc>)
 800d12e:	4816      	ldr	r0, [pc, #88]	@ (800d188 <lwip_netconn_do_close_internal+0x2c0>)
 800d130:	f01c f8f8 	bl	8029324 <iprintf>
    if (shut_tx) {
 800d134:	7b7b      	ldrb	r3, [r7, #13]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d003      	beq.n	800d142 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800d13a:	4914      	ldr	r1, [pc, #80]	@ (800d18c <lwip_netconn_do_close_internal+0x2c4>)
 800d13c:	6938      	ldr	r0, [r7, #16]
 800d13e:	f005 ff37 	bl	8012fb0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d142:	2201      	movs	r2, #1
 800d144:	4912      	ldr	r1, [pc, #72]	@ (800d190 <lwip_netconn_do_close_internal+0x2c8>)
 800d146:	6938      	ldr	r0, [r7, #16]
 800d148:	f005 ff8e 	bl	8013068 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d14c:	4911      	ldr	r1, [pc, #68]	@ (800d194 <lwip_netconn_do_close_internal+0x2cc>)
 800d14e:	6938      	ldr	r0, [r7, #16]
 800d150:	f005 ff50 	bl	8012ff4 <tcp_err>
    tcp_arg(tpcb, conn);
 800d154:	6879      	ldr	r1, [r7, #4]
 800d156:	6938      	ldr	r0, [r7, #16]
 800d158:	f005 fef6 	bl	8012f48 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d106      	bne.n	800d172 <lwip_netconn_do_close_internal+0x2aa>
 800d164:	4b06      	ldr	r3, [pc, #24]	@ (800d180 <lwip_netconn_do_close_internal+0x2b8>)
 800d166:	f240 424d 	movw	r2, #1101	@ 0x44d
 800d16a:	490b      	ldr	r1, [pc, #44]	@ (800d198 <lwip_netconn_do_close_internal+0x2d0>)
 800d16c:	4806      	ldr	r0, [pc, #24]	@ (800d188 <lwip_netconn_do_close_internal+0x2c0>)
 800d16e:	f01c f8d9 	bl	8029324 <iprintf>
  return err;
 800d172:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3718      	adds	r7, #24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	0802ba20 	.word	0x0802ba20
 800d184:	0802bd5c 	.word	0x0802bd5c
 800d188:	0802ba64 	.word	0x0802ba64
 800d18c:	0800c8a5 	.word	0x0800c8a5
 800d190:	0800c7d5 	.word	0x0800c7d5
 800d194:	0800c951 	.word	0x0800c951
 800d198:	0802bd80 	.word	0x0802bd80

0800d19c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	785b      	ldrb	r3, [r3, #1]
 800d1ae:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800d1b0:	7afb      	ldrb	r3, [r7, #11]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00d      	beq.n	800d1d2 <lwip_netconn_do_delconn+0x36>
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d1c0:	2b10      	cmp	r3, #16
 800d1c2:	d006      	beq.n	800d1d2 <lwip_netconn_do_delconn+0x36>
 800d1c4:	4b61      	ldr	r3, [pc, #388]	@ (800d34c <lwip_netconn_do_delconn+0x1b0>)
 800d1c6:	f240 425e 	movw	r2, #1118	@ 0x45e
 800d1ca:	4961      	ldr	r1, [pc, #388]	@ (800d350 <lwip_netconn_do_delconn+0x1b4>)
 800d1cc:	4861      	ldr	r0, [pc, #388]	@ (800d354 <lwip_netconn_do_delconn+0x1b8>)
 800d1ce:	f01c f8a9 	bl	8029324 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800d1d2:	7afb      	ldrb	r3, [r7, #11]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d005      	beq.n	800d1e4 <lwip_netconn_do_delconn+0x48>
 800d1d8:	7afb      	ldrb	r3, [r7, #11]
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d002      	beq.n	800d1e4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800d1de:	7afb      	ldrb	r3, [r7, #11]
 800d1e0:	2b03      	cmp	r3, #3
 800d1e2:	d10a      	bne.n	800d1fa <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800d1e4:	7afb      	ldrb	r3, [r7, #11]
 800d1e6:	2b03      	cmp	r3, #3
 800d1e8:	d10b      	bne.n	800d202 <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d1f2:	f003 0304 	and.w	r3, r3, #4
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d103      	bne.n	800d202 <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	22fb      	movs	r2, #251	@ 0xfb
 800d1fe:	711a      	strb	r2, [r3, #4]
 800d200:	e098      	b.n	800d334 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800d202:	7afb      	ldrb	r3, [r7, #11]
 800d204:	2b03      	cmp	r3, #3
 800d206:	d10e      	bne.n	800d226 <lwip_netconn_do_delconn+0x8a>
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d210:	f003 0304 	and.w	r3, r3, #4
 800d214:	2b00      	cmp	r3, #0
 800d216:	d106      	bne.n	800d226 <lwip_netconn_do_delconn+0x8a>
 800d218:	4b4c      	ldr	r3, [pc, #304]	@ (800d34c <lwip_netconn_do_delconn+0x1b0>)
 800d21a:	f240 427a 	movw	r2, #1146	@ 0x47a
 800d21e:	494e      	ldr	r1, [pc, #312]	@ (800d358 <lwip_netconn_do_delconn+0x1bc>)
 800d220:	484c      	ldr	r0, [pc, #304]	@ (800d354 <lwip_netconn_do_delconn+0x1b8>)
 800d222:	f01c f87f 	bl	8029324 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2200      	movs	r2, #0
 800d22a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4618      	mov	r0, r3
 800d232:	f7ff fdcb 	bl	800cdcc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d05f      	beq.n	800d300 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d24a:	2b10      	cmp	r3, #16
 800d24c:	d00d      	beq.n	800d26a <lwip_netconn_do_delconn+0xce>
 800d24e:	2b20      	cmp	r3, #32
 800d250:	d151      	bne.n	800d2f6 <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	625a      	str	r2, [r3, #36]	@ 0x24
          udp_remove(msg->conn->pcb.udp);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	4618      	mov	r0, r3
 800d264:	f00b f938 	bl	80184d8 <udp_remove>
          break;
 800d268:	e046      	b.n	800d2f8 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d270:	2b00      	cmp	r3, #0
 800d272:	d006      	beq.n	800d282 <lwip_netconn_do_delconn+0xe6>
 800d274:	4b35      	ldr	r3, [pc, #212]	@ (800d34c <lwip_netconn_do_delconn+0x1b0>)
 800d276:	f240 4294 	movw	r2, #1172	@ 0x494
 800d27a:	4938      	ldr	r1, [pc, #224]	@ (800d35c <lwip_netconn_do_delconn+0x1c0>)
 800d27c:	4835      	ldr	r0, [pc, #212]	@ (800d354 <lwip_netconn_do_delconn+0x1b8>)
 800d27e:	f01c f851 	bl	8029324 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2204      	movs	r2, #4
 800d288:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2203      	movs	r2, #3
 800d28e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2100      	movs	r1, #0
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7ff fe12 	bl	800cec8 <lwip_netconn_do_close_internal>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d04b      	beq.n	800d342 <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	785b      	ldrb	r3, [r3, #1]
 800d2b0:	2b04      	cmp	r3, #4
 800d2b2:	d006      	beq.n	800d2c2 <lwip_netconn_do_delconn+0x126>
 800d2b4:	4b25      	ldr	r3, [pc, #148]	@ (800d34c <lwip_netconn_do_delconn+0x1b0>)
 800d2b6:	f240 429a 	movw	r2, #1178	@ 0x49a
 800d2ba:	4929      	ldr	r1, [pc, #164]	@ (800d360 <lwip_netconn_do_delconn+0x1c4>)
 800d2bc:	4825      	ldr	r0, [pc, #148]	@ (800d354 <lwip_netconn_do_delconn+0x1b8>)
 800d2be:	f01c f831 	bl	8029324 <iprintf>
            UNLOCK_TCPIP_CORE();
 800d2c2:	4828      	ldr	r0, [pc, #160]	@ (800d364 <lwip_netconn_do_delconn+0x1c8>)
 800d2c4:	f00e fc5b 	bl	801bb7e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	330c      	adds	r3, #12
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f00e fbba 	bl	801ba4a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800d2d6:	4823      	ldr	r0, [pc, #140]	@ (800d364 <lwip_netconn_do_delconn+0x1c8>)
 800d2d8:	f00e fc42 	bl	801bb60 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	785b      	ldrb	r3, [r3, #1]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d02d      	beq.n	800d342 <lwip_netconn_do_delconn+0x1a6>
 800d2e6:	4b19      	ldr	r3, [pc, #100]	@ (800d34c <lwip_netconn_do_delconn+0x1b0>)
 800d2e8:	f240 429e 	movw	r2, #1182	@ 0x49e
 800d2ec:	491c      	ldr	r1, [pc, #112]	@ (800d360 <lwip_netconn_do_delconn+0x1c4>)
 800d2ee:	4819      	ldr	r0, [pc, #100]	@ (800d354 <lwip_netconn_do_delconn+0x1b8>)
 800d2f0:	f01c f818 	bl	8029324 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800d2f4:	e025      	b.n	800d342 <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800d2f6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d306:	2b00      	cmp	r3, #0
 800d308:	d007      	beq.n	800d31a <lwip_netconn_do_delconn+0x17e>
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d310:	68fa      	ldr	r2, [r7, #12]
 800d312:	6810      	ldr	r0, [r2, #0]
 800d314:	2200      	movs	r2, #0
 800d316:	2100      	movs	r1, #0
 800d318:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d320:	2b00      	cmp	r3, #0
 800d322:	d007      	beq.n	800d334 <lwip_netconn_do_delconn+0x198>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	6810      	ldr	r0, [r2, #0]
 800d32e:	2200      	movs	r2, #0
 800d330:	2102      	movs	r1, #2
 800d332:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	330c      	adds	r3, #12
 800d33a:	4618      	mov	r0, r3
 800d33c:	f00e fbd0 	bl	801bae0 <sys_sem_valid>
 800d340:	e000      	b.n	800d344 <lwip_netconn_do_delconn+0x1a8>
          return;
 800d342:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800d344:	3710      	adds	r7, #16
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	0802ba20 	.word	0x0802ba20
 800d350:	0802bd90 	.word	0x0802bd90
 800d354:	0802ba64 	.word	0x0802ba64
 800d358:	0802bda4 	.word	0x0802bda4
 800d35c:	0802bdc4 	.word	0x0802bdc4
 800d360:	0802bde0 	.word	0x0802bde0
 800d364:	2003736c 	.word	0x2003736c

0800d368 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d025      	beq.n	800d3ca <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d388:	2b10      	cmp	r3, #16
 800d38a:	d00e      	beq.n	800d3aa <lwip_netconn_do_bind+0x42>
 800d38c:	2b20      	cmp	r3, #32
 800d38e:	d119      	bne.n	800d3c4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	6858      	ldr	r0, [r3, #4]
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	6899      	ldr	r1, [r3, #8]
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	899b      	ldrh	r3, [r3, #12]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	f00a ffd8 	bl	8018354 <udp_bind>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	73fb      	strb	r3, [r7, #15]
        break;
 800d3a8:	e011      	b.n	800d3ce <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	6858      	ldr	r0, [r3, #4]
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	6899      	ldr	r1, [r3, #8]
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	899b      	ldrh	r3, [r3, #12]
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	f004 fdf1 	bl	8011fa0 <tcp_bind>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	73fb      	strb	r3, [r7, #15]
        break;
 800d3c2:	e004      	b.n	800d3ce <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800d3c4:	23fa      	movs	r3, #250	@ 0xfa
 800d3c6:	73fb      	strb	r3, [r7, #15]
        break;
 800d3c8:	e001      	b.n	800d3ce <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800d3ca:	23fa      	movs	r3, #250	@ 0xfa
 800d3cc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	7bfa      	ldrb	r2, [r7, #15]
 800d3d2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d3d4:	bf00      	nop
 800d3d6:	3710      	adds	r7, #16
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7ff f821 	bl	800c434 <netconn_err>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d3f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d134      	bne.n	800d468 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d02d      	beq.n	800d464 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d412:	2b20      	cmp	r3, #32
 800d414:	d123      	bne.n	800d45e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	689b      	ldr	r3, [r3, #8]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d10c      	bne.n	800d43a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4619      	mov	r1, r3
 800d42e:	4610      	mov	r0, r2
 800d430:	f00a fd62 	bl	8017ef8 <udp_send>
 800d434:	4603      	mov	r3, r0
 800d436:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800d438:	e016      	b.n	800d468 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6858      	ldr	r0, [r3, #4]
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	6819      	ldr	r1, [r3, #0]
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	f103 0208 	add.w	r2, r3, #8
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	899b      	ldrh	r3, [r3, #12]
 800d454:	f00a fd84 	bl	8017f60 <udp_sendto>
 800d458:	4603      	mov	r3, r0
 800d45a:	73fb      	strb	r3, [r7, #15]
          break;
 800d45c:	e004      	b.n	800d468 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800d45e:	23f5      	movs	r3, #245	@ 0xf5
 800d460:	73fb      	strb	r3, [r7, #15]
          break;
 800d462:	e001      	b.n	800d468 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800d464:	23f5      	movs	r3, #245	@ 0xf5
 800d466:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	7bfa      	ldrb	r2, [r7, #15]
 800d46c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d46e:	bf00      	nop
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b086      	sub	sp, #24
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	2200      	movs	r2, #0
 800d486:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d022      	beq.n	800d4d8 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d49c:	2b10      	cmp	r3, #16
 800d49e:	d11b      	bne.n	800d4d8 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	689b      	ldr	r3, [r3, #8]
 800d4a4:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4ac:	d202      	bcs.n	800d4b4 <lwip_netconn_do_recv+0x3e>
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	b29b      	uxth	r3, r3
 800d4b2:	e001      	b.n	800d4b8 <lwip_netconn_do_recv+0x42>
 800d4b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d4b8:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	89fa      	ldrh	r2, [r7, #14]
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f004 fe77 	bl	80121b8 <tcp_recved>
        remaining -= recved;
 800d4ca:	89fb      	ldrh	r3, [r7, #14]
 800d4cc:	697a      	ldr	r2, [r7, #20]
 800d4ce:	1ad3      	subs	r3, r2, r3
 800d4d0:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d1e6      	bne.n	800d4a6 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d4d8:	bf00      	nop
 800d4da:	3718      	adds	r7, #24
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b088      	sub	sp, #32
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d106      	bne.n	800d504 <lwip_netconn_do_writemore+0x24>
 800d4f6:	4b61      	ldr	r3, [pc, #388]	@ (800d67c <lwip_netconn_do_writemore+0x19c>)
 800d4f8:	f240 6273 	movw	r2, #1651	@ 0x673
 800d4fc:	4960      	ldr	r1, [pc, #384]	@ (800d680 <lwip_netconn_do_writemore+0x1a0>)
 800d4fe:	4861      	ldr	r0, [pc, #388]	@ (800d684 <lwip_netconn_do_writemore+0x1a4>)
 800d500:	f01b ff10 	bl	8029324 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	785b      	ldrb	r3, [r3, #1]
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d006      	beq.n	800d51a <lwip_netconn_do_writemore+0x3a>
 800d50c:	4b5b      	ldr	r3, [pc, #364]	@ (800d67c <lwip_netconn_do_writemore+0x19c>)
 800d50e:	f240 6274 	movw	r2, #1652	@ 0x674
 800d512:	495d      	ldr	r1, [pc, #372]	@ (800d688 <lwip_netconn_do_writemore+0x1a8>)
 800d514:	485b      	ldr	r0, [pc, #364]	@ (800d684 <lwip_netconn_do_writemore+0x1a4>)
 800d516:	f01b ff05 	bl	8029324 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d106      	bne.n	800d530 <lwip_netconn_do_writemore+0x50>
 800d522:	4b56      	ldr	r3, [pc, #344]	@ (800d67c <lwip_netconn_do_writemore+0x19c>)
 800d524:	f240 6275 	movw	r2, #1653	@ 0x675
 800d528:	4958      	ldr	r1, [pc, #352]	@ (800d68c <lwip_netconn_do_writemore+0x1ac>)
 800d52a:	4856      	ldr	r0, [pc, #344]	@ (800d684 <lwip_netconn_do_writemore+0x1a4>)
 800d52c:	f01b fefa 	bl	8029324 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d106      	bne.n	800d546 <lwip_netconn_do_writemore+0x66>
 800d538:	4b50      	ldr	r3, [pc, #320]	@ (800d67c <lwip_netconn_do_writemore+0x19c>)
 800d53a:	f240 6276 	movw	r2, #1654	@ 0x676
 800d53e:	4954      	ldr	r1, [pc, #336]	@ (800d690 <lwip_netconn_do_writemore+0x1b0>)
 800d540:	4850      	ldr	r0, [pc, #320]	@ (800d684 <lwip_netconn_do_writemore+0x1a4>)
 800d542:	f01b feef 	bl	8029324 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d54a:	699a      	ldr	r2, [r3, #24]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d550:	695b      	ldr	r3, [r3, #20]
 800d552:	429a      	cmp	r2, r3
 800d554:	d306      	bcc.n	800d564 <lwip_netconn_do_writemore+0x84>
 800d556:	4b49      	ldr	r3, [pc, #292]	@ (800d67c <lwip_netconn_do_writemore+0x19c>)
 800d558:	f240 6277 	movw	r2, #1655	@ 0x677
 800d55c:	494d      	ldr	r1, [pc, #308]	@ (800d694 <lwip_netconn_do_writemore+0x1b4>)
 800d55e:	4849      	ldr	r0, [pc, #292]	@ (800d684 <lwip_netconn_do_writemore+0x1a4>)
 800d560:	f01b fee0 	bl	8029324 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d568:	899b      	ldrh	r3, [r3, #12]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d106      	bne.n	800d57c <lwip_netconn_do_writemore+0x9c>
 800d56e:	4b43      	ldr	r3, [pc, #268]	@ (800d67c <lwip_netconn_do_writemore+0x19c>)
 800d570:	f240 6279 	movw	r2, #1657	@ 0x679
 800d574:	4948      	ldr	r1, [pc, #288]	@ (800d698 <lwip_netconn_do_writemore+0x1b8>)
 800d576:	4843      	ldr	r0, [pc, #268]	@ (800d684 <lwip_netconn_do_writemore+0x1a4>)
 800d578:	f01b fed4 	bl	8029324 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d580:	7f1b      	ldrb	r3, [r3, #28]
 800d582:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d58a:	f003 0302 	and.w	r3, r3, #2
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d104      	bne.n	800d59c <lwip_netconn_do_writemore+0xbc>
 800d592:	7ebb      	ldrb	r3, [r7, #26]
 800d594:	f003 0304 	and.w	r3, r3, #4
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d001      	beq.n	800d5a0 <lwip_netconn_do_writemore+0xc0>
 800d59c:	2301      	movs	r3, #1
 800d59e:	e000      	b.n	800d5a2 <lwip_netconn_do_writemore+0xc2>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5ba:	689b      	ldr	r3, [r3, #8]
 800d5bc:	685a      	ldr	r2, [r3, #4]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	1ad3      	subs	r3, r2, r3
 800d5c6:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5ce:	d307      	bcc.n	800d5e0 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 800d5d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d5d4:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d5d6:	7ebb      	ldrb	r3, [r7, #26]
 800d5d8:	f043 0302 	orr.w	r3, r3, #2
 800d5dc:	76bb      	strb	r3, [r7, #26]
 800d5de:	e001      	b.n	800d5e4 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d5ec:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800d5ee:	89fa      	ldrh	r2, [r7, #14]
 800d5f0:	8bbb      	ldrh	r3, [r7, #28]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d216      	bcs.n	800d624 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 800d5f6:	89fb      	ldrh	r3, [r7, #14]
 800d5f8:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800d5fa:	7e3b      	ldrb	r3, [r7, #24]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00d      	beq.n	800d61c <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 800d600:	8bbb      	ldrh	r3, [r7, #28]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d10e      	bne.n	800d624 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d60a:	699b      	ldr	r3, [r3, #24]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d102      	bne.n	800d616 <lwip_netconn_do_writemore+0x136>
 800d610:	f06f 0306 	mvn.w	r3, #6
 800d614:	e000      	b.n	800d618 <lwip_netconn_do_writemore+0x138>
 800d616:	2300      	movs	r3, #0
 800d618:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800d61a:	e08f      	b.n	800d73c <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800d61c:	7ebb      	ldrb	r3, [r7, #26]
 800d61e:	f043 0302 	orr.w	r3, r3, #2
 800d622:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d628:	691a      	ldr	r2, [r3, #16]
 800d62a:	8bbb      	ldrh	r3, [r7, #28]
 800d62c:	441a      	add	r2, r3
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	429a      	cmp	r2, r3
 800d638:	d906      	bls.n	800d648 <lwip_netconn_do_writemore+0x168>
 800d63a:	4b10      	ldr	r3, [pc, #64]	@ (800d67c <lwip_netconn_do_writemore+0x19c>)
 800d63c:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800d640:	4916      	ldr	r1, [pc, #88]	@ (800d69c <lwip_netconn_do_writemore+0x1bc>)
 800d642:	4810      	ldr	r0, [pc, #64]	@ (800d684 <lwip_netconn_do_writemore+0x1a4>)
 800d644:	f01b fe6e 	bl	8029324 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d648:	8bbb      	ldrh	r3, [r7, #28]
 800d64a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d64e:	4293      	cmp	r3, r2
 800d650:	d103      	bne.n	800d65a <lwip_netconn_do_writemore+0x17a>
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d658:	d209      	bcs.n	800d66e <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d65e:	8bba      	ldrh	r2, [r7, #28]
 800d660:	429a      	cmp	r2, r3
 800d662:	d11d      	bne.n	800d6a0 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d668:	899b      	ldrh	r3, [r3, #12]
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d918      	bls.n	800d6a0 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 800d66e:	2301      	movs	r3, #1
 800d670:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d672:	7ebb      	ldrb	r3, [r7, #26]
 800d674:	f043 0302 	orr.w	r3, r3, #2
 800d678:	76bb      	strb	r3, [r7, #26]
 800d67a:	e013      	b.n	800d6a4 <lwip_netconn_do_writemore+0x1c4>
 800d67c:	0802ba20 	.word	0x0802ba20
 800d680:	0802bb78 	.word	0x0802bb78
 800d684:	0802ba64 	.word	0x0802ba64
 800d688:	0802be80 	.word	0x0802be80
 800d68c:	0802bb88 	.word	0x0802bb88
 800d690:	0802bea0 	.word	0x0802bea0
 800d694:	0802beb8 	.word	0x0802beb8
 800d698:	0802bef8 	.word	0x0802bef8
 800d69c:	0802bf20 	.word	0x0802bf20
      } else {
        write_more = 0;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6858      	ldr	r0, [r3, #4]
 800d6a8:	7ebb      	ldrb	r3, [r7, #26]
 800d6aa:	8bba      	ldrh	r2, [r7, #28]
 800d6ac:	6979      	ldr	r1, [r7, #20]
 800d6ae:	f008 fb87 	bl	8015dc0 <tcp_write>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800d6b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d12c      	bne.n	800d718 <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6c2:	6999      	ldr	r1, [r3, #24]
 800d6c4:	8bba      	ldrh	r2, [r7, #28]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6ca:	440a      	add	r2, r1
 800d6cc:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6d2:	6919      	ldr	r1, [r3, #16]
 800d6d4:	8bba      	ldrh	r2, [r7, #28]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6da:	440a      	add	r2, r1
 800d6dc:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6e2:	691a      	ldr	r2, [r3, #16]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6e8:	689b      	ldr	r3, [r3, #8]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d113      	bne.n	800d718 <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6f4:	899a      	ldrh	r2, [r3, #12]
 800d6f6:	3a01      	subs	r2, #1
 800d6f8:	b292      	uxth	r2, r2
 800d6fa:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d700:	899b      	ldrh	r3, [r3, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d008      	beq.n	800d718 <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d70a:	689a      	ldr	r2, [r3, #8]
 800d70c:	3208      	adds	r2, #8
 800d70e:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d714:	2200      	movs	r2, #0
 800d716:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800d718:	7e7b      	ldrb	r3, [r7, #25]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d004      	beq.n	800d728 <lwip_netconn_do_writemore+0x248>
 800d71e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d722:	2b00      	cmp	r3, #0
 800d724:	f43f af3e 	beq.w	800d5a4 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800d728:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d004      	beq.n	800d73a <lwip_netconn_do_writemore+0x25a>
 800d730:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d734:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d738:	d136      	bne.n	800d7a8 <lwip_netconn_do_writemore+0x2c8>
err_mem:
 800d73a:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800d73c:	7e3b      	ldrb	r3, [r7, #24]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d01b      	beq.n	800d77a <lwip_netconn_do_writemore+0x29a>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d746:	699a      	ldr	r2, [r3, #24]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d74c:	695b      	ldr	r3, [r3, #20]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d213      	bcs.n	800d77a <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d756:	2b00      	cmp	r3, #0
 800d758:	d005      	beq.n	800d766 <lwip_netconn_do_writemore+0x286>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d75e:	2200      	movs	r2, #0
 800d760:	2103      	movs	r1, #3
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d76c:	f043 0310 	orr.w	r3, r3, #16
 800d770:	b2da      	uxtb	r2, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f883 2020 	strb.w	r2, [r3, #32]
 800d778:	e016      	b.n	800d7a8 <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d782:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800d786:	d305      	bcc.n	800d794 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d790:	2b04      	cmp	r3, #4
 800d792:	d909      	bls.n	800d7a8 <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d005      	beq.n	800d7a8 <lwip_netconn_do_writemore+0x2c8>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	2103      	movs	r1, #3
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800d7a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d11d      	bne.n	800d7ec <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7b4:	699a      	ldr	r2, [r3, #24]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ba:	695b      	ldr	r3, [r3, #20]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d002      	beq.n	800d7c6 <lwip_netconn_do_writemore+0x2e6>
 800d7c0:	7e3b      	ldrb	r3, [r7, #24]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d001      	beq.n	800d7ca <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f009 f8e0 	bl	8016994 <tcp_output>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800d7d8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800d7dc:	f113 0f04 	cmn.w	r3, #4
 800d7e0:	d12c      	bne.n	800d83c <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d7e2:	7b3b      	ldrb	r3, [r7, #12]
 800d7e4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	76fb      	strb	r3, [r7, #27]
 800d7ea:	e027      	b.n	800d83c <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 800d7ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7f4:	d120      	bne.n	800d838 <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f009 f8ca 	bl	8016994 <tcp_output>
 800d800:	4603      	mov	r3, r0
 800d802:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800d804:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d808:	f113 0f04 	cmn.w	r3, #4
 800d80c:	d104      	bne.n	800d818 <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d80e:	7b7b      	ldrb	r3, [r7, #13]
 800d810:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d812:	2301      	movs	r3, #1
 800d814:	76fb      	strb	r3, [r7, #27]
 800d816:	e011      	b.n	800d83c <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 800d818:	7e3b      	ldrb	r3, [r7, #24]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00e      	beq.n	800d83c <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d822:	699b      	ldr	r3, [r3, #24]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d102      	bne.n	800d82e <lwip_netconn_do_writemore+0x34e>
 800d828:	f06f 0306 	mvn.w	r3, #6
 800d82c:	e000      	b.n	800d830 <lwip_netconn_do_writemore+0x350>
 800d82e:	2300      	movs	r3, #0
 800d830:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d832:	2301      	movs	r3, #1
 800d834:	76fb      	strb	r3, [r7, #27]
 800d836:	e001      	b.n	800d83c <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800d838:	2301      	movs	r3, #1
 800d83a:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800d83c:	7efb      	ldrb	r3, [r7, #27]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d015      	beq.n	800d86e <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	330c      	adds	r3, #12
 800d84a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d850:	7ffa      	ldrb	r2, [r7, #31]
 800d852:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2200      	movs	r2, #0
 800d858:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d860:	78fb      	ldrb	r3, [r7, #3]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d006      	beq.n	800d874 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800d866:	68b8      	ldr	r0, [r7, #8]
 800d868:	f00e f920 	bl	801baac <sys_sem_signal>
 800d86c:	e002      	b.n	800d874 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800d86e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d872:	e000      	b.n	800d876 <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3720      	adds	r7, #32
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop

0800d880 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4618      	mov	r0, r3
 800d892:	f7fe fdcf 	bl	800c434 <netconn_err>
 800d896:	4603      	mov	r3, r0
 800d898:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d89a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d166      	bne.n	800d970 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d8ac:	2b10      	cmp	r3, #16
 800d8ae:	d15d      	bne.n	800d96c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	785b      	ldrb	r3, [r3, #1]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d002      	beq.n	800d8c0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800d8ba:	23fb      	movs	r3, #251	@ 0xfb
 800d8bc:	73fb      	strb	r3, [r7, #15]
 800d8be:	e057      	b.n	800d970 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d04d      	beq.n	800d966 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d006      	beq.n	800d8ea <lwip_netconn_do_write+0x6a>
 800d8dc:	4b28      	ldr	r3, [pc, #160]	@ (800d980 <lwip_netconn_do_write+0x100>)
 800d8de:	f240 7223 	movw	r2, #1827	@ 0x723
 800d8e2:	4928      	ldr	r1, [pc, #160]	@ (800d984 <lwip_netconn_do_write+0x104>)
 800d8e4:	4828      	ldr	r0, [pc, #160]	@ (800d988 <lwip_netconn_do_write+0x108>)
 800d8e6:	f01b fd1d 	bl	8029324 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	695b      	ldr	r3, [r3, #20]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d106      	bne.n	800d900 <lwip_netconn_do_write+0x80>
 800d8f2:	4b23      	ldr	r3, [pc, #140]	@ (800d980 <lwip_netconn_do_write+0x100>)
 800d8f4:	f240 7224 	movw	r2, #1828	@ 0x724
 800d8f8:	4924      	ldr	r1, [pc, #144]	@ (800d98c <lwip_netconn_do_write+0x10c>)
 800d8fa:	4823      	ldr	r0, [pc, #140]	@ (800d988 <lwip_netconn_do_write+0x108>)
 800d8fc:	f01b fd12 	bl	8029324 <iprintf>
        msg->conn->current_msg = msg;
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2100      	movs	r1, #0
 800d90e:	4618      	mov	r0, r3
 800d910:	f7ff fde6 	bl	800d4e0 <lwip_netconn_do_writemore>
 800d914:	4603      	mov	r3, r0
 800d916:	2b00      	cmp	r3, #0
 800d918:	d02e      	beq.n	800d978 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	785b      	ldrb	r3, [r3, #1]
 800d920:	2b01      	cmp	r3, #1
 800d922:	d006      	beq.n	800d932 <lwip_netconn_do_write+0xb2>
 800d924:	4b16      	ldr	r3, [pc, #88]	@ (800d980 <lwip_netconn_do_write+0x100>)
 800d926:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800d92a:	4919      	ldr	r1, [pc, #100]	@ (800d990 <lwip_netconn_do_write+0x110>)
 800d92c:	4816      	ldr	r0, [pc, #88]	@ (800d988 <lwip_netconn_do_write+0x108>)
 800d92e:	f01b fcf9 	bl	8029324 <iprintf>
          UNLOCK_TCPIP_CORE();
 800d932:	4818      	ldr	r0, [pc, #96]	@ (800d994 <lwip_netconn_do_write+0x114>)
 800d934:	f00e f923 	bl	801bb7e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	330c      	adds	r3, #12
 800d93e:	2100      	movs	r1, #0
 800d940:	4618      	mov	r0, r3
 800d942:	f00e f882 	bl	801ba4a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800d946:	4813      	ldr	r0, [pc, #76]	@ (800d994 <lwip_netconn_do_write+0x114>)
 800d948:	f00e f90a 	bl	801bb60 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	785b      	ldrb	r3, [r3, #1]
 800d952:	2b01      	cmp	r3, #1
 800d954:	d110      	bne.n	800d978 <lwip_netconn_do_write+0xf8>
 800d956:	4b0a      	ldr	r3, [pc, #40]	@ (800d980 <lwip_netconn_do_write+0x100>)
 800d958:	f240 722c 	movw	r2, #1836	@ 0x72c
 800d95c:	490c      	ldr	r1, [pc, #48]	@ (800d990 <lwip_netconn_do_write+0x110>)
 800d95e:	480a      	ldr	r0, [pc, #40]	@ (800d988 <lwip_netconn_do_write+0x108>)
 800d960:	f01b fce0 	bl	8029324 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800d964:	e008      	b.n	800d978 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800d966:	23f5      	movs	r3, #245	@ 0xf5
 800d968:	73fb      	strb	r3, [r7, #15]
 800d96a:	e001      	b.n	800d970 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800d96c:	23fa      	movs	r3, #250	@ 0xfa
 800d96e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	7bfa      	ldrb	r2, [r7, #15]
 800d974:	711a      	strb	r2, [r3, #4]
 800d976:	e000      	b.n	800d97a <lwip_netconn_do_write+0xfa>
        return;
 800d978:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	0802ba20 	.word	0x0802ba20
 800d984:	0802bdc4 	.word	0x0802bdc4
 800d988:	0802ba64 	.word	0x0802ba64
 800d98c:	0802bf4c 	.word	0x0802bf4c
 800d990:	0802bde0 	.word	0x0802bde0
 800d994:	2003736c 	.word	0x2003736c

0800d998 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d06b      	beq.n	800da86 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	7c1b      	ldrb	r3, [r3, #16]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d007      	beq.n	800d9c6 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	685a      	ldr	r2, [r3, #4]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	6812      	ldr	r2, [r2, #0]
 800d9c2:	601a      	str	r2, [r3, #0]
 800d9c4:	e006      	b.n	800d9d4 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	685a      	ldr	r2, [r3, #4]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	689b      	ldr	r3, [r3, #8]
 800d9d0:	6852      	ldr	r2, [r2, #4]
 800d9d2:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d9e4:	2b10      	cmp	r3, #16
 800d9e6:	d021      	beq.n	800da2c <lwip_netconn_do_getaddr+0x94>
 800d9e8:	2b20      	cmp	r3, #32
 800d9ea:	d144      	bne.n	800da76 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	7c1b      	ldrb	r3, [r3, #16]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d007      	beq.n	800da04 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	685a      	ldr	r2, [r3, #4]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	8a52      	ldrh	r2, [r2, #18]
 800da00:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800da02:	e044      	b.n	800da8e <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	7c1b      	ldrb	r3, [r3, #16]
 800da0c:	f003 0304 	and.w	r3, r3, #4
 800da10:	2b00      	cmp	r3, #0
 800da12:	d103      	bne.n	800da1c <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	22f5      	movs	r2, #245	@ 0xf5
 800da18:	711a      	strb	r2, [r3, #4]
        break;
 800da1a:	e038      	b.n	800da8e <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	685a      	ldr	r2, [r3, #4]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	68db      	ldr	r3, [r3, #12]
 800da26:	8a92      	ldrh	r2, [r2, #20]
 800da28:	801a      	strh	r2, [r3, #0]
        break;
 800da2a:	e030      	b.n	800da8e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	7c1b      	ldrb	r3, [r3, #16]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d10f      	bne.n	800da54 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d005      	beq.n	800da4c <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	7d1b      	ldrb	r3, [r3, #20]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d103      	bne.n	800da54 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	22f5      	movs	r2, #245	@ 0xf5
 800da50:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800da52:	e01c      	b.n	800da8e <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	7c1b      	ldrb	r3, [r3, #16]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d004      	beq.n	800da66 <lwip_netconn_do_getaddr+0xce>
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	8adb      	ldrh	r3, [r3, #22]
 800da64:	e003      	b.n	800da6e <lwip_netconn_do_getaddr+0xd6>
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	8b1b      	ldrh	r3, [r3, #24]
 800da6e:	68fa      	ldr	r2, [r7, #12]
 800da70:	68d2      	ldr	r2, [r2, #12]
 800da72:	8013      	strh	r3, [r2, #0]
        break;
 800da74:	e00b      	b.n	800da8e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800da76:	4b08      	ldr	r3, [pc, #32]	@ (800da98 <lwip_netconn_do_getaddr+0x100>)
 800da78:	f240 727d 	movw	r2, #1917	@ 0x77d
 800da7c:	4907      	ldr	r1, [pc, #28]	@ (800da9c <lwip_netconn_do_getaddr+0x104>)
 800da7e:	4808      	ldr	r0, [pc, #32]	@ (800daa0 <lwip_netconn_do_getaddr+0x108>)
 800da80:	f01b fc50 	bl	8029324 <iprintf>
        break;
 800da84:	e003      	b.n	800da8e <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	22f5      	movs	r2, #245	@ 0xf5
 800da8a:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800da8c:	bf00      	nop
 800da8e:	bf00      	nop
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	0802ba20 	.word	0x0802ba20
 800da9c:	0802bf60 	.word	0x0802bf60
 800daa0:	0802ba64 	.word	0x0802ba64

0800daa4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	785b      	ldrb	r3, [r3, #1]
 800dab6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d069      	beq.n	800db96 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800dacc:	2b10      	cmp	r3, #16
 800dace:	d162      	bne.n	800db96 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800dad4:	2b03      	cmp	r3, #3
 800dad6:	d002      	beq.n	800dade <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800dad8:	7afb      	ldrb	r3, [r7, #11]
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d05b      	beq.n	800db96 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800dade:	7afb      	ldrb	r3, [r7, #11]
 800dae0:	2b03      	cmp	r3, #3
 800dae2:	d103      	bne.n	800daec <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	22f5      	movs	r2, #245	@ 0xf5
 800dae8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800daea:	e059      	b.n	800dba0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800daec:	7afb      	ldrb	r3, [r7, #11]
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d103      	bne.n	800dafa <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	22fb      	movs	r2, #251	@ 0xfb
 800daf6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800daf8:	e052      	b.n	800dba0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	7a1b      	ldrb	r3, [r3, #8]
 800dafe:	f003 0301 	and.w	r3, r3, #1
 800db02:	2b00      	cmp	r3, #0
 800db04:	d004      	beq.n	800db10 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7ff f95e 	bl	800cdcc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db16:	2b00      	cmp	r3, #0
 800db18:	d006      	beq.n	800db28 <lwip_netconn_do_close+0x84>
 800db1a:	4b23      	ldr	r3, [pc, #140]	@ (800dba8 <lwip_netconn_do_close+0x104>)
 800db1c:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800db20:	4922      	ldr	r1, [pc, #136]	@ (800dbac <lwip_netconn_do_close+0x108>)
 800db22:	4823      	ldr	r0, [pc, #140]	@ (800dbb0 <lwip_netconn_do_close+0x10c>)
 800db24:	f01b fbfe 	bl	8029324 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2204      	movs	r2, #4
 800db2e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2100      	movs	r1, #0
 800db3e:	4618      	mov	r0, r3
 800db40:	f7ff f9c2 	bl	800cec8 <lwip_netconn_do_close_internal>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d029      	beq.n	800db9e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	785b      	ldrb	r3, [r3, #1]
 800db50:	2b04      	cmp	r3, #4
 800db52:	d006      	beq.n	800db62 <lwip_netconn_do_close+0xbe>
 800db54:	4b14      	ldr	r3, [pc, #80]	@ (800dba8 <lwip_netconn_do_close+0x104>)
 800db56:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800db5a:	4916      	ldr	r1, [pc, #88]	@ (800dbb4 <lwip_netconn_do_close+0x110>)
 800db5c:	4814      	ldr	r0, [pc, #80]	@ (800dbb0 <lwip_netconn_do_close+0x10c>)
 800db5e:	f01b fbe1 	bl	8029324 <iprintf>
        UNLOCK_TCPIP_CORE();
 800db62:	4815      	ldr	r0, [pc, #84]	@ (800dbb8 <lwip_netconn_do_close+0x114>)
 800db64:	f00e f80b 	bl	801bb7e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	330c      	adds	r3, #12
 800db6e:	2100      	movs	r1, #0
 800db70:	4618      	mov	r0, r3
 800db72:	f00d ff6a 	bl	801ba4a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800db76:	4810      	ldr	r0, [pc, #64]	@ (800dbb8 <lwip_netconn_do_close+0x114>)
 800db78:	f00d fff2 	bl	801bb60 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	785b      	ldrb	r3, [r3, #1]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d00b      	beq.n	800db9e <lwip_netconn_do_close+0xfa>
 800db86:	4b08      	ldr	r3, [pc, #32]	@ (800dba8 <lwip_netconn_do_close+0x104>)
 800db88:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800db8c:	4909      	ldr	r1, [pc, #36]	@ (800dbb4 <lwip_netconn_do_close+0x110>)
 800db8e:	4808      	ldr	r0, [pc, #32]	@ (800dbb0 <lwip_netconn_do_close+0x10c>)
 800db90:	f01b fbc8 	bl	8029324 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800db94:	e003      	b.n	800db9e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	22f5      	movs	r2, #245	@ 0xf5
 800db9a:	711a      	strb	r2, [r3, #4]
 800db9c:	e000      	b.n	800dba0 <lwip_netconn_do_close+0xfc>
      return;
 800db9e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	0802ba20 	.word	0x0802ba20
 800dbac:	0802bdc4 	.word	0x0802bdc4
 800dbb0:	0802ba64 	.word	0x0802ba64
 800dbb4:	0802bde0 	.word	0x0802bde0
 800dbb8:	2003736c 	.word	0x2003736c

0800dbbc <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_CONN;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	22f5      	movs	r2, #245	@ 0xf5
 800dbcc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d027      	beq.n	800dc28 <lwip_netconn_do_join_leave_group+0x6c>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dbe2:	2b20      	cmp	r3, #32
 800dbe4:	d11d      	bne.n	800dc22 <lwip_netconn_do_join_leave_group+0x66>
        }
      } else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
      {
#if LWIP_IGMP
        if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	7c5b      	ldrb	r3, [r3, #17]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10c      	bne.n	800dc08 <lwip_netconn_do_join_leave_group+0x4c>
          msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	68da      	ldr	r2, [r3, #12]
                                    ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	689b      	ldr	r3, [r3, #8]
          msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	4610      	mov	r0, r2
 800dbfa:	f00b ff87 	bl	8019b0c <igmp_joingroup>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	461a      	mov	r2, r3
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	711a      	strb	r2, [r3, #4]
      msg->err = ERR_VAL;
#endif /* (LWIP_TCP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800dc06:	e00f      	b.n	800dc28 <lwip_netconn_do_join_leave_group+0x6c>
          msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	68da      	ldr	r2, [r3, #12]
                                     ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	689b      	ldr	r3, [r3, #8]
          msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800dc10:	4619      	mov	r1, r3
 800dc12:	4610      	mov	r0, r2
 800dc14:	f00c f856 	bl	8019cc4 <igmp_leavegroup>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	711a      	strb	r2, [r3, #4]
}
 800dc20:	e002      	b.n	800dc28 <lwip_netconn_do_join_leave_group+0x6c>
      msg->err = ERR_VAL;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	22fa      	movs	r2, #250	@ 0xfa
 800dc26:	711a      	strb	r2, [r3, #4]
}
 800dc28:	bf00      	nop
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	4603      	mov	r3, r0
 800dc38:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800dc3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	dc04      	bgt.n	800dc4c <err_to_errno+0x1c>
 800dc42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc46:	f113 0f10 	cmn.w	r3, #16
 800dc4a:	da01      	bge.n	800dc50 <err_to_errno+0x20>
    return EIO;
 800dc4c:	2305      	movs	r3, #5
 800dc4e:	e005      	b.n	800dc5c <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800dc50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc54:	425b      	negs	r3, r3
 800dc56:	4a04      	ldr	r2, [pc, #16]	@ (800dc68 <err_to_errno+0x38>)
 800dc58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr
 800dc68:	0802f3a0 	.word	0x0802f3a0

0800dc6c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d013      	beq.n	800dca2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d00b      	beq.n	800dc9a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f003 fb7e 	bl	8011388 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	605a      	str	r2, [r3, #4]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	685a      	ldr	r2, [r3, #4]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800dc9a:	6879      	ldr	r1, [r7, #4]
 800dc9c:	2006      	movs	r0, #6
 800dc9e:	f002 fc47 	bl	8010530 <memp_free>
  }
}
 800dca2:	bf00      	nop
 800dca4:	3708      	adds	r7, #8
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
	...

0800dcac <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d106      	bne.n	800dcc8 <netbuf_free+0x1c>
 800dcba:	4b0d      	ldr	r3, [pc, #52]	@ (800dcf0 <netbuf_free+0x44>)
 800dcbc:	2281      	movs	r2, #129	@ 0x81
 800dcbe:	490d      	ldr	r1, [pc, #52]	@ (800dcf4 <netbuf_free+0x48>)
 800dcc0:	480d      	ldr	r0, [pc, #52]	@ (800dcf8 <netbuf_free+0x4c>)
 800dcc2:	f01b fb2f 	bl	8029324 <iprintf>
 800dcc6:	e00f      	b.n	800dce8 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d004      	beq.n	800dcda <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f003 fb57 	bl	8011388 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	605a      	str	r2, [r3, #4]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	685a      	ldr	r2, [r3, #4]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800dce8:	3708      	adds	r7, #8
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	0802bf78 	.word	0x0802bf78
 800dcf4:	0802c014 	.word	0x0802c014
 800dcf8:	0802bfc8 	.word	0x0802bfc8

0800dcfc <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	4613      	mov	r3, r2
 800dd08:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d108      	bne.n	800dd22 <netbuf_ref+0x26>
 800dd10:	4b1c      	ldr	r3, [pc, #112]	@ (800dd84 <netbuf_ref+0x88>)
 800dd12:	2299      	movs	r2, #153	@ 0x99
 800dd14:	491c      	ldr	r1, [pc, #112]	@ (800dd88 <netbuf_ref+0x8c>)
 800dd16:	481d      	ldr	r0, [pc, #116]	@ (800dd8c <netbuf_ref+0x90>)
 800dd18:	f01b fb04 	bl	8029324 <iprintf>
 800dd1c:	f06f 030f 	mvn.w	r3, #15
 800dd20:	e02b      	b.n	800dd7a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d004      	beq.n	800dd34 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f003 fb2a 	bl	8011388 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800dd34:	2241      	movs	r2, #65	@ 0x41
 800dd36:	2100      	movs	r1, #0
 800dd38:	2036      	movs	r0, #54	@ 0x36
 800dd3a:	f003 f80f 	bl	8010d5c <pbuf_alloc>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d105      	bne.n	800dd58 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800dd52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dd56:	e010      	b.n	800dd7a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	68ba      	ldr	r2, [r7, #8]
 800dd5e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	88fa      	ldrh	r2, [r7, #6]
 800dd66:	811a      	strh	r2, [r3, #8]
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	6812      	ldr	r2, [r2, #0]
 800dd6c:	891b      	ldrh	r3, [r3, #8]
 800dd6e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	0802bf78 	.word	0x0802bf78
 800dd88:	0802c030 	.word	0x0802c030
 800dd8c:	0802bfc8 	.word	0x0802bfc8

0800dd90 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b085      	sub	sp, #20
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	db02      	blt.n	800dda8 <tryget_socket_unconn_nouse+0x18>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2b03      	cmp	r3, #3
 800dda6:	dd01      	ble.n	800ddac <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	e003      	b.n	800ddb4 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	011b      	lsls	r3, r3, #4
 800ddb0:	4a03      	ldr	r2, [pc, #12]	@ (800ddc0 <tryget_socket_unconn_nouse+0x30>)
 800ddb2:	4413      	add	r3, r2
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3714      	adds	r7, #20
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr
 800ddc0:	2003731c 	.word	0x2003731c

0800ddc4 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f7ff ffdf 	bl	800dd90 <tryget_socket_unconn_nouse>
 800ddd2:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b084      	sub	sp, #16
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f7ff ffec 	bl	800ddc4 <tryget_socket_unconn>
 800ddec:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d005      	beq.n	800de00 <tryget_socket+0x22>
    if (sock->conn) {
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d001      	beq.n	800de00 <tryget_socket+0x22>
      return sock;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	e000      	b.n	800de02 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800de00:	2300      	movs	r3, #0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
	...

0800de0c <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7ff ffe2 	bl	800ddde <tryget_socket>
 800de1a:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d104      	bne.n	800de2c <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800de22:	4b05      	ldr	r3, [pc, #20]	@ (800de38 <get_socket+0x2c>)
 800de24:	2209      	movs	r2, #9
 800de26:	601a      	str	r2, [r3, #0]
    return NULL;
 800de28:	2300      	movs	r3, #0
 800de2a:	e000      	b.n	800de2e <get_socket+0x22>
  }
  return sock;
 800de2c:	68fb      	ldr	r3, [r7, #12]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	20047370 	.word	0x20047370

0800de3c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800de46:	2300      	movs	r3, #0
 800de48:	60fb      	str	r3, [r7, #12]
 800de4a:	e052      	b.n	800def2 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800de4c:	f00d fec4 	bl	801bbd8 <sys_arch_protect>
 800de50:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800de52:	4a2c      	ldr	r2, [pc, #176]	@ (800df04 <alloc_socket+0xc8>)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	011b      	lsls	r3, r3, #4
 800de58:	4413      	add	r3, r2
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d142      	bne.n	800dee6 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800de60:	4a28      	ldr	r2, [pc, #160]	@ (800df04 <alloc_socket+0xc8>)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	011b      	lsls	r3, r3, #4
 800de66:	4413      	add	r3, r2
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800de6c:	68b8      	ldr	r0, [r7, #8]
 800de6e:	f00d fec1 	bl	801bbf4 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800de72:	4a24      	ldr	r2, [pc, #144]	@ (800df04 <alloc_socket+0xc8>)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	011b      	lsls	r3, r3, #4
 800de78:	4413      	add	r3, r2
 800de7a:	3304      	adds	r3, #4
 800de7c:	2200      	movs	r2, #0
 800de7e:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800de80:	4a20      	ldr	r2, [pc, #128]	@ (800df04 <alloc_socket+0xc8>)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	011b      	lsls	r3, r3, #4
 800de86:	4413      	add	r3, r2
 800de88:	330e      	adds	r3, #14
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d006      	beq.n	800de9e <alloc_socket+0x62>
 800de90:	4b1d      	ldr	r3, [pc, #116]	@ (800df08 <alloc_socket+0xcc>)
 800de92:	f240 220e 	movw	r2, #526	@ 0x20e
 800de96:	491d      	ldr	r1, [pc, #116]	@ (800df0c <alloc_socket+0xd0>)
 800de98:	481d      	ldr	r0, [pc, #116]	@ (800df10 <alloc_socket+0xd4>)
 800de9a:	f01b fa43 	bl	8029324 <iprintf>
      sockets[i].rcvevent   = 0;
 800de9e:	4a19      	ldr	r2, [pc, #100]	@ (800df04 <alloc_socket+0xc8>)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	011b      	lsls	r3, r3, #4
 800dea4:	4413      	add	r3, r2
 800dea6:	3308      	adds	r3, #8
 800dea8:	2200      	movs	r2, #0
 800deaa:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800deb4:	2b10      	cmp	r3, #16
 800deb6:	d102      	bne.n	800debe <alloc_socket+0x82>
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d001      	beq.n	800dec2 <alloc_socket+0x86>
 800debe:	2301      	movs	r3, #1
 800dec0:	e000      	b.n	800dec4 <alloc_socket+0x88>
 800dec2:	2300      	movs	r3, #0
 800dec4:	b299      	uxth	r1, r3
 800dec6:	4a0f      	ldr	r2, [pc, #60]	@ (800df04 <alloc_socket+0xc8>)
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	011b      	lsls	r3, r3, #4
 800decc:	4413      	add	r3, r2
 800dece:	330a      	adds	r3, #10
 800ded0:	460a      	mov	r2, r1
 800ded2:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800ded4:	4a0b      	ldr	r2, [pc, #44]	@ (800df04 <alloc_socket+0xc8>)
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	011b      	lsls	r3, r3, #4
 800deda:	4413      	add	r3, r2
 800dedc:	330c      	adds	r3, #12
 800dede:	2200      	movs	r2, #0
 800dee0:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	e00a      	b.n	800defc <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800dee6:	68b8      	ldr	r0, [r7, #8]
 800dee8:	f00d fe84 	bl	801bbf4 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	3301      	adds	r3, #1
 800def0:	60fb      	str	r3, [r7, #12]
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2b03      	cmp	r3, #3
 800def6:	dda9      	ble.n	800de4c <alloc_socket+0x10>
  }
  return -1;
 800def8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800defc:	4618      	mov	r0, r3
 800defe:	3710      	adds	r7, #16
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	2003731c 	.word	0x2003731c
 800df08:	0802c110 	.word	0x0802c110
 800df0c:	0802c144 	.word	0x0802c144
 800df10:	0802c164 	.word	0x0802c164

0800df14 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
 800df20:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	68fa      	ldr	r2, [r7, #12]
 800df26:	6852      	ldr	r2, [r2, #4]
 800df28:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2200      	movs	r2, #0
 800df2e:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2200      	movs	r2, #0
 800df3c:	601a      	str	r2, [r3, #0]
  return 1;
 800df3e:	2301      	movs	r3, #1
}
 800df40:	4618      	mov	r0, r3
 800df42:	3714      	adds	r7, #20
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d00d      	beq.n	800df7c <free_socket_free_elements+0x30>
    if (is_tcp) {
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d005      	beq.n	800df72 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f003 fa0c 	bl	8011388 <pbuf_free>
 800df70:	e004      	b.n	800df7c <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4618      	mov	r0, r3
 800df78:	f7ff fe78 	bl	800dc6c <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d002      	beq.n	800df88 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800df82:	68b8      	ldr	r0, [r7, #8]
 800df84:	f7fd fe6c 	bl	800bc60 <netconn_delete>
  }
}
 800df88:	bf00      	nop
 800df8a:	3710      	adds	r7, #16
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b086      	sub	sp, #24
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800df9a:	f00d fe1d 	bl	801bbd8 <sys_arch_protect>
 800df9e:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800dfa0:	f107 0308 	add.w	r3, r7, #8
 800dfa4:	f107 020c 	add.w	r2, r7, #12
 800dfa8:	6839      	ldr	r1, [r7, #0]
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f7ff ffb2 	bl	800df14 <free_socket_locked>
 800dfb0:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800dfb2:	6978      	ldr	r0, [r7, #20]
 800dfb4:	f00d fe1e 	bl	801bbf4 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d006      	beq.n	800dfcc <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f107 0208 	add.w	r2, r7, #8
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	6838      	ldr	r0, [r7, #0]
 800dfc8:	f7ff ffc0 	bl	800df4c <free_socket_free_elements>
  }
}
 800dfcc:	bf00      	nop
 800dfce:	3718      	adds	r7, #24
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b08a      	sub	sp, #40	@ 0x28
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800dfe0:	68f8      	ldr	r0, [r7, #12]
 800dfe2:	f7ff ff13 	bl	800de0c <get_socket>
 800dfe6:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d102      	bne.n	800dff4 <lwip_bind+0x20>
    return -1;
 800dfee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dff2:	e051      	b.n	800e098 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2b10      	cmp	r3, #16
 800dff8:	d108      	bne.n	800e00c <lwip_bind+0x38>
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	785b      	ldrb	r3, [r3, #1]
 800dffe:	2b02      	cmp	r3, #2
 800e000:	d104      	bne.n	800e00c <lwip_bind+0x38>
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	f003 0303 	and.w	r3, r3, #3
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d014      	beq.n	800e036 <lwip_bind+0x62>
 800e00c:	4b24      	ldr	r3, [pc, #144]	@ (800e0a0 <lwip_bind+0xcc>)
 800e00e:	f240 22e2 	movw	r2, #738	@ 0x2e2
 800e012:	4924      	ldr	r1, [pc, #144]	@ (800e0a4 <lwip_bind+0xd0>)
 800e014:	4824      	ldr	r0, [pc, #144]	@ (800e0a8 <lwip_bind+0xd4>)
 800e016:	f01b f985 	bl	8029324 <iprintf>
 800e01a:	f06f 000f 	mvn.w	r0, #15
 800e01e:	f7ff fe07 	bl	800dc30 <err_to_errno>
 800e022:	6178      	str	r0, [r7, #20]
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d002      	beq.n	800e030 <lwip_bind+0x5c>
 800e02a:	4a20      	ldr	r2, [pc, #128]	@ (800e0ac <lwip_bind+0xd8>)
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	6013      	str	r3, [r2, #0]
 800e030:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e034:	e030      	b.n	800e098 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	613b      	str	r3, [r7, #16]
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	885b      	ldrh	r3, [r3, #2]
 800e040:	4618      	mov	r0, r3
 800e042:	f001 fca7 	bl	800f994 <lwip_htons>
 800e046:	4603      	mov	r3, r0
 800e048:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800e04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e050:	f107 0110 	add.w	r1, r7, #16
 800e054:	4618      	mov	r0, r3
 800e056:	f7fd fe71 	bl	800bd3c <netconn_bind>
 800e05a:	4603      	mov	r3, r0
 800e05c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 800e060:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800e064:	2b00      	cmp	r3, #0
 800e066:	d00e      	beq.n	800e086 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800e068:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7ff fddf 	bl	800dc30 <err_to_errno>
 800e072:	61b8      	str	r0, [r7, #24]
 800e074:	69bb      	ldr	r3, [r7, #24]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d002      	beq.n	800e080 <lwip_bind+0xac>
 800e07a:	4a0c      	ldr	r2, [pc, #48]	@ (800e0ac <lwip_bind+0xd8>)
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e080:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e084:	e008      	b.n	800e098 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800e086:	2300      	movs	r3, #0
 800e088:	61fb      	str	r3, [r7, #28]
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <lwip_bind+0xc2>
 800e090:	4a06      	ldr	r2, [pc, #24]	@ (800e0ac <lwip_bind+0xd8>)
 800e092:	69fb      	ldr	r3, [r7, #28]
 800e094:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3728      	adds	r7, #40	@ 0x28
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	0802c110 	.word	0x0802c110
 800e0a4:	0802c1b4 	.word	0x0802c1b4
 800e0a8:	0802c164 	.word	0x0802c164
 800e0ac:	20047370 	.word	0x20047370

0800e0b0 <lwip_close>:

int
lwip_close(int s)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7ff fea5 	bl	800de0c <get_socket>
 800e0c2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d102      	bne.n	800e0d0 <lwip_close+0x20>
    return -1;
 800e0ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0ce:	e03c      	b.n	800e14a <lwip_close+0x9a>
  }

  if (sock->conn != NULL) {
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d00b      	beq.n	800e0f0 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e0e2:	2b10      	cmp	r3, #16
 800e0e4:	bf0c      	ite	eq
 800e0e6:	2301      	moveq	r3, #1
 800e0e8:	2300      	movne	r3, #0
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	617b      	str	r3, [r7, #20]
 800e0ee:	e00a      	b.n	800e106 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d006      	beq.n	800e106 <lwip_close+0x56>
 800e0f8:	4b16      	ldr	r3, [pc, #88]	@ (800e154 <lwip_close+0xa4>)
 800e0fa:	f44f 7245 	mov.w	r2, #788	@ 0x314
 800e0fe:	4916      	ldr	r1, [pc, #88]	@ (800e158 <lwip_close+0xa8>)
 800e100:	4816      	ldr	r0, [pc, #88]	@ (800e15c <lwip_close+0xac>)
 800e102:	f01b f90f 	bl	8029324 <iprintf>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f001 fa2c 	bl	800f564 <lwip_socket_drop_registered_memberships>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4618      	mov	r0, r3
 800e112:	f7fd fd81 	bl	800bc18 <netconn_prepare_delete>
 800e116:	4603      	mov	r3, r0
 800e118:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e11a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d00e      	beq.n	800e140 <lwip_close+0x90>
    sock_set_errno(sock, err_to_errno(err));
 800e122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e126:	4618      	mov	r0, r3
 800e128:	f7ff fd82 	bl	800dc30 <err_to_errno>
 800e12c:	60b8      	str	r0, [r7, #8]
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d002      	beq.n	800e13a <lwip_close+0x8a>
 800e134:	4a0a      	ldr	r2, [pc, #40]	@ (800e160 <lwip_close+0xb0>)
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e13a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e13e:	e004      	b.n	800e14a <lwip_close+0x9a>
  }

  free_socket(sock, is_tcp);
 800e140:	6979      	ldr	r1, [r7, #20]
 800e142:	6938      	ldr	r0, [r7, #16]
 800e144:	f7ff ff24 	bl	800df90 <free_socket>
  set_errno(0);
  return 0;
 800e148:	2300      	movs	r3, #0
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3718      	adds	r7, #24
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	0802c110 	.word	0x0802c110
 800e158:	0802c1d0 	.word	0x0802c1d0
 800e15c:	0802c164 	.word	0x0802c164
 800e160:	20047370 	.word	0x20047370

0800e164 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b08c      	sub	sp, #48	@ 0x30
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
 800e170:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800e172:	2308      	movs	r3, #8
 800e174:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 800e178:	2300      	movs	r3, #0
 800e17a:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	db01      	blt.n	800e186 <lwip_recv_tcp+0x22>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	e001      	b.n	800e18a <lwip_recv_tcp+0x26>
 800e186:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e18a:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d106      	bne.n	800e1a0 <lwip_recv_tcp+0x3c>
 800e192:	4b74      	ldr	r3, [pc, #464]	@ (800e364 <lwip_recv_tcp+0x200>)
 800e194:	f240 329e 	movw	r2, #926	@ 0x39e
 800e198:	4973      	ldr	r1, [pc, #460]	@ (800e368 <lwip_recv_tcp+0x204>)
 800e19a:	4874      	ldr	r0, [pc, #464]	@ (800e36c <lwip_recv_tcp+0x208>)
 800e19c:	f01b f8c2 	bl	8029324 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e1aa:	2b10      	cmp	r3, #16
 800e1ac:	d006      	beq.n	800e1bc <lwip_recv_tcp+0x58>
 800e1ae:	4b6d      	ldr	r3, [pc, #436]	@ (800e364 <lwip_recv_tcp+0x200>)
 800e1b0:	f240 329f 	movw	r2, #927	@ 0x39f
 800e1b4:	496e      	ldr	r1, [pc, #440]	@ (800e370 <lwip_recv_tcp+0x20c>)
 800e1b6:	486d      	ldr	r0, [pc, #436]	@ (800e36c <lwip_recv_tcp+0x208>)
 800e1b8:	f01b f8b4 	bl	8029324 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	f003 0308 	and.w	r3, r3, #8
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d005      	beq.n	800e1d2 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800e1c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e1ca:	f043 0304 	orr.w	r3, r3, #4
 800e1ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d003      	beq.n	800e1e2 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	617b      	str	r3, [r7, #20]
 800e1e0:	e036      	b.n	800e250 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e1ea:	f107 0114 	add.w	r1, r7, #20
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fd ff98 	bl	800c124 <netconn_recv_tcp_pbuf_flags>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800e1fa:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d019      	beq.n	800e236 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800e202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e204:	2b00      	cmp	r3, #0
 800e206:	f300 808d 	bgt.w	800e324 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800e20a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800e20e:	4618      	mov	r0, r3
 800e210:	f7ff fd0e 	bl	800dc30 <err_to_errno>
 800e214:	61f8      	str	r0, [r7, #28]
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d002      	beq.n	800e222 <lwip_recv_tcp+0xbe>
 800e21c:	4a55      	ldr	r2, [pc, #340]	@ (800e374 <lwip_recv_tcp+0x210>)
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800e222:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800e226:	f113 0f0f 	cmn.w	r3, #15
 800e22a:	d101      	bne.n	800e230 <lwip_recv_tcp+0xcc>
          return 0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	e094      	b.n	800e35a <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800e230:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e234:	e091      	b.n	800e35a <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d106      	bne.n	800e24a <lwip_recv_tcp+0xe6>
 800e23c:	4b49      	ldr	r3, [pc, #292]	@ (800e364 <lwip_recv_tcp+0x200>)
 800e23e:	f240 32c5 	movw	r2, #965	@ 0x3c5
 800e242:	494d      	ldr	r1, [pc, #308]	@ (800e378 <lwip_recv_tcp+0x214>)
 800e244:	4849      	ldr	r0, [pc, #292]	@ (800e36c <lwip_recv_tcp+0x208>)
 800e246:	f01b f86d 	bl	8029324 <iprintf>
      sock->lastdata.pbuf = p;
 800e24a:	697a      	ldr	r2, [r7, #20]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	891b      	ldrh	r3, [r3, #8]
 800e254:	461a      	mov	r2, r3
 800e256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e258:	4293      	cmp	r3, r2
 800e25a:	dd03      	ble.n	800e264 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	891b      	ldrh	r3, [r3, #8]
 800e260:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e262:	e001      	b.n	800e268 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800e264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e266:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 800e268:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e26c:	4413      	add	r3, r2
 800e26e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e270:	429a      	cmp	r2, r3
 800e272:	dd03      	ble.n	800e27c <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800e274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e276:	b29b      	uxth	r3, r3
 800e278:	43db      	mvns	r3, r3
 800e27a:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800e27c:	6978      	ldr	r0, [r7, #20]
 800e27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e280:	68ba      	ldr	r2, [r7, #8]
 800e282:	18d1      	adds	r1, r2, r3
 800e284:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e286:	2300      	movs	r3, #0
 800e288:	f003 fa84 	bl	8011794 <pbuf_copy_partial>

    recvd += copylen;
 800e28c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e28e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e290:	4413      	add	r3, r2
 800e292:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800e294:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e298:	429a      	cmp	r2, r3
 800e29a:	da06      	bge.n	800e2aa <lwip_recv_tcp+0x146>
 800e29c:	4b31      	ldr	r3, [pc, #196]	@ (800e364 <lwip_recv_tcp+0x200>)
 800e29e:	f240 32dd 	movw	r2, #989	@ 0x3dd
 800e2a2:	4936      	ldr	r1, [pc, #216]	@ (800e37c <lwip_recv_tcp+0x218>)
 800e2a4:	4831      	ldr	r0, [pc, #196]	@ (800e36c <lwip_recv_tcp+0x208>)
 800e2a6:	f01b f83d 	bl	8029324 <iprintf>
    recv_left -= copylen;
 800e2aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e2ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2ae:	1ad3      	subs	r3, r2, r3
 800e2b0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	f003 0301 	and.w	r3, r3, #1
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d123      	bne.n	800e304 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	891b      	ldrh	r3, [r3, #8]
 800e2c0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d906      	bls.n	800e2d4 <lwip_recv_tcp+0x170>
 800e2c6:	4b27      	ldr	r3, [pc, #156]	@ (800e364 <lwip_recv_tcp+0x200>)
 800e2c8:	f240 32e3 	movw	r2, #995	@ 0x3e3
 800e2cc:	492c      	ldr	r1, [pc, #176]	@ (800e380 <lwip_recv_tcp+0x21c>)
 800e2ce:	4827      	ldr	r0, [pc, #156]	@ (800e36c <lwip_recv_tcp+0x208>)
 800e2d0:	f01b f828 	bl	8029324 <iprintf>
      if (p->tot_len - copylen > 0) {
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	891b      	ldrh	r3, [r3, #8]
 800e2d8:	461a      	mov	r2, r3
 800e2da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	dd09      	ble.n	800e2f6 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e2e6:	4611      	mov	r1, r2
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f003 f81a 	bl	8011322 <pbuf_free_header>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	605a      	str	r2, [r3, #4]
 800e2f4:	e006      	b.n	800e304 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f003 f842 	bl	8011388 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800e304:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e308:	f043 0314 	orr.w	r3, r3, #20
 800e30c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800e310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e312:	2b00      	cmp	r3, #0
 800e314:	dd08      	ble.n	800e328 <lwip_recv_tcp+0x1c4>
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	f003 0301 	and.w	r3, r3, #1
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f43f af58 	beq.w	800e1d2 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800e322:	e001      	b.n	800e328 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800e324:	bf00      	nop
 800e326:	e000      	b.n	800e32a <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800e328:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800e32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	dd0b      	ble.n	800e348 <lwip_recv_tcp+0x1e4>
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	f003 0301 	and.w	r3, r3, #1
 800e336:	2b00      	cmp	r3, #0
 800e338:	d106      	bne.n	800e348 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e340:	4611      	mov	r1, r2
 800e342:	4618      	mov	r0, r3
 800e344:	f7fd fe36 	bl	800bfb4 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800e348:	2300      	movs	r3, #0
 800e34a:	61bb      	str	r3, [r7, #24]
 800e34c:	69bb      	ldr	r3, [r7, #24]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d002      	beq.n	800e358 <lwip_recv_tcp+0x1f4>
 800e352:	4a08      	ldr	r2, [pc, #32]	@ (800e374 <lwip_recv_tcp+0x210>)
 800e354:	69bb      	ldr	r3, [r7, #24]
 800e356:	6013      	str	r3, [r2, #0]
  return recvd;
 800e358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3730      	adds	r7, #48	@ 0x30
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	0802c110 	.word	0x0802c110
 800e368:	0802c208 	.word	0x0802c208
 800e36c:	0802c164 	.word	0x0802c164
 800e370:	0802c218 	.word	0x0802c218
 800e374:	20047370 	.word	0x20047370
 800e378:	0802c23c 	.word	0x0802c23c
 800e37c:	0802c248 	.word	0x0802c248
 800e380:	0802c270 	.word	0x0802c270

0800e384 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800e384:	b590      	push	{r4, r7, lr}
 800e386:	b08b      	sub	sp, #44	@ 0x2c
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	603b      	str	r3, [r7, #0]
 800e390:	4613      	mov	r3, r2
 800e392:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800e394:	2300      	movs	r3, #0
 800e396:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d106      	bne.n	800e3ac <lwip_sock_make_addr+0x28>
 800e39e:	4b2b      	ldr	r3, [pc, #172]	@ (800e44c <lwip_sock_make_addr+0xc8>)
 800e3a0:	f240 4207 	movw	r2, #1031	@ 0x407
 800e3a4:	492a      	ldr	r1, [pc, #168]	@ (800e450 <lwip_sock_make_addr+0xcc>)
 800e3a6:	482b      	ldr	r0, [pc, #172]	@ (800e454 <lwip_sock_make_addr+0xd0>)
 800e3a8:	f01a ffbc 	bl	8029324 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d106      	bne.n	800e3c0 <lwip_sock_make_addr+0x3c>
 800e3b2:	4b26      	ldr	r3, [pc, #152]	@ (800e44c <lwip_sock_make_addr+0xc8>)
 800e3b4:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800e3b8:	4927      	ldr	r1, [pc, #156]	@ (800e458 <lwip_sock_make_addr+0xd4>)
 800e3ba:	4826      	ldr	r0, [pc, #152]	@ (800e454 <lwip_sock_make_addr+0xd0>)
 800e3bc:	f01a ffb2 	bl	8029324 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800e3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d106      	bne.n	800e3d4 <lwip_sock_make_addr+0x50>
 800e3c6:	4b21      	ldr	r3, [pc, #132]	@ (800e44c <lwip_sock_make_addr+0xc8>)
 800e3c8:	f240 4209 	movw	r2, #1033	@ 0x409
 800e3cc:	4923      	ldr	r1, [pc, #140]	@ (800e45c <lwip_sock_make_addr+0xd8>)
 800e3ce:	4821      	ldr	r0, [pc, #132]	@ (800e454 <lwip_sock_make_addr+0xd0>)
 800e3d0:	f01a ffa8 	bl	8029324 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800e3d4:	f107 0314 	add.w	r3, r7, #20
 800e3d8:	2210      	movs	r2, #16
 800e3da:	701a      	strb	r2, [r3, #0]
 800e3dc:	f107 0314 	add.w	r3, r7, #20
 800e3e0:	2202      	movs	r2, #2
 800e3e2:	705a      	strb	r2, [r3, #1]
 800e3e4:	f107 0414 	add.w	r4, r7, #20
 800e3e8:	88fb      	ldrh	r3, [r7, #6]
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f001 fad2 	bl	800f994 <lwip_htons>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	8063      	strh	r3, [r4, #2]
 800e3f4:	f107 0314 	add.w	r3, r7, #20
 800e3f8:	68ba      	ldr	r2, [r7, #8]
 800e3fa:	6812      	ldr	r2, [r2, #0]
 800e3fc:	605a      	str	r2, [r3, #4]
 800e3fe:	f107 0314 	add.w	r3, r7, #20
 800e402:	3308      	adds	r3, #8
 800e404:	2208      	movs	r2, #8
 800e406:	2100      	movs	r1, #0
 800e408:	4618      	mov	r0, r3
 800e40a:	f01b f90b 	bl	8029624 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800e40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	7d3a      	ldrb	r2, [r7, #20]
 800e414:	4293      	cmp	r3, r2
 800e416:	d202      	bcs.n	800e41e <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800e418:	2301      	movs	r3, #1
 800e41a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e41c:	e008      	b.n	800e430 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800e41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	7d3a      	ldrb	r2, [r7, #20]
 800e424:	4293      	cmp	r3, r2
 800e426:	d903      	bls.n	800e430 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800e428:	7d3b      	ldrb	r3, [r7, #20]
 800e42a:	461a      	mov	r2, r3
 800e42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42e:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800e430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	f107 0314 	add.w	r3, r7, #20
 800e438:	4619      	mov	r1, r3
 800e43a:	6838      	ldr	r0, [r7, #0]
 800e43c:	f01b fa15 	bl	802986a <memcpy>
  return truncated;
 800e440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e442:	4618      	mov	r0, r3
 800e444:	372c      	adds	r7, #44	@ 0x2c
 800e446:	46bd      	mov	sp, r7
 800e448:	bd90      	pop	{r4, r7, pc}
 800e44a:	bf00      	nop
 800e44c:	0802c110 	.word	0x0802c110
 800e450:	0802c280 	.word	0x0802c280
 800e454:	0802c164 	.word	0x0802c164
 800e458:	0802c294 	.word	0x0802c294
 800e45c:	0802c2a4 	.word	0x0802c2a4

0800e460 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b088      	sub	sp, #32
 800e464:	af02      	add	r7, sp, #8
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]
 800e46c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d101      	bne.n	800e478 <lwip_recv_tcp_from+0x18>
    return 0;
 800e474:	2300      	movs	r3, #0
 800e476:	e021      	b.n	800e4bc <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d01d      	beq.n	800e4ba <lwip_recv_tcp_from+0x5a>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d01a      	beq.n	800e4ba <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6818      	ldr	r0, [r3, #0]
 800e488:	f107 0216 	add.w	r2, r7, #22
 800e48c:	f107 0110 	add.w	r1, r7, #16
 800e490:	2300      	movs	r3, #0
 800e492:	f7fd fc01 	bl	800bc98 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d00e      	beq.n	800e4ba <lwip_recv_tcp_from+0x5a>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00b      	beq.n	800e4ba <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6818      	ldr	r0, [r3, #0]
 800e4a6:	8afa      	ldrh	r2, [r7, #22]
 800e4a8:	f107 0110 	add.w	r1, r7, #16
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	9300      	str	r3, [sp, #0]
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	f7ff ff67 	bl	800e384 <lwip_sock_make_addr>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	e000      	b.n	800e4bc <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800e4ba:	2300      	movs	r3, #0
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3718      	adds	r7, #24
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800e4c4:	b590      	push	{r4, r7, lr}
 800e4c6:	b08d      	sub	sp, #52	@ 0x34
 800e4c8:	af02      	add	r7, sp, #8
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	60b9      	str	r1, [r7, #8]
 800e4ce:	607a      	str	r2, [r7, #4]
 800e4d0:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	689b      	ldr	r3, [r3, #8]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d10d      	bne.n	800e4f6 <lwip_recvfrom_udp_raw+0x32>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	dd09      	ble.n	800e4f6 <lwip_recvfrom_udp_raw+0x32>
 800e4e2:	4b5e      	ldr	r3, [pc, #376]	@ (800e65c <lwip_recvfrom_udp_raw+0x198>)
 800e4e4:	f240 4249 	movw	r2, #1097	@ 0x449
 800e4e8:	495d      	ldr	r1, [pc, #372]	@ (800e660 <lwip_recvfrom_udp_raw+0x19c>)
 800e4ea:	485e      	ldr	r0, [pc, #376]	@ (800e664 <lwip_recvfrom_udp_raw+0x1a0>)
 800e4ec:	f01a ff1a 	bl	8029324 <iprintf>
 800e4f0:	f06f 030f 	mvn.w	r3, #15
 800e4f4:	e0ad      	b.n	800e652 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	f003 0308 	and.w	r3, r3, #8
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d003      	beq.n	800e508 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800e500:	2304      	movs	r3, #4
 800e502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e506:	e002      	b.n	800e50e <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800e508:	2300      	movs	r3, #0
 800e50a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d11e      	bne.n	800e558 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e522:	f107 0110 	add.w	r1, r7, #16
 800e526:	4618      	mov	r0, r3
 800e528:	f7fd fe28 	bl	800c17c <netconn_recv_udp_raw_netbuf_flags>
 800e52c:	4603      	mov	r3, r0
 800e52e:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800e530:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d002      	beq.n	800e53e <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800e538:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e53c:	e089      	b.n	800e652 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d106      	bne.n	800e552 <lwip_recvfrom_udp_raw+0x8e>
 800e544:	4b45      	ldr	r3, [pc, #276]	@ (800e65c <lwip_recvfrom_udp_raw+0x198>)
 800e546:	f240 425e 	movw	r2, #1118	@ 0x45e
 800e54a:	4947      	ldr	r1, [pc, #284]	@ (800e668 <lwip_recvfrom_udp_raw+0x1a4>)
 800e54c:	4845      	ldr	r0, [pc, #276]	@ (800e664 <lwip_recvfrom_udp_raw+0x1a0>)
 800e54e:	f01a fee9 	bl	8029324 <iprintf>
    sock->lastdata.netbuf = buf;
 800e552:	693a      	ldr	r2, [r7, #16]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	891b      	ldrh	r3, [r3, #8]
 800e55e:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800e560:	2300      	movs	r3, #0
 800e562:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800e564:	2300      	movs	r3, #0
 800e566:	61fb      	str	r3, [r7, #28]
 800e568:	e029      	b.n	800e5be <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800e56a:	8b3a      	ldrh	r2, [r7, #24]
 800e56c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e56e:	1ad3      	subs	r3, r2, r3
 800e570:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	689a      	ldr	r2, [r3, #8]
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	00db      	lsls	r3, r3, #3
 800e57a:	4413      	add	r3, r2
 800e57c:	685a      	ldr	r2, [r3, #4]
 800e57e:	8afb      	ldrh	r3, [r7, #22]
 800e580:	429a      	cmp	r2, r3
 800e582:	d902      	bls.n	800e58a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800e584:	8afb      	ldrh	r3, [r7, #22]
 800e586:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e588:	e006      	b.n	800e598 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	689a      	ldr	r2, [r3, #8]
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	00db      	lsls	r3, r3, #3
 800e592:	4413      	add	r3, r2
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	6818      	ldr	r0, [r3, #0]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	689a      	ldr	r2, [r3, #8]
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	00db      	lsls	r3, r3, #3
 800e5a4:	4413      	add	r3, r2
 800e5a6:	6819      	ldr	r1, [r3, #0]
 800e5a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e5aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e5ac:	f003 f8f2 	bl	8011794 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800e5b0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e5b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5b4:	4413      	add	r3, r2
 800e5b6:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	61fb      	str	r3, [r7, #28]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	69fa      	ldr	r2, [r7, #28]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	da03      	bge.n	800e5d0 <lwip_recvfrom_udp_raw+0x10c>
 800e5c8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e5ca:	8b3b      	ldrh	r3, [r7, #24]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d3cc      	bcc.n	800e56a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d01a      	beq.n	800e60e <lwip_recvfrom_udp_raw+0x14a>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d016      	beq.n	800e60e <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d012      	beq.n	800e60e <lwip_recvfrom_udp_raw+0x14a>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d00e      	beq.n	800e60e <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	6818      	ldr	r0, [r3, #0]
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	f103 0108 	add.w	r1, r3, #8
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	3304      	adds	r3, #4
 800e606:	9300      	str	r3, [sp, #0]
 800e608:	4623      	mov	r3, r4
 800e60a:	f7ff febb 	bl	800e384 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2200      	movs	r2, #0
 800e612:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	691b      	ldr	r3, [r3, #16]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d007      	beq.n	800e62c <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800e61c:	2300      	movs	r3, #0
 800e61e:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800e620:	7d7b      	ldrb	r3, [r7, #21]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d102      	bne.n	800e62c <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2200      	movs	r2, #0
 800e62a:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	f003 0301 	and.w	r3, r3, #1
 800e632:	2b00      	cmp	r3, #0
 800e634:	d106      	bne.n	800e644 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2200      	movs	r2, #0
 800e63a:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	4618      	mov	r0, r3
 800e640:	f7ff fb14 	bl	800dc6c <netbuf_delete>
  }
  if (datagram_len) {
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d002      	beq.n	800e650 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	8b3a      	ldrh	r2, [r7, #24]
 800e64e:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	372c      	adds	r7, #44	@ 0x2c
 800e656:	46bd      	mov	sp, r7
 800e658:	bd90      	pop	{r4, r7, pc}
 800e65a:	bf00      	nop
 800e65c:	0802c110 	.word	0x0802c110
 800e660:	0802c2b4 	.word	0x0802c2b4
 800e664:	0802c164 	.word	0x0802c164
 800e668:	0802c2e0 	.word	0x0802c2e0

0800e66c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b096      	sub	sp, #88	@ 0x58
 800e670:	af02      	add	r7, sp, #8
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	607a      	str	r2, [r7, #4]
 800e678:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800e67a:	68f8      	ldr	r0, [r7, #12]
 800e67c:	f7ff fbc6 	bl	800de0c <get_socket>
 800e680:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 800e682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e684:	2b00      	cmp	r3, #0
 800e686:	d102      	bne.n	800e68e <lwip_recvfrom+0x22>
    return -1;
 800e688:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e68c:	e078      	b.n	800e780 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800e68e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e698:	2b10      	cmp	r3, #16
 800e69a:	d112      	bne.n	800e6c2 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	68b9      	ldr	r1, [r7, #8]
 800e6a2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e6a4:	f7ff fd5e 	bl	800e164 <lwip_recv_tcp>
 800e6a8:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800e6aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6ac:	9301      	str	r3, [sp, #4]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	4b35      	ldr	r3, [pc, #212]	@ (800e788 <lwip_recvfrom+0x11c>)
 800e6b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e6b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e6b8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e6ba:	f7ff fed1 	bl	800e460 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800e6be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6c0:	e05e      	b.n	800e780 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 800e6da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800e6de:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800e6e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e6e6:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800e6e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d002      	beq.n	800e6f4 <lwip_recvfrom+0x88>
 800e6ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	e000      	b.n	800e6f6 <lwip_recvfrom+0x8a>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800e6f8:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800e6fc:	f107 0214 	add.w	r2, r7, #20
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	9300      	str	r3, [sp, #0]
 800e704:	460b      	mov	r3, r1
 800e706:	6839      	ldr	r1, [r7, #0]
 800e708:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e70a:	f7ff fedb 	bl	800e4c4 <lwip_recvfrom_udp_raw>
 800e70e:	4603      	mov	r3, r0
 800e710:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 800e714:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d00e      	beq.n	800e73a <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800e71c:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800e720:	4618      	mov	r0, r3
 800e722:	f7ff fa85 	bl	800dc30 <err_to_errno>
 800e726:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d002      	beq.n	800e734 <lwip_recvfrom+0xc8>
 800e72e:	4a17      	ldr	r2, [pc, #92]	@ (800e78c <lwip_recvfrom+0x120>)
 800e730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e732:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800e734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e738:	e022      	b.n	800e780 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800e73a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e73c:	461a      	mov	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4293      	cmp	r3, r2
 800e742:	bf28      	it	cs
 800e744:	4613      	movcs	r3, r2
 800e746:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d206      	bcs.n	800e75c <lwip_recvfrom+0xf0>
 800e74e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e750:	461a      	mov	r2, r3
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	4293      	cmp	r3, r2
 800e756:	bf28      	it	cs
 800e758:	4613      	movcs	r3, r2
 800e75a:	e001      	b.n	800e760 <lwip_recvfrom+0xf4>
 800e75c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e760:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 800e762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e764:	2b00      	cmp	r3, #0
 800e766:	d002      	beq.n	800e76e <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800e768:	69ba      	ldr	r2, [r7, #24]
 800e76a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e76c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800e76e:	2300      	movs	r3, #0
 800e770:	643b      	str	r3, [r7, #64]	@ 0x40
 800e772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e774:	2b00      	cmp	r3, #0
 800e776:	d002      	beq.n	800e77e <lwip_recvfrom+0x112>
 800e778:	4a04      	ldr	r2, [pc, #16]	@ (800e78c <lwip_recvfrom+0x120>)
 800e77a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e77c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800e77e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800e780:	4618      	mov	r0, r3
 800e782:	3750      	adds	r7, #80	@ 0x50
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	0802c2ec 	.word	0x0802c2ec
 800e78c:	20047370 	.word	0x20047370

0800e790 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b086      	sub	sp, #24
 800e794:	af02      	add	r7, sp, #8
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
 800e79c:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800e79e:	2300      	movs	r3, #0
 800e7a0:	9301      	str	r3, [sp, #4]
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	9300      	str	r3, [sp, #0]
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	68b9      	ldr	r1, [r7, #8]
 800e7ac:	68f8      	ldr	r0, [r7, #12]
 800e7ae:	f7ff ff5d 	bl	800e66c <lwip_recvfrom>
 800e7b2:	4603      	mov	r3, r0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3710      	adds	r7, #16
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b08a      	sub	sp, #40	@ 0x28
 800e7c0:	af02      	add	r7, sp, #8
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
 800e7c8:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f7ff fb1e 	bl	800de0c <get_socket>
 800e7d0:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d102      	bne.n	800e7de <lwip_send+0x22>
    return -1;
 800e7d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e7dc:	e046      	b.n	800e86c <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e7e8:	2b10      	cmp	r3, #16
 800e7ea:	d00b      	beq.n	800e804 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	9301      	str	r3, [sp, #4]
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	68b9      	ldr	r1, [r7, #8]
 800e7fa:	68f8      	ldr	r0, [r7, #12]
 800e7fc:	f000 f83c 	bl	800e878 <lwip_sendto>
 800e800:	4603      	mov	r3, r0
 800e802:	e033      	b.n	800e86c <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d001      	beq.n	800e812 <lwip_send+0x56>
 800e80e:	2203      	movs	r2, #3
 800e810:	e000      	b.n	800e814 <lwip_send+0x58>
 800e812:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	105b      	asrs	r3, r3, #1
 800e818:	b25b      	sxtb	r3, r3
 800e81a:	f003 0304 	and.w	r3, r3, #4
 800e81e:	b25b      	sxtb	r3, r3
 800e820:	4313      	orrs	r3, r2
 800e822:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800e824:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800e826:	2300      	movs	r3, #0
 800e828:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800e82a:	69fb      	ldr	r3, [r7, #28]
 800e82c:	6818      	ldr	r0, [r3, #0]
 800e82e:	7efa      	ldrb	r2, [r7, #27]
 800e830:	f107 0310 	add.w	r3, r7, #16
 800e834:	9300      	str	r3, [sp, #0]
 800e836:	4613      	mov	r3, r2
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	68b9      	ldr	r1, [r7, #8]
 800e83c:	f7fd fcf8 	bl	800c230 <netconn_write_partly>
 800e840:	4603      	mov	r3, r0
 800e842:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800e844:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e848:	4618      	mov	r0, r3
 800e84a:	f7ff f9f1 	bl	800dc30 <err_to_errno>
 800e84e:	6178      	str	r0, [r7, #20]
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d002      	beq.n	800e85c <lwip_send+0xa0>
 800e856:	4a07      	ldr	r2, [pc, #28]	@ (800e874 <lwip_send+0xb8>)
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800e85c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d101      	bne.n	800e868 <lwip_send+0xac>
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	e001      	b.n	800e86c <lwip_send+0xb0>
 800e868:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3720      	adds	r7, #32
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	20047370 	.word	0x20047370

0800e878 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b08e      	sub	sp, #56	@ 0x38
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	607a      	str	r2, [r7, #4]
 800e884:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f7ff fac0 	bl	800de0c <get_socket>
 800e88c:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 800e88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e890:	2b00      	cmp	r3, #0
 800e892:	d102      	bne.n	800e89a <lwip_sendto+0x22>
    return -1;
 800e894:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e898:	e093      	b.n	800e9c2 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800e89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e8a4:	2b10      	cmp	r3, #16
 800e8a6:	d107      	bne.n	800e8b8 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	68b9      	ldr	r1, [r7, #8]
 800e8ae:	68f8      	ldr	r0, [r7, #12]
 800e8b0:	f7ff ff84 	bl	800e7bc <lwip_send>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	e084      	b.n	800e9c2 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8be:	d30a      	bcc.n	800e8d6 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800e8c0:	235a      	movs	r3, #90	@ 0x5a
 800e8c2:	623b      	str	r3, [r7, #32]
 800e8c4:	6a3b      	ldr	r3, [r7, #32]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d002      	beq.n	800e8d0 <lwip_sendto+0x58>
 800e8ca:	4a40      	ldr	r2, [pc, #256]	@ (800e9cc <lwip_sendto+0x154>)
 800e8cc:	6a3b      	ldr	r3, [r7, #32]
 800e8ce:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e8d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e8d4:	e075      	b.n	800e9c2 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800e8da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d102      	bne.n	800e8e6 <lwip_sendto+0x6e>
 800e8e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d023      	beq.n	800e92e <lwip_sendto+0xb6>
 800e8e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8e8:	2b10      	cmp	r3, #16
 800e8ea:	d10b      	bne.n	800e904 <lwip_sendto+0x8c>
 800e8ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d008      	beq.n	800e904 <lwip_sendto+0x8c>
 800e8f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8f4:	785b      	ldrb	r3, [r3, #1]
 800e8f6:	2b02      	cmp	r3, #2
 800e8f8:	d104      	bne.n	800e904 <lwip_sendto+0x8c>
 800e8fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8fc:	f003 0303 	and.w	r3, r3, #3
 800e900:	2b00      	cmp	r3, #0
 800e902:	d014      	beq.n	800e92e <lwip_sendto+0xb6>
 800e904:	4b32      	ldr	r3, [pc, #200]	@ (800e9d0 <lwip_sendto+0x158>)
 800e906:	f240 6252 	movw	r2, #1618	@ 0x652
 800e90a:	4932      	ldr	r1, [pc, #200]	@ (800e9d4 <lwip_sendto+0x15c>)
 800e90c:	4832      	ldr	r0, [pc, #200]	@ (800e9d8 <lwip_sendto+0x160>)
 800e90e:	f01a fd09 	bl	8029324 <iprintf>
 800e912:	f06f 000f 	mvn.w	r0, #15
 800e916:	f7ff f98b 	bl	800dc30 <err_to_errno>
 800e91a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d002      	beq.n	800e928 <lwip_sendto+0xb0>
 800e922:	4a2a      	ldr	r2, [pc, #168]	@ (800e9cc <lwip_sendto+0x154>)
 800e924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e926:	6013      	str	r3, [r2, #0]
 800e928:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e92c:	e049      	b.n	800e9c2 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800e92e:	2300      	movs	r3, #0
 800e930:	617b      	str	r3, [r7, #20]
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800e936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d00a      	beq.n	800e952 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800e93c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	61bb      	str	r3, [r7, #24]
 800e942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e944:	885b      	ldrh	r3, [r3, #2]
 800e946:	4618      	mov	r0, r3
 800e948:	f001 f824 	bl	800f994 <lwip_htons>
 800e94c:	4603      	mov	r3, r0
 800e94e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800e950:	e003      	b.n	800e95a <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800e952:	2300      	movs	r3, #0
 800e954:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800e956:	2300      	movs	r3, #0
 800e958:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800e95a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e95c:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800e95e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e960:	f107 0310 	add.w	r3, r7, #16
 800e964:	68b9      	ldr	r1, [r7, #8]
 800e966:	4618      	mov	r0, r3
 800e968:	f7ff f9c8 	bl	800dcfc <netbuf_ref>
 800e96c:	4603      	mov	r3, r0
 800e96e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800e972:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e976:	2b00      	cmp	r3, #0
 800e978:	d10a      	bne.n	800e990 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800e97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f107 0210 	add.w	r2, r7, #16
 800e982:	4611      	mov	r1, r2
 800e984:	4618      	mov	r0, r3
 800e986:	f7fd fc25 	bl	800c1d4 <netconn_send>
 800e98a:	4603      	mov	r3, r0
 800e98c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800e990:	f107 0310 	add.w	r3, r7, #16
 800e994:	4618      	mov	r0, r3
 800e996:	f7ff f989 	bl	800dcac <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800e99a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7ff f946 	bl	800dc30 <err_to_errno>
 800e9a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800e9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d002      	beq.n	800e9b2 <lwip_sendto+0x13a>
 800e9ac:	4a07      	ldr	r2, [pc, #28]	@ (800e9cc <lwip_sendto+0x154>)
 800e9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800e9b2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d101      	bne.n	800e9be <lwip_sendto+0x146>
 800e9ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e9bc:	e001      	b.n	800e9c2 <lwip_sendto+0x14a>
 800e9be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3738      	adds	r7, #56	@ 0x38
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	20047370 	.word	0x20047370
 800e9d0:	0802c110 	.word	0x0802c110
 800e9d4:	0802c3f0 	.word	0x0802c3f0
 800e9d8:	0802c164 	.word	0x0802c164

0800e9dc <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b086      	sub	sp, #24
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	2b03      	cmp	r3, #3
 800e9ec:	d009      	beq.n	800ea02 <lwip_socket+0x26>
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	2b03      	cmp	r3, #3
 800e9f2:	dc23      	bgt.n	800ea3c <lwip_socket+0x60>
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d019      	beq.n	800ea2e <lwip_socket+0x52>
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	2b02      	cmp	r3, #2
 800e9fe:	d009      	beq.n	800ea14 <lwip_socket+0x38>
 800ea00:	e01c      	b.n	800ea3c <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	b2db      	uxtb	r3, r3
 800ea06:	4a22      	ldr	r2, [pc, #136]	@ (800ea90 <lwip_socket+0xb4>)
 800ea08:	4619      	mov	r1, r3
 800ea0a:	2040      	movs	r0, #64	@ 0x40
 800ea0c:	f7fd f88a 	bl	800bb24 <netconn_new_with_proto_and_callback>
 800ea10:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800ea12:	e019      	b.n	800ea48 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2b88      	cmp	r3, #136	@ 0x88
 800ea18:	d101      	bne.n	800ea1e <lwip_socket+0x42>
 800ea1a:	2321      	movs	r3, #33	@ 0x21
 800ea1c:	e000      	b.n	800ea20 <lwip_socket+0x44>
 800ea1e:	2320      	movs	r3, #32
 800ea20:	4a1b      	ldr	r2, [pc, #108]	@ (800ea90 <lwip_socket+0xb4>)
 800ea22:	2100      	movs	r1, #0
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7fd f87d 	bl	800bb24 <netconn_new_with_proto_and_callback>
 800ea2a:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ea2c:	e00c      	b.n	800ea48 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800ea2e:	4a18      	ldr	r2, [pc, #96]	@ (800ea90 <lwip_socket+0xb4>)
 800ea30:	2100      	movs	r1, #0
 800ea32:	2010      	movs	r0, #16
 800ea34:	f7fd f876 	bl	800bb24 <netconn_new_with_proto_and_callback>
 800ea38:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800ea3a:	e005      	b.n	800ea48 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800ea3c:	4b15      	ldr	r3, [pc, #84]	@ (800ea94 <lwip_socket+0xb8>)
 800ea3e:	2216      	movs	r2, #22
 800ea40:	601a      	str	r2, [r3, #0]
      return -1;
 800ea42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ea46:	e01e      	b.n	800ea86 <lwip_socket+0xaa>
  }

  if (!conn) {
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d105      	bne.n	800ea5a <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800ea4e:	4b11      	ldr	r3, [pc, #68]	@ (800ea94 <lwip_socket+0xb8>)
 800ea50:	2269      	movs	r2, #105	@ 0x69
 800ea52:	601a      	str	r2, [r3, #0]
    return -1;
 800ea54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ea58:	e015      	b.n	800ea86 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	6978      	ldr	r0, [r7, #20]
 800ea5e:	f7ff f9ed 	bl	800de3c <alloc_socket>
 800ea62:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea6a:	d108      	bne.n	800ea7e <lwip_socket+0xa2>
    netconn_delete(conn);
 800ea6c:	6978      	ldr	r0, [r7, #20]
 800ea6e:	f7fd f8f7 	bl	800bc60 <netconn_delete>
    set_errno(ENFILE);
 800ea72:	4b08      	ldr	r3, [pc, #32]	@ (800ea94 <lwip_socket+0xb8>)
 800ea74:	2217      	movs	r2, #23
 800ea76:	601a      	str	r2, [r3, #0]
    return -1;
 800ea78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ea7c:	e003      	b.n	800ea86 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	693a      	ldr	r2, [r7, #16]
 800ea82:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800ea84:	693b      	ldr	r3, [r7, #16]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3718      	adds	r7, #24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	0800eb21 	.word	0x0800eb21
 800ea94:	20047370 	.word	0x20047370

0800ea98 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b087      	sub	sp, #28
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	607a      	str	r2, [r7, #4]
 800eaa4:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	617b      	str	r3, [r7, #20]
 800eaaa:	e02c      	b.n	800eb06 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	695a      	ldr	r2, [r3, #20]
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	00db      	lsls	r3, r3, #3
 800eab4:	4413      	add	r3, r2
 800eab6:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	68ba      	ldr	r2, [r7, #8]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d11e      	bne.n	800eb00 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d009      	beq.n	800eadc <lwip_poll_should_wake+0x44>
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eace:	b29b      	uxth	r3, r3
 800ead0:	f003 0301 	and.w	r3, r3, #1
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d001      	beq.n	800eadc <lwip_poll_should_wake+0x44>
        return 1;
 800ead8:	2301      	movs	r3, #1
 800eada:	e01a      	b.n	800eb12 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d009      	beq.n	800eaf6 <lwip_poll_should_wake+0x5e>
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	f003 0302 	and.w	r3, r3, #2
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d001      	beq.n	800eaf6 <lwip_poll_should_wake+0x5e>
        return 1;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e00d      	b.n	800eb12 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800eaf6:	6a3b      	ldr	r3, [r7, #32]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d001      	beq.n	800eb00 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800eafc:	2301      	movs	r3, #1
 800eafe:	e008      	b.n	800eb12 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	3301      	adds	r3, #1
 800eb04:	617b      	str	r3, [r7, #20]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	699b      	ldr	r3, [r3, #24]
 800eb0a:	697a      	ldr	r2, [r7, #20]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d3cd      	bcc.n	800eaac <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800eb10:	2300      	movs	r3, #0
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	371c      	adds	r7, #28
 800eb16:	46bd      	mov	sp, r7
 800eb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1c:	4770      	bx	lr
	...

0800eb20 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b08a      	sub	sp, #40	@ 0x28
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	460b      	mov	r3, r1
 800eb2a:	70fb      	strb	r3, [r7, #3]
 800eb2c:	4613      	mov	r3, r2
 800eb2e:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	f000 80a4 	beq.w	800ec80 <event_callback+0x160>
    s = conn->socket;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	699b      	ldr	r3, [r3, #24]
 800eb3c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 800eb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	da18      	bge.n	800eb76 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800eb44:	f00d f848 	bl	801bbd8 <sys_arch_protect>
 800eb48:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	699b      	ldr	r3, [r3, #24]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	da0b      	bge.n	800eb6a <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800eb52:	78fb      	ldrb	r3, [r7, #3]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d104      	bne.n	800eb62 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	699b      	ldr	r3, [r3, #24]
 800eb5c:	1e5a      	subs	r2, r3, #1
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800eb62:	69f8      	ldr	r0, [r7, #28]
 800eb64:	f00d f846 	bl	801bbf4 <sys_arch_unprotect>
        return;
 800eb68:	e08d      	b.n	800ec86 <event_callback+0x166>
      }
      s = conn->socket;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	699b      	ldr	r3, [r3, #24]
 800eb6e:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 800eb70:	69f8      	ldr	r0, [r7, #28]
 800eb72:	f00d f83f 	bl	801bbf4 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800eb76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb78:	f7ff f948 	bl	800de0c <get_socket>
 800eb7c:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800eb7e:	69bb      	ldr	r3, [r7, #24]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d07f      	beq.n	800ec84 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800eb84:	2301      	movs	r3, #1
 800eb86:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800eb88:	f00d f826 	bl	801bbd8 <sys_arch_protect>
 800eb8c:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800eb8e:	78fb      	ldrb	r3, [r7, #3]
 800eb90:	2b04      	cmp	r3, #4
 800eb92:	d83e      	bhi.n	800ec12 <event_callback+0xf2>
 800eb94:	a201      	add	r2, pc, #4	@ (adr r2, 800eb9c <event_callback+0x7c>)
 800eb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb9a:	bf00      	nop
 800eb9c:	0800ebb1 	.word	0x0800ebb1
 800eba0:	0800ebd3 	.word	0x0800ebd3
 800eba4:	0800ebeb 	.word	0x0800ebeb
 800eba8:	0800ebff 	.word	0x0800ebff
 800ebac:	0800ec0b 	.word	0x0800ec0b
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	3301      	adds	r3, #1
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	b21a      	sxth	r2, r3
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	dd2a      	ble.n	800ec22 <event_callback+0x102>
        check_waiters = 0;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	623b      	str	r3, [r7, #32]
      }
      break;
 800ebd0:	e027      	b.n	800ec22 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	3b01      	subs	r3, #1
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	b21a      	sxth	r2, r3
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	623b      	str	r3, [r7, #32]
      break;
 800ebe8:	e01c      	b.n	800ec24 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800ebea:	69bb      	ldr	r3, [r7, #24]
 800ebec:	895b      	ldrh	r3, [r3, #10]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d001      	beq.n	800ebf6 <event_callback+0xd6>
        check_waiters = 0;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800ebf6:	69bb      	ldr	r3, [r7, #24]
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	815a      	strh	r2, [r3, #10]
      break;
 800ebfc:	e012      	b.n	800ec24 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	2200      	movs	r2, #0
 800ec02:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800ec04:	2300      	movs	r3, #0
 800ec06:	623b      	str	r3, [r7, #32]
      break;
 800ec08:	e00c      	b.n	800ec24 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800ec0a:	69bb      	ldr	r3, [r7, #24]
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	819a      	strh	r2, [r3, #12]
      break;
 800ec10:	e008      	b.n	800ec24 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800ec12:	4b1e      	ldr	r3, [pc, #120]	@ (800ec8c <event_callback+0x16c>)
 800ec14:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800ec18:	491d      	ldr	r1, [pc, #116]	@ (800ec90 <event_callback+0x170>)
 800ec1a:	481e      	ldr	r0, [pc, #120]	@ (800ec94 <event_callback+0x174>)
 800ec1c:	f01a fb82 	bl	8029324 <iprintf>
      break;
 800ec20:	e000      	b.n	800ec24 <event_callback+0x104>
      break;
 800ec22:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	7b9b      	ldrb	r3, [r3, #14]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d025      	beq.n	800ec78 <event_callback+0x158>
 800ec2c:	6a3b      	ldr	r3, [r7, #32]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d022      	beq.n	800ec78 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800ec32:	69bb      	ldr	r3, [r7, #24]
 800ec34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	bfcc      	ite	gt
 800ec3c:	2301      	movgt	r3, #1
 800ec3e:	2300      	movle	r3, #0
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800ec44:	69bb      	ldr	r3, [r7, #24]
 800ec46:	895b      	ldrh	r3, [r3, #10]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	bf14      	ite	ne
 800ec4c:	2301      	movne	r3, #1
 800ec4e:	2300      	moveq	r3, #0
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	899b      	ldrh	r3, [r3, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	bf14      	ite	ne
 800ec5c:	2301      	movne	r3, #1
 800ec5e:	2300      	moveq	r3, #0
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800ec64:	69f8      	ldr	r0, [r7, #28]
 800ec66:	f00c ffc5 	bl	801bbf4 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	693a      	ldr	r2, [r7, #16]
 800ec6e:	6979      	ldr	r1, [r7, #20]
 800ec70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec72:	f000 f811 	bl	800ec98 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800ec76:	e006      	b.n	800ec86 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800ec78:	69f8      	ldr	r0, [r7, #28]
 800ec7a:	f00c ffbb 	bl	801bbf4 <sys_arch_unprotect>
 800ec7e:	e002      	b.n	800ec86 <event_callback+0x166>
    return;
 800ec80:	bf00      	nop
 800ec82:	e000      	b.n	800ec86 <event_callback+0x166>
      return;
 800ec84:	bf00      	nop
  }
  done_socket(sock);
}
 800ec86:	3728      	adds	r7, #40	@ 0x28
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	0802c110 	.word	0x0802c110
 800ec90:	0802c48c 	.word	0x0802c48c
 800ec94:	0802c164 	.word	0x0802c164

0800ec98 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b088      	sub	sp, #32
 800ec9c:	af02      	add	r7, sp, #8
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
 800eca4:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800eca6:	4b42      	ldr	r3, [pc, #264]	@ (800edb0 <select_check_waiters+0x118>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	617b      	str	r3, [r7, #20]
 800ecac:	e078      	b.n	800eda0 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	69db      	ldr	r3, [r3, #28]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d171      	bne.n	800ed9a <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	695b      	ldr	r3, [r3, #20]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d009      	beq.n	800ecd6 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	68ba      	ldr	r2, [r7, #8]
 800ecca:	68f9      	ldr	r1, [r7, #12]
 800eccc:	6978      	ldr	r0, [r7, #20]
 800ecce:	f7ff fee3 	bl	800ea98 <lwip_poll_should_wake>
 800ecd2:	6138      	str	r0, [r7, #16]
 800ecd4:	e056      	b.n	800ed84 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d017      	beq.n	800ed0c <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	689b      	ldr	r3, [r3, #8]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d013      	beq.n	800ed0c <select_check_waiters+0x74>
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	689a      	ldr	r2, [r3, #8]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	da00      	bge.n	800ecf0 <select_check_waiters+0x58>
 800ecee:	331f      	adds	r3, #31
 800ecf0:	115b      	asrs	r3, r3, #5
 800ecf2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f003 031f 	and.w	r3, r3, #31
 800ecfc:	fa22 f303 	lsr.w	r3, r2, r3
 800ed00:	f003 0301 	and.w	r3, r3, #1
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d001      	beq.n	800ed0c <select_check_waiters+0x74>
            do_signal = 1;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d01a      	beq.n	800ed48 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d117      	bne.n	800ed48 <select_check_waiters+0xb0>
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d013      	beq.n	800ed48 <select_check_waiters+0xb0>
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	68da      	ldr	r2, [r3, #12]
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	da00      	bge.n	800ed2c <select_check_waiters+0x94>
 800ed2a:	331f      	adds	r3, #31
 800ed2c:	115b      	asrs	r3, r3, #5
 800ed2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f003 031f 	and.w	r3, r3, #31
 800ed38:	fa22 f303 	lsr.w	r3, r2, r3
 800ed3c:	f003 0301 	and.w	r3, r3, #1
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d001      	beq.n	800ed48 <select_check_waiters+0xb0>
            do_signal = 1;
 800ed44:	2301      	movs	r3, #1
 800ed46:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d01a      	beq.n	800ed84 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d117      	bne.n	800ed84 <select_check_waiters+0xec>
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d013      	beq.n	800ed84 <select_check_waiters+0xec>
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	691a      	ldr	r2, [r3, #16]
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	da00      	bge.n	800ed68 <select_check_waiters+0xd0>
 800ed66:	331f      	adds	r3, #31
 800ed68:	115b      	asrs	r3, r3, #5
 800ed6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f003 031f 	and.w	r3, r3, #31
 800ed74:	fa22 f303 	lsr.w	r3, r2, r3
 800ed78:	f003 0301 	and.w	r3, r3, #1
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d001      	beq.n	800ed84 <select_check_waiters+0xec>
            do_signal = 1;
 800ed80:	2301      	movs	r3, #1
 800ed82:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d007      	beq.n	800ed9a <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	3320      	adds	r3, #32
 800ed94:	4618      	mov	r0, r3
 800ed96:	f00c fe89 	bl	801baac <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	617b      	str	r3, [r7, #20]
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d183      	bne.n	800ecae <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800eda6:	bf00      	nop
 800eda8:	bf00      	nop
 800edaa:	3718      	adds	r7, #24
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	2003735c 	.word	0x2003735c

0800edb4 <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b082      	sub	sp, #8
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b20      	cmp	r3, #32
 800edc0:	d009      	beq.n	800edd6 <lwip_sockopt_to_ipopt+0x22>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2b20      	cmp	r3, #32
 800edc6:	dc0c      	bgt.n	800ede2 <lwip_sockopt_to_ipopt+0x2e>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b04      	cmp	r3, #4
 800edcc:	d007      	beq.n	800edde <lwip_sockopt_to_ipopt+0x2a>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2b08      	cmp	r3, #8
 800edd2:	d002      	beq.n	800edda <lwip_sockopt_to_ipopt+0x26>
 800edd4:	e005      	b.n	800ede2 <lwip_sockopt_to_ipopt+0x2e>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 800edd6:	2320      	movs	r3, #32
 800edd8:	e00b      	b.n	800edf2 <lwip_sockopt_to_ipopt+0x3e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 800edda:	2308      	movs	r3, #8
 800eddc:	e009      	b.n	800edf2 <lwip_sockopt_to_ipopt+0x3e>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 800edde:	2304      	movs	r3, #4
 800ede0:	e007      	b.n	800edf2 <lwip_sockopt_to_ipopt+0x3e>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 800ede2:	4b06      	ldr	r3, [pc, #24]	@ (800edfc <lwip_sockopt_to_ipopt+0x48>)
 800ede4:	f640 3239 	movw	r2, #2873	@ 0xb39
 800ede8:	4905      	ldr	r1, [pc, #20]	@ (800ee00 <lwip_sockopt_to_ipopt+0x4c>)
 800edea:	4806      	ldr	r0, [pc, #24]	@ (800ee04 <lwip_sockopt_to_ipopt+0x50>)
 800edec:	f01a fa9a 	bl	8029324 <iprintf>
    return 0;
 800edf0:	2300      	movs	r3, #0
  }
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	0802c110 	.word	0x0802c110
 800ee00:	0802c49c 	.word	0x0802c49c
 800ee04:	0802c164 	.word	0x0802c164

0800ee08 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b08a      	sub	sp, #40	@ 0x28
 800ee0c:	af02      	add	r7, sp, #8
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	607a      	str	r2, [r7, #4]
 800ee14:	603b      	str	r3, [r7, #0]
  int err = 0;
 800ee16:	2300      	movs	r3, #0
 800ee18:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 800ee1a:	68f8      	ldr	r0, [r7, #12]
 800ee1c:	f7fe fff6 	bl	800de0c <get_socket>
 800ee20:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 800ee22:	69bb      	ldr	r3, [r7, #24]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d102      	bne.n	800ee2e <lwip_setsockopt+0x26>
    return -1;
 800ee28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ee2c:	e02b      	b.n	800ee86 <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d10a      	bne.n	800ee4a <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 800ee34:	230e      	movs	r3, #14
 800ee36:	613b      	str	r3, [r7, #16]
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d002      	beq.n	800ee44 <lwip_setsockopt+0x3c>
 800ee3e:	4a14      	ldr	r2, [pc, #80]	@ (800ee90 <lwip_setsockopt+0x88>)
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800ee44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ee48:	e01d      	b.n	800ee86 <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800ee4a:	4812      	ldr	r0, [pc, #72]	@ (800ee94 <lwip_setsockopt+0x8c>)
 800ee4c:	f00c fe88 	bl	801bb60 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 800ee50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee52:	9300      	str	r3, [sp, #0]
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	68b9      	ldr	r1, [r7, #8]
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f000 f81c 	bl	800ee98 <lwip_setsockopt_impl>
 800ee60:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 800ee62:	480c      	ldr	r0, [pc, #48]	@ (800ee94 <lwip_setsockopt+0x8c>)
 800ee64:	f00c fe8b 	bl	801bb7e <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	617b      	str	r3, [r7, #20]
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d002      	beq.n	800ee78 <lwip_setsockopt+0x70>
 800ee72:	4a07      	ldr	r2, [pc, #28]	@ (800ee90 <lwip_setsockopt+0x88>)
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d002      	beq.n	800ee84 <lwip_setsockopt+0x7c>
 800ee7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ee82:	e000      	b.n	800ee86 <lwip_setsockopt+0x7e>
 800ee84:	2300      	movs	r3, #0
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3720      	adds	r7, #32
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	20047370 	.word	0x20047370
 800ee94:	2003736c 	.word	0x2003736c

0800ee98 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b08e      	sub	sp, #56	@ 0x38
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	607a      	str	r2, [r7, #4]
 800eea4:	603b      	str	r3, [r7, #0]
  int err = 0;
 800eea6:	2300      	movs	r3, #0
 800eea8:	637b      	str	r3, [r7, #52]	@ 0x34
  struct lwip_sock *sock = tryget_socket(s);
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	f7fe ff97 	bl	800ddde <tryget_socket>
 800eeb0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (!sock) {
 800eeb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d101      	bne.n	800eebc <lwip_setsockopt_impl+0x24>
    return EBADF;
 800eeb8:	2309      	movs	r3, #9
 800eeba:	e2a4      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d015      	beq.n	800eef2 <lwip_setsockopt_impl+0x5a>
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eecc:	f280 8297 	bge.w	800f3fe <lwip_setsockopt_impl+0x566>
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	2bff      	cmp	r3, #255	@ 0xff
 800eed4:	f000 828f 	beq.w	800f3f6 <lwip_setsockopt_impl+0x55e>
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	2bff      	cmp	r3, #255	@ 0xff
 800eedc:	f300 828f 	bgt.w	800f3fe <lwip_setsockopt_impl+0x566>
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	f000 8112 	beq.w	800f10c <lwip_setsockopt_impl+0x274>
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	2b06      	cmp	r3, #6
 800eeec:	f000 8233 	beq.w	800f356 <lwip_setsockopt_impl+0x4be>
 800eef0:	e285      	b.n	800f3fe <lwip_setsockopt_impl+0x566>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f241 020b 	movw	r2, #4107	@ 0x100b
 800eef8:	4293      	cmp	r3, r2
 800eefa:	f000 80c3 	beq.w	800f084 <lwip_setsockopt_impl+0x1ec>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f241 020b 	movw	r2, #4107	@ 0x100b
 800ef04:	4293      	cmp	r3, r2
 800ef06:	f300 80fd 	bgt.w	800f104 <lwip_setsockopt_impl+0x26c>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f241 020a 	movw	r2, #4106	@ 0x100a
 800ef10:	4293      	cmp	r3, r2
 800ef12:	f000 8082 	beq.w	800f01a <lwip_setsockopt_impl+0x182>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f241 020a 	movw	r2, #4106	@ 0x100a
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	f300 80f1 	bgt.w	800f104 <lwip_setsockopt_impl+0x26c>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f241 0206 	movw	r2, #4102	@ 0x1006
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d050      	beq.n	800efce <lwip_setsockopt_impl+0x136>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f241 0206 	movw	r2, #4102	@ 0x1006
 800ef32:	4293      	cmp	r3, r2
 800ef34:	f300 80e6 	bgt.w	800f104 <lwip_setsockopt_impl+0x26c>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2b08      	cmp	r3, #8
 800ef3c:	d003      	beq.n	800ef46 <lwip_setsockopt_impl+0xae>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2b20      	cmp	r3, #32
 800ef42:	f040 80df 	bne.w	800f104 <lwip_setsockopt_impl+0x26c>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2b20      	cmp	r3, #32
 800ef4a:	d108      	bne.n	800ef5e <lwip_setsockopt_impl+0xc6>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 800ef4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if ((optname == SO_BROADCAST) &&
 800ef56:	2b20      	cmp	r3, #32
 800ef58:	d001      	beq.n	800ef5e <lwip_setsockopt_impl+0xc6>
            done_socket(sock);
            return ENOPROTOOPT;
 800ef5a:	235c      	movs	r3, #92	@ 0x5c
 800ef5c:	e253      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f7ff ff28 	bl	800edb4 <lwip_sockopt_to_ipopt>
 800ef64:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800ef66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef68:	2b03      	cmp	r3, #3
 800ef6a:	d801      	bhi.n	800ef70 <lwip_setsockopt_impl+0xd8>
 800ef6c:	2316      	movs	r3, #22
 800ef6e:	e24a      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800ef70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d004      	beq.n	800ef82 <lwip_setsockopt_impl+0xea>
 800ef78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d101      	bne.n	800ef86 <lwip_setsockopt_impl+0xee>
 800ef82:	2316      	movs	r3, #22
 800ef84:	e23f      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
          if (*(const int *)optval) {
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d00e      	beq.n	800efac <lwip_setsockopt_impl+0x114>
            ip_set_option(sock->conn->pcb.ip, optname);
 800ef8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	7a5b      	ldrb	r3, [r3, #9]
 800ef96:	b25a      	sxtb	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	b25b      	sxtb	r3, r3
 800ef9c:	4313      	orrs	r3, r2
 800ef9e:	b25a      	sxtb	r2, r3
 800efa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	b2d2      	uxtb	r2, r2
 800efa8:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 800efaa:	e0ae      	b.n	800f10a <lwip_setsockopt_impl+0x272>
            ip_reset_option(sock->conn->pcb.ip, optname);
 800efac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	7a5b      	ldrb	r3, [r3, #9]
 800efb4:	b25a      	sxtb	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	b25b      	sxtb	r3, r3
 800efba:	43db      	mvns	r3, r3
 800efbc:	b25b      	sxtb	r3, r3
 800efbe:	4013      	ands	r3, r2
 800efc0:	b25a      	sxtb	r2, r3
 800efc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	b2d2      	uxtb	r2, r2
 800efca:	725a      	strb	r2, [r3, #9]
          break;
 800efcc:	e09d      	b.n	800f10a <lwip_setsockopt_impl+0x272>
        }
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
        case SO_RCVTIMEO: {
          long ms_long;
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
 800efce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efd0:	2b0f      	cmp	r3, #15
 800efd2:	d801      	bhi.n	800efd8 <lwip_setsockopt_impl+0x140>
 800efd4:	2316      	movs	r3, #22
 800efd6:	e216      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800efd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d101      	bne.n	800efe4 <lwip_setsockopt_impl+0x14c>
 800efe0:	2316      	movs	r3, #22
 800efe2:	e210      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
          ms_long = LWIP_SO_SNDRCVTIMEO_GET_MS(optval);
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800efee:	fb03 f202 	mul.w	r2, r3, r2
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	689b      	ldr	r3, [r3, #8]
 800eff6:	4991      	ldr	r1, [pc, #580]	@ (800f23c <lwip_setsockopt_impl+0x3a4>)
 800eff8:	fb81 0103 	smull	r0, r1, r1, r3
 800effc:	1189      	asrs	r1, r1, #6
 800effe:	17db      	asrs	r3, r3, #31
 800f000:	1acb      	subs	r3, r1, r3
 800f002:	4413      	add	r3, r2
 800f004:	623b      	str	r3, [r7, #32]
          if (ms_long < 0) {
 800f006:	6a3b      	ldr	r3, [r7, #32]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	da01      	bge.n	800f010 <lwip_setsockopt_impl+0x178>
            done_socket(sock);
            return EINVAL;
 800f00c:	2316      	movs	r3, #22
 800f00e:	e1fa      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
          }
          netconn_set_recvtimeout(sock->conn, (u32_t)ms_long);
 800f010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	6a3a      	ldr	r2, [r7, #32]
 800f016:	61da      	str	r2, [r3, #28]
          break;
 800f018:	e077      	b.n	800f10a <lwip_setsockopt_impl+0x272>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800f01a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f01c:	2b03      	cmp	r3, #3
 800f01e:	d801      	bhi.n	800f024 <lwip_setsockopt_impl+0x18c>
 800f020:	2316      	movs	r3, #22
 800f022:	e1f0      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d004      	beq.n	800f036 <lwip_setsockopt_impl+0x19e>
 800f02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d101      	bne.n	800f03a <lwip_setsockopt_impl+0x1a2>
 800f036:	2316      	movs	r3, #22
 800f038:	e1e5      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f044:	2b20      	cmp	r3, #32
 800f046:	d001      	beq.n	800f04c <lwip_setsockopt_impl+0x1b4>
 800f048:	235c      	movs	r3, #92	@ 0x5c
 800f04a:	e1dc      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d00b      	beq.n	800f06c <lwip_setsockopt_impl+0x1d4>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800f054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	685b      	ldr	r3, [r3, #4]
 800f05a:	7c1a      	ldrb	r2, [r3, #16]
 800f05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	f042 0201 	orr.w	r2, r2, #1
 800f066:	b2d2      	uxtb	r2, r2
 800f068:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 800f06a:	e04e      	b.n	800f10a <lwip_setsockopt_impl+0x272>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800f06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	7c1a      	ldrb	r2, [r3, #16]
 800f074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	685b      	ldr	r3, [r3, #4]
 800f07a:	f022 0201 	bic.w	r2, r2, #1
 800f07e:	b2d2      	uxtb	r2, r2
 800f080:	741a      	strb	r2, [r3, #16]
          break;
 800f082:	e042      	b.n	800f10a <lwip_setsockopt_impl+0x272>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 800f084:	2300      	movs	r3, #0
 800f086:	633b      	str	r3, [r7, #48]	@ 0x30

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 800f088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f08a:	2b05      	cmp	r3, #5
 800f08c:	d801      	bhi.n	800f092 <lwip_setsockopt_impl+0x1fa>
 800f08e:	2316      	movs	r3, #22
 800f090:	e1b9      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d101      	bne.n	800f09e <lwip_setsockopt_impl+0x206>
 800f09a:	2316      	movs	r3, #22
 800f09c:	e1b3      	b.n	800f406 <lwip_setsockopt_impl+0x56e>

          iface = (const struct ifreq *)optval;
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	627b      	str	r3, [r7, #36]	@ 0x24
          if (iface->ifr_name[0] != 0) {
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d009      	beq.n	800f0be <lwip_setsockopt_impl+0x226>
            n = netif_find(iface->ifr_name);
 800f0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f001 fd99 	bl	8010be4 <netif_find>
 800f0b2:	6338      	str	r0, [r7, #48]	@ 0x30
            if (n == NULL) {
 800f0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d101      	bne.n	800f0be <lwip_setsockopt_impl+0x226>
              done_socket(sock);
              return ENODEV;
 800f0ba:	2313      	movs	r3, #19
 800f0bc:	e1a3      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800f0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f0c8:	2b10      	cmp	r3, #16
 800f0ca:	d002      	beq.n	800f0d2 <lwip_setsockopt_impl+0x23a>
 800f0cc:	2b20      	cmp	r3, #32
 800f0ce:	d008      	beq.n	800f0e2 <lwip_setsockopt_impl+0x24a>
 800f0d0:	e00f      	b.n	800f0f2 <lwip_setsockopt_impl+0x25a>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 800f0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f002 fff8 	bl	80120d0 <tcp_bind_netif>
              break;
 800f0e0:	e00f      	b.n	800f102 <lwip_setsockopt_impl+0x26a>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 800f0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f009 f9ba 	bl	8018464 <udp_bind_netif>
              break;
 800f0f0:	e007      	b.n	800f102 <lwip_setsockopt_impl+0x26a>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 800f0f2:	4b53      	ldr	r3, [pc, #332]	@ (800f240 <lwip_setsockopt_impl+0x3a8>)
 800f0f4:	f640 527d 	movw	r2, #3453	@ 0xd7d
 800f0f8:	4952      	ldr	r1, [pc, #328]	@ (800f244 <lwip_setsockopt_impl+0x3ac>)
 800f0fa:	4853      	ldr	r0, [pc, #332]	@ (800f248 <lwip_setsockopt_impl+0x3b0>)
 800f0fc:	f01a f912 	bl	8029324 <iprintf>
              break;
 800f100:	bf00      	nop
          }
        }
        break;
 800f102:	e002      	b.n	800f10a <lwip_setsockopt_impl+0x272>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800f104:	235c      	movs	r3, #92	@ 0x5c
 800f106:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800f108:	bf00      	nop
      }  /* switch (optname) */
      break;
 800f10a:	e17b      	b.n	800f404 <lwip_setsockopt_impl+0x56c>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	3b01      	subs	r3, #1
 800f110:	2b06      	cmp	r3, #6
 800f112:	f200 811b 	bhi.w	800f34c <lwip_setsockopt_impl+0x4b4>
 800f116:	a201      	add	r2, pc, #4	@ (adr r2, 800f11c <lwip_setsockopt_impl+0x284>)
 800f118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f11c:	0800f169 	.word	0x0800f169
 800f120:	0800f139 	.word	0x0800f139
 800f124:	0800f297 	.word	0x0800f297
 800f128:	0800f297 	.word	0x0800f297
 800f12c:	0800f199 	.word	0x0800f199
 800f130:	0800f1d9 	.word	0x0800f1d9
 800f134:	0800f21d 	.word	0x0800f21d

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800f138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f13a:	2b03      	cmp	r3, #3
 800f13c:	d801      	bhi.n	800f142 <lwip_setsockopt_impl+0x2aa>
 800f13e:	2316      	movs	r3, #22
 800f140:	e161      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d004      	beq.n	800f154 <lwip_setsockopt_impl+0x2bc>
 800f14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d101      	bne.n	800f158 <lwip_setsockopt_impl+0x2c0>
 800f154:	2316      	movs	r3, #22
 800f156:	e156      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	b2d2      	uxtb	r2, r2
 800f164:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 800f166:	e0f5      	b.n	800f354 <lwip_setsockopt_impl+0x4bc>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800f168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f16a:	2b03      	cmp	r3, #3
 800f16c:	d801      	bhi.n	800f172 <lwip_setsockopt_impl+0x2da>
 800f16e:	2316      	movs	r3, #22
 800f170:	e149      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d004      	beq.n	800f184 <lwip_setsockopt_impl+0x2ec>
 800f17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d101      	bne.n	800f188 <lwip_setsockopt_impl+0x2f0>
 800f184:	2316      	movs	r3, #22
 800f186:	e13e      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	b2d2      	uxtb	r2, r2
 800f194:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 800f196:	e0dd      	b.n	800f354 <lwip_setsockopt_impl+0x4bc>
          }
          break;
#endif /* LWIP_NETBUF_RECVINFO */
#if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS && LWIP_UDP
        case IP_MULTICAST_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
 800f198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d101      	bne.n	800f1a2 <lwip_setsockopt_impl+0x30a>
 800f19e:	2316      	movs	r3, #22
 800f1a0:	e131      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d004      	beq.n	800f1b4 <lwip_setsockopt_impl+0x31c>
 800f1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d101      	bne.n	800f1b8 <lwip_setsockopt_impl+0x320>
 800f1b4:	2316      	movs	r3, #22
 800f1b6:	e126      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f1c2:	2b20      	cmp	r3, #32
 800f1c4:	d001      	beq.n	800f1ca <lwip_setsockopt_impl+0x332>
 800f1c6:	235c      	movs	r3, #92	@ 0x5c
 800f1c8:	e11d      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
          udp_set_multicast_ttl(sock->conn->pcb.udp, (u8_t)(*(const u8_t *)optval));
 800f1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	683a      	ldr	r2, [r7, #0]
 800f1d2:	7812      	ldrb	r2, [r2, #0]
 800f1d4:	775a      	strb	r2, [r3, #29]
          break;
 800f1d6:	e0bd      	b.n	800f354 <lwip_setsockopt_impl+0x4bc>
        case IP_MULTICAST_IF: {
          ip4_addr_t if_addr;
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct in_addr, NETCONN_UDP);
 800f1d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1da:	2b03      	cmp	r3, #3
 800f1dc:	d801      	bhi.n	800f1e2 <lwip_setsockopt_impl+0x34a>
 800f1de:	2316      	movs	r3, #22
 800f1e0:	e111      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d004      	beq.n	800f1f4 <lwip_setsockopt_impl+0x35c>
 800f1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d101      	bne.n	800f1f8 <lwip_setsockopt_impl+0x360>
 800f1f4:	2316      	movs	r3, #22
 800f1f6:	e106      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f202:	2b20      	cmp	r3, #32
 800f204:	d001      	beq.n	800f20a <lwip_setsockopt_impl+0x372>
 800f206:	235c      	movs	r3, #92	@ 0x5c
 800f208:	e0fd      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
          inet_addr_to_ip4addr(&if_addr, (const struct in_addr *)optval);
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	61bb      	str	r3, [r7, #24]
          udp_set_multicast_netif_addr(sock->conn->pcb.udp, &if_addr);
 800f210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	69ba      	ldr	r2, [r7, #24]
 800f218:	619a      	str	r2, [r3, #24]
        }
        break;
 800f21a:	e09b      	b.n	800f354 <lwip_setsockopt_impl+0x4bc>
        case IP_MULTICAST_LOOP:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
 800f21c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d101      	bne.n	800f226 <lwip_setsockopt_impl+0x38e>
 800f222:	2316      	movs	r3, #22
 800f224:	e0ef      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d004      	beq.n	800f238 <lwip_setsockopt_impl+0x3a0>
 800f22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d109      	bne.n	800f24c <lwip_setsockopt_impl+0x3b4>
 800f238:	2316      	movs	r3, #22
 800f23a:	e0e4      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f23c:	10624dd3 	.word	0x10624dd3
 800f240:	0802c110 	.word	0x0802c110
 800f244:	0802c4b4 	.word	0x0802c4b4
 800f248:	0802c164 	.word	0x0802c164
 800f24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f256:	2b20      	cmp	r3, #32
 800f258:	d001      	beq.n	800f25e <lwip_setsockopt_impl+0x3c6>
 800f25a:	235c      	movs	r3, #92	@ 0x5c
 800f25c:	e0d3      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
          if (*(const u8_t *)optval) {
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d00b      	beq.n	800f27e <lwip_setsockopt_impl+0x3e6>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_MULTICAST_LOOP);
 800f266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	685b      	ldr	r3, [r3, #4]
 800f26c:	7c1a      	ldrb	r2, [r3, #16]
 800f26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	f042 0208 	orr.w	r2, r2, #8
 800f278:	b2d2      	uxtb	r2, r2
 800f27a:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_MULTICAST_LOOP);
          }
          break;
 800f27c:	e06a      	b.n	800f354 <lwip_setsockopt_impl+0x4bc>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_MULTICAST_LOOP);
 800f27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	7c1a      	ldrb	r2, [r3, #16]
 800f286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	f022 0208 	bic.w	r2, r2, #8
 800f290:	b2d2      	uxtb	r2, r2
 800f292:	741a      	strb	r2, [r3, #16]
          break;
 800f294:	e05e      	b.n	800f354 <lwip_setsockopt_impl+0x4bc>
#if LWIP_IGMP
        case IP_ADD_MEMBERSHIP:
        case IP_DROP_MEMBERSHIP: {
          /* If this is a TCP or a RAW socket, ignore these options. */
          err_t igmp_err;
          const struct ip_mreq *imr = (const struct ip_mreq *)optval;
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	61fb      	str	r3, [r7, #28]
          ip4_addr_t if_addr;
          ip4_addr_t multi_addr;
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ip_mreq, NETCONN_UDP);
 800f29a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f29c:	2b07      	cmp	r3, #7
 800f29e:	d801      	bhi.n	800f2a4 <lwip_setsockopt_impl+0x40c>
 800f2a0:	2316      	movs	r3, #22
 800f2a2:	e0b0      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d004      	beq.n	800f2b6 <lwip_setsockopt_impl+0x41e>
 800f2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d101      	bne.n	800f2ba <lwip_setsockopt_impl+0x422>
 800f2b6:	2316      	movs	r3, #22
 800f2b8:	e0a5      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f2c4:	2b20      	cmp	r3, #32
 800f2c6:	d001      	beq.n	800f2cc <lwip_setsockopt_impl+0x434>
 800f2c8:	235c      	movs	r3, #92	@ 0x5c
 800f2ca:	e09c      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
          inet_addr_to_ip4addr(&if_addr, &imr->imr_interface);
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	617b      	str	r3, [r7, #20]
          inet_addr_to_ip4addr(&multi_addr, &imr->imr_multiaddr);
 800f2d2:	69fb      	ldr	r3, [r7, #28]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	613b      	str	r3, [r7, #16]
          if (optname == IP_ADD_MEMBERSHIP) {
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2b03      	cmp	r3, #3
 800f2dc:	d11c      	bne.n	800f318 <lwip_setsockopt_impl+0x480>
            if (!lwip_socket_register_membership(s, &if_addr, &multi_addr)) {
 800f2de:	f107 0210 	add.w	r2, r7, #16
 800f2e2:	f107 0314 	add.w	r3, r7, #20
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	f000 f891 	bl	800f410 <lwip_socket_register_membership>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d105      	bne.n	800f300 <lwip_setsockopt_impl+0x468>
              /* cannot track membership (out of memory) */
              err = ENOMEM;
 800f2f4:	230c      	movs	r3, #12
 800f2f6:	637b      	str	r3, [r7, #52]	@ 0x34
              igmp_err = ERR_OK;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f2fe:	e01e      	b.n	800f33e <lwip_setsockopt_impl+0x4a6>
            } else {
              igmp_err = igmp_joingroup(&if_addr, &multi_addr);
 800f300:	f107 0210 	add.w	r2, r7, #16
 800f304:	f107 0314 	add.w	r3, r7, #20
 800f308:	4611      	mov	r1, r2
 800f30a:	4618      	mov	r0, r3
 800f30c:	f00a fbfe 	bl	8019b0c <igmp_joingroup>
 800f310:	4603      	mov	r3, r0
 800f312:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f316:	e012      	b.n	800f33e <lwip_setsockopt_impl+0x4a6>
            }
          } else {
            igmp_err = igmp_leavegroup(&if_addr, &multi_addr);
 800f318:	f107 0210 	add.w	r2, r7, #16
 800f31c:	f107 0314 	add.w	r3, r7, #20
 800f320:	4611      	mov	r1, r2
 800f322:	4618      	mov	r0, r3
 800f324:	f00a fcce 	bl	8019cc4 <igmp_leavegroup>
 800f328:	4603      	mov	r3, r0
 800f32a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            lwip_socket_unregister_membership(s, &if_addr, &multi_addr);
 800f32e:	f107 0210 	add.w	r2, r7, #16
 800f332:	f107 0314 	add.w	r3, r7, #20
 800f336:	4619      	mov	r1, r3
 800f338:	68f8      	ldr	r0, [r7, #12]
 800f33a:	f000 f8b3 	bl	800f4a4 <lwip_socket_unregister_membership>
          }
          if (igmp_err != ERR_OK) {
 800f33e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800f342:	2b00      	cmp	r3, #0
 800f344:	d005      	beq.n	800f352 <lwip_setsockopt_impl+0x4ba>
            err = EADDRNOTAVAIL;
 800f346:	2363      	movs	r3, #99	@ 0x63
 800f348:	637b      	str	r3, [r7, #52]	@ 0x34
          }
        }
        break;
 800f34a:	e002      	b.n	800f352 <lwip_setsockopt_impl+0x4ba>
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800f34c:	235c      	movs	r3, #92	@ 0x5c
 800f34e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800f350:	e000      	b.n	800f354 <lwip_setsockopt_impl+0x4bc>
        break;
 800f352:	bf00      	nop
      }  /* switch (optname) */
      break;
 800f354:	e056      	b.n	800f404 <lwip_setsockopt_impl+0x56c>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800f356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f358:	2b03      	cmp	r3, #3
 800f35a:	d801      	bhi.n	800f360 <lwip_setsockopt_impl+0x4c8>
 800f35c:	2316      	movs	r3, #22
 800f35e:	e052      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d004      	beq.n	800f372 <lwip_setsockopt_impl+0x4da>
 800f368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d101      	bne.n	800f376 <lwip_setsockopt_impl+0x4de>
 800f372:	2316      	movs	r3, #22
 800f374:	e047      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f380:	2b10      	cmp	r3, #16
 800f382:	d001      	beq.n	800f388 <lwip_setsockopt_impl+0x4f0>
 800f384:	235c      	movs	r3, #92	@ 0x5c
 800f386:	e03e      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 800f388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	7d1b      	ldrb	r3, [r3, #20]
 800f390:	2b01      	cmp	r3, #1
 800f392:	d101      	bne.n	800f398 <lwip_setsockopt_impl+0x500>
        done_socket(sock);
        return EINVAL;
 800f394:	2316      	movs	r3, #22
 800f396:	e036      	b.n	800f406 <lwip_setsockopt_impl+0x56e>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	d003      	beq.n	800f3a6 <lwip_setsockopt_impl+0x50e>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2b02      	cmp	r3, #2
 800f3a2:	d01c      	beq.n	800f3de <lwip_setsockopt_impl+0x546>
 800f3a4:	e023      	b.n	800f3ee <lwip_setsockopt_impl+0x556>
      }
      switch (optname) {
        case TCP_NODELAY:
          if (*(const int *)optval) {
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d00b      	beq.n	800f3c6 <lwip_setsockopt_impl+0x52e>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800f3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	8b5a      	ldrh	r2, [r3, #26]
 800f3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f3c0:	b292      	uxth	r2, r2
 800f3c2:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 800f3c4:	e016      	b.n	800f3f4 <lwip_setsockopt_impl+0x55c>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800f3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	8b5a      	ldrh	r2, [r3, #26]
 800f3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f3d8:	b292      	uxth	r2, r2
 800f3da:	835a      	strh	r2, [r3, #26]
          break;
 800f3dc:	e00a      	b.n	800f3f4 <lwip_setsockopt_impl+0x55c>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 800f3ec:	e002      	b.n	800f3f4 <lwip_setsockopt_impl+0x55c>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800f3ee:	235c      	movs	r3, #92	@ 0x5c
 800f3f0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800f3f2:	bf00      	nop
      }  /* switch (optname) */
      break;
 800f3f4:	e006      	b.n	800f404 <lwip_setsockopt_impl+0x56c>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800f3f6:	235c      	movs	r3, #92	@ 0x5c
 800f3f8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800f3fa:	bf00      	nop
      }  /* switch (optname) */
      break;
 800f3fc:	e002      	b.n	800f404 <lwip_setsockopt_impl+0x56c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 800f3fe:	235c      	movs	r3, #92	@ 0x5c
 800f400:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800f402:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 800f404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f406:	4618      	mov	r0, r3
 800f408:	3738      	adds	r7, #56	@ 0x38
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop

0800f410 <lwip_socket_register_membership>:
 *
 * @return 1 on success, 0 on failure
 */
static int
lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 800f41c:	68f8      	ldr	r0, [r7, #12]
 800f41e:	f7fe fcf5 	bl	800de0c <get_socket>
 800f422:	6138      	str	r0, [r7, #16]
  int i;

  if (!sock) {
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d101      	bne.n	800f42e <lwip_socket_register_membership+0x1e>
    return 0;
 800f42a:	2300      	movs	r3, #0
 800f42c:	e034      	b.n	800f498 <lwip_socket_register_membership+0x88>
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800f42e:	2300      	movs	r3, #0
 800f430:	617b      	str	r3, [r7, #20]
 800f432:	e02d      	b.n	800f490 <lwip_socket_register_membership+0x80>
    if (socket_ipv4_multicast_memberships[i].sock == NULL) {
 800f434:	491a      	ldr	r1, [pc, #104]	@ (800f4a0 <lwip_socket_register_membership+0x90>)
 800f436:	697a      	ldr	r2, [r7, #20]
 800f438:	4613      	mov	r3, r2
 800f43a:	005b      	lsls	r3, r3, #1
 800f43c:	4413      	add	r3, r2
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	440b      	add	r3, r1
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d120      	bne.n	800f48a <lwip_socket_register_membership+0x7a>
      socket_ipv4_multicast_memberships[i].sock = sock;
 800f448:	4915      	ldr	r1, [pc, #84]	@ (800f4a0 <lwip_socket_register_membership+0x90>)
 800f44a:	697a      	ldr	r2, [r7, #20]
 800f44c:	4613      	mov	r3, r2
 800f44e:	005b      	lsls	r3, r3, #1
 800f450:	4413      	add	r3, r2
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	440b      	add	r3, r1
 800f456:	693a      	ldr	r2, [r7, #16]
 800f458:	601a      	str	r2, [r3, #0]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].if_addr, *if_addr);
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	6819      	ldr	r1, [r3, #0]
 800f45e:	4810      	ldr	r0, [pc, #64]	@ (800f4a0 <lwip_socket_register_membership+0x90>)
 800f460:	697a      	ldr	r2, [r7, #20]
 800f462:	4613      	mov	r3, r2
 800f464:	005b      	lsls	r3, r3, #1
 800f466:	4413      	add	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4403      	add	r3, r0
 800f46c:	3304      	adds	r3, #4
 800f46e:	6019      	str	r1, [r3, #0]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].multi_addr, *multi_addr);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6819      	ldr	r1, [r3, #0]
 800f474:	480a      	ldr	r0, [pc, #40]	@ (800f4a0 <lwip_socket_register_membership+0x90>)
 800f476:	697a      	ldr	r2, [r7, #20]
 800f478:	4613      	mov	r3, r2
 800f47a:	005b      	lsls	r3, r3, #1
 800f47c:	4413      	add	r3, r2
 800f47e:	009b      	lsls	r3, r3, #2
 800f480:	4403      	add	r3, r0
 800f482:	3308      	adds	r3, #8
 800f484:	6019      	str	r1, [r3, #0]
      done_socket(sock);
      return 1;
 800f486:	2301      	movs	r3, #1
 800f488:	e006      	b.n	800f498 <lwip_socket_register_membership+0x88>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	3301      	adds	r3, #1
 800f48e:	617b      	str	r3, [r7, #20]
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	2b03      	cmp	r3, #3
 800f494:	ddce      	ble.n	800f434 <lwip_socket_register_membership+0x24>
    }
  }
  done_socket(sock);
  return 0;
 800f496:	2300      	movs	r3, #0
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3718      	adds	r7, #24
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	200372ec 	.word	0x200372ec

0800f4a4 <lwip_socket_unregister_membership>:
 *
 * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b086      	sub	sp, #24
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 800f4b0:	68f8      	ldr	r0, [r7, #12]
 800f4b2:	f7fe fcab 	bl	800de0c <get_socket>
 800f4b6:	6138      	str	r0, [r7, #16]
  int i;

  if (!sock) {
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d04c      	beq.n	800f558 <lwip_socket_unregister_membership+0xb4>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800f4be:	2300      	movs	r3, #0
 800f4c0:	617b      	str	r3, [r7, #20]
 800f4c2:	e045      	b.n	800f550 <lwip_socket_unregister_membership+0xac>
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
 800f4c4:	4926      	ldr	r1, [pc, #152]	@ (800f560 <lwip_socket_unregister_membership+0xbc>)
 800f4c6:	697a      	ldr	r2, [r7, #20]
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	005b      	lsls	r3, r3, #1
 800f4cc:	4413      	add	r3, r2
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	440b      	add	r3, r1
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	693a      	ldr	r2, [r7, #16]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d137      	bne.n	800f54a <lwip_socket_unregister_membership+0xa6>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
 800f4da:	4921      	ldr	r1, [pc, #132]	@ (800f560 <lwip_socket_unregister_membership+0xbc>)
 800f4dc:	697a      	ldr	r2, [r7, #20]
 800f4de:	4613      	mov	r3, r2
 800f4e0:	005b      	lsls	r3, r3, #1
 800f4e2:	4413      	add	r3, r2
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	440b      	add	r3, r1
 800f4e8:	3304      	adds	r3, #4
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	681b      	ldr	r3, [r3, #0]
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d12a      	bne.n	800f54a <lwip_socket_unregister_membership+0xa6>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].multi_addr, multi_addr)) {
 800f4f4:	491a      	ldr	r1, [pc, #104]	@ (800f560 <lwip_socket_unregister_membership+0xbc>)
 800f4f6:	697a      	ldr	r2, [r7, #20]
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	005b      	lsls	r3, r3, #1
 800f4fc:	4413      	add	r3, r2
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	440b      	add	r3, r1
 800f502:	3308      	adds	r3, #8
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d11d      	bne.n	800f54a <lwip_socket_unregister_membership+0xa6>
      socket_ipv4_multicast_memberships[i].sock = NULL;
 800f50e:	4914      	ldr	r1, [pc, #80]	@ (800f560 <lwip_socket_unregister_membership+0xbc>)
 800f510:	697a      	ldr	r2, [r7, #20]
 800f512:	4613      	mov	r3, r2
 800f514:	005b      	lsls	r3, r3, #1
 800f516:	4413      	add	r3, r2
 800f518:	009b      	lsls	r3, r3, #2
 800f51a:	440b      	add	r3, r1
 800f51c:	2200      	movs	r2, #0
 800f51e:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
 800f520:	490f      	ldr	r1, [pc, #60]	@ (800f560 <lwip_socket_unregister_membership+0xbc>)
 800f522:	697a      	ldr	r2, [r7, #20]
 800f524:	4613      	mov	r3, r2
 800f526:	005b      	lsls	r3, r3, #1
 800f528:	4413      	add	r3, r2
 800f52a:	009b      	lsls	r3, r3, #2
 800f52c:	440b      	add	r3, r1
 800f52e:	3304      	adds	r3, #4
 800f530:	2200      	movs	r2, #0
 800f532:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
 800f534:	490a      	ldr	r1, [pc, #40]	@ (800f560 <lwip_socket_unregister_membership+0xbc>)
 800f536:	697a      	ldr	r2, [r7, #20]
 800f538:	4613      	mov	r3, r2
 800f53a:	005b      	lsls	r3, r3, #1
 800f53c:	4413      	add	r3, r2
 800f53e:	009b      	lsls	r3, r3, #2
 800f540:	440b      	add	r3, r1
 800f542:	3308      	adds	r3, #8
 800f544:	2200      	movs	r2, #0
 800f546:	601a      	str	r2, [r3, #0]
      break;
 800f548:	e007      	b.n	800f55a <lwip_socket_unregister_membership+0xb6>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	3301      	adds	r3, #1
 800f54e:	617b      	str	r3, [r7, #20]
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	2b03      	cmp	r3, #3
 800f554:	ddb6      	ble.n	800f4c4 <lwip_socket_unregister_membership+0x20>
 800f556:	e000      	b.n	800f55a <lwip_socket_unregister_membership+0xb6>
    return;
 800f558:	bf00      	nop
    }
  }
  done_socket(sock);
}
 800f55a:	3718      	adds	r7, #24
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	200372ec 	.word	0x200372ec

0800f564 <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b086      	sub	sp, #24
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f7fe fc4d 	bl	800de0c <get_socket>
 800f572:	6138      	str	r0, [r7, #16]
  int i;

  if (!sock) {
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d04e      	beq.n	800f618 <lwip_socket_drop_registered_memberships+0xb4>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800f57a:	2300      	movs	r3, #0
 800f57c:	617b      	str	r3, [r7, #20]
 800f57e:	e047      	b.n	800f610 <lwip_socket_drop_registered_memberships+0xac>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
 800f580:	4927      	ldr	r1, [pc, #156]	@ (800f620 <lwip_socket_drop_registered_memberships+0xbc>)
 800f582:	697a      	ldr	r2, [r7, #20]
 800f584:	4613      	mov	r3, r2
 800f586:	005b      	lsls	r3, r3, #1
 800f588:	4413      	add	r3, r2
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	440b      	add	r3, r1
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	693a      	ldr	r2, [r7, #16]
 800f592:	429a      	cmp	r2, r3
 800f594:	d139      	bne.n	800f60a <lwip_socket_drop_registered_memberships+0xa6>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
 800f596:	4922      	ldr	r1, [pc, #136]	@ (800f620 <lwip_socket_drop_registered_memberships+0xbc>)
 800f598:	697a      	ldr	r2, [r7, #20]
 800f59a:	4613      	mov	r3, r2
 800f59c:	005b      	lsls	r3, r3, #1
 800f59e:	4413      	add	r3, r2
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	440b      	add	r3, r1
 800f5a4:	3308      	adds	r3, #8
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	60fb      	str	r3, [r7, #12]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
 800f5aa:	491d      	ldr	r1, [pc, #116]	@ (800f620 <lwip_socket_drop_registered_memberships+0xbc>)
 800f5ac:	697a      	ldr	r2, [r7, #20]
 800f5ae:	4613      	mov	r3, r2
 800f5b0:	005b      	lsls	r3, r3, #1
 800f5b2:	4413      	add	r3, r2
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	440b      	add	r3, r1
 800f5b8:	3304      	adds	r3, #4
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	60bb      	str	r3, [r7, #8]
      socket_ipv4_multicast_memberships[i].sock = NULL;
 800f5be:	4918      	ldr	r1, [pc, #96]	@ (800f620 <lwip_socket_drop_registered_memberships+0xbc>)
 800f5c0:	697a      	ldr	r2, [r7, #20]
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	005b      	lsls	r3, r3, #1
 800f5c6:	4413      	add	r3, r2
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	440b      	add	r3, r1
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
 800f5d0:	4913      	ldr	r1, [pc, #76]	@ (800f620 <lwip_socket_drop_registered_memberships+0xbc>)
 800f5d2:	697a      	ldr	r2, [r7, #20]
 800f5d4:	4613      	mov	r3, r2
 800f5d6:	005b      	lsls	r3, r3, #1
 800f5d8:	4413      	add	r3, r2
 800f5da:	009b      	lsls	r3, r3, #2
 800f5dc:	440b      	add	r3, r1
 800f5de:	3304      	adds	r3, #4
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
 800f5e4:	490e      	ldr	r1, [pc, #56]	@ (800f620 <lwip_socket_drop_registered_memberships+0xbc>)
 800f5e6:	697a      	ldr	r2, [r7, #20]
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	005b      	lsls	r3, r3, #1
 800f5ec:	4413      	add	r3, r2
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	440b      	add	r3, r1
 800f5f2:	3308      	adds	r3, #8
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	601a      	str	r2, [r3, #0]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	6818      	ldr	r0, [r3, #0]
 800f5fc:	f107 0208 	add.w	r2, r7, #8
 800f600:	f107 010c 	add.w	r1, r7, #12
 800f604:	2301      	movs	r3, #1
 800f606:	f7fc ff31 	bl	800c46c <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	3301      	adds	r3, #1
 800f60e:	617b      	str	r3, [r7, #20]
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	2b03      	cmp	r3, #3
 800f614:	ddb4      	ble.n	800f580 <lwip_socket_drop_registered_memberships+0x1c>
 800f616:	e000      	b.n	800f61a <lwip_socket_drop_registered_memberships+0xb6>
    return;
 800f618:	bf00      	nop
    }
  }
  done_socket(sock);
}
 800f61a:	3718      	adds	r7, #24
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}
 800f620:	200372ec 	.word	0x200372ec

0800f624 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800f62e:	f008 fa69 	bl	8017b04 <sys_timeouts_sleeptime>
 800f632:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f63a:	d10b      	bne.n	800f654 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800f63c:	4813      	ldr	r0, [pc, #76]	@ (800f68c <tcpip_timeouts_mbox_fetch+0x68>)
 800f63e:	f00c fa9e 	bl	801bb7e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800f642:	2200      	movs	r2, #0
 800f644:	6839      	ldr	r1, [r7, #0]
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f00c f974 	bl	801b934 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f64c:	480f      	ldr	r0, [pc, #60]	@ (800f68c <tcpip_timeouts_mbox_fetch+0x68>)
 800f64e:	f00c fa87 	bl	801bb60 <sys_mutex_lock>
    return;
 800f652:	e018      	b.n	800f686 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d102      	bne.n	800f660 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800f65a:	f008 fa19 	bl	8017a90 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f65e:	e7e6      	b.n	800f62e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800f660:	480a      	ldr	r0, [pc, #40]	@ (800f68c <tcpip_timeouts_mbox_fetch+0x68>)
 800f662:	f00c fa8c 	bl	801bb7e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	6839      	ldr	r1, [r7, #0]
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f00c f962 	bl	801b934 <sys_arch_mbox_fetch>
 800f670:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800f672:	4806      	ldr	r0, [pc, #24]	@ (800f68c <tcpip_timeouts_mbox_fetch+0x68>)
 800f674:	f00c fa74 	bl	801bb60 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f67e:	d102      	bne.n	800f686 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800f680:	f008 fa06 	bl	8017a90 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f684:	e7d3      	b.n	800f62e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800f686:	3710      	adds	r7, #16
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	2003736c 	.word	0x2003736c

0800f690 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800f698:	4810      	ldr	r0, [pc, #64]	@ (800f6dc <tcpip_thread+0x4c>)
 800f69a:	f00c fa61 	bl	801bb60 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800f69e:	4b10      	ldr	r3, [pc, #64]	@ (800f6e0 <tcpip_thread+0x50>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d005      	beq.n	800f6b2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800f6a6:	4b0e      	ldr	r3, [pc, #56]	@ (800f6e0 <tcpip_thread+0x50>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	4a0e      	ldr	r2, [pc, #56]	@ (800f6e4 <tcpip_thread+0x54>)
 800f6ac:	6812      	ldr	r2, [r2, #0]
 800f6ae:	4610      	mov	r0, r2
 800f6b0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f6b2:	f107 030c 	add.w	r3, r7, #12
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	480b      	ldr	r0, [pc, #44]	@ (800f6e8 <tcpip_thread+0x58>)
 800f6ba:	f7ff ffb3 	bl	800f624 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d106      	bne.n	800f6d2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f6c4:	4b09      	ldr	r3, [pc, #36]	@ (800f6ec <tcpip_thread+0x5c>)
 800f6c6:	2291      	movs	r2, #145	@ 0x91
 800f6c8:	4909      	ldr	r1, [pc, #36]	@ (800f6f0 <tcpip_thread+0x60>)
 800f6ca:	480a      	ldr	r0, [pc, #40]	@ (800f6f4 <tcpip_thread+0x64>)
 800f6cc:	f019 fe2a 	bl	8029324 <iprintf>
      continue;
 800f6d0:	e003      	b.n	800f6da <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f000 f80f 	bl	800f6f8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f6da:	e7ea      	b.n	800f6b2 <tcpip_thread+0x22>
 800f6dc:	2003736c 	.word	0x2003736c
 800f6e0:	20037360 	.word	0x20037360
 800f6e4:	20037364 	.word	0x20037364
 800f6e8:	20037368 	.word	0x20037368
 800f6ec:	0802c4e0 	.word	0x0802c4e0
 800f6f0:	0802c510 	.word	0x0802c510
 800f6f4:	0802c530 	.word	0x0802c530

0800f6f8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	2b02      	cmp	r3, #2
 800f706:	d026      	beq.n	800f756 <tcpip_thread_handle_msg+0x5e>
 800f708:	2b02      	cmp	r3, #2
 800f70a:	dc2b      	bgt.n	800f764 <tcpip_thread_handle_msg+0x6c>
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d002      	beq.n	800f716 <tcpip_thread_handle_msg+0x1e>
 800f710:	2b01      	cmp	r3, #1
 800f712:	d015      	beq.n	800f740 <tcpip_thread_handle_msg+0x48>
 800f714:	e026      	b.n	800f764 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	687a      	ldr	r2, [r7, #4]
 800f71c:	6850      	ldr	r0, [r2, #4]
 800f71e:	687a      	ldr	r2, [r7, #4]
 800f720:	6892      	ldr	r2, [r2, #8]
 800f722:	4611      	mov	r1, r2
 800f724:	4798      	blx	r3
 800f726:	4603      	mov	r3, r0
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d004      	beq.n	800f736 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	4618      	mov	r0, r3
 800f732:	f001 fe29 	bl	8011388 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f736:	6879      	ldr	r1, [r7, #4]
 800f738:	2009      	movs	r0, #9
 800f73a:	f000 fef9 	bl	8010530 <memp_free>
      break;
 800f73e:	e018      	b.n	800f772 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	6892      	ldr	r2, [r2, #8]
 800f748:	4610      	mov	r0, r2
 800f74a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f74c:	6879      	ldr	r1, [r7, #4]
 800f74e:	2008      	movs	r0, #8
 800f750:	f000 feee 	bl	8010530 <memp_free>
      break;
 800f754:	e00d      	b.n	800f772 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	6892      	ldr	r2, [r2, #8]
 800f75e:	4610      	mov	r0, r2
 800f760:	4798      	blx	r3
      break;
 800f762:	e006      	b.n	800f772 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f764:	4b05      	ldr	r3, [pc, #20]	@ (800f77c <tcpip_thread_handle_msg+0x84>)
 800f766:	22cf      	movs	r2, #207	@ 0xcf
 800f768:	4905      	ldr	r1, [pc, #20]	@ (800f780 <tcpip_thread_handle_msg+0x88>)
 800f76a:	4806      	ldr	r0, [pc, #24]	@ (800f784 <tcpip_thread_handle_msg+0x8c>)
 800f76c:	f019 fdda 	bl	8029324 <iprintf>
      break;
 800f770:	bf00      	nop
  }
}
 800f772:	bf00      	nop
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	0802c4e0 	.word	0x0802c4e0
 800f780:	0802c510 	.word	0x0802c510
 800f784:	0802c530 	.word	0x0802c530

0800f788 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b086      	sub	sp, #24
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	60f8      	str	r0, [r7, #12]
 800f790:	60b9      	str	r1, [r7, #8]
 800f792:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f794:	481a      	ldr	r0, [pc, #104]	@ (800f800 <tcpip_inpkt+0x78>)
 800f796:	f00c f915 	bl	801b9c4 <sys_mbox_valid>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d105      	bne.n	800f7ac <tcpip_inpkt+0x24>
 800f7a0:	4b18      	ldr	r3, [pc, #96]	@ (800f804 <tcpip_inpkt+0x7c>)
 800f7a2:	22fc      	movs	r2, #252	@ 0xfc
 800f7a4:	4918      	ldr	r1, [pc, #96]	@ (800f808 <tcpip_inpkt+0x80>)
 800f7a6:	4819      	ldr	r0, [pc, #100]	@ (800f80c <tcpip_inpkt+0x84>)
 800f7a8:	f019 fdbc 	bl	8029324 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f7ac:	2009      	movs	r0, #9
 800f7ae:	f000 fe49 	bl	8010444 <memp_malloc>
 800f7b2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d102      	bne.n	800f7c0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f7ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f7be:	e01a      	b.n	800f7f6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	68fa      	ldr	r2, [r7, #12]
 800f7ca:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	68ba      	ldr	r2, [r7, #8]
 800f7d0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f7d8:	6979      	ldr	r1, [r7, #20]
 800f7da:	4809      	ldr	r0, [pc, #36]	@ (800f800 <tcpip_inpkt+0x78>)
 800f7dc:	f00c f890 	bl	801b900 <sys_mbox_trypost>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d006      	beq.n	800f7f4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f7e6:	6979      	ldr	r1, [r7, #20]
 800f7e8:	2009      	movs	r0, #9
 800f7ea:	f000 fea1 	bl	8010530 <memp_free>
    return ERR_MEM;
 800f7ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f7f2:	e000      	b.n	800f7f6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f7f4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3718      	adds	r7, #24
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	20037368 	.word	0x20037368
 800f804:	0802c4e0 	.word	0x0802c4e0
 800f808:	0802c558 	.word	0x0802c558
 800f80c:	0802c530 	.word	0x0802c530

0800f810 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f820:	f003 0318 	and.w	r3, r3, #24
 800f824:	2b00      	cmp	r3, #0
 800f826:	d006      	beq.n	800f836 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f828:	4a08      	ldr	r2, [pc, #32]	@ (800f84c <tcpip_input+0x3c>)
 800f82a:	6839      	ldr	r1, [r7, #0]
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7ff ffab 	bl	800f788 <tcpip_inpkt>
 800f832:	4603      	mov	r3, r0
 800f834:	e005      	b.n	800f842 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800f836:	4a06      	ldr	r2, [pc, #24]	@ (800f850 <tcpip_input+0x40>)
 800f838:	6839      	ldr	r1, [r7, #0]
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f7ff ffa4 	bl	800f788 <tcpip_inpkt>
 800f840:	4603      	mov	r3, r0
}
 800f842:	4618      	mov	r0, r3
 800f844:	3708      	adds	r7, #8
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
 800f84a:	bf00      	nop
 800f84c:	0801b6fd 	.word	0x0801b6fd
 800f850:	0801a225 	.word	0x0801a225

0800f854 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f85e:	4819      	ldr	r0, [pc, #100]	@ (800f8c4 <tcpip_try_callback+0x70>)
 800f860:	f00c f8b0 	bl	801b9c4 <sys_mbox_valid>
 800f864:	4603      	mov	r3, r0
 800f866:	2b00      	cmp	r3, #0
 800f868:	d106      	bne.n	800f878 <tcpip_try_callback+0x24>
 800f86a:	4b17      	ldr	r3, [pc, #92]	@ (800f8c8 <tcpip_try_callback+0x74>)
 800f86c:	f240 125d 	movw	r2, #349	@ 0x15d
 800f870:	4916      	ldr	r1, [pc, #88]	@ (800f8cc <tcpip_try_callback+0x78>)
 800f872:	4817      	ldr	r0, [pc, #92]	@ (800f8d0 <tcpip_try_callback+0x7c>)
 800f874:	f019 fd56 	bl	8029324 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f878:	2008      	movs	r0, #8
 800f87a:	f000 fde3 	bl	8010444 <memp_malloc>
 800f87e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d102      	bne.n	800f88c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f88a:	e017      	b.n	800f8bc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	2201      	movs	r2, #1
 800f890:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	683a      	ldr	r2, [r7, #0]
 800f89c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f89e:	68f9      	ldr	r1, [r7, #12]
 800f8a0:	4808      	ldr	r0, [pc, #32]	@ (800f8c4 <tcpip_try_callback+0x70>)
 800f8a2:	f00c f82d 	bl	801b900 <sys_mbox_trypost>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d006      	beq.n	800f8ba <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f8ac:	68f9      	ldr	r1, [r7, #12]
 800f8ae:	2008      	movs	r0, #8
 800f8b0:	f000 fe3e 	bl	8010530 <memp_free>
    return ERR_MEM;
 800f8b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f8b8:	e000      	b.n	800f8bc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f8ba:	2300      	movs	r3, #0
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3710      	adds	r7, #16
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	20037368 	.word	0x20037368
 800f8c8:	0802c4e0 	.word	0x0802c4e0
 800f8cc:	0802c558 	.word	0x0802c558
 800f8d0:	0802c530 	.word	0x0802c530

0800f8d4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	60f8      	str	r0, [r7, #12]
 800f8dc:	60b9      	str	r1, [r7, #8]
 800f8de:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f8e0:	4806      	ldr	r0, [pc, #24]	@ (800f8fc <tcpip_send_msg_wait_sem+0x28>)
 800f8e2:	f00c f93d 	bl	801bb60 <sys_mutex_lock>
  fn(apimsg);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	68b8      	ldr	r0, [r7, #8]
 800f8ea:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f8ec:	4803      	ldr	r0, [pc, #12]	@ (800f8fc <tcpip_send_msg_wait_sem+0x28>)
 800f8ee:	f00c f946 	bl	801bb7e <sys_mutex_unlock>
  return ERR_OK;
 800f8f2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3710      	adds	r7, #16
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}
 800f8fc:	2003736c 	.word	0x2003736c

0800f900 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b084      	sub	sp, #16
 800f904:	af02      	add	r7, sp, #8
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f90a:	f000 f8e0 	bl	800face <lwip_init>

  tcpip_init_done = initfunc;
 800f90e:	4a17      	ldr	r2, [pc, #92]	@ (800f96c <tcpip_init+0x6c>)
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f914:	4a16      	ldr	r2, [pc, #88]	@ (800f970 <tcpip_init+0x70>)
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f91a:	2106      	movs	r1, #6
 800f91c:	4815      	ldr	r0, [pc, #84]	@ (800f974 <tcpip_init+0x74>)
 800f91e:	f00b ffc3 	bl	801b8a8 <sys_mbox_new>
 800f922:	4603      	mov	r3, r0
 800f924:	2b00      	cmp	r3, #0
 800f926:	d006      	beq.n	800f936 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f928:	4b13      	ldr	r3, [pc, #76]	@ (800f978 <tcpip_init+0x78>)
 800f92a:	f240 2261 	movw	r2, #609	@ 0x261
 800f92e:	4913      	ldr	r1, [pc, #76]	@ (800f97c <tcpip_init+0x7c>)
 800f930:	4813      	ldr	r0, [pc, #76]	@ (800f980 <tcpip_init+0x80>)
 800f932:	f019 fcf7 	bl	8029324 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f936:	4813      	ldr	r0, [pc, #76]	@ (800f984 <tcpip_init+0x84>)
 800f938:	f00c f8fc 	bl	801bb34 <sys_mutex_new>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d006      	beq.n	800f950 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f942:	4b0d      	ldr	r3, [pc, #52]	@ (800f978 <tcpip_init+0x78>)
 800f944:	f240 2265 	movw	r2, #613	@ 0x265
 800f948:	490f      	ldr	r1, [pc, #60]	@ (800f988 <tcpip_init+0x88>)
 800f94a:	480d      	ldr	r0, [pc, #52]	@ (800f980 <tcpip_init+0x80>)
 800f94c:	f019 fcea 	bl	8029324 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f950:	2314      	movs	r3, #20
 800f952:	9300      	str	r3, [sp, #0]
 800f954:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f958:	2200      	movs	r2, #0
 800f95a:	490c      	ldr	r1, [pc, #48]	@ (800f98c <tcpip_init+0x8c>)
 800f95c:	480c      	ldr	r0, [pc, #48]	@ (800f990 <tcpip_init+0x90>)
 800f95e:	f00c f91b 	bl	801bb98 <sys_thread_new>
}
 800f962:	bf00      	nop
 800f964:	3708      	adds	r7, #8
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	20037360 	.word	0x20037360
 800f970:	20037364 	.word	0x20037364
 800f974:	20037368 	.word	0x20037368
 800f978:	0802c4e0 	.word	0x0802c4e0
 800f97c:	0802c568 	.word	0x0802c568
 800f980:	0802c530 	.word	0x0802c530
 800f984:	2003736c 	.word	0x2003736c
 800f988:	0802c58c 	.word	0x0802c58c
 800f98c:	0800f691 	.word	0x0800f691
 800f990:	0802c5b0 	.word	0x0802c5b0

0800f994 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f994:	b480      	push	{r7}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	4603      	mov	r3, r0
 800f99c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f99e:	88fb      	ldrh	r3, [r7, #6]
 800f9a0:	021b      	lsls	r3, r3, #8
 800f9a2:	b21a      	sxth	r2, r3
 800f9a4:	88fb      	ldrh	r3, [r7, #6]
 800f9a6:	0a1b      	lsrs	r3, r3, #8
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	b21b      	sxth	r3, r3
 800f9ac:	4313      	orrs	r3, r2
 800f9ae:	b21b      	sxth	r3, r3
 800f9b0:	b29b      	uxth	r3, r3
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	370c      	adds	r7, #12
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr

0800f9be <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f9be:	b480      	push	{r7}
 800f9c0:	b083      	sub	sp, #12
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	061a      	lsls	r2, r3, #24
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	021b      	lsls	r3, r3, #8
 800f9ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f9d2:	431a      	orrs	r2, r3
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	0a1b      	lsrs	r3, r3, #8
 800f9d8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f9dc:	431a      	orrs	r2, r3
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	0e1b      	lsrs	r3, r3, #24
 800f9e2:	4313      	orrs	r3, r2
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	370c      	adds	r7, #12
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b089      	sub	sp, #36	@ 0x24
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800fa02:	2300      	movs	r3, #0
 800fa04:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800fa06:	69fb      	ldr	r3, [r7, #28]
 800fa08:	f003 0301 	and.w	r3, r3, #1
 800fa0c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d00d      	beq.n	800fa30 <lwip_standard_chksum+0x40>
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	dd0a      	ble.n	800fa30 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800fa1a:	69fa      	ldr	r2, [r7, #28]
 800fa1c:	1c53      	adds	r3, r2, #1
 800fa1e:	61fb      	str	r3, [r7, #28]
 800fa20:	f107 030e 	add.w	r3, r7, #14
 800fa24:	3301      	adds	r3, #1
 800fa26:	7812      	ldrb	r2, [r2, #0]
 800fa28:	701a      	strb	r2, [r3, #0]
    len--;
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800fa34:	e00a      	b.n	800fa4c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800fa36:	69bb      	ldr	r3, [r7, #24]
 800fa38:	1c9a      	adds	r2, r3, #2
 800fa3a:	61ba      	str	r2, [r7, #24]
 800fa3c:	881b      	ldrh	r3, [r3, #0]
 800fa3e:	461a      	mov	r2, r3
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	4413      	add	r3, r2
 800fa44:	617b      	str	r3, [r7, #20]
    len -= 2;
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	3b02      	subs	r3, #2
 800fa4a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	dcf1      	bgt.n	800fa36 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	dd04      	ble.n	800fa62 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800fa58:	f107 030e 	add.w	r3, r7, #14
 800fa5c:	69ba      	ldr	r2, [r7, #24]
 800fa5e:	7812      	ldrb	r2, [r2, #0]
 800fa60:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800fa62:	89fb      	ldrh	r3, [r7, #14]
 800fa64:	461a      	mov	r2, r3
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	4413      	add	r3, r2
 800fa6a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	0c1a      	lsrs	r2, r3, #16
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	4413      	add	r3, r2
 800fa76:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	0c1a      	lsrs	r2, r3, #16
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	4413      	add	r3, r2
 800fa82:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d007      	beq.n	800fa9a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	021b      	lsls	r3, r3, #8
 800fa8e:	b29a      	uxth	r2, r3
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	0a1b      	lsrs	r3, r3, #8
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	4313      	orrs	r3, r2
 800fa98:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	b29b      	uxth	r3, r3
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3724      	adds	r7, #36	@ 0x24
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr

0800faaa <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b082      	sub	sp, #8
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
 800fab2:	460b      	mov	r3, r1
 800fab4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800fab6:	887b      	ldrh	r3, [r7, #2]
 800fab8:	4619      	mov	r1, r3
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f7ff ff98 	bl	800f9f0 <lwip_standard_chksum>
 800fac0:	4603      	mov	r3, r0
 800fac2:	43db      	mvns	r3, r3
 800fac4:	b29b      	uxth	r3, r3
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3708      	adds	r7, #8
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}

0800face <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b082      	sub	sp, #8
 800fad2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fad4:	2300      	movs	r3, #0
 800fad6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800fad8:	f00c f820 	bl	801bb1c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800fadc:	f000 f8da 	bl	800fc94 <mem_init>
  memp_init();
 800fae0:	f000 fc42 	bl	8010368 <memp_init>
  pbuf_init();
  netif_init();
 800fae4:	f000 fd4e 	bl	8010584 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fae8:	f008 f844 	bl	8017b74 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800faec:	f001 fef6 	bl	80118dc <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 800faf0:	f009 fe66 	bl	80197c0 <igmp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800faf4:	f007 ff84 	bl	8017a00 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800faf8:	bf00      	nop
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	4603      	mov	r3, r0
 800fb08:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800fb0a:	4b05      	ldr	r3, [pc, #20]	@ (800fb20 <ptr_to_mem+0x20>)
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	88fb      	ldrh	r3, [r7, #6]
 800fb10:	4413      	add	r3, r2
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	370c      	adds	r7, #12
 800fb16:	46bd      	mov	sp, r7
 800fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop
 800fb20:	2003e8cc 	.word	0x2003e8cc

0800fb24 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fb2c:	4b05      	ldr	r3, [pc, #20]	@ (800fb44 <mem_to_ptr+0x20>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	1ad3      	subs	r3, r2, r3
 800fb34:	b29b      	uxth	r3, r3
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	370c      	adds	r7, #12
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop
 800fb44:	2003e8cc 	.word	0x2003e8cc

0800fb48 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fb48:	b590      	push	{r4, r7, lr}
 800fb4a:	b085      	sub	sp, #20
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fb50:	4b47      	ldr	r3, [pc, #284]	@ (800fc70 <plug_holes+0x128>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d206      	bcs.n	800fb68 <plug_holes+0x20>
 800fb5a:	4b46      	ldr	r3, [pc, #280]	@ (800fc74 <plug_holes+0x12c>)
 800fb5c:	f240 12df 	movw	r2, #479	@ 0x1df
 800fb60:	4945      	ldr	r1, [pc, #276]	@ (800fc78 <plug_holes+0x130>)
 800fb62:	4846      	ldr	r0, [pc, #280]	@ (800fc7c <plug_holes+0x134>)
 800fb64:	f019 fbde 	bl	8029324 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fb68:	4b45      	ldr	r3, [pc, #276]	@ (800fc80 <plug_holes+0x138>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d306      	bcc.n	800fb80 <plug_holes+0x38>
 800fb72:	4b40      	ldr	r3, [pc, #256]	@ (800fc74 <plug_holes+0x12c>)
 800fb74:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800fb78:	4942      	ldr	r1, [pc, #264]	@ (800fc84 <plug_holes+0x13c>)
 800fb7a:	4840      	ldr	r0, [pc, #256]	@ (800fc7c <plug_holes+0x134>)
 800fb7c:	f019 fbd2 	bl	8029324 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	791b      	ldrb	r3, [r3, #4]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d006      	beq.n	800fb96 <plug_holes+0x4e>
 800fb88:	4b3a      	ldr	r3, [pc, #232]	@ (800fc74 <plug_holes+0x12c>)
 800fb8a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800fb8e:	493e      	ldr	r1, [pc, #248]	@ (800fc88 <plug_holes+0x140>)
 800fb90:	483a      	ldr	r0, [pc, #232]	@ (800fc7c <plug_holes+0x134>)
 800fb92:	f019 fbc7 	bl	8029324 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	881b      	ldrh	r3, [r3, #0]
 800fb9a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d906      	bls.n	800fbb0 <plug_holes+0x68>
 800fba2:	4b34      	ldr	r3, [pc, #208]	@ (800fc74 <plug_holes+0x12c>)
 800fba4:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800fba8:	4938      	ldr	r1, [pc, #224]	@ (800fc8c <plug_holes+0x144>)
 800fbaa:	4834      	ldr	r0, [pc, #208]	@ (800fc7c <plug_holes+0x134>)
 800fbac:	f019 fbba 	bl	8029324 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	881b      	ldrh	r3, [r3, #0]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7ff ffa3 	bl	800fb00 <ptr_to_mem>
 800fbba:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d025      	beq.n	800fc10 <plug_holes+0xc8>
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	791b      	ldrb	r3, [r3, #4]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d121      	bne.n	800fc10 <plug_holes+0xc8>
 800fbcc:	4b2c      	ldr	r3, [pc, #176]	@ (800fc80 <plug_holes+0x138>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	68fa      	ldr	r2, [r7, #12]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d01c      	beq.n	800fc10 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fbd6:	4b2e      	ldr	r3, [pc, #184]	@ (800fc90 <plug_holes+0x148>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d102      	bne.n	800fbe6 <plug_holes+0x9e>
      lfree = mem;
 800fbe0:	4a2b      	ldr	r2, [pc, #172]	@ (800fc90 <plug_holes+0x148>)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	881a      	ldrh	r2, [r3, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	881b      	ldrh	r3, [r3, #0]
 800fbf2:	f247 5230 	movw	r2, #30000	@ 0x7530
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d00a      	beq.n	800fc10 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	881b      	ldrh	r3, [r3, #0]
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7ff ff7e 	bl	800fb00 <ptr_to_mem>
 800fc04:	4604      	mov	r4, r0
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7ff ff8c 	bl	800fb24 <mem_to_ptr>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	885b      	ldrh	r3, [r3, #2]
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7ff ff73 	bl	800fb00 <ptr_to_mem>
 800fc1a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fc1c:	68ba      	ldr	r2, [r7, #8]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d020      	beq.n	800fc66 <plug_holes+0x11e>
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	791b      	ldrb	r3, [r3, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d11c      	bne.n	800fc66 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fc2c:	4b18      	ldr	r3, [pc, #96]	@ (800fc90 <plug_holes+0x148>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d102      	bne.n	800fc3c <plug_holes+0xf4>
      lfree = pmem;
 800fc36:	4a16      	ldr	r2, [pc, #88]	@ (800fc90 <plug_holes+0x148>)
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	881a      	ldrh	r2, [r3, #0]
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	881b      	ldrh	r3, [r3, #0]
 800fc48:	f247 5230 	movw	r2, #30000	@ 0x7530
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d00a      	beq.n	800fc66 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	881b      	ldrh	r3, [r3, #0]
 800fc54:	4618      	mov	r0, r3
 800fc56:	f7ff ff53 	bl	800fb00 <ptr_to_mem>
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	68b8      	ldr	r0, [r7, #8]
 800fc5e:	f7ff ff61 	bl	800fb24 <mem_to_ptr>
 800fc62:	4603      	mov	r3, r0
 800fc64:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800fc66:	bf00      	nop
 800fc68:	3714      	adds	r7, #20
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd90      	pop	{r4, r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	2003e8cc 	.word	0x2003e8cc
 800fc74:	0802c5c0 	.word	0x0802c5c0
 800fc78:	0802c5f0 	.word	0x0802c5f0
 800fc7c:	0802c608 	.word	0x0802c608
 800fc80:	2003e8d0 	.word	0x2003e8d0
 800fc84:	0802c630 	.word	0x0802c630
 800fc88:	0802c64c 	.word	0x0802c64c
 800fc8c:	0802c668 	.word	0x0802c668
 800fc90:	2003e8d8 	.word	0x2003e8d8

0800fc94 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fc9a:	4b1f      	ldr	r3, [pc, #124]	@ (800fd18 <mem_init+0x84>)
 800fc9c:	3303      	adds	r3, #3
 800fc9e:	f023 0303 	bic.w	r3, r3, #3
 800fca2:	461a      	mov	r2, r3
 800fca4:	4b1d      	ldr	r3, [pc, #116]	@ (800fd1c <mem_init+0x88>)
 800fca6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fca8:	4b1c      	ldr	r3, [pc, #112]	@ (800fd1c <mem_init+0x88>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f247 5230 	movw	r2, #30000	@ 0x7530
 800fcb4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fcc2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800fcc6:	f7ff ff1b 	bl	800fb00 <ptr_to_mem>
 800fcca:	4603      	mov	r3, r0
 800fccc:	4a14      	ldr	r2, [pc, #80]	@ (800fd20 <mem_init+0x8c>)
 800fcce:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fcd0:	4b13      	ldr	r3, [pc, #76]	@ (800fd20 <mem_init+0x8c>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fcd8:	4b11      	ldr	r3, [pc, #68]	@ (800fd20 <mem_init+0x8c>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	f247 5230 	movw	r2, #30000	@ 0x7530
 800fce0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fce2:	4b0f      	ldr	r3, [pc, #60]	@ (800fd20 <mem_init+0x8c>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f247 5230 	movw	r2, #30000	@ 0x7530
 800fcea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fcec:	4b0b      	ldr	r3, [pc, #44]	@ (800fd1c <mem_init+0x88>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	4a0c      	ldr	r2, [pc, #48]	@ (800fd24 <mem_init+0x90>)
 800fcf2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800fcf4:	480c      	ldr	r0, [pc, #48]	@ (800fd28 <mem_init+0x94>)
 800fcf6:	f00b ff1d 	bl	801bb34 <sys_mutex_new>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d006      	beq.n	800fd0e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800fd00:	4b0a      	ldr	r3, [pc, #40]	@ (800fd2c <mem_init+0x98>)
 800fd02:	f240 221f 	movw	r2, #543	@ 0x21f
 800fd06:	490a      	ldr	r1, [pc, #40]	@ (800fd30 <mem_init+0x9c>)
 800fd08:	480a      	ldr	r0, [pc, #40]	@ (800fd34 <mem_init+0xa0>)
 800fd0a:	f019 fb0b 	bl	8029324 <iprintf>
  }
}
 800fd0e:	bf00      	nop
 800fd10:	3708      	adds	r7, #8
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	20037388 	.word	0x20037388
 800fd1c:	2003e8cc 	.word	0x2003e8cc
 800fd20:	2003e8d0 	.word	0x2003e8d0
 800fd24:	2003e8d8 	.word	0x2003e8d8
 800fd28:	2003e8d4 	.word	0x2003e8d4
 800fd2c:	0802c5c0 	.word	0x0802c5c0
 800fd30:	0802c694 	.word	0x0802c694
 800fd34:	0802c608 	.word	0x0802c608

0800fd38 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b086      	sub	sp, #24
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f7ff feef 	bl	800fb24 <mem_to_ptr>
 800fd46:	4603      	mov	r3, r0
 800fd48:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	881b      	ldrh	r3, [r3, #0]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7ff fed6 	bl	800fb00 <ptr_to_mem>
 800fd54:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	885b      	ldrh	r3, [r3, #2]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7ff fed0 	bl	800fb00 <ptr_to_mem>
 800fd60:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	881b      	ldrh	r3, [r3, #0]
 800fd66:	f247 5230 	movw	r2, #30000	@ 0x7530
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d819      	bhi.n	800fda2 <mem_link_valid+0x6a>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	885b      	ldrh	r3, [r3, #2]
 800fd72:	f247 5230 	movw	r2, #30000	@ 0x7530
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d813      	bhi.n	800fda2 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fd7e:	8afa      	ldrh	r2, [r7, #22]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d004      	beq.n	800fd8e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	881b      	ldrh	r3, [r3, #0]
 800fd88:	8afa      	ldrh	r2, [r7, #22]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d109      	bne.n	800fda2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fd8e:	4b08      	ldr	r3, [pc, #32]	@ (800fdb0 <mem_link_valid+0x78>)
 800fd90:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fd92:	693a      	ldr	r2, [r7, #16]
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d006      	beq.n	800fda6 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	885b      	ldrh	r3, [r3, #2]
 800fd9c:	8afa      	ldrh	r2, [r7, #22]
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d001      	beq.n	800fda6 <mem_link_valid+0x6e>
    return 0;
 800fda2:	2300      	movs	r3, #0
 800fda4:	e000      	b.n	800fda8 <mem_link_valid+0x70>
  }
  return 1;
 800fda6:	2301      	movs	r3, #1
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3718      	adds	r7, #24
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	2003e8d0 	.word	0x2003e8d0

0800fdb4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b088      	sub	sp, #32
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d070      	beq.n	800fea4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f003 0303 	and.w	r3, r3, #3
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d00d      	beq.n	800fde8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fdcc:	4b37      	ldr	r3, [pc, #220]	@ (800feac <mem_free+0xf8>)
 800fdce:	f240 2273 	movw	r2, #627	@ 0x273
 800fdd2:	4937      	ldr	r1, [pc, #220]	@ (800feb0 <mem_free+0xfc>)
 800fdd4:	4837      	ldr	r0, [pc, #220]	@ (800feb4 <mem_free+0x100>)
 800fdd6:	f019 faa5 	bl	8029324 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fdda:	f00b fefd 	bl	801bbd8 <sys_arch_protect>
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f00b ff07 	bl	801bbf4 <sys_arch_unprotect>
    return;
 800fde6:	e05e      	b.n	800fea6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	3b08      	subs	r3, #8
 800fdec:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fdee:	4b32      	ldr	r3, [pc, #200]	@ (800feb8 <mem_free+0x104>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	69fa      	ldr	r2, [r7, #28]
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d306      	bcc.n	800fe06 <mem_free+0x52>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f103 020c 	add.w	r2, r3, #12
 800fdfe:	4b2f      	ldr	r3, [pc, #188]	@ (800febc <mem_free+0x108>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d90d      	bls.n	800fe22 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fe06:	4b29      	ldr	r3, [pc, #164]	@ (800feac <mem_free+0xf8>)
 800fe08:	f240 227f 	movw	r2, #639	@ 0x27f
 800fe0c:	492c      	ldr	r1, [pc, #176]	@ (800fec0 <mem_free+0x10c>)
 800fe0e:	4829      	ldr	r0, [pc, #164]	@ (800feb4 <mem_free+0x100>)
 800fe10:	f019 fa88 	bl	8029324 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fe14:	f00b fee0 	bl	801bbd8 <sys_arch_protect>
 800fe18:	6138      	str	r0, [r7, #16]
 800fe1a:	6938      	ldr	r0, [r7, #16]
 800fe1c:	f00b feea 	bl	801bbf4 <sys_arch_unprotect>
    return;
 800fe20:	e041      	b.n	800fea6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fe22:	4828      	ldr	r0, [pc, #160]	@ (800fec4 <mem_free+0x110>)
 800fe24:	f00b fe9c 	bl	801bb60 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	791b      	ldrb	r3, [r3, #4]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d110      	bne.n	800fe52 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fe30:	4b1e      	ldr	r3, [pc, #120]	@ (800feac <mem_free+0xf8>)
 800fe32:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800fe36:	4924      	ldr	r1, [pc, #144]	@ (800fec8 <mem_free+0x114>)
 800fe38:	481e      	ldr	r0, [pc, #120]	@ (800feb4 <mem_free+0x100>)
 800fe3a:	f019 fa73 	bl	8029324 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fe3e:	4821      	ldr	r0, [pc, #132]	@ (800fec4 <mem_free+0x110>)
 800fe40:	f00b fe9d 	bl	801bb7e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fe44:	f00b fec8 	bl	801bbd8 <sys_arch_protect>
 800fe48:	6178      	str	r0, [r7, #20]
 800fe4a:	6978      	ldr	r0, [r7, #20]
 800fe4c:	f00b fed2 	bl	801bbf4 <sys_arch_unprotect>
    return;
 800fe50:	e029      	b.n	800fea6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800fe52:	69f8      	ldr	r0, [r7, #28]
 800fe54:	f7ff ff70 	bl	800fd38 <mem_link_valid>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d110      	bne.n	800fe80 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fe5e:	4b13      	ldr	r3, [pc, #76]	@ (800feac <mem_free+0xf8>)
 800fe60:	f240 2295 	movw	r2, #661	@ 0x295
 800fe64:	4919      	ldr	r1, [pc, #100]	@ (800fecc <mem_free+0x118>)
 800fe66:	4813      	ldr	r0, [pc, #76]	@ (800feb4 <mem_free+0x100>)
 800fe68:	f019 fa5c 	bl	8029324 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fe6c:	4815      	ldr	r0, [pc, #84]	@ (800fec4 <mem_free+0x110>)
 800fe6e:	f00b fe86 	bl	801bb7e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fe72:	f00b feb1 	bl	801bbd8 <sys_arch_protect>
 800fe76:	61b8      	str	r0, [r7, #24]
 800fe78:	69b8      	ldr	r0, [r7, #24]
 800fe7a:	f00b febb 	bl	801bbf4 <sys_arch_unprotect>
    return;
 800fe7e:	e012      	b.n	800fea6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	2200      	movs	r2, #0
 800fe84:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800fe86:	4b12      	ldr	r3, [pc, #72]	@ (800fed0 <mem_free+0x11c>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	69fa      	ldr	r2, [r7, #28]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d202      	bcs.n	800fe96 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fe90:	4a0f      	ldr	r2, [pc, #60]	@ (800fed0 <mem_free+0x11c>)
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fe96:	69f8      	ldr	r0, [r7, #28]
 800fe98:	f7ff fe56 	bl	800fb48 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fe9c:	4809      	ldr	r0, [pc, #36]	@ (800fec4 <mem_free+0x110>)
 800fe9e:	f00b fe6e 	bl	801bb7e <sys_mutex_unlock>
 800fea2:	e000      	b.n	800fea6 <mem_free+0xf2>
    return;
 800fea4:	bf00      	nop
}
 800fea6:	3720      	adds	r7, #32
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}
 800feac:	0802c5c0 	.word	0x0802c5c0
 800feb0:	0802c6b0 	.word	0x0802c6b0
 800feb4:	0802c608 	.word	0x0802c608
 800feb8:	2003e8cc 	.word	0x2003e8cc
 800febc:	2003e8d0 	.word	0x2003e8d0
 800fec0:	0802c6d4 	.word	0x0802c6d4
 800fec4:	2003e8d4 	.word	0x2003e8d4
 800fec8:	0802c6f0 	.word	0x0802c6f0
 800fecc:	0802c718 	.word	0x0802c718
 800fed0:	2003e8d8 	.word	0x2003e8d8

0800fed4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b088      	sub	sp, #32
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	460b      	mov	r3, r1
 800fede:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fee0:	887b      	ldrh	r3, [r7, #2]
 800fee2:	3303      	adds	r3, #3
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	f023 0303 	bic.w	r3, r3, #3
 800feea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800feec:	8bfb      	ldrh	r3, [r7, #30]
 800feee:	2b0b      	cmp	r3, #11
 800fef0:	d801      	bhi.n	800fef6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fef2:	230c      	movs	r3, #12
 800fef4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fef6:	8bfb      	ldrh	r3, [r7, #30]
 800fef8:	f247 5230 	movw	r2, #30000	@ 0x7530
 800fefc:	4293      	cmp	r3, r2
 800fefe:	d803      	bhi.n	800ff08 <mem_trim+0x34>
 800ff00:	8bfa      	ldrh	r2, [r7, #30]
 800ff02:	887b      	ldrh	r3, [r7, #2]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d201      	bcs.n	800ff0c <mem_trim+0x38>
    return NULL;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	e0dc      	b.n	80100c6 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ff0c:	4b70      	ldr	r3, [pc, #448]	@ (80100d0 <mem_trim+0x1fc>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	687a      	ldr	r2, [r7, #4]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d304      	bcc.n	800ff20 <mem_trim+0x4c>
 800ff16:	4b6f      	ldr	r3, [pc, #444]	@ (80100d4 <mem_trim+0x200>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	687a      	ldr	r2, [r7, #4]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d306      	bcc.n	800ff2e <mem_trim+0x5a>
 800ff20:	4b6d      	ldr	r3, [pc, #436]	@ (80100d8 <mem_trim+0x204>)
 800ff22:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800ff26:	496d      	ldr	r1, [pc, #436]	@ (80100dc <mem_trim+0x208>)
 800ff28:	486d      	ldr	r0, [pc, #436]	@ (80100e0 <mem_trim+0x20c>)
 800ff2a:	f019 f9fb 	bl	8029324 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ff2e:	4b68      	ldr	r3, [pc, #416]	@ (80100d0 <mem_trim+0x1fc>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d304      	bcc.n	800ff42 <mem_trim+0x6e>
 800ff38:	4b66      	ldr	r3, [pc, #408]	@ (80100d4 <mem_trim+0x200>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	687a      	ldr	r2, [r7, #4]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d307      	bcc.n	800ff52 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ff42:	f00b fe49 	bl	801bbd8 <sys_arch_protect>
 800ff46:	60b8      	str	r0, [r7, #8]
 800ff48:	68b8      	ldr	r0, [r7, #8]
 800ff4a:	f00b fe53 	bl	801bbf4 <sys_arch_unprotect>
    return rmem;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	e0b9      	b.n	80100c6 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	3b08      	subs	r3, #8
 800ff56:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ff58:	69b8      	ldr	r0, [r7, #24]
 800ff5a:	f7ff fde3 	bl	800fb24 <mem_to_ptr>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ff62:	69bb      	ldr	r3, [r7, #24]
 800ff64:	881a      	ldrh	r2, [r3, #0]
 800ff66:	8afb      	ldrh	r3, [r7, #22]
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	3b08      	subs	r3, #8
 800ff6e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ff70:	8bfa      	ldrh	r2, [r7, #30]
 800ff72:	8abb      	ldrh	r3, [r7, #20]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d906      	bls.n	800ff86 <mem_trim+0xb2>
 800ff78:	4b57      	ldr	r3, [pc, #348]	@ (80100d8 <mem_trim+0x204>)
 800ff7a:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800ff7e:	4959      	ldr	r1, [pc, #356]	@ (80100e4 <mem_trim+0x210>)
 800ff80:	4857      	ldr	r0, [pc, #348]	@ (80100e0 <mem_trim+0x20c>)
 800ff82:	f019 f9cf 	bl	8029324 <iprintf>
  if (newsize > size) {
 800ff86:	8bfa      	ldrh	r2, [r7, #30]
 800ff88:	8abb      	ldrh	r3, [r7, #20]
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d901      	bls.n	800ff92 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	e099      	b.n	80100c6 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800ff92:	8bfa      	ldrh	r2, [r7, #30]
 800ff94:	8abb      	ldrh	r3, [r7, #20]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d101      	bne.n	800ff9e <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	e093      	b.n	80100c6 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ff9e:	4852      	ldr	r0, [pc, #328]	@ (80100e8 <mem_trim+0x214>)
 800ffa0:	f00b fdde 	bl	801bb60 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ffa4:	69bb      	ldr	r3, [r7, #24]
 800ffa6:	881b      	ldrh	r3, [r3, #0]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7ff fda9 	bl	800fb00 <ptr_to_mem>
 800ffae:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	791b      	ldrb	r3, [r3, #4]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d141      	bne.n	801003c <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ffb8:	69bb      	ldr	r3, [r7, #24]
 800ffba:	881b      	ldrh	r3, [r3, #0]
 800ffbc:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	d106      	bne.n	800ffd2 <mem_trim+0xfe>
 800ffc4:	4b44      	ldr	r3, [pc, #272]	@ (80100d8 <mem_trim+0x204>)
 800ffc6:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800ffca:	4948      	ldr	r1, [pc, #288]	@ (80100ec <mem_trim+0x218>)
 800ffcc:	4844      	ldr	r0, [pc, #272]	@ (80100e0 <mem_trim+0x20c>)
 800ffce:	f019 f9a9 	bl	8029324 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	881b      	ldrh	r3, [r3, #0]
 800ffd6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ffd8:	8afa      	ldrh	r2, [r7, #22]
 800ffda:	8bfb      	ldrh	r3, [r7, #30]
 800ffdc:	4413      	add	r3, r2
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	3308      	adds	r3, #8
 800ffe2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ffe4:	4b42      	ldr	r3, [pc, #264]	@ (80100f0 <mem_trim+0x21c>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	693a      	ldr	r2, [r7, #16]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d106      	bne.n	800fffc <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800ffee:	89fb      	ldrh	r3, [r7, #14]
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7ff fd85 	bl	800fb00 <ptr_to_mem>
 800fff6:	4603      	mov	r3, r0
 800fff8:	4a3d      	ldr	r2, [pc, #244]	@ (80100f0 <mem_trim+0x21c>)
 800fffa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800fffc:	89fb      	ldrh	r3, [r7, #14]
 800fffe:	4618      	mov	r0, r3
 8010000:	f7ff fd7e 	bl	800fb00 <ptr_to_mem>
 8010004:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	2200      	movs	r2, #0
 801000a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	89ba      	ldrh	r2, [r7, #12]
 8010010:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	8afa      	ldrh	r2, [r7, #22]
 8010016:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010018:	69bb      	ldr	r3, [r7, #24]
 801001a:	89fa      	ldrh	r2, [r7, #14]
 801001c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	881b      	ldrh	r3, [r3, #0]
 8010022:	f247 5230 	movw	r2, #30000	@ 0x7530
 8010026:	4293      	cmp	r3, r2
 8010028:	d049      	beq.n	80100be <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	881b      	ldrh	r3, [r3, #0]
 801002e:	4618      	mov	r0, r3
 8010030:	f7ff fd66 	bl	800fb00 <ptr_to_mem>
 8010034:	4602      	mov	r2, r0
 8010036:	89fb      	ldrh	r3, [r7, #14]
 8010038:	8053      	strh	r3, [r2, #2]
 801003a:	e040      	b.n	80100be <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801003c:	8bfb      	ldrh	r3, [r7, #30]
 801003e:	f103 0214 	add.w	r2, r3, #20
 8010042:	8abb      	ldrh	r3, [r7, #20]
 8010044:	429a      	cmp	r2, r3
 8010046:	d83a      	bhi.n	80100be <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010048:	8afa      	ldrh	r2, [r7, #22]
 801004a:	8bfb      	ldrh	r3, [r7, #30]
 801004c:	4413      	add	r3, r2
 801004e:	b29b      	uxth	r3, r3
 8010050:	3308      	adds	r3, #8
 8010052:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	881b      	ldrh	r3, [r3, #0]
 8010058:	f247 5230 	movw	r2, #30000	@ 0x7530
 801005c:	4293      	cmp	r3, r2
 801005e:	d106      	bne.n	801006e <mem_trim+0x19a>
 8010060:	4b1d      	ldr	r3, [pc, #116]	@ (80100d8 <mem_trim+0x204>)
 8010062:	f240 3216 	movw	r2, #790	@ 0x316
 8010066:	4921      	ldr	r1, [pc, #132]	@ (80100ec <mem_trim+0x218>)
 8010068:	481d      	ldr	r0, [pc, #116]	@ (80100e0 <mem_trim+0x20c>)
 801006a:	f019 f95b 	bl	8029324 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801006e:	89fb      	ldrh	r3, [r7, #14]
 8010070:	4618      	mov	r0, r3
 8010072:	f7ff fd45 	bl	800fb00 <ptr_to_mem>
 8010076:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010078:	4b1d      	ldr	r3, [pc, #116]	@ (80100f0 <mem_trim+0x21c>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	693a      	ldr	r2, [r7, #16]
 801007e:	429a      	cmp	r2, r3
 8010080:	d202      	bcs.n	8010088 <mem_trim+0x1b4>
      lfree = mem2;
 8010082:	4a1b      	ldr	r2, [pc, #108]	@ (80100f0 <mem_trim+0x21c>)
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	2200      	movs	r2, #0
 801008c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801008e:	69bb      	ldr	r3, [r7, #24]
 8010090:	881a      	ldrh	r2, [r3, #0]
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	8afa      	ldrh	r2, [r7, #22]
 801009a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801009c:	69bb      	ldr	r3, [r7, #24]
 801009e:	89fa      	ldrh	r2, [r7, #14]
 80100a0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	881b      	ldrh	r3, [r3, #0]
 80100a6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80100aa:	4293      	cmp	r3, r2
 80100ac:	d007      	beq.n	80100be <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	881b      	ldrh	r3, [r3, #0]
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7ff fd24 	bl	800fb00 <ptr_to_mem>
 80100b8:	4602      	mov	r2, r0
 80100ba:	89fb      	ldrh	r3, [r7, #14]
 80100bc:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80100be:	480a      	ldr	r0, [pc, #40]	@ (80100e8 <mem_trim+0x214>)
 80100c0:	f00b fd5d 	bl	801bb7e <sys_mutex_unlock>
  return rmem;
 80100c4:	687b      	ldr	r3, [r7, #4]
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3720      	adds	r7, #32
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	2003e8cc 	.word	0x2003e8cc
 80100d4:	2003e8d0 	.word	0x2003e8d0
 80100d8:	0802c5c0 	.word	0x0802c5c0
 80100dc:	0802c74c 	.word	0x0802c74c
 80100e0:	0802c608 	.word	0x0802c608
 80100e4:	0802c764 	.word	0x0802c764
 80100e8:	2003e8d4 	.word	0x2003e8d4
 80100ec:	0802c784 	.word	0x0802c784
 80100f0:	2003e8d8 	.word	0x2003e8d8

080100f4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b088      	sub	sp, #32
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	4603      	mov	r3, r0
 80100fc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80100fe:	88fb      	ldrh	r3, [r7, #6]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d101      	bne.n	8010108 <mem_malloc+0x14>
    return NULL;
 8010104:	2300      	movs	r3, #0
 8010106:	e0e6      	b.n	80102d6 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010108:	88fb      	ldrh	r3, [r7, #6]
 801010a:	3303      	adds	r3, #3
 801010c:	b29b      	uxth	r3, r3
 801010e:	f023 0303 	bic.w	r3, r3, #3
 8010112:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010114:	8bbb      	ldrh	r3, [r7, #28]
 8010116:	2b0b      	cmp	r3, #11
 8010118:	d801      	bhi.n	801011e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801011a:	230c      	movs	r3, #12
 801011c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801011e:	8bbb      	ldrh	r3, [r7, #28]
 8010120:	f247 5230 	movw	r2, #30000	@ 0x7530
 8010124:	4293      	cmp	r3, r2
 8010126:	d803      	bhi.n	8010130 <mem_malloc+0x3c>
 8010128:	8bba      	ldrh	r2, [r7, #28]
 801012a:	88fb      	ldrh	r3, [r7, #6]
 801012c:	429a      	cmp	r2, r3
 801012e:	d201      	bcs.n	8010134 <mem_malloc+0x40>
    return NULL;
 8010130:	2300      	movs	r3, #0
 8010132:	e0d0      	b.n	80102d6 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010134:	486a      	ldr	r0, [pc, #424]	@ (80102e0 <mem_malloc+0x1ec>)
 8010136:	f00b fd13 	bl	801bb60 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801013a:	4b6a      	ldr	r3, [pc, #424]	@ (80102e4 <mem_malloc+0x1f0>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	4618      	mov	r0, r3
 8010140:	f7ff fcf0 	bl	800fb24 <mem_to_ptr>
 8010144:	4603      	mov	r3, r0
 8010146:	83fb      	strh	r3, [r7, #30]
 8010148:	e0b9      	b.n	80102be <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801014a:	8bfb      	ldrh	r3, [r7, #30]
 801014c:	4618      	mov	r0, r3
 801014e:	f7ff fcd7 	bl	800fb00 <ptr_to_mem>
 8010152:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	791b      	ldrb	r3, [r3, #4]
 8010158:	2b00      	cmp	r3, #0
 801015a:	f040 80a9 	bne.w	80102b0 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	881b      	ldrh	r3, [r3, #0]
 8010162:	461a      	mov	r2, r3
 8010164:	8bfb      	ldrh	r3, [r7, #30]
 8010166:	1ad3      	subs	r3, r2, r3
 8010168:	f1a3 0208 	sub.w	r2, r3, #8
 801016c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801016e:	429a      	cmp	r2, r3
 8010170:	f0c0 809e 	bcc.w	80102b0 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	881b      	ldrh	r3, [r3, #0]
 8010178:	461a      	mov	r2, r3
 801017a:	8bfb      	ldrh	r3, [r7, #30]
 801017c:	1ad3      	subs	r3, r2, r3
 801017e:	f1a3 0208 	sub.w	r2, r3, #8
 8010182:	8bbb      	ldrh	r3, [r7, #28]
 8010184:	3314      	adds	r3, #20
 8010186:	429a      	cmp	r2, r3
 8010188:	d335      	bcc.n	80101f6 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801018a:	8bfa      	ldrh	r2, [r7, #30]
 801018c:	8bbb      	ldrh	r3, [r7, #28]
 801018e:	4413      	add	r3, r2
 8010190:	b29b      	uxth	r3, r3
 8010192:	3308      	adds	r3, #8
 8010194:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010196:	8a7b      	ldrh	r3, [r7, #18]
 8010198:	f247 5230 	movw	r2, #30000	@ 0x7530
 801019c:	4293      	cmp	r3, r2
 801019e:	d106      	bne.n	80101ae <mem_malloc+0xba>
 80101a0:	4b51      	ldr	r3, [pc, #324]	@ (80102e8 <mem_malloc+0x1f4>)
 80101a2:	f240 3287 	movw	r2, #903	@ 0x387
 80101a6:	4951      	ldr	r1, [pc, #324]	@ (80102ec <mem_malloc+0x1f8>)
 80101a8:	4851      	ldr	r0, [pc, #324]	@ (80102f0 <mem_malloc+0x1fc>)
 80101aa:	f019 f8bb 	bl	8029324 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80101ae:	8a7b      	ldrh	r3, [r7, #18]
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7ff fca5 	bl	800fb00 <ptr_to_mem>
 80101b6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2200      	movs	r2, #0
 80101bc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	881a      	ldrh	r2, [r3, #0]
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	8bfa      	ldrh	r2, [r7, #30]
 80101ca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	8a7a      	ldrh	r2, [r7, #18]
 80101d0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	2201      	movs	r2, #1
 80101d6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	881b      	ldrh	r3, [r3, #0]
 80101dc:	f247 5230 	movw	r2, #30000	@ 0x7530
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d00b      	beq.n	80101fc <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	881b      	ldrh	r3, [r3, #0]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7ff fc89 	bl	800fb00 <ptr_to_mem>
 80101ee:	4602      	mov	r2, r0
 80101f0:	8a7b      	ldrh	r3, [r7, #18]
 80101f2:	8053      	strh	r3, [r2, #2]
 80101f4:	e002      	b.n	80101fc <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	2201      	movs	r2, #1
 80101fa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80101fc:	4b39      	ldr	r3, [pc, #228]	@ (80102e4 <mem_malloc+0x1f0>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	697a      	ldr	r2, [r7, #20]
 8010202:	429a      	cmp	r2, r3
 8010204:	d127      	bne.n	8010256 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8010206:	4b37      	ldr	r3, [pc, #220]	@ (80102e4 <mem_malloc+0x1f0>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801020c:	e005      	b.n	801021a <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	881b      	ldrh	r3, [r3, #0]
 8010212:	4618      	mov	r0, r3
 8010214:	f7ff fc74 	bl	800fb00 <ptr_to_mem>
 8010218:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	791b      	ldrb	r3, [r3, #4]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d004      	beq.n	801022c <mem_malloc+0x138>
 8010222:	4b34      	ldr	r3, [pc, #208]	@ (80102f4 <mem_malloc+0x200>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	69ba      	ldr	r2, [r7, #24]
 8010228:	429a      	cmp	r2, r3
 801022a:	d1f0      	bne.n	801020e <mem_malloc+0x11a>
          }
          lfree = cur;
 801022c:	4a2d      	ldr	r2, [pc, #180]	@ (80102e4 <mem_malloc+0x1f0>)
 801022e:	69bb      	ldr	r3, [r7, #24]
 8010230:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010232:	4b2c      	ldr	r3, [pc, #176]	@ (80102e4 <mem_malloc+0x1f0>)
 8010234:	681a      	ldr	r2, [r3, #0]
 8010236:	4b2f      	ldr	r3, [pc, #188]	@ (80102f4 <mem_malloc+0x200>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	429a      	cmp	r2, r3
 801023c:	d00b      	beq.n	8010256 <mem_malloc+0x162>
 801023e:	4b29      	ldr	r3, [pc, #164]	@ (80102e4 <mem_malloc+0x1f0>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	791b      	ldrb	r3, [r3, #4]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d006      	beq.n	8010256 <mem_malloc+0x162>
 8010248:	4b27      	ldr	r3, [pc, #156]	@ (80102e8 <mem_malloc+0x1f4>)
 801024a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 801024e:	492a      	ldr	r1, [pc, #168]	@ (80102f8 <mem_malloc+0x204>)
 8010250:	4827      	ldr	r0, [pc, #156]	@ (80102f0 <mem_malloc+0x1fc>)
 8010252:	f019 f867 	bl	8029324 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010256:	4822      	ldr	r0, [pc, #136]	@ (80102e0 <mem_malloc+0x1ec>)
 8010258:	f00b fc91 	bl	801bb7e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801025c:	8bba      	ldrh	r2, [r7, #28]
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	4413      	add	r3, r2
 8010262:	3308      	adds	r3, #8
 8010264:	4a23      	ldr	r2, [pc, #140]	@ (80102f4 <mem_malloc+0x200>)
 8010266:	6812      	ldr	r2, [r2, #0]
 8010268:	4293      	cmp	r3, r2
 801026a:	d906      	bls.n	801027a <mem_malloc+0x186>
 801026c:	4b1e      	ldr	r3, [pc, #120]	@ (80102e8 <mem_malloc+0x1f4>)
 801026e:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8010272:	4922      	ldr	r1, [pc, #136]	@ (80102fc <mem_malloc+0x208>)
 8010274:	481e      	ldr	r0, [pc, #120]	@ (80102f0 <mem_malloc+0x1fc>)
 8010276:	f019 f855 	bl	8029324 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	f003 0303 	and.w	r3, r3, #3
 8010280:	2b00      	cmp	r3, #0
 8010282:	d006      	beq.n	8010292 <mem_malloc+0x19e>
 8010284:	4b18      	ldr	r3, [pc, #96]	@ (80102e8 <mem_malloc+0x1f4>)
 8010286:	f240 32bb 	movw	r2, #955	@ 0x3bb
 801028a:	491d      	ldr	r1, [pc, #116]	@ (8010300 <mem_malloc+0x20c>)
 801028c:	4818      	ldr	r0, [pc, #96]	@ (80102f0 <mem_malloc+0x1fc>)
 801028e:	f019 f849 	bl	8029324 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	f003 0303 	and.w	r3, r3, #3
 8010298:	2b00      	cmp	r3, #0
 801029a:	d006      	beq.n	80102aa <mem_malloc+0x1b6>
 801029c:	4b12      	ldr	r3, [pc, #72]	@ (80102e8 <mem_malloc+0x1f4>)
 801029e:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80102a2:	4918      	ldr	r1, [pc, #96]	@ (8010304 <mem_malloc+0x210>)
 80102a4:	4812      	ldr	r0, [pc, #72]	@ (80102f0 <mem_malloc+0x1fc>)
 80102a6:	f019 f83d 	bl	8029324 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	3308      	adds	r3, #8
 80102ae:	e012      	b.n	80102d6 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 80102b0:	8bfb      	ldrh	r3, [r7, #30]
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7ff fc24 	bl	800fb00 <ptr_to_mem>
 80102b8:	4603      	mov	r3, r0
 80102ba:	881b      	ldrh	r3, [r3, #0]
 80102bc:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80102be:	8bfa      	ldrh	r2, [r7, #30]
 80102c0:	8bb9      	ldrh	r1, [r7, #28]
 80102c2:	f247 5330 	movw	r3, #30000	@ 0x7530
 80102c6:	1a5b      	subs	r3, r3, r1
 80102c8:	429a      	cmp	r2, r3
 80102ca:	f4ff af3e 	bcc.w	801014a <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80102ce:	4804      	ldr	r0, [pc, #16]	@ (80102e0 <mem_malloc+0x1ec>)
 80102d0:	f00b fc55 	bl	801bb7e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80102d4:	2300      	movs	r3, #0
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3720      	adds	r7, #32
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
 80102de:	bf00      	nop
 80102e0:	2003e8d4 	.word	0x2003e8d4
 80102e4:	2003e8d8 	.word	0x2003e8d8
 80102e8:	0802c5c0 	.word	0x0802c5c0
 80102ec:	0802c784 	.word	0x0802c784
 80102f0:	0802c608 	.word	0x0802c608
 80102f4:	2003e8d0 	.word	0x2003e8d0
 80102f8:	0802c798 	.word	0x0802c798
 80102fc:	0802c7b4 	.word	0x0802c7b4
 8010300:	0802c7e4 	.word	0x0802c7e4
 8010304:	0802c814 	.word	0x0802c814

08010308 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010308:	b480      	push	{r7}
 801030a:	b085      	sub	sp, #20
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	689b      	ldr	r3, [r3, #8]
 8010314:	2200      	movs	r2, #0
 8010316:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	3303      	adds	r3, #3
 801031e:	f023 0303 	bic.w	r3, r3, #3
 8010322:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010324:	2300      	movs	r3, #0
 8010326:	60fb      	str	r3, [r7, #12]
 8010328:	e011      	b.n	801034e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	689b      	ldr	r3, [r3, #8]
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	689b      	ldr	r3, [r3, #8]
 8010338:	68ba      	ldr	r2, [r7, #8]
 801033a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	881b      	ldrh	r3, [r3, #0]
 8010340:	461a      	mov	r2, r3
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	4413      	add	r3, r2
 8010346:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	3301      	adds	r3, #1
 801034c:	60fb      	str	r3, [r7, #12]
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	885b      	ldrh	r3, [r3, #2]
 8010352:	461a      	mov	r2, r3
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	4293      	cmp	r3, r2
 8010358:	dbe7      	blt.n	801032a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801035a:	bf00      	nop
 801035c:	bf00      	nop
 801035e:	3714      	adds	r7, #20
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr

08010368 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801036e:	2300      	movs	r3, #0
 8010370:	80fb      	strh	r3, [r7, #6]
 8010372:	e009      	b.n	8010388 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010374:	88fb      	ldrh	r3, [r7, #6]
 8010376:	4a08      	ldr	r2, [pc, #32]	@ (8010398 <memp_init+0x30>)
 8010378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801037c:	4618      	mov	r0, r3
 801037e:	f7ff ffc3 	bl	8010308 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010382:	88fb      	ldrh	r3, [r7, #6]
 8010384:	3301      	adds	r3, #1
 8010386:	80fb      	strh	r3, [r7, #6]
 8010388:	88fb      	ldrh	r3, [r7, #6]
 801038a:	2b0d      	cmp	r3, #13
 801038c:	d9f2      	bls.n	8010374 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801038e:	bf00      	nop
 8010390:	bf00      	nop
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	0802f48c 	.word	0x0802f48c

0801039c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80103a4:	f00b fc18 	bl	801bbd8 <sys_arch_protect>
 80103a8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	689b      	ldr	r3, [r3, #8]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d015      	beq.n	80103e4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	689b      	ldr	r3, [r3, #8]
 80103bc:	68ba      	ldr	r2, [r7, #8]
 80103be:	6812      	ldr	r2, [r2, #0]
 80103c0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	f003 0303 	and.w	r3, r3, #3
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d006      	beq.n	80103da <do_memp_malloc_pool+0x3e>
 80103cc:	4b09      	ldr	r3, [pc, #36]	@ (80103f4 <do_memp_malloc_pool+0x58>)
 80103ce:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80103d2:	4909      	ldr	r1, [pc, #36]	@ (80103f8 <do_memp_malloc_pool+0x5c>)
 80103d4:	4809      	ldr	r0, [pc, #36]	@ (80103fc <do_memp_malloc_pool+0x60>)
 80103d6:	f018 ffa5 	bl	8029324 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80103da:	68f8      	ldr	r0, [r7, #12]
 80103dc:	f00b fc0a 	bl	801bbf4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	e003      	b.n	80103ec <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80103e4:	68f8      	ldr	r0, [r7, #12]
 80103e6:	f00b fc05 	bl	801bbf4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80103ea:	2300      	movs	r3, #0
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3710      	adds	r7, #16
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	0802c838 	.word	0x0802c838
 80103f8:	0802c868 	.word	0x0802c868
 80103fc:	0802c88c 	.word	0x0802c88c

08010400 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b082      	sub	sp, #8
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d106      	bne.n	801041c <memp_malloc_pool+0x1c>
 801040e:	4b0a      	ldr	r3, [pc, #40]	@ (8010438 <memp_malloc_pool+0x38>)
 8010410:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8010414:	4909      	ldr	r1, [pc, #36]	@ (801043c <memp_malloc_pool+0x3c>)
 8010416:	480a      	ldr	r0, [pc, #40]	@ (8010440 <memp_malloc_pool+0x40>)
 8010418:	f018 ff84 	bl	8029324 <iprintf>
  if (desc == NULL) {
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d101      	bne.n	8010426 <memp_malloc_pool+0x26>
    return NULL;
 8010422:	2300      	movs	r3, #0
 8010424:	e003      	b.n	801042e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f7ff ffb8 	bl	801039c <do_memp_malloc_pool>
 801042c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801042e:	4618      	mov	r0, r3
 8010430:	3708      	adds	r7, #8
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
 8010436:	bf00      	nop
 8010438:	0802c838 	.word	0x0802c838
 801043c:	0802c8b4 	.word	0x0802c8b4
 8010440:	0802c88c 	.word	0x0802c88c

08010444 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0
 801044a:	4603      	mov	r3, r0
 801044c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801044e:	79fb      	ldrb	r3, [r7, #7]
 8010450:	2b0d      	cmp	r3, #13
 8010452:	d908      	bls.n	8010466 <memp_malloc+0x22>
 8010454:	4b0a      	ldr	r3, [pc, #40]	@ (8010480 <memp_malloc+0x3c>)
 8010456:	f240 1257 	movw	r2, #343	@ 0x157
 801045a:	490a      	ldr	r1, [pc, #40]	@ (8010484 <memp_malloc+0x40>)
 801045c:	480a      	ldr	r0, [pc, #40]	@ (8010488 <memp_malloc+0x44>)
 801045e:	f018 ff61 	bl	8029324 <iprintf>
 8010462:	2300      	movs	r3, #0
 8010464:	e008      	b.n	8010478 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010466:	79fb      	ldrb	r3, [r7, #7]
 8010468:	4a08      	ldr	r2, [pc, #32]	@ (801048c <memp_malloc+0x48>)
 801046a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801046e:	4618      	mov	r0, r3
 8010470:	f7ff ff94 	bl	801039c <do_memp_malloc_pool>
 8010474:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010476:	68fb      	ldr	r3, [r7, #12]
}
 8010478:	4618      	mov	r0, r3
 801047a:	3710      	adds	r7, #16
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	0802c838 	.word	0x0802c838
 8010484:	0802c8c8 	.word	0x0802c8c8
 8010488:	0802c88c 	.word	0x0802c88c
 801048c:	0802f48c 	.word	0x0802f48c

08010490 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	f003 0303 	and.w	r3, r3, #3
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d006      	beq.n	80104b2 <do_memp_free_pool+0x22>
 80104a4:	4b0d      	ldr	r3, [pc, #52]	@ (80104dc <do_memp_free_pool+0x4c>)
 80104a6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80104aa:	490d      	ldr	r1, [pc, #52]	@ (80104e0 <do_memp_free_pool+0x50>)
 80104ac:	480d      	ldr	r0, [pc, #52]	@ (80104e4 <do_memp_free_pool+0x54>)
 80104ae:	f018 ff39 	bl	8029324 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80104b6:	f00b fb8f 	bl	801bbd8 <sys_arch_protect>
 80104ba:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	689b      	ldr	r3, [r3, #8]
 80104c0:	681a      	ldr	r2, [r3, #0]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	689b      	ldr	r3, [r3, #8]
 80104ca:	68fa      	ldr	r2, [r7, #12]
 80104cc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80104ce:	68b8      	ldr	r0, [r7, #8]
 80104d0:	f00b fb90 	bl	801bbf4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80104d4:	bf00      	nop
 80104d6:	3710      	adds	r7, #16
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	0802c838 	.word	0x0802c838
 80104e0:	0802c8e8 	.word	0x0802c8e8
 80104e4:	0802c88c 	.word	0x0802c88c

080104e8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d106      	bne.n	8010506 <memp_free_pool+0x1e>
 80104f8:	4b0a      	ldr	r3, [pc, #40]	@ (8010524 <memp_free_pool+0x3c>)
 80104fa:	f240 1295 	movw	r2, #405	@ 0x195
 80104fe:	490a      	ldr	r1, [pc, #40]	@ (8010528 <memp_free_pool+0x40>)
 8010500:	480a      	ldr	r0, [pc, #40]	@ (801052c <memp_free_pool+0x44>)
 8010502:	f018 ff0f 	bl	8029324 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d007      	beq.n	801051c <memp_free_pool+0x34>
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d004      	beq.n	801051c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010512:	6839      	ldr	r1, [r7, #0]
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f7ff ffbb 	bl	8010490 <do_memp_free_pool>
 801051a:	e000      	b.n	801051e <memp_free_pool+0x36>
    return;
 801051c:	bf00      	nop
}
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	0802c838 	.word	0x0802c838
 8010528:	0802c8b4 	.word	0x0802c8b4
 801052c:	0802c88c 	.word	0x0802c88c

08010530 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
 8010536:	4603      	mov	r3, r0
 8010538:	6039      	str	r1, [r7, #0]
 801053a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801053c:	79fb      	ldrb	r3, [r7, #7]
 801053e:	2b0d      	cmp	r3, #13
 8010540:	d907      	bls.n	8010552 <memp_free+0x22>
 8010542:	4b0c      	ldr	r3, [pc, #48]	@ (8010574 <memp_free+0x44>)
 8010544:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8010548:	490b      	ldr	r1, [pc, #44]	@ (8010578 <memp_free+0x48>)
 801054a:	480c      	ldr	r0, [pc, #48]	@ (801057c <memp_free+0x4c>)
 801054c:	f018 feea 	bl	8029324 <iprintf>
 8010550:	e00c      	b.n	801056c <memp_free+0x3c>

  if (mem == NULL) {
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d008      	beq.n	801056a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010558:	79fb      	ldrb	r3, [r7, #7]
 801055a:	4a09      	ldr	r2, [pc, #36]	@ (8010580 <memp_free+0x50>)
 801055c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010560:	6839      	ldr	r1, [r7, #0]
 8010562:	4618      	mov	r0, r3
 8010564:	f7ff ff94 	bl	8010490 <do_memp_free_pool>
 8010568:	e000      	b.n	801056c <memp_free+0x3c>
    return;
 801056a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801056c:	3708      	adds	r7, #8
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	0802c838 	.word	0x0802c838
 8010578:	0802c908 	.word	0x0802c908
 801057c:	0802c88c 	.word	0x0802c88c
 8010580:	0802f48c 	.word	0x0802f48c

08010584 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010584:	b480      	push	{r7}
 8010586:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010588:	bf00      	nop
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr
	...

08010594 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b086      	sub	sp, #24
 8010598:	af00      	add	r7, sp, #0
 801059a:	60f8      	str	r0, [r7, #12]
 801059c:	60b9      	str	r1, [r7, #8]
 801059e:	607a      	str	r2, [r7, #4]
 80105a0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d108      	bne.n	80105ba <netif_add+0x26>
 80105a8:	4b61      	ldr	r3, [pc, #388]	@ (8010730 <netif_add+0x19c>)
 80105aa:	f240 1227 	movw	r2, #295	@ 0x127
 80105ae:	4961      	ldr	r1, [pc, #388]	@ (8010734 <netif_add+0x1a0>)
 80105b0:	4861      	ldr	r0, [pc, #388]	@ (8010738 <netif_add+0x1a4>)
 80105b2:	f018 feb7 	bl	8029324 <iprintf>
 80105b6:	2300      	movs	r3, #0
 80105b8:	e0b6      	b.n	8010728 <netif_add+0x194>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80105ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d108      	bne.n	80105d2 <netif_add+0x3e>
 80105c0:	4b5b      	ldr	r3, [pc, #364]	@ (8010730 <netif_add+0x19c>)
 80105c2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80105c6:	495d      	ldr	r1, [pc, #372]	@ (801073c <netif_add+0x1a8>)
 80105c8:	485b      	ldr	r0, [pc, #364]	@ (8010738 <netif_add+0x1a4>)
 80105ca:	f018 feab 	bl	8029324 <iprintf>
 80105ce:	2300      	movs	r3, #0
 80105d0:	e0aa      	b.n	8010728 <netif_add+0x194>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d101      	bne.n	80105dc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80105d8:	4b59      	ldr	r3, [pc, #356]	@ (8010740 <netif_add+0x1ac>)
 80105da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d101      	bne.n	80105e6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80105e2:	4b57      	ldr	r3, [pc, #348]	@ (8010740 <netif_add+0x1ac>)
 80105e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d101      	bne.n	80105f0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80105ec:	4b54      	ldr	r3, [pc, #336]	@ (8010740 <netif_add+0x1ac>)
 80105ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	2200      	movs	r2, #0
 80105f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	2200      	movs	r2, #0
 80105fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2200      	movs	r2, #0
 8010600:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	4a4f      	ldr	r2, [pc, #316]	@ (8010744 <netif_add+0x1b0>)
 8010606:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	2200      	movs	r2, #0
 801060c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2200      	movs	r2, #0
 8010612:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	3324      	adds	r3, #36	@ 0x24
 801061a:	2204      	movs	r2, #4
 801061c:	2100      	movs	r1, #0
 801061e:	4618      	mov	r0, r3
 8010620:	f019 f800 	bl	8029624 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2200      	movs	r2, #0
 8010628:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2200      	movs	r2, #0
 801062e:	639a      	str	r2, [r3, #56]	@ 0x38
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	6a3a      	ldr	r2, [r7, #32]
 8010634:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010636:	4b44      	ldr	r3, [pc, #272]	@ (8010748 <netif_add+0x1b4>)
 8010638:	781a      	ldrb	r2, [r3, #0]
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010644:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	687a      	ldr	r2, [r7, #4]
 801064a:	68b9      	ldr	r1, [r7, #8]
 801064c:	68f8      	ldr	r0, [r7, #12]
 801064e:	f000 f91d 	bl	801088c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010654:	68f8      	ldr	r0, [r7, #12]
 8010656:	4798      	blx	r3
 8010658:	4603      	mov	r3, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	d001      	beq.n	8010662 <netif_add+0xce>
    return NULL;
 801065e:	2300      	movs	r3, #0
 8010660:	e062      	b.n	8010728 <netif_add+0x194>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010668:	2bff      	cmp	r3, #255	@ 0xff
 801066a:	d103      	bne.n	8010674 <netif_add+0xe0>
        netif->num = 0;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2200      	movs	r2, #0
 8010670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 8010674:	2300      	movs	r3, #0
 8010676:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010678:	4b34      	ldr	r3, [pc, #208]	@ (801074c <netif_add+0x1b8>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	617b      	str	r3, [r7, #20]
 801067e:	e02b      	b.n	80106d8 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010680:	697a      	ldr	r2, [r7, #20]
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	429a      	cmp	r2, r3
 8010686:	d106      	bne.n	8010696 <netif_add+0x102>
 8010688:	4b29      	ldr	r3, [pc, #164]	@ (8010730 <netif_add+0x19c>)
 801068a:	f240 128b 	movw	r2, #395	@ 0x18b
 801068e:	4930      	ldr	r1, [pc, #192]	@ (8010750 <netif_add+0x1bc>)
 8010690:	4829      	ldr	r0, [pc, #164]	@ (8010738 <netif_add+0x1a4>)
 8010692:	f018 fe47 	bl	8029324 <iprintf>
        num_netifs++;
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	3301      	adds	r3, #1
 801069a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	2bff      	cmp	r3, #255	@ 0xff
 80106a0:	dd06      	ble.n	80106b0 <netif_add+0x11c>
 80106a2:	4b23      	ldr	r3, [pc, #140]	@ (8010730 <netif_add+0x19c>)
 80106a4:	f240 128d 	movw	r2, #397	@ 0x18d
 80106a8:	492a      	ldr	r1, [pc, #168]	@ (8010754 <netif_add+0x1c0>)
 80106aa:	4823      	ldr	r0, [pc, #140]	@ (8010738 <netif_add+0x1a4>)
 80106ac:	f018 fe3a 	bl	8029324 <iprintf>
        if (netif2->num == netif->num) {
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80106bc:	429a      	cmp	r2, r3
 80106be:	d108      	bne.n	80106d2 <netif_add+0x13e>
          netif->num++;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80106c6:	3301      	adds	r3, #1
 80106c8:	b2da      	uxtb	r2, r3
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 80106d0:	e005      	b.n	80106de <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	617b      	str	r3, [r7, #20]
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d1d0      	bne.n	8010680 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d1be      	bne.n	8010662 <netif_add+0xce>
  }
  if (netif->num == 254) {
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80106ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80106ec:	d103      	bne.n	80106f6 <netif_add+0x162>
    netif_num = 0;
 80106ee:	4b16      	ldr	r3, [pc, #88]	@ (8010748 <netif_add+0x1b4>)
 80106f0:	2200      	movs	r2, #0
 80106f2:	701a      	strb	r2, [r3, #0]
 80106f4:	e006      	b.n	8010704 <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80106fc:	3301      	adds	r3, #1
 80106fe:	b2da      	uxtb	r2, r3
 8010700:	4b11      	ldr	r3, [pc, #68]	@ (8010748 <netif_add+0x1b4>)
 8010702:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010704:	4b11      	ldr	r3, [pc, #68]	@ (801074c <netif_add+0x1b8>)
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801070c:	4a0f      	ldr	r2, [pc, #60]	@ (801074c <netif_add+0x1b8>)
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010718:	f003 0320 	and.w	r3, r3, #32
 801071c:	2b00      	cmp	r3, #0
 801071e:	d002      	beq.n	8010726 <netif_add+0x192>
    igmp_start(netif);
 8010720:	68f8      	ldr	r0, [r7, #12]
 8010722:	f009 f863 	bl	80197ec <igmp_start>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010726:	68fb      	ldr	r3, [r7, #12]
}
 8010728:	4618      	mov	r0, r3
 801072a:	3718      	adds	r7, #24
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}
 8010730:	0802c924 	.word	0x0802c924
 8010734:	0802c9b8 	.word	0x0802c9b8
 8010738:	0802c974 	.word	0x0802c974
 801073c:	0802c9d4 	.word	0x0802c9d4
 8010740:	0802f50c 	.word	0x0802f50c
 8010744:	08010b7b 	.word	0x08010b7b
 8010748:	200425b0 	.word	0x200425b0
 801074c:	200425a8 	.word	0x200425a8
 8010750:	0802c9f8 	.word	0x0802c9f8
 8010754:	0802ca0c 	.word	0x0802ca0c

08010758 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010762:	6839      	ldr	r1, [r7, #0]
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f002 fe25 	bl	80133b4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801076a:	6839      	ldr	r1, [r7, #0]
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f007 ff1d 	bl	80185ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010772:	bf00      	nop
 8010774:	3708      	adds	r7, #8
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
	...

0801077c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b086      	sub	sp, #24
 8010780:	af00      	add	r7, sp, #0
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	60b9      	str	r1, [r7, #8]
 8010786:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d106      	bne.n	801079c <netif_do_set_ipaddr+0x20>
 801078e:	4b1d      	ldr	r3, [pc, #116]	@ (8010804 <netif_do_set_ipaddr+0x88>)
 8010790:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8010794:	491c      	ldr	r1, [pc, #112]	@ (8010808 <netif_do_set_ipaddr+0x8c>)
 8010796:	481d      	ldr	r0, [pc, #116]	@ (801080c <netif_do_set_ipaddr+0x90>)
 8010798:	f018 fdc4 	bl	8029324 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d106      	bne.n	80107b0 <netif_do_set_ipaddr+0x34>
 80107a2:	4b18      	ldr	r3, [pc, #96]	@ (8010804 <netif_do_set_ipaddr+0x88>)
 80107a4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80107a8:	4917      	ldr	r1, [pc, #92]	@ (8010808 <netif_do_set_ipaddr+0x8c>)
 80107aa:	4818      	ldr	r0, [pc, #96]	@ (801080c <netif_do_set_ipaddr+0x90>)
 80107ac:	f018 fdba 	bl	8029324 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	3304      	adds	r3, #4
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d01c      	beq.n	80107f8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	3304      	adds	r3, #4
 80107c8:	681a      	ldr	r2, [r3, #0]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80107ce:	f107 0314 	add.w	r3, r7, #20
 80107d2:	4619      	mov	r1, r3
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f7ff ffbf 	bl	8010758 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d002      	beq.n	80107e6 <netif_do_set_ipaddr+0x6a>
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	e000      	b.n	80107e8 <netif_do_set_ipaddr+0x6c>
 80107e6:	2300      	movs	r3, #0
 80107e8:	68fa      	ldr	r2, [r7, #12]
 80107ea:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80107ec:	2101      	movs	r1, #1
 80107ee:	68f8      	ldr	r0, [r7, #12]
 80107f0:	f000 f8d2 	bl	8010998 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80107f4:	2301      	movs	r3, #1
 80107f6:	e000      	b.n	80107fa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80107f8:	2300      	movs	r3, #0
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3718      	adds	r7, #24
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	0802c924 	.word	0x0802c924
 8010808:	0802ca3c 	.word	0x0802ca3c
 801080c:	0802c974 	.word	0x0802c974

08010810 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010810:	b480      	push	{r7}
 8010812:	b085      	sub	sp, #20
 8010814:	af00      	add	r7, sp, #0
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	60b9      	str	r1, [r7, #8]
 801081a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	681a      	ldr	r2, [r3, #0]
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	3308      	adds	r3, #8
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	429a      	cmp	r2, r3
 8010828:	d00a      	beq.n	8010840 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d002      	beq.n	8010836 <netif_do_set_netmask+0x26>
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	e000      	b.n	8010838 <netif_do_set_netmask+0x28>
 8010836:	2300      	movs	r3, #0
 8010838:	68fa      	ldr	r2, [r7, #12]
 801083a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801083c:	2301      	movs	r3, #1
 801083e:	e000      	b.n	8010842 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010840:	2300      	movs	r3, #0
}
 8010842:	4618      	mov	r0, r3
 8010844:	3714      	adds	r7, #20
 8010846:	46bd      	mov	sp, r7
 8010848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084c:	4770      	bx	lr

0801084e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801084e:	b480      	push	{r7}
 8010850:	b085      	sub	sp, #20
 8010852:	af00      	add	r7, sp, #0
 8010854:	60f8      	str	r0, [r7, #12]
 8010856:	60b9      	str	r1, [r7, #8]
 8010858:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	330c      	adds	r3, #12
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	429a      	cmp	r2, r3
 8010866:	d00a      	beq.n	801087e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d002      	beq.n	8010874 <netif_do_set_gw+0x26>
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	e000      	b.n	8010876 <netif_do_set_gw+0x28>
 8010874:	2300      	movs	r3, #0
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801087a:	2301      	movs	r3, #1
 801087c:	e000      	b.n	8010880 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801087e:	2300      	movs	r3, #0
}
 8010880:	4618      	mov	r0, r3
 8010882:	3714      	adds	r7, #20
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr

0801088c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b088      	sub	sp, #32
 8010890:	af00      	add	r7, sp, #0
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	60b9      	str	r1, [r7, #8]
 8010896:	607a      	str	r2, [r7, #4]
 8010898:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801089a:	2300      	movs	r3, #0
 801089c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801089e:	2300      	movs	r3, #0
 80108a0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d101      	bne.n	80108ac <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80108a8:	4b1c      	ldr	r3, [pc, #112]	@ (801091c <netif_set_addr+0x90>)
 80108aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d101      	bne.n	80108b6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80108b2:	4b1a      	ldr	r3, [pc, #104]	@ (801091c <netif_set_addr+0x90>)
 80108b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d101      	bne.n	80108c0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80108bc:	4b17      	ldr	r3, [pc, #92]	@ (801091c <netif_set_addr+0x90>)
 80108be:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d003      	beq.n	80108ce <netif_set_addr+0x42>
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d101      	bne.n	80108d2 <netif_set_addr+0x46>
 80108ce:	2301      	movs	r3, #1
 80108d0:	e000      	b.n	80108d4 <netif_set_addr+0x48>
 80108d2:	2300      	movs	r3, #0
 80108d4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d006      	beq.n	80108ea <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80108dc:	f107 0310 	add.w	r3, r7, #16
 80108e0:	461a      	mov	r2, r3
 80108e2:	68b9      	ldr	r1, [r7, #8]
 80108e4:	68f8      	ldr	r0, [r7, #12]
 80108e6:	f7ff ff49 	bl	801077c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80108ea:	69fa      	ldr	r2, [r7, #28]
 80108ec:	6879      	ldr	r1, [r7, #4]
 80108ee:	68f8      	ldr	r0, [r7, #12]
 80108f0:	f7ff ff8e 	bl	8010810 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80108f4:	69ba      	ldr	r2, [r7, #24]
 80108f6:	6839      	ldr	r1, [r7, #0]
 80108f8:	68f8      	ldr	r0, [r7, #12]
 80108fa:	f7ff ffa8 	bl	801084e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d106      	bne.n	8010912 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010904:	f107 0310 	add.w	r3, r7, #16
 8010908:	461a      	mov	r2, r3
 801090a:	68b9      	ldr	r1, [r7, #8]
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f7ff ff35 	bl	801077c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010912:	bf00      	nop
 8010914:	3720      	adds	r7, #32
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
 801091a:	bf00      	nop
 801091c:	0802f50c 	.word	0x0802f50c

08010920 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010920:	b480      	push	{r7}
 8010922:	b083      	sub	sp, #12
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010928:	4a04      	ldr	r2, [pc, #16]	@ (801093c <netif_set_default+0x1c>)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801092e:	bf00      	nop
 8010930:	370c      	adds	r7, #12
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr
 801093a:	bf00      	nop
 801093c:	200425ac 	.word	0x200425ac

08010940 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d107      	bne.n	801095e <netif_set_up+0x1e>
 801094e:	4b0f      	ldr	r3, [pc, #60]	@ (801098c <netif_set_up+0x4c>)
 8010950:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8010954:	490e      	ldr	r1, [pc, #56]	@ (8010990 <netif_set_up+0x50>)
 8010956:	480f      	ldr	r0, [pc, #60]	@ (8010994 <netif_set_up+0x54>)
 8010958:	f018 fce4 	bl	8029324 <iprintf>
 801095c:	e013      	b.n	8010986 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010964:	f003 0301 	and.w	r3, r3, #1
 8010968:	2b00      	cmp	r3, #0
 801096a:	d10c      	bne.n	8010986 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010972:	f043 0301 	orr.w	r3, r3, #1
 8010976:	b2da      	uxtb	r2, r3
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801097e:	2103      	movs	r1, #3
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f000 f809 	bl	8010998 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010986:	3708      	adds	r7, #8
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}
 801098c:	0802c924 	.word	0x0802c924
 8010990:	0802caac 	.word	0x0802caac
 8010994:	0802c974 	.word	0x0802c974

08010998 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b082      	sub	sp, #8
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	460b      	mov	r3, r1
 80109a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d106      	bne.n	80109b8 <netif_issue_reports+0x20>
 80109aa:	4b1d      	ldr	r3, [pc, #116]	@ (8010a20 <netif_issue_reports+0x88>)
 80109ac:	f240 326d 	movw	r2, #877	@ 0x36d
 80109b0:	491c      	ldr	r1, [pc, #112]	@ (8010a24 <netif_issue_reports+0x8c>)
 80109b2:	481d      	ldr	r0, [pc, #116]	@ (8010a28 <netif_issue_reports+0x90>)
 80109b4:	f018 fcb6 	bl	8029324 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80109be:	f003 0304 	and.w	r3, r3, #4
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d028      	beq.n	8010a18 <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80109cc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d021      	beq.n	8010a18 <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80109d4:	78fb      	ldrb	r3, [r7, #3]
 80109d6:	f003 0301 	and.w	r3, r3, #1
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d01d      	beq.n	8010a1a <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	3304      	adds	r3, #4
 80109e2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d018      	beq.n	8010a1a <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80109ee:	f003 0308 	and.w	r3, r3, #8
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d005      	beq.n	8010a02 <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	3304      	adds	r3, #4
 80109fa:	4619      	mov	r1, r3
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f008 fd3f 	bl	8019480 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010a08:	f003 0320 	and.w	r3, r3, #32
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d004      	beq.n	8010a1a <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f008 ff15 	bl	8019840 <igmp_report_groups>
 8010a16:	e000      	b.n	8010a1a <netif_issue_reports+0x82>
    return;
 8010a18:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	0802c924 	.word	0x0802c924
 8010a24:	0802cac8 	.word	0x0802cac8
 8010a28:	0802c974 	.word	0x0802c974

08010a2c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d107      	bne.n	8010a4a <netif_set_down+0x1e>
 8010a3a:	4b12      	ldr	r3, [pc, #72]	@ (8010a84 <netif_set_down+0x58>)
 8010a3c:	f240 329b 	movw	r2, #923	@ 0x39b
 8010a40:	4911      	ldr	r1, [pc, #68]	@ (8010a88 <netif_set_down+0x5c>)
 8010a42:	4812      	ldr	r0, [pc, #72]	@ (8010a8c <netif_set_down+0x60>)
 8010a44:	f018 fc6e 	bl	8029324 <iprintf>
 8010a48:	e019      	b.n	8010a7e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010a50:	f003 0301 	and.w	r3, r3, #1
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d012      	beq.n	8010a7e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010a5e:	f023 0301 	bic.w	r3, r3, #1
 8010a62:	b2da      	uxtb	r2, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010a70:	f003 0308 	and.w	r3, r3, #8
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d002      	beq.n	8010a7e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f008 f8bf 	bl	8018bfc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010a7e:	3708      	adds	r7, #8
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	0802c924 	.word	0x0802c924
 8010a88:	0802caec 	.word	0x0802caec
 8010a8c:	0802c974 	.word	0x0802c974

08010a90 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d107      	bne.n	8010aae <netif_set_link_up+0x1e>
 8010a9e:	4b13      	ldr	r3, [pc, #76]	@ (8010aec <netif_set_link_up+0x5c>)
 8010aa0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8010aa4:	4912      	ldr	r1, [pc, #72]	@ (8010af0 <netif_set_link_up+0x60>)
 8010aa6:	4813      	ldr	r0, [pc, #76]	@ (8010af4 <netif_set_link_up+0x64>)
 8010aa8:	f018 fc3c 	bl	8029324 <iprintf>
 8010aac:	e01b      	b.n	8010ae6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010ab4:	f003 0304 	and.w	r3, r3, #4
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d114      	bne.n	8010ae6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010ac2:	f043 0304 	orr.w	r3, r3, #4
 8010ac6:	b2da      	uxtb	r2, r3
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010ace:	2103      	movs	r1, #3
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f7ff ff61 	bl	8010998 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	69db      	ldr	r3, [r3, #28]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d003      	beq.n	8010ae6 <netif_set_link_up+0x56>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	69db      	ldr	r3, [r3, #28]
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	0802c924 	.word	0x0802c924
 8010af0:	0802cb0c 	.word	0x0802cb0c
 8010af4:	0802c974 	.word	0x0802c974

08010af8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d107      	bne.n	8010b16 <netif_set_link_down+0x1e>
 8010b06:	4b11      	ldr	r3, [pc, #68]	@ (8010b4c <netif_set_link_down+0x54>)
 8010b08:	f240 4206 	movw	r2, #1030	@ 0x406
 8010b0c:	4910      	ldr	r1, [pc, #64]	@ (8010b50 <netif_set_link_down+0x58>)
 8010b0e:	4811      	ldr	r0, [pc, #68]	@ (8010b54 <netif_set_link_down+0x5c>)
 8010b10:	f018 fc08 	bl	8029324 <iprintf>
 8010b14:	e017      	b.n	8010b46 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010b1c:	f003 0304 	and.w	r3, r3, #4
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d010      	beq.n	8010b46 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010b2a:	f023 0304 	bic.w	r3, r3, #4
 8010b2e:	b2da      	uxtb	r2, r3
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	69db      	ldr	r3, [r3, #28]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d003      	beq.n	8010b46 <netif_set_link_down+0x4e>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	69db      	ldr	r3, [r3, #28]
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010b46:	3708      	adds	r7, #8
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}
 8010b4c:	0802c924 	.word	0x0802c924
 8010b50:	0802cb30 	.word	0x0802cb30
 8010b54:	0802c974 	.word	0x0802c974

08010b58 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d002      	beq.n	8010b6e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	683a      	ldr	r2, [r7, #0]
 8010b6c:	61da      	str	r2, [r3, #28]
  }
}
 8010b6e:	bf00      	nop
 8010b70:	370c      	adds	r7, #12
 8010b72:	46bd      	mov	sp, r7
 8010b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b78:	4770      	bx	lr

08010b7a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010b7a:	b480      	push	{r7}
 8010b7c:	b085      	sub	sp, #20
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	60f8      	str	r0, [r7, #12]
 8010b82:	60b9      	str	r1, [r7, #8]
 8010b84:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010b86:	f06f 030b 	mvn.w	r3, #11
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3714      	adds	r7, #20
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b94:	4770      	bx	lr
	...

08010b98 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b085      	sub	sp, #20
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010ba2:	79fb      	ldrb	r3, [r7, #7]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d013      	beq.n	8010bd0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8010be0 <netif_get_by_index+0x48>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	60fb      	str	r3, [r7, #12]
 8010bae:	e00c      	b.n	8010bca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	79fa      	ldrb	r2, [r7, #7]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d101      	bne.n	8010bc4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	e006      	b.n	8010bd2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	60fb      	str	r3, [r7, #12]
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d1ef      	bne.n	8010bb0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010bd0:	2300      	movs	r3, #0
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3714      	adds	r7, #20
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bdc:	4770      	bx	lr
 8010bde:	bf00      	nop
 8010be0:	200425a8 	.word	0x200425a8

08010be4 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b084      	sub	sp, #16
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d101      	bne.n	8010bf6 <netif_find+0x12>
    return NULL;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	e028      	b.n	8010c48 <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	3302      	adds	r3, #2
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f017 fb48 	bl	8028290 <atoi>
 8010c00:	4603      	mov	r3, r0
 8010c02:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 8010c04:	4b12      	ldr	r3, [pc, #72]	@ (8010c50 <netif_find+0x6c>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	60fb      	str	r3, [r7, #12]
 8010c0a:	e019      	b.n	8010c40 <netif_find+0x5c>
    if (num == netif->num &&
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010c12:	7afa      	ldrb	r2, [r7, #11]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d110      	bne.n	8010c3a <netif_find+0x56>
        name[0] == netif->name[0] &&
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	781a      	ldrb	r2, [r3, #0]
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if (num == netif->num &&
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d109      	bne.n	8010c3a <netif_find+0x56>
        name[1] == netif->name[1]) {
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	3301      	adds	r3, #1
 8010c2a:	781a      	ldrb	r2, [r3, #0]
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
        name[0] == netif->name[0] &&
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d101      	bne.n	8010c3a <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	e006      	b.n	8010c48 <netif_find+0x64>
  NETIF_FOREACH(netif) {
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	60fb      	str	r3, [r7, #12]
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d1e2      	bne.n	8010c0c <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 8010c46:	2300      	movs	r3, #0
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3710      	adds	r7, #16
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	200425a8 	.word	0x200425a8

08010c54 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010c5a:	f00a ffbd 	bl	801bbd8 <sys_arch_protect>
 8010c5e:	6038      	str	r0, [r7, #0]
 8010c60:	4b0d      	ldr	r3, [pc, #52]	@ (8010c98 <pbuf_free_ooseq+0x44>)
 8010c62:	2200      	movs	r2, #0
 8010c64:	701a      	strb	r2, [r3, #0]
 8010c66:	6838      	ldr	r0, [r7, #0]
 8010c68:	f00a ffc4 	bl	801bbf4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8010c9c <pbuf_free_ooseq+0x48>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	607b      	str	r3, [r7, #4]
 8010c72:	e00a      	b.n	8010c8a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d003      	beq.n	8010c84 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f002 fbd7 	bl	8013430 <tcp_free_ooseq>
      return;
 8010c82:	e005      	b.n	8010c90 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	68db      	ldr	r3, [r3, #12]
 8010c88:	607b      	str	r3, [r7, #4]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d1f1      	bne.n	8010c74 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010c90:	3708      	adds	r7, #8
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	200425b1 	.word	0x200425b1
 8010c9c:	200425c0 	.word	0x200425c0

08010ca0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010ca8:	f7ff ffd4 	bl	8010c54 <pbuf_free_ooseq>
}
 8010cac:	bf00      	nop
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}

08010cb4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010cba:	f00a ff8d 	bl	801bbd8 <sys_arch_protect>
 8010cbe:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8010d00 <pbuf_pool_is_empty+0x4c>)
 8010cc2:	781b      	ldrb	r3, [r3, #0]
 8010cc4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8010d00 <pbuf_pool_is_empty+0x4c>)
 8010cc8:	2201      	movs	r2, #1
 8010cca:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f00a ff91 	bl	801bbf4 <sys_arch_unprotect>

  if (!queued) {
 8010cd2:	78fb      	ldrb	r3, [r7, #3]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d10f      	bne.n	8010cf8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010cd8:	2100      	movs	r1, #0
 8010cda:	480a      	ldr	r0, [pc, #40]	@ (8010d04 <pbuf_pool_is_empty+0x50>)
 8010cdc:	f7fe fdba 	bl	800f854 <tcpip_try_callback>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d008      	beq.n	8010cf8 <pbuf_pool_is_empty+0x44>
 8010ce6:	f00a ff77 	bl	801bbd8 <sys_arch_protect>
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	4b04      	ldr	r3, [pc, #16]	@ (8010d00 <pbuf_pool_is_empty+0x4c>)
 8010cee:	2200      	movs	r2, #0
 8010cf0:	701a      	strb	r2, [r3, #0]
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f00a ff7e 	bl	801bbf4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010cf8:	bf00      	nop
 8010cfa:	3708      	adds	r7, #8
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	200425b1 	.word	0x200425b1
 8010d04:	08010ca1 	.word	0x08010ca1

08010d08 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010d08:	b480      	push	{r7}
 8010d0a:	b085      	sub	sp, #20
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	60b9      	str	r1, [r7, #8]
 8010d12:	4611      	mov	r1, r2
 8010d14:	461a      	mov	r2, r3
 8010d16:	460b      	mov	r3, r1
 8010d18:	80fb      	strh	r3, [r7, #6]
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2200      	movs	r2, #0
 8010d22:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	68ba      	ldr	r2, [r7, #8]
 8010d28:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	88fa      	ldrh	r2, [r7, #6]
 8010d2e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	88ba      	ldrh	r2, [r7, #4]
 8010d34:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010d36:	8b3b      	ldrh	r3, [r7, #24]
 8010d38:	b2da      	uxtb	r2, r3
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	7f3a      	ldrb	r2, [r7, #28]
 8010d42:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2201      	movs	r2, #1
 8010d48:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	73da      	strb	r2, [r3, #15]
}
 8010d50:	bf00      	nop
 8010d52:	3714      	adds	r7, #20
 8010d54:	46bd      	mov	sp, r7
 8010d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5a:	4770      	bx	lr

08010d5c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b08c      	sub	sp, #48	@ 0x30
 8010d60:	af02      	add	r7, sp, #8
 8010d62:	4603      	mov	r3, r0
 8010d64:	71fb      	strb	r3, [r7, #7]
 8010d66:	460b      	mov	r3, r1
 8010d68:	80bb      	strh	r3, [r7, #4]
 8010d6a:	4613      	mov	r3, r2
 8010d6c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010d6e:	79fb      	ldrb	r3, [r7, #7]
 8010d70:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010d72:	887b      	ldrh	r3, [r7, #2]
 8010d74:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8010d78:	d07f      	beq.n	8010e7a <pbuf_alloc+0x11e>
 8010d7a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8010d7e:	f300 80c8 	bgt.w	8010f12 <pbuf_alloc+0x1b6>
 8010d82:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010d86:	d010      	beq.n	8010daa <pbuf_alloc+0x4e>
 8010d88:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010d8c:	f300 80c1 	bgt.w	8010f12 <pbuf_alloc+0x1b6>
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d002      	beq.n	8010d9a <pbuf_alloc+0x3e>
 8010d94:	2b41      	cmp	r3, #65	@ 0x41
 8010d96:	f040 80bc 	bne.w	8010f12 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010d9a:	887a      	ldrh	r2, [r7, #2]
 8010d9c:	88bb      	ldrh	r3, [r7, #4]
 8010d9e:	4619      	mov	r1, r3
 8010da0:	2000      	movs	r0, #0
 8010da2:	f000 f8d1 	bl	8010f48 <pbuf_alloc_reference>
 8010da6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8010da8:	e0bd      	b.n	8010f26 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010daa:	2300      	movs	r3, #0
 8010dac:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8010dae:	2300      	movs	r3, #0
 8010db0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010db2:	88bb      	ldrh	r3, [r7, #4]
 8010db4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010db6:	200d      	movs	r0, #13
 8010db8:	f7ff fb44 	bl	8010444 <memp_malloc>
 8010dbc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d109      	bne.n	8010dd8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010dc4:	f7ff ff76 	bl	8010cb4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d002      	beq.n	8010dd4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8010dce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010dd0:	f000 fada 	bl	8011388 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	e0a7      	b.n	8010f28 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010dd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010dda:	3303      	adds	r3, #3
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	f023 0303 	bic.w	r3, r3, #3
 8010de2:	b29b      	uxth	r3, r3
 8010de4:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	8b7a      	ldrh	r2, [r7, #26]
 8010dec:	4293      	cmp	r3, r2
 8010dee:	bf28      	it	cs
 8010df0:	4613      	movcs	r3, r2
 8010df2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010df4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010df6:	3310      	adds	r3, #16
 8010df8:	693a      	ldr	r2, [r7, #16]
 8010dfa:	4413      	add	r3, r2
 8010dfc:	3303      	adds	r3, #3
 8010dfe:	f023 0303 	bic.w	r3, r3, #3
 8010e02:	4618      	mov	r0, r3
 8010e04:	89f9      	ldrh	r1, [r7, #14]
 8010e06:	8b7a      	ldrh	r2, [r7, #26]
 8010e08:	2300      	movs	r3, #0
 8010e0a:	9301      	str	r3, [sp, #4]
 8010e0c:	887b      	ldrh	r3, [r7, #2]
 8010e0e:	9300      	str	r3, [sp, #0]
 8010e10:	460b      	mov	r3, r1
 8010e12:	4601      	mov	r1, r0
 8010e14:	6938      	ldr	r0, [r7, #16]
 8010e16:	f7ff ff77 	bl	8010d08 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	f003 0303 	and.w	r3, r3, #3
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d006      	beq.n	8010e34 <pbuf_alloc+0xd8>
 8010e26:	4b42      	ldr	r3, [pc, #264]	@ (8010f30 <pbuf_alloc+0x1d4>)
 8010e28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010e2c:	4941      	ldr	r1, [pc, #260]	@ (8010f34 <pbuf_alloc+0x1d8>)
 8010e2e:	4842      	ldr	r0, [pc, #264]	@ (8010f38 <pbuf_alloc+0x1dc>)
 8010e30:	f018 fa78 	bl	8029324 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010e34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010e36:	3303      	adds	r3, #3
 8010e38:	f023 0303 	bic.w	r3, r3, #3
 8010e3c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8010e40:	d106      	bne.n	8010e50 <pbuf_alloc+0xf4>
 8010e42:	4b3b      	ldr	r3, [pc, #236]	@ (8010f30 <pbuf_alloc+0x1d4>)
 8010e44:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8010e48:	493c      	ldr	r1, [pc, #240]	@ (8010f3c <pbuf_alloc+0x1e0>)
 8010e4a:	483b      	ldr	r0, [pc, #236]	@ (8010f38 <pbuf_alloc+0x1dc>)
 8010e4c:	f018 fa6a 	bl	8029324 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d102      	bne.n	8010e5c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e5a:	e002      	b.n	8010e62 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010e5c:	69fb      	ldr	r3, [r7, #28]
 8010e5e:	693a      	ldr	r2, [r7, #16]
 8010e60:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010e66:	8b7a      	ldrh	r2, [r7, #26]
 8010e68:	89fb      	ldrh	r3, [r7, #14]
 8010e6a:	1ad3      	subs	r3, r2, r3
 8010e6c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8010e72:	8b7b      	ldrh	r3, [r7, #26]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d19e      	bne.n	8010db6 <pbuf_alloc+0x5a>
      break;
 8010e78:	e055      	b.n	8010f26 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010e7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010e7c:	3303      	adds	r3, #3
 8010e7e:	b29b      	uxth	r3, r3
 8010e80:	f023 0303 	bic.w	r3, r3, #3
 8010e84:	b29a      	uxth	r2, r3
 8010e86:	88bb      	ldrh	r3, [r7, #4]
 8010e88:	3303      	adds	r3, #3
 8010e8a:	b29b      	uxth	r3, r3
 8010e8c:	f023 0303 	bic.w	r3, r3, #3
 8010e90:	b29b      	uxth	r3, r3
 8010e92:	4413      	add	r3, r2
 8010e94:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010e96:	8b3b      	ldrh	r3, [r7, #24]
 8010e98:	3310      	adds	r3, #16
 8010e9a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010e9c:	8b3a      	ldrh	r2, [r7, #24]
 8010e9e:	88bb      	ldrh	r3, [r7, #4]
 8010ea0:	3303      	adds	r3, #3
 8010ea2:	f023 0303 	bic.w	r3, r3, #3
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d306      	bcc.n	8010eb8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010eaa:	8afa      	ldrh	r2, [r7, #22]
 8010eac:	88bb      	ldrh	r3, [r7, #4]
 8010eae:	3303      	adds	r3, #3
 8010eb0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d201      	bcs.n	8010ebc <pbuf_alloc+0x160>
        return NULL;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	e035      	b.n	8010f28 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010ebc:	8afb      	ldrh	r3, [r7, #22]
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7ff f918 	bl	80100f4 <mem_malloc>
 8010ec4:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8010ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d101      	bne.n	8010ed0 <pbuf_alloc+0x174>
        return NULL;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	e02b      	b.n	8010f28 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010ed0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010ed2:	3310      	adds	r3, #16
 8010ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ed6:	4413      	add	r3, r2
 8010ed8:	3303      	adds	r3, #3
 8010eda:	f023 0303 	bic.w	r3, r3, #3
 8010ede:	4618      	mov	r0, r3
 8010ee0:	88b9      	ldrh	r1, [r7, #4]
 8010ee2:	88ba      	ldrh	r2, [r7, #4]
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	9301      	str	r3, [sp, #4]
 8010ee8:	887b      	ldrh	r3, [r7, #2]
 8010eea:	9300      	str	r3, [sp, #0]
 8010eec:	460b      	mov	r3, r1
 8010eee:	4601      	mov	r1, r0
 8010ef0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010ef2:	f7ff ff09 	bl	8010d08 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	f003 0303 	and.w	r3, r3, #3
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d010      	beq.n	8010f24 <pbuf_alloc+0x1c8>
 8010f02:	4b0b      	ldr	r3, [pc, #44]	@ (8010f30 <pbuf_alloc+0x1d4>)
 8010f04:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8010f08:	490d      	ldr	r1, [pc, #52]	@ (8010f40 <pbuf_alloc+0x1e4>)
 8010f0a:	480b      	ldr	r0, [pc, #44]	@ (8010f38 <pbuf_alloc+0x1dc>)
 8010f0c:	f018 fa0a 	bl	8029324 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010f10:	e008      	b.n	8010f24 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010f12:	4b07      	ldr	r3, [pc, #28]	@ (8010f30 <pbuf_alloc+0x1d4>)
 8010f14:	f240 1227 	movw	r2, #295	@ 0x127
 8010f18:	490a      	ldr	r1, [pc, #40]	@ (8010f44 <pbuf_alloc+0x1e8>)
 8010f1a:	4807      	ldr	r0, [pc, #28]	@ (8010f38 <pbuf_alloc+0x1dc>)
 8010f1c:	f018 fa02 	bl	8029324 <iprintf>
      return NULL;
 8010f20:	2300      	movs	r3, #0
 8010f22:	e001      	b.n	8010f28 <pbuf_alloc+0x1cc>
      break;
 8010f24:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3728      	adds	r7, #40	@ 0x28
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}
 8010f30:	0802cb54 	.word	0x0802cb54
 8010f34:	0802cb84 	.word	0x0802cb84
 8010f38:	0802cbb4 	.word	0x0802cbb4
 8010f3c:	0802cbdc 	.word	0x0802cbdc
 8010f40:	0802cc10 	.word	0x0802cc10
 8010f44:	0802cc3c 	.word	0x0802cc3c

08010f48 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b086      	sub	sp, #24
 8010f4c:	af02      	add	r7, sp, #8
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	460b      	mov	r3, r1
 8010f52:	807b      	strh	r3, [r7, #2]
 8010f54:	4613      	mov	r3, r2
 8010f56:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010f58:	883b      	ldrh	r3, [r7, #0]
 8010f5a:	2b41      	cmp	r3, #65	@ 0x41
 8010f5c:	d009      	beq.n	8010f72 <pbuf_alloc_reference+0x2a>
 8010f5e:	883b      	ldrh	r3, [r7, #0]
 8010f60:	2b01      	cmp	r3, #1
 8010f62:	d006      	beq.n	8010f72 <pbuf_alloc_reference+0x2a>
 8010f64:	4b0f      	ldr	r3, [pc, #60]	@ (8010fa4 <pbuf_alloc_reference+0x5c>)
 8010f66:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8010f6a:	490f      	ldr	r1, [pc, #60]	@ (8010fa8 <pbuf_alloc_reference+0x60>)
 8010f6c:	480f      	ldr	r0, [pc, #60]	@ (8010fac <pbuf_alloc_reference+0x64>)
 8010f6e:	f018 f9d9 	bl	8029324 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010f72:	200c      	movs	r0, #12
 8010f74:	f7ff fa66 	bl	8010444 <memp_malloc>
 8010f78:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d101      	bne.n	8010f84 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010f80:	2300      	movs	r3, #0
 8010f82:	e00b      	b.n	8010f9c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010f84:	8879      	ldrh	r1, [r7, #2]
 8010f86:	887a      	ldrh	r2, [r7, #2]
 8010f88:	2300      	movs	r3, #0
 8010f8a:	9301      	str	r3, [sp, #4]
 8010f8c:	883b      	ldrh	r3, [r7, #0]
 8010f8e:	9300      	str	r3, [sp, #0]
 8010f90:	460b      	mov	r3, r1
 8010f92:	6879      	ldr	r1, [r7, #4]
 8010f94:	68f8      	ldr	r0, [r7, #12]
 8010f96:	f7ff feb7 	bl	8010d08 <pbuf_init_alloced_pbuf>
  return p;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
}
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3710      	adds	r7, #16
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}
 8010fa4:	0802cb54 	.word	0x0802cb54
 8010fa8:	0802cc58 	.word	0x0802cc58
 8010fac:	0802cbb4 	.word	0x0802cbb4

08010fb0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b088      	sub	sp, #32
 8010fb4:	af02      	add	r7, sp, #8
 8010fb6:	607b      	str	r3, [r7, #4]
 8010fb8:	4603      	mov	r3, r0
 8010fba:	73fb      	strb	r3, [r7, #15]
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	81bb      	strh	r3, [r7, #12]
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010fc4:	7bfb      	ldrb	r3, [r7, #15]
 8010fc6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010fc8:	8a7b      	ldrh	r3, [r7, #18]
 8010fca:	3303      	adds	r3, #3
 8010fcc:	f023 0203 	bic.w	r2, r3, #3
 8010fd0:	89bb      	ldrh	r3, [r7, #12]
 8010fd2:	441a      	add	r2, r3
 8010fd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d901      	bls.n	8010fde <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	e018      	b.n	8011010 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010fde:	6a3b      	ldr	r3, [r7, #32]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d007      	beq.n	8010ff4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010fe4:	8a7b      	ldrh	r3, [r7, #18]
 8010fe6:	3303      	adds	r3, #3
 8010fe8:	f023 0303 	bic.w	r3, r3, #3
 8010fec:	6a3a      	ldr	r2, [r7, #32]
 8010fee:	4413      	add	r3, r2
 8010ff0:	617b      	str	r3, [r7, #20]
 8010ff2:	e001      	b.n	8010ff8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	89b9      	ldrh	r1, [r7, #12]
 8010ffc:	89ba      	ldrh	r2, [r7, #12]
 8010ffe:	2302      	movs	r3, #2
 8011000:	9301      	str	r3, [sp, #4]
 8011002:	897b      	ldrh	r3, [r7, #10]
 8011004:	9300      	str	r3, [sp, #0]
 8011006:	460b      	mov	r3, r1
 8011008:	6979      	ldr	r1, [r7, #20]
 801100a:	f7ff fe7d 	bl	8010d08 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801100e:	687b      	ldr	r3, [r7, #4]
}
 8011010:	4618      	mov	r0, r3
 8011012:	3718      	adds	r7, #24
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b084      	sub	sp, #16
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	460b      	mov	r3, r1
 8011022:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d106      	bne.n	8011038 <pbuf_realloc+0x20>
 801102a:	4b3a      	ldr	r3, [pc, #232]	@ (8011114 <pbuf_realloc+0xfc>)
 801102c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8011030:	4939      	ldr	r1, [pc, #228]	@ (8011118 <pbuf_realloc+0x100>)
 8011032:	483a      	ldr	r0, [pc, #232]	@ (801111c <pbuf_realloc+0x104>)
 8011034:	f018 f976 	bl	8029324 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	891b      	ldrh	r3, [r3, #8]
 801103c:	887a      	ldrh	r2, [r7, #2]
 801103e:	429a      	cmp	r2, r3
 8011040:	d263      	bcs.n	801110a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	891a      	ldrh	r2, [r3, #8]
 8011046:	887b      	ldrh	r3, [r7, #2]
 8011048:	1ad3      	subs	r3, r2, r3
 801104a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801104c:	887b      	ldrh	r3, [r7, #2]
 801104e:	817b      	strh	r3, [r7, #10]
  q = p;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011054:	e018      	b.n	8011088 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	895b      	ldrh	r3, [r3, #10]
 801105a:	897a      	ldrh	r2, [r7, #10]
 801105c:	1ad3      	subs	r3, r2, r3
 801105e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	891a      	ldrh	r2, [r3, #8]
 8011064:	893b      	ldrh	r3, [r7, #8]
 8011066:	1ad3      	subs	r3, r2, r3
 8011068:	b29a      	uxth	r2, r3
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d106      	bne.n	8011088 <pbuf_realloc+0x70>
 801107a:	4b26      	ldr	r3, [pc, #152]	@ (8011114 <pbuf_realloc+0xfc>)
 801107c:	f240 12af 	movw	r2, #431	@ 0x1af
 8011080:	4927      	ldr	r1, [pc, #156]	@ (8011120 <pbuf_realloc+0x108>)
 8011082:	4826      	ldr	r0, [pc, #152]	@ (801111c <pbuf_realloc+0x104>)
 8011084:	f018 f94e 	bl	8029324 <iprintf>
  while (rem_len > q->len) {
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	895b      	ldrh	r3, [r3, #10]
 801108c:	897a      	ldrh	r2, [r7, #10]
 801108e:	429a      	cmp	r2, r3
 8011090:	d8e1      	bhi.n	8011056 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	7b1b      	ldrb	r3, [r3, #12]
 8011096:	f003 030f 	and.w	r3, r3, #15
 801109a:	2b00      	cmp	r3, #0
 801109c:	d121      	bne.n	80110e2 <pbuf_realloc+0xca>
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	895b      	ldrh	r3, [r3, #10]
 80110a2:	897a      	ldrh	r2, [r7, #10]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d01c      	beq.n	80110e2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	7b5b      	ldrb	r3, [r3, #13]
 80110ac:	f003 0302 	and.w	r3, r3, #2
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d116      	bne.n	80110e2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	685a      	ldr	r2, [r3, #4]
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	1ad3      	subs	r3, r2, r3
 80110bc:	b29a      	uxth	r2, r3
 80110be:	897b      	ldrh	r3, [r7, #10]
 80110c0:	4413      	add	r3, r2
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	4619      	mov	r1, r3
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f7fe ff04 	bl	800fed4 <mem_trim>
 80110cc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d106      	bne.n	80110e2 <pbuf_realloc+0xca>
 80110d4:	4b0f      	ldr	r3, [pc, #60]	@ (8011114 <pbuf_realloc+0xfc>)
 80110d6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80110da:	4912      	ldr	r1, [pc, #72]	@ (8011124 <pbuf_realloc+0x10c>)
 80110dc:	480f      	ldr	r0, [pc, #60]	@ (801111c <pbuf_realloc+0x104>)
 80110de:	f018 f921 	bl	8029324 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	897a      	ldrh	r2, [r7, #10]
 80110e6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	895a      	ldrh	r2, [r3, #10]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d004      	beq.n	8011102 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	4618      	mov	r0, r3
 80110fe:	f000 f943 	bl	8011388 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2200      	movs	r2, #0
 8011106:	601a      	str	r2, [r3, #0]
 8011108:	e000      	b.n	801110c <pbuf_realloc+0xf4>
    return;
 801110a:	bf00      	nop

}
 801110c:	3710      	adds	r7, #16
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	0802cb54 	.word	0x0802cb54
 8011118:	0802cc6c 	.word	0x0802cc6c
 801111c:	0802cbb4 	.word	0x0802cbb4
 8011120:	0802cc84 	.word	0x0802cc84
 8011124:	0802cc9c 	.word	0x0802cc9c

08011128 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b086      	sub	sp, #24
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	4613      	mov	r3, r2
 8011134:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d106      	bne.n	801114a <pbuf_add_header_impl+0x22>
 801113c:	4b2b      	ldr	r3, [pc, #172]	@ (80111ec <pbuf_add_header_impl+0xc4>)
 801113e:	f240 12df 	movw	r2, #479	@ 0x1df
 8011142:	492b      	ldr	r1, [pc, #172]	@ (80111f0 <pbuf_add_header_impl+0xc8>)
 8011144:	482b      	ldr	r0, [pc, #172]	@ (80111f4 <pbuf_add_header_impl+0xcc>)
 8011146:	f018 f8ed 	bl	8029324 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d003      	beq.n	8011158 <pbuf_add_header_impl+0x30>
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011156:	d301      	bcc.n	801115c <pbuf_add_header_impl+0x34>
    return 1;
 8011158:	2301      	movs	r3, #1
 801115a:	e043      	b.n	80111e4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d101      	bne.n	8011166 <pbuf_add_header_impl+0x3e>
    return 0;
 8011162:	2300      	movs	r3, #0
 8011164:	e03e      	b.n	80111e4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	891a      	ldrh	r2, [r3, #8]
 801116e:	8a7b      	ldrh	r3, [r7, #18]
 8011170:	4413      	add	r3, r2
 8011172:	b29b      	uxth	r3, r3
 8011174:	8a7a      	ldrh	r2, [r7, #18]
 8011176:	429a      	cmp	r2, r3
 8011178:	d901      	bls.n	801117e <pbuf_add_header_impl+0x56>
    return 1;
 801117a:	2301      	movs	r3, #1
 801117c:	e032      	b.n	80111e4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	7b1b      	ldrb	r3, [r3, #12]
 8011182:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011184:	8a3b      	ldrh	r3, [r7, #16]
 8011186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801118a:	2b00      	cmp	r3, #0
 801118c:	d00c      	beq.n	80111a8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	685a      	ldr	r2, [r3, #4]
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	425b      	negs	r3, r3
 8011196:	4413      	add	r3, r2
 8011198:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	3310      	adds	r3, #16
 801119e:	697a      	ldr	r2, [r7, #20]
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d20d      	bcs.n	80111c0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80111a4:	2301      	movs	r3, #1
 80111a6:	e01d      	b.n	80111e4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80111a8:	79fb      	ldrb	r3, [r7, #7]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d006      	beq.n	80111bc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	685a      	ldr	r2, [r3, #4]
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	425b      	negs	r3, r3
 80111b6:	4413      	add	r3, r2
 80111b8:	617b      	str	r3, [r7, #20]
 80111ba:	e001      	b.n	80111c0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80111bc:	2301      	movs	r3, #1
 80111be:	e011      	b.n	80111e4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	697a      	ldr	r2, [r7, #20]
 80111c4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	895a      	ldrh	r2, [r3, #10]
 80111ca:	8a7b      	ldrh	r3, [r7, #18]
 80111cc:	4413      	add	r3, r2
 80111ce:	b29a      	uxth	r2, r3
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	891a      	ldrh	r2, [r3, #8]
 80111d8:	8a7b      	ldrh	r3, [r7, #18]
 80111da:	4413      	add	r3, r2
 80111dc:	b29a      	uxth	r2, r3
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	811a      	strh	r2, [r3, #8]


  return 0;
 80111e2:	2300      	movs	r3, #0
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3718      	adds	r7, #24
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}
 80111ec:	0802cb54 	.word	0x0802cb54
 80111f0:	0802ccb8 	.word	0x0802ccb8
 80111f4:	0802cbb4 	.word	0x0802cbb4

080111f8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011202:	2200      	movs	r2, #0
 8011204:	6839      	ldr	r1, [r7, #0]
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f7ff ff8e 	bl	8011128 <pbuf_add_header_impl>
 801120c:	4603      	mov	r3, r0
}
 801120e:	4618      	mov	r0, r3
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
	...

08011218 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d106      	bne.n	8011236 <pbuf_remove_header+0x1e>
 8011228:	4b20      	ldr	r3, [pc, #128]	@ (80112ac <pbuf_remove_header+0x94>)
 801122a:	f240 224b 	movw	r2, #587	@ 0x24b
 801122e:	4920      	ldr	r1, [pc, #128]	@ (80112b0 <pbuf_remove_header+0x98>)
 8011230:	4820      	ldr	r0, [pc, #128]	@ (80112b4 <pbuf_remove_header+0x9c>)
 8011232:	f018 f877 	bl	8029324 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d003      	beq.n	8011244 <pbuf_remove_header+0x2c>
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011242:	d301      	bcc.n	8011248 <pbuf_remove_header+0x30>
    return 1;
 8011244:	2301      	movs	r3, #1
 8011246:	e02c      	b.n	80112a2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d101      	bne.n	8011252 <pbuf_remove_header+0x3a>
    return 0;
 801124e:	2300      	movs	r3, #0
 8011250:	e027      	b.n	80112a2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	895b      	ldrh	r3, [r3, #10]
 801125a:	89fa      	ldrh	r2, [r7, #14]
 801125c:	429a      	cmp	r2, r3
 801125e:	d908      	bls.n	8011272 <pbuf_remove_header+0x5a>
 8011260:	4b12      	ldr	r3, [pc, #72]	@ (80112ac <pbuf_remove_header+0x94>)
 8011262:	f240 2255 	movw	r2, #597	@ 0x255
 8011266:	4914      	ldr	r1, [pc, #80]	@ (80112b8 <pbuf_remove_header+0xa0>)
 8011268:	4812      	ldr	r0, [pc, #72]	@ (80112b4 <pbuf_remove_header+0x9c>)
 801126a:	f018 f85b 	bl	8029324 <iprintf>
 801126e:	2301      	movs	r3, #1
 8011270:	e017      	b.n	80112a2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	685a      	ldr	r2, [r3, #4]
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	441a      	add	r2, r3
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	895a      	ldrh	r2, [r3, #10]
 8011288:	89fb      	ldrh	r3, [r7, #14]
 801128a:	1ad3      	subs	r3, r2, r3
 801128c:	b29a      	uxth	r2, r3
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	891a      	ldrh	r2, [r3, #8]
 8011296:	89fb      	ldrh	r3, [r7, #14]
 8011298:	1ad3      	subs	r3, r2, r3
 801129a:	b29a      	uxth	r2, r3
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80112a0:	2300      	movs	r3, #0
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	3710      	adds	r7, #16
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	bf00      	nop
 80112ac:	0802cb54 	.word	0x0802cb54
 80112b0:	0802ccb8 	.word	0x0802ccb8
 80112b4:	0802cbb4 	.word	0x0802cbb4
 80112b8:	0802ccc4 	.word	0x0802ccc4

080112bc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	460b      	mov	r3, r1
 80112c6:	807b      	strh	r3, [r7, #2]
 80112c8:	4613      	mov	r3, r2
 80112ca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80112cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	da08      	bge.n	80112e6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80112d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80112d8:	425b      	negs	r3, r3
 80112da:	4619      	mov	r1, r3
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f7ff ff9b 	bl	8011218 <pbuf_remove_header>
 80112e2:	4603      	mov	r3, r0
 80112e4:	e007      	b.n	80112f6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80112e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80112ea:	787a      	ldrb	r2, [r7, #1]
 80112ec:	4619      	mov	r1, r3
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f7ff ff1a 	bl	8011128 <pbuf_add_header_impl>
 80112f4:	4603      	mov	r3, r0
  }
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3708      	adds	r7, #8
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}

080112fe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80112fe:	b580      	push	{r7, lr}
 8011300:	b082      	sub	sp, #8
 8011302:	af00      	add	r7, sp, #0
 8011304:	6078      	str	r0, [r7, #4]
 8011306:	460b      	mov	r3, r1
 8011308:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801130a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801130e:	2201      	movs	r2, #1
 8011310:	4619      	mov	r1, r3
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f7ff ffd2 	bl	80112bc <pbuf_header_impl>
 8011318:	4603      	mov	r3, r0
}
 801131a:	4618      	mov	r0, r3
 801131c:	3708      	adds	r7, #8
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}

08011322 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8011322:	b580      	push	{r7, lr}
 8011324:	b086      	sub	sp, #24
 8011326:	af00      	add	r7, sp, #0
 8011328:	6078      	str	r0, [r7, #4]
 801132a:	460b      	mov	r3, r1
 801132c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8011332:	887b      	ldrh	r3, [r7, #2]
 8011334:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8011336:	e01c      	b.n	8011372 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	895b      	ldrh	r3, [r3, #10]
 801133c:	8a7a      	ldrh	r2, [r7, #18]
 801133e:	429a      	cmp	r2, r3
 8011340:	d310      	bcc.n	8011364 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	895b      	ldrh	r3, [r3, #10]
 801134a:	8a7a      	ldrh	r2, [r7, #18]
 801134c:	1ad3      	subs	r3, r2, r3
 801134e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	2200      	movs	r2, #0
 801135a:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 801135c:	68f8      	ldr	r0, [r7, #12]
 801135e:	f000 f813 	bl	8011388 <pbuf_free>
 8011362:	e006      	b.n	8011372 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8011364:	8a7b      	ldrh	r3, [r7, #18]
 8011366:	4619      	mov	r1, r3
 8011368:	6978      	ldr	r0, [r7, #20]
 801136a:	f7ff ff55 	bl	8011218 <pbuf_remove_header>
      free_left = 0;
 801136e:	2300      	movs	r3, #0
 8011370:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8011372:	8a7b      	ldrh	r3, [r7, #18]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d002      	beq.n	801137e <pbuf_free_header+0x5c>
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d1dc      	bne.n	8011338 <pbuf_free_header+0x16>
    }
  }
  return p;
 801137e:	697b      	ldr	r3, [r7, #20]
}
 8011380:	4618      	mov	r0, r3
 8011382:	3718      	adds	r7, #24
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}

08011388 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b088      	sub	sp, #32
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d10b      	bne.n	80113ae <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d106      	bne.n	80113aa <pbuf_free+0x22>
 801139c:	4b3b      	ldr	r3, [pc, #236]	@ (801148c <pbuf_free+0x104>)
 801139e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80113a2:	493b      	ldr	r1, [pc, #236]	@ (8011490 <pbuf_free+0x108>)
 80113a4:	483b      	ldr	r0, [pc, #236]	@ (8011494 <pbuf_free+0x10c>)
 80113a6:	f017 ffbd 	bl	8029324 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80113aa:	2300      	movs	r3, #0
 80113ac:	e069      	b.n	8011482 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80113ae:	2300      	movs	r3, #0
 80113b0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80113b2:	e062      	b.n	801147a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80113b4:	f00a fc10 	bl	801bbd8 <sys_arch_protect>
 80113b8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	7b9b      	ldrb	r3, [r3, #14]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d106      	bne.n	80113d0 <pbuf_free+0x48>
 80113c2:	4b32      	ldr	r3, [pc, #200]	@ (801148c <pbuf_free+0x104>)
 80113c4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80113c8:	4933      	ldr	r1, [pc, #204]	@ (8011498 <pbuf_free+0x110>)
 80113ca:	4832      	ldr	r0, [pc, #200]	@ (8011494 <pbuf_free+0x10c>)
 80113cc:	f017 ffaa 	bl	8029324 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	7b9b      	ldrb	r3, [r3, #14]
 80113d4:	3b01      	subs	r3, #1
 80113d6:	b2da      	uxtb	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	739a      	strb	r2, [r3, #14]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	7b9b      	ldrb	r3, [r3, #14]
 80113e0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80113e2:	69b8      	ldr	r0, [r7, #24]
 80113e4:	f00a fc06 	bl	801bbf4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80113e8:	7dfb      	ldrb	r3, [r7, #23]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d143      	bne.n	8011476 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	7b1b      	ldrb	r3, [r3, #12]
 80113f8:	f003 030f 	and.w	r3, r3, #15
 80113fc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	7b5b      	ldrb	r3, [r3, #13]
 8011402:	f003 0302 	and.w	r3, r3, #2
 8011406:	2b00      	cmp	r3, #0
 8011408:	d011      	beq.n	801142e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	691b      	ldr	r3, [r3, #16]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d106      	bne.n	8011424 <pbuf_free+0x9c>
 8011416:	4b1d      	ldr	r3, [pc, #116]	@ (801148c <pbuf_free+0x104>)
 8011418:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801141c:	491f      	ldr	r1, [pc, #124]	@ (801149c <pbuf_free+0x114>)
 801141e:	481d      	ldr	r0, [pc, #116]	@ (8011494 <pbuf_free+0x10c>)
 8011420:	f017 ff80 	bl	8029324 <iprintf>
        pc->custom_free_function(p);
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	691b      	ldr	r3, [r3, #16]
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	4798      	blx	r3
 801142c:	e01d      	b.n	801146a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801142e:	7bfb      	ldrb	r3, [r7, #15]
 8011430:	2b02      	cmp	r3, #2
 8011432:	d104      	bne.n	801143e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011434:	6879      	ldr	r1, [r7, #4]
 8011436:	200d      	movs	r0, #13
 8011438:	f7ff f87a 	bl	8010530 <memp_free>
 801143c:	e015      	b.n	801146a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801143e:	7bfb      	ldrb	r3, [r7, #15]
 8011440:	2b01      	cmp	r3, #1
 8011442:	d104      	bne.n	801144e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011444:	6879      	ldr	r1, [r7, #4]
 8011446:	200c      	movs	r0, #12
 8011448:	f7ff f872 	bl	8010530 <memp_free>
 801144c:	e00d      	b.n	801146a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801144e:	7bfb      	ldrb	r3, [r7, #15]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d103      	bne.n	801145c <pbuf_free+0xd4>
          mem_free(p);
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f7fe fcad 	bl	800fdb4 <mem_free>
 801145a:	e006      	b.n	801146a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801145c:	4b0b      	ldr	r3, [pc, #44]	@ (801148c <pbuf_free+0x104>)
 801145e:	f240 320f 	movw	r2, #783	@ 0x30f
 8011462:	490f      	ldr	r1, [pc, #60]	@ (80114a0 <pbuf_free+0x118>)
 8011464:	480b      	ldr	r0, [pc, #44]	@ (8011494 <pbuf_free+0x10c>)
 8011466:	f017 ff5d 	bl	8029324 <iprintf>
        }
      }
      count++;
 801146a:	7ffb      	ldrb	r3, [r7, #31]
 801146c:	3301      	adds	r3, #1
 801146e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	607b      	str	r3, [r7, #4]
 8011474:	e001      	b.n	801147a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011476:	2300      	movs	r3, #0
 8011478:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d199      	bne.n	80113b4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011480:	7ffb      	ldrb	r3, [r7, #31]
}
 8011482:	4618      	mov	r0, r3
 8011484:	3720      	adds	r7, #32
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	0802cb54 	.word	0x0802cb54
 8011490:	0802ccb8 	.word	0x0802ccb8
 8011494:	0802cbb4 	.word	0x0802cbb4
 8011498:	0802cce4 	.word	0x0802cce4
 801149c:	0802ccfc 	.word	0x0802ccfc
 80114a0:	0802cd20 	.word	0x0802cd20

080114a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80114a4:	b480      	push	{r7}
 80114a6:	b085      	sub	sp, #20
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80114ac:	2300      	movs	r3, #0
 80114ae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80114b0:	e005      	b.n	80114be <pbuf_clen+0x1a>
    ++len;
 80114b2:	89fb      	ldrh	r3, [r7, #14]
 80114b4:	3301      	adds	r3, #1
 80114b6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d1f6      	bne.n	80114b2 <pbuf_clen+0xe>
  }
  return len;
 80114c4:	89fb      	ldrh	r3, [r7, #14]
}
 80114c6:	4618      	mov	r0, r3
 80114c8:	3714      	adds	r7, #20
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr
	...

080114d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b084      	sub	sp, #16
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d016      	beq.n	8011510 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80114e2:	f00a fb79 	bl	801bbd8 <sys_arch_protect>
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	7b9b      	ldrb	r3, [r3, #14]
 80114ec:	3301      	adds	r3, #1
 80114ee:	b2da      	uxtb	r2, r3
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	739a      	strb	r2, [r3, #14]
 80114f4:	68f8      	ldr	r0, [r7, #12]
 80114f6:	f00a fb7d 	bl	801bbf4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	7b9b      	ldrb	r3, [r3, #14]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d106      	bne.n	8011510 <pbuf_ref+0x3c>
 8011502:	4b05      	ldr	r3, [pc, #20]	@ (8011518 <pbuf_ref+0x44>)
 8011504:	f240 3242 	movw	r2, #834	@ 0x342
 8011508:	4904      	ldr	r1, [pc, #16]	@ (801151c <pbuf_ref+0x48>)
 801150a:	4805      	ldr	r0, [pc, #20]	@ (8011520 <pbuf_ref+0x4c>)
 801150c:	f017 ff0a 	bl	8029324 <iprintf>
  }
}
 8011510:	bf00      	nop
 8011512:	3710      	adds	r7, #16
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}
 8011518:	0802cb54 	.word	0x0802cb54
 801151c:	0802cd34 	.word	0x0802cd34
 8011520:	0802cbb4 	.word	0x0802cbb4

08011524 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b084      	sub	sp, #16
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d002      	beq.n	801153a <pbuf_cat+0x16>
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d107      	bne.n	801154a <pbuf_cat+0x26>
 801153a:	4b20      	ldr	r3, [pc, #128]	@ (80115bc <pbuf_cat+0x98>)
 801153c:	f240 3259 	movw	r2, #857	@ 0x359
 8011540:	491f      	ldr	r1, [pc, #124]	@ (80115c0 <pbuf_cat+0x9c>)
 8011542:	4820      	ldr	r0, [pc, #128]	@ (80115c4 <pbuf_cat+0xa0>)
 8011544:	f017 feee 	bl	8029324 <iprintf>
 8011548:	e034      	b.n	80115b4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	60fb      	str	r3, [r7, #12]
 801154e:	e00a      	b.n	8011566 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	891a      	ldrh	r2, [r3, #8]
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	891b      	ldrh	r3, [r3, #8]
 8011558:	4413      	add	r3, r2
 801155a:	b29a      	uxth	r2, r3
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	60fb      	str	r3, [r7, #12]
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d1f0      	bne.n	8011550 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	891a      	ldrh	r2, [r3, #8]
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	895b      	ldrh	r3, [r3, #10]
 8011576:	429a      	cmp	r2, r3
 8011578:	d006      	beq.n	8011588 <pbuf_cat+0x64>
 801157a:	4b10      	ldr	r3, [pc, #64]	@ (80115bc <pbuf_cat+0x98>)
 801157c:	f240 3262 	movw	r2, #866	@ 0x362
 8011580:	4911      	ldr	r1, [pc, #68]	@ (80115c8 <pbuf_cat+0xa4>)
 8011582:	4810      	ldr	r0, [pc, #64]	@ (80115c4 <pbuf_cat+0xa0>)
 8011584:	f017 fece 	bl	8029324 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d006      	beq.n	801159e <pbuf_cat+0x7a>
 8011590:	4b0a      	ldr	r3, [pc, #40]	@ (80115bc <pbuf_cat+0x98>)
 8011592:	f240 3263 	movw	r2, #867	@ 0x363
 8011596:	490d      	ldr	r1, [pc, #52]	@ (80115cc <pbuf_cat+0xa8>)
 8011598:	480a      	ldr	r0, [pc, #40]	@ (80115c4 <pbuf_cat+0xa0>)
 801159a:	f017 fec3 	bl	8029324 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	891a      	ldrh	r2, [r3, #8]
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	891b      	ldrh	r3, [r3, #8]
 80115a6:	4413      	add	r3, r2
 80115a8:	b29a      	uxth	r2, r3
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	683a      	ldr	r2, [r7, #0]
 80115b2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80115b4:	3710      	adds	r7, #16
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}
 80115ba:	bf00      	nop
 80115bc:	0802cb54 	.word	0x0802cb54
 80115c0:	0802cd48 	.word	0x0802cd48
 80115c4:	0802cbb4 	.word	0x0802cbb4
 80115c8:	0802cd80 	.word	0x0802cd80
 80115cc:	0802cdb0 	.word	0x0802cdb0

080115d0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b082      	sub	sp, #8
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
 80115d8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80115da:	6839      	ldr	r1, [r7, #0]
 80115dc:	6878      	ldr	r0, [r7, #4]
 80115de:	f7ff ffa1 	bl	8011524 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80115e2:	6838      	ldr	r0, [r7, #0]
 80115e4:	f7ff ff76 	bl	80114d4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80115e8:	bf00      	nop
 80115ea:	3708      	adds	r7, #8
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b086      	sub	sp, #24
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80115fa:	2300      	movs	r3, #0
 80115fc:	617b      	str	r3, [r7, #20]
 80115fe:	2300      	movs	r3, #0
 8011600:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d008      	beq.n	801161a <pbuf_copy+0x2a>
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d005      	beq.n	801161a <pbuf_copy+0x2a>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	891a      	ldrh	r2, [r3, #8]
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	891b      	ldrh	r3, [r3, #8]
 8011616:	429a      	cmp	r2, r3
 8011618:	d209      	bcs.n	801162e <pbuf_copy+0x3e>
 801161a:	4b57      	ldr	r3, [pc, #348]	@ (8011778 <pbuf_copy+0x188>)
 801161c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8011620:	4956      	ldr	r1, [pc, #344]	@ (801177c <pbuf_copy+0x18c>)
 8011622:	4857      	ldr	r0, [pc, #348]	@ (8011780 <pbuf_copy+0x190>)
 8011624:	f017 fe7e 	bl	8029324 <iprintf>
 8011628:	f06f 030f 	mvn.w	r3, #15
 801162c:	e09f      	b.n	801176e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	895b      	ldrh	r3, [r3, #10]
 8011632:	461a      	mov	r2, r3
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	1ad2      	subs	r2, r2, r3
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	895b      	ldrh	r3, [r3, #10]
 801163c:	4619      	mov	r1, r3
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	1acb      	subs	r3, r1, r3
 8011642:	429a      	cmp	r2, r3
 8011644:	d306      	bcc.n	8011654 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	895b      	ldrh	r3, [r3, #10]
 801164a:	461a      	mov	r2, r3
 801164c:	693b      	ldr	r3, [r7, #16]
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	60fb      	str	r3, [r7, #12]
 8011652:	e005      	b.n	8011660 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	895b      	ldrh	r3, [r3, #10]
 8011658:	461a      	mov	r2, r3
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	1ad3      	subs	r3, r2, r3
 801165e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	685a      	ldr	r2, [r3, #4]
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	18d0      	adds	r0, r2, r3
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	685a      	ldr	r2, [r3, #4]
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	4413      	add	r3, r2
 8011670:	68fa      	ldr	r2, [r7, #12]
 8011672:	4619      	mov	r1, r3
 8011674:	f018 f8f9 	bl	802986a <memcpy>
    offset_to += len;
 8011678:	697a      	ldr	r2, [r7, #20]
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	4413      	add	r3, r2
 801167e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011680:	693a      	ldr	r2, [r7, #16]
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	4413      	add	r3, r2
 8011686:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	895b      	ldrh	r3, [r3, #10]
 801168c:	461a      	mov	r2, r3
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	4293      	cmp	r3, r2
 8011692:	d906      	bls.n	80116a2 <pbuf_copy+0xb2>
 8011694:	4b38      	ldr	r3, [pc, #224]	@ (8011778 <pbuf_copy+0x188>)
 8011696:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801169a:	493a      	ldr	r1, [pc, #232]	@ (8011784 <pbuf_copy+0x194>)
 801169c:	4838      	ldr	r0, [pc, #224]	@ (8011780 <pbuf_copy+0x190>)
 801169e:	f017 fe41 	bl	8029324 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	895b      	ldrh	r3, [r3, #10]
 80116a6:	461a      	mov	r2, r3
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	4293      	cmp	r3, r2
 80116ac:	d906      	bls.n	80116bc <pbuf_copy+0xcc>
 80116ae:	4b32      	ldr	r3, [pc, #200]	@ (8011778 <pbuf_copy+0x188>)
 80116b0:	f240 32da 	movw	r2, #986	@ 0x3da
 80116b4:	4934      	ldr	r1, [pc, #208]	@ (8011788 <pbuf_copy+0x198>)
 80116b6:	4832      	ldr	r0, [pc, #200]	@ (8011780 <pbuf_copy+0x190>)
 80116b8:	f017 fe34 	bl	8029324 <iprintf>
    if (offset_from >= p_from->len) {
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	895b      	ldrh	r3, [r3, #10]
 80116c0:	461a      	mov	r2, r3
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d304      	bcc.n	80116d2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80116c8:	2300      	movs	r3, #0
 80116ca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	895b      	ldrh	r3, [r3, #10]
 80116d6:	461a      	mov	r2, r3
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	4293      	cmp	r3, r2
 80116dc:	d114      	bne.n	8011708 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80116de:	2300      	movs	r3, #0
 80116e0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d10c      	bne.n	8011708 <pbuf_copy+0x118>
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d009      	beq.n	8011708 <pbuf_copy+0x118>
 80116f4:	4b20      	ldr	r3, [pc, #128]	@ (8011778 <pbuf_copy+0x188>)
 80116f6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80116fa:	4924      	ldr	r1, [pc, #144]	@ (801178c <pbuf_copy+0x19c>)
 80116fc:	4820      	ldr	r0, [pc, #128]	@ (8011780 <pbuf_copy+0x190>)
 80116fe:	f017 fe11 	bl	8029324 <iprintf>
 8011702:	f06f 030f 	mvn.w	r3, #15
 8011706:	e032      	b.n	801176e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d013      	beq.n	8011736 <pbuf_copy+0x146>
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	895a      	ldrh	r2, [r3, #10]
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	891b      	ldrh	r3, [r3, #8]
 8011716:	429a      	cmp	r2, r3
 8011718:	d10d      	bne.n	8011736 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d009      	beq.n	8011736 <pbuf_copy+0x146>
 8011722:	4b15      	ldr	r3, [pc, #84]	@ (8011778 <pbuf_copy+0x188>)
 8011724:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8011728:	4919      	ldr	r1, [pc, #100]	@ (8011790 <pbuf_copy+0x1a0>)
 801172a:	4815      	ldr	r0, [pc, #84]	@ (8011780 <pbuf_copy+0x190>)
 801172c:	f017 fdfa 	bl	8029324 <iprintf>
 8011730:	f06f 0305 	mvn.w	r3, #5
 8011734:	e01b      	b.n	801176e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d013      	beq.n	8011764 <pbuf_copy+0x174>
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	895a      	ldrh	r2, [r3, #10]
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	891b      	ldrh	r3, [r3, #8]
 8011744:	429a      	cmp	r2, r3
 8011746:	d10d      	bne.n	8011764 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d009      	beq.n	8011764 <pbuf_copy+0x174>
 8011750:	4b09      	ldr	r3, [pc, #36]	@ (8011778 <pbuf_copy+0x188>)
 8011752:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8011756:	490e      	ldr	r1, [pc, #56]	@ (8011790 <pbuf_copy+0x1a0>)
 8011758:	4809      	ldr	r0, [pc, #36]	@ (8011780 <pbuf_copy+0x190>)
 801175a:	f017 fde3 	bl	8029324 <iprintf>
 801175e:	f06f 0305 	mvn.w	r3, #5
 8011762:	e004      	b.n	801176e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	2b00      	cmp	r3, #0
 8011768:	f47f af61 	bne.w	801162e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801176c:	2300      	movs	r3, #0
}
 801176e:	4618      	mov	r0, r3
 8011770:	3718      	adds	r7, #24
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}
 8011776:	bf00      	nop
 8011778:	0802cb54 	.word	0x0802cb54
 801177c:	0802cdfc 	.word	0x0802cdfc
 8011780:	0802cbb4 	.word	0x0802cbb4
 8011784:	0802ce2c 	.word	0x0802ce2c
 8011788:	0802ce44 	.word	0x0802ce44
 801178c:	0802ce60 	.word	0x0802ce60
 8011790:	0802ce70 	.word	0x0802ce70

08011794 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b088      	sub	sp, #32
 8011798:	af00      	add	r7, sp, #0
 801179a:	60f8      	str	r0, [r7, #12]
 801179c:	60b9      	str	r1, [r7, #8]
 801179e:	4611      	mov	r1, r2
 80117a0:	461a      	mov	r2, r3
 80117a2:	460b      	mov	r3, r1
 80117a4:	80fb      	strh	r3, [r7, #6]
 80117a6:	4613      	mov	r3, r2
 80117a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80117aa:	2300      	movs	r3, #0
 80117ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80117ae:	2300      	movs	r3, #0
 80117b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d108      	bne.n	80117ca <pbuf_copy_partial+0x36>
 80117b8:	4b2b      	ldr	r3, [pc, #172]	@ (8011868 <pbuf_copy_partial+0xd4>)
 80117ba:	f240 420a 	movw	r2, #1034	@ 0x40a
 80117be:	492b      	ldr	r1, [pc, #172]	@ (801186c <pbuf_copy_partial+0xd8>)
 80117c0:	482b      	ldr	r0, [pc, #172]	@ (8011870 <pbuf_copy_partial+0xdc>)
 80117c2:	f017 fdaf 	bl	8029324 <iprintf>
 80117c6:	2300      	movs	r3, #0
 80117c8:	e04a      	b.n	8011860 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d108      	bne.n	80117e2 <pbuf_copy_partial+0x4e>
 80117d0:	4b25      	ldr	r3, [pc, #148]	@ (8011868 <pbuf_copy_partial+0xd4>)
 80117d2:	f240 420b 	movw	r2, #1035	@ 0x40b
 80117d6:	4927      	ldr	r1, [pc, #156]	@ (8011874 <pbuf_copy_partial+0xe0>)
 80117d8:	4825      	ldr	r0, [pc, #148]	@ (8011870 <pbuf_copy_partial+0xdc>)
 80117da:	f017 fda3 	bl	8029324 <iprintf>
 80117de:	2300      	movs	r3, #0
 80117e0:	e03e      	b.n	8011860 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	61fb      	str	r3, [r7, #28]
 80117e6:	e034      	b.n	8011852 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80117e8:	88bb      	ldrh	r3, [r7, #4]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00a      	beq.n	8011804 <pbuf_copy_partial+0x70>
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	895b      	ldrh	r3, [r3, #10]
 80117f2:	88ba      	ldrh	r2, [r7, #4]
 80117f4:	429a      	cmp	r2, r3
 80117f6:	d305      	bcc.n	8011804 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80117f8:	69fb      	ldr	r3, [r7, #28]
 80117fa:	895b      	ldrh	r3, [r3, #10]
 80117fc:	88ba      	ldrh	r2, [r7, #4]
 80117fe:	1ad3      	subs	r3, r2, r3
 8011800:	80bb      	strh	r3, [r7, #4]
 8011802:	e023      	b.n	801184c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	895a      	ldrh	r2, [r3, #10]
 8011808:	88bb      	ldrh	r3, [r7, #4]
 801180a:	1ad3      	subs	r3, r2, r3
 801180c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801180e:	8b3a      	ldrh	r2, [r7, #24]
 8011810:	88fb      	ldrh	r3, [r7, #6]
 8011812:	429a      	cmp	r2, r3
 8011814:	d901      	bls.n	801181a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011816:	88fb      	ldrh	r3, [r7, #6]
 8011818:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801181a:	8b7b      	ldrh	r3, [r7, #26]
 801181c:	68ba      	ldr	r2, [r7, #8]
 801181e:	18d0      	adds	r0, r2, r3
 8011820:	69fb      	ldr	r3, [r7, #28]
 8011822:	685a      	ldr	r2, [r3, #4]
 8011824:	88bb      	ldrh	r3, [r7, #4]
 8011826:	4413      	add	r3, r2
 8011828:	8b3a      	ldrh	r2, [r7, #24]
 801182a:	4619      	mov	r1, r3
 801182c:	f018 f81d 	bl	802986a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011830:	8afa      	ldrh	r2, [r7, #22]
 8011832:	8b3b      	ldrh	r3, [r7, #24]
 8011834:	4413      	add	r3, r2
 8011836:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011838:	8b7a      	ldrh	r2, [r7, #26]
 801183a:	8b3b      	ldrh	r3, [r7, #24]
 801183c:	4413      	add	r3, r2
 801183e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011840:	88fa      	ldrh	r2, [r7, #6]
 8011842:	8b3b      	ldrh	r3, [r7, #24]
 8011844:	1ad3      	subs	r3, r2, r3
 8011846:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011848:	2300      	movs	r3, #0
 801184a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801184c:	69fb      	ldr	r3, [r7, #28]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	61fb      	str	r3, [r7, #28]
 8011852:	88fb      	ldrh	r3, [r7, #6]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d002      	beq.n	801185e <pbuf_copy_partial+0xca>
 8011858:	69fb      	ldr	r3, [r7, #28]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d1c4      	bne.n	80117e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801185e:	8afb      	ldrh	r3, [r7, #22]
}
 8011860:	4618      	mov	r0, r3
 8011862:	3720      	adds	r7, #32
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	0802cb54 	.word	0x0802cb54
 801186c:	0802ce9c 	.word	0x0802ce9c
 8011870:	0802cbb4 	.word	0x0802cbb4
 8011874:	0802cebc 	.word	0x0802cebc

08011878 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	af00      	add	r7, sp, #0
 801187e:	4603      	mov	r3, r0
 8011880:	603a      	str	r2, [r7, #0]
 8011882:	71fb      	strb	r3, [r7, #7]
 8011884:	460b      	mov	r3, r1
 8011886:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	8919      	ldrh	r1, [r3, #8]
 801188c:	88ba      	ldrh	r2, [r7, #4]
 801188e:	79fb      	ldrb	r3, [r7, #7]
 8011890:	4618      	mov	r0, r3
 8011892:	f7ff fa63 	bl	8010d5c <pbuf_alloc>
 8011896:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d101      	bne.n	80118a2 <pbuf_clone+0x2a>
    return NULL;
 801189e:	2300      	movs	r3, #0
 80118a0:	e011      	b.n	80118c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80118a2:	6839      	ldr	r1, [r7, #0]
 80118a4:	68f8      	ldr	r0, [r7, #12]
 80118a6:	f7ff fea3 	bl	80115f0 <pbuf_copy>
 80118aa:	4603      	mov	r3, r0
 80118ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80118ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d006      	beq.n	80118c4 <pbuf_clone+0x4c>
 80118b6:	4b06      	ldr	r3, [pc, #24]	@ (80118d0 <pbuf_clone+0x58>)
 80118b8:	f240 5224 	movw	r2, #1316	@ 0x524
 80118bc:	4905      	ldr	r1, [pc, #20]	@ (80118d4 <pbuf_clone+0x5c>)
 80118be:	4806      	ldr	r0, [pc, #24]	@ (80118d8 <pbuf_clone+0x60>)
 80118c0:	f017 fd30 	bl	8029324 <iprintf>
  return q;
 80118c4:	68fb      	ldr	r3, [r7, #12]
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3710      	adds	r7, #16
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	0802cb54 	.word	0x0802cb54
 80118d4:	0802cfc8 	.word	0x0802cfc8
 80118d8:	0802cbb4 	.word	0x0802cbb4

080118dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80118e0:	f016 fe3c 	bl	802855c <rand>
 80118e4:	4603      	mov	r3, r0
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80118f2:	b29a      	uxth	r2, r3
 80118f4:	4b01      	ldr	r3, [pc, #4]	@ (80118fc <tcp_init+0x20>)
 80118f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80118f8:	bf00      	nop
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	2000002c 	.word	0x2000002c

08011900 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b082      	sub	sp, #8
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	7d1b      	ldrb	r3, [r3, #20]
 801190c:	2b01      	cmp	r3, #1
 801190e:	d105      	bne.n	801191c <tcp_free+0x1c>
 8011910:	4b06      	ldr	r3, [pc, #24]	@ (801192c <tcp_free+0x2c>)
 8011912:	22d4      	movs	r2, #212	@ 0xd4
 8011914:	4906      	ldr	r1, [pc, #24]	@ (8011930 <tcp_free+0x30>)
 8011916:	4807      	ldr	r0, [pc, #28]	@ (8011934 <tcp_free+0x34>)
 8011918:	f017 fd04 	bl	8029324 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801191c:	6879      	ldr	r1, [r7, #4]
 801191e:	2001      	movs	r0, #1
 8011920:	f7fe fe06 	bl	8010530 <memp_free>
}
 8011924:	bf00      	nop
 8011926:	3708      	adds	r7, #8
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}
 801192c:	0802d054 	.word	0x0802d054
 8011930:	0802d084 	.word	0x0802d084
 8011934:	0802d098 	.word	0x0802d098

08011938 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	7d1b      	ldrb	r3, [r3, #20]
 8011944:	2b01      	cmp	r3, #1
 8011946:	d105      	bne.n	8011954 <tcp_free_listen+0x1c>
 8011948:	4b06      	ldr	r3, [pc, #24]	@ (8011964 <tcp_free_listen+0x2c>)
 801194a:	22df      	movs	r2, #223	@ 0xdf
 801194c:	4906      	ldr	r1, [pc, #24]	@ (8011968 <tcp_free_listen+0x30>)
 801194e:	4807      	ldr	r0, [pc, #28]	@ (801196c <tcp_free_listen+0x34>)
 8011950:	f017 fce8 	bl	8029324 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011954:	6879      	ldr	r1, [r7, #4]
 8011956:	2002      	movs	r0, #2
 8011958:	f7fe fdea 	bl	8010530 <memp_free>
}
 801195c:	bf00      	nop
 801195e:	3708      	adds	r7, #8
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}
 8011964:	0802d054 	.word	0x0802d054
 8011968:	0802d0c0 	.word	0x0802d0c0
 801196c:	0802d098 	.word	0x0802d098

08011970 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011974:	f000 fff8 	bl	8012968 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011978:	4b07      	ldr	r3, [pc, #28]	@ (8011998 <tcp_tmr+0x28>)
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	3301      	adds	r3, #1
 801197e:	b2da      	uxtb	r2, r3
 8011980:	4b05      	ldr	r3, [pc, #20]	@ (8011998 <tcp_tmr+0x28>)
 8011982:	701a      	strb	r2, [r3, #0]
 8011984:	4b04      	ldr	r3, [pc, #16]	@ (8011998 <tcp_tmr+0x28>)
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	f003 0301 	and.w	r3, r3, #1
 801198c:	2b00      	cmp	r3, #0
 801198e:	d001      	beq.n	8011994 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011990:	f000 fca8 	bl	80122e4 <tcp_slowtmr>
  }
}
 8011994:	bf00      	nop
 8011996:	bd80      	pop	{r7, pc}
 8011998:	200425c9 	.word	0x200425c9

0801199c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b084      	sub	sp, #16
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d105      	bne.n	80119b8 <tcp_remove_listener+0x1c>
 80119ac:	4b0d      	ldr	r3, [pc, #52]	@ (80119e4 <tcp_remove_listener+0x48>)
 80119ae:	22ff      	movs	r2, #255	@ 0xff
 80119b0:	490d      	ldr	r1, [pc, #52]	@ (80119e8 <tcp_remove_listener+0x4c>)
 80119b2:	480e      	ldr	r0, [pc, #56]	@ (80119ec <tcp_remove_listener+0x50>)
 80119b4:	f017 fcb6 	bl	8029324 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	60fb      	str	r3, [r7, #12]
 80119bc:	e00a      	b.n	80119d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119c2:	683a      	ldr	r2, [r7, #0]
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d102      	bne.n	80119ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	2200      	movs	r2, #0
 80119cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	68db      	ldr	r3, [r3, #12]
 80119d2:	60fb      	str	r3, [r7, #12]
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d1f1      	bne.n	80119be <tcp_remove_listener+0x22>
    }
  }
}
 80119da:	bf00      	nop
 80119dc:	bf00      	nop
 80119de:	3710      	adds	r7, #16
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}
 80119e4:	0802d054 	.word	0x0802d054
 80119e8:	0802d0dc 	.word	0x0802d0dc
 80119ec:	0802d098 	.word	0x0802d098

080119f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b084      	sub	sp, #16
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d106      	bne.n	8011a0c <tcp_listen_closed+0x1c>
 80119fe:	4b14      	ldr	r3, [pc, #80]	@ (8011a50 <tcp_listen_closed+0x60>)
 8011a00:	f240 1211 	movw	r2, #273	@ 0x111
 8011a04:	4913      	ldr	r1, [pc, #76]	@ (8011a54 <tcp_listen_closed+0x64>)
 8011a06:	4814      	ldr	r0, [pc, #80]	@ (8011a58 <tcp_listen_closed+0x68>)
 8011a08:	f017 fc8c 	bl	8029324 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	7d1b      	ldrb	r3, [r3, #20]
 8011a10:	2b01      	cmp	r3, #1
 8011a12:	d006      	beq.n	8011a22 <tcp_listen_closed+0x32>
 8011a14:	4b0e      	ldr	r3, [pc, #56]	@ (8011a50 <tcp_listen_closed+0x60>)
 8011a16:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8011a1a:	4910      	ldr	r1, [pc, #64]	@ (8011a5c <tcp_listen_closed+0x6c>)
 8011a1c:	480e      	ldr	r0, [pc, #56]	@ (8011a58 <tcp_listen_closed+0x68>)
 8011a1e:	f017 fc81 	bl	8029324 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011a22:	2301      	movs	r3, #1
 8011a24:	60fb      	str	r3, [r7, #12]
 8011a26:	e00b      	b.n	8011a40 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011a28:	4a0d      	ldr	r2, [pc, #52]	@ (8011a60 <tcp_listen_closed+0x70>)
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	6879      	ldr	r1, [r7, #4]
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7ff ffb1 	bl	801199c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	60fb      	str	r3, [r7, #12]
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2b03      	cmp	r3, #3
 8011a44:	d9f0      	bls.n	8011a28 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011a46:	bf00      	nop
 8011a48:	bf00      	nop
 8011a4a:	3710      	adds	r7, #16
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}
 8011a50:	0802d054 	.word	0x0802d054
 8011a54:	0802d104 	.word	0x0802d104
 8011a58:	0802d098 	.word	0x0802d098
 8011a5c:	0802d110 	.word	0x0802d110
 8011a60:	0802f4dc 	.word	0x0802f4dc

08011a64 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011a64:	b5b0      	push	{r4, r5, r7, lr}
 8011a66:	b088      	sub	sp, #32
 8011a68:	af04      	add	r7, sp, #16
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	460b      	mov	r3, r1
 8011a6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d106      	bne.n	8011a84 <tcp_close_shutdown+0x20>
 8011a76:	4b63      	ldr	r3, [pc, #396]	@ (8011c04 <tcp_close_shutdown+0x1a0>)
 8011a78:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8011a7c:	4962      	ldr	r1, [pc, #392]	@ (8011c08 <tcp_close_shutdown+0x1a4>)
 8011a7e:	4863      	ldr	r0, [pc, #396]	@ (8011c0c <tcp_close_shutdown+0x1a8>)
 8011a80:	f017 fc50 	bl	8029324 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011a84:	78fb      	ldrb	r3, [r7, #3]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d066      	beq.n	8011b58 <tcp_close_shutdown+0xf4>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	7d1b      	ldrb	r3, [r3, #20]
 8011a8e:	2b04      	cmp	r3, #4
 8011a90:	d003      	beq.n	8011a9a <tcp_close_shutdown+0x36>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	7d1b      	ldrb	r3, [r3, #20]
 8011a96:	2b07      	cmp	r3, #7
 8011a98:	d15e      	bne.n	8011b58 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d104      	bne.n	8011aac <tcp_close_shutdown+0x48>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011aa6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011aaa:	d055      	beq.n	8011b58 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	8b5b      	ldrh	r3, [r3, #26]
 8011ab0:	f003 0310 	and.w	r3, r3, #16
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d106      	bne.n	8011ac6 <tcp_close_shutdown+0x62>
 8011ab8:	4b52      	ldr	r3, [pc, #328]	@ (8011c04 <tcp_close_shutdown+0x1a0>)
 8011aba:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8011abe:	4954      	ldr	r1, [pc, #336]	@ (8011c10 <tcp_close_shutdown+0x1ac>)
 8011ac0:	4852      	ldr	r0, [pc, #328]	@ (8011c0c <tcp_close_shutdown+0x1a8>)
 8011ac2:	f017 fc2f 	bl	8029324 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011ace:	687d      	ldr	r5, [r7, #4]
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	3304      	adds	r3, #4
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	8ad2      	ldrh	r2, [r2, #22]
 8011ad8:	6879      	ldr	r1, [r7, #4]
 8011ada:	8b09      	ldrh	r1, [r1, #24]
 8011adc:	9102      	str	r1, [sp, #8]
 8011ade:	9201      	str	r2, [sp, #4]
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	462b      	mov	r3, r5
 8011ae4:	4622      	mov	r2, r4
 8011ae6:	4601      	mov	r1, r0
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f005 fd07 	bl	80174fc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f001 faea 	bl	80130c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011af4:	4b47      	ldr	r3, [pc, #284]	@ (8011c14 <tcp_close_shutdown+0x1b0>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	687a      	ldr	r2, [r7, #4]
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d105      	bne.n	8011b0a <tcp_close_shutdown+0xa6>
 8011afe:	4b45      	ldr	r3, [pc, #276]	@ (8011c14 <tcp_close_shutdown+0x1b0>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	4a43      	ldr	r2, [pc, #268]	@ (8011c14 <tcp_close_shutdown+0x1b0>)
 8011b06:	6013      	str	r3, [r2, #0]
 8011b08:	e013      	b.n	8011b32 <tcp_close_shutdown+0xce>
 8011b0a:	4b42      	ldr	r3, [pc, #264]	@ (8011c14 <tcp_close_shutdown+0x1b0>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	60fb      	str	r3, [r7, #12]
 8011b10:	e00c      	b.n	8011b2c <tcp_close_shutdown+0xc8>
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	68db      	ldr	r3, [r3, #12]
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d104      	bne.n	8011b26 <tcp_close_shutdown+0xc2>
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	68da      	ldr	r2, [r3, #12]
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	60da      	str	r2, [r3, #12]
 8011b24:	e005      	b.n	8011b32 <tcp_close_shutdown+0xce>
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	60fb      	str	r3, [r7, #12]
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d1ef      	bne.n	8011b12 <tcp_close_shutdown+0xae>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2200      	movs	r2, #0
 8011b36:	60da      	str	r2, [r3, #12]
 8011b38:	4b37      	ldr	r3, [pc, #220]	@ (8011c18 <tcp_close_shutdown+0x1b4>)
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011b3e:	4b37      	ldr	r3, [pc, #220]	@ (8011c1c <tcp_close_shutdown+0x1b8>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	687a      	ldr	r2, [r7, #4]
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d102      	bne.n	8011b4e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011b48:	f003 ff7e 	bl	8015a48 <tcp_trigger_input_pcb_close>
 8011b4c:	e002      	b.n	8011b54 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f7ff fed6 	bl	8011900 <tcp_free>
      }
      return ERR_OK;
 8011b54:	2300      	movs	r3, #0
 8011b56:	e050      	b.n	8011bfa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	7d1b      	ldrb	r3, [r3, #20]
 8011b5c:	2b02      	cmp	r3, #2
 8011b5e:	d03b      	beq.n	8011bd8 <tcp_close_shutdown+0x174>
 8011b60:	2b02      	cmp	r3, #2
 8011b62:	dc44      	bgt.n	8011bee <tcp_close_shutdown+0x18a>
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d002      	beq.n	8011b6e <tcp_close_shutdown+0x10a>
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d02a      	beq.n	8011bc2 <tcp_close_shutdown+0x15e>
 8011b6c:	e03f      	b.n	8011bee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	8adb      	ldrh	r3, [r3, #22]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d021      	beq.n	8011bba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011b76:	4b2a      	ldr	r3, [pc, #168]	@ (8011c20 <tcp_close_shutdown+0x1bc>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	687a      	ldr	r2, [r7, #4]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d105      	bne.n	8011b8c <tcp_close_shutdown+0x128>
 8011b80:	4b27      	ldr	r3, [pc, #156]	@ (8011c20 <tcp_close_shutdown+0x1bc>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	68db      	ldr	r3, [r3, #12]
 8011b86:	4a26      	ldr	r2, [pc, #152]	@ (8011c20 <tcp_close_shutdown+0x1bc>)
 8011b88:	6013      	str	r3, [r2, #0]
 8011b8a:	e013      	b.n	8011bb4 <tcp_close_shutdown+0x150>
 8011b8c:	4b24      	ldr	r3, [pc, #144]	@ (8011c20 <tcp_close_shutdown+0x1bc>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	60bb      	str	r3, [r7, #8]
 8011b92:	e00c      	b.n	8011bae <tcp_close_shutdown+0x14a>
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	687a      	ldr	r2, [r7, #4]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d104      	bne.n	8011ba8 <tcp_close_shutdown+0x144>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	68da      	ldr	r2, [r3, #12]
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	60da      	str	r2, [r3, #12]
 8011ba6:	e005      	b.n	8011bb4 <tcp_close_shutdown+0x150>
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	68db      	ldr	r3, [r3, #12]
 8011bac:	60bb      	str	r3, [r7, #8]
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d1ef      	bne.n	8011b94 <tcp_close_shutdown+0x130>
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f7ff fea0 	bl	8011900 <tcp_free>
      break;
 8011bc0:	e01a      	b.n	8011bf8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f7ff ff14 	bl	80119f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011bc8:	6879      	ldr	r1, [r7, #4]
 8011bca:	4816      	ldr	r0, [pc, #88]	@ (8011c24 <tcp_close_shutdown+0x1c0>)
 8011bcc:	f001 facc 	bl	8013168 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f7ff feb1 	bl	8011938 <tcp_free_listen>
      break;
 8011bd6:	e00f      	b.n	8011bf8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011bd8:	6879      	ldr	r1, [r7, #4]
 8011bda:	480e      	ldr	r0, [pc, #56]	@ (8011c14 <tcp_close_shutdown+0x1b0>)
 8011bdc:	f001 fac4 	bl	8013168 <tcp_pcb_remove>
 8011be0:	4b0d      	ldr	r3, [pc, #52]	@ (8011c18 <tcp_close_shutdown+0x1b4>)
 8011be2:	2201      	movs	r2, #1
 8011be4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f7ff fe8a 	bl	8011900 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011bec:	e004      	b.n	8011bf8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f000 f81a 	bl	8011c28 <tcp_close_shutdown_fin>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	e000      	b.n	8011bfa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011bf8:	2300      	movs	r3, #0
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3710      	adds	r7, #16
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bdb0      	pop	{r4, r5, r7, pc}
 8011c02:	bf00      	nop
 8011c04:	0802d054 	.word	0x0802d054
 8011c08:	0802d128 	.word	0x0802d128
 8011c0c:	0802d098 	.word	0x0802d098
 8011c10:	0802d148 	.word	0x0802d148
 8011c14:	200425c0 	.word	0x200425c0
 8011c18:	200425c8 	.word	0x200425c8
 8011c1c:	20042600 	.word	0x20042600
 8011c20:	200425b8 	.word	0x200425b8
 8011c24:	200425bc 	.word	0x200425bc

08011c28 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b084      	sub	sp, #16
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d106      	bne.n	8011c44 <tcp_close_shutdown_fin+0x1c>
 8011c36:	4b2e      	ldr	r3, [pc, #184]	@ (8011cf0 <tcp_close_shutdown_fin+0xc8>)
 8011c38:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8011c3c:	492d      	ldr	r1, [pc, #180]	@ (8011cf4 <tcp_close_shutdown_fin+0xcc>)
 8011c3e:	482e      	ldr	r0, [pc, #184]	@ (8011cf8 <tcp_close_shutdown_fin+0xd0>)
 8011c40:	f017 fb70 	bl	8029324 <iprintf>

  switch (pcb->state) {
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	7d1b      	ldrb	r3, [r3, #20]
 8011c48:	2b07      	cmp	r3, #7
 8011c4a:	d020      	beq.n	8011c8e <tcp_close_shutdown_fin+0x66>
 8011c4c:	2b07      	cmp	r3, #7
 8011c4e:	dc2b      	bgt.n	8011ca8 <tcp_close_shutdown_fin+0x80>
 8011c50:	2b03      	cmp	r3, #3
 8011c52:	d002      	beq.n	8011c5a <tcp_close_shutdown_fin+0x32>
 8011c54:	2b04      	cmp	r3, #4
 8011c56:	d00d      	beq.n	8011c74 <tcp_close_shutdown_fin+0x4c>
 8011c58:	e026      	b.n	8011ca8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f004 fd5c 	bl	8016718 <tcp_send_fin>
 8011c60:	4603      	mov	r3, r0
 8011c62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d11f      	bne.n	8011cac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2205      	movs	r2, #5
 8011c70:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011c72:	e01b      	b.n	8011cac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f004 fd4f 	bl	8016718 <tcp_send_fin>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d114      	bne.n	8011cb0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	2205      	movs	r2, #5
 8011c8a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011c8c:	e010      	b.n	8011cb0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f004 fd42 	bl	8016718 <tcp_send_fin>
 8011c94:	4603      	mov	r3, r0
 8011c96:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d109      	bne.n	8011cb4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2209      	movs	r2, #9
 8011ca4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011ca6:	e005      	b.n	8011cb4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	e01c      	b.n	8011ce6 <tcp_close_shutdown_fin+0xbe>
      break;
 8011cac:	bf00      	nop
 8011cae:	e002      	b.n	8011cb6 <tcp_close_shutdown_fin+0x8e>
      break;
 8011cb0:	bf00      	nop
 8011cb2:	e000      	b.n	8011cb6 <tcp_close_shutdown_fin+0x8e>
      break;
 8011cb4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d103      	bne.n	8011cc6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f004 fe68 	bl	8016994 <tcp_output>
 8011cc4:	e00d      	b.n	8011ce2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011cce:	d108      	bne.n	8011ce2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	8b5b      	ldrh	r3, [r3, #26]
 8011cd4:	f043 0308 	orr.w	r3, r3, #8
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	e001      	b.n	8011ce6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3710      	adds	r7, #16
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
 8011cee:	bf00      	nop
 8011cf0:	0802d054 	.word	0x0802d054
 8011cf4:	0802d104 	.word	0x0802d104
 8011cf8:	0802d098 	.word	0x0802d098

08011cfc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d109      	bne.n	8011d1e <tcp_close+0x22>
 8011d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8011d48 <tcp_close+0x4c>)
 8011d0c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8011d10:	490e      	ldr	r1, [pc, #56]	@ (8011d4c <tcp_close+0x50>)
 8011d12:	480f      	ldr	r0, [pc, #60]	@ (8011d50 <tcp_close+0x54>)
 8011d14:	f017 fb06 	bl	8029324 <iprintf>
 8011d18:	f06f 030f 	mvn.w	r3, #15
 8011d1c:	e00f      	b.n	8011d3e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	7d1b      	ldrb	r3, [r3, #20]
 8011d22:	2b01      	cmp	r3, #1
 8011d24:	d006      	beq.n	8011d34 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	8b5b      	ldrh	r3, [r3, #26]
 8011d2a:	f043 0310 	orr.w	r3, r3, #16
 8011d2e:	b29a      	uxth	r2, r3
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011d34:	2101      	movs	r1, #1
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f7ff fe94 	bl	8011a64 <tcp_close_shutdown>
 8011d3c:	4603      	mov	r3, r0
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3708      	adds	r7, #8
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}
 8011d46:	bf00      	nop
 8011d48:	0802d054 	.word	0x0802d054
 8011d4c:	0802d164 	.word	0x0802d164
 8011d50:	0802d098 	.word	0x0802d098

08011d54 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b084      	sub	sp, #16
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	60f8      	str	r0, [r7, #12]
 8011d5c:	60b9      	str	r1, [r7, #8]
 8011d5e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d109      	bne.n	8011d7a <tcp_shutdown+0x26>
 8011d66:	4b26      	ldr	r3, [pc, #152]	@ (8011e00 <tcp_shutdown+0xac>)
 8011d68:	f240 2207 	movw	r2, #519	@ 0x207
 8011d6c:	4925      	ldr	r1, [pc, #148]	@ (8011e04 <tcp_shutdown+0xb0>)
 8011d6e:	4826      	ldr	r0, [pc, #152]	@ (8011e08 <tcp_shutdown+0xb4>)
 8011d70:	f017 fad8 	bl	8029324 <iprintf>
 8011d74:	f06f 030f 	mvn.w	r3, #15
 8011d78:	e03d      	b.n	8011df6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	7d1b      	ldrb	r3, [r3, #20]
 8011d7e:	2b01      	cmp	r3, #1
 8011d80:	d102      	bne.n	8011d88 <tcp_shutdown+0x34>
    return ERR_CONN;
 8011d82:	f06f 030a 	mvn.w	r3, #10
 8011d86:	e036      	b.n	8011df6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d01b      	beq.n	8011dc6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	8b5b      	ldrh	r3, [r3, #26]
 8011d92:	f043 0310 	orr.w	r3, r3, #16
 8011d96:	b29a      	uxth	r2, r3
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d005      	beq.n	8011dae <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011da2:	2101      	movs	r1, #1
 8011da4:	68f8      	ldr	r0, [r7, #12]
 8011da6:	f7ff fe5d 	bl	8011a64 <tcp_close_shutdown>
 8011daa:	4603      	mov	r3, r0
 8011dac:	e023      	b.n	8011df6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d007      	beq.n	8011dc6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7ff fae4 	bl	8011388 <pbuf_free>
      pcb->refused_data = NULL;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d013      	beq.n	8011df4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	7d1b      	ldrb	r3, [r3, #20]
 8011dd0:	2b04      	cmp	r3, #4
 8011dd2:	dc02      	bgt.n	8011dda <tcp_shutdown+0x86>
 8011dd4:	2b03      	cmp	r3, #3
 8011dd6:	da02      	bge.n	8011dde <tcp_shutdown+0x8a>
 8011dd8:	e009      	b.n	8011dee <tcp_shutdown+0x9a>
 8011dda:	2b07      	cmp	r3, #7
 8011ddc:	d107      	bne.n	8011dee <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	b2db      	uxtb	r3, r3
 8011de2:	4619      	mov	r1, r3
 8011de4:	68f8      	ldr	r0, [r7, #12]
 8011de6:	f7ff fe3d 	bl	8011a64 <tcp_close_shutdown>
 8011dea:	4603      	mov	r3, r0
 8011dec:	e003      	b.n	8011df6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8011dee:	f06f 030a 	mvn.w	r3, #10
 8011df2:	e000      	b.n	8011df6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011df4:	2300      	movs	r3, #0
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3710      	adds	r7, #16
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	0802d054 	.word	0x0802d054
 8011e04:	0802d17c 	.word	0x0802d17c
 8011e08:	0802d098 	.word	0x0802d098

08011e0c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b08e      	sub	sp, #56	@ 0x38
 8011e10:	af04      	add	r7, sp, #16
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d107      	bne.n	8011e2c <tcp_abandon+0x20>
 8011e1c:	4b52      	ldr	r3, [pc, #328]	@ (8011f68 <tcp_abandon+0x15c>)
 8011e1e:	f240 223d 	movw	r2, #573	@ 0x23d
 8011e22:	4952      	ldr	r1, [pc, #328]	@ (8011f6c <tcp_abandon+0x160>)
 8011e24:	4852      	ldr	r0, [pc, #328]	@ (8011f70 <tcp_abandon+0x164>)
 8011e26:	f017 fa7d 	bl	8029324 <iprintf>
 8011e2a:	e099      	b.n	8011f60 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	7d1b      	ldrb	r3, [r3, #20]
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	d106      	bne.n	8011e42 <tcp_abandon+0x36>
 8011e34:	4b4c      	ldr	r3, [pc, #304]	@ (8011f68 <tcp_abandon+0x15c>)
 8011e36:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8011e3a:	494e      	ldr	r1, [pc, #312]	@ (8011f74 <tcp_abandon+0x168>)
 8011e3c:	484c      	ldr	r0, [pc, #304]	@ (8011f70 <tcp_abandon+0x164>)
 8011e3e:	f017 fa71 	bl	8029324 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	7d1b      	ldrb	r3, [r3, #20]
 8011e46:	2b0a      	cmp	r3, #10
 8011e48:	d107      	bne.n	8011e5a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011e4a:	6879      	ldr	r1, [r7, #4]
 8011e4c:	484a      	ldr	r0, [pc, #296]	@ (8011f78 <tcp_abandon+0x16c>)
 8011e4e:	f001 f98b 	bl	8013168 <tcp_pcb_remove>
    tcp_free(pcb);
 8011e52:	6878      	ldr	r0, [r7, #4]
 8011e54:	f7ff fd54 	bl	8011900 <tcp_free>
 8011e58:	e082      	b.n	8011f60 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e66:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e6c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011e74:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	691b      	ldr	r3, [r3, #16]
 8011e7a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	7d1b      	ldrb	r3, [r3, #20]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d126      	bne.n	8011ed2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	8adb      	ldrh	r3, [r3, #22]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d02e      	beq.n	8011eea <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8011f7c <tcp_abandon+0x170>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	687a      	ldr	r2, [r7, #4]
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d105      	bne.n	8011ea2 <tcp_abandon+0x96>
 8011e96:	4b39      	ldr	r3, [pc, #228]	@ (8011f7c <tcp_abandon+0x170>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	4a37      	ldr	r2, [pc, #220]	@ (8011f7c <tcp_abandon+0x170>)
 8011e9e:	6013      	str	r3, [r2, #0]
 8011ea0:	e013      	b.n	8011eca <tcp_abandon+0xbe>
 8011ea2:	4b36      	ldr	r3, [pc, #216]	@ (8011f7c <tcp_abandon+0x170>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	61fb      	str	r3, [r7, #28]
 8011ea8:	e00c      	b.n	8011ec4 <tcp_abandon+0xb8>
 8011eaa:	69fb      	ldr	r3, [r7, #28]
 8011eac:	68db      	ldr	r3, [r3, #12]
 8011eae:	687a      	ldr	r2, [r7, #4]
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	d104      	bne.n	8011ebe <tcp_abandon+0xb2>
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	68da      	ldr	r2, [r3, #12]
 8011eb8:	69fb      	ldr	r3, [r7, #28]
 8011eba:	60da      	str	r2, [r3, #12]
 8011ebc:	e005      	b.n	8011eca <tcp_abandon+0xbe>
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	68db      	ldr	r3, [r3, #12]
 8011ec2:	61fb      	str	r3, [r7, #28]
 8011ec4:	69fb      	ldr	r3, [r7, #28]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d1ef      	bne.n	8011eaa <tcp_abandon+0x9e>
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2200      	movs	r2, #0
 8011ece:	60da      	str	r2, [r3, #12]
 8011ed0:	e00b      	b.n	8011eea <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	8adb      	ldrh	r3, [r3, #22]
 8011eda:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011edc:	6879      	ldr	r1, [r7, #4]
 8011ede:	4828      	ldr	r0, [pc, #160]	@ (8011f80 <tcp_abandon+0x174>)
 8011ee0:	f001 f942 	bl	8013168 <tcp_pcb_remove>
 8011ee4:	4b27      	ldr	r3, [pc, #156]	@ (8011f84 <tcp_abandon+0x178>)
 8011ee6:	2201      	movs	r2, #1
 8011ee8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d004      	beq.n	8011efc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f000 fe16 	bl	8012b28 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d004      	beq.n	8011f0e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f000 fe0d 	bl	8012b28 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d004      	beq.n	8011f20 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f000 fe04 	bl	8012b28 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d00e      	beq.n	8011f44 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011f26:	6879      	ldr	r1, [r7, #4]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	3304      	adds	r3, #4
 8011f2c:	687a      	ldr	r2, [r7, #4]
 8011f2e:	8b12      	ldrh	r2, [r2, #24]
 8011f30:	9202      	str	r2, [sp, #8]
 8011f32:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011f34:	9201      	str	r2, [sp, #4]
 8011f36:	9300      	str	r3, [sp, #0]
 8011f38:	460b      	mov	r3, r1
 8011f3a:	697a      	ldr	r2, [r7, #20]
 8011f3c:	69b9      	ldr	r1, [r7, #24]
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f005 fadc 	bl	80174fc <tcp_rst>
    }
    last_state = pcb->state;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	7d1b      	ldrb	r3, [r3, #20]
 8011f48:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f7ff fcd8 	bl	8011900 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d004      	beq.n	8011f60 <tcp_abandon+0x154>
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	f06f 010c 	mvn.w	r1, #12
 8011f5c:	68f8      	ldr	r0, [r7, #12]
 8011f5e:	4798      	blx	r3
  }
}
 8011f60:	3728      	adds	r7, #40	@ 0x28
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	0802d054 	.word	0x0802d054
 8011f6c:	0802d198 	.word	0x0802d198
 8011f70:	0802d098 	.word	0x0802d098
 8011f74:	0802d1b4 	.word	0x0802d1b4
 8011f78:	200425c4 	.word	0x200425c4
 8011f7c:	200425b8 	.word	0x200425b8
 8011f80:	200425c0 	.word	0x200425c0
 8011f84:	200425c8 	.word	0x200425c8

08011f88 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011f90:	2101      	movs	r1, #1
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f7ff ff3a 	bl	8011e0c <tcp_abandon>
}
 8011f98:	bf00      	nop
 8011f9a:	3708      	adds	r7, #8
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b088      	sub	sp, #32
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	60f8      	str	r0, [r7, #12]
 8011fa8:	60b9      	str	r1, [r7, #8]
 8011faa:	4613      	mov	r3, r2
 8011fac:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8011fae:	2304      	movs	r3, #4
 8011fb0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d101      	bne.n	8011fbc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80120b4 <tcp_bind+0x114>)
 8011fba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d109      	bne.n	8011fd6 <tcp_bind+0x36>
 8011fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80120b8 <tcp_bind+0x118>)
 8011fc4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8011fc8:	493c      	ldr	r1, [pc, #240]	@ (80120bc <tcp_bind+0x11c>)
 8011fca:	483d      	ldr	r0, [pc, #244]	@ (80120c0 <tcp_bind+0x120>)
 8011fcc:	f017 f9aa 	bl	8029324 <iprintf>
 8011fd0:	f06f 030f 	mvn.w	r3, #15
 8011fd4:	e06a      	b.n	80120ac <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	7d1b      	ldrb	r3, [r3, #20]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d009      	beq.n	8011ff2 <tcp_bind+0x52>
 8011fde:	4b36      	ldr	r3, [pc, #216]	@ (80120b8 <tcp_bind+0x118>)
 8011fe0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011fe4:	4937      	ldr	r1, [pc, #220]	@ (80120c4 <tcp_bind+0x124>)
 8011fe6:	4836      	ldr	r0, [pc, #216]	@ (80120c0 <tcp_bind+0x120>)
 8011fe8:	f017 f99c 	bl	8029324 <iprintf>
 8011fec:	f06f 0305 	mvn.w	r3, #5
 8011ff0:	e05c      	b.n	80120ac <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8011ff2:	88fb      	ldrh	r3, [r7, #6]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d109      	bne.n	801200c <tcp_bind+0x6c>
    port = tcp_new_port();
 8011ff8:	f000 f92e 	bl	8012258 <tcp_new_port>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012000:	88fb      	ldrh	r3, [r7, #6]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d135      	bne.n	8012072 <tcp_bind+0xd2>
      return ERR_BUF;
 8012006:	f06f 0301 	mvn.w	r3, #1
 801200a:	e04f      	b.n	80120ac <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801200c:	2300      	movs	r3, #0
 801200e:	61fb      	str	r3, [r7, #28]
 8012010:	e02b      	b.n	801206a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012012:	4a2d      	ldr	r2, [pc, #180]	@ (80120c8 <tcp_bind+0x128>)
 8012014:	69fb      	ldr	r3, [r7, #28]
 8012016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	61bb      	str	r3, [r7, #24]
 801201e:	e01e      	b.n	801205e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8012020:	69bb      	ldr	r3, [r7, #24]
 8012022:	8adb      	ldrh	r3, [r3, #22]
 8012024:	88fa      	ldrh	r2, [r7, #6]
 8012026:	429a      	cmp	r2, r3
 8012028:	d116      	bne.n	8012058 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801202a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801202c:	2b00      	cmp	r3, #0
 801202e:	d010      	beq.n	8012052 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012030:	69bb      	ldr	r3, [r7, #24]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d00c      	beq.n	8012052 <tcp_bind+0xb2>
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d009      	beq.n	8012052 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d005      	beq.n	8012052 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8012046:	69bb      	ldr	r3, [r7, #24]
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801204e:	429a      	cmp	r2, r3
 8012050:	d102      	bne.n	8012058 <tcp_bind+0xb8>
              return ERR_USE;
 8012052:	f06f 0307 	mvn.w	r3, #7
 8012056:	e029      	b.n	80120ac <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012058:	69bb      	ldr	r3, [r7, #24]
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	61bb      	str	r3, [r7, #24]
 801205e:	69bb      	ldr	r3, [r7, #24]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d1dd      	bne.n	8012020 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012064:	69fb      	ldr	r3, [r7, #28]
 8012066:	3301      	adds	r3, #1
 8012068:	61fb      	str	r3, [r7, #28]
 801206a:	69fa      	ldr	r2, [r7, #28]
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	429a      	cmp	r2, r3
 8012070:	dbcf      	blt.n	8012012 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d00c      	beq.n	8012092 <tcp_bind+0xf2>
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d008      	beq.n	8012092 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d002      	beq.n	801208c <tcp_bind+0xec>
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	e000      	b.n	801208e <tcp_bind+0xee>
 801208c:	2300      	movs	r3, #0
 801208e:	68fa      	ldr	r2, [r7, #12]
 8012090:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	88fa      	ldrh	r2, [r7, #6]
 8012096:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8012098:	4b0c      	ldr	r3, [pc, #48]	@ (80120cc <tcp_bind+0x12c>)
 801209a:	681a      	ldr	r2, [r3, #0]
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	60da      	str	r2, [r3, #12]
 80120a0:	4a0a      	ldr	r2, [pc, #40]	@ (80120cc <tcp_bind+0x12c>)
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	6013      	str	r3, [r2, #0]
 80120a6:	f005 fbeb 	bl	8017880 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80120aa:	2300      	movs	r3, #0
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3720      	adds	r7, #32
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}
 80120b4:	0802f50c 	.word	0x0802f50c
 80120b8:	0802d054 	.word	0x0802d054
 80120bc:	0802d1e8 	.word	0x0802d1e8
 80120c0:	0802d098 	.word	0x0802d098
 80120c4:	0802d200 	.word	0x0802d200
 80120c8:	0802f4dc 	.word	0x0802f4dc
 80120cc:	200425b8 	.word	0x200425b8

080120d0 <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 80120d0:	b480      	push	{r7}
 80120d2:	b083      	sub	sp, #12
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
 80120d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d007      	beq.n	80120f0 <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80120e6:	3301      	adds	r3, #1
 80120e8:	b2da      	uxtb	r2, r3
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 80120ee:	e002      	b.n	80120f6 <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2200      	movs	r2, #0
 80120f4:	721a      	strb	r2, [r3, #8]
}
 80120f6:	bf00      	nop
 80120f8:	370c      	adds	r7, #12
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr
	...

08012104 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b084      	sub	sp, #16
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d106      	bne.n	8012120 <tcp_update_rcv_ann_wnd+0x1c>
 8012112:	4b25      	ldr	r3, [pc, #148]	@ (80121a8 <tcp_update_rcv_ann_wnd+0xa4>)
 8012114:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012118:	4924      	ldr	r1, [pc, #144]	@ (80121ac <tcp_update_rcv_ann_wnd+0xa8>)
 801211a:	4825      	ldr	r0, [pc, #148]	@ (80121b0 <tcp_update_rcv_ann_wnd+0xac>)
 801211c:	f017 f902 	bl	8029324 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012124:	687a      	ldr	r2, [r7, #4]
 8012126:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012128:	4413      	add	r3, r2
 801212a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012130:	687a      	ldr	r2, [r7, #4]
 8012132:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8012134:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8012138:	bf28      	it	cs
 801213a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801213e:	b292      	uxth	r2, r2
 8012140:	4413      	add	r3, r2
 8012142:	68fa      	ldr	r2, [r7, #12]
 8012144:	1ad3      	subs	r3, r2, r3
 8012146:	2b00      	cmp	r3, #0
 8012148:	db08      	blt.n	801215c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012156:	68fa      	ldr	r2, [r7, #12]
 8012158:	1ad3      	subs	r3, r2, r3
 801215a:	e020      	b.n	801219e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012164:	1ad3      	subs	r3, r2, r3
 8012166:	2b00      	cmp	r3, #0
 8012168:	dd03      	ble.n	8012172 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2200      	movs	r2, #0
 801216e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012170:	e014      	b.n	801219c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801217a:	1ad3      	subs	r3, r2, r3
 801217c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012184:	d306      	bcc.n	8012194 <tcp_update_rcv_ann_wnd+0x90>
 8012186:	4b08      	ldr	r3, [pc, #32]	@ (80121a8 <tcp_update_rcv_ann_wnd+0xa4>)
 8012188:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801218c:	4909      	ldr	r1, [pc, #36]	@ (80121b4 <tcp_update_rcv_ann_wnd+0xb0>)
 801218e:	4808      	ldr	r0, [pc, #32]	@ (80121b0 <tcp_update_rcv_ann_wnd+0xac>)
 8012190:	f017 f8c8 	bl	8029324 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	b29a      	uxth	r2, r3
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801219c:	2300      	movs	r3, #0
  }
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3710      	adds	r7, #16
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	0802d054 	.word	0x0802d054
 80121ac:	0802d2b0 	.word	0x0802d2b0
 80121b0:	0802d098 	.word	0x0802d098
 80121b4:	0802d2d4 	.word	0x0802d2d4

080121b8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b084      	sub	sp, #16
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	460b      	mov	r3, r1
 80121c2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d107      	bne.n	80121da <tcp_recved+0x22>
 80121ca:	4b1f      	ldr	r3, [pc, #124]	@ (8012248 <tcp_recved+0x90>)
 80121cc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80121d0:	491e      	ldr	r1, [pc, #120]	@ (801224c <tcp_recved+0x94>)
 80121d2:	481f      	ldr	r0, [pc, #124]	@ (8012250 <tcp_recved+0x98>)
 80121d4:	f017 f8a6 	bl	8029324 <iprintf>
 80121d8:	e032      	b.n	8012240 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	7d1b      	ldrb	r3, [r3, #20]
 80121de:	2b01      	cmp	r3, #1
 80121e0:	d106      	bne.n	80121f0 <tcp_recved+0x38>
 80121e2:	4b19      	ldr	r3, [pc, #100]	@ (8012248 <tcp_recved+0x90>)
 80121e4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80121e8:	491a      	ldr	r1, [pc, #104]	@ (8012254 <tcp_recved+0x9c>)
 80121ea:	4819      	ldr	r0, [pc, #100]	@ (8012250 <tcp_recved+0x98>)
 80121ec:	f017 f89a 	bl	8029324 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80121f4:	887b      	ldrh	r3, [r7, #2]
 80121f6:	4413      	add	r3, r2
 80121f8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80121fa:	89fb      	ldrh	r3, [r7, #14]
 80121fc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012200:	d804      	bhi.n	801220c <tcp_recved+0x54>
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012206:	89fa      	ldrh	r2, [r7, #14]
 8012208:	429a      	cmp	r2, r3
 801220a:	d204      	bcs.n	8012216 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012212:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012214:	e002      	b.n	801221c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	89fa      	ldrh	r2, [r7, #14]
 801221a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f7ff ff71 	bl	8012104 <tcp_update_rcv_ann_wnd>
 8012222:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801222a:	d309      	bcc.n	8012240 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	8b5b      	ldrh	r3, [r3, #26]
 8012230:	f043 0302 	orr.w	r3, r3, #2
 8012234:	b29a      	uxth	r2, r3
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f004 fbaa 	bl	8016994 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012240:	3710      	adds	r7, #16
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	0802d054 	.word	0x0802d054
 801224c:	0802d2f0 	.word	0x0802d2f0
 8012250:	0802d098 	.word	0x0802d098
 8012254:	0802d308 	.word	0x0802d308

08012258 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012258:	b480      	push	{r7}
 801225a:	b083      	sub	sp, #12
 801225c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801225e:	2300      	movs	r3, #0
 8012260:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012262:	4b1e      	ldr	r3, [pc, #120]	@ (80122dc <tcp_new_port+0x84>)
 8012264:	881b      	ldrh	r3, [r3, #0]
 8012266:	3301      	adds	r3, #1
 8012268:	b29a      	uxth	r2, r3
 801226a:	4b1c      	ldr	r3, [pc, #112]	@ (80122dc <tcp_new_port+0x84>)
 801226c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801226e:	4b1b      	ldr	r3, [pc, #108]	@ (80122dc <tcp_new_port+0x84>)
 8012270:	881b      	ldrh	r3, [r3, #0]
 8012272:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012276:	4293      	cmp	r3, r2
 8012278:	d103      	bne.n	8012282 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801227a:	4b18      	ldr	r3, [pc, #96]	@ (80122dc <tcp_new_port+0x84>)
 801227c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012280:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012282:	2300      	movs	r3, #0
 8012284:	71fb      	strb	r3, [r7, #7]
 8012286:	e01e      	b.n	80122c6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012288:	79fb      	ldrb	r3, [r7, #7]
 801228a:	4a15      	ldr	r2, [pc, #84]	@ (80122e0 <tcp_new_port+0x88>)
 801228c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	603b      	str	r3, [r7, #0]
 8012294:	e011      	b.n	80122ba <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	8ada      	ldrh	r2, [r3, #22]
 801229a:	4b10      	ldr	r3, [pc, #64]	@ (80122dc <tcp_new_port+0x84>)
 801229c:	881b      	ldrh	r3, [r3, #0]
 801229e:	429a      	cmp	r2, r3
 80122a0:	d108      	bne.n	80122b4 <tcp_new_port+0x5c>
        n++;
 80122a2:	88bb      	ldrh	r3, [r7, #4]
 80122a4:	3301      	adds	r3, #1
 80122a6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80122a8:	88bb      	ldrh	r3, [r7, #4]
 80122aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80122ae:	d3d8      	bcc.n	8012262 <tcp_new_port+0xa>
          return 0;
 80122b0:	2300      	movs	r3, #0
 80122b2:	e00d      	b.n	80122d0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	603b      	str	r3, [r7, #0]
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d1ea      	bne.n	8012296 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80122c0:	79fb      	ldrb	r3, [r7, #7]
 80122c2:	3301      	adds	r3, #1
 80122c4:	71fb      	strb	r3, [r7, #7]
 80122c6:	79fb      	ldrb	r3, [r7, #7]
 80122c8:	2b03      	cmp	r3, #3
 80122ca:	d9dd      	bls.n	8012288 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80122cc:	4b03      	ldr	r3, [pc, #12]	@ (80122dc <tcp_new_port+0x84>)
 80122ce:	881b      	ldrh	r3, [r3, #0]
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	370c      	adds	r7, #12
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr
 80122dc:	2000002c 	.word	0x2000002c
 80122e0:	0802f4dc 	.word	0x0802f4dc

080122e4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80122e4:	b5b0      	push	{r4, r5, r7, lr}
 80122e6:	b090      	sub	sp, #64	@ 0x40
 80122e8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80122ea:	2300      	movs	r3, #0
 80122ec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80122f0:	4b95      	ldr	r3, [pc, #596]	@ (8012548 <tcp_slowtmr+0x264>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	3301      	adds	r3, #1
 80122f6:	4a94      	ldr	r2, [pc, #592]	@ (8012548 <tcp_slowtmr+0x264>)
 80122f8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80122fa:	4b94      	ldr	r3, [pc, #592]	@ (801254c <tcp_slowtmr+0x268>)
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	3301      	adds	r3, #1
 8012300:	b2da      	uxtb	r2, r3
 8012302:	4b92      	ldr	r3, [pc, #584]	@ (801254c <tcp_slowtmr+0x268>)
 8012304:	701a      	strb	r2, [r3, #0]
 8012306:	e000      	b.n	801230a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8012308:	bf00      	nop
  prev = NULL;
 801230a:	2300      	movs	r3, #0
 801230c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801230e:	4b90      	ldr	r3, [pc, #576]	@ (8012550 <tcp_slowtmr+0x26c>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012314:	e29d      	b.n	8012852 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012318:	7d1b      	ldrb	r3, [r3, #20]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d106      	bne.n	801232c <tcp_slowtmr+0x48>
 801231e:	4b8d      	ldr	r3, [pc, #564]	@ (8012554 <tcp_slowtmr+0x270>)
 8012320:	f240 42be 	movw	r2, #1214	@ 0x4be
 8012324:	498c      	ldr	r1, [pc, #560]	@ (8012558 <tcp_slowtmr+0x274>)
 8012326:	488d      	ldr	r0, [pc, #564]	@ (801255c <tcp_slowtmr+0x278>)
 8012328:	f016 fffc 	bl	8029324 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801232c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801232e:	7d1b      	ldrb	r3, [r3, #20]
 8012330:	2b01      	cmp	r3, #1
 8012332:	d106      	bne.n	8012342 <tcp_slowtmr+0x5e>
 8012334:	4b87      	ldr	r3, [pc, #540]	@ (8012554 <tcp_slowtmr+0x270>)
 8012336:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801233a:	4989      	ldr	r1, [pc, #548]	@ (8012560 <tcp_slowtmr+0x27c>)
 801233c:	4887      	ldr	r0, [pc, #540]	@ (801255c <tcp_slowtmr+0x278>)
 801233e:	f016 fff1 	bl	8029324 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012344:	7d1b      	ldrb	r3, [r3, #20]
 8012346:	2b0a      	cmp	r3, #10
 8012348:	d106      	bne.n	8012358 <tcp_slowtmr+0x74>
 801234a:	4b82      	ldr	r3, [pc, #520]	@ (8012554 <tcp_slowtmr+0x270>)
 801234c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8012350:	4984      	ldr	r1, [pc, #528]	@ (8012564 <tcp_slowtmr+0x280>)
 8012352:	4882      	ldr	r0, [pc, #520]	@ (801255c <tcp_slowtmr+0x278>)
 8012354:	f016 ffe6 	bl	8029324 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801235a:	7f9a      	ldrb	r2, [r3, #30]
 801235c:	4b7b      	ldr	r3, [pc, #492]	@ (801254c <tcp_slowtmr+0x268>)
 801235e:	781b      	ldrb	r3, [r3, #0]
 8012360:	429a      	cmp	r2, r3
 8012362:	d105      	bne.n	8012370 <tcp_slowtmr+0x8c>
      prev = pcb;
 8012364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012366:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801236a:	68db      	ldr	r3, [r3, #12]
 801236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801236e:	e270      	b.n	8012852 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8012370:	4b76      	ldr	r3, [pc, #472]	@ (801254c <tcp_slowtmr+0x268>)
 8012372:	781a      	ldrb	r2, [r3, #0]
 8012374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012376:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8012378:	2300      	movs	r3, #0
 801237a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801237e:	2300      	movs	r3, #0
 8012380:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012386:	7d1b      	ldrb	r3, [r3, #20]
 8012388:	2b02      	cmp	r3, #2
 801238a:	d10a      	bne.n	80123a2 <tcp_slowtmr+0xbe>
 801238c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801238e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012392:	2b05      	cmp	r3, #5
 8012394:	d905      	bls.n	80123a2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8012396:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801239a:	3301      	adds	r3, #1
 801239c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80123a0:	e11e      	b.n	80125e0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80123a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80123a8:	2b0b      	cmp	r3, #11
 80123aa:	d905      	bls.n	80123b8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80123ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123b0:	3301      	adds	r3, #1
 80123b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80123b6:	e113      	b.n	80125e0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80123b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123ba:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d075      	beq.n	80124ae <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80123c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d006      	beq.n	80123d8 <tcp_slowtmr+0xf4>
 80123ca:	4b62      	ldr	r3, [pc, #392]	@ (8012554 <tcp_slowtmr+0x270>)
 80123cc:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80123d0:	4965      	ldr	r1, [pc, #404]	@ (8012568 <tcp_slowtmr+0x284>)
 80123d2:	4862      	ldr	r0, [pc, #392]	@ (801255c <tcp_slowtmr+0x278>)
 80123d4:	f016 ffa6 	bl	8029324 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80123d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d106      	bne.n	80123ee <tcp_slowtmr+0x10a>
 80123e0:	4b5c      	ldr	r3, [pc, #368]	@ (8012554 <tcp_slowtmr+0x270>)
 80123e2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80123e6:	4961      	ldr	r1, [pc, #388]	@ (801256c <tcp_slowtmr+0x288>)
 80123e8:	485c      	ldr	r0, [pc, #368]	@ (801255c <tcp_slowtmr+0x278>)
 80123ea:	f016 ff9b 	bl	8029324 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80123ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123f0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80123f4:	2b0b      	cmp	r3, #11
 80123f6:	d905      	bls.n	8012404 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80123f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123fc:	3301      	adds	r3, #1
 80123fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012402:	e0ed      	b.n	80125e0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012406:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801240a:	3b01      	subs	r3, #1
 801240c:	4a58      	ldr	r2, [pc, #352]	@ (8012570 <tcp_slowtmr+0x28c>)
 801240e:	5cd3      	ldrb	r3, [r2, r3]
 8012410:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012414:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012418:	7c7a      	ldrb	r2, [r7, #17]
 801241a:	429a      	cmp	r2, r3
 801241c:	d907      	bls.n	801242e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801241e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012420:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012424:	3301      	adds	r3, #1
 8012426:	b2da      	uxtb	r2, r3
 8012428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801242a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801242e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012430:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012434:	7c7a      	ldrb	r2, [r7, #17]
 8012436:	429a      	cmp	r2, r3
 8012438:	f200 80d2 	bhi.w	80125e0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801243c:	2301      	movs	r3, #1
 801243e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8012440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012442:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012446:	2b00      	cmp	r3, #0
 8012448:	d108      	bne.n	801245c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801244a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801244c:	f005 f94a 	bl	80176e4 <tcp_zero_window_probe>
 8012450:	4603      	mov	r3, r0
 8012452:	2b00      	cmp	r3, #0
 8012454:	d014      	beq.n	8012480 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8012456:	2300      	movs	r3, #0
 8012458:	623b      	str	r3, [r7, #32]
 801245a:	e011      	b.n	8012480 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801245c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801245e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012462:	4619      	mov	r1, r3
 8012464:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012466:	f004 f80f 	bl	8016488 <tcp_split_unsent_seg>
 801246a:	4603      	mov	r3, r0
 801246c:	2b00      	cmp	r3, #0
 801246e:	d107      	bne.n	8012480 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8012470:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012472:	f004 fa8f 	bl	8016994 <tcp_output>
 8012476:	4603      	mov	r3, r0
 8012478:	2b00      	cmp	r3, #0
 801247a:	d101      	bne.n	8012480 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801247c:	2300      	movs	r3, #0
 801247e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8012480:	6a3b      	ldr	r3, [r7, #32]
 8012482:	2b00      	cmp	r3, #0
 8012484:	f000 80ac 	beq.w	80125e0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8012488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801248a:	2200      	movs	r2, #0
 801248c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012492:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012496:	2b06      	cmp	r3, #6
 8012498:	f200 80a2 	bhi.w	80125e0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801249c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801249e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80124a2:	3301      	adds	r3, #1
 80124a4:	b2da      	uxtb	r2, r3
 80124a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80124ac:	e098      	b.n	80125e0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80124ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	db0f      	blt.n	80124d8 <tcp_slowtmr+0x1f4>
 80124b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124ba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80124be:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80124c2:	4293      	cmp	r3, r2
 80124c4:	d008      	beq.n	80124d8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80124c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80124cc:	b29b      	uxth	r3, r3
 80124ce:	3301      	adds	r3, #1
 80124d0:	b29b      	uxth	r3, r3
 80124d2:	b21a      	sxth	r2, r3
 80124d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124d6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80124d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124da:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80124de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124e0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80124e4:	429a      	cmp	r2, r3
 80124e6:	db7b      	blt.n	80125e0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80124e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80124ea:	f004 fd47 	bl	8016f7c <tcp_rexmit_rto_prepare>
 80124ee:	4603      	mov	r3, r0
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d007      	beq.n	8012504 <tcp_slowtmr+0x220>
 80124f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d171      	bne.n	80125e0 <tcp_slowtmr+0x2fc>
 80124fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012500:	2b00      	cmp	r3, #0
 8012502:	d06d      	beq.n	80125e0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8012504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012506:	7d1b      	ldrb	r3, [r3, #20]
 8012508:	2b02      	cmp	r3, #2
 801250a:	d03a      	beq.n	8012582 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801250c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801250e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012512:	2b0c      	cmp	r3, #12
 8012514:	bf28      	it	cs
 8012516:	230c      	movcs	r3, #12
 8012518:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801251a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801251c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012520:	10db      	asrs	r3, r3, #3
 8012522:	b21b      	sxth	r3, r3
 8012524:	461a      	mov	r2, r3
 8012526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012528:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801252c:	4413      	add	r3, r2
 801252e:	7efa      	ldrb	r2, [r7, #27]
 8012530:	4910      	ldr	r1, [pc, #64]	@ (8012574 <tcp_slowtmr+0x290>)
 8012532:	5c8a      	ldrb	r2, [r1, r2]
 8012534:	4093      	lsls	r3, r2
 8012536:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012538:	697b      	ldr	r3, [r7, #20]
 801253a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801253e:	4293      	cmp	r3, r2
 8012540:	dc1a      	bgt.n	8012578 <tcp_slowtmr+0x294>
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	b21a      	sxth	r2, r3
 8012546:	e019      	b.n	801257c <tcp_slowtmr+0x298>
 8012548:	200425b4 	.word	0x200425b4
 801254c:	200425ca 	.word	0x200425ca
 8012550:	200425c0 	.word	0x200425c0
 8012554:	0802d054 	.word	0x0802d054
 8012558:	0802d398 	.word	0x0802d398
 801255c:	0802d098 	.word	0x0802d098
 8012560:	0802d3c4 	.word	0x0802d3c4
 8012564:	0802d3f0 	.word	0x0802d3f0
 8012568:	0802d420 	.word	0x0802d420
 801256c:	0802d454 	.word	0x0802d454
 8012570:	0802f4d4 	.word	0x0802f4d4
 8012574:	0802f4c4 	.word	0x0802f4c4
 8012578:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801257c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801257e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8012582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012584:	2200      	movs	r2, #0
 8012586:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801258a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801258e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012590:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012594:	4293      	cmp	r3, r2
 8012596:	bf28      	it	cs
 8012598:	4613      	movcs	r3, r2
 801259a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801259c:	8a7b      	ldrh	r3, [r7, #18]
 801259e:	085b      	lsrs	r3, r3, #1
 80125a0:	b29a      	uxth	r2, r3
 80125a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125a4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80125a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80125ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125b2:	005b      	lsls	r3, r3, #1
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d206      	bcs.n	80125c8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80125ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125be:	005b      	lsls	r3, r3, #1
 80125c0:	b29a      	uxth	r2, r3
 80125c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80125c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ca:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80125cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80125d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125d4:	2200      	movs	r2, #0
 80125d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80125da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80125dc:	f004 fd3e 	bl	801705c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80125e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125e2:	7d1b      	ldrb	r3, [r3, #20]
 80125e4:	2b06      	cmp	r3, #6
 80125e6:	d111      	bne.n	801260c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80125e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ea:	8b5b      	ldrh	r3, [r3, #26]
 80125ec:	f003 0310 	and.w	r3, r3, #16
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d00b      	beq.n	801260c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80125f4:	4b9c      	ldr	r3, [pc, #624]	@ (8012868 <tcp_slowtmr+0x584>)
 80125f6:	681a      	ldr	r2, [r3, #0]
 80125f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125fa:	6a1b      	ldr	r3, [r3, #32]
 80125fc:	1ad3      	subs	r3, r2, r3
 80125fe:	2b28      	cmp	r3, #40	@ 0x28
 8012600:	d904      	bls.n	801260c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8012602:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012606:	3301      	adds	r3, #1
 8012608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801260c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801260e:	7a5b      	ldrb	r3, [r3, #9]
 8012610:	f003 0308 	and.w	r3, r3, #8
 8012614:	2b00      	cmp	r3, #0
 8012616:	d04a      	beq.n	80126ae <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8012618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801261a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801261c:	2b04      	cmp	r3, #4
 801261e:	d003      	beq.n	8012628 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8012620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012622:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012624:	2b07      	cmp	r3, #7
 8012626:	d142      	bne.n	80126ae <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012628:	4b8f      	ldr	r3, [pc, #572]	@ (8012868 <tcp_slowtmr+0x584>)
 801262a:	681a      	ldr	r2, [r3, #0]
 801262c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801262e:	6a1b      	ldr	r3, [r3, #32]
 8012630:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012634:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012638:	4b8c      	ldr	r3, [pc, #560]	@ (801286c <tcp_slowtmr+0x588>)
 801263a:	440b      	add	r3, r1
 801263c:	498c      	ldr	r1, [pc, #560]	@ (8012870 <tcp_slowtmr+0x58c>)
 801263e:	fba1 1303 	umull	r1, r3, r1, r3
 8012642:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012644:	429a      	cmp	r2, r3
 8012646:	d90a      	bls.n	801265e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8012648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801264c:	3301      	adds	r3, #1
 801264e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8012652:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012656:	3301      	adds	r3, #1
 8012658:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801265c:	e027      	b.n	80126ae <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801265e:	4b82      	ldr	r3, [pc, #520]	@ (8012868 <tcp_slowtmr+0x584>)
 8012660:	681a      	ldr	r2, [r3, #0]
 8012662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012664:	6a1b      	ldr	r3, [r3, #32]
 8012666:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801266a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801266e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012670:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012674:	4618      	mov	r0, r3
 8012676:	4b7f      	ldr	r3, [pc, #508]	@ (8012874 <tcp_slowtmr+0x590>)
 8012678:	fb00 f303 	mul.w	r3, r0, r3
 801267c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801267e:	497c      	ldr	r1, [pc, #496]	@ (8012870 <tcp_slowtmr+0x58c>)
 8012680:	fba1 1303 	umull	r1, r3, r1, r3
 8012684:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012686:	429a      	cmp	r2, r3
 8012688:	d911      	bls.n	80126ae <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801268a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801268c:	f004 ffea 	bl	8017664 <tcp_keepalive>
 8012690:	4603      	mov	r3, r0
 8012692:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8012696:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801269a:	2b00      	cmp	r3, #0
 801269c:	d107      	bne.n	80126ae <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801269e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126a0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80126a4:	3301      	adds	r3, #1
 80126a6:	b2da      	uxtb	r2, r3
 80126a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126aa:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80126ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d011      	beq.n	80126da <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80126b6:	4b6c      	ldr	r3, [pc, #432]	@ (8012868 <tcp_slowtmr+0x584>)
 80126b8:	681a      	ldr	r2, [r3, #0]
 80126ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126bc:	6a1b      	ldr	r3, [r3, #32]
 80126be:	1ad2      	subs	r2, r2, r3
 80126c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126c2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80126c6:	4619      	mov	r1, r3
 80126c8:	460b      	mov	r3, r1
 80126ca:	005b      	lsls	r3, r3, #1
 80126cc:	440b      	add	r3, r1
 80126ce:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d302      	bcc.n	80126da <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80126d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80126d6:	f000 feab 	bl	8013430 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80126da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126dc:	7d1b      	ldrb	r3, [r3, #20]
 80126de:	2b03      	cmp	r3, #3
 80126e0:	d10b      	bne.n	80126fa <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80126e2:	4b61      	ldr	r3, [pc, #388]	@ (8012868 <tcp_slowtmr+0x584>)
 80126e4:	681a      	ldr	r2, [r3, #0]
 80126e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126e8:	6a1b      	ldr	r3, [r3, #32]
 80126ea:	1ad3      	subs	r3, r2, r3
 80126ec:	2b28      	cmp	r3, #40	@ 0x28
 80126ee:	d904      	bls.n	80126fa <tcp_slowtmr+0x416>
        ++pcb_remove;
 80126f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80126f4:	3301      	adds	r3, #1
 80126f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80126fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126fc:	7d1b      	ldrb	r3, [r3, #20]
 80126fe:	2b09      	cmp	r3, #9
 8012700:	d10b      	bne.n	801271a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012702:	4b59      	ldr	r3, [pc, #356]	@ (8012868 <tcp_slowtmr+0x584>)
 8012704:	681a      	ldr	r2, [r3, #0]
 8012706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012708:	6a1b      	ldr	r3, [r3, #32]
 801270a:	1ad3      	subs	r3, r2, r3
 801270c:	2bf0      	cmp	r3, #240	@ 0xf0
 801270e:	d904      	bls.n	801271a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8012710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012714:	3301      	adds	r3, #1
 8012716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801271a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801271e:	2b00      	cmp	r3, #0
 8012720:	d060      	beq.n	80127e4 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8012722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012728:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801272a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801272c:	f000 fccc 	bl	80130c8 <tcp_pcb_purge>
      if (prev != NULL) {
 8012730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012732:	2b00      	cmp	r3, #0
 8012734:	d010      	beq.n	8012758 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012736:	4b50      	ldr	r3, [pc, #320]	@ (8012878 <tcp_slowtmr+0x594>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801273c:	429a      	cmp	r2, r3
 801273e:	d106      	bne.n	801274e <tcp_slowtmr+0x46a>
 8012740:	4b4e      	ldr	r3, [pc, #312]	@ (801287c <tcp_slowtmr+0x598>)
 8012742:	f240 526d 	movw	r2, #1389	@ 0x56d
 8012746:	494e      	ldr	r1, [pc, #312]	@ (8012880 <tcp_slowtmr+0x59c>)
 8012748:	484e      	ldr	r0, [pc, #312]	@ (8012884 <tcp_slowtmr+0x5a0>)
 801274a:	f016 fdeb 	bl	8029324 <iprintf>
        prev->next = pcb->next;
 801274e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012750:	68da      	ldr	r2, [r3, #12]
 8012752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012754:	60da      	str	r2, [r3, #12]
 8012756:	e00f      	b.n	8012778 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012758:	4b47      	ldr	r3, [pc, #284]	@ (8012878 <tcp_slowtmr+0x594>)
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801275e:	429a      	cmp	r2, r3
 8012760:	d006      	beq.n	8012770 <tcp_slowtmr+0x48c>
 8012762:	4b46      	ldr	r3, [pc, #280]	@ (801287c <tcp_slowtmr+0x598>)
 8012764:	f240 5271 	movw	r2, #1393	@ 0x571
 8012768:	4947      	ldr	r1, [pc, #284]	@ (8012888 <tcp_slowtmr+0x5a4>)
 801276a:	4846      	ldr	r0, [pc, #280]	@ (8012884 <tcp_slowtmr+0x5a0>)
 801276c:	f016 fdda 	bl	8029324 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012772:	68db      	ldr	r3, [r3, #12]
 8012774:	4a40      	ldr	r2, [pc, #256]	@ (8012878 <tcp_slowtmr+0x594>)
 8012776:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8012778:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801277c:	2b00      	cmp	r3, #0
 801277e:	d013      	beq.n	80127a8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012782:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012786:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012788:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801278a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801278c:	3304      	adds	r3, #4
 801278e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012790:	8ad2      	ldrh	r2, [r2, #22]
 8012792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012794:	8b09      	ldrh	r1, [r1, #24]
 8012796:	9102      	str	r1, [sp, #8]
 8012798:	9201      	str	r2, [sp, #4]
 801279a:	9300      	str	r3, [sp, #0]
 801279c:	462b      	mov	r3, r5
 801279e:	4622      	mov	r2, r4
 80127a0:	4601      	mov	r1, r0
 80127a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80127a4:	f004 feaa 	bl	80174fc <tcp_rst>
      err_arg = pcb->callback_arg;
 80127a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127aa:	691b      	ldr	r3, [r3, #16]
 80127ac:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80127ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127b0:	7d1b      	ldrb	r3, [r3, #20]
 80127b2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80127b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127b6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80127b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80127be:	6838      	ldr	r0, [r7, #0]
 80127c0:	f7ff f89e 	bl	8011900 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80127c4:	4b31      	ldr	r3, [pc, #196]	@ (801288c <tcp_slowtmr+0x5a8>)
 80127c6:	2200      	movs	r2, #0
 80127c8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d004      	beq.n	80127da <tcp_slowtmr+0x4f6>
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	f06f 010c 	mvn.w	r1, #12
 80127d6:	68b8      	ldr	r0, [r7, #8]
 80127d8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80127da:	4b2c      	ldr	r3, [pc, #176]	@ (801288c <tcp_slowtmr+0x5a8>)
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d037      	beq.n	8012852 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80127e2:	e592      	b.n	801230a <tcp_slowtmr+0x26>
      prev = pcb;
 80127e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80127e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80127ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127f0:	7f1b      	ldrb	r3, [r3, #28]
 80127f2:	3301      	adds	r3, #1
 80127f4:	b2da      	uxtb	r2, r3
 80127f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127f8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80127fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127fc:	7f1a      	ldrb	r2, [r3, #28]
 80127fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012800:	7f5b      	ldrb	r3, [r3, #29]
 8012802:	429a      	cmp	r2, r3
 8012804:	d325      	bcc.n	8012852 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8012806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012808:	2200      	movs	r2, #0
 801280a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801280c:	4b1f      	ldr	r3, [pc, #124]	@ (801288c <tcp_slowtmr+0x5a8>)
 801280e:	2200      	movs	r2, #0
 8012810:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012818:	2b00      	cmp	r3, #0
 801281a:	d00b      	beq.n	8012834 <tcp_slowtmr+0x550>
 801281c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801281e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012822:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012824:	6912      	ldr	r2, [r2, #16]
 8012826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012828:	4610      	mov	r0, r2
 801282a:	4798      	blx	r3
 801282c:	4603      	mov	r3, r0
 801282e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8012832:	e002      	b.n	801283a <tcp_slowtmr+0x556>
 8012834:	2300      	movs	r3, #0
 8012836:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801283a:	4b14      	ldr	r3, [pc, #80]	@ (801288c <tcp_slowtmr+0x5a8>)
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	2b00      	cmp	r3, #0
 8012840:	f47f ad62 	bne.w	8012308 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012844:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012848:	2b00      	cmp	r3, #0
 801284a:	d102      	bne.n	8012852 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801284c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801284e:	f004 f8a1 	bl	8016994 <tcp_output>
  while (pcb != NULL) {
 8012852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012854:	2b00      	cmp	r3, #0
 8012856:	f47f ad5e 	bne.w	8012316 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801285a:	2300      	movs	r3, #0
 801285c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801285e:	4b0c      	ldr	r3, [pc, #48]	@ (8012890 <tcp_slowtmr+0x5ac>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012864:	e069      	b.n	801293a <tcp_slowtmr+0x656>
 8012866:	bf00      	nop
 8012868:	200425b4 	.word	0x200425b4
 801286c:	000a4cb8 	.word	0x000a4cb8
 8012870:	10624dd3 	.word	0x10624dd3
 8012874:	000124f8 	.word	0x000124f8
 8012878:	200425c0 	.word	0x200425c0
 801287c:	0802d054 	.word	0x0802d054
 8012880:	0802d48c 	.word	0x0802d48c
 8012884:	0802d098 	.word	0x0802d098
 8012888:	0802d4b8 	.word	0x0802d4b8
 801288c:	200425c8 	.word	0x200425c8
 8012890:	200425c4 	.word	0x200425c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012896:	7d1b      	ldrb	r3, [r3, #20]
 8012898:	2b0a      	cmp	r3, #10
 801289a:	d006      	beq.n	80128aa <tcp_slowtmr+0x5c6>
 801289c:	4b2b      	ldr	r3, [pc, #172]	@ (801294c <tcp_slowtmr+0x668>)
 801289e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80128a2:	492b      	ldr	r1, [pc, #172]	@ (8012950 <tcp_slowtmr+0x66c>)
 80128a4:	482b      	ldr	r0, [pc, #172]	@ (8012954 <tcp_slowtmr+0x670>)
 80128a6:	f016 fd3d 	bl	8029324 <iprintf>
    pcb_remove = 0;
 80128aa:	2300      	movs	r3, #0
 80128ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80128b0:	4b29      	ldr	r3, [pc, #164]	@ (8012958 <tcp_slowtmr+0x674>)
 80128b2:	681a      	ldr	r2, [r3, #0]
 80128b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128b6:	6a1b      	ldr	r3, [r3, #32]
 80128b8:	1ad3      	subs	r3, r2, r3
 80128ba:	2bf0      	cmp	r3, #240	@ 0xf0
 80128bc:	d904      	bls.n	80128c8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80128be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128c2:	3301      	adds	r3, #1
 80128c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80128c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d02f      	beq.n	8012930 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80128d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80128d2:	f000 fbf9 	bl	80130c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80128d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d010      	beq.n	80128fe <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80128dc:	4b1f      	ldr	r3, [pc, #124]	@ (801295c <tcp_slowtmr+0x678>)
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80128e2:	429a      	cmp	r2, r3
 80128e4:	d106      	bne.n	80128f4 <tcp_slowtmr+0x610>
 80128e6:	4b19      	ldr	r3, [pc, #100]	@ (801294c <tcp_slowtmr+0x668>)
 80128e8:	f240 52af 	movw	r2, #1455	@ 0x5af
 80128ec:	491c      	ldr	r1, [pc, #112]	@ (8012960 <tcp_slowtmr+0x67c>)
 80128ee:	4819      	ldr	r0, [pc, #100]	@ (8012954 <tcp_slowtmr+0x670>)
 80128f0:	f016 fd18 	bl	8029324 <iprintf>
        prev->next = pcb->next;
 80128f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128f6:	68da      	ldr	r2, [r3, #12]
 80128f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128fa:	60da      	str	r2, [r3, #12]
 80128fc:	e00f      	b.n	801291e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80128fe:	4b17      	ldr	r3, [pc, #92]	@ (801295c <tcp_slowtmr+0x678>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012904:	429a      	cmp	r2, r3
 8012906:	d006      	beq.n	8012916 <tcp_slowtmr+0x632>
 8012908:	4b10      	ldr	r3, [pc, #64]	@ (801294c <tcp_slowtmr+0x668>)
 801290a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801290e:	4915      	ldr	r1, [pc, #84]	@ (8012964 <tcp_slowtmr+0x680>)
 8012910:	4810      	ldr	r0, [pc, #64]	@ (8012954 <tcp_slowtmr+0x670>)
 8012912:	f016 fd07 	bl	8029324 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012918:	68db      	ldr	r3, [r3, #12]
 801291a:	4a10      	ldr	r2, [pc, #64]	@ (801295c <tcp_slowtmr+0x678>)
 801291c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801291e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012920:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012928:	69f8      	ldr	r0, [r7, #28]
 801292a:	f7fe ffe9 	bl	8011900 <tcp_free>
 801292e:	e004      	b.n	801293a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8012930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012932:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012936:	68db      	ldr	r3, [r3, #12]
 8012938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801293a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801293c:	2b00      	cmp	r3, #0
 801293e:	d1a9      	bne.n	8012894 <tcp_slowtmr+0x5b0>
    }
  }
}
 8012940:	bf00      	nop
 8012942:	bf00      	nop
 8012944:	3730      	adds	r7, #48	@ 0x30
 8012946:	46bd      	mov	sp, r7
 8012948:	bdb0      	pop	{r4, r5, r7, pc}
 801294a:	bf00      	nop
 801294c:	0802d054 	.word	0x0802d054
 8012950:	0802d4e4 	.word	0x0802d4e4
 8012954:	0802d098 	.word	0x0802d098
 8012958:	200425b4 	.word	0x200425b4
 801295c:	200425c4 	.word	0x200425c4
 8012960:	0802d514 	.word	0x0802d514
 8012964:	0802d53c 	.word	0x0802d53c

08012968 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b082      	sub	sp, #8
 801296c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801296e:	4b2d      	ldr	r3, [pc, #180]	@ (8012a24 <tcp_fasttmr+0xbc>)
 8012970:	781b      	ldrb	r3, [r3, #0]
 8012972:	3301      	adds	r3, #1
 8012974:	b2da      	uxtb	r2, r3
 8012976:	4b2b      	ldr	r3, [pc, #172]	@ (8012a24 <tcp_fasttmr+0xbc>)
 8012978:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801297a:	4b2b      	ldr	r3, [pc, #172]	@ (8012a28 <tcp_fasttmr+0xc0>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012980:	e048      	b.n	8012a14 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	7f9a      	ldrb	r2, [r3, #30]
 8012986:	4b27      	ldr	r3, [pc, #156]	@ (8012a24 <tcp_fasttmr+0xbc>)
 8012988:	781b      	ldrb	r3, [r3, #0]
 801298a:	429a      	cmp	r2, r3
 801298c:	d03f      	beq.n	8012a0e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801298e:	4b25      	ldr	r3, [pc, #148]	@ (8012a24 <tcp_fasttmr+0xbc>)
 8012990:	781a      	ldrb	r2, [r3, #0]
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	8b5b      	ldrh	r3, [r3, #26]
 801299a:	f003 0301 	and.w	r3, r3, #1
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d010      	beq.n	80129c4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	8b5b      	ldrh	r3, [r3, #26]
 80129a6:	f043 0302 	orr.w	r3, r3, #2
 80129aa:	b29a      	uxth	r2, r3
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80129b0:	6878      	ldr	r0, [r7, #4]
 80129b2:	f003 ffef 	bl	8016994 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	8b5b      	ldrh	r3, [r3, #26]
 80129ba:	f023 0303 	bic.w	r3, r3, #3
 80129be:	b29a      	uxth	r2, r3
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	8b5b      	ldrh	r3, [r3, #26]
 80129c8:	f003 0308 	and.w	r3, r3, #8
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d009      	beq.n	80129e4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	8b5b      	ldrh	r3, [r3, #26]
 80129d4:	f023 0308 	bic.w	r3, r3, #8
 80129d8:	b29a      	uxth	r2, r3
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f7ff f922 	bl	8011c28 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	68db      	ldr	r3, [r3, #12]
 80129e8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d00a      	beq.n	8012a08 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80129f2:	4b0e      	ldr	r3, [pc, #56]	@ (8012a2c <tcp_fasttmr+0xc4>)
 80129f4:	2200      	movs	r2, #0
 80129f6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f000 f819 	bl	8012a30 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80129fe:	4b0b      	ldr	r3, [pc, #44]	@ (8012a2c <tcp_fasttmr+0xc4>)
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d000      	beq.n	8012a08 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012a06:	e7b8      	b.n	801297a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	607b      	str	r3, [r7, #4]
 8012a0c:	e002      	b.n	8012a14 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	68db      	ldr	r3, [r3, #12]
 8012a12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d1b3      	bne.n	8012982 <tcp_fasttmr+0x1a>
    }
  }
}
 8012a1a:	bf00      	nop
 8012a1c:	bf00      	nop
 8012a1e:	3708      	adds	r7, #8
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	200425ca 	.word	0x200425ca
 8012a28:	200425c0 	.word	0x200425c0
 8012a2c:	200425c8 	.word	0x200425c8

08012a30 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012a30:	b590      	push	{r4, r7, lr}
 8012a32:	b085      	sub	sp, #20
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d109      	bne.n	8012a52 <tcp_process_refused_data+0x22>
 8012a3e:	4b37      	ldr	r3, [pc, #220]	@ (8012b1c <tcp_process_refused_data+0xec>)
 8012a40:	f240 6209 	movw	r2, #1545	@ 0x609
 8012a44:	4936      	ldr	r1, [pc, #216]	@ (8012b20 <tcp_process_refused_data+0xf0>)
 8012a46:	4837      	ldr	r0, [pc, #220]	@ (8012b24 <tcp_process_refused_data+0xf4>)
 8012a48:	f016 fc6c 	bl	8029324 <iprintf>
 8012a4c:	f06f 030f 	mvn.w	r3, #15
 8012a50:	e060      	b.n	8012b14 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a56:	7b5b      	ldrb	r3, [r3, #13]
 8012a58:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a5e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2200      	movs	r2, #0
 8012a64:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d00b      	beq.n	8012a88 <tcp_process_refused_data+0x58>
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6918      	ldr	r0, [r3, #16]
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	68ba      	ldr	r2, [r7, #8]
 8012a7e:	6879      	ldr	r1, [r7, #4]
 8012a80:	47a0      	blx	r4
 8012a82:	4603      	mov	r3, r0
 8012a84:	73fb      	strb	r3, [r7, #15]
 8012a86:	e007      	b.n	8012a98 <tcp_process_refused_data+0x68>
 8012a88:	2300      	movs	r3, #0
 8012a8a:	68ba      	ldr	r2, [r7, #8]
 8012a8c:	6879      	ldr	r1, [r7, #4]
 8012a8e:	2000      	movs	r0, #0
 8012a90:	f000 f8a4 	bl	8012bdc <tcp_recv_null>
 8012a94:	4603      	mov	r3, r0
 8012a96:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d12a      	bne.n	8012af6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012aa0:	7bbb      	ldrb	r3, [r7, #14]
 8012aa2:	f003 0320 	and.w	r3, r3, #32
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d033      	beq.n	8012b12 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012aae:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012ab2:	d005      	beq.n	8012ac0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ab8:	3301      	adds	r3, #1
 8012aba:	b29a      	uxth	r2, r3
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d00b      	beq.n	8012ae2 <tcp_process_refused_data+0xb2>
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6918      	ldr	r0, [r3, #16]
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	6879      	ldr	r1, [r7, #4]
 8012ada:	47a0      	blx	r4
 8012adc:	4603      	mov	r3, r0
 8012ade:	73fb      	strb	r3, [r7, #15]
 8012ae0:	e001      	b.n	8012ae6 <tcp_process_refused_data+0xb6>
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012aea:	f113 0f0d 	cmn.w	r3, #13
 8012aee:	d110      	bne.n	8012b12 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012af0:	f06f 030c 	mvn.w	r3, #12
 8012af4:	e00e      	b.n	8012b14 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012afa:	f113 0f0d 	cmn.w	r3, #13
 8012afe:	d102      	bne.n	8012b06 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012b00:	f06f 030c 	mvn.w	r3, #12
 8012b04:	e006      	b.n	8012b14 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	68ba      	ldr	r2, [r7, #8]
 8012b0a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8012b0c:	f06f 0304 	mvn.w	r3, #4
 8012b10:	e000      	b.n	8012b14 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012b12:	2300      	movs	r3, #0
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3714      	adds	r7, #20
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd90      	pop	{r4, r7, pc}
 8012b1c:	0802d054 	.word	0x0802d054
 8012b20:	0802d564 	.word	0x0802d564
 8012b24:	0802d098 	.word	0x0802d098

08012b28 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b084      	sub	sp, #16
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012b30:	e007      	b.n	8012b42 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f000 f80a 	bl	8012b52 <tcp_seg_free>
    seg = next;
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d1f4      	bne.n	8012b32 <tcp_segs_free+0xa>
  }
}
 8012b48:	bf00      	nop
 8012b4a:	bf00      	nop
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}

08012b52 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012b52:	b580      	push	{r7, lr}
 8012b54:	b082      	sub	sp, #8
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d00c      	beq.n	8012b7a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	685b      	ldr	r3, [r3, #4]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d004      	beq.n	8012b72 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	685b      	ldr	r3, [r3, #4]
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f7fe fc0b 	bl	8011388 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012b72:	6879      	ldr	r1, [r7, #4]
 8012b74:	2003      	movs	r0, #3
 8012b76:	f7fd fcdb 	bl	8010530 <memp_free>
  }
}
 8012b7a:	bf00      	nop
 8012b7c:	3708      	adds	r7, #8
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}
	...

08012b84 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b084      	sub	sp, #16
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d106      	bne.n	8012ba0 <tcp_seg_copy+0x1c>
 8012b92:	4b0f      	ldr	r3, [pc, #60]	@ (8012bd0 <tcp_seg_copy+0x4c>)
 8012b94:	f240 6282 	movw	r2, #1666	@ 0x682
 8012b98:	490e      	ldr	r1, [pc, #56]	@ (8012bd4 <tcp_seg_copy+0x50>)
 8012b9a:	480f      	ldr	r0, [pc, #60]	@ (8012bd8 <tcp_seg_copy+0x54>)
 8012b9c:	f016 fbc2 	bl	8029324 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012ba0:	2003      	movs	r0, #3
 8012ba2:	f7fd fc4f 	bl	8010444 <memp_malloc>
 8012ba6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d101      	bne.n	8012bb2 <tcp_seg_copy+0x2e>
    return NULL;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	e00a      	b.n	8012bc8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012bb2:	2210      	movs	r2, #16
 8012bb4:	6879      	ldr	r1, [r7, #4]
 8012bb6:	68f8      	ldr	r0, [r7, #12]
 8012bb8:	f016 fe57 	bl	802986a <memcpy>
  pbuf_ref(cseg->p);
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	685b      	ldr	r3, [r3, #4]
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7fe fc87 	bl	80114d4 <pbuf_ref>
  return cseg;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3710      	adds	r7, #16
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}
 8012bd0:	0802d054 	.word	0x0802d054
 8012bd4:	0802d5a8 	.word	0x0802d5a8
 8012bd8:	0802d098 	.word	0x0802d098

08012bdc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b084      	sub	sp, #16
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	60f8      	str	r0, [r7, #12]
 8012be4:	60b9      	str	r1, [r7, #8]
 8012be6:	607a      	str	r2, [r7, #4]
 8012be8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d109      	bne.n	8012c04 <tcp_recv_null+0x28>
 8012bf0:	4b12      	ldr	r3, [pc, #72]	@ (8012c3c <tcp_recv_null+0x60>)
 8012bf2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012bf6:	4912      	ldr	r1, [pc, #72]	@ (8012c40 <tcp_recv_null+0x64>)
 8012bf8:	4812      	ldr	r0, [pc, #72]	@ (8012c44 <tcp_recv_null+0x68>)
 8012bfa:	f016 fb93 	bl	8029324 <iprintf>
 8012bfe:	f06f 030f 	mvn.w	r3, #15
 8012c02:	e016      	b.n	8012c32 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d009      	beq.n	8012c1e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	891b      	ldrh	r3, [r3, #8]
 8012c0e:	4619      	mov	r1, r3
 8012c10:	68b8      	ldr	r0, [r7, #8]
 8012c12:	f7ff fad1 	bl	80121b8 <tcp_recved>
    pbuf_free(p);
 8012c16:	6878      	ldr	r0, [r7, #4]
 8012c18:	f7fe fbb6 	bl	8011388 <pbuf_free>
 8012c1c:	e008      	b.n	8012c30 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d104      	bne.n	8012c30 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012c26:	68b8      	ldr	r0, [r7, #8]
 8012c28:	f7ff f868 	bl	8011cfc <tcp_close>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	e000      	b.n	8012c32 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012c30:	2300      	movs	r3, #0
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3710      	adds	r7, #16
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}
 8012c3a:	bf00      	nop
 8012c3c:	0802d054 	.word	0x0802d054
 8012c40:	0802d5c4 	.word	0x0802d5c4
 8012c44:	0802d098 	.word	0x0802d098

08012c48 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b086      	sub	sp, #24
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	4603      	mov	r3, r0
 8012c50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	db01      	blt.n	8012c5e <tcp_kill_prio+0x16>
 8012c5a:	79fb      	ldrb	r3, [r7, #7]
 8012c5c:	e000      	b.n	8012c60 <tcp_kill_prio+0x18>
 8012c5e:	237f      	movs	r3, #127	@ 0x7f
 8012c60:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012c62:	7afb      	ldrb	r3, [r7, #11]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d034      	beq.n	8012cd2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012c68:	7afb      	ldrb	r3, [r7, #11]
 8012c6a:	3b01      	subs	r3, #1
 8012c6c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012c72:	2300      	movs	r3, #0
 8012c74:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c76:	4b19      	ldr	r3, [pc, #100]	@ (8012cdc <tcp_kill_prio+0x94>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	617b      	str	r3, [r7, #20]
 8012c7c:	e01f      	b.n	8012cbe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012c7e:	697b      	ldr	r3, [r7, #20]
 8012c80:	7d5b      	ldrb	r3, [r3, #21]
 8012c82:	7afa      	ldrb	r2, [r7, #11]
 8012c84:	429a      	cmp	r2, r3
 8012c86:	d80c      	bhi.n	8012ca2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012c88:	697b      	ldr	r3, [r7, #20]
 8012c8a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012c8c:	7afa      	ldrb	r2, [r7, #11]
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d112      	bne.n	8012cb8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012c92:	4b13      	ldr	r3, [pc, #76]	@ (8012ce0 <tcp_kill_prio+0x98>)
 8012c94:	681a      	ldr	r2, [r3, #0]
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	6a1b      	ldr	r3, [r3, #32]
 8012c9a:	1ad3      	subs	r3, r2, r3
 8012c9c:	68fa      	ldr	r2, [r7, #12]
 8012c9e:	429a      	cmp	r2, r3
 8012ca0:	d80a      	bhi.n	8012cb8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8012ce0 <tcp_kill_prio+0x98>)
 8012ca4:	681a      	ldr	r2, [r3, #0]
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	6a1b      	ldr	r3, [r3, #32]
 8012caa:	1ad3      	subs	r3, r2, r3
 8012cac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012cae:	697b      	ldr	r3, [r7, #20]
 8012cb0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	7d5b      	ldrb	r3, [r3, #21]
 8012cb6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	68db      	ldr	r3, [r3, #12]
 8012cbc:	617b      	str	r3, [r7, #20]
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d1dc      	bne.n	8012c7e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d004      	beq.n	8012cd4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012cca:	6938      	ldr	r0, [r7, #16]
 8012ccc:	f7ff f95c 	bl	8011f88 <tcp_abort>
 8012cd0:	e000      	b.n	8012cd4 <tcp_kill_prio+0x8c>
    return;
 8012cd2:	bf00      	nop
  }
}
 8012cd4:	3718      	adds	r7, #24
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	200425c0 	.word	0x200425c0
 8012ce0:	200425b4 	.word	0x200425b4

08012ce4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b086      	sub	sp, #24
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	4603      	mov	r3, r0
 8012cec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012cee:	79fb      	ldrb	r3, [r7, #7]
 8012cf0:	2b08      	cmp	r3, #8
 8012cf2:	d009      	beq.n	8012d08 <tcp_kill_state+0x24>
 8012cf4:	79fb      	ldrb	r3, [r7, #7]
 8012cf6:	2b09      	cmp	r3, #9
 8012cf8:	d006      	beq.n	8012d08 <tcp_kill_state+0x24>
 8012cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8012d64 <tcp_kill_state+0x80>)
 8012cfc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8012d00:	4919      	ldr	r1, [pc, #100]	@ (8012d68 <tcp_kill_state+0x84>)
 8012d02:	481a      	ldr	r0, [pc, #104]	@ (8012d6c <tcp_kill_state+0x88>)
 8012d04:	f016 fb0e 	bl	8029324 <iprintf>

  inactivity = 0;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d10:	4b17      	ldr	r3, [pc, #92]	@ (8012d70 <tcp_kill_state+0x8c>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	617b      	str	r3, [r7, #20]
 8012d16:	e017      	b.n	8012d48 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	7d1b      	ldrb	r3, [r3, #20]
 8012d1c:	79fa      	ldrb	r2, [r7, #7]
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	d10f      	bne.n	8012d42 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012d22:	4b14      	ldr	r3, [pc, #80]	@ (8012d74 <tcp_kill_state+0x90>)
 8012d24:	681a      	ldr	r2, [r3, #0]
 8012d26:	697b      	ldr	r3, [r7, #20]
 8012d28:	6a1b      	ldr	r3, [r3, #32]
 8012d2a:	1ad3      	subs	r3, r2, r3
 8012d2c:	68fa      	ldr	r2, [r7, #12]
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	d807      	bhi.n	8012d42 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012d32:	4b10      	ldr	r3, [pc, #64]	@ (8012d74 <tcp_kill_state+0x90>)
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	697b      	ldr	r3, [r7, #20]
 8012d38:	6a1b      	ldr	r3, [r3, #32]
 8012d3a:	1ad3      	subs	r3, r2, r3
 8012d3c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	68db      	ldr	r3, [r3, #12]
 8012d46:	617b      	str	r3, [r7, #20]
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d1e4      	bne.n	8012d18 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012d4e:	693b      	ldr	r3, [r7, #16]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d003      	beq.n	8012d5c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012d54:	2100      	movs	r1, #0
 8012d56:	6938      	ldr	r0, [r7, #16]
 8012d58:	f7ff f858 	bl	8011e0c <tcp_abandon>
  }
}
 8012d5c:	bf00      	nop
 8012d5e:	3718      	adds	r7, #24
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}
 8012d64:	0802d054 	.word	0x0802d054
 8012d68:	0802d5e0 	.word	0x0802d5e0
 8012d6c:	0802d098 	.word	0x0802d098
 8012d70:	200425c0 	.word	0x200425c0
 8012d74:	200425b4 	.word	0x200425b4

08012d78 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b084      	sub	sp, #16
 8012d7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012d82:	2300      	movs	r3, #0
 8012d84:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d86:	4b12      	ldr	r3, [pc, #72]	@ (8012dd0 <tcp_kill_timewait+0x58>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	60fb      	str	r3, [r7, #12]
 8012d8c:	e012      	b.n	8012db4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012d8e:	4b11      	ldr	r3, [pc, #68]	@ (8012dd4 <tcp_kill_timewait+0x5c>)
 8012d90:	681a      	ldr	r2, [r3, #0]
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	6a1b      	ldr	r3, [r3, #32]
 8012d96:	1ad3      	subs	r3, r2, r3
 8012d98:	687a      	ldr	r2, [r7, #4]
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d807      	bhi.n	8012dae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8012dd4 <tcp_kill_timewait+0x5c>)
 8012da0:	681a      	ldr	r2, [r3, #0]
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	6a1b      	ldr	r3, [r3, #32]
 8012da6:	1ad3      	subs	r3, r2, r3
 8012da8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	68db      	ldr	r3, [r3, #12]
 8012db2:	60fb      	str	r3, [r7, #12]
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d1e9      	bne.n	8012d8e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d002      	beq.n	8012dc6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012dc0:	68b8      	ldr	r0, [r7, #8]
 8012dc2:	f7ff f8e1 	bl	8011f88 <tcp_abort>
  }
}
 8012dc6:	bf00      	nop
 8012dc8:	3710      	adds	r7, #16
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	200425c4 	.word	0x200425c4
 8012dd4:	200425b4 	.word	0x200425b4

08012dd8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b082      	sub	sp, #8
 8012ddc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012dde:	4b10      	ldr	r3, [pc, #64]	@ (8012e20 <tcp_handle_closepend+0x48>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012de4:	e014      	b.n	8012e10 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	68db      	ldr	r3, [r3, #12]
 8012dea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	8b5b      	ldrh	r3, [r3, #26]
 8012df0:	f003 0308 	and.w	r3, r3, #8
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d009      	beq.n	8012e0c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	8b5b      	ldrh	r3, [r3, #26]
 8012dfc:	f023 0308 	bic.w	r3, r3, #8
 8012e00:	b29a      	uxth	r2, r3
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f7fe ff0e 	bl	8011c28 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d1e7      	bne.n	8012de6 <tcp_handle_closepend+0xe>
  }
}
 8012e16:	bf00      	nop
 8012e18:	bf00      	nop
 8012e1a:	3708      	adds	r7, #8
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}
 8012e20:	200425c0 	.word	0x200425c0

08012e24 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b084      	sub	sp, #16
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e2e:	2001      	movs	r0, #1
 8012e30:	f7fd fb08 	bl	8010444 <memp_malloc>
 8012e34:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d126      	bne.n	8012e8a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012e3c:	f7ff ffcc 	bl	8012dd8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012e40:	f7ff ff9a 	bl	8012d78 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e44:	2001      	movs	r0, #1
 8012e46:	f7fd fafd 	bl	8010444 <memp_malloc>
 8012e4a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d11b      	bne.n	8012e8a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012e52:	2009      	movs	r0, #9
 8012e54:	f7ff ff46 	bl	8012ce4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e58:	2001      	movs	r0, #1
 8012e5a:	f7fd faf3 	bl	8010444 <memp_malloc>
 8012e5e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d111      	bne.n	8012e8a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012e66:	2008      	movs	r0, #8
 8012e68:	f7ff ff3c 	bl	8012ce4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e6c:	2001      	movs	r0, #1
 8012e6e:	f7fd fae9 	bl	8010444 <memp_malloc>
 8012e72:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d107      	bne.n	8012e8a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012e7a:	79fb      	ldrb	r3, [r7, #7]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7ff fee3 	bl	8012c48 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e82:	2001      	movs	r0, #1
 8012e84:	f7fd fade 	bl	8010444 <memp_malloc>
 8012e88:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d03f      	beq.n	8012f10 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012e90:	229c      	movs	r2, #156	@ 0x9c
 8012e92:	2100      	movs	r1, #0
 8012e94:	68f8      	ldr	r0, [r7, #12]
 8012e96:	f016 fbc5 	bl	8029624 <memset>
    pcb->prio = prio;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	79fa      	ldrb	r2, [r7, #7]
 8012e9e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8012ea6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	22ff      	movs	r2, #255	@ 0xff
 8012ebe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012ec6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	2206      	movs	r2, #6
 8012ecc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	2206      	movs	r2, #6
 8012ed4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012edc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8012ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8012f1c <tcp_alloc+0xf8>)
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012eee:	4b0c      	ldr	r3, [pc, #48]	@ (8012f20 <tcp_alloc+0xfc>)
 8012ef0:	781a      	ldrb	r2, [r3, #0]
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8012efc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	4a08      	ldr	r2, [pc, #32]	@ (8012f24 <tcp_alloc+0x100>)
 8012f04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	4a07      	ldr	r2, [pc, #28]	@ (8012f28 <tcp_alloc+0x104>)
 8012f0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012f10:	68fb      	ldr	r3, [r7, #12]
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3710      	adds	r7, #16
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	200425b4 	.word	0x200425b4
 8012f20:	200425ca 	.word	0x200425ca
 8012f24:	08012bdd 	.word	0x08012bdd
 8012f28:	006ddd00 	.word	0x006ddd00

08012f2c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b084      	sub	sp, #16
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	4603      	mov	r3, r0
 8012f34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012f36:	2040      	movs	r0, #64	@ 0x40
 8012f38:	f7ff ff74 	bl	8012e24 <tcp_alloc>
 8012f3c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3710      	adds	r7, #16
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012f48:	b480      	push	{r7}
 8012f4a:	b083      	sub	sp, #12
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d002      	beq.n	8012f5e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	683a      	ldr	r2, [r7, #0]
 8012f5c:	611a      	str	r2, [r3, #16]
  }
}
 8012f5e:	bf00      	nop
 8012f60:	370c      	adds	r7, #12
 8012f62:	46bd      	mov	sp, r7
 8012f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f68:	4770      	bx	lr
	...

08012f6c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d00e      	beq.n	8012f9a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	7d1b      	ldrb	r3, [r3, #20]
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	d106      	bne.n	8012f92 <tcp_recv+0x26>
 8012f84:	4b07      	ldr	r3, [pc, #28]	@ (8012fa4 <tcp_recv+0x38>)
 8012f86:	f240 72df 	movw	r2, #2015	@ 0x7df
 8012f8a:	4907      	ldr	r1, [pc, #28]	@ (8012fa8 <tcp_recv+0x3c>)
 8012f8c:	4807      	ldr	r0, [pc, #28]	@ (8012fac <tcp_recv+0x40>)
 8012f8e:	f016 f9c9 	bl	8029324 <iprintf>
    pcb->recv = recv;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	683a      	ldr	r2, [r7, #0]
 8012f96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8012f9a:	bf00      	nop
 8012f9c:	3708      	adds	r7, #8
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
 8012fa2:	bf00      	nop
 8012fa4:	0802d054 	.word	0x0802d054
 8012fa8:	0802d5f0 	.word	0x0802d5f0
 8012fac:	0802d098 	.word	0x0802d098

08012fb0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b082      	sub	sp, #8
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d00e      	beq.n	8012fde <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	7d1b      	ldrb	r3, [r3, #20]
 8012fc4:	2b01      	cmp	r3, #1
 8012fc6:	d106      	bne.n	8012fd6 <tcp_sent+0x26>
 8012fc8:	4b07      	ldr	r3, [pc, #28]	@ (8012fe8 <tcp_sent+0x38>)
 8012fca:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8012fce:	4907      	ldr	r1, [pc, #28]	@ (8012fec <tcp_sent+0x3c>)
 8012fd0:	4807      	ldr	r0, [pc, #28]	@ (8012ff0 <tcp_sent+0x40>)
 8012fd2:	f016 f9a7 	bl	8029324 <iprintf>
    pcb->sent = sent;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	683a      	ldr	r2, [r7, #0]
 8012fda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8012fde:	bf00      	nop
 8012fe0:	3708      	adds	r7, #8
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	0802d054 	.word	0x0802d054
 8012fec:	0802d618 	.word	0x0802d618
 8012ff0:	0802d098 	.word	0x0802d098

08012ff4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b082      	sub	sp, #8
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
 8012ffc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d00e      	beq.n	8013022 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	7d1b      	ldrb	r3, [r3, #20]
 8013008:	2b01      	cmp	r3, #1
 801300a:	d106      	bne.n	801301a <tcp_err+0x26>
 801300c:	4b07      	ldr	r3, [pc, #28]	@ (801302c <tcp_err+0x38>)
 801300e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8013012:	4907      	ldr	r1, [pc, #28]	@ (8013030 <tcp_err+0x3c>)
 8013014:	4807      	ldr	r0, [pc, #28]	@ (8013034 <tcp_err+0x40>)
 8013016:	f016 f985 	bl	8029324 <iprintf>
    pcb->errf = err;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	683a      	ldr	r2, [r7, #0]
 801301e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8013022:	bf00      	nop
 8013024:	3708      	adds	r7, #8
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}
 801302a:	bf00      	nop
 801302c:	0802d054 	.word	0x0802d054
 8013030:	0802d640 	.word	0x0802d640
 8013034:	0802d098 	.word	0x0802d098

08013038 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013038:	b480      	push	{r7}
 801303a:	b085      	sub	sp, #20
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d008      	beq.n	801305a <tcp_accept+0x22>
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	7d1b      	ldrb	r3, [r3, #20]
 801304c:	2b01      	cmp	r3, #1
 801304e:	d104      	bne.n	801305a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	683a      	ldr	r2, [r7, #0]
 8013058:	619a      	str	r2, [r3, #24]
  }
}
 801305a:	bf00      	nop
 801305c:	3714      	adds	r7, #20
 801305e:	46bd      	mov	sp, r7
 8013060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013064:	4770      	bx	lr
	...

08013068 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b084      	sub	sp, #16
 801306c:	af00      	add	r7, sp, #0
 801306e:	60f8      	str	r0, [r7, #12]
 8013070:	60b9      	str	r1, [r7, #8]
 8013072:	4613      	mov	r3, r2
 8013074:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d107      	bne.n	801308c <tcp_poll+0x24>
 801307c:	4b0e      	ldr	r3, [pc, #56]	@ (80130b8 <tcp_poll+0x50>)
 801307e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8013082:	490e      	ldr	r1, [pc, #56]	@ (80130bc <tcp_poll+0x54>)
 8013084:	480e      	ldr	r0, [pc, #56]	@ (80130c0 <tcp_poll+0x58>)
 8013086:	f016 f94d 	bl	8029324 <iprintf>
 801308a:	e011      	b.n	80130b0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	7d1b      	ldrb	r3, [r3, #20]
 8013090:	2b01      	cmp	r3, #1
 8013092:	d106      	bne.n	80130a2 <tcp_poll+0x3a>
 8013094:	4b08      	ldr	r3, [pc, #32]	@ (80130b8 <tcp_poll+0x50>)
 8013096:	f640 023e 	movw	r2, #2110	@ 0x83e
 801309a:	490a      	ldr	r1, [pc, #40]	@ (80130c4 <tcp_poll+0x5c>)
 801309c:	4808      	ldr	r0, [pc, #32]	@ (80130c0 <tcp_poll+0x58>)
 801309e:	f016 f941 	bl	8029324 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	68ba      	ldr	r2, [r7, #8]
 80130a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	79fa      	ldrb	r2, [r7, #7]
 80130ae:	775a      	strb	r2, [r3, #29]
}
 80130b0:	3710      	adds	r7, #16
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}
 80130b6:	bf00      	nop
 80130b8:	0802d054 	.word	0x0802d054
 80130bc:	0802d668 	.word	0x0802d668
 80130c0:	0802d098 	.word	0x0802d098
 80130c4:	0802d680 	.word	0x0802d680

080130c8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d107      	bne.n	80130e6 <tcp_pcb_purge+0x1e>
 80130d6:	4b21      	ldr	r3, [pc, #132]	@ (801315c <tcp_pcb_purge+0x94>)
 80130d8:	f640 0251 	movw	r2, #2129	@ 0x851
 80130dc:	4920      	ldr	r1, [pc, #128]	@ (8013160 <tcp_pcb_purge+0x98>)
 80130de:	4821      	ldr	r0, [pc, #132]	@ (8013164 <tcp_pcb_purge+0x9c>)
 80130e0:	f016 f920 	bl	8029324 <iprintf>
 80130e4:	e037      	b.n	8013156 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	7d1b      	ldrb	r3, [r3, #20]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d033      	beq.n	8013156 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80130f2:	2b0a      	cmp	r3, #10
 80130f4:	d02f      	beq.n	8013156 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80130fa:	2b01      	cmp	r3, #1
 80130fc:	d02b      	beq.n	8013156 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013102:	2b00      	cmp	r3, #0
 8013104:	d007      	beq.n	8013116 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801310a:	4618      	mov	r0, r3
 801310c:	f7fe f93c 	bl	8011388 <pbuf_free>
      pcb->refused_data = NULL;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2200      	movs	r2, #0
 8013114:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801311a:	2b00      	cmp	r3, #0
 801311c:	d002      	beq.n	8013124 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f000 f986 	bl	8013430 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801312a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013130:	4618      	mov	r0, r3
 8013132:	f7ff fcf9 	bl	8012b28 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801313a:	4618      	mov	r0, r3
 801313c:	f7ff fcf4 	bl	8012b28 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2200      	movs	r2, #0
 8013144:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2200      	movs	r2, #0
 8013152:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013156:	3708      	adds	r7, #8
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}
 801315c:	0802d054 	.word	0x0802d054
 8013160:	0802d6a0 	.word	0x0802d6a0
 8013164:	0802d098 	.word	0x0802d098

08013168 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d106      	bne.n	8013186 <tcp_pcb_remove+0x1e>
 8013178:	4b3e      	ldr	r3, [pc, #248]	@ (8013274 <tcp_pcb_remove+0x10c>)
 801317a:	f640 0283 	movw	r2, #2179	@ 0x883
 801317e:	493e      	ldr	r1, [pc, #248]	@ (8013278 <tcp_pcb_remove+0x110>)
 8013180:	483e      	ldr	r0, [pc, #248]	@ (801327c <tcp_pcb_remove+0x114>)
 8013182:	f016 f8cf 	bl	8029324 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d106      	bne.n	801319a <tcp_pcb_remove+0x32>
 801318c:	4b39      	ldr	r3, [pc, #228]	@ (8013274 <tcp_pcb_remove+0x10c>)
 801318e:	f640 0284 	movw	r2, #2180	@ 0x884
 8013192:	493b      	ldr	r1, [pc, #236]	@ (8013280 <tcp_pcb_remove+0x118>)
 8013194:	4839      	ldr	r0, [pc, #228]	@ (801327c <tcp_pcb_remove+0x114>)
 8013196:	f016 f8c5 	bl	8029324 <iprintf>

  TCP_RMV(pcblist, pcb);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	683a      	ldr	r2, [r7, #0]
 80131a0:	429a      	cmp	r2, r3
 80131a2:	d105      	bne.n	80131b0 <tcp_pcb_remove+0x48>
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	68da      	ldr	r2, [r3, #12]
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	601a      	str	r2, [r3, #0]
 80131ae:	e013      	b.n	80131d8 <tcp_pcb_remove+0x70>
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	60fb      	str	r3, [r7, #12]
 80131b6:	e00c      	b.n	80131d2 <tcp_pcb_remove+0x6a>
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	68db      	ldr	r3, [r3, #12]
 80131bc:	683a      	ldr	r2, [r7, #0]
 80131be:	429a      	cmp	r2, r3
 80131c0:	d104      	bne.n	80131cc <tcp_pcb_remove+0x64>
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	68da      	ldr	r2, [r3, #12]
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	60da      	str	r2, [r3, #12]
 80131ca:	e005      	b.n	80131d8 <tcp_pcb_remove+0x70>
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	68db      	ldr	r3, [r3, #12]
 80131d0:	60fb      	str	r3, [r7, #12]
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d1ef      	bne.n	80131b8 <tcp_pcb_remove+0x50>
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	2200      	movs	r2, #0
 80131dc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80131de:	6838      	ldr	r0, [r7, #0]
 80131e0:	f7ff ff72 	bl	80130c8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	7d1b      	ldrb	r3, [r3, #20]
 80131e8:	2b0a      	cmp	r3, #10
 80131ea:	d013      	beq.n	8013214 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80131f0:	2b01      	cmp	r3, #1
 80131f2:	d00f      	beq.n	8013214 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	8b5b      	ldrh	r3, [r3, #26]
 80131f8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d009      	beq.n	8013214 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	8b5b      	ldrh	r3, [r3, #26]
 8013204:	f043 0302 	orr.w	r3, r3, #2
 8013208:	b29a      	uxth	r2, r3
 801320a:	683b      	ldr	r3, [r7, #0]
 801320c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801320e:	6838      	ldr	r0, [r7, #0]
 8013210:	f003 fbc0 	bl	8016994 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	7d1b      	ldrb	r3, [r3, #20]
 8013218:	2b01      	cmp	r3, #1
 801321a:	d020      	beq.n	801325e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013220:	2b00      	cmp	r3, #0
 8013222:	d006      	beq.n	8013232 <tcp_pcb_remove+0xca>
 8013224:	4b13      	ldr	r3, [pc, #76]	@ (8013274 <tcp_pcb_remove+0x10c>)
 8013226:	f640 0293 	movw	r2, #2195	@ 0x893
 801322a:	4916      	ldr	r1, [pc, #88]	@ (8013284 <tcp_pcb_remove+0x11c>)
 801322c:	4813      	ldr	r0, [pc, #76]	@ (801327c <tcp_pcb_remove+0x114>)
 801322e:	f016 f879 	bl	8029324 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013236:	2b00      	cmp	r3, #0
 8013238:	d006      	beq.n	8013248 <tcp_pcb_remove+0xe0>
 801323a:	4b0e      	ldr	r3, [pc, #56]	@ (8013274 <tcp_pcb_remove+0x10c>)
 801323c:	f640 0294 	movw	r2, #2196	@ 0x894
 8013240:	4911      	ldr	r1, [pc, #68]	@ (8013288 <tcp_pcb_remove+0x120>)
 8013242:	480e      	ldr	r0, [pc, #56]	@ (801327c <tcp_pcb_remove+0x114>)
 8013244:	f016 f86e 	bl	8029324 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801324c:	2b00      	cmp	r3, #0
 801324e:	d006      	beq.n	801325e <tcp_pcb_remove+0xf6>
 8013250:	4b08      	ldr	r3, [pc, #32]	@ (8013274 <tcp_pcb_remove+0x10c>)
 8013252:	f640 0296 	movw	r2, #2198	@ 0x896
 8013256:	490d      	ldr	r1, [pc, #52]	@ (801328c <tcp_pcb_remove+0x124>)
 8013258:	4808      	ldr	r0, [pc, #32]	@ (801327c <tcp_pcb_remove+0x114>)
 801325a:	f016 f863 	bl	8029324 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	2200      	movs	r2, #0
 8013262:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	2200      	movs	r2, #0
 8013268:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801326a:	bf00      	nop
 801326c:	3710      	adds	r7, #16
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}
 8013272:	bf00      	nop
 8013274:	0802d054 	.word	0x0802d054
 8013278:	0802d6bc 	.word	0x0802d6bc
 801327c:	0802d098 	.word	0x0802d098
 8013280:	0802d6d8 	.word	0x0802d6d8
 8013284:	0802d6f8 	.word	0x0802d6f8
 8013288:	0802d710 	.word	0x0802d710
 801328c:	0802d72c 	.word	0x0802d72c

08013290 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b082      	sub	sp, #8
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d106      	bne.n	80132ac <tcp_next_iss+0x1c>
 801329e:	4b0a      	ldr	r3, [pc, #40]	@ (80132c8 <tcp_next_iss+0x38>)
 80132a0:	f640 02af 	movw	r2, #2223	@ 0x8af
 80132a4:	4909      	ldr	r1, [pc, #36]	@ (80132cc <tcp_next_iss+0x3c>)
 80132a6:	480a      	ldr	r0, [pc, #40]	@ (80132d0 <tcp_next_iss+0x40>)
 80132a8:	f016 f83c 	bl	8029324 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80132ac:	4b09      	ldr	r3, [pc, #36]	@ (80132d4 <tcp_next_iss+0x44>)
 80132ae:	681a      	ldr	r2, [r3, #0]
 80132b0:	4b09      	ldr	r3, [pc, #36]	@ (80132d8 <tcp_next_iss+0x48>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	4413      	add	r3, r2
 80132b6:	4a07      	ldr	r2, [pc, #28]	@ (80132d4 <tcp_next_iss+0x44>)
 80132b8:	6013      	str	r3, [r2, #0]
  return iss;
 80132ba:	4b06      	ldr	r3, [pc, #24]	@ (80132d4 <tcp_next_iss+0x44>)
 80132bc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3708      	adds	r7, #8
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
 80132c6:	bf00      	nop
 80132c8:	0802d054 	.word	0x0802d054
 80132cc:	0802d744 	.word	0x0802d744
 80132d0:	0802d098 	.word	0x0802d098
 80132d4:	20000030 	.word	0x20000030
 80132d8:	200425b4 	.word	0x200425b4

080132dc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b086      	sub	sp, #24
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	4603      	mov	r3, r0
 80132e4:	60b9      	str	r1, [r7, #8]
 80132e6:	607a      	str	r2, [r7, #4]
 80132e8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d106      	bne.n	80132fe <tcp_eff_send_mss_netif+0x22>
 80132f0:	4b14      	ldr	r3, [pc, #80]	@ (8013344 <tcp_eff_send_mss_netif+0x68>)
 80132f2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80132f6:	4914      	ldr	r1, [pc, #80]	@ (8013348 <tcp_eff_send_mss_netif+0x6c>)
 80132f8:	4814      	ldr	r0, [pc, #80]	@ (801334c <tcp_eff_send_mss_netif+0x70>)
 80132fa:	f016 f813 	bl	8029324 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d101      	bne.n	8013308 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013304:	89fb      	ldrh	r3, [r7, #14]
 8013306:	e019      	b.n	801333c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801330c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801330e:	8afb      	ldrh	r3, [r7, #22]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d012      	beq.n	801333a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013314:	2328      	movs	r3, #40	@ 0x28
 8013316:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013318:	8afa      	ldrh	r2, [r7, #22]
 801331a:	8abb      	ldrh	r3, [r7, #20]
 801331c:	429a      	cmp	r2, r3
 801331e:	d904      	bls.n	801332a <tcp_eff_send_mss_netif+0x4e>
 8013320:	8afa      	ldrh	r2, [r7, #22]
 8013322:	8abb      	ldrh	r3, [r7, #20]
 8013324:	1ad3      	subs	r3, r2, r3
 8013326:	b29b      	uxth	r3, r3
 8013328:	e000      	b.n	801332c <tcp_eff_send_mss_netif+0x50>
 801332a:	2300      	movs	r3, #0
 801332c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801332e:	8a7a      	ldrh	r2, [r7, #18]
 8013330:	89fb      	ldrh	r3, [r7, #14]
 8013332:	4293      	cmp	r3, r2
 8013334:	bf28      	it	cs
 8013336:	4613      	movcs	r3, r2
 8013338:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801333a:	89fb      	ldrh	r3, [r7, #14]
}
 801333c:	4618      	mov	r0, r3
 801333e:	3718      	adds	r7, #24
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	0802d054 	.word	0x0802d054
 8013348:	0802d760 	.word	0x0802d760
 801334c:	0802d098 	.word	0x0802d098

08013350 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b084      	sub	sp, #16
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
 8013358:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d119      	bne.n	8013398 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013364:	4b10      	ldr	r3, [pc, #64]	@ (80133a8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013366:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801336a:	4910      	ldr	r1, [pc, #64]	@ (80133ac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801336c:	4810      	ldr	r0, [pc, #64]	@ (80133b0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801336e:	f015 ffd9 	bl	8029324 <iprintf>

  while (pcb != NULL) {
 8013372:	e011      	b.n	8013398 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	681a      	ldr	r2, [r3, #0]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	429a      	cmp	r2, r3
 801337e:	d108      	bne.n	8013392 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	68db      	ldr	r3, [r3, #12]
 8013384:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013386:	68f8      	ldr	r0, [r7, #12]
 8013388:	f7fe fdfe 	bl	8011f88 <tcp_abort>
      pcb = next;
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	60fb      	str	r3, [r7, #12]
 8013390:	e002      	b.n	8013398 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	68db      	ldr	r3, [r3, #12]
 8013396:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d1ea      	bne.n	8013374 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801339e:	bf00      	nop
 80133a0:	bf00      	nop
 80133a2:	3710      	adds	r7, #16
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}
 80133a8:	0802d054 	.word	0x0802d054
 80133ac:	0802d788 	.word	0x0802d788
 80133b0:	0802d098 	.word	0x0802d098

080133b4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b084      	sub	sp, #16
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d02a      	beq.n	801341a <tcp_netif_ip_addr_changed+0x66>
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d026      	beq.n	801341a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80133cc:	4b15      	ldr	r3, [pc, #84]	@ (8013424 <tcp_netif_ip_addr_changed+0x70>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	4619      	mov	r1, r3
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f7ff ffbc 	bl	8013350 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80133d8:	4b13      	ldr	r3, [pc, #76]	@ (8013428 <tcp_netif_ip_addr_changed+0x74>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	4619      	mov	r1, r3
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f7ff ffb6 	bl	8013350 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d017      	beq.n	801341a <tcp_netif_ip_addr_changed+0x66>
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d013      	beq.n	801341a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80133f2:	4b0e      	ldr	r3, [pc, #56]	@ (801342c <tcp_netif_ip_addr_changed+0x78>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	60fb      	str	r3, [r7, #12]
 80133f8:	e00c      	b.n	8013414 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	681a      	ldr	r2, [r3, #0]
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	429a      	cmp	r2, r3
 8013404:	d103      	bne.n	801340e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	681a      	ldr	r2, [r3, #0]
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	68db      	ldr	r3, [r3, #12]
 8013412:	60fb      	str	r3, [r7, #12]
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d1ef      	bne.n	80133fa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801341a:	bf00      	nop
 801341c:	3710      	adds	r7, #16
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	200425c0 	.word	0x200425c0
 8013428:	200425b8 	.word	0x200425b8
 801342c:	200425bc 	.word	0x200425bc

08013430 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b082      	sub	sp, #8
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801343c:	2b00      	cmp	r3, #0
 801343e:	d007      	beq.n	8013450 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013444:	4618      	mov	r0, r3
 8013446:	f7ff fb6f 	bl	8012b28 <tcp_segs_free>
    pcb->ooseq = NULL;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2200      	movs	r2, #0
 801344e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013450:	bf00      	nop
 8013452:	3708      	adds	r7, #8
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}

08013458 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013458:	b590      	push	{r4, r7, lr}
 801345a:	b08d      	sub	sp, #52	@ 0x34
 801345c:	af04      	add	r7, sp, #16
 801345e:	6078      	str	r0, [r7, #4]
 8013460:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d105      	bne.n	8013474 <tcp_input+0x1c>
 8013468:	4b9b      	ldr	r3, [pc, #620]	@ (80136d8 <tcp_input+0x280>)
 801346a:	2283      	movs	r2, #131	@ 0x83
 801346c:	499b      	ldr	r1, [pc, #620]	@ (80136dc <tcp_input+0x284>)
 801346e:	489c      	ldr	r0, [pc, #624]	@ (80136e0 <tcp_input+0x288>)
 8013470:	f015 ff58 	bl	8029324 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	685b      	ldr	r3, [r3, #4]
 8013478:	4a9a      	ldr	r2, [pc, #616]	@ (80136e4 <tcp_input+0x28c>)
 801347a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	895b      	ldrh	r3, [r3, #10]
 8013480:	2b13      	cmp	r3, #19
 8013482:	f240 83d1 	bls.w	8013c28 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013486:	4b98      	ldr	r3, [pc, #608]	@ (80136e8 <tcp_input+0x290>)
 8013488:	695b      	ldr	r3, [r3, #20]
 801348a:	4a97      	ldr	r2, [pc, #604]	@ (80136e8 <tcp_input+0x290>)
 801348c:	6812      	ldr	r2, [r2, #0]
 801348e:	4611      	mov	r1, r2
 8013490:	4618      	mov	r0, r3
 8013492:	f007 f975 	bl	801a780 <ip4_addr_isbroadcast_u32>
 8013496:	4603      	mov	r3, r0
 8013498:	2b00      	cmp	r3, #0
 801349a:	f040 83c7 	bne.w	8013c2c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801349e:	4b92      	ldr	r3, [pc, #584]	@ (80136e8 <tcp_input+0x290>)
 80134a0:	695b      	ldr	r3, [r3, #20]
 80134a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80134a6:	2be0      	cmp	r3, #224	@ 0xe0
 80134a8:	f000 83c0 	beq.w	8013c2c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80134ac:	4b8d      	ldr	r3, [pc, #564]	@ (80136e4 <tcp_input+0x28c>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	899b      	ldrh	r3, [r3, #12]
 80134b2:	b29b      	uxth	r3, r3
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7fc fa6d 	bl	800f994 <lwip_htons>
 80134ba:	4603      	mov	r3, r0
 80134bc:	0b1b      	lsrs	r3, r3, #12
 80134be:	b29b      	uxth	r3, r3
 80134c0:	b2db      	uxtb	r3, r3
 80134c2:	009b      	lsls	r3, r3, #2
 80134c4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80134c6:	7cbb      	ldrb	r3, [r7, #18]
 80134c8:	2b13      	cmp	r3, #19
 80134ca:	f240 83b1 	bls.w	8013c30 <tcp_input+0x7d8>
 80134ce:	7cbb      	ldrb	r3, [r7, #18]
 80134d0:	b29a      	uxth	r2, r3
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	891b      	ldrh	r3, [r3, #8]
 80134d6:	429a      	cmp	r2, r3
 80134d8:	f200 83aa 	bhi.w	8013c30 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80134dc:	7cbb      	ldrb	r3, [r7, #18]
 80134de:	b29b      	uxth	r3, r3
 80134e0:	3b14      	subs	r3, #20
 80134e2:	b29a      	uxth	r2, r3
 80134e4:	4b81      	ldr	r3, [pc, #516]	@ (80136ec <tcp_input+0x294>)
 80134e6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80134e8:	4b81      	ldr	r3, [pc, #516]	@ (80136f0 <tcp_input+0x298>)
 80134ea:	2200      	movs	r2, #0
 80134ec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	895a      	ldrh	r2, [r3, #10]
 80134f2:	7cbb      	ldrb	r3, [r7, #18]
 80134f4:	b29b      	uxth	r3, r3
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d309      	bcc.n	801350e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80134fa:	4b7c      	ldr	r3, [pc, #496]	@ (80136ec <tcp_input+0x294>)
 80134fc:	881a      	ldrh	r2, [r3, #0]
 80134fe:	4b7d      	ldr	r3, [pc, #500]	@ (80136f4 <tcp_input+0x29c>)
 8013500:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013502:	7cbb      	ldrb	r3, [r7, #18]
 8013504:	4619      	mov	r1, r3
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f7fd fe86 	bl	8011218 <pbuf_remove_header>
 801350c:	e04e      	b.n	80135ac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d105      	bne.n	8013522 <tcp_input+0xca>
 8013516:	4b70      	ldr	r3, [pc, #448]	@ (80136d8 <tcp_input+0x280>)
 8013518:	22c2      	movs	r2, #194	@ 0xc2
 801351a:	4977      	ldr	r1, [pc, #476]	@ (80136f8 <tcp_input+0x2a0>)
 801351c:	4870      	ldr	r0, [pc, #448]	@ (80136e0 <tcp_input+0x288>)
 801351e:	f015 ff01 	bl	8029324 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013522:	2114      	movs	r1, #20
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7fd fe77 	bl	8011218 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	895a      	ldrh	r2, [r3, #10]
 801352e:	4b71      	ldr	r3, [pc, #452]	@ (80136f4 <tcp_input+0x29c>)
 8013530:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013532:	4b6e      	ldr	r3, [pc, #440]	@ (80136ec <tcp_input+0x294>)
 8013534:	881a      	ldrh	r2, [r3, #0]
 8013536:	4b6f      	ldr	r3, [pc, #444]	@ (80136f4 <tcp_input+0x29c>)
 8013538:	881b      	ldrh	r3, [r3, #0]
 801353a:	1ad3      	subs	r3, r2, r3
 801353c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801353e:	4b6d      	ldr	r3, [pc, #436]	@ (80136f4 <tcp_input+0x29c>)
 8013540:	881b      	ldrh	r3, [r3, #0]
 8013542:	4619      	mov	r1, r3
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f7fd fe67 	bl	8011218 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	895b      	ldrh	r3, [r3, #10]
 8013550:	8a3a      	ldrh	r2, [r7, #16]
 8013552:	429a      	cmp	r2, r3
 8013554:	f200 836e 	bhi.w	8013c34 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	4a64      	ldr	r2, [pc, #400]	@ (80136f0 <tcp_input+0x298>)
 8013560:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	8a3a      	ldrh	r2, [r7, #16]
 8013568:	4611      	mov	r1, r2
 801356a:	4618      	mov	r0, r3
 801356c:	f7fd fe54 	bl	8011218 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	891a      	ldrh	r2, [r3, #8]
 8013574:	8a3b      	ldrh	r3, [r7, #16]
 8013576:	1ad3      	subs	r3, r2, r3
 8013578:	b29a      	uxth	r2, r3
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	895b      	ldrh	r3, [r3, #10]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d005      	beq.n	8013592 <tcp_input+0x13a>
 8013586:	4b54      	ldr	r3, [pc, #336]	@ (80136d8 <tcp_input+0x280>)
 8013588:	22df      	movs	r2, #223	@ 0xdf
 801358a:	495c      	ldr	r1, [pc, #368]	@ (80136fc <tcp_input+0x2a4>)
 801358c:	4854      	ldr	r0, [pc, #336]	@ (80136e0 <tcp_input+0x288>)
 801358e:	f015 fec9 	bl	8029324 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	891a      	ldrh	r2, [r3, #8]
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	891b      	ldrh	r3, [r3, #8]
 801359c:	429a      	cmp	r2, r3
 801359e:	d005      	beq.n	80135ac <tcp_input+0x154>
 80135a0:	4b4d      	ldr	r3, [pc, #308]	@ (80136d8 <tcp_input+0x280>)
 80135a2:	22e0      	movs	r2, #224	@ 0xe0
 80135a4:	4956      	ldr	r1, [pc, #344]	@ (8013700 <tcp_input+0x2a8>)
 80135a6:	484e      	ldr	r0, [pc, #312]	@ (80136e0 <tcp_input+0x288>)
 80135a8:	f015 febc 	bl	8029324 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80135ac:	4b4d      	ldr	r3, [pc, #308]	@ (80136e4 <tcp_input+0x28c>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	881b      	ldrh	r3, [r3, #0]
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	4a4b      	ldr	r2, [pc, #300]	@ (80136e4 <tcp_input+0x28c>)
 80135b6:	6814      	ldr	r4, [r2, #0]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7fc f9eb 	bl	800f994 <lwip_htons>
 80135be:	4603      	mov	r3, r0
 80135c0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80135c2:	4b48      	ldr	r3, [pc, #288]	@ (80136e4 <tcp_input+0x28c>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	885b      	ldrh	r3, [r3, #2]
 80135c8:	b29b      	uxth	r3, r3
 80135ca:	4a46      	ldr	r2, [pc, #280]	@ (80136e4 <tcp_input+0x28c>)
 80135cc:	6814      	ldr	r4, [r2, #0]
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7fc f9e0 	bl	800f994 <lwip_htons>
 80135d4:	4603      	mov	r3, r0
 80135d6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80135d8:	4b42      	ldr	r3, [pc, #264]	@ (80136e4 <tcp_input+0x28c>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	4a41      	ldr	r2, [pc, #260]	@ (80136e4 <tcp_input+0x28c>)
 80135e0:	6814      	ldr	r4, [r2, #0]
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7fc f9eb 	bl	800f9be <lwip_htonl>
 80135e8:	4603      	mov	r3, r0
 80135ea:	6063      	str	r3, [r4, #4]
 80135ec:	6863      	ldr	r3, [r4, #4]
 80135ee:	4a45      	ldr	r2, [pc, #276]	@ (8013704 <tcp_input+0x2ac>)
 80135f0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80135f2:	4b3c      	ldr	r3, [pc, #240]	@ (80136e4 <tcp_input+0x28c>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	689b      	ldr	r3, [r3, #8]
 80135f8:	4a3a      	ldr	r2, [pc, #232]	@ (80136e4 <tcp_input+0x28c>)
 80135fa:	6814      	ldr	r4, [r2, #0]
 80135fc:	4618      	mov	r0, r3
 80135fe:	f7fc f9de 	bl	800f9be <lwip_htonl>
 8013602:	4603      	mov	r3, r0
 8013604:	60a3      	str	r3, [r4, #8]
 8013606:	68a3      	ldr	r3, [r4, #8]
 8013608:	4a3f      	ldr	r2, [pc, #252]	@ (8013708 <tcp_input+0x2b0>)
 801360a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801360c:	4b35      	ldr	r3, [pc, #212]	@ (80136e4 <tcp_input+0x28c>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	89db      	ldrh	r3, [r3, #14]
 8013612:	b29b      	uxth	r3, r3
 8013614:	4a33      	ldr	r2, [pc, #204]	@ (80136e4 <tcp_input+0x28c>)
 8013616:	6814      	ldr	r4, [r2, #0]
 8013618:	4618      	mov	r0, r3
 801361a:	f7fc f9bb 	bl	800f994 <lwip_htons>
 801361e:	4603      	mov	r3, r0
 8013620:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013622:	4b30      	ldr	r3, [pc, #192]	@ (80136e4 <tcp_input+0x28c>)
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	899b      	ldrh	r3, [r3, #12]
 8013628:	b29b      	uxth	r3, r3
 801362a:	4618      	mov	r0, r3
 801362c:	f7fc f9b2 	bl	800f994 <lwip_htons>
 8013630:	4603      	mov	r3, r0
 8013632:	b2db      	uxtb	r3, r3
 8013634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013638:	b2da      	uxtb	r2, r3
 801363a:	4b34      	ldr	r3, [pc, #208]	@ (801370c <tcp_input+0x2b4>)
 801363c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	891a      	ldrh	r2, [r3, #8]
 8013642:	4b33      	ldr	r3, [pc, #204]	@ (8013710 <tcp_input+0x2b8>)
 8013644:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013646:	4b31      	ldr	r3, [pc, #196]	@ (801370c <tcp_input+0x2b4>)
 8013648:	781b      	ldrb	r3, [r3, #0]
 801364a:	f003 0303 	and.w	r3, r3, #3
 801364e:	2b00      	cmp	r3, #0
 8013650:	d00c      	beq.n	801366c <tcp_input+0x214>
    tcplen++;
 8013652:	4b2f      	ldr	r3, [pc, #188]	@ (8013710 <tcp_input+0x2b8>)
 8013654:	881b      	ldrh	r3, [r3, #0]
 8013656:	3301      	adds	r3, #1
 8013658:	b29a      	uxth	r2, r3
 801365a:	4b2d      	ldr	r3, [pc, #180]	@ (8013710 <tcp_input+0x2b8>)
 801365c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	891a      	ldrh	r2, [r3, #8]
 8013662:	4b2b      	ldr	r3, [pc, #172]	@ (8013710 <tcp_input+0x2b8>)
 8013664:	881b      	ldrh	r3, [r3, #0]
 8013666:	429a      	cmp	r2, r3
 8013668:	f200 82e6 	bhi.w	8013c38 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801366c:	2300      	movs	r3, #0
 801366e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013670:	4b28      	ldr	r3, [pc, #160]	@ (8013714 <tcp_input+0x2bc>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	61fb      	str	r3, [r7, #28]
 8013676:	e09d      	b.n	80137b4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013678:	69fb      	ldr	r3, [r7, #28]
 801367a:	7d1b      	ldrb	r3, [r3, #20]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d105      	bne.n	801368c <tcp_input+0x234>
 8013680:	4b15      	ldr	r3, [pc, #84]	@ (80136d8 <tcp_input+0x280>)
 8013682:	22fb      	movs	r2, #251	@ 0xfb
 8013684:	4924      	ldr	r1, [pc, #144]	@ (8013718 <tcp_input+0x2c0>)
 8013686:	4816      	ldr	r0, [pc, #88]	@ (80136e0 <tcp_input+0x288>)
 8013688:	f015 fe4c 	bl	8029324 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	7d1b      	ldrb	r3, [r3, #20]
 8013690:	2b0a      	cmp	r3, #10
 8013692:	d105      	bne.n	80136a0 <tcp_input+0x248>
 8013694:	4b10      	ldr	r3, [pc, #64]	@ (80136d8 <tcp_input+0x280>)
 8013696:	22fc      	movs	r2, #252	@ 0xfc
 8013698:	4920      	ldr	r1, [pc, #128]	@ (801371c <tcp_input+0x2c4>)
 801369a:	4811      	ldr	r0, [pc, #68]	@ (80136e0 <tcp_input+0x288>)
 801369c:	f015 fe42 	bl	8029324 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80136a0:	69fb      	ldr	r3, [r7, #28]
 80136a2:	7d1b      	ldrb	r3, [r3, #20]
 80136a4:	2b01      	cmp	r3, #1
 80136a6:	d105      	bne.n	80136b4 <tcp_input+0x25c>
 80136a8:	4b0b      	ldr	r3, [pc, #44]	@ (80136d8 <tcp_input+0x280>)
 80136aa:	22fd      	movs	r2, #253	@ 0xfd
 80136ac:	491c      	ldr	r1, [pc, #112]	@ (8013720 <tcp_input+0x2c8>)
 80136ae:	480c      	ldr	r0, [pc, #48]	@ (80136e0 <tcp_input+0x288>)
 80136b0:	f015 fe38 	bl	8029324 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80136b4:	69fb      	ldr	r3, [r7, #28]
 80136b6:	7a1b      	ldrb	r3, [r3, #8]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d033      	beq.n	8013724 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80136bc:	69fb      	ldr	r3, [r7, #28]
 80136be:	7a1a      	ldrb	r2, [r3, #8]
 80136c0:	4b09      	ldr	r3, [pc, #36]	@ (80136e8 <tcp_input+0x290>)
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80136c8:	3301      	adds	r3, #1
 80136ca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d029      	beq.n	8013724 <tcp_input+0x2cc>
      prev = pcb;
 80136d0:	69fb      	ldr	r3, [r7, #28]
 80136d2:	61bb      	str	r3, [r7, #24]
      continue;
 80136d4:	e06b      	b.n	80137ae <tcp_input+0x356>
 80136d6:	bf00      	nop
 80136d8:	0802d7bc 	.word	0x0802d7bc
 80136dc:	0802d7f0 	.word	0x0802d7f0
 80136e0:	0802d808 	.word	0x0802d808
 80136e4:	200425dc 	.word	0x200425dc
 80136e8:	20037370 	.word	0x20037370
 80136ec:	200425e0 	.word	0x200425e0
 80136f0:	200425e4 	.word	0x200425e4
 80136f4:	200425e2 	.word	0x200425e2
 80136f8:	0802d830 	.word	0x0802d830
 80136fc:	0802d840 	.word	0x0802d840
 8013700:	0802d84c 	.word	0x0802d84c
 8013704:	200425ec 	.word	0x200425ec
 8013708:	200425f0 	.word	0x200425f0
 801370c:	200425f8 	.word	0x200425f8
 8013710:	200425f6 	.word	0x200425f6
 8013714:	200425c0 	.word	0x200425c0
 8013718:	0802d86c 	.word	0x0802d86c
 801371c:	0802d894 	.word	0x0802d894
 8013720:	0802d8c0 	.word	0x0802d8c0
    }

    if (pcb->remote_port == tcphdr->src &&
 8013724:	69fb      	ldr	r3, [r7, #28]
 8013726:	8b1a      	ldrh	r2, [r3, #24]
 8013728:	4b72      	ldr	r3, [pc, #456]	@ (80138f4 <tcp_input+0x49c>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	881b      	ldrh	r3, [r3, #0]
 801372e:	b29b      	uxth	r3, r3
 8013730:	429a      	cmp	r2, r3
 8013732:	d13a      	bne.n	80137aa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013734:	69fb      	ldr	r3, [r7, #28]
 8013736:	8ada      	ldrh	r2, [r3, #22]
 8013738:	4b6e      	ldr	r3, [pc, #440]	@ (80138f4 <tcp_input+0x49c>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	885b      	ldrh	r3, [r3, #2]
 801373e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013740:	429a      	cmp	r2, r3
 8013742:	d132      	bne.n	80137aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013744:	69fb      	ldr	r3, [r7, #28]
 8013746:	685a      	ldr	r2, [r3, #4]
 8013748:	4b6b      	ldr	r3, [pc, #428]	@ (80138f8 <tcp_input+0x4a0>)
 801374a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801374c:	429a      	cmp	r2, r3
 801374e:	d12c      	bne.n	80137aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013750:	69fb      	ldr	r3, [r7, #28]
 8013752:	681a      	ldr	r2, [r3, #0]
 8013754:	4b68      	ldr	r3, [pc, #416]	@ (80138f8 <tcp_input+0x4a0>)
 8013756:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013758:	429a      	cmp	r2, r3
 801375a:	d126      	bne.n	80137aa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801375c:	69fb      	ldr	r3, [r7, #28]
 801375e:	68db      	ldr	r3, [r3, #12]
 8013760:	69fa      	ldr	r2, [r7, #28]
 8013762:	429a      	cmp	r2, r3
 8013764:	d106      	bne.n	8013774 <tcp_input+0x31c>
 8013766:	4b65      	ldr	r3, [pc, #404]	@ (80138fc <tcp_input+0x4a4>)
 8013768:	f240 120d 	movw	r2, #269	@ 0x10d
 801376c:	4964      	ldr	r1, [pc, #400]	@ (8013900 <tcp_input+0x4a8>)
 801376e:	4865      	ldr	r0, [pc, #404]	@ (8013904 <tcp_input+0x4ac>)
 8013770:	f015 fdd8 	bl	8029324 <iprintf>
      if (prev != NULL) {
 8013774:	69bb      	ldr	r3, [r7, #24]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d00a      	beq.n	8013790 <tcp_input+0x338>
        prev->next = pcb->next;
 801377a:	69fb      	ldr	r3, [r7, #28]
 801377c:	68da      	ldr	r2, [r3, #12]
 801377e:	69bb      	ldr	r3, [r7, #24]
 8013780:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013782:	4b61      	ldr	r3, [pc, #388]	@ (8013908 <tcp_input+0x4b0>)
 8013784:	681a      	ldr	r2, [r3, #0]
 8013786:	69fb      	ldr	r3, [r7, #28]
 8013788:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801378a:	4a5f      	ldr	r2, [pc, #380]	@ (8013908 <tcp_input+0x4b0>)
 801378c:	69fb      	ldr	r3, [r7, #28]
 801378e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	68db      	ldr	r3, [r3, #12]
 8013794:	69fa      	ldr	r2, [r7, #28]
 8013796:	429a      	cmp	r2, r3
 8013798:	d111      	bne.n	80137be <tcp_input+0x366>
 801379a:	4b58      	ldr	r3, [pc, #352]	@ (80138fc <tcp_input+0x4a4>)
 801379c:	f240 1215 	movw	r2, #277	@ 0x115
 80137a0:	495a      	ldr	r1, [pc, #360]	@ (801390c <tcp_input+0x4b4>)
 80137a2:	4858      	ldr	r0, [pc, #352]	@ (8013904 <tcp_input+0x4ac>)
 80137a4:	f015 fdbe 	bl	8029324 <iprintf>
      break;
 80137a8:	e009      	b.n	80137be <tcp_input+0x366>
    }
    prev = pcb;
 80137aa:	69fb      	ldr	r3, [r7, #28]
 80137ac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80137ae:	69fb      	ldr	r3, [r7, #28]
 80137b0:	68db      	ldr	r3, [r3, #12]
 80137b2:	61fb      	str	r3, [r7, #28]
 80137b4:	69fb      	ldr	r3, [r7, #28]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f47f af5e 	bne.w	8013678 <tcp_input+0x220>
 80137bc:	e000      	b.n	80137c0 <tcp_input+0x368>
      break;
 80137be:	bf00      	nop
  }

  if (pcb == NULL) {
 80137c0:	69fb      	ldr	r3, [r7, #28]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	f040 80aa 	bne.w	801391c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80137c8:	4b51      	ldr	r3, [pc, #324]	@ (8013910 <tcp_input+0x4b8>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	61fb      	str	r3, [r7, #28]
 80137ce:	e03f      	b.n	8013850 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80137d0:	69fb      	ldr	r3, [r7, #28]
 80137d2:	7d1b      	ldrb	r3, [r3, #20]
 80137d4:	2b0a      	cmp	r3, #10
 80137d6:	d006      	beq.n	80137e6 <tcp_input+0x38e>
 80137d8:	4b48      	ldr	r3, [pc, #288]	@ (80138fc <tcp_input+0x4a4>)
 80137da:	f240 121f 	movw	r2, #287	@ 0x11f
 80137de:	494d      	ldr	r1, [pc, #308]	@ (8013914 <tcp_input+0x4bc>)
 80137e0:	4848      	ldr	r0, [pc, #288]	@ (8013904 <tcp_input+0x4ac>)
 80137e2:	f015 fd9f 	bl	8029324 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80137e6:	69fb      	ldr	r3, [r7, #28]
 80137e8:	7a1b      	ldrb	r3, [r3, #8]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d009      	beq.n	8013802 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80137ee:	69fb      	ldr	r3, [r7, #28]
 80137f0:	7a1a      	ldrb	r2, [r3, #8]
 80137f2:	4b41      	ldr	r3, [pc, #260]	@ (80138f8 <tcp_input+0x4a0>)
 80137f4:	685b      	ldr	r3, [r3, #4]
 80137f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80137fa:	3301      	adds	r3, #1
 80137fc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80137fe:	429a      	cmp	r2, r3
 8013800:	d122      	bne.n	8013848 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013802:	69fb      	ldr	r3, [r7, #28]
 8013804:	8b1a      	ldrh	r2, [r3, #24]
 8013806:	4b3b      	ldr	r3, [pc, #236]	@ (80138f4 <tcp_input+0x49c>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	881b      	ldrh	r3, [r3, #0]
 801380c:	b29b      	uxth	r3, r3
 801380e:	429a      	cmp	r2, r3
 8013810:	d11b      	bne.n	801384a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013812:	69fb      	ldr	r3, [r7, #28]
 8013814:	8ada      	ldrh	r2, [r3, #22]
 8013816:	4b37      	ldr	r3, [pc, #220]	@ (80138f4 <tcp_input+0x49c>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	885b      	ldrh	r3, [r3, #2]
 801381c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801381e:	429a      	cmp	r2, r3
 8013820:	d113      	bne.n	801384a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013822:	69fb      	ldr	r3, [r7, #28]
 8013824:	685a      	ldr	r2, [r3, #4]
 8013826:	4b34      	ldr	r3, [pc, #208]	@ (80138f8 <tcp_input+0x4a0>)
 8013828:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801382a:	429a      	cmp	r2, r3
 801382c:	d10d      	bne.n	801384a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801382e:	69fb      	ldr	r3, [r7, #28]
 8013830:	681a      	ldr	r2, [r3, #0]
 8013832:	4b31      	ldr	r3, [pc, #196]	@ (80138f8 <tcp_input+0x4a0>)
 8013834:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013836:	429a      	cmp	r2, r3
 8013838:	d107      	bne.n	801384a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801383a:	69f8      	ldr	r0, [r7, #28]
 801383c:	f000 fb56 	bl	8013eec <tcp_timewait_input>
        }
        pbuf_free(p);
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f7fd fda1 	bl	8011388 <pbuf_free>
        return;
 8013846:	e1fd      	b.n	8013c44 <tcp_input+0x7ec>
        continue;
 8013848:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	68db      	ldr	r3, [r3, #12]
 801384e:	61fb      	str	r3, [r7, #28]
 8013850:	69fb      	ldr	r3, [r7, #28]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d1bc      	bne.n	80137d0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013856:	2300      	movs	r3, #0
 8013858:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801385a:	4b2f      	ldr	r3, [pc, #188]	@ (8013918 <tcp_input+0x4c0>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	617b      	str	r3, [r7, #20]
 8013860:	e02a      	b.n	80138b8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	7a1b      	ldrb	r3, [r3, #8]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d00c      	beq.n	8013884 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	7a1a      	ldrb	r2, [r3, #8]
 801386e:	4b22      	ldr	r3, [pc, #136]	@ (80138f8 <tcp_input+0x4a0>)
 8013870:	685b      	ldr	r3, [r3, #4]
 8013872:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013876:	3301      	adds	r3, #1
 8013878:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801387a:	429a      	cmp	r2, r3
 801387c:	d002      	beq.n	8013884 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	61bb      	str	r3, [r7, #24]
        continue;
 8013882:	e016      	b.n	80138b2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	8ada      	ldrh	r2, [r3, #22]
 8013888:	4b1a      	ldr	r3, [pc, #104]	@ (80138f4 <tcp_input+0x49c>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	885b      	ldrh	r3, [r3, #2]
 801388e:	b29b      	uxth	r3, r3
 8013890:	429a      	cmp	r2, r3
 8013892:	d10c      	bne.n	80138ae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	681a      	ldr	r2, [r3, #0]
 8013898:	4b17      	ldr	r3, [pc, #92]	@ (80138f8 <tcp_input+0x4a0>)
 801389a:	695b      	ldr	r3, [r3, #20]
 801389c:	429a      	cmp	r2, r3
 801389e:	d00f      	beq.n	80138c0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80138a0:	697b      	ldr	r3, [r7, #20]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d00d      	beq.n	80138c2 <tcp_input+0x46a>
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d009      	beq.n	80138c2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	68db      	ldr	r3, [r3, #12]
 80138b6:	617b      	str	r3, [r7, #20]
 80138b8:	697b      	ldr	r3, [r7, #20]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d1d1      	bne.n	8013862 <tcp_input+0x40a>
 80138be:	e000      	b.n	80138c2 <tcp_input+0x46a>
            break;
 80138c0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80138c2:	697b      	ldr	r3, [r7, #20]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d029      	beq.n	801391c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d00a      	beq.n	80138e4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	68da      	ldr	r2, [r3, #12]
 80138d2:	69bb      	ldr	r3, [r7, #24]
 80138d4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80138d6:	4b10      	ldr	r3, [pc, #64]	@ (8013918 <tcp_input+0x4c0>)
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	697b      	ldr	r3, [r7, #20]
 80138dc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80138de:	4a0e      	ldr	r2, [pc, #56]	@ (8013918 <tcp_input+0x4c0>)
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80138e4:	6978      	ldr	r0, [r7, #20]
 80138e6:	f000 fa03 	bl	8013cf0 <tcp_listen_input>
      }
      pbuf_free(p);
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7fd fd4c 	bl	8011388 <pbuf_free>
      return;
 80138f0:	e1a8      	b.n	8013c44 <tcp_input+0x7ec>
 80138f2:	bf00      	nop
 80138f4:	200425dc 	.word	0x200425dc
 80138f8:	20037370 	.word	0x20037370
 80138fc:	0802d7bc 	.word	0x0802d7bc
 8013900:	0802d8e8 	.word	0x0802d8e8
 8013904:	0802d808 	.word	0x0802d808
 8013908:	200425c0 	.word	0x200425c0
 801390c:	0802d914 	.word	0x0802d914
 8013910:	200425c4 	.word	0x200425c4
 8013914:	0802d940 	.word	0x0802d940
 8013918:	200425bc 	.word	0x200425bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801391c:	69fb      	ldr	r3, [r7, #28]
 801391e:	2b00      	cmp	r3, #0
 8013920:	f000 8158 	beq.w	8013bd4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013924:	4b95      	ldr	r3, [pc, #596]	@ (8013b7c <tcp_input+0x724>)
 8013926:	2200      	movs	r2, #0
 8013928:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	891a      	ldrh	r2, [r3, #8]
 801392e:	4b93      	ldr	r3, [pc, #588]	@ (8013b7c <tcp_input+0x724>)
 8013930:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013932:	4a92      	ldr	r2, [pc, #584]	@ (8013b7c <tcp_input+0x724>)
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013938:	4b91      	ldr	r3, [pc, #580]	@ (8013b80 <tcp_input+0x728>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	4a8f      	ldr	r2, [pc, #572]	@ (8013b7c <tcp_input+0x724>)
 801393e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013940:	4b90      	ldr	r3, [pc, #576]	@ (8013b84 <tcp_input+0x72c>)
 8013942:	2200      	movs	r2, #0
 8013944:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013946:	4b90      	ldr	r3, [pc, #576]	@ (8013b88 <tcp_input+0x730>)
 8013948:	2200      	movs	r2, #0
 801394a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801394c:	4b8f      	ldr	r3, [pc, #572]	@ (8013b8c <tcp_input+0x734>)
 801394e:	2200      	movs	r2, #0
 8013950:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013952:	4b8f      	ldr	r3, [pc, #572]	@ (8013b90 <tcp_input+0x738>)
 8013954:	781b      	ldrb	r3, [r3, #0]
 8013956:	f003 0308 	and.w	r3, r3, #8
 801395a:	2b00      	cmp	r3, #0
 801395c:	d006      	beq.n	801396c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	7b5b      	ldrb	r3, [r3, #13]
 8013962:	f043 0301 	orr.w	r3, r3, #1
 8013966:	b2da      	uxtb	r2, r3
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801396c:	69fb      	ldr	r3, [r7, #28]
 801396e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013970:	2b00      	cmp	r3, #0
 8013972:	d017      	beq.n	80139a4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013974:	69f8      	ldr	r0, [r7, #28]
 8013976:	f7ff f85b 	bl	8012a30 <tcp_process_refused_data>
 801397a:	4603      	mov	r3, r0
 801397c:	f113 0f0d 	cmn.w	r3, #13
 8013980:	d007      	beq.n	8013992 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013982:	69fb      	ldr	r3, [r7, #28]
 8013984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013986:	2b00      	cmp	r3, #0
 8013988:	d00c      	beq.n	80139a4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801398a:	4b82      	ldr	r3, [pc, #520]	@ (8013b94 <tcp_input+0x73c>)
 801398c:	881b      	ldrh	r3, [r3, #0]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d008      	beq.n	80139a4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013992:	69fb      	ldr	r3, [r7, #28]
 8013994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013996:	2b00      	cmp	r3, #0
 8013998:	f040 80e3 	bne.w	8013b62 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801399c:	69f8      	ldr	r0, [r7, #28]
 801399e:	f003 fdff 	bl	80175a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80139a2:	e0de      	b.n	8013b62 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80139a4:	4a7c      	ldr	r2, [pc, #496]	@ (8013b98 <tcp_input+0x740>)
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80139aa:	69f8      	ldr	r0, [r7, #28]
 80139ac:	f000 fb18 	bl	8013fe0 <tcp_process>
 80139b0:	4603      	mov	r3, r0
 80139b2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80139b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80139b8:	f113 0f0d 	cmn.w	r3, #13
 80139bc:	f000 80d3 	beq.w	8013b66 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80139c0:	4b71      	ldr	r3, [pc, #452]	@ (8013b88 <tcp_input+0x730>)
 80139c2:	781b      	ldrb	r3, [r3, #0]
 80139c4:	f003 0308 	and.w	r3, r3, #8
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d015      	beq.n	80139f8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80139cc:	69fb      	ldr	r3, [r7, #28]
 80139ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d008      	beq.n	80139e8 <tcp_input+0x590>
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80139dc:	69fa      	ldr	r2, [r7, #28]
 80139de:	6912      	ldr	r2, [r2, #16]
 80139e0:	f06f 010d 	mvn.w	r1, #13
 80139e4:	4610      	mov	r0, r2
 80139e6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80139e8:	69f9      	ldr	r1, [r7, #28]
 80139ea:	486c      	ldr	r0, [pc, #432]	@ (8013b9c <tcp_input+0x744>)
 80139ec:	f7ff fbbc 	bl	8013168 <tcp_pcb_remove>
        tcp_free(pcb);
 80139f0:	69f8      	ldr	r0, [r7, #28]
 80139f2:	f7fd ff85 	bl	8011900 <tcp_free>
 80139f6:	e0da      	b.n	8013bae <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80139f8:	2300      	movs	r3, #0
 80139fa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80139fc:	4b63      	ldr	r3, [pc, #396]	@ (8013b8c <tcp_input+0x734>)
 80139fe:	881b      	ldrh	r3, [r3, #0]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d01d      	beq.n	8013a40 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013a04:	4b61      	ldr	r3, [pc, #388]	@ (8013b8c <tcp_input+0x734>)
 8013a06:	881b      	ldrh	r3, [r3, #0]
 8013a08:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d00a      	beq.n	8013a2a <tcp_input+0x5d2>
 8013a14:	69fb      	ldr	r3, [r7, #28]
 8013a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013a1a:	69fa      	ldr	r2, [r7, #28]
 8013a1c:	6910      	ldr	r0, [r2, #16]
 8013a1e:	89fa      	ldrh	r2, [r7, #14]
 8013a20:	69f9      	ldr	r1, [r7, #28]
 8013a22:	4798      	blx	r3
 8013a24:	4603      	mov	r3, r0
 8013a26:	74fb      	strb	r3, [r7, #19]
 8013a28:	e001      	b.n	8013a2e <tcp_input+0x5d6>
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013a2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013a32:	f113 0f0d 	cmn.w	r3, #13
 8013a36:	f000 8098 	beq.w	8013b6a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013a3a:	4b54      	ldr	r3, [pc, #336]	@ (8013b8c <tcp_input+0x734>)
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013a40:	69f8      	ldr	r0, [r7, #28]
 8013a42:	f000 f915 	bl	8013c70 <tcp_input_delayed_close>
 8013a46:	4603      	mov	r3, r0
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	f040 8090 	bne.w	8013b6e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013a4e:	4b4d      	ldr	r3, [pc, #308]	@ (8013b84 <tcp_input+0x72c>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d041      	beq.n	8013ada <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d006      	beq.n	8013a6c <tcp_input+0x614>
 8013a5e:	4b50      	ldr	r3, [pc, #320]	@ (8013ba0 <tcp_input+0x748>)
 8013a60:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8013a64:	494f      	ldr	r1, [pc, #316]	@ (8013ba4 <tcp_input+0x74c>)
 8013a66:	4850      	ldr	r0, [pc, #320]	@ (8013ba8 <tcp_input+0x750>)
 8013a68:	f015 fc5c 	bl	8029324 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	8b5b      	ldrh	r3, [r3, #26]
 8013a70:	f003 0310 	and.w	r3, r3, #16
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d008      	beq.n	8013a8a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013a78:	4b42      	ldr	r3, [pc, #264]	@ (8013b84 <tcp_input+0x72c>)
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7fd fc83 	bl	8011388 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013a82:	69f8      	ldr	r0, [r7, #28]
 8013a84:	f7fe fa80 	bl	8011f88 <tcp_abort>
            goto aborted;
 8013a88:	e091      	b.n	8013bae <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013a8a:	69fb      	ldr	r3, [r7, #28]
 8013a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d00c      	beq.n	8013aae <tcp_input+0x656>
 8013a94:	69fb      	ldr	r3, [r7, #28]
 8013a96:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013a9a:	69fb      	ldr	r3, [r7, #28]
 8013a9c:	6918      	ldr	r0, [r3, #16]
 8013a9e:	4b39      	ldr	r3, [pc, #228]	@ (8013b84 <tcp_input+0x72c>)
 8013aa0:	681a      	ldr	r2, [r3, #0]
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	69f9      	ldr	r1, [r7, #28]
 8013aa6:	47a0      	blx	r4
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	74fb      	strb	r3, [r7, #19]
 8013aac:	e008      	b.n	8013ac0 <tcp_input+0x668>
 8013aae:	4b35      	ldr	r3, [pc, #212]	@ (8013b84 <tcp_input+0x72c>)
 8013ab0:	681a      	ldr	r2, [r3, #0]
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	69f9      	ldr	r1, [r7, #28]
 8013ab6:	2000      	movs	r0, #0
 8013ab8:	f7ff f890 	bl	8012bdc <tcp_recv_null>
 8013abc:	4603      	mov	r3, r0
 8013abe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013ac0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ac4:	f113 0f0d 	cmn.w	r3, #13
 8013ac8:	d053      	beq.n	8013b72 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013aca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d003      	beq.n	8013ada <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8013b84 <tcp_input+0x72c>)
 8013ad4:	681a      	ldr	r2, [r3, #0]
 8013ad6:	69fb      	ldr	r3, [r7, #28]
 8013ad8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013ada:	4b2b      	ldr	r3, [pc, #172]	@ (8013b88 <tcp_input+0x730>)
 8013adc:	781b      	ldrb	r3, [r3, #0]
 8013ade:	f003 0320 	and.w	r3, r3, #32
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d030      	beq.n	8013b48 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8013ae6:	69fb      	ldr	r3, [r7, #28]
 8013ae8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d009      	beq.n	8013b02 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013af2:	7b5a      	ldrb	r2, [r3, #13]
 8013af4:	69fb      	ldr	r3, [r7, #28]
 8013af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013af8:	f042 0220 	orr.w	r2, r2, #32
 8013afc:	b2d2      	uxtb	r2, r2
 8013afe:	735a      	strb	r2, [r3, #13]
 8013b00:	e022      	b.n	8013b48 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013b02:	69fb      	ldr	r3, [r7, #28]
 8013b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b06:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013b0a:	d005      	beq.n	8013b18 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8013b0c:	69fb      	ldr	r3, [r7, #28]
 8013b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b10:	3301      	adds	r3, #1
 8013b12:	b29a      	uxth	r2, r3
 8013b14:	69fb      	ldr	r3, [r7, #28]
 8013b16:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d00b      	beq.n	8013b3a <tcp_input+0x6e2>
 8013b22:	69fb      	ldr	r3, [r7, #28]
 8013b24:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013b28:	69fb      	ldr	r3, [r7, #28]
 8013b2a:	6918      	ldr	r0, [r3, #16]
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	2200      	movs	r2, #0
 8013b30:	69f9      	ldr	r1, [r7, #28]
 8013b32:	47a0      	blx	r4
 8013b34:	4603      	mov	r3, r0
 8013b36:	74fb      	strb	r3, [r7, #19]
 8013b38:	e001      	b.n	8013b3e <tcp_input+0x6e6>
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013b3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b42:	f113 0f0d 	cmn.w	r3, #13
 8013b46:	d016      	beq.n	8013b76 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013b48:	4b13      	ldr	r3, [pc, #76]	@ (8013b98 <tcp_input+0x740>)
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013b4e:	69f8      	ldr	r0, [r7, #28]
 8013b50:	f000 f88e 	bl	8013c70 <tcp_input_delayed_close>
 8013b54:	4603      	mov	r3, r0
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d128      	bne.n	8013bac <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013b5a:	69f8      	ldr	r0, [r7, #28]
 8013b5c:	f002 ff1a 	bl	8016994 <tcp_output>
 8013b60:	e025      	b.n	8013bae <tcp_input+0x756>
        goto aborted;
 8013b62:	bf00      	nop
 8013b64:	e023      	b.n	8013bae <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013b66:	bf00      	nop
 8013b68:	e021      	b.n	8013bae <tcp_input+0x756>
              goto aborted;
 8013b6a:	bf00      	nop
 8013b6c:	e01f      	b.n	8013bae <tcp_input+0x756>
          goto aborted;
 8013b6e:	bf00      	nop
 8013b70:	e01d      	b.n	8013bae <tcp_input+0x756>
            goto aborted;
 8013b72:	bf00      	nop
 8013b74:	e01b      	b.n	8013bae <tcp_input+0x756>
              goto aborted;
 8013b76:	bf00      	nop
 8013b78:	e019      	b.n	8013bae <tcp_input+0x756>
 8013b7a:	bf00      	nop
 8013b7c:	200425cc 	.word	0x200425cc
 8013b80:	200425dc 	.word	0x200425dc
 8013b84:	200425fc 	.word	0x200425fc
 8013b88:	200425f9 	.word	0x200425f9
 8013b8c:	200425f4 	.word	0x200425f4
 8013b90:	200425f8 	.word	0x200425f8
 8013b94:	200425f6 	.word	0x200425f6
 8013b98:	20042600 	.word	0x20042600
 8013b9c:	200425c0 	.word	0x200425c0
 8013ba0:	0802d7bc 	.word	0x0802d7bc
 8013ba4:	0802d970 	.word	0x0802d970
 8013ba8:	0802d808 	.word	0x0802d808
          goto aborted;
 8013bac:	bf00      	nop
    tcp_input_pcb = NULL;
 8013bae:	4b27      	ldr	r3, [pc, #156]	@ (8013c4c <tcp_input+0x7f4>)
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013bb4:	4b26      	ldr	r3, [pc, #152]	@ (8013c50 <tcp_input+0x7f8>)
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013bba:	4b26      	ldr	r3, [pc, #152]	@ (8013c54 <tcp_input+0x7fc>)
 8013bbc:	685b      	ldr	r3, [r3, #4]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d03f      	beq.n	8013c42 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013bc2:	4b24      	ldr	r3, [pc, #144]	@ (8013c54 <tcp_input+0x7fc>)
 8013bc4:	685b      	ldr	r3, [r3, #4]
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7fd fbde 	bl	8011388 <pbuf_free>
      inseg.p = NULL;
 8013bcc:	4b21      	ldr	r3, [pc, #132]	@ (8013c54 <tcp_input+0x7fc>)
 8013bce:	2200      	movs	r2, #0
 8013bd0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013bd2:	e036      	b.n	8013c42 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013bd4:	4b20      	ldr	r3, [pc, #128]	@ (8013c58 <tcp_input+0x800>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	899b      	ldrh	r3, [r3, #12]
 8013bda:	b29b      	uxth	r3, r3
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7fb fed9 	bl	800f994 <lwip_htons>
 8013be2:	4603      	mov	r3, r0
 8013be4:	b2db      	uxtb	r3, r3
 8013be6:	f003 0304 	and.w	r3, r3, #4
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d118      	bne.n	8013c20 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013bee:	4b1b      	ldr	r3, [pc, #108]	@ (8013c5c <tcp_input+0x804>)
 8013bf0:	6819      	ldr	r1, [r3, #0]
 8013bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8013c60 <tcp_input+0x808>)
 8013bf4:	881b      	ldrh	r3, [r3, #0]
 8013bf6:	461a      	mov	r2, r3
 8013bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8013c64 <tcp_input+0x80c>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013bfe:	4b16      	ldr	r3, [pc, #88]	@ (8013c58 <tcp_input+0x800>)
 8013c00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c02:	885b      	ldrh	r3, [r3, #2]
 8013c04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c06:	4a14      	ldr	r2, [pc, #80]	@ (8013c58 <tcp_input+0x800>)
 8013c08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c0a:	8812      	ldrh	r2, [r2, #0]
 8013c0c:	b292      	uxth	r2, r2
 8013c0e:	9202      	str	r2, [sp, #8]
 8013c10:	9301      	str	r3, [sp, #4]
 8013c12:	4b15      	ldr	r3, [pc, #84]	@ (8013c68 <tcp_input+0x810>)
 8013c14:	9300      	str	r3, [sp, #0]
 8013c16:	4b15      	ldr	r3, [pc, #84]	@ (8013c6c <tcp_input+0x814>)
 8013c18:	4602      	mov	r2, r0
 8013c1a:	2000      	movs	r0, #0
 8013c1c:	f003 fc6e 	bl	80174fc <tcp_rst>
    pbuf_free(p);
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f7fd fbb1 	bl	8011388 <pbuf_free>
  return;
 8013c26:	e00c      	b.n	8013c42 <tcp_input+0x7ea>
    goto dropped;
 8013c28:	bf00      	nop
 8013c2a:	e006      	b.n	8013c3a <tcp_input+0x7e2>
    goto dropped;
 8013c2c:	bf00      	nop
 8013c2e:	e004      	b.n	8013c3a <tcp_input+0x7e2>
    goto dropped;
 8013c30:	bf00      	nop
 8013c32:	e002      	b.n	8013c3a <tcp_input+0x7e2>
      goto dropped;
 8013c34:	bf00      	nop
 8013c36:	e000      	b.n	8013c3a <tcp_input+0x7e2>
      goto dropped;
 8013c38:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f7fd fba4 	bl	8011388 <pbuf_free>
 8013c40:	e000      	b.n	8013c44 <tcp_input+0x7ec>
  return;
 8013c42:	bf00      	nop
}
 8013c44:	3724      	adds	r7, #36	@ 0x24
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd90      	pop	{r4, r7, pc}
 8013c4a:	bf00      	nop
 8013c4c:	20042600 	.word	0x20042600
 8013c50:	200425fc 	.word	0x200425fc
 8013c54:	200425cc 	.word	0x200425cc
 8013c58:	200425dc 	.word	0x200425dc
 8013c5c:	200425f0 	.word	0x200425f0
 8013c60:	200425f6 	.word	0x200425f6
 8013c64:	200425ec 	.word	0x200425ec
 8013c68:	20037380 	.word	0x20037380
 8013c6c:	20037384 	.word	0x20037384

08013c70 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b082      	sub	sp, #8
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d106      	bne.n	8013c8c <tcp_input_delayed_close+0x1c>
 8013c7e:	4b17      	ldr	r3, [pc, #92]	@ (8013cdc <tcp_input_delayed_close+0x6c>)
 8013c80:	f240 225a 	movw	r2, #602	@ 0x25a
 8013c84:	4916      	ldr	r1, [pc, #88]	@ (8013ce0 <tcp_input_delayed_close+0x70>)
 8013c86:	4817      	ldr	r0, [pc, #92]	@ (8013ce4 <tcp_input_delayed_close+0x74>)
 8013c88:	f015 fb4c 	bl	8029324 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013c8c:	4b16      	ldr	r3, [pc, #88]	@ (8013ce8 <tcp_input_delayed_close+0x78>)
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	f003 0310 	and.w	r3, r3, #16
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d01c      	beq.n	8013cd2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	8b5b      	ldrh	r3, [r3, #26]
 8013c9c:	f003 0310 	and.w	r3, r3, #16
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d10d      	bne.n	8013cc0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d008      	beq.n	8013cc0 <tcp_input_delayed_close+0x50>
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013cb4:	687a      	ldr	r2, [r7, #4]
 8013cb6:	6912      	ldr	r2, [r2, #16]
 8013cb8:	f06f 010e 	mvn.w	r1, #14
 8013cbc:	4610      	mov	r0, r2
 8013cbe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013cc0:	6879      	ldr	r1, [r7, #4]
 8013cc2:	480a      	ldr	r0, [pc, #40]	@ (8013cec <tcp_input_delayed_close+0x7c>)
 8013cc4:	f7ff fa50 	bl	8013168 <tcp_pcb_remove>
    tcp_free(pcb);
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	f7fd fe19 	bl	8011900 <tcp_free>
    return 1;
 8013cce:	2301      	movs	r3, #1
 8013cd0:	e000      	b.n	8013cd4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013cd2:	2300      	movs	r3, #0
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3708      	adds	r7, #8
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}
 8013cdc:	0802d7bc 	.word	0x0802d7bc
 8013ce0:	0802d98c 	.word	0x0802d98c
 8013ce4:	0802d808 	.word	0x0802d808
 8013ce8:	200425f9 	.word	0x200425f9
 8013cec:	200425c0 	.word	0x200425c0

08013cf0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013cf0:	b590      	push	{r4, r7, lr}
 8013cf2:	b08b      	sub	sp, #44	@ 0x2c
 8013cf4:	af04      	add	r7, sp, #16
 8013cf6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8013eb8 <tcp_listen_input+0x1c8>)
 8013cfa:	781b      	ldrb	r3, [r3, #0]
 8013cfc:	f003 0304 	and.w	r3, r3, #4
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	f040 80d2 	bne.w	8013eaa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d106      	bne.n	8013d1a <tcp_listen_input+0x2a>
 8013d0c:	4b6b      	ldr	r3, [pc, #428]	@ (8013ebc <tcp_listen_input+0x1cc>)
 8013d0e:	f240 2281 	movw	r2, #641	@ 0x281
 8013d12:	496b      	ldr	r1, [pc, #428]	@ (8013ec0 <tcp_listen_input+0x1d0>)
 8013d14:	486b      	ldr	r0, [pc, #428]	@ (8013ec4 <tcp_listen_input+0x1d4>)
 8013d16:	f015 fb05 	bl	8029324 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013d1a:	4b67      	ldr	r3, [pc, #412]	@ (8013eb8 <tcp_listen_input+0x1c8>)
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	f003 0310 	and.w	r3, r3, #16
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d019      	beq.n	8013d5a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d26:	4b68      	ldr	r3, [pc, #416]	@ (8013ec8 <tcp_listen_input+0x1d8>)
 8013d28:	6819      	ldr	r1, [r3, #0]
 8013d2a:	4b68      	ldr	r3, [pc, #416]	@ (8013ecc <tcp_listen_input+0x1dc>)
 8013d2c:	881b      	ldrh	r3, [r3, #0]
 8013d2e:	461a      	mov	r2, r3
 8013d30:	4b67      	ldr	r3, [pc, #412]	@ (8013ed0 <tcp_listen_input+0x1e0>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d36:	4b67      	ldr	r3, [pc, #412]	@ (8013ed4 <tcp_listen_input+0x1e4>)
 8013d38:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d3a:	885b      	ldrh	r3, [r3, #2]
 8013d3c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d3e:	4a65      	ldr	r2, [pc, #404]	@ (8013ed4 <tcp_listen_input+0x1e4>)
 8013d40:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d42:	8812      	ldrh	r2, [r2, #0]
 8013d44:	b292      	uxth	r2, r2
 8013d46:	9202      	str	r2, [sp, #8]
 8013d48:	9301      	str	r3, [sp, #4]
 8013d4a:	4b63      	ldr	r3, [pc, #396]	@ (8013ed8 <tcp_listen_input+0x1e8>)
 8013d4c:	9300      	str	r3, [sp, #0]
 8013d4e:	4b63      	ldr	r3, [pc, #396]	@ (8013edc <tcp_listen_input+0x1ec>)
 8013d50:	4602      	mov	r2, r0
 8013d52:	6878      	ldr	r0, [r7, #4]
 8013d54:	f003 fbd2 	bl	80174fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013d58:	e0a9      	b.n	8013eae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013d5a:	4b57      	ldr	r3, [pc, #348]	@ (8013eb8 <tcp_listen_input+0x1c8>)
 8013d5c:	781b      	ldrb	r3, [r3, #0]
 8013d5e:	f003 0302 	and.w	r3, r3, #2
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	f000 80a3 	beq.w	8013eae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	7d5b      	ldrb	r3, [r3, #21]
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7ff f859 	bl	8012e24 <tcp_alloc>
 8013d72:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d111      	bne.n	8013d9e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	699b      	ldr	r3, [r3, #24]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d00a      	beq.n	8013d98 <tcp_listen_input+0xa8>
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	699b      	ldr	r3, [r3, #24]
 8013d86:	687a      	ldr	r2, [r7, #4]
 8013d88:	6910      	ldr	r0, [r2, #16]
 8013d8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013d8e:	2100      	movs	r1, #0
 8013d90:	4798      	blx	r3
 8013d92:	4603      	mov	r3, r0
 8013d94:	73bb      	strb	r3, [r7, #14]
      return;
 8013d96:	e08b      	b.n	8013eb0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013d98:	23f0      	movs	r3, #240	@ 0xf0
 8013d9a:	73bb      	strb	r3, [r7, #14]
      return;
 8013d9c:	e088      	b.n	8013eb0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013d9e:	4b50      	ldr	r3, [pc, #320]	@ (8013ee0 <tcp_listen_input+0x1f0>)
 8013da0:	695a      	ldr	r2, [r3, #20]
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013da6:	4b4e      	ldr	r3, [pc, #312]	@ (8013ee0 <tcp_listen_input+0x1f0>)
 8013da8:	691a      	ldr	r2, [r3, #16]
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	8ada      	ldrh	r2, [r3, #22]
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013db6:	4b47      	ldr	r3, [pc, #284]	@ (8013ed4 <tcp_listen_input+0x1e4>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	881b      	ldrh	r3, [r3, #0]
 8013dbc:	b29a      	uxth	r2, r3
 8013dbe:	697b      	ldr	r3, [r7, #20]
 8013dc0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	2203      	movs	r2, #3
 8013dc6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013dc8:	4b41      	ldr	r3, [pc, #260]	@ (8013ed0 <tcp_listen_input+0x1e0>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	1c5a      	adds	r2, r3, #1
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013dd2:	697b      	ldr	r3, [r7, #20]
 8013dd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8013dda:	6978      	ldr	r0, [r7, #20]
 8013ddc:	f7ff fa58 	bl	8013290 <tcp_next_iss>
 8013de0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013de2:	697b      	ldr	r3, [r7, #20]
 8013de4:	693a      	ldr	r2, [r7, #16]
 8013de6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8013de8:	697b      	ldr	r3, [r7, #20]
 8013dea:	693a      	ldr	r2, [r7, #16]
 8013dec:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	693a      	ldr	r2, [r7, #16]
 8013df2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	693a      	ldr	r2, [r7, #16]
 8013df8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013dfa:	4b35      	ldr	r3, [pc, #212]	@ (8013ed0 <tcp_listen_input+0x1e0>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	1e5a      	subs	r2, r3, #1
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	691a      	ldr	r2, [r3, #16]
 8013e08:	697b      	ldr	r3, [r7, #20]
 8013e0a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	687a      	ldr	r2, [r7, #4]
 8013e10:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	7a5b      	ldrb	r3, [r3, #9]
 8013e16:	f003 030c 	and.w	r3, r3, #12
 8013e1a:	b2da      	uxtb	r2, r3
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	7a1a      	ldrb	r2, [r3, #8]
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013e28:	4b2e      	ldr	r3, [pc, #184]	@ (8013ee4 <tcp_listen_input+0x1f4>)
 8013e2a:	681a      	ldr	r2, [r3, #0]
 8013e2c:	697b      	ldr	r3, [r7, #20]
 8013e2e:	60da      	str	r2, [r3, #12]
 8013e30:	4a2c      	ldr	r2, [pc, #176]	@ (8013ee4 <tcp_listen_input+0x1f4>)
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	6013      	str	r3, [r2, #0]
 8013e36:	f003 fd23 	bl	8017880 <tcp_timer_needed>
 8013e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8013ee8 <tcp_listen_input+0x1f8>)
 8013e3c:	2201      	movs	r2, #1
 8013e3e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013e40:	6978      	ldr	r0, [r7, #20]
 8013e42:	f001 fd8b 	bl	801595c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013e46:	4b23      	ldr	r3, [pc, #140]	@ (8013ed4 <tcp_listen_input+0x1e4>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	89db      	ldrh	r3, [r3, #14]
 8013e4c:	b29a      	uxth	r2, r3
 8013e4e:	697b      	ldr	r3, [r7, #20]
 8013e50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013e54:	697b      	ldr	r3, [r7, #20]
 8013e56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013e5a:	697b      	ldr	r3, [r7, #20]
 8013e5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8013e64:	697b      	ldr	r3, [r7, #20]
 8013e66:	3304      	adds	r3, #4
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f006 f933 	bl	801a0d4 <ip4_route>
 8013e6e:	4601      	mov	r1, r0
 8013e70:	697b      	ldr	r3, [r7, #20]
 8013e72:	3304      	adds	r3, #4
 8013e74:	461a      	mov	r2, r3
 8013e76:	4620      	mov	r0, r4
 8013e78:	f7ff fa30 	bl	80132dc <tcp_eff_send_mss_netif>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	461a      	mov	r2, r3
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013e84:	2112      	movs	r1, #18
 8013e86:	6978      	ldr	r0, [r7, #20]
 8013e88:	f002 fc96 	bl	80167b8 <tcp_enqueue_flags>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d004      	beq.n	8013ea2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013e98:	2100      	movs	r1, #0
 8013e9a:	6978      	ldr	r0, [r7, #20]
 8013e9c:	f7fd ffb6 	bl	8011e0c <tcp_abandon>
      return;
 8013ea0:	e006      	b.n	8013eb0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013ea2:	6978      	ldr	r0, [r7, #20]
 8013ea4:	f002 fd76 	bl	8016994 <tcp_output>
  return;
 8013ea8:	e001      	b.n	8013eae <tcp_listen_input+0x1be>
    return;
 8013eaa:	bf00      	nop
 8013eac:	e000      	b.n	8013eb0 <tcp_listen_input+0x1c0>
  return;
 8013eae:	bf00      	nop
}
 8013eb0:	371c      	adds	r7, #28
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd90      	pop	{r4, r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	200425f8 	.word	0x200425f8
 8013ebc:	0802d7bc 	.word	0x0802d7bc
 8013ec0:	0802d9b4 	.word	0x0802d9b4
 8013ec4:	0802d808 	.word	0x0802d808
 8013ec8:	200425f0 	.word	0x200425f0
 8013ecc:	200425f6 	.word	0x200425f6
 8013ed0:	200425ec 	.word	0x200425ec
 8013ed4:	200425dc 	.word	0x200425dc
 8013ed8:	20037380 	.word	0x20037380
 8013edc:	20037384 	.word	0x20037384
 8013ee0:	20037370 	.word	0x20037370
 8013ee4:	200425c0 	.word	0x200425c0
 8013ee8:	200425c8 	.word	0x200425c8

08013eec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b086      	sub	sp, #24
 8013ef0:	af04      	add	r7, sp, #16
 8013ef2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8013fb4 <tcp_timewait_input+0xc8>)
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	f003 0304 	and.w	r3, r3, #4
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d153      	bne.n	8013fa8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d106      	bne.n	8013f14 <tcp_timewait_input+0x28>
 8013f06:	4b2c      	ldr	r3, [pc, #176]	@ (8013fb8 <tcp_timewait_input+0xcc>)
 8013f08:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013f0c:	492b      	ldr	r1, [pc, #172]	@ (8013fbc <tcp_timewait_input+0xd0>)
 8013f0e:	482c      	ldr	r0, [pc, #176]	@ (8013fc0 <tcp_timewait_input+0xd4>)
 8013f10:	f015 fa08 	bl	8029324 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013f14:	4b27      	ldr	r3, [pc, #156]	@ (8013fb4 <tcp_timewait_input+0xc8>)
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	f003 0302 	and.w	r3, r3, #2
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d02a      	beq.n	8013f76 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013f20:	4b28      	ldr	r3, [pc, #160]	@ (8013fc4 <tcp_timewait_input+0xd8>)
 8013f22:	681a      	ldr	r2, [r3, #0]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f28:	1ad3      	subs	r3, r2, r3
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	db2d      	blt.n	8013f8a <tcp_timewait_input+0x9e>
 8013f2e:	4b25      	ldr	r3, [pc, #148]	@ (8013fc4 <tcp_timewait_input+0xd8>)
 8013f30:	681a      	ldr	r2, [r3, #0]
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f36:	6879      	ldr	r1, [r7, #4]
 8013f38:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013f3a:	440b      	add	r3, r1
 8013f3c:	1ad3      	subs	r3, r2, r3
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	dc23      	bgt.n	8013f8a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f42:	4b21      	ldr	r3, [pc, #132]	@ (8013fc8 <tcp_timewait_input+0xdc>)
 8013f44:	6819      	ldr	r1, [r3, #0]
 8013f46:	4b21      	ldr	r3, [pc, #132]	@ (8013fcc <tcp_timewait_input+0xe0>)
 8013f48:	881b      	ldrh	r3, [r3, #0]
 8013f4a:	461a      	mov	r2, r3
 8013f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8013fc4 <tcp_timewait_input+0xd8>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f52:	4b1f      	ldr	r3, [pc, #124]	@ (8013fd0 <tcp_timewait_input+0xe4>)
 8013f54:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f56:	885b      	ldrh	r3, [r3, #2]
 8013f58:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8013fd0 <tcp_timewait_input+0xe4>)
 8013f5c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f5e:	8812      	ldrh	r2, [r2, #0]
 8013f60:	b292      	uxth	r2, r2
 8013f62:	9202      	str	r2, [sp, #8]
 8013f64:	9301      	str	r3, [sp, #4]
 8013f66:	4b1b      	ldr	r3, [pc, #108]	@ (8013fd4 <tcp_timewait_input+0xe8>)
 8013f68:	9300      	str	r3, [sp, #0]
 8013f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8013fd8 <tcp_timewait_input+0xec>)
 8013f6c:	4602      	mov	r2, r0
 8013f6e:	6878      	ldr	r0, [r7, #4]
 8013f70:	f003 fac4 	bl	80174fc <tcp_rst>
      return;
 8013f74:	e01b      	b.n	8013fae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013f76:	4b0f      	ldr	r3, [pc, #60]	@ (8013fb4 <tcp_timewait_input+0xc8>)
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	f003 0301 	and.w	r3, r3, #1
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d003      	beq.n	8013f8a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013f82:	4b16      	ldr	r3, [pc, #88]	@ (8013fdc <tcp_timewait_input+0xf0>)
 8013f84:	681a      	ldr	r2, [r3, #0]
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013f8a:	4b10      	ldr	r3, [pc, #64]	@ (8013fcc <tcp_timewait_input+0xe0>)
 8013f8c:	881b      	ldrh	r3, [r3, #0]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d00c      	beq.n	8013fac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	8b5b      	ldrh	r3, [r3, #26]
 8013f96:	f043 0302 	orr.w	r3, r3, #2
 8013f9a:	b29a      	uxth	r2, r3
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013fa0:	6878      	ldr	r0, [r7, #4]
 8013fa2:	f002 fcf7 	bl	8016994 <tcp_output>
  }
  return;
 8013fa6:	e001      	b.n	8013fac <tcp_timewait_input+0xc0>
    return;
 8013fa8:	bf00      	nop
 8013faa:	e000      	b.n	8013fae <tcp_timewait_input+0xc2>
  return;
 8013fac:	bf00      	nop
}
 8013fae:	3708      	adds	r7, #8
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}
 8013fb4:	200425f8 	.word	0x200425f8
 8013fb8:	0802d7bc 	.word	0x0802d7bc
 8013fbc:	0802d9d4 	.word	0x0802d9d4
 8013fc0:	0802d808 	.word	0x0802d808
 8013fc4:	200425ec 	.word	0x200425ec
 8013fc8:	200425f0 	.word	0x200425f0
 8013fcc:	200425f6 	.word	0x200425f6
 8013fd0:	200425dc 	.word	0x200425dc
 8013fd4:	20037380 	.word	0x20037380
 8013fd8:	20037384 	.word	0x20037384
 8013fdc:	200425b4 	.word	0x200425b4

08013fe0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013fe0:	b590      	push	{r4, r7, lr}
 8013fe2:	b08d      	sub	sp, #52	@ 0x34
 8013fe4:	af04      	add	r7, sp, #16
 8013fe6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013fec:	2300      	movs	r3, #0
 8013fee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d106      	bne.n	8014004 <tcp_process+0x24>
 8013ff6:	4b9d      	ldr	r3, [pc, #628]	@ (801426c <tcp_process+0x28c>)
 8013ff8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8013ffc:	499c      	ldr	r1, [pc, #624]	@ (8014270 <tcp_process+0x290>)
 8013ffe:	489d      	ldr	r0, [pc, #628]	@ (8014274 <tcp_process+0x294>)
 8014000:	f015 f990 	bl	8029324 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014004:	4b9c      	ldr	r3, [pc, #624]	@ (8014278 <tcp_process+0x298>)
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	f003 0304 	and.w	r3, r3, #4
 801400c:	2b00      	cmp	r3, #0
 801400e:	d04e      	beq.n	80140ae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	7d1b      	ldrb	r3, [r3, #20]
 8014014:	2b02      	cmp	r3, #2
 8014016:	d108      	bne.n	801402a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801401c:	4b97      	ldr	r3, [pc, #604]	@ (801427c <tcp_process+0x29c>)
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	429a      	cmp	r2, r3
 8014022:	d123      	bne.n	801406c <tcp_process+0x8c>
        acceptable = 1;
 8014024:	2301      	movs	r3, #1
 8014026:	76fb      	strb	r3, [r7, #27]
 8014028:	e020      	b.n	801406c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801402e:	4b94      	ldr	r3, [pc, #592]	@ (8014280 <tcp_process+0x2a0>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	429a      	cmp	r2, r3
 8014034:	d102      	bne.n	801403c <tcp_process+0x5c>
        acceptable = 1;
 8014036:	2301      	movs	r3, #1
 8014038:	76fb      	strb	r3, [r7, #27]
 801403a:	e017      	b.n	801406c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801403c:	4b90      	ldr	r3, [pc, #576]	@ (8014280 <tcp_process+0x2a0>)
 801403e:	681a      	ldr	r2, [r3, #0]
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014044:	1ad3      	subs	r3, r2, r3
 8014046:	2b00      	cmp	r3, #0
 8014048:	db10      	blt.n	801406c <tcp_process+0x8c>
 801404a:	4b8d      	ldr	r3, [pc, #564]	@ (8014280 <tcp_process+0x2a0>)
 801404c:	681a      	ldr	r2, [r3, #0]
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014052:	6879      	ldr	r1, [r7, #4]
 8014054:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014056:	440b      	add	r3, r1
 8014058:	1ad3      	subs	r3, r2, r3
 801405a:	2b00      	cmp	r3, #0
 801405c:	dc06      	bgt.n	801406c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	8b5b      	ldrh	r3, [r3, #26]
 8014062:	f043 0302 	orr.w	r3, r3, #2
 8014066:	b29a      	uxth	r2, r3
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801406c:	7efb      	ldrb	r3, [r7, #27]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d01b      	beq.n	80140aa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	7d1b      	ldrb	r3, [r3, #20]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d106      	bne.n	8014088 <tcp_process+0xa8>
 801407a:	4b7c      	ldr	r3, [pc, #496]	@ (801426c <tcp_process+0x28c>)
 801407c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8014080:	4980      	ldr	r1, [pc, #512]	@ (8014284 <tcp_process+0x2a4>)
 8014082:	487c      	ldr	r0, [pc, #496]	@ (8014274 <tcp_process+0x294>)
 8014084:	f015 f94e 	bl	8029324 <iprintf>
      recv_flags |= TF_RESET;
 8014088:	4b7f      	ldr	r3, [pc, #508]	@ (8014288 <tcp_process+0x2a8>)
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	f043 0308 	orr.w	r3, r3, #8
 8014090:	b2da      	uxtb	r2, r3
 8014092:	4b7d      	ldr	r3, [pc, #500]	@ (8014288 <tcp_process+0x2a8>)
 8014094:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	8b5b      	ldrh	r3, [r3, #26]
 801409a:	f023 0301 	bic.w	r3, r3, #1
 801409e:	b29a      	uxth	r2, r3
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80140a4:	f06f 030d 	mvn.w	r3, #13
 80140a8:	e37a      	b.n	80147a0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80140aa:	2300      	movs	r3, #0
 80140ac:	e378      	b.n	80147a0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80140ae:	4b72      	ldr	r3, [pc, #456]	@ (8014278 <tcp_process+0x298>)
 80140b0:	781b      	ldrb	r3, [r3, #0]
 80140b2:	f003 0302 	and.w	r3, r3, #2
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d010      	beq.n	80140dc <tcp_process+0xfc>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	7d1b      	ldrb	r3, [r3, #20]
 80140be:	2b02      	cmp	r3, #2
 80140c0:	d00c      	beq.n	80140dc <tcp_process+0xfc>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	7d1b      	ldrb	r3, [r3, #20]
 80140c6:	2b03      	cmp	r3, #3
 80140c8:	d008      	beq.n	80140dc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	8b5b      	ldrh	r3, [r3, #26]
 80140ce:	f043 0302 	orr.w	r3, r3, #2
 80140d2:	b29a      	uxth	r2, r3
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80140d8:	2300      	movs	r3, #0
 80140da:	e361      	b.n	80147a0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	8b5b      	ldrh	r3, [r3, #26]
 80140e0:	f003 0310 	and.w	r3, r3, #16
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d103      	bne.n	80140f0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80140e8:	4b68      	ldr	r3, [pc, #416]	@ (801428c <tcp_process+0x2ac>)
 80140ea:	681a      	ldr	r2, [r3, #0]
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2200      	movs	r2, #0
 80140f4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2200      	movs	r2, #0
 80140fc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f001 fc2b 	bl	801595c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	7d1b      	ldrb	r3, [r3, #20]
 801410a:	3b02      	subs	r3, #2
 801410c:	2b07      	cmp	r3, #7
 801410e:	f200 8337 	bhi.w	8014780 <tcp_process+0x7a0>
 8014112:	a201      	add	r2, pc, #4	@ (adr r2, 8014118 <tcp_process+0x138>)
 8014114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014118:	08014139 	.word	0x08014139
 801411c:	08014369 	.word	0x08014369
 8014120:	080144e1 	.word	0x080144e1
 8014124:	0801450b 	.word	0x0801450b
 8014128:	0801462f 	.word	0x0801462f
 801412c:	080144e1 	.word	0x080144e1
 8014130:	080146bb 	.word	0x080146bb
 8014134:	0801474b 	.word	0x0801474b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014138:	4b4f      	ldr	r3, [pc, #316]	@ (8014278 <tcp_process+0x298>)
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	f003 0310 	and.w	r3, r3, #16
 8014140:	2b00      	cmp	r3, #0
 8014142:	f000 80e4 	beq.w	801430e <tcp_process+0x32e>
 8014146:	4b4c      	ldr	r3, [pc, #304]	@ (8014278 <tcp_process+0x298>)
 8014148:	781b      	ldrb	r3, [r3, #0]
 801414a:	f003 0302 	and.w	r3, r3, #2
 801414e:	2b00      	cmp	r3, #0
 8014150:	f000 80dd 	beq.w	801430e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014158:	1c5a      	adds	r2, r3, #1
 801415a:	4b48      	ldr	r3, [pc, #288]	@ (801427c <tcp_process+0x29c>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	429a      	cmp	r2, r3
 8014160:	f040 80d5 	bne.w	801430e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014164:	4b46      	ldr	r3, [pc, #280]	@ (8014280 <tcp_process+0x2a0>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	1c5a      	adds	r2, r3, #1
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8014176:	4b41      	ldr	r3, [pc, #260]	@ (801427c <tcp_process+0x29c>)
 8014178:	681a      	ldr	r2, [r3, #0]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801417e:	4b44      	ldr	r3, [pc, #272]	@ (8014290 <tcp_process+0x2b0>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	89db      	ldrh	r3, [r3, #14]
 8014184:	b29a      	uxth	r2, r3
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014198:	4b39      	ldr	r3, [pc, #228]	@ (8014280 <tcp_process+0x2a0>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	1e5a      	subs	r2, r3, #1
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	2204      	movs	r2, #4
 80141a6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	3304      	adds	r3, #4
 80141b0:	4618      	mov	r0, r3
 80141b2:	f005 ff8f 	bl	801a0d4 <ip4_route>
 80141b6:	4601      	mov	r1, r0
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	3304      	adds	r3, #4
 80141bc:	461a      	mov	r2, r3
 80141be:	4620      	mov	r0, r4
 80141c0:	f7ff f88c 	bl	80132dc <tcp_eff_send_mss_netif>
 80141c4:	4603      	mov	r3, r0
 80141c6:	461a      	mov	r2, r3
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80141d0:	009a      	lsls	r2, r3, #2
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80141d6:	005b      	lsls	r3, r3, #1
 80141d8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80141dc:	428b      	cmp	r3, r1
 80141de:	bf38      	it	cc
 80141e0:	460b      	movcc	r3, r1
 80141e2:	429a      	cmp	r2, r3
 80141e4:	d204      	bcs.n	80141f0 <tcp_process+0x210>
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80141ea:	009b      	lsls	r3, r3, #2
 80141ec:	b29b      	uxth	r3, r3
 80141ee:	e00d      	b.n	801420c <tcp_process+0x22c>
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80141f4:	005b      	lsls	r3, r3, #1
 80141f6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80141fa:	4293      	cmp	r3, r2
 80141fc:	d904      	bls.n	8014208 <tcp_process+0x228>
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014202:	005b      	lsls	r3, r3, #1
 8014204:	b29b      	uxth	r3, r3
 8014206:	e001      	b.n	801420c <tcp_process+0x22c>
 8014208:	f241 131c 	movw	r3, #4380	@ 0x111c
 801420c:	687a      	ldr	r2, [r7, #4]
 801420e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014218:	2b00      	cmp	r3, #0
 801421a:	d106      	bne.n	801422a <tcp_process+0x24a>
 801421c:	4b13      	ldr	r3, [pc, #76]	@ (801426c <tcp_process+0x28c>)
 801421e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8014222:	491c      	ldr	r1, [pc, #112]	@ (8014294 <tcp_process+0x2b4>)
 8014224:	4813      	ldr	r0, [pc, #76]	@ (8014274 <tcp_process+0x294>)
 8014226:	f015 f87d 	bl	8029324 <iprintf>
        --pcb->snd_queuelen;
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014230:	3b01      	subs	r3, #1
 8014232:	b29a      	uxth	r2, r3
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801423e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014240:	69fb      	ldr	r3, [r7, #28]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d12a      	bne.n	801429c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801424a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801424c:	69fb      	ldr	r3, [r7, #28]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d106      	bne.n	8014260 <tcp_process+0x280>
 8014252:	4b06      	ldr	r3, [pc, #24]	@ (801426c <tcp_process+0x28c>)
 8014254:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8014258:	490f      	ldr	r1, [pc, #60]	@ (8014298 <tcp_process+0x2b8>)
 801425a:	4806      	ldr	r0, [pc, #24]	@ (8014274 <tcp_process+0x294>)
 801425c:	f015 f862 	bl	8029324 <iprintf>
          pcb->unsent = rseg->next;
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	681a      	ldr	r2, [r3, #0]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014268:	e01c      	b.n	80142a4 <tcp_process+0x2c4>
 801426a:	bf00      	nop
 801426c:	0802d7bc 	.word	0x0802d7bc
 8014270:	0802d9f4 	.word	0x0802d9f4
 8014274:	0802d808 	.word	0x0802d808
 8014278:	200425f8 	.word	0x200425f8
 801427c:	200425f0 	.word	0x200425f0
 8014280:	200425ec 	.word	0x200425ec
 8014284:	0802da10 	.word	0x0802da10
 8014288:	200425f9 	.word	0x200425f9
 801428c:	200425b4 	.word	0x200425b4
 8014290:	200425dc 	.word	0x200425dc
 8014294:	0802da30 	.word	0x0802da30
 8014298:	0802da48 	.word	0x0802da48
        } else {
          pcb->unacked = rseg->next;
 801429c:	69fb      	ldr	r3, [r7, #28]
 801429e:	681a      	ldr	r2, [r3, #0]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80142a4:	69f8      	ldr	r0, [r7, #28]
 80142a6:	f7fe fc54 	bl	8012b52 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d104      	bne.n	80142bc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80142b8:	861a      	strh	r2, [r3, #48]	@ 0x30
 80142ba:	e006      	b.n	80142ca <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	2200      	movs	r2, #0
 80142c0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2200      	movs	r2, #0
 80142c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d00a      	beq.n	80142ea <tcp_process+0x30a>
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80142da:	687a      	ldr	r2, [r7, #4]
 80142dc:	6910      	ldr	r0, [r2, #16]
 80142de:	2200      	movs	r2, #0
 80142e0:	6879      	ldr	r1, [r7, #4]
 80142e2:	4798      	blx	r3
 80142e4:	4603      	mov	r3, r0
 80142e6:	76bb      	strb	r3, [r7, #26]
 80142e8:	e001      	b.n	80142ee <tcp_process+0x30e>
 80142ea:	2300      	movs	r3, #0
 80142ec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80142ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80142f2:	f113 0f0d 	cmn.w	r3, #13
 80142f6:	d102      	bne.n	80142fe <tcp_process+0x31e>
          return ERR_ABRT;
 80142f8:	f06f 030c 	mvn.w	r3, #12
 80142fc:	e250      	b.n	80147a0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	8b5b      	ldrh	r3, [r3, #26]
 8014302:	f043 0302 	orr.w	r3, r3, #2
 8014306:	b29a      	uxth	r2, r3
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801430c:	e23a      	b.n	8014784 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801430e:	4b98      	ldr	r3, [pc, #608]	@ (8014570 <tcp_process+0x590>)
 8014310:	781b      	ldrb	r3, [r3, #0]
 8014312:	f003 0310 	and.w	r3, r3, #16
 8014316:	2b00      	cmp	r3, #0
 8014318:	f000 8234 	beq.w	8014784 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801431c:	4b95      	ldr	r3, [pc, #596]	@ (8014574 <tcp_process+0x594>)
 801431e:	6819      	ldr	r1, [r3, #0]
 8014320:	4b95      	ldr	r3, [pc, #596]	@ (8014578 <tcp_process+0x598>)
 8014322:	881b      	ldrh	r3, [r3, #0]
 8014324:	461a      	mov	r2, r3
 8014326:	4b95      	ldr	r3, [pc, #596]	@ (801457c <tcp_process+0x59c>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801432c:	4b94      	ldr	r3, [pc, #592]	@ (8014580 <tcp_process+0x5a0>)
 801432e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014330:	885b      	ldrh	r3, [r3, #2]
 8014332:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014334:	4a92      	ldr	r2, [pc, #584]	@ (8014580 <tcp_process+0x5a0>)
 8014336:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014338:	8812      	ldrh	r2, [r2, #0]
 801433a:	b292      	uxth	r2, r2
 801433c:	9202      	str	r2, [sp, #8]
 801433e:	9301      	str	r3, [sp, #4]
 8014340:	4b90      	ldr	r3, [pc, #576]	@ (8014584 <tcp_process+0x5a4>)
 8014342:	9300      	str	r3, [sp, #0]
 8014344:	4b90      	ldr	r3, [pc, #576]	@ (8014588 <tcp_process+0x5a8>)
 8014346:	4602      	mov	r2, r0
 8014348:	6878      	ldr	r0, [r7, #4]
 801434a:	f003 f8d7 	bl	80174fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014354:	2b05      	cmp	r3, #5
 8014356:	f200 8215 	bhi.w	8014784 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	2200      	movs	r2, #0
 801435e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f002 fea3 	bl	80170ac <tcp_rexmit_rto>
      break;
 8014366:	e20d      	b.n	8014784 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014368:	4b81      	ldr	r3, [pc, #516]	@ (8014570 <tcp_process+0x590>)
 801436a:	781b      	ldrb	r3, [r3, #0]
 801436c:	f003 0310 	and.w	r3, r3, #16
 8014370:	2b00      	cmp	r3, #0
 8014372:	f000 80a1 	beq.w	80144b8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014376:	4b7f      	ldr	r3, [pc, #508]	@ (8014574 <tcp_process+0x594>)
 8014378:	681a      	ldr	r2, [r3, #0]
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801437e:	1ad3      	subs	r3, r2, r3
 8014380:	3b01      	subs	r3, #1
 8014382:	2b00      	cmp	r3, #0
 8014384:	db7e      	blt.n	8014484 <tcp_process+0x4a4>
 8014386:	4b7b      	ldr	r3, [pc, #492]	@ (8014574 <tcp_process+0x594>)
 8014388:	681a      	ldr	r2, [r3, #0]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801438e:	1ad3      	subs	r3, r2, r3
 8014390:	2b00      	cmp	r3, #0
 8014392:	dc77      	bgt.n	8014484 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2204      	movs	r2, #4
 8014398:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d102      	bne.n	80143a8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80143a2:	23fa      	movs	r3, #250	@ 0xfa
 80143a4:	76bb      	strb	r3, [r7, #26]
 80143a6:	e01d      	b.n	80143e4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80143ac:	699b      	ldr	r3, [r3, #24]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d106      	bne.n	80143c0 <tcp_process+0x3e0>
 80143b2:	4b76      	ldr	r3, [pc, #472]	@ (801458c <tcp_process+0x5ac>)
 80143b4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80143b8:	4975      	ldr	r1, [pc, #468]	@ (8014590 <tcp_process+0x5b0>)
 80143ba:	4876      	ldr	r0, [pc, #472]	@ (8014594 <tcp_process+0x5b4>)
 80143bc:	f014 ffb2 	bl	8029324 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80143c4:	699b      	ldr	r3, [r3, #24]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d00a      	beq.n	80143e0 <tcp_process+0x400>
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80143ce:	699b      	ldr	r3, [r3, #24]
 80143d0:	687a      	ldr	r2, [r7, #4]
 80143d2:	6910      	ldr	r0, [r2, #16]
 80143d4:	2200      	movs	r2, #0
 80143d6:	6879      	ldr	r1, [r7, #4]
 80143d8:	4798      	blx	r3
 80143da:	4603      	mov	r3, r0
 80143dc:	76bb      	strb	r3, [r7, #26]
 80143de:	e001      	b.n	80143e4 <tcp_process+0x404>
 80143e0:	23f0      	movs	r3, #240	@ 0xf0
 80143e2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80143e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d00a      	beq.n	8014402 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80143ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80143f0:	f113 0f0d 	cmn.w	r3, #13
 80143f4:	d002      	beq.n	80143fc <tcp_process+0x41c>
              tcp_abort(pcb);
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f7fd fdc6 	bl	8011f88 <tcp_abort>
            }
            return ERR_ABRT;
 80143fc:	f06f 030c 	mvn.w	r3, #12
 8014400:	e1ce      	b.n	80147a0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014402:	6878      	ldr	r0, [r7, #4]
 8014404:	f000 fae0 	bl	80149c8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014408:	4b63      	ldr	r3, [pc, #396]	@ (8014598 <tcp_process+0x5b8>)
 801440a:	881b      	ldrh	r3, [r3, #0]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d005      	beq.n	801441c <tcp_process+0x43c>
            recv_acked--;
 8014410:	4b61      	ldr	r3, [pc, #388]	@ (8014598 <tcp_process+0x5b8>)
 8014412:	881b      	ldrh	r3, [r3, #0]
 8014414:	3b01      	subs	r3, #1
 8014416:	b29a      	uxth	r2, r3
 8014418:	4b5f      	ldr	r3, [pc, #380]	@ (8014598 <tcp_process+0x5b8>)
 801441a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014420:	009a      	lsls	r2, r3, #2
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014426:	005b      	lsls	r3, r3, #1
 8014428:	f241 111c 	movw	r1, #4380	@ 0x111c
 801442c:	428b      	cmp	r3, r1
 801442e:	bf38      	it	cc
 8014430:	460b      	movcc	r3, r1
 8014432:	429a      	cmp	r2, r3
 8014434:	d204      	bcs.n	8014440 <tcp_process+0x460>
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801443a:	009b      	lsls	r3, r3, #2
 801443c:	b29b      	uxth	r3, r3
 801443e:	e00d      	b.n	801445c <tcp_process+0x47c>
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014444:	005b      	lsls	r3, r3, #1
 8014446:	f241 121c 	movw	r2, #4380	@ 0x111c
 801444a:	4293      	cmp	r3, r2
 801444c:	d904      	bls.n	8014458 <tcp_process+0x478>
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014452:	005b      	lsls	r3, r3, #1
 8014454:	b29b      	uxth	r3, r3
 8014456:	e001      	b.n	801445c <tcp_process+0x47c>
 8014458:	f241 131c 	movw	r3, #4380	@ 0x111c
 801445c:	687a      	ldr	r2, [r7, #4]
 801445e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014462:	4b4e      	ldr	r3, [pc, #312]	@ (801459c <tcp_process+0x5bc>)
 8014464:	781b      	ldrb	r3, [r3, #0]
 8014466:	f003 0320 	and.w	r3, r3, #32
 801446a:	2b00      	cmp	r3, #0
 801446c:	d037      	beq.n	80144de <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	8b5b      	ldrh	r3, [r3, #26]
 8014472:	f043 0302 	orr.w	r3, r3, #2
 8014476:	b29a      	uxth	r2, r3
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2207      	movs	r2, #7
 8014480:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014482:	e02c      	b.n	80144de <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014484:	4b3b      	ldr	r3, [pc, #236]	@ (8014574 <tcp_process+0x594>)
 8014486:	6819      	ldr	r1, [r3, #0]
 8014488:	4b3b      	ldr	r3, [pc, #236]	@ (8014578 <tcp_process+0x598>)
 801448a:	881b      	ldrh	r3, [r3, #0]
 801448c:	461a      	mov	r2, r3
 801448e:	4b3b      	ldr	r3, [pc, #236]	@ (801457c <tcp_process+0x59c>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014494:	4b3a      	ldr	r3, [pc, #232]	@ (8014580 <tcp_process+0x5a0>)
 8014496:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014498:	885b      	ldrh	r3, [r3, #2]
 801449a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801449c:	4a38      	ldr	r2, [pc, #224]	@ (8014580 <tcp_process+0x5a0>)
 801449e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144a0:	8812      	ldrh	r2, [r2, #0]
 80144a2:	b292      	uxth	r2, r2
 80144a4:	9202      	str	r2, [sp, #8]
 80144a6:	9301      	str	r3, [sp, #4]
 80144a8:	4b36      	ldr	r3, [pc, #216]	@ (8014584 <tcp_process+0x5a4>)
 80144aa:	9300      	str	r3, [sp, #0]
 80144ac:	4b36      	ldr	r3, [pc, #216]	@ (8014588 <tcp_process+0x5a8>)
 80144ae:	4602      	mov	r2, r0
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f003 f823 	bl	80174fc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80144b6:	e167      	b.n	8014788 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80144b8:	4b2d      	ldr	r3, [pc, #180]	@ (8014570 <tcp_process+0x590>)
 80144ba:	781b      	ldrb	r3, [r3, #0]
 80144bc:	f003 0302 	and.w	r3, r3, #2
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	f000 8161 	beq.w	8014788 <tcp_process+0x7a8>
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144ca:	1e5a      	subs	r2, r3, #1
 80144cc:	4b2b      	ldr	r3, [pc, #172]	@ (801457c <tcp_process+0x59c>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	429a      	cmp	r2, r3
 80144d2:	f040 8159 	bne.w	8014788 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f002 fe0a 	bl	80170f0 <tcp_rexmit>
      break;
 80144dc:	e154      	b.n	8014788 <tcp_process+0x7a8>
 80144de:	e153      	b.n	8014788 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f000 fa71 	bl	80149c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80144e6:	4b2d      	ldr	r3, [pc, #180]	@ (801459c <tcp_process+0x5bc>)
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	f003 0320 	and.w	r3, r3, #32
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	f000 814c 	beq.w	801478c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	8b5b      	ldrh	r3, [r3, #26]
 80144f8:	f043 0302 	orr.w	r3, r3, #2
 80144fc:	b29a      	uxth	r2, r3
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	2207      	movs	r2, #7
 8014506:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014508:	e140      	b.n	801478c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f000 fa5c 	bl	80149c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014510:	4b22      	ldr	r3, [pc, #136]	@ (801459c <tcp_process+0x5bc>)
 8014512:	781b      	ldrb	r3, [r3, #0]
 8014514:	f003 0320 	and.w	r3, r3, #32
 8014518:	2b00      	cmp	r3, #0
 801451a:	d071      	beq.n	8014600 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801451c:	4b14      	ldr	r3, [pc, #80]	@ (8014570 <tcp_process+0x590>)
 801451e:	781b      	ldrb	r3, [r3, #0]
 8014520:	f003 0310 	and.w	r3, r3, #16
 8014524:	2b00      	cmp	r3, #0
 8014526:	d060      	beq.n	80145ea <tcp_process+0x60a>
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801452c:	4b11      	ldr	r3, [pc, #68]	@ (8014574 <tcp_process+0x594>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	429a      	cmp	r2, r3
 8014532:	d15a      	bne.n	80145ea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014538:	2b00      	cmp	r3, #0
 801453a:	d156      	bne.n	80145ea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	8b5b      	ldrh	r3, [r3, #26]
 8014540:	f043 0302 	orr.w	r3, r3, #2
 8014544:	b29a      	uxth	r2, r3
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801454a:	6878      	ldr	r0, [r7, #4]
 801454c:	f7fe fdbc 	bl	80130c8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014550:	4b13      	ldr	r3, [pc, #76]	@ (80145a0 <tcp_process+0x5c0>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	429a      	cmp	r2, r3
 8014558:	d105      	bne.n	8014566 <tcp_process+0x586>
 801455a:	4b11      	ldr	r3, [pc, #68]	@ (80145a0 <tcp_process+0x5c0>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	68db      	ldr	r3, [r3, #12]
 8014560:	4a0f      	ldr	r2, [pc, #60]	@ (80145a0 <tcp_process+0x5c0>)
 8014562:	6013      	str	r3, [r2, #0]
 8014564:	e02e      	b.n	80145c4 <tcp_process+0x5e4>
 8014566:	4b0e      	ldr	r3, [pc, #56]	@ (80145a0 <tcp_process+0x5c0>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	617b      	str	r3, [r7, #20]
 801456c:	e027      	b.n	80145be <tcp_process+0x5de>
 801456e:	bf00      	nop
 8014570:	200425f8 	.word	0x200425f8
 8014574:	200425f0 	.word	0x200425f0
 8014578:	200425f6 	.word	0x200425f6
 801457c:	200425ec 	.word	0x200425ec
 8014580:	200425dc 	.word	0x200425dc
 8014584:	20037380 	.word	0x20037380
 8014588:	20037384 	.word	0x20037384
 801458c:	0802d7bc 	.word	0x0802d7bc
 8014590:	0802da5c 	.word	0x0802da5c
 8014594:	0802d808 	.word	0x0802d808
 8014598:	200425f4 	.word	0x200425f4
 801459c:	200425f9 	.word	0x200425f9
 80145a0:	200425c0 	.word	0x200425c0
 80145a4:	697b      	ldr	r3, [r7, #20]
 80145a6:	68db      	ldr	r3, [r3, #12]
 80145a8:	687a      	ldr	r2, [r7, #4]
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d104      	bne.n	80145b8 <tcp_process+0x5d8>
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	68da      	ldr	r2, [r3, #12]
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	60da      	str	r2, [r3, #12]
 80145b6:	e005      	b.n	80145c4 <tcp_process+0x5e4>
 80145b8:	697b      	ldr	r3, [r7, #20]
 80145ba:	68db      	ldr	r3, [r3, #12]
 80145bc:	617b      	str	r3, [r7, #20]
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d1ef      	bne.n	80145a4 <tcp_process+0x5c4>
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	2200      	movs	r2, #0
 80145c8:	60da      	str	r2, [r3, #12]
 80145ca:	4b77      	ldr	r3, [pc, #476]	@ (80147a8 <tcp_process+0x7c8>)
 80145cc:	2201      	movs	r2, #1
 80145ce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	220a      	movs	r2, #10
 80145d4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80145d6:	4b75      	ldr	r3, [pc, #468]	@ (80147ac <tcp_process+0x7cc>)
 80145d8:	681a      	ldr	r2, [r3, #0]
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	60da      	str	r2, [r3, #12]
 80145de:	4a73      	ldr	r2, [pc, #460]	@ (80147ac <tcp_process+0x7cc>)
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	6013      	str	r3, [r2, #0]
 80145e4:	f003 f94c 	bl	8017880 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80145e8:	e0d2      	b.n	8014790 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	8b5b      	ldrh	r3, [r3, #26]
 80145ee:	f043 0302 	orr.w	r3, r3, #2
 80145f2:	b29a      	uxth	r2, r3
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2208      	movs	r2, #8
 80145fc:	751a      	strb	r2, [r3, #20]
      break;
 80145fe:	e0c7      	b.n	8014790 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014600:	4b6b      	ldr	r3, [pc, #428]	@ (80147b0 <tcp_process+0x7d0>)
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	f003 0310 	and.w	r3, r3, #16
 8014608:	2b00      	cmp	r3, #0
 801460a:	f000 80c1 	beq.w	8014790 <tcp_process+0x7b0>
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014612:	4b68      	ldr	r3, [pc, #416]	@ (80147b4 <tcp_process+0x7d4>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	429a      	cmp	r2, r3
 8014618:	f040 80ba 	bne.w	8014790 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014620:	2b00      	cmp	r3, #0
 8014622:	f040 80b5 	bne.w	8014790 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	2206      	movs	r2, #6
 801462a:	751a      	strb	r2, [r3, #20]
      break;
 801462c:	e0b0      	b.n	8014790 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801462e:	6878      	ldr	r0, [r7, #4]
 8014630:	f000 f9ca 	bl	80149c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014634:	4b60      	ldr	r3, [pc, #384]	@ (80147b8 <tcp_process+0x7d8>)
 8014636:	781b      	ldrb	r3, [r3, #0]
 8014638:	f003 0320 	and.w	r3, r3, #32
 801463c:	2b00      	cmp	r3, #0
 801463e:	f000 80a9 	beq.w	8014794 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	8b5b      	ldrh	r3, [r3, #26]
 8014646:	f043 0302 	orr.w	r3, r3, #2
 801464a:	b29a      	uxth	r2, r3
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f7fe fd39 	bl	80130c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014656:	4b59      	ldr	r3, [pc, #356]	@ (80147bc <tcp_process+0x7dc>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	687a      	ldr	r2, [r7, #4]
 801465c:	429a      	cmp	r2, r3
 801465e:	d105      	bne.n	801466c <tcp_process+0x68c>
 8014660:	4b56      	ldr	r3, [pc, #344]	@ (80147bc <tcp_process+0x7dc>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	68db      	ldr	r3, [r3, #12]
 8014666:	4a55      	ldr	r2, [pc, #340]	@ (80147bc <tcp_process+0x7dc>)
 8014668:	6013      	str	r3, [r2, #0]
 801466a:	e013      	b.n	8014694 <tcp_process+0x6b4>
 801466c:	4b53      	ldr	r3, [pc, #332]	@ (80147bc <tcp_process+0x7dc>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	613b      	str	r3, [r7, #16]
 8014672:	e00c      	b.n	801468e <tcp_process+0x6ae>
 8014674:	693b      	ldr	r3, [r7, #16]
 8014676:	68db      	ldr	r3, [r3, #12]
 8014678:	687a      	ldr	r2, [r7, #4]
 801467a:	429a      	cmp	r2, r3
 801467c:	d104      	bne.n	8014688 <tcp_process+0x6a8>
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	68da      	ldr	r2, [r3, #12]
 8014682:	693b      	ldr	r3, [r7, #16]
 8014684:	60da      	str	r2, [r3, #12]
 8014686:	e005      	b.n	8014694 <tcp_process+0x6b4>
 8014688:	693b      	ldr	r3, [r7, #16]
 801468a:	68db      	ldr	r3, [r3, #12]
 801468c:	613b      	str	r3, [r7, #16]
 801468e:	693b      	ldr	r3, [r7, #16]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d1ef      	bne.n	8014674 <tcp_process+0x694>
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2200      	movs	r2, #0
 8014698:	60da      	str	r2, [r3, #12]
 801469a:	4b43      	ldr	r3, [pc, #268]	@ (80147a8 <tcp_process+0x7c8>)
 801469c:	2201      	movs	r2, #1
 801469e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	220a      	movs	r2, #10
 80146a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80146a6:	4b41      	ldr	r3, [pc, #260]	@ (80147ac <tcp_process+0x7cc>)
 80146a8:	681a      	ldr	r2, [r3, #0]
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	60da      	str	r2, [r3, #12]
 80146ae:	4a3f      	ldr	r2, [pc, #252]	@ (80147ac <tcp_process+0x7cc>)
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	6013      	str	r3, [r2, #0]
 80146b4:	f003 f8e4 	bl	8017880 <tcp_timer_needed>
      }
      break;
 80146b8:	e06c      	b.n	8014794 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 f984 	bl	80149c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80146c0:	4b3b      	ldr	r3, [pc, #236]	@ (80147b0 <tcp_process+0x7d0>)
 80146c2:	781b      	ldrb	r3, [r3, #0]
 80146c4:	f003 0310 	and.w	r3, r3, #16
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d065      	beq.n	8014798 <tcp_process+0x7b8>
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80146d0:	4b38      	ldr	r3, [pc, #224]	@ (80147b4 <tcp_process+0x7d4>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	429a      	cmp	r2, r3
 80146d6:	d15f      	bne.n	8014798 <tcp_process+0x7b8>
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d15b      	bne.n	8014798 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f7fe fcf1 	bl	80130c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80146e6:	4b35      	ldr	r3, [pc, #212]	@ (80147bc <tcp_process+0x7dc>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	687a      	ldr	r2, [r7, #4]
 80146ec:	429a      	cmp	r2, r3
 80146ee:	d105      	bne.n	80146fc <tcp_process+0x71c>
 80146f0:	4b32      	ldr	r3, [pc, #200]	@ (80147bc <tcp_process+0x7dc>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	68db      	ldr	r3, [r3, #12]
 80146f6:	4a31      	ldr	r2, [pc, #196]	@ (80147bc <tcp_process+0x7dc>)
 80146f8:	6013      	str	r3, [r2, #0]
 80146fa:	e013      	b.n	8014724 <tcp_process+0x744>
 80146fc:	4b2f      	ldr	r3, [pc, #188]	@ (80147bc <tcp_process+0x7dc>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	60fb      	str	r3, [r7, #12]
 8014702:	e00c      	b.n	801471e <tcp_process+0x73e>
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	68db      	ldr	r3, [r3, #12]
 8014708:	687a      	ldr	r2, [r7, #4]
 801470a:	429a      	cmp	r2, r3
 801470c:	d104      	bne.n	8014718 <tcp_process+0x738>
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	68da      	ldr	r2, [r3, #12]
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	60da      	str	r2, [r3, #12]
 8014716:	e005      	b.n	8014724 <tcp_process+0x744>
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	68db      	ldr	r3, [r3, #12]
 801471c:	60fb      	str	r3, [r7, #12]
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d1ef      	bne.n	8014704 <tcp_process+0x724>
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2200      	movs	r2, #0
 8014728:	60da      	str	r2, [r3, #12]
 801472a:	4b1f      	ldr	r3, [pc, #124]	@ (80147a8 <tcp_process+0x7c8>)
 801472c:	2201      	movs	r2, #1
 801472e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	220a      	movs	r2, #10
 8014734:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014736:	4b1d      	ldr	r3, [pc, #116]	@ (80147ac <tcp_process+0x7cc>)
 8014738:	681a      	ldr	r2, [r3, #0]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	60da      	str	r2, [r3, #12]
 801473e:	4a1b      	ldr	r2, [pc, #108]	@ (80147ac <tcp_process+0x7cc>)
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6013      	str	r3, [r2, #0]
 8014744:	f003 f89c 	bl	8017880 <tcp_timer_needed>
      }
      break;
 8014748:	e026      	b.n	8014798 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801474a:	6878      	ldr	r0, [r7, #4]
 801474c:	f000 f93c 	bl	80149c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014750:	4b17      	ldr	r3, [pc, #92]	@ (80147b0 <tcp_process+0x7d0>)
 8014752:	781b      	ldrb	r3, [r3, #0]
 8014754:	f003 0310 	and.w	r3, r3, #16
 8014758:	2b00      	cmp	r3, #0
 801475a:	d01f      	beq.n	801479c <tcp_process+0x7bc>
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014760:	4b14      	ldr	r3, [pc, #80]	@ (80147b4 <tcp_process+0x7d4>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	429a      	cmp	r2, r3
 8014766:	d119      	bne.n	801479c <tcp_process+0x7bc>
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801476c:	2b00      	cmp	r3, #0
 801476e:	d115      	bne.n	801479c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014770:	4b11      	ldr	r3, [pc, #68]	@ (80147b8 <tcp_process+0x7d8>)
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	f043 0310 	orr.w	r3, r3, #16
 8014778:	b2da      	uxtb	r2, r3
 801477a:	4b0f      	ldr	r3, [pc, #60]	@ (80147b8 <tcp_process+0x7d8>)
 801477c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801477e:	e00d      	b.n	801479c <tcp_process+0x7bc>
    default:
      break;
 8014780:	bf00      	nop
 8014782:	e00c      	b.n	801479e <tcp_process+0x7be>
      break;
 8014784:	bf00      	nop
 8014786:	e00a      	b.n	801479e <tcp_process+0x7be>
      break;
 8014788:	bf00      	nop
 801478a:	e008      	b.n	801479e <tcp_process+0x7be>
      break;
 801478c:	bf00      	nop
 801478e:	e006      	b.n	801479e <tcp_process+0x7be>
      break;
 8014790:	bf00      	nop
 8014792:	e004      	b.n	801479e <tcp_process+0x7be>
      break;
 8014794:	bf00      	nop
 8014796:	e002      	b.n	801479e <tcp_process+0x7be>
      break;
 8014798:	bf00      	nop
 801479a:	e000      	b.n	801479e <tcp_process+0x7be>
      break;
 801479c:	bf00      	nop
  }
  return ERR_OK;
 801479e:	2300      	movs	r3, #0
}
 80147a0:	4618      	mov	r0, r3
 80147a2:	3724      	adds	r7, #36	@ 0x24
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd90      	pop	{r4, r7, pc}
 80147a8:	200425c8 	.word	0x200425c8
 80147ac:	200425c4 	.word	0x200425c4
 80147b0:	200425f8 	.word	0x200425f8
 80147b4:	200425f0 	.word	0x200425f0
 80147b8:	200425f9 	.word	0x200425f9
 80147bc:	200425c0 	.word	0x200425c0

080147c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80147c0:	b590      	push	{r4, r7, lr}
 80147c2:	b085      	sub	sp, #20
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
 80147c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d106      	bne.n	80147de <tcp_oos_insert_segment+0x1e>
 80147d0:	4b3b      	ldr	r3, [pc, #236]	@ (80148c0 <tcp_oos_insert_segment+0x100>)
 80147d2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80147d6:	493b      	ldr	r1, [pc, #236]	@ (80148c4 <tcp_oos_insert_segment+0x104>)
 80147d8:	483b      	ldr	r0, [pc, #236]	@ (80148c8 <tcp_oos_insert_segment+0x108>)
 80147da:	f014 fda3 	bl	8029324 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	68db      	ldr	r3, [r3, #12]
 80147e2:	899b      	ldrh	r3, [r3, #12]
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	4618      	mov	r0, r3
 80147e8:	f7fb f8d4 	bl	800f994 <lwip_htons>
 80147ec:	4603      	mov	r3, r0
 80147ee:	b2db      	uxtb	r3, r3
 80147f0:	f003 0301 	and.w	r3, r3, #1
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d028      	beq.n	801484a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80147f8:	6838      	ldr	r0, [r7, #0]
 80147fa:	f7fe f995 	bl	8012b28 <tcp_segs_free>
    next = NULL;
 80147fe:	2300      	movs	r3, #0
 8014800:	603b      	str	r3, [r7, #0]
 8014802:	e056      	b.n	80148b2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	68db      	ldr	r3, [r3, #12]
 8014808:	899b      	ldrh	r3, [r3, #12]
 801480a:	b29b      	uxth	r3, r3
 801480c:	4618      	mov	r0, r3
 801480e:	f7fb f8c1 	bl	800f994 <lwip_htons>
 8014812:	4603      	mov	r3, r0
 8014814:	b2db      	uxtb	r3, r3
 8014816:	f003 0301 	and.w	r3, r3, #1
 801481a:	2b00      	cmp	r3, #0
 801481c:	d00d      	beq.n	801483a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	68db      	ldr	r3, [r3, #12]
 8014822:	899b      	ldrh	r3, [r3, #12]
 8014824:	b29c      	uxth	r4, r3
 8014826:	2001      	movs	r0, #1
 8014828:	f7fb f8b4 	bl	800f994 <lwip_htons>
 801482c:	4603      	mov	r3, r0
 801482e:	461a      	mov	r2, r3
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	68db      	ldr	r3, [r3, #12]
 8014834:	4322      	orrs	r2, r4
 8014836:	b292      	uxth	r2, r2
 8014838:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014844:	68f8      	ldr	r0, [r7, #12]
 8014846:	f7fe f984 	bl	8012b52 <tcp_seg_free>
    while (next &&
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d00e      	beq.n	801486e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	891b      	ldrh	r3, [r3, #8]
 8014854:	461a      	mov	r2, r3
 8014856:	4b1d      	ldr	r3, [pc, #116]	@ (80148cc <tcp_oos_insert_segment+0x10c>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	441a      	add	r2, r3
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	68db      	ldr	r3, [r3, #12]
 8014860:	685b      	ldr	r3, [r3, #4]
 8014862:	6839      	ldr	r1, [r7, #0]
 8014864:	8909      	ldrh	r1, [r1, #8]
 8014866:	440b      	add	r3, r1
 8014868:	1ad3      	subs	r3, r2, r3
    while (next &&
 801486a:	2b00      	cmp	r3, #0
 801486c:	daca      	bge.n	8014804 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d01e      	beq.n	80148b2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	891b      	ldrh	r3, [r3, #8]
 8014878:	461a      	mov	r2, r3
 801487a:	4b14      	ldr	r3, [pc, #80]	@ (80148cc <tcp_oos_insert_segment+0x10c>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	441a      	add	r2, r3
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	68db      	ldr	r3, [r3, #12]
 8014884:	685b      	ldr	r3, [r3, #4]
 8014886:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014888:	2b00      	cmp	r3, #0
 801488a:	dd12      	ble.n	80148b2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801488c:	683b      	ldr	r3, [r7, #0]
 801488e:	68db      	ldr	r3, [r3, #12]
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	b29a      	uxth	r2, r3
 8014894:	4b0d      	ldr	r3, [pc, #52]	@ (80148cc <tcp_oos_insert_segment+0x10c>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	b29b      	uxth	r3, r3
 801489a:	1ad3      	subs	r3, r2, r3
 801489c:	b29a      	uxth	r2, r3
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	685a      	ldr	r2, [r3, #4]
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	891b      	ldrh	r3, [r3, #8]
 80148aa:	4619      	mov	r1, r3
 80148ac:	4610      	mov	r0, r2
 80148ae:	f7fc fbb3 	bl	8011018 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	683a      	ldr	r2, [r7, #0]
 80148b6:	601a      	str	r2, [r3, #0]
}
 80148b8:	bf00      	nop
 80148ba:	3714      	adds	r7, #20
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd90      	pop	{r4, r7, pc}
 80148c0:	0802d7bc 	.word	0x0802d7bc
 80148c4:	0802da7c 	.word	0x0802da7c
 80148c8:	0802d808 	.word	0x0802d808
 80148cc:	200425ec 	.word	0x200425ec

080148d0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80148d0:	b5b0      	push	{r4, r5, r7, lr}
 80148d2:	b086      	sub	sp, #24
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	60f8      	str	r0, [r7, #12]
 80148d8:	60b9      	str	r1, [r7, #8]
 80148da:	607a      	str	r2, [r7, #4]
 80148dc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80148de:	e03e      	b.n	801495e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80148e0:	68bb      	ldr	r3, [r7, #8]
 80148e2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80148ea:	697b      	ldr	r3, [r7, #20]
 80148ec:	685b      	ldr	r3, [r3, #4]
 80148ee:	4618      	mov	r0, r3
 80148f0:	f7fc fdd8 	bl	80114a4 <pbuf_clen>
 80148f4:	4603      	mov	r3, r0
 80148f6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80148fe:	8a7a      	ldrh	r2, [r7, #18]
 8014900:	429a      	cmp	r2, r3
 8014902:	d906      	bls.n	8014912 <tcp_free_acked_segments+0x42>
 8014904:	4b2a      	ldr	r3, [pc, #168]	@ (80149b0 <tcp_free_acked_segments+0xe0>)
 8014906:	f240 4257 	movw	r2, #1111	@ 0x457
 801490a:	492a      	ldr	r1, [pc, #168]	@ (80149b4 <tcp_free_acked_segments+0xe4>)
 801490c:	482a      	ldr	r0, [pc, #168]	@ (80149b8 <tcp_free_acked_segments+0xe8>)
 801490e:	f014 fd09 	bl	8029324 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8014918:	8a7b      	ldrh	r3, [r7, #18]
 801491a:	1ad3      	subs	r3, r2, r3
 801491c:	b29a      	uxth	r2, r3
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	891a      	ldrh	r2, [r3, #8]
 8014928:	4b24      	ldr	r3, [pc, #144]	@ (80149bc <tcp_free_acked_segments+0xec>)
 801492a:	881b      	ldrh	r3, [r3, #0]
 801492c:	4413      	add	r3, r2
 801492e:	b29a      	uxth	r2, r3
 8014930:	4b22      	ldr	r3, [pc, #136]	@ (80149bc <tcp_free_acked_segments+0xec>)
 8014932:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014934:	6978      	ldr	r0, [r7, #20]
 8014936:	f7fe f90c 	bl	8012b52 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014940:	2b00      	cmp	r3, #0
 8014942:	d00c      	beq.n	801495e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d109      	bne.n	801495e <tcp_free_acked_segments+0x8e>
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d106      	bne.n	801495e <tcp_free_acked_segments+0x8e>
 8014950:	4b17      	ldr	r3, [pc, #92]	@ (80149b0 <tcp_free_acked_segments+0xe0>)
 8014952:	f240 4261 	movw	r2, #1121	@ 0x461
 8014956:	491a      	ldr	r1, [pc, #104]	@ (80149c0 <tcp_free_acked_segments+0xf0>)
 8014958:	4817      	ldr	r0, [pc, #92]	@ (80149b8 <tcp_free_acked_segments+0xe8>)
 801495a:	f014 fce3 	bl	8029324 <iprintf>
  while (seg_list != NULL &&
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d020      	beq.n	80149a6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014964:	68bb      	ldr	r3, [r7, #8]
 8014966:	68db      	ldr	r3, [r3, #12]
 8014968:	685b      	ldr	r3, [r3, #4]
 801496a:	4618      	mov	r0, r3
 801496c:	f7fb f827 	bl	800f9be <lwip_htonl>
 8014970:	4604      	mov	r4, r0
 8014972:	68bb      	ldr	r3, [r7, #8]
 8014974:	891b      	ldrh	r3, [r3, #8]
 8014976:	461d      	mov	r5, r3
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	68db      	ldr	r3, [r3, #12]
 801497c:	899b      	ldrh	r3, [r3, #12]
 801497e:	b29b      	uxth	r3, r3
 8014980:	4618      	mov	r0, r3
 8014982:	f7fb f807 	bl	800f994 <lwip_htons>
 8014986:	4603      	mov	r3, r0
 8014988:	b2db      	uxtb	r3, r3
 801498a:	f003 0303 	and.w	r3, r3, #3
 801498e:	2b00      	cmp	r3, #0
 8014990:	d001      	beq.n	8014996 <tcp_free_acked_segments+0xc6>
 8014992:	2301      	movs	r3, #1
 8014994:	e000      	b.n	8014998 <tcp_free_acked_segments+0xc8>
 8014996:	2300      	movs	r3, #0
 8014998:	442b      	add	r3, r5
 801499a:	18e2      	adds	r2, r4, r3
 801499c:	4b09      	ldr	r3, [pc, #36]	@ (80149c4 <tcp_free_acked_segments+0xf4>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	dd9c      	ble.n	80148e0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80149a6:	68bb      	ldr	r3, [r7, #8]
}
 80149a8:	4618      	mov	r0, r3
 80149aa:	3718      	adds	r7, #24
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bdb0      	pop	{r4, r5, r7, pc}
 80149b0:	0802d7bc 	.word	0x0802d7bc
 80149b4:	0802daa4 	.word	0x0802daa4
 80149b8:	0802d808 	.word	0x0802d808
 80149bc:	200425f4 	.word	0x200425f4
 80149c0:	0802dacc 	.word	0x0802dacc
 80149c4:	200425f0 	.word	0x200425f0

080149c8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80149c8:	b5b0      	push	{r4, r5, r7, lr}
 80149ca:	b094      	sub	sp, #80	@ 0x50
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80149d0:	2300      	movs	r3, #0
 80149d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d106      	bne.n	80149e8 <tcp_receive+0x20>
 80149da:	4b91      	ldr	r3, [pc, #580]	@ (8014c20 <tcp_receive+0x258>)
 80149dc:	f240 427b 	movw	r2, #1147	@ 0x47b
 80149e0:	4990      	ldr	r1, [pc, #576]	@ (8014c24 <tcp_receive+0x25c>)
 80149e2:	4891      	ldr	r0, [pc, #580]	@ (8014c28 <tcp_receive+0x260>)
 80149e4:	f014 fc9e 	bl	8029324 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	7d1b      	ldrb	r3, [r3, #20]
 80149ec:	2b03      	cmp	r3, #3
 80149ee:	d806      	bhi.n	80149fe <tcp_receive+0x36>
 80149f0:	4b8b      	ldr	r3, [pc, #556]	@ (8014c20 <tcp_receive+0x258>)
 80149f2:	f240 427c 	movw	r2, #1148	@ 0x47c
 80149f6:	498d      	ldr	r1, [pc, #564]	@ (8014c2c <tcp_receive+0x264>)
 80149f8:	488b      	ldr	r0, [pc, #556]	@ (8014c28 <tcp_receive+0x260>)
 80149fa:	f014 fc93 	bl	8029324 <iprintf>

  if (flags & TCP_ACK) {
 80149fe:	4b8c      	ldr	r3, [pc, #560]	@ (8014c30 <tcp_receive+0x268>)
 8014a00:	781b      	ldrb	r3, [r3, #0]
 8014a02:	f003 0310 	and.w	r3, r3, #16
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	f000 8264 	beq.w	8014ed4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014a12:	461a      	mov	r2, r3
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014a18:	4413      	add	r3, r2
 8014a1a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014a20:	4b84      	ldr	r3, [pc, #528]	@ (8014c34 <tcp_receive+0x26c>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	1ad3      	subs	r3, r2, r3
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	db1b      	blt.n	8014a62 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014a2e:	4b81      	ldr	r3, [pc, #516]	@ (8014c34 <tcp_receive+0x26c>)
 8014a30:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014a32:	429a      	cmp	r2, r3
 8014a34:	d106      	bne.n	8014a44 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014a3a:	4b7f      	ldr	r3, [pc, #508]	@ (8014c38 <tcp_receive+0x270>)
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	1ad3      	subs	r3, r2, r3
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	db0e      	blt.n	8014a62 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014a48:	4b7b      	ldr	r3, [pc, #492]	@ (8014c38 <tcp_receive+0x270>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014a4c:	429a      	cmp	r2, r3
 8014a4e:	d125      	bne.n	8014a9c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014a50:	4b7a      	ldr	r3, [pc, #488]	@ (8014c3c <tcp_receive+0x274>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	89db      	ldrh	r3, [r3, #14]
 8014a56:	b29a      	uxth	r2, r3
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	d91c      	bls.n	8014a9c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014a62:	4b76      	ldr	r3, [pc, #472]	@ (8014c3c <tcp_receive+0x274>)
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	89db      	ldrh	r3, [r3, #14]
 8014a68:	b29a      	uxth	r2, r3
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d205      	bcs.n	8014a8c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8014a8c:	4b69      	ldr	r3, [pc, #420]	@ (8014c34 <tcp_receive+0x26c>)
 8014a8e:	681a      	ldr	r2, [r3, #0]
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8014a94:	4b68      	ldr	r3, [pc, #416]	@ (8014c38 <tcp_receive+0x270>)
 8014a96:	681a      	ldr	r2, [r3, #0]
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014a9c:	4b66      	ldr	r3, [pc, #408]	@ (8014c38 <tcp_receive+0x270>)
 8014a9e:	681a      	ldr	r2, [r3, #0]
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014aa4:	1ad3      	subs	r3, r2, r3
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	dc58      	bgt.n	8014b5c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014aaa:	4b65      	ldr	r3, [pc, #404]	@ (8014c40 <tcp_receive+0x278>)
 8014aac:	881b      	ldrh	r3, [r3, #0]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d14b      	bne.n	8014b4a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014ab6:	687a      	ldr	r2, [r7, #4]
 8014ab8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8014abc:	4413      	add	r3, r2
 8014abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	d142      	bne.n	8014b4a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	db3d      	blt.n	8014b4a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014ad2:	4b59      	ldr	r3, [pc, #356]	@ (8014c38 <tcp_receive+0x270>)
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	d137      	bne.n	8014b4a <tcp_receive+0x182>
              found_dupack = 1;
 8014ada:	2301      	movs	r3, #1
 8014adc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014ae4:	2bff      	cmp	r3, #255	@ 0xff
 8014ae6:	d007      	beq.n	8014af8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014aee:	3301      	adds	r3, #1
 8014af0:	b2da      	uxtb	r2, r3
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014afe:	2b03      	cmp	r3, #3
 8014b00:	d91b      	bls.n	8014b3a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014b0c:	4413      	add	r3, r2
 8014b0e:	b29a      	uxth	r2, r3
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014b16:	429a      	cmp	r2, r3
 8014b18:	d30a      	bcc.n	8014b30 <tcp_receive+0x168>
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014b24:	4413      	add	r3, r2
 8014b26:	b29a      	uxth	r2, r3
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014b2e:	e004      	b.n	8014b3a <tcp_receive+0x172>
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b36:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014b40:	2b02      	cmp	r3, #2
 8014b42:	d902      	bls.n	8014b4a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014b44:	6878      	ldr	r0, [r7, #4]
 8014b46:	f002 fb3f 	bl	80171c8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	f040 8161 	bne.w	8014e14 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	2200      	movs	r2, #0
 8014b56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014b5a:	e15b      	b.n	8014e14 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014b5c:	4b36      	ldr	r3, [pc, #216]	@ (8014c38 <tcp_receive+0x270>)
 8014b5e:	681a      	ldr	r2, [r3, #0]
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014b64:	1ad3      	subs	r3, r2, r3
 8014b66:	3b01      	subs	r3, #1
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	f2c0 814e 	blt.w	8014e0a <tcp_receive+0x442>
 8014b6e:	4b32      	ldr	r3, [pc, #200]	@ (8014c38 <tcp_receive+0x270>)
 8014b70:	681a      	ldr	r2, [r3, #0]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014b76:	1ad3      	subs	r3, r2, r3
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	f300 8146 	bgt.w	8014e0a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	8b5b      	ldrh	r3, [r3, #26]
 8014b82:	f003 0304 	and.w	r3, r3, #4
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d010      	beq.n	8014bac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	8b5b      	ldrh	r3, [r3, #26]
 8014b8e:	f023 0304 	bic.w	r3, r3, #4
 8014b92:	b29a      	uxth	r2, r3
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	2200      	movs	r2, #0
 8014bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014bba:	10db      	asrs	r3, r3, #3
 8014bbc:	b21b      	sxth	r3, r3
 8014bbe:	b29a      	uxth	r2, r3
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014bc6:	b29b      	uxth	r3, r3
 8014bc8:	4413      	add	r3, r2
 8014bca:	b29b      	uxth	r3, r3
 8014bcc:	b21a      	sxth	r2, r3
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014bd4:	4b18      	ldr	r3, [pc, #96]	@ (8014c38 <tcp_receive+0x270>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	b29a      	uxth	r2, r3
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014bde:	b29b      	uxth	r3, r3
 8014be0:	1ad3      	subs	r3, r2, r3
 8014be2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2200      	movs	r2, #0
 8014be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8014bec:	4b12      	ldr	r3, [pc, #72]	@ (8014c38 <tcp_receive+0x270>)
 8014bee:	681a      	ldr	r2, [r3, #0]
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	7d1b      	ldrb	r3, [r3, #20]
 8014bf8:	2b03      	cmp	r3, #3
 8014bfa:	f240 8097 	bls.w	8014d2c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	d245      	bcs.n	8014c9a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	8b5b      	ldrh	r3, [r3, #26]
 8014c12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d014      	beq.n	8014c44 <tcp_receive+0x27c>
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	e013      	b.n	8014c46 <tcp_receive+0x27e>
 8014c1e:	bf00      	nop
 8014c20:	0802d7bc 	.word	0x0802d7bc
 8014c24:	0802daec 	.word	0x0802daec
 8014c28:	0802d808 	.word	0x0802d808
 8014c2c:	0802db08 	.word	0x0802db08
 8014c30:	200425f8 	.word	0x200425f8
 8014c34:	200425ec 	.word	0x200425ec
 8014c38:	200425f0 	.word	0x200425f0
 8014c3c:	200425dc 	.word	0x200425dc
 8014c40:	200425f6 	.word	0x200425f6
 8014c44:	2302      	movs	r3, #2
 8014c46:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014c4a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014c4e:	b29a      	uxth	r2, r3
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014c54:	fb12 f303 	smulbb	r3, r2, r3
 8014c58:	b29b      	uxth	r3, r3
 8014c5a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014c5c:	4293      	cmp	r3, r2
 8014c5e:	bf28      	it	cs
 8014c60:	4613      	movcs	r3, r2
 8014c62:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014c6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014c6c:	4413      	add	r3, r2
 8014c6e:	b29a      	uxth	r2, r3
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014c76:	429a      	cmp	r2, r3
 8014c78:	d309      	bcc.n	8014c8e <tcp_receive+0x2c6>
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014c80:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014c82:	4413      	add	r3, r2
 8014c84:	b29a      	uxth	r2, r3
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014c8c:	e04e      	b.n	8014d2c <tcp_receive+0x364>
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014c94:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014c98:	e048      	b.n	8014d2c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014ca0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014ca2:	4413      	add	r3, r2
 8014ca4:	b29a      	uxth	r2, r3
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d309      	bcc.n	8014cc4 <tcp_receive+0x2fc>
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014cb6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014cb8:	4413      	add	r3, r2
 8014cba:	b29a      	uxth	r2, r3
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014cc2:	e004      	b.n	8014cce <tcp_receive+0x306>
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014cca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014cda:	429a      	cmp	r2, r3
 8014cdc:	d326      	bcc.n	8014d2c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014cea:	1ad3      	subs	r3, r2, r3
 8014cec:	b29a      	uxth	r2, r3
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014cfe:	4413      	add	r3, r2
 8014d00:	b29a      	uxth	r2, r3
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d30a      	bcc.n	8014d22 <tcp_receive+0x35a>
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014d16:	4413      	add	r3, r2
 8014d18:	b29a      	uxth	r2, r3
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014d20:	e004      	b.n	8014d2c <tcp_receive+0x364>
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014d28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d34:	4a98      	ldr	r2, [pc, #608]	@ (8014f98 <tcp_receive+0x5d0>)
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f7ff fdca 	bl	80148d0 <tcp_free_acked_segments>
 8014d3c:	4602      	mov	r2, r0
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d4a:	4a94      	ldr	r2, [pc, #592]	@ (8014f9c <tcp_receive+0x5d4>)
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f7ff fdbf 	bl	80148d0 <tcp_free_acked_segments>
 8014d52:	4602      	mov	r2, r0
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d104      	bne.n	8014d6a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014d66:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014d68:	e002      	b.n	8014d70 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	2200      	movs	r2, #0
 8014d74:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d103      	bne.n	8014d86 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	2200      	movs	r2, #0
 8014d82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8014d8c:	4b84      	ldr	r3, [pc, #528]	@ (8014fa0 <tcp_receive+0x5d8>)
 8014d8e:	881b      	ldrh	r3, [r3, #0]
 8014d90:	4413      	add	r3, r2
 8014d92:	b29a      	uxth	r2, r3
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	8b5b      	ldrh	r3, [r3, #26]
 8014d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d035      	beq.n	8014e12 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d118      	bne.n	8014de0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d00c      	beq.n	8014dd0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014dbe:	68db      	ldr	r3, [r3, #12]
 8014dc0:	685b      	ldr	r3, [r3, #4]
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7fa fdfb 	bl	800f9be <lwip_htonl>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	dc20      	bgt.n	8014e12 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	8b5b      	ldrh	r3, [r3, #26]
 8014dd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014dd8:	b29a      	uxth	r2, r3
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014dde:	e018      	b.n	8014e12 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014de8:	68db      	ldr	r3, [r3, #12]
 8014dea:	685b      	ldr	r3, [r3, #4]
 8014dec:	4618      	mov	r0, r3
 8014dee:	f7fa fde6 	bl	800f9be <lwip_htonl>
 8014df2:	4603      	mov	r3, r0
 8014df4:	1ae3      	subs	r3, r4, r3
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	dc0b      	bgt.n	8014e12 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	8b5b      	ldrh	r3, [r3, #26]
 8014dfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014e02:	b29a      	uxth	r2, r3
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014e08:	e003      	b.n	8014e12 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f002 fbc8 	bl	80175a0 <tcp_send_empty_ack>
 8014e10:	e000      	b.n	8014e14 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014e12:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d05b      	beq.n	8014ed4 <tcp_receive+0x50c>
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014e20:	4b60      	ldr	r3, [pc, #384]	@ (8014fa4 <tcp_receive+0x5dc>)
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	1ad3      	subs	r3, r2, r3
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	da54      	bge.n	8014ed4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8014fa8 <tcp_receive+0x5e0>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	b29a      	uxth	r2, r3
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	1ad3      	subs	r3, r2, r3
 8014e38:	b29b      	uxth	r3, r3
 8014e3a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014e3e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014e48:	10db      	asrs	r3, r3, #3
 8014e4a:	b21b      	sxth	r3, r3
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	1ad3      	subs	r3, r2, r3
 8014e50:	b29b      	uxth	r3, r3
 8014e52:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014e5c:	b29a      	uxth	r2, r3
 8014e5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8014e62:	4413      	add	r3, r2
 8014e64:	b29b      	uxth	r3, r3
 8014e66:	b21a      	sxth	r2, r3
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8014e6c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	da05      	bge.n	8014e80 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014e74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8014e78:	425b      	negs	r3, r3
 8014e7a:	b29b      	uxth	r3, r3
 8014e7c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014e80:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014e8a:	109b      	asrs	r3, r3, #2
 8014e8c:	b21b      	sxth	r3, r3
 8014e8e:	b29b      	uxth	r3, r3
 8014e90:	1ad3      	subs	r3, r2, r3
 8014e92:	b29b      	uxth	r3, r3
 8014e94:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014e9e:	b29a      	uxth	r2, r3
 8014ea0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8014ea4:	4413      	add	r3, r2
 8014ea6:	b29b      	uxth	r3, r3
 8014ea8:	b21a      	sxth	r2, r3
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014eb4:	10db      	asrs	r3, r3, #3
 8014eb6:	b21b      	sxth	r3, r3
 8014eb8:	b29a      	uxth	r2, r3
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014ec0:	b29b      	uxth	r3, r3
 8014ec2:	4413      	add	r3, r2
 8014ec4:	b29b      	uxth	r3, r3
 8014ec6:	b21a      	sxth	r2, r3
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014ed4:	4b35      	ldr	r3, [pc, #212]	@ (8014fac <tcp_receive+0x5e4>)
 8014ed6:	881b      	ldrh	r3, [r3, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	f000 84df 	beq.w	801589c <tcp_receive+0xed4>
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	7d1b      	ldrb	r3, [r3, #20]
 8014ee2:	2b06      	cmp	r3, #6
 8014ee4:	f200 84da 	bhi.w	801589c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014eec:	4b30      	ldr	r3, [pc, #192]	@ (8014fb0 <tcp_receive+0x5e8>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	1ad3      	subs	r3, r2, r3
 8014ef2:	3b01      	subs	r3, #1
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	f2c0 808f 	blt.w	8015018 <tcp_receive+0x650>
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014efe:	4b2b      	ldr	r3, [pc, #172]	@ (8014fac <tcp_receive+0x5e4>)
 8014f00:	881b      	ldrh	r3, [r3, #0]
 8014f02:	4619      	mov	r1, r3
 8014f04:	4b2a      	ldr	r3, [pc, #168]	@ (8014fb0 <tcp_receive+0x5e8>)
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	440b      	add	r3, r1
 8014f0a:	1ad3      	subs	r3, r2, r3
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	f300 8082 	bgt.w	8015018 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014f14:	4b27      	ldr	r3, [pc, #156]	@ (8014fb4 <tcp_receive+0x5ec>)
 8014f16:	685b      	ldr	r3, [r3, #4]
 8014f18:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014f1e:	4b24      	ldr	r3, [pc, #144]	@ (8014fb0 <tcp_receive+0x5e8>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	1ad3      	subs	r3, r2, r3
 8014f24:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014f26:	4b23      	ldr	r3, [pc, #140]	@ (8014fb4 <tcp_receive+0x5ec>)
 8014f28:	685b      	ldr	r3, [r3, #4]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d106      	bne.n	8014f3c <tcp_receive+0x574>
 8014f2e:	4b22      	ldr	r3, [pc, #136]	@ (8014fb8 <tcp_receive+0x5f0>)
 8014f30:	f240 5294 	movw	r2, #1428	@ 0x594
 8014f34:	4921      	ldr	r1, [pc, #132]	@ (8014fbc <tcp_receive+0x5f4>)
 8014f36:	4822      	ldr	r0, [pc, #136]	@ (8014fc0 <tcp_receive+0x5f8>)
 8014f38:	f014 f9f4 	bl	8029324 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f3e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8014f42:	4293      	cmp	r3, r2
 8014f44:	d906      	bls.n	8014f54 <tcp_receive+0x58c>
 8014f46:	4b1c      	ldr	r3, [pc, #112]	@ (8014fb8 <tcp_receive+0x5f0>)
 8014f48:	f240 5295 	movw	r2, #1429	@ 0x595
 8014f4c:	491d      	ldr	r1, [pc, #116]	@ (8014fc4 <tcp_receive+0x5fc>)
 8014f4e:	481c      	ldr	r0, [pc, #112]	@ (8014fc0 <tcp_receive+0x5f8>)
 8014f50:	f014 f9e8 	bl	8029324 <iprintf>
      off = (u16_t)off32;
 8014f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f56:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014f5a:	4b16      	ldr	r3, [pc, #88]	@ (8014fb4 <tcp_receive+0x5ec>)
 8014f5c:	685b      	ldr	r3, [r3, #4]
 8014f5e:	891b      	ldrh	r3, [r3, #8]
 8014f60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014f64:	429a      	cmp	r2, r3
 8014f66:	d906      	bls.n	8014f76 <tcp_receive+0x5ae>
 8014f68:	4b13      	ldr	r3, [pc, #76]	@ (8014fb8 <tcp_receive+0x5f0>)
 8014f6a:	f240 5297 	movw	r2, #1431	@ 0x597
 8014f6e:	4916      	ldr	r1, [pc, #88]	@ (8014fc8 <tcp_receive+0x600>)
 8014f70:	4813      	ldr	r0, [pc, #76]	@ (8014fc0 <tcp_receive+0x5f8>)
 8014f72:	f014 f9d7 	bl	8029324 <iprintf>
      inseg.len -= off;
 8014f76:	4b0f      	ldr	r3, [pc, #60]	@ (8014fb4 <tcp_receive+0x5ec>)
 8014f78:	891a      	ldrh	r2, [r3, #8]
 8014f7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014f7e:	1ad3      	subs	r3, r2, r3
 8014f80:	b29a      	uxth	r2, r3
 8014f82:	4b0c      	ldr	r3, [pc, #48]	@ (8014fb4 <tcp_receive+0x5ec>)
 8014f84:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014f86:	4b0b      	ldr	r3, [pc, #44]	@ (8014fb4 <tcp_receive+0x5ec>)
 8014f88:	685b      	ldr	r3, [r3, #4]
 8014f8a:	891a      	ldrh	r2, [r3, #8]
 8014f8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014f90:	1ad3      	subs	r3, r2, r3
 8014f92:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8014f94:	e02a      	b.n	8014fec <tcp_receive+0x624>
 8014f96:	bf00      	nop
 8014f98:	0802db24 	.word	0x0802db24
 8014f9c:	0802db2c 	.word	0x0802db2c
 8014fa0:	200425f4 	.word	0x200425f4
 8014fa4:	200425f0 	.word	0x200425f0
 8014fa8:	200425b4 	.word	0x200425b4
 8014fac:	200425f6 	.word	0x200425f6
 8014fb0:	200425ec 	.word	0x200425ec
 8014fb4:	200425cc 	.word	0x200425cc
 8014fb8:	0802d7bc 	.word	0x0802d7bc
 8014fbc:	0802db34 	.word	0x0802db34
 8014fc0:	0802d808 	.word	0x0802d808
 8014fc4:	0802db44 	.word	0x0802db44
 8014fc8:	0802db54 	.word	0x0802db54
        off -= p->len;
 8014fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014fce:	895b      	ldrh	r3, [r3, #10]
 8014fd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014fd4:	1ad3      	subs	r3, r2, r3
 8014fd6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014fdc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014fde:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8014fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014fee:	895b      	ldrh	r3, [r3, #10]
 8014ff0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d8e9      	bhi.n	8014fcc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014ff8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015000:	f7fc f90a 	bl	8011218 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015008:	4a90      	ldr	r2, [pc, #576]	@ (801524c <tcp_receive+0x884>)
 801500a:	6013      	str	r3, [r2, #0]
 801500c:	4b90      	ldr	r3, [pc, #576]	@ (8015250 <tcp_receive+0x888>)
 801500e:	68db      	ldr	r3, [r3, #12]
 8015010:	4a8e      	ldr	r2, [pc, #568]	@ (801524c <tcp_receive+0x884>)
 8015012:	6812      	ldr	r2, [r2, #0]
 8015014:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015016:	e00d      	b.n	8015034 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015018:	4b8c      	ldr	r3, [pc, #560]	@ (801524c <tcp_receive+0x884>)
 801501a:	681a      	ldr	r2, [r3, #0]
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015020:	1ad3      	subs	r3, r2, r3
 8015022:	2b00      	cmp	r3, #0
 8015024:	da06      	bge.n	8015034 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	8b5b      	ldrh	r3, [r3, #26]
 801502a:	f043 0302 	orr.w	r3, r3, #2
 801502e:	b29a      	uxth	r2, r3
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015034:	4b85      	ldr	r3, [pc, #532]	@ (801524c <tcp_receive+0x884>)
 8015036:	681a      	ldr	r2, [r3, #0]
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801503c:	1ad3      	subs	r3, r2, r3
 801503e:	2b00      	cmp	r3, #0
 8015040:	f2c0 8427 	blt.w	8015892 <tcp_receive+0xeca>
 8015044:	4b81      	ldr	r3, [pc, #516]	@ (801524c <tcp_receive+0x884>)
 8015046:	681a      	ldr	r2, [r3, #0]
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801504c:	6879      	ldr	r1, [r7, #4]
 801504e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015050:	440b      	add	r3, r1
 8015052:	1ad3      	subs	r3, r2, r3
 8015054:	3301      	adds	r3, #1
 8015056:	2b00      	cmp	r3, #0
 8015058:	f300 841b 	bgt.w	8015892 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015060:	4b7a      	ldr	r3, [pc, #488]	@ (801524c <tcp_receive+0x884>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	429a      	cmp	r2, r3
 8015066:	f040 8298 	bne.w	801559a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801506a:	4b79      	ldr	r3, [pc, #484]	@ (8015250 <tcp_receive+0x888>)
 801506c:	891c      	ldrh	r4, [r3, #8]
 801506e:	4b78      	ldr	r3, [pc, #480]	@ (8015250 <tcp_receive+0x888>)
 8015070:	68db      	ldr	r3, [r3, #12]
 8015072:	899b      	ldrh	r3, [r3, #12]
 8015074:	b29b      	uxth	r3, r3
 8015076:	4618      	mov	r0, r3
 8015078:	f7fa fc8c 	bl	800f994 <lwip_htons>
 801507c:	4603      	mov	r3, r0
 801507e:	b2db      	uxtb	r3, r3
 8015080:	f003 0303 	and.w	r3, r3, #3
 8015084:	2b00      	cmp	r3, #0
 8015086:	d001      	beq.n	801508c <tcp_receive+0x6c4>
 8015088:	2301      	movs	r3, #1
 801508a:	e000      	b.n	801508e <tcp_receive+0x6c6>
 801508c:	2300      	movs	r3, #0
 801508e:	4423      	add	r3, r4
 8015090:	b29a      	uxth	r2, r3
 8015092:	4b70      	ldr	r3, [pc, #448]	@ (8015254 <tcp_receive+0x88c>)
 8015094:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801509a:	4b6e      	ldr	r3, [pc, #440]	@ (8015254 <tcp_receive+0x88c>)
 801509c:	881b      	ldrh	r3, [r3, #0]
 801509e:	429a      	cmp	r2, r3
 80150a0:	d274      	bcs.n	801518c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80150a2:	4b6b      	ldr	r3, [pc, #428]	@ (8015250 <tcp_receive+0x888>)
 80150a4:	68db      	ldr	r3, [r3, #12]
 80150a6:	899b      	ldrh	r3, [r3, #12]
 80150a8:	b29b      	uxth	r3, r3
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7fa fc72 	bl	800f994 <lwip_htons>
 80150b0:	4603      	mov	r3, r0
 80150b2:	b2db      	uxtb	r3, r3
 80150b4:	f003 0301 	and.w	r3, r3, #1
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d01e      	beq.n	80150fa <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80150bc:	4b64      	ldr	r3, [pc, #400]	@ (8015250 <tcp_receive+0x888>)
 80150be:	68db      	ldr	r3, [r3, #12]
 80150c0:	899b      	ldrh	r3, [r3, #12]
 80150c2:	b29b      	uxth	r3, r3
 80150c4:	b21b      	sxth	r3, r3
 80150c6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80150ca:	b21c      	sxth	r4, r3
 80150cc:	4b60      	ldr	r3, [pc, #384]	@ (8015250 <tcp_receive+0x888>)
 80150ce:	68db      	ldr	r3, [r3, #12]
 80150d0:	899b      	ldrh	r3, [r3, #12]
 80150d2:	b29b      	uxth	r3, r3
 80150d4:	4618      	mov	r0, r3
 80150d6:	f7fa fc5d 	bl	800f994 <lwip_htons>
 80150da:	4603      	mov	r3, r0
 80150dc:	b2db      	uxtb	r3, r3
 80150de:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80150e2:	b29b      	uxth	r3, r3
 80150e4:	4618      	mov	r0, r3
 80150e6:	f7fa fc55 	bl	800f994 <lwip_htons>
 80150ea:	4603      	mov	r3, r0
 80150ec:	b21b      	sxth	r3, r3
 80150ee:	4323      	orrs	r3, r4
 80150f0:	b21a      	sxth	r2, r3
 80150f2:	4b57      	ldr	r3, [pc, #348]	@ (8015250 <tcp_receive+0x888>)
 80150f4:	68db      	ldr	r3, [r3, #12]
 80150f6:	b292      	uxth	r2, r2
 80150f8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80150fe:	4b54      	ldr	r3, [pc, #336]	@ (8015250 <tcp_receive+0x888>)
 8015100:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015102:	4b53      	ldr	r3, [pc, #332]	@ (8015250 <tcp_receive+0x888>)
 8015104:	68db      	ldr	r3, [r3, #12]
 8015106:	899b      	ldrh	r3, [r3, #12]
 8015108:	b29b      	uxth	r3, r3
 801510a:	4618      	mov	r0, r3
 801510c:	f7fa fc42 	bl	800f994 <lwip_htons>
 8015110:	4603      	mov	r3, r0
 8015112:	b2db      	uxtb	r3, r3
 8015114:	f003 0302 	and.w	r3, r3, #2
 8015118:	2b00      	cmp	r3, #0
 801511a:	d005      	beq.n	8015128 <tcp_receive+0x760>
            inseg.len -= 1;
 801511c:	4b4c      	ldr	r3, [pc, #304]	@ (8015250 <tcp_receive+0x888>)
 801511e:	891b      	ldrh	r3, [r3, #8]
 8015120:	3b01      	subs	r3, #1
 8015122:	b29a      	uxth	r2, r3
 8015124:	4b4a      	ldr	r3, [pc, #296]	@ (8015250 <tcp_receive+0x888>)
 8015126:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015128:	4b49      	ldr	r3, [pc, #292]	@ (8015250 <tcp_receive+0x888>)
 801512a:	685b      	ldr	r3, [r3, #4]
 801512c:	4a48      	ldr	r2, [pc, #288]	@ (8015250 <tcp_receive+0x888>)
 801512e:	8912      	ldrh	r2, [r2, #8]
 8015130:	4611      	mov	r1, r2
 8015132:	4618      	mov	r0, r3
 8015134:	f7fb ff70 	bl	8011018 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015138:	4b45      	ldr	r3, [pc, #276]	@ (8015250 <tcp_receive+0x888>)
 801513a:	891c      	ldrh	r4, [r3, #8]
 801513c:	4b44      	ldr	r3, [pc, #272]	@ (8015250 <tcp_receive+0x888>)
 801513e:	68db      	ldr	r3, [r3, #12]
 8015140:	899b      	ldrh	r3, [r3, #12]
 8015142:	b29b      	uxth	r3, r3
 8015144:	4618      	mov	r0, r3
 8015146:	f7fa fc25 	bl	800f994 <lwip_htons>
 801514a:	4603      	mov	r3, r0
 801514c:	b2db      	uxtb	r3, r3
 801514e:	f003 0303 	and.w	r3, r3, #3
 8015152:	2b00      	cmp	r3, #0
 8015154:	d001      	beq.n	801515a <tcp_receive+0x792>
 8015156:	2301      	movs	r3, #1
 8015158:	e000      	b.n	801515c <tcp_receive+0x794>
 801515a:	2300      	movs	r3, #0
 801515c:	4423      	add	r3, r4
 801515e:	b29a      	uxth	r2, r3
 8015160:	4b3c      	ldr	r3, [pc, #240]	@ (8015254 <tcp_receive+0x88c>)
 8015162:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015164:	4b3b      	ldr	r3, [pc, #236]	@ (8015254 <tcp_receive+0x88c>)
 8015166:	881b      	ldrh	r3, [r3, #0]
 8015168:	461a      	mov	r2, r3
 801516a:	4b38      	ldr	r3, [pc, #224]	@ (801524c <tcp_receive+0x884>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	441a      	add	r2, r3
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015174:	6879      	ldr	r1, [r7, #4]
 8015176:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015178:	440b      	add	r3, r1
 801517a:	429a      	cmp	r2, r3
 801517c:	d006      	beq.n	801518c <tcp_receive+0x7c4>
 801517e:	4b36      	ldr	r3, [pc, #216]	@ (8015258 <tcp_receive+0x890>)
 8015180:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8015184:	4935      	ldr	r1, [pc, #212]	@ (801525c <tcp_receive+0x894>)
 8015186:	4836      	ldr	r0, [pc, #216]	@ (8015260 <tcp_receive+0x898>)
 8015188:	f014 f8cc 	bl	8029324 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015190:	2b00      	cmp	r3, #0
 8015192:	f000 80e6 	beq.w	8015362 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015196:	4b2e      	ldr	r3, [pc, #184]	@ (8015250 <tcp_receive+0x888>)
 8015198:	68db      	ldr	r3, [r3, #12]
 801519a:	899b      	ldrh	r3, [r3, #12]
 801519c:	b29b      	uxth	r3, r3
 801519e:	4618      	mov	r0, r3
 80151a0:	f7fa fbf8 	bl	800f994 <lwip_htons>
 80151a4:	4603      	mov	r3, r0
 80151a6:	b2db      	uxtb	r3, r3
 80151a8:	f003 0301 	and.w	r3, r3, #1
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d010      	beq.n	80151d2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80151b0:	e00a      	b.n	80151c8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80151b6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80151c2:	68f8      	ldr	r0, [r7, #12]
 80151c4:	f7fd fcc5 	bl	8012b52 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d1f0      	bne.n	80151b2 <tcp_receive+0x7ea>
 80151d0:	e0c7      	b.n	8015362 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80151d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80151d8:	e051      	b.n	801527e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80151da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80151dc:	68db      	ldr	r3, [r3, #12]
 80151de:	899b      	ldrh	r3, [r3, #12]
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7fa fbd6 	bl	800f994 <lwip_htons>
 80151e8:	4603      	mov	r3, r0
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	f003 0301 	and.w	r3, r3, #1
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d03c      	beq.n	801526e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80151f4:	4b16      	ldr	r3, [pc, #88]	@ (8015250 <tcp_receive+0x888>)
 80151f6:	68db      	ldr	r3, [r3, #12]
 80151f8:	899b      	ldrh	r3, [r3, #12]
 80151fa:	b29b      	uxth	r3, r3
 80151fc:	4618      	mov	r0, r3
 80151fe:	f7fa fbc9 	bl	800f994 <lwip_htons>
 8015202:	4603      	mov	r3, r0
 8015204:	b2db      	uxtb	r3, r3
 8015206:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801520a:	2b00      	cmp	r3, #0
 801520c:	d12f      	bne.n	801526e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801520e:	4b10      	ldr	r3, [pc, #64]	@ (8015250 <tcp_receive+0x888>)
 8015210:	68db      	ldr	r3, [r3, #12]
 8015212:	899b      	ldrh	r3, [r3, #12]
 8015214:	b29c      	uxth	r4, r3
 8015216:	2001      	movs	r0, #1
 8015218:	f7fa fbbc 	bl	800f994 <lwip_htons>
 801521c:	4603      	mov	r3, r0
 801521e:	461a      	mov	r2, r3
 8015220:	4b0b      	ldr	r3, [pc, #44]	@ (8015250 <tcp_receive+0x888>)
 8015222:	68db      	ldr	r3, [r3, #12]
 8015224:	4322      	orrs	r2, r4
 8015226:	b292      	uxth	r2, r2
 8015228:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801522a:	4b09      	ldr	r3, [pc, #36]	@ (8015250 <tcp_receive+0x888>)
 801522c:	891c      	ldrh	r4, [r3, #8]
 801522e:	4b08      	ldr	r3, [pc, #32]	@ (8015250 <tcp_receive+0x888>)
 8015230:	68db      	ldr	r3, [r3, #12]
 8015232:	899b      	ldrh	r3, [r3, #12]
 8015234:	b29b      	uxth	r3, r3
 8015236:	4618      	mov	r0, r3
 8015238:	f7fa fbac 	bl	800f994 <lwip_htons>
 801523c:	4603      	mov	r3, r0
 801523e:	b2db      	uxtb	r3, r3
 8015240:	f003 0303 	and.w	r3, r3, #3
 8015244:	2b00      	cmp	r3, #0
 8015246:	d00d      	beq.n	8015264 <tcp_receive+0x89c>
 8015248:	2301      	movs	r3, #1
 801524a:	e00c      	b.n	8015266 <tcp_receive+0x89e>
 801524c:	200425ec 	.word	0x200425ec
 8015250:	200425cc 	.word	0x200425cc
 8015254:	200425f6 	.word	0x200425f6
 8015258:	0802d7bc 	.word	0x0802d7bc
 801525c:	0802db64 	.word	0x0802db64
 8015260:	0802d808 	.word	0x0802d808
 8015264:	2300      	movs	r3, #0
 8015266:	4423      	add	r3, r4
 8015268:	b29a      	uxth	r2, r3
 801526a:	4b98      	ldr	r3, [pc, #608]	@ (80154cc <tcp_receive+0xb04>)
 801526c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801526e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015270:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8015278:	6938      	ldr	r0, [r7, #16]
 801527a:	f7fd fc6a 	bl	8012b52 <tcp_seg_free>
            while (next &&
 801527e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015280:	2b00      	cmp	r3, #0
 8015282:	d00e      	beq.n	80152a2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015284:	4b91      	ldr	r3, [pc, #580]	@ (80154cc <tcp_receive+0xb04>)
 8015286:	881b      	ldrh	r3, [r3, #0]
 8015288:	461a      	mov	r2, r3
 801528a:	4b91      	ldr	r3, [pc, #580]	@ (80154d0 <tcp_receive+0xb08>)
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	441a      	add	r2, r3
 8015290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015292:	68db      	ldr	r3, [r3, #12]
 8015294:	685b      	ldr	r3, [r3, #4]
 8015296:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015298:	8909      	ldrh	r1, [r1, #8]
 801529a:	440b      	add	r3, r1
 801529c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801529e:	2b00      	cmp	r3, #0
 80152a0:	da9b      	bge.n	80151da <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80152a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d059      	beq.n	801535c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80152a8:	4b88      	ldr	r3, [pc, #544]	@ (80154cc <tcp_receive+0xb04>)
 80152aa:	881b      	ldrh	r3, [r3, #0]
 80152ac:	461a      	mov	r2, r3
 80152ae:	4b88      	ldr	r3, [pc, #544]	@ (80154d0 <tcp_receive+0xb08>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	441a      	add	r2, r3
 80152b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80152b6:	68db      	ldr	r3, [r3, #12]
 80152b8:	685b      	ldr	r3, [r3, #4]
 80152ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 80152bc:	2b00      	cmp	r3, #0
 80152be:	dd4d      	ble.n	801535c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80152c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80152c2:	68db      	ldr	r3, [r3, #12]
 80152c4:	685b      	ldr	r3, [r3, #4]
 80152c6:	b29a      	uxth	r2, r3
 80152c8:	4b81      	ldr	r3, [pc, #516]	@ (80154d0 <tcp_receive+0xb08>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	b29b      	uxth	r3, r3
 80152ce:	1ad3      	subs	r3, r2, r3
 80152d0:	b29a      	uxth	r2, r3
 80152d2:	4b80      	ldr	r3, [pc, #512]	@ (80154d4 <tcp_receive+0xb0c>)
 80152d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80152d6:	4b7f      	ldr	r3, [pc, #508]	@ (80154d4 <tcp_receive+0xb0c>)
 80152d8:	68db      	ldr	r3, [r3, #12]
 80152da:	899b      	ldrh	r3, [r3, #12]
 80152dc:	b29b      	uxth	r3, r3
 80152de:	4618      	mov	r0, r3
 80152e0:	f7fa fb58 	bl	800f994 <lwip_htons>
 80152e4:	4603      	mov	r3, r0
 80152e6:	b2db      	uxtb	r3, r3
 80152e8:	f003 0302 	and.w	r3, r3, #2
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d005      	beq.n	80152fc <tcp_receive+0x934>
                inseg.len -= 1;
 80152f0:	4b78      	ldr	r3, [pc, #480]	@ (80154d4 <tcp_receive+0xb0c>)
 80152f2:	891b      	ldrh	r3, [r3, #8]
 80152f4:	3b01      	subs	r3, #1
 80152f6:	b29a      	uxth	r2, r3
 80152f8:	4b76      	ldr	r3, [pc, #472]	@ (80154d4 <tcp_receive+0xb0c>)
 80152fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80152fc:	4b75      	ldr	r3, [pc, #468]	@ (80154d4 <tcp_receive+0xb0c>)
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	4a74      	ldr	r2, [pc, #464]	@ (80154d4 <tcp_receive+0xb0c>)
 8015302:	8912      	ldrh	r2, [r2, #8]
 8015304:	4611      	mov	r1, r2
 8015306:	4618      	mov	r0, r3
 8015308:	f7fb fe86 	bl	8011018 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801530c:	4b71      	ldr	r3, [pc, #452]	@ (80154d4 <tcp_receive+0xb0c>)
 801530e:	891c      	ldrh	r4, [r3, #8]
 8015310:	4b70      	ldr	r3, [pc, #448]	@ (80154d4 <tcp_receive+0xb0c>)
 8015312:	68db      	ldr	r3, [r3, #12]
 8015314:	899b      	ldrh	r3, [r3, #12]
 8015316:	b29b      	uxth	r3, r3
 8015318:	4618      	mov	r0, r3
 801531a:	f7fa fb3b 	bl	800f994 <lwip_htons>
 801531e:	4603      	mov	r3, r0
 8015320:	b2db      	uxtb	r3, r3
 8015322:	f003 0303 	and.w	r3, r3, #3
 8015326:	2b00      	cmp	r3, #0
 8015328:	d001      	beq.n	801532e <tcp_receive+0x966>
 801532a:	2301      	movs	r3, #1
 801532c:	e000      	b.n	8015330 <tcp_receive+0x968>
 801532e:	2300      	movs	r3, #0
 8015330:	4423      	add	r3, r4
 8015332:	b29a      	uxth	r2, r3
 8015334:	4b65      	ldr	r3, [pc, #404]	@ (80154cc <tcp_receive+0xb04>)
 8015336:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015338:	4b64      	ldr	r3, [pc, #400]	@ (80154cc <tcp_receive+0xb04>)
 801533a:	881b      	ldrh	r3, [r3, #0]
 801533c:	461a      	mov	r2, r3
 801533e:	4b64      	ldr	r3, [pc, #400]	@ (80154d0 <tcp_receive+0xb08>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	441a      	add	r2, r3
 8015344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015346:	68db      	ldr	r3, [r3, #12]
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	429a      	cmp	r2, r3
 801534c:	d006      	beq.n	801535c <tcp_receive+0x994>
 801534e:	4b62      	ldr	r3, [pc, #392]	@ (80154d8 <tcp_receive+0xb10>)
 8015350:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8015354:	4961      	ldr	r1, [pc, #388]	@ (80154dc <tcp_receive+0xb14>)
 8015356:	4862      	ldr	r0, [pc, #392]	@ (80154e0 <tcp_receive+0xb18>)
 8015358:	f013 ffe4 	bl	8029324 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015360:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015362:	4b5a      	ldr	r3, [pc, #360]	@ (80154cc <tcp_receive+0xb04>)
 8015364:	881b      	ldrh	r3, [r3, #0]
 8015366:	461a      	mov	r2, r3
 8015368:	4b59      	ldr	r3, [pc, #356]	@ (80154d0 <tcp_receive+0xb08>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	441a      	add	r2, r3
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015376:	4b55      	ldr	r3, [pc, #340]	@ (80154cc <tcp_receive+0xb04>)
 8015378:	881b      	ldrh	r3, [r3, #0]
 801537a:	429a      	cmp	r2, r3
 801537c:	d206      	bcs.n	801538c <tcp_receive+0x9c4>
 801537e:	4b56      	ldr	r3, [pc, #344]	@ (80154d8 <tcp_receive+0xb10>)
 8015380:	f240 6207 	movw	r2, #1543	@ 0x607
 8015384:	4957      	ldr	r1, [pc, #348]	@ (80154e4 <tcp_receive+0xb1c>)
 8015386:	4856      	ldr	r0, [pc, #344]	@ (80154e0 <tcp_receive+0xb18>)
 8015388:	f013 ffcc 	bl	8029324 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015390:	4b4e      	ldr	r3, [pc, #312]	@ (80154cc <tcp_receive+0xb04>)
 8015392:	881b      	ldrh	r3, [r3, #0]
 8015394:	1ad3      	subs	r3, r2, r3
 8015396:	b29a      	uxth	r2, r3
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f7fc feb1 	bl	8012104 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80153a2:	4b4c      	ldr	r3, [pc, #304]	@ (80154d4 <tcp_receive+0xb0c>)
 80153a4:	685b      	ldr	r3, [r3, #4]
 80153a6:	891b      	ldrh	r3, [r3, #8]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d006      	beq.n	80153ba <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80153ac:	4b49      	ldr	r3, [pc, #292]	@ (80154d4 <tcp_receive+0xb0c>)
 80153ae:	685b      	ldr	r3, [r3, #4]
 80153b0:	4a4d      	ldr	r2, [pc, #308]	@ (80154e8 <tcp_receive+0xb20>)
 80153b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80153b4:	4b47      	ldr	r3, [pc, #284]	@ (80154d4 <tcp_receive+0xb0c>)
 80153b6:	2200      	movs	r2, #0
 80153b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80153ba:	4b46      	ldr	r3, [pc, #280]	@ (80154d4 <tcp_receive+0xb0c>)
 80153bc:	68db      	ldr	r3, [r3, #12]
 80153be:	899b      	ldrh	r3, [r3, #12]
 80153c0:	b29b      	uxth	r3, r3
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7fa fae6 	bl	800f994 <lwip_htons>
 80153c8:	4603      	mov	r3, r0
 80153ca:	b2db      	uxtb	r3, r3
 80153cc:	f003 0301 	and.w	r3, r3, #1
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	f000 80b8 	beq.w	8015546 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80153d6:	4b45      	ldr	r3, [pc, #276]	@ (80154ec <tcp_receive+0xb24>)
 80153d8:	781b      	ldrb	r3, [r3, #0]
 80153da:	f043 0320 	orr.w	r3, r3, #32
 80153de:	b2da      	uxtb	r2, r3
 80153e0:	4b42      	ldr	r3, [pc, #264]	@ (80154ec <tcp_receive+0xb24>)
 80153e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80153e4:	e0af      	b.n	8015546 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153f0:	68db      	ldr	r3, [r3, #12]
 80153f2:	685b      	ldr	r3, [r3, #4]
 80153f4:	4a36      	ldr	r2, [pc, #216]	@ (80154d0 <tcp_receive+0xb08>)
 80153f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	891b      	ldrh	r3, [r3, #8]
 80153fc:	461c      	mov	r4, r3
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	68db      	ldr	r3, [r3, #12]
 8015402:	899b      	ldrh	r3, [r3, #12]
 8015404:	b29b      	uxth	r3, r3
 8015406:	4618      	mov	r0, r3
 8015408:	f7fa fac4 	bl	800f994 <lwip_htons>
 801540c:	4603      	mov	r3, r0
 801540e:	b2db      	uxtb	r3, r3
 8015410:	f003 0303 	and.w	r3, r3, #3
 8015414:	2b00      	cmp	r3, #0
 8015416:	d001      	beq.n	801541c <tcp_receive+0xa54>
 8015418:	2301      	movs	r3, #1
 801541a:	e000      	b.n	801541e <tcp_receive+0xa56>
 801541c:	2300      	movs	r3, #0
 801541e:	191a      	adds	r2, r3, r4
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015424:	441a      	add	r2, r3
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801542e:	461c      	mov	r4, r3
 8015430:	68bb      	ldr	r3, [r7, #8]
 8015432:	891b      	ldrh	r3, [r3, #8]
 8015434:	461d      	mov	r5, r3
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	68db      	ldr	r3, [r3, #12]
 801543a:	899b      	ldrh	r3, [r3, #12]
 801543c:	b29b      	uxth	r3, r3
 801543e:	4618      	mov	r0, r3
 8015440:	f7fa faa8 	bl	800f994 <lwip_htons>
 8015444:	4603      	mov	r3, r0
 8015446:	b2db      	uxtb	r3, r3
 8015448:	f003 0303 	and.w	r3, r3, #3
 801544c:	2b00      	cmp	r3, #0
 801544e:	d001      	beq.n	8015454 <tcp_receive+0xa8c>
 8015450:	2301      	movs	r3, #1
 8015452:	e000      	b.n	8015456 <tcp_receive+0xa8e>
 8015454:	2300      	movs	r3, #0
 8015456:	442b      	add	r3, r5
 8015458:	429c      	cmp	r4, r3
 801545a:	d206      	bcs.n	801546a <tcp_receive+0xaa2>
 801545c:	4b1e      	ldr	r3, [pc, #120]	@ (80154d8 <tcp_receive+0xb10>)
 801545e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8015462:	4923      	ldr	r1, [pc, #140]	@ (80154f0 <tcp_receive+0xb28>)
 8015464:	481e      	ldr	r0, [pc, #120]	@ (80154e0 <tcp_receive+0xb18>)
 8015466:	f013 ff5d 	bl	8029324 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801546a:	68bb      	ldr	r3, [r7, #8]
 801546c:	891b      	ldrh	r3, [r3, #8]
 801546e:	461c      	mov	r4, r3
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	68db      	ldr	r3, [r3, #12]
 8015474:	899b      	ldrh	r3, [r3, #12]
 8015476:	b29b      	uxth	r3, r3
 8015478:	4618      	mov	r0, r3
 801547a:	f7fa fa8b 	bl	800f994 <lwip_htons>
 801547e:	4603      	mov	r3, r0
 8015480:	b2db      	uxtb	r3, r3
 8015482:	f003 0303 	and.w	r3, r3, #3
 8015486:	2b00      	cmp	r3, #0
 8015488:	d001      	beq.n	801548e <tcp_receive+0xac6>
 801548a:	2301      	movs	r3, #1
 801548c:	e000      	b.n	8015490 <tcp_receive+0xac8>
 801548e:	2300      	movs	r3, #0
 8015490:	1919      	adds	r1, r3, r4
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015496:	b28b      	uxth	r3, r1
 8015498:	1ad3      	subs	r3, r2, r3
 801549a:	b29a      	uxth	r2, r3
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f7fc fe2f 	bl	8012104 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80154a6:	68bb      	ldr	r3, [r7, #8]
 80154a8:	685b      	ldr	r3, [r3, #4]
 80154aa:	891b      	ldrh	r3, [r3, #8]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d028      	beq.n	8015502 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80154b0:	4b0d      	ldr	r3, [pc, #52]	@ (80154e8 <tcp_receive+0xb20>)
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d01d      	beq.n	80154f4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80154b8:	4b0b      	ldr	r3, [pc, #44]	@ (80154e8 <tcp_receive+0xb20>)
 80154ba:	681a      	ldr	r2, [r3, #0]
 80154bc:	68bb      	ldr	r3, [r7, #8]
 80154be:	685b      	ldr	r3, [r3, #4]
 80154c0:	4619      	mov	r1, r3
 80154c2:	4610      	mov	r0, r2
 80154c4:	f7fc f82e 	bl	8011524 <pbuf_cat>
 80154c8:	e018      	b.n	80154fc <tcp_receive+0xb34>
 80154ca:	bf00      	nop
 80154cc:	200425f6 	.word	0x200425f6
 80154d0:	200425ec 	.word	0x200425ec
 80154d4:	200425cc 	.word	0x200425cc
 80154d8:	0802d7bc 	.word	0x0802d7bc
 80154dc:	0802db9c 	.word	0x0802db9c
 80154e0:	0802d808 	.word	0x0802d808
 80154e4:	0802dbd8 	.word	0x0802dbd8
 80154e8:	200425fc 	.word	0x200425fc
 80154ec:	200425f9 	.word	0x200425f9
 80154f0:	0802dbf8 	.word	0x0802dbf8
            } else {
              recv_data = cseg->p;
 80154f4:	68bb      	ldr	r3, [r7, #8]
 80154f6:	685b      	ldr	r3, [r3, #4]
 80154f8:	4a70      	ldr	r2, [pc, #448]	@ (80156bc <tcp_receive+0xcf4>)
 80154fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	2200      	movs	r2, #0
 8015500:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	68db      	ldr	r3, [r3, #12]
 8015506:	899b      	ldrh	r3, [r3, #12]
 8015508:	b29b      	uxth	r3, r3
 801550a:	4618      	mov	r0, r3
 801550c:	f7fa fa42 	bl	800f994 <lwip_htons>
 8015510:	4603      	mov	r3, r0
 8015512:	b2db      	uxtb	r3, r3
 8015514:	f003 0301 	and.w	r3, r3, #1
 8015518:	2b00      	cmp	r3, #0
 801551a:	d00d      	beq.n	8015538 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801551c:	4b68      	ldr	r3, [pc, #416]	@ (80156c0 <tcp_receive+0xcf8>)
 801551e:	781b      	ldrb	r3, [r3, #0]
 8015520:	f043 0320 	orr.w	r3, r3, #32
 8015524:	b2da      	uxtb	r2, r3
 8015526:	4b66      	ldr	r3, [pc, #408]	@ (80156c0 <tcp_receive+0xcf8>)
 8015528:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	7d1b      	ldrb	r3, [r3, #20]
 801552e:	2b04      	cmp	r3, #4
 8015530:	d102      	bne.n	8015538 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	2207      	movs	r2, #7
 8015536:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8015540:	68b8      	ldr	r0, [r7, #8]
 8015542:	f7fd fb06 	bl	8012b52 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801554a:	2b00      	cmp	r3, #0
 801554c:	d008      	beq.n	8015560 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015552:	68db      	ldr	r3, [r3, #12]
 8015554:	685a      	ldr	r2, [r3, #4]
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801555a:	429a      	cmp	r2, r3
 801555c:	f43f af43 	beq.w	80153e6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	8b5b      	ldrh	r3, [r3, #26]
 8015564:	f003 0301 	and.w	r3, r3, #1
 8015568:	2b00      	cmp	r3, #0
 801556a:	d00e      	beq.n	801558a <tcp_receive+0xbc2>
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	8b5b      	ldrh	r3, [r3, #26]
 8015570:	f023 0301 	bic.w	r3, r3, #1
 8015574:	b29a      	uxth	r2, r3
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	835a      	strh	r2, [r3, #26]
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	8b5b      	ldrh	r3, [r3, #26]
 801557e:	f043 0302 	orr.w	r3, r3, #2
 8015582:	b29a      	uxth	r2, r3
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015588:	e187      	b.n	801589a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	8b5b      	ldrh	r3, [r3, #26]
 801558e:	f043 0301 	orr.w	r3, r3, #1
 8015592:	b29a      	uxth	r2, r3
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015598:	e17f      	b.n	801589a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d106      	bne.n	80155b0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80155a2:	4848      	ldr	r0, [pc, #288]	@ (80156c4 <tcp_receive+0xcfc>)
 80155a4:	f7fd faee 	bl	8012b84 <tcp_seg_copy>
 80155a8:	4602      	mov	r2, r0
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80155ae:	e16c      	b.n	801588a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80155b0:	2300      	movs	r3, #0
 80155b2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80155b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80155ba:	e156      	b.n	801586a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80155bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155be:	68db      	ldr	r3, [r3, #12]
 80155c0:	685a      	ldr	r2, [r3, #4]
 80155c2:	4b41      	ldr	r3, [pc, #260]	@ (80156c8 <tcp_receive+0xd00>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	429a      	cmp	r2, r3
 80155c8:	d11d      	bne.n	8015606 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80155ca:	4b3e      	ldr	r3, [pc, #248]	@ (80156c4 <tcp_receive+0xcfc>)
 80155cc:	891a      	ldrh	r2, [r3, #8]
 80155ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155d0:	891b      	ldrh	r3, [r3, #8]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	f240 814e 	bls.w	8015874 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80155d8:	483a      	ldr	r0, [pc, #232]	@ (80156c4 <tcp_receive+0xcfc>)
 80155da:	f7fd fad3 	bl	8012b84 <tcp_seg_copy>
 80155de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	f000 8148 	beq.w	8015878 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80155e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d003      	beq.n	80155f6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80155ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80155f0:	697a      	ldr	r2, [r7, #20]
 80155f2:	601a      	str	r2, [r3, #0]
 80155f4:	e002      	b.n	80155fc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	697a      	ldr	r2, [r7, #20]
 80155fa:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80155fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80155fe:	6978      	ldr	r0, [r7, #20]
 8015600:	f7ff f8de 	bl	80147c0 <tcp_oos_insert_segment>
                }
                break;
 8015604:	e138      	b.n	8015878 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015608:	2b00      	cmp	r3, #0
 801560a:	d117      	bne.n	801563c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801560c:	4b2e      	ldr	r3, [pc, #184]	@ (80156c8 <tcp_receive+0xd00>)
 801560e:	681a      	ldr	r2, [r3, #0]
 8015610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015612:	68db      	ldr	r3, [r3, #12]
 8015614:	685b      	ldr	r3, [r3, #4]
 8015616:	1ad3      	subs	r3, r2, r3
 8015618:	2b00      	cmp	r3, #0
 801561a:	da57      	bge.n	80156cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801561c:	4829      	ldr	r0, [pc, #164]	@ (80156c4 <tcp_receive+0xcfc>)
 801561e:	f7fd fab1 	bl	8012b84 <tcp_seg_copy>
 8015622:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015624:	69bb      	ldr	r3, [r7, #24]
 8015626:	2b00      	cmp	r3, #0
 8015628:	f000 8128 	beq.w	801587c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	69ba      	ldr	r2, [r7, #24]
 8015630:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015632:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015634:	69b8      	ldr	r0, [r7, #24]
 8015636:	f7ff f8c3 	bl	80147c0 <tcp_oos_insert_segment>
                  }
                  break;
 801563a:	e11f      	b.n	801587c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801563c:	4b22      	ldr	r3, [pc, #136]	@ (80156c8 <tcp_receive+0xd00>)
 801563e:	681a      	ldr	r2, [r3, #0]
 8015640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015642:	68db      	ldr	r3, [r3, #12]
 8015644:	685b      	ldr	r3, [r3, #4]
 8015646:	1ad3      	subs	r3, r2, r3
 8015648:	3b01      	subs	r3, #1
 801564a:	2b00      	cmp	r3, #0
 801564c:	db3e      	blt.n	80156cc <tcp_receive+0xd04>
 801564e:	4b1e      	ldr	r3, [pc, #120]	@ (80156c8 <tcp_receive+0xd00>)
 8015650:	681a      	ldr	r2, [r3, #0]
 8015652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015654:	68db      	ldr	r3, [r3, #12]
 8015656:	685b      	ldr	r3, [r3, #4]
 8015658:	1ad3      	subs	r3, r2, r3
 801565a:	3301      	adds	r3, #1
 801565c:	2b00      	cmp	r3, #0
 801565e:	dc35      	bgt.n	80156cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015660:	4818      	ldr	r0, [pc, #96]	@ (80156c4 <tcp_receive+0xcfc>)
 8015662:	f7fd fa8f 	bl	8012b84 <tcp_seg_copy>
 8015666:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015668:	69fb      	ldr	r3, [r7, #28]
 801566a:	2b00      	cmp	r3, #0
 801566c:	f000 8108 	beq.w	8015880 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015672:	68db      	ldr	r3, [r3, #12]
 8015674:	685b      	ldr	r3, [r3, #4]
 8015676:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015678:	8912      	ldrh	r2, [r2, #8]
 801567a:	441a      	add	r2, r3
 801567c:	4b12      	ldr	r3, [pc, #72]	@ (80156c8 <tcp_receive+0xd00>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	1ad3      	subs	r3, r2, r3
 8015682:	2b00      	cmp	r3, #0
 8015684:	dd12      	ble.n	80156ac <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015686:	4b10      	ldr	r3, [pc, #64]	@ (80156c8 <tcp_receive+0xd00>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	b29a      	uxth	r2, r3
 801568c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801568e:	68db      	ldr	r3, [r3, #12]
 8015690:	685b      	ldr	r3, [r3, #4]
 8015692:	b29b      	uxth	r3, r3
 8015694:	1ad3      	subs	r3, r2, r3
 8015696:	b29a      	uxth	r2, r3
 8015698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801569a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801569c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801569e:	685a      	ldr	r2, [r3, #4]
 80156a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156a2:	891b      	ldrh	r3, [r3, #8]
 80156a4:	4619      	mov	r1, r3
 80156a6:	4610      	mov	r0, r2
 80156a8:	f7fb fcb6 	bl	8011018 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80156ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156ae:	69fa      	ldr	r2, [r7, #28]
 80156b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80156b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80156b4:	69f8      	ldr	r0, [r7, #28]
 80156b6:	f7ff f883 	bl	80147c0 <tcp_oos_insert_segment>
                  }
                  break;
 80156ba:	e0e1      	b.n	8015880 <tcp_receive+0xeb8>
 80156bc:	200425fc 	.word	0x200425fc
 80156c0:	200425f9 	.word	0x200425f9
 80156c4:	200425cc 	.word	0x200425cc
 80156c8:	200425ec 	.word	0x200425ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80156cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ce:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80156d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	f040 80c5 	bne.w	8015864 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80156da:	4b7f      	ldr	r3, [pc, #508]	@ (80158d8 <tcp_receive+0xf10>)
 80156dc:	681a      	ldr	r2, [r3, #0]
 80156de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156e0:	68db      	ldr	r3, [r3, #12]
 80156e2:	685b      	ldr	r3, [r3, #4]
 80156e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	f340 80bc 	ble.w	8015864 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80156ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ee:	68db      	ldr	r3, [r3, #12]
 80156f0:	899b      	ldrh	r3, [r3, #12]
 80156f2:	b29b      	uxth	r3, r3
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7fa f94d 	bl	800f994 <lwip_htons>
 80156fa:	4603      	mov	r3, r0
 80156fc:	b2db      	uxtb	r3, r3
 80156fe:	f003 0301 	and.w	r3, r3, #1
 8015702:	2b00      	cmp	r3, #0
 8015704:	f040 80be 	bne.w	8015884 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015708:	4874      	ldr	r0, [pc, #464]	@ (80158dc <tcp_receive+0xf14>)
 801570a:	f7fd fa3b 	bl	8012b84 <tcp_seg_copy>
 801570e:	4602      	mov	r2, r0
 8015710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015712:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	2b00      	cmp	r3, #0
 801571a:	f000 80b5 	beq.w	8015888 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801571e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015720:	68db      	ldr	r3, [r3, #12]
 8015722:	685b      	ldr	r3, [r3, #4]
 8015724:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015726:	8912      	ldrh	r2, [r2, #8]
 8015728:	441a      	add	r2, r3
 801572a:	4b6b      	ldr	r3, [pc, #428]	@ (80158d8 <tcp_receive+0xf10>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	1ad3      	subs	r3, r2, r3
 8015730:	2b00      	cmp	r3, #0
 8015732:	dd12      	ble.n	801575a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015734:	4b68      	ldr	r3, [pc, #416]	@ (80158d8 <tcp_receive+0xf10>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	b29a      	uxth	r2, r3
 801573a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801573c:	68db      	ldr	r3, [r3, #12]
 801573e:	685b      	ldr	r3, [r3, #4]
 8015740:	b29b      	uxth	r3, r3
 8015742:	1ad3      	subs	r3, r2, r3
 8015744:	b29a      	uxth	r2, r3
 8015746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015748:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801574a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801574c:	685a      	ldr	r2, [r3, #4]
 801574e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015750:	891b      	ldrh	r3, [r3, #8]
 8015752:	4619      	mov	r1, r3
 8015754:	4610      	mov	r0, r2
 8015756:	f7fb fc5f 	bl	8011018 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801575a:	4b61      	ldr	r3, [pc, #388]	@ (80158e0 <tcp_receive+0xf18>)
 801575c:	881b      	ldrh	r3, [r3, #0]
 801575e:	461a      	mov	r2, r3
 8015760:	4b5d      	ldr	r3, [pc, #372]	@ (80158d8 <tcp_receive+0xf10>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	441a      	add	r2, r3
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801576a:	6879      	ldr	r1, [r7, #4]
 801576c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801576e:	440b      	add	r3, r1
 8015770:	1ad3      	subs	r3, r2, r3
 8015772:	2b00      	cmp	r3, #0
 8015774:	f340 8088 	ble.w	8015888 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	68db      	ldr	r3, [r3, #12]
 801577e:	899b      	ldrh	r3, [r3, #12]
 8015780:	b29b      	uxth	r3, r3
 8015782:	4618      	mov	r0, r3
 8015784:	f7fa f906 	bl	800f994 <lwip_htons>
 8015788:	4603      	mov	r3, r0
 801578a:	b2db      	uxtb	r3, r3
 801578c:	f003 0301 	and.w	r3, r3, #1
 8015790:	2b00      	cmp	r3, #0
 8015792:	d021      	beq.n	80157d8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	68db      	ldr	r3, [r3, #12]
 801579a:	899b      	ldrh	r3, [r3, #12]
 801579c:	b29b      	uxth	r3, r3
 801579e:	b21b      	sxth	r3, r3
 80157a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80157a4:	b21c      	sxth	r4, r3
 80157a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	68db      	ldr	r3, [r3, #12]
 80157ac:	899b      	ldrh	r3, [r3, #12]
 80157ae:	b29b      	uxth	r3, r3
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7fa f8ef 	bl	800f994 <lwip_htons>
 80157b6:	4603      	mov	r3, r0
 80157b8:	b2db      	uxtb	r3, r3
 80157ba:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80157be:	b29b      	uxth	r3, r3
 80157c0:	4618      	mov	r0, r3
 80157c2:	f7fa f8e7 	bl	800f994 <lwip_htons>
 80157c6:	4603      	mov	r3, r0
 80157c8:	b21b      	sxth	r3, r3
 80157ca:	4323      	orrs	r3, r4
 80157cc:	b21a      	sxth	r2, r3
 80157ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	68db      	ldr	r3, [r3, #12]
 80157d4:	b292      	uxth	r2, r2
 80157d6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157dc:	b29a      	uxth	r2, r3
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157e2:	4413      	add	r3, r2
 80157e4:	b299      	uxth	r1, r3
 80157e6:	4b3c      	ldr	r3, [pc, #240]	@ (80158d8 <tcp_receive+0xf10>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	b29a      	uxth	r2, r3
 80157ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	1a8a      	subs	r2, r1, r2
 80157f2:	b292      	uxth	r2, r2
 80157f4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80157f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	685a      	ldr	r2, [r3, #4]
 80157fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	891b      	ldrh	r3, [r3, #8]
 8015802:	4619      	mov	r1, r3
 8015804:	4610      	mov	r0, r2
 8015806:	f7fb fc07 	bl	8011018 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801580a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	891c      	ldrh	r4, [r3, #8]
 8015810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	68db      	ldr	r3, [r3, #12]
 8015816:	899b      	ldrh	r3, [r3, #12]
 8015818:	b29b      	uxth	r3, r3
 801581a:	4618      	mov	r0, r3
 801581c:	f7fa f8ba 	bl	800f994 <lwip_htons>
 8015820:	4603      	mov	r3, r0
 8015822:	b2db      	uxtb	r3, r3
 8015824:	f003 0303 	and.w	r3, r3, #3
 8015828:	2b00      	cmp	r3, #0
 801582a:	d001      	beq.n	8015830 <tcp_receive+0xe68>
 801582c:	2301      	movs	r3, #1
 801582e:	e000      	b.n	8015832 <tcp_receive+0xe6a>
 8015830:	2300      	movs	r3, #0
 8015832:	4423      	add	r3, r4
 8015834:	b29a      	uxth	r2, r3
 8015836:	4b2a      	ldr	r3, [pc, #168]	@ (80158e0 <tcp_receive+0xf18>)
 8015838:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801583a:	4b29      	ldr	r3, [pc, #164]	@ (80158e0 <tcp_receive+0xf18>)
 801583c:	881b      	ldrh	r3, [r3, #0]
 801583e:	461a      	mov	r2, r3
 8015840:	4b25      	ldr	r3, [pc, #148]	@ (80158d8 <tcp_receive+0xf10>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	441a      	add	r2, r3
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801584a:	6879      	ldr	r1, [r7, #4]
 801584c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801584e:	440b      	add	r3, r1
 8015850:	429a      	cmp	r2, r3
 8015852:	d019      	beq.n	8015888 <tcp_receive+0xec0>
 8015854:	4b23      	ldr	r3, [pc, #140]	@ (80158e4 <tcp_receive+0xf1c>)
 8015856:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801585a:	4923      	ldr	r1, [pc, #140]	@ (80158e8 <tcp_receive+0xf20>)
 801585c:	4823      	ldr	r0, [pc, #140]	@ (80158ec <tcp_receive+0xf24>)
 801585e:	f013 fd61 	bl	8029324 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015862:	e011      	b.n	8015888 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	63bb      	str	r3, [r7, #56]	@ 0x38
 801586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801586c:	2b00      	cmp	r3, #0
 801586e:	f47f aea5 	bne.w	80155bc <tcp_receive+0xbf4>
 8015872:	e00a      	b.n	801588a <tcp_receive+0xec2>
                break;
 8015874:	bf00      	nop
 8015876:	e008      	b.n	801588a <tcp_receive+0xec2>
                break;
 8015878:	bf00      	nop
 801587a:	e006      	b.n	801588a <tcp_receive+0xec2>
                  break;
 801587c:	bf00      	nop
 801587e:	e004      	b.n	801588a <tcp_receive+0xec2>
                  break;
 8015880:	bf00      	nop
 8015882:	e002      	b.n	801588a <tcp_receive+0xec2>
                  break;
 8015884:	bf00      	nop
 8015886:	e000      	b.n	801588a <tcp_receive+0xec2>
                break;
 8015888:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	f001 fe88 	bl	80175a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015890:	e003      	b.n	801589a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f001 fe84 	bl	80175a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015898:	e01a      	b.n	80158d0 <tcp_receive+0xf08>
 801589a:	e019      	b.n	80158d0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801589c:	4b0e      	ldr	r3, [pc, #56]	@ (80158d8 <tcp_receive+0xf10>)
 801589e:	681a      	ldr	r2, [r3, #0]
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158a4:	1ad3      	subs	r3, r2, r3
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	db0a      	blt.n	80158c0 <tcp_receive+0xef8>
 80158aa:	4b0b      	ldr	r3, [pc, #44]	@ (80158d8 <tcp_receive+0xf10>)
 80158ac:	681a      	ldr	r2, [r3, #0]
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158b2:	6879      	ldr	r1, [r7, #4]
 80158b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80158b6:	440b      	add	r3, r1
 80158b8:	1ad3      	subs	r3, r2, r3
 80158ba:	3301      	adds	r3, #1
 80158bc:	2b00      	cmp	r3, #0
 80158be:	dd07      	ble.n	80158d0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	8b5b      	ldrh	r3, [r3, #26]
 80158c4:	f043 0302 	orr.w	r3, r3, #2
 80158c8:	b29a      	uxth	r2, r3
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80158ce:	e7ff      	b.n	80158d0 <tcp_receive+0xf08>
 80158d0:	bf00      	nop
 80158d2:	3750      	adds	r7, #80	@ 0x50
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bdb0      	pop	{r4, r5, r7, pc}
 80158d8:	200425ec 	.word	0x200425ec
 80158dc:	200425cc 	.word	0x200425cc
 80158e0:	200425f6 	.word	0x200425f6
 80158e4:	0802d7bc 	.word	0x0802d7bc
 80158e8:	0802db64 	.word	0x0802db64
 80158ec:	0802d808 	.word	0x0802d808

080158f0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80158f0:	b480      	push	{r7}
 80158f2:	b083      	sub	sp, #12
 80158f4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80158f6:	4b15      	ldr	r3, [pc, #84]	@ (801594c <tcp_get_next_optbyte+0x5c>)
 80158f8:	881b      	ldrh	r3, [r3, #0]
 80158fa:	1c5a      	adds	r2, r3, #1
 80158fc:	b291      	uxth	r1, r2
 80158fe:	4a13      	ldr	r2, [pc, #76]	@ (801594c <tcp_get_next_optbyte+0x5c>)
 8015900:	8011      	strh	r1, [r2, #0]
 8015902:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015904:	4b12      	ldr	r3, [pc, #72]	@ (8015950 <tcp_get_next_optbyte+0x60>)
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d004      	beq.n	8015916 <tcp_get_next_optbyte+0x26>
 801590c:	4b11      	ldr	r3, [pc, #68]	@ (8015954 <tcp_get_next_optbyte+0x64>)
 801590e:	881b      	ldrh	r3, [r3, #0]
 8015910:	88fa      	ldrh	r2, [r7, #6]
 8015912:	429a      	cmp	r2, r3
 8015914:	d208      	bcs.n	8015928 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015916:	4b10      	ldr	r3, [pc, #64]	@ (8015958 <tcp_get_next_optbyte+0x68>)
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	3314      	adds	r3, #20
 801591c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801591e:	88fb      	ldrh	r3, [r7, #6]
 8015920:	683a      	ldr	r2, [r7, #0]
 8015922:	4413      	add	r3, r2
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	e00b      	b.n	8015940 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015928:	88fb      	ldrh	r3, [r7, #6]
 801592a:	b2da      	uxtb	r2, r3
 801592c:	4b09      	ldr	r3, [pc, #36]	@ (8015954 <tcp_get_next_optbyte+0x64>)
 801592e:	881b      	ldrh	r3, [r3, #0]
 8015930:	b2db      	uxtb	r3, r3
 8015932:	1ad3      	subs	r3, r2, r3
 8015934:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015936:	4b06      	ldr	r3, [pc, #24]	@ (8015950 <tcp_get_next_optbyte+0x60>)
 8015938:	681a      	ldr	r2, [r3, #0]
 801593a:	797b      	ldrb	r3, [r7, #5]
 801593c:	4413      	add	r3, r2
 801593e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015940:	4618      	mov	r0, r3
 8015942:	370c      	adds	r7, #12
 8015944:	46bd      	mov	sp, r7
 8015946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594a:	4770      	bx	lr
 801594c:	200425e8 	.word	0x200425e8
 8015950:	200425e4 	.word	0x200425e4
 8015954:	200425e2 	.word	0x200425e2
 8015958:	200425dc 	.word	0x200425dc

0801595c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801595c:	b580      	push	{r7, lr}
 801595e:	b084      	sub	sp, #16
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d106      	bne.n	8015978 <tcp_parseopt+0x1c>
 801596a:	4b32      	ldr	r3, [pc, #200]	@ (8015a34 <tcp_parseopt+0xd8>)
 801596c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8015970:	4931      	ldr	r1, [pc, #196]	@ (8015a38 <tcp_parseopt+0xdc>)
 8015972:	4832      	ldr	r0, [pc, #200]	@ (8015a3c <tcp_parseopt+0xe0>)
 8015974:	f013 fcd6 	bl	8029324 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015978:	4b31      	ldr	r3, [pc, #196]	@ (8015a40 <tcp_parseopt+0xe4>)
 801597a:	881b      	ldrh	r3, [r3, #0]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d056      	beq.n	8015a2e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015980:	4b30      	ldr	r3, [pc, #192]	@ (8015a44 <tcp_parseopt+0xe8>)
 8015982:	2200      	movs	r2, #0
 8015984:	801a      	strh	r2, [r3, #0]
 8015986:	e046      	b.n	8015a16 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015988:	f7ff ffb2 	bl	80158f0 <tcp_get_next_optbyte>
 801598c:	4603      	mov	r3, r0
 801598e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015990:	7bfb      	ldrb	r3, [r7, #15]
 8015992:	2b02      	cmp	r3, #2
 8015994:	d006      	beq.n	80159a4 <tcp_parseopt+0x48>
 8015996:	2b02      	cmp	r3, #2
 8015998:	dc2a      	bgt.n	80159f0 <tcp_parseopt+0x94>
 801599a:	2b00      	cmp	r3, #0
 801599c:	d042      	beq.n	8015a24 <tcp_parseopt+0xc8>
 801599e:	2b01      	cmp	r3, #1
 80159a0:	d038      	beq.n	8015a14 <tcp_parseopt+0xb8>
 80159a2:	e025      	b.n	80159f0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80159a4:	f7ff ffa4 	bl	80158f0 <tcp_get_next_optbyte>
 80159a8:	4603      	mov	r3, r0
 80159aa:	2b04      	cmp	r3, #4
 80159ac:	d13c      	bne.n	8015a28 <tcp_parseopt+0xcc>
 80159ae:	4b25      	ldr	r3, [pc, #148]	@ (8015a44 <tcp_parseopt+0xe8>)
 80159b0:	881b      	ldrh	r3, [r3, #0]
 80159b2:	3301      	adds	r3, #1
 80159b4:	4a22      	ldr	r2, [pc, #136]	@ (8015a40 <tcp_parseopt+0xe4>)
 80159b6:	8812      	ldrh	r2, [r2, #0]
 80159b8:	4293      	cmp	r3, r2
 80159ba:	da35      	bge.n	8015a28 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80159bc:	f7ff ff98 	bl	80158f0 <tcp_get_next_optbyte>
 80159c0:	4603      	mov	r3, r0
 80159c2:	021b      	lsls	r3, r3, #8
 80159c4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80159c6:	f7ff ff93 	bl	80158f0 <tcp_get_next_optbyte>
 80159ca:	4603      	mov	r3, r0
 80159cc:	461a      	mov	r2, r3
 80159ce:	89bb      	ldrh	r3, [r7, #12]
 80159d0:	4313      	orrs	r3, r2
 80159d2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80159d4:	89bb      	ldrh	r3, [r7, #12]
 80159d6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80159da:	d804      	bhi.n	80159e6 <tcp_parseopt+0x8a>
 80159dc:	89bb      	ldrh	r3, [r7, #12]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d001      	beq.n	80159e6 <tcp_parseopt+0x8a>
 80159e2:	89ba      	ldrh	r2, [r7, #12]
 80159e4:	e001      	b.n	80159ea <tcp_parseopt+0x8e>
 80159e6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80159ee:	e012      	b.n	8015a16 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80159f0:	f7ff ff7e 	bl	80158f0 <tcp_get_next_optbyte>
 80159f4:	4603      	mov	r3, r0
 80159f6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80159f8:	7afb      	ldrb	r3, [r7, #11]
 80159fa:	2b01      	cmp	r3, #1
 80159fc:	d916      	bls.n	8015a2c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80159fe:	7afb      	ldrb	r3, [r7, #11]
 8015a00:	b29a      	uxth	r2, r3
 8015a02:	4b10      	ldr	r3, [pc, #64]	@ (8015a44 <tcp_parseopt+0xe8>)
 8015a04:	881b      	ldrh	r3, [r3, #0]
 8015a06:	4413      	add	r3, r2
 8015a08:	b29b      	uxth	r3, r3
 8015a0a:	3b02      	subs	r3, #2
 8015a0c:	b29a      	uxth	r2, r3
 8015a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8015a44 <tcp_parseopt+0xe8>)
 8015a10:	801a      	strh	r2, [r3, #0]
 8015a12:	e000      	b.n	8015a16 <tcp_parseopt+0xba>
          break;
 8015a14:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015a16:	4b0b      	ldr	r3, [pc, #44]	@ (8015a44 <tcp_parseopt+0xe8>)
 8015a18:	881a      	ldrh	r2, [r3, #0]
 8015a1a:	4b09      	ldr	r3, [pc, #36]	@ (8015a40 <tcp_parseopt+0xe4>)
 8015a1c:	881b      	ldrh	r3, [r3, #0]
 8015a1e:	429a      	cmp	r2, r3
 8015a20:	d3b2      	bcc.n	8015988 <tcp_parseopt+0x2c>
 8015a22:	e004      	b.n	8015a2e <tcp_parseopt+0xd2>
          return;
 8015a24:	bf00      	nop
 8015a26:	e002      	b.n	8015a2e <tcp_parseopt+0xd2>
            return;
 8015a28:	bf00      	nop
 8015a2a:	e000      	b.n	8015a2e <tcp_parseopt+0xd2>
            return;
 8015a2c:	bf00      	nop
      }
    }
  }
}
 8015a2e:	3710      	adds	r7, #16
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}
 8015a34:	0802d7bc 	.word	0x0802d7bc
 8015a38:	0802dc20 	.word	0x0802dc20
 8015a3c:	0802d808 	.word	0x0802d808
 8015a40:	200425e0 	.word	0x200425e0
 8015a44:	200425e8 	.word	0x200425e8

08015a48 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015a48:	b480      	push	{r7}
 8015a4a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015a4c:	4b05      	ldr	r3, [pc, #20]	@ (8015a64 <tcp_trigger_input_pcb_close+0x1c>)
 8015a4e:	781b      	ldrb	r3, [r3, #0]
 8015a50:	f043 0310 	orr.w	r3, r3, #16
 8015a54:	b2da      	uxtb	r2, r3
 8015a56:	4b03      	ldr	r3, [pc, #12]	@ (8015a64 <tcp_trigger_input_pcb_close+0x1c>)
 8015a58:	701a      	strb	r2, [r3, #0]
}
 8015a5a:	bf00      	nop
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a62:	4770      	bx	lr
 8015a64:	200425f9 	.word	0x200425f9

08015a68 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b084      	sub	sp, #16
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	60f8      	str	r0, [r7, #12]
 8015a70:	60b9      	str	r1, [r7, #8]
 8015a72:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d00a      	beq.n	8015a90 <tcp_route+0x28>
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	7a1b      	ldrb	r3, [r3, #8]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d006      	beq.n	8015a90 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	7a1b      	ldrb	r3, [r3, #8]
 8015a86:	4618      	mov	r0, r3
 8015a88:	f7fb f886 	bl	8010b98 <netif_get_by_index>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	e003      	b.n	8015a98 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f004 fb1f 	bl	801a0d4 <ip4_route>
 8015a96:	4603      	mov	r3, r0
  }
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	3710      	adds	r7, #16
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}

08015aa0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015aa0:	b590      	push	{r4, r7, lr}
 8015aa2:	b087      	sub	sp, #28
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	60f8      	str	r0, [r7, #12]
 8015aa8:	60b9      	str	r1, [r7, #8]
 8015aaa:	603b      	str	r3, [r7, #0]
 8015aac:	4613      	mov	r3, r2
 8015aae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d105      	bne.n	8015ac2 <tcp_create_segment+0x22>
 8015ab6:	4b43      	ldr	r3, [pc, #268]	@ (8015bc4 <tcp_create_segment+0x124>)
 8015ab8:	22a3      	movs	r2, #163	@ 0xa3
 8015aba:	4943      	ldr	r1, [pc, #268]	@ (8015bc8 <tcp_create_segment+0x128>)
 8015abc:	4843      	ldr	r0, [pc, #268]	@ (8015bcc <tcp_create_segment+0x12c>)
 8015abe:	f013 fc31 	bl	8029324 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015ac2:	68bb      	ldr	r3, [r7, #8]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d105      	bne.n	8015ad4 <tcp_create_segment+0x34>
 8015ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8015bc4 <tcp_create_segment+0x124>)
 8015aca:	22a4      	movs	r2, #164	@ 0xa4
 8015acc:	4940      	ldr	r1, [pc, #256]	@ (8015bd0 <tcp_create_segment+0x130>)
 8015ace:	483f      	ldr	r0, [pc, #252]	@ (8015bcc <tcp_create_segment+0x12c>)
 8015ad0:	f013 fc28 	bl	8029324 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015ad4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015ad8:	009b      	lsls	r3, r3, #2
 8015ada:	b2db      	uxtb	r3, r3
 8015adc:	f003 0304 	and.w	r3, r3, #4
 8015ae0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015ae2:	2003      	movs	r0, #3
 8015ae4:	f7fa fcae 	bl	8010444 <memp_malloc>
 8015ae8:	6138      	str	r0, [r7, #16]
 8015aea:	693b      	ldr	r3, [r7, #16]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d104      	bne.n	8015afa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015af0:	68b8      	ldr	r0, [r7, #8]
 8015af2:	f7fb fc49 	bl	8011388 <pbuf_free>
    return NULL;
 8015af6:	2300      	movs	r3, #0
 8015af8:	e060      	b.n	8015bbc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015b00:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015b02:	693b      	ldr	r3, [r7, #16]
 8015b04:	2200      	movs	r2, #0
 8015b06:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015b08:	693b      	ldr	r3, [r7, #16]
 8015b0a:	68ba      	ldr	r2, [r7, #8]
 8015b0c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015b0e:	68bb      	ldr	r3, [r7, #8]
 8015b10:	891a      	ldrh	r2, [r3, #8]
 8015b12:	7dfb      	ldrb	r3, [r7, #23]
 8015b14:	b29b      	uxth	r3, r3
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d205      	bcs.n	8015b26 <tcp_create_segment+0x86>
 8015b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8015bc4 <tcp_create_segment+0x124>)
 8015b1c:	22b0      	movs	r2, #176	@ 0xb0
 8015b1e:	492d      	ldr	r1, [pc, #180]	@ (8015bd4 <tcp_create_segment+0x134>)
 8015b20:	482a      	ldr	r0, [pc, #168]	@ (8015bcc <tcp_create_segment+0x12c>)
 8015b22:	f013 fbff 	bl	8029324 <iprintf>
  seg->len = p->tot_len - optlen;
 8015b26:	68bb      	ldr	r3, [r7, #8]
 8015b28:	891a      	ldrh	r2, [r3, #8]
 8015b2a:	7dfb      	ldrb	r3, [r7, #23]
 8015b2c:	b29b      	uxth	r3, r3
 8015b2e:	1ad3      	subs	r3, r2, r3
 8015b30:	b29a      	uxth	r2, r3
 8015b32:	693b      	ldr	r3, [r7, #16]
 8015b34:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015b36:	2114      	movs	r1, #20
 8015b38:	68b8      	ldr	r0, [r7, #8]
 8015b3a:	f7fb fb5d 	bl	80111f8 <pbuf_add_header>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d004      	beq.n	8015b4e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015b44:	6938      	ldr	r0, [r7, #16]
 8015b46:	f7fd f804 	bl	8012b52 <tcp_seg_free>
    return NULL;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	e036      	b.n	8015bbc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015b4e:	693b      	ldr	r3, [r7, #16]
 8015b50:	685b      	ldr	r3, [r3, #4]
 8015b52:	685a      	ldr	r2, [r3, #4]
 8015b54:	693b      	ldr	r3, [r7, #16]
 8015b56:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	8ada      	ldrh	r2, [r3, #22]
 8015b5c:	693b      	ldr	r3, [r7, #16]
 8015b5e:	68dc      	ldr	r4, [r3, #12]
 8015b60:	4610      	mov	r0, r2
 8015b62:	f7f9 ff17 	bl	800f994 <lwip_htons>
 8015b66:	4603      	mov	r3, r0
 8015b68:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	8b1a      	ldrh	r2, [r3, #24]
 8015b6e:	693b      	ldr	r3, [r7, #16]
 8015b70:	68dc      	ldr	r4, [r3, #12]
 8015b72:	4610      	mov	r0, r2
 8015b74:	f7f9 ff0e 	bl	800f994 <lwip_htons>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015b7c:	693b      	ldr	r3, [r7, #16]
 8015b7e:	68dc      	ldr	r4, [r3, #12]
 8015b80:	6838      	ldr	r0, [r7, #0]
 8015b82:	f7f9 ff1c 	bl	800f9be <lwip_htonl>
 8015b86:	4603      	mov	r3, r0
 8015b88:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015b8a:	7dfb      	ldrb	r3, [r7, #23]
 8015b8c:	089b      	lsrs	r3, r3, #2
 8015b8e:	b2db      	uxtb	r3, r3
 8015b90:	3305      	adds	r3, #5
 8015b92:	b29b      	uxth	r3, r3
 8015b94:	031b      	lsls	r3, r3, #12
 8015b96:	b29a      	uxth	r2, r3
 8015b98:	79fb      	ldrb	r3, [r7, #7]
 8015b9a:	b29b      	uxth	r3, r3
 8015b9c:	4313      	orrs	r3, r2
 8015b9e:	b29a      	uxth	r2, r3
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	68dc      	ldr	r4, [r3, #12]
 8015ba4:	4610      	mov	r0, r2
 8015ba6:	f7f9 fef5 	bl	800f994 <lwip_htons>
 8015baa:	4603      	mov	r3, r0
 8015bac:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015bae:	693b      	ldr	r3, [r7, #16]
 8015bb0:	68db      	ldr	r3, [r3, #12]
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	749a      	strb	r2, [r3, #18]
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	74da      	strb	r2, [r3, #19]
  return seg;
 8015bba:	693b      	ldr	r3, [r7, #16]
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	371c      	adds	r7, #28
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd90      	pop	{r4, r7, pc}
 8015bc4:	0802dc3c 	.word	0x0802dc3c
 8015bc8:	0802dc70 	.word	0x0802dc70
 8015bcc:	0802dc90 	.word	0x0802dc90
 8015bd0:	0802dcb8 	.word	0x0802dcb8
 8015bd4:	0802dcdc 	.word	0x0802dcdc

08015bd8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b086      	sub	sp, #24
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	607b      	str	r3, [r7, #4]
 8015be0:	4603      	mov	r3, r0
 8015be2:	73fb      	strb	r3, [r7, #15]
 8015be4:	460b      	mov	r3, r1
 8015be6:	81bb      	strh	r3, [r7, #12]
 8015be8:	4613      	mov	r3, r2
 8015bea:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015bec:	89bb      	ldrh	r3, [r7, #12]
 8015bee:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d105      	bne.n	8015c02 <tcp_pbuf_prealloc+0x2a>
 8015bf6:	4b30      	ldr	r3, [pc, #192]	@ (8015cb8 <tcp_pbuf_prealloc+0xe0>)
 8015bf8:	22e8      	movs	r2, #232	@ 0xe8
 8015bfa:	4930      	ldr	r1, [pc, #192]	@ (8015cbc <tcp_pbuf_prealloc+0xe4>)
 8015bfc:	4830      	ldr	r0, [pc, #192]	@ (8015cc0 <tcp_pbuf_prealloc+0xe8>)
 8015bfe:	f013 fb91 	bl	8029324 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015c02:	6a3b      	ldr	r3, [r7, #32]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d105      	bne.n	8015c14 <tcp_pbuf_prealloc+0x3c>
 8015c08:	4b2b      	ldr	r3, [pc, #172]	@ (8015cb8 <tcp_pbuf_prealloc+0xe0>)
 8015c0a:	22e9      	movs	r2, #233	@ 0xe9
 8015c0c:	492d      	ldr	r1, [pc, #180]	@ (8015cc4 <tcp_pbuf_prealloc+0xec>)
 8015c0e:	482c      	ldr	r0, [pc, #176]	@ (8015cc0 <tcp_pbuf_prealloc+0xe8>)
 8015c10:	f013 fb88 	bl	8029324 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015c14:	89ba      	ldrh	r2, [r7, #12]
 8015c16:	897b      	ldrh	r3, [r7, #10]
 8015c18:	429a      	cmp	r2, r3
 8015c1a:	d221      	bcs.n	8015c60 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015c1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015c20:	f003 0302 	and.w	r3, r3, #2
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d111      	bne.n	8015c4c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015c28:	6a3b      	ldr	r3, [r7, #32]
 8015c2a:	8b5b      	ldrh	r3, [r3, #26]
 8015c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d115      	bne.n	8015c60 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015c34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d007      	beq.n	8015c4c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015c3c:	6a3b      	ldr	r3, [r7, #32]
 8015c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d103      	bne.n	8015c4c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015c44:	6a3b      	ldr	r3, [r7, #32]
 8015c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d009      	beq.n	8015c60 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015c4c:	89bb      	ldrh	r3, [r7, #12]
 8015c4e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8015c52:	f023 0203 	bic.w	r2, r3, #3
 8015c56:	897b      	ldrh	r3, [r7, #10]
 8015c58:	4293      	cmp	r3, r2
 8015c5a:	bf28      	it	cs
 8015c5c:	4613      	movcs	r3, r2
 8015c5e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015c60:	8af9      	ldrh	r1, [r7, #22]
 8015c62:	7bfb      	ldrb	r3, [r7, #15]
 8015c64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f7fb f877 	bl	8010d5c <pbuf_alloc>
 8015c6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015c70:	693b      	ldr	r3, [r7, #16]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d101      	bne.n	8015c7a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015c76:	2300      	movs	r3, #0
 8015c78:	e019      	b.n	8015cae <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015c7a:	693b      	ldr	r3, [r7, #16]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d006      	beq.n	8015c90 <tcp_pbuf_prealloc+0xb8>
 8015c82:	4b0d      	ldr	r3, [pc, #52]	@ (8015cb8 <tcp_pbuf_prealloc+0xe0>)
 8015c84:	f240 120b 	movw	r2, #267	@ 0x10b
 8015c88:	490f      	ldr	r1, [pc, #60]	@ (8015cc8 <tcp_pbuf_prealloc+0xf0>)
 8015c8a:	480d      	ldr	r0, [pc, #52]	@ (8015cc0 <tcp_pbuf_prealloc+0xe8>)
 8015c8c:	f013 fb4a 	bl	8029324 <iprintf>
  *oversize = p->len - length;
 8015c90:	693b      	ldr	r3, [r7, #16]
 8015c92:	895a      	ldrh	r2, [r3, #10]
 8015c94:	89bb      	ldrh	r3, [r7, #12]
 8015c96:	1ad3      	subs	r3, r2, r3
 8015c98:	b29a      	uxth	r2, r3
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015c9e:	693b      	ldr	r3, [r7, #16]
 8015ca0:	89ba      	ldrh	r2, [r7, #12]
 8015ca2:	811a      	strh	r2, [r3, #8]
 8015ca4:	693b      	ldr	r3, [r7, #16]
 8015ca6:	891a      	ldrh	r2, [r3, #8]
 8015ca8:	693b      	ldr	r3, [r7, #16]
 8015caa:	815a      	strh	r2, [r3, #10]
  return p;
 8015cac:	693b      	ldr	r3, [r7, #16]
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3718      	adds	r7, #24
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
 8015cb6:	bf00      	nop
 8015cb8:	0802dc3c 	.word	0x0802dc3c
 8015cbc:	0802dcf4 	.word	0x0802dcf4
 8015cc0:	0802dc90 	.word	0x0802dc90
 8015cc4:	0802dd18 	.word	0x0802dd18
 8015cc8:	0802dd38 	.word	0x0802dd38

08015ccc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b082      	sub	sp, #8
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
 8015cd4:	460b      	mov	r3, r1
 8015cd6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d106      	bne.n	8015cec <tcp_write_checks+0x20>
 8015cde:	4b33      	ldr	r3, [pc, #204]	@ (8015dac <tcp_write_checks+0xe0>)
 8015ce0:	f240 1233 	movw	r2, #307	@ 0x133
 8015ce4:	4932      	ldr	r1, [pc, #200]	@ (8015db0 <tcp_write_checks+0xe4>)
 8015ce6:	4833      	ldr	r0, [pc, #204]	@ (8015db4 <tcp_write_checks+0xe8>)
 8015ce8:	f013 fb1c 	bl	8029324 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	7d1b      	ldrb	r3, [r3, #20]
 8015cf0:	2b04      	cmp	r3, #4
 8015cf2:	d00e      	beq.n	8015d12 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015cf8:	2b07      	cmp	r3, #7
 8015cfa:	d00a      	beq.n	8015d12 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015d00:	2b02      	cmp	r3, #2
 8015d02:	d006      	beq.n	8015d12 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015d08:	2b03      	cmp	r3, #3
 8015d0a:	d002      	beq.n	8015d12 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015d0c:	f06f 030a 	mvn.w	r3, #10
 8015d10:	e048      	b.n	8015da4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015d12:	887b      	ldrh	r3, [r7, #2]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d101      	bne.n	8015d1c <tcp_write_checks+0x50>
    return ERR_OK;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	e043      	b.n	8015da4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015d22:	887a      	ldrh	r2, [r7, #2]
 8015d24:	429a      	cmp	r2, r3
 8015d26:	d909      	bls.n	8015d3c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	8b5b      	ldrh	r3, [r3, #26]
 8015d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015d30:	b29a      	uxth	r2, r3
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015d3a:	e033      	b.n	8015da4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015d42:	2b08      	cmp	r3, #8
 8015d44:	d909      	bls.n	8015d5a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	8b5b      	ldrh	r3, [r3, #26]
 8015d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015d4e:	b29a      	uxth	r2, r3
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015d54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015d58:	e024      	b.n	8015da4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d00f      	beq.n	8015d84 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d11a      	bne.n	8015da2 <tcp_write_checks+0xd6>
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d116      	bne.n	8015da2 <tcp_write_checks+0xd6>
 8015d74:	4b0d      	ldr	r3, [pc, #52]	@ (8015dac <tcp_write_checks+0xe0>)
 8015d76:	f240 1255 	movw	r2, #341	@ 0x155
 8015d7a:	490f      	ldr	r1, [pc, #60]	@ (8015db8 <tcp_write_checks+0xec>)
 8015d7c:	480d      	ldr	r0, [pc, #52]	@ (8015db4 <tcp_write_checks+0xe8>)
 8015d7e:	f013 fad1 	bl	8029324 <iprintf>
 8015d82:	e00e      	b.n	8015da2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d103      	bne.n	8015d94 <tcp_write_checks+0xc8>
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d006      	beq.n	8015da2 <tcp_write_checks+0xd6>
 8015d94:	4b05      	ldr	r3, [pc, #20]	@ (8015dac <tcp_write_checks+0xe0>)
 8015d96:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8015d9a:	4908      	ldr	r1, [pc, #32]	@ (8015dbc <tcp_write_checks+0xf0>)
 8015d9c:	4805      	ldr	r0, [pc, #20]	@ (8015db4 <tcp_write_checks+0xe8>)
 8015d9e:	f013 fac1 	bl	8029324 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015da2:	2300      	movs	r3, #0
}
 8015da4:	4618      	mov	r0, r3
 8015da6:	3708      	adds	r7, #8
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}
 8015dac:	0802dc3c 	.word	0x0802dc3c
 8015db0:	0802dd4c 	.word	0x0802dd4c
 8015db4:	0802dc90 	.word	0x0802dc90
 8015db8:	0802dd6c 	.word	0x0802dd6c
 8015dbc:	0802dda8 	.word	0x0802dda8

08015dc0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015dc0:	b590      	push	{r4, r7, lr}
 8015dc2:	b09b      	sub	sp, #108	@ 0x6c
 8015dc4:	af04      	add	r7, sp, #16
 8015dc6:	60f8      	str	r0, [r7, #12]
 8015dc8:	60b9      	str	r1, [r7, #8]
 8015dca:	4611      	mov	r1, r2
 8015dcc:	461a      	mov	r2, r3
 8015dce:	460b      	mov	r3, r1
 8015dd0:	80fb      	strh	r3, [r7, #6]
 8015dd2:	4613      	mov	r3, r2
 8015dd4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	653b      	str	r3, [r7, #80]	@ 0x50
 8015dde:	2300      	movs	r3, #0
 8015de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015de2:	2300      	movs	r3, #0
 8015de4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015de6:	2300      	movs	r3, #0
 8015de8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015dea:	2300      	movs	r3, #0
 8015dec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015df0:	2300      	movs	r3, #0
 8015df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015df6:	2300      	movs	r3, #0
 8015df8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015dfe:	2300      	movs	r3, #0
 8015e00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d109      	bne.n	8015e1c <tcp_write+0x5c>
 8015e08:	4ba4      	ldr	r3, [pc, #656]	@ (801609c <tcp_write+0x2dc>)
 8015e0a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8015e0e:	49a4      	ldr	r1, [pc, #656]	@ (80160a0 <tcp_write+0x2e0>)
 8015e10:	48a4      	ldr	r0, [pc, #656]	@ (80160a4 <tcp_write+0x2e4>)
 8015e12:	f013 fa87 	bl	8029324 <iprintf>
 8015e16:	f06f 030f 	mvn.w	r3, #15
 8015e1a:	e32a      	b.n	8016472 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015e22:	085b      	lsrs	r3, r3, #1
 8015e24:	b29a      	uxth	r2, r3
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e2a:	4293      	cmp	r3, r2
 8015e2c:	bf28      	it	cs
 8015e2e:	4613      	movcs	r3, r2
 8015e30:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015e32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d102      	bne.n	8015e3e <tcp_write+0x7e>
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e3c:	e000      	b.n	8015e40 <tcp_write+0x80>
 8015e3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015e40:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015e42:	68bb      	ldr	r3, [r7, #8]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d109      	bne.n	8015e5c <tcp_write+0x9c>
 8015e48:	4b94      	ldr	r3, [pc, #592]	@ (801609c <tcp_write+0x2dc>)
 8015e4a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8015e4e:	4996      	ldr	r1, [pc, #600]	@ (80160a8 <tcp_write+0x2e8>)
 8015e50:	4894      	ldr	r0, [pc, #592]	@ (80160a4 <tcp_write+0x2e4>)
 8015e52:	f013 fa67 	bl	8029324 <iprintf>
 8015e56:	f06f 030f 	mvn.w	r3, #15
 8015e5a:	e30a      	b.n	8016472 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015e5c:	88fb      	ldrh	r3, [r7, #6]
 8015e5e:	4619      	mov	r1, r3
 8015e60:	68f8      	ldr	r0, [r7, #12]
 8015e62:	f7ff ff33 	bl	8015ccc <tcp_write_checks>
 8015e66:	4603      	mov	r3, r0
 8015e68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8015e6c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d002      	beq.n	8015e7a <tcp_write+0xba>
    return err;
 8015e74:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8015e78:	e2fb      	b.n	8016472 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015e80:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015e84:	2300      	movs	r3, #0
 8015e86:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	f000 80f6 	beq.w	8016080 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e98:	653b      	str	r3, [r7, #80]	@ 0x50
 8015e9a:	e002      	b.n	8015ea2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8015e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d1f8      	bne.n	8015e9c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8015eaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015eac:	7a9b      	ldrb	r3, [r3, #10]
 8015eae:	009b      	lsls	r3, r3, #2
 8015eb0:	b29b      	uxth	r3, r3
 8015eb2:	f003 0304 	and.w	r3, r3, #4
 8015eb6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015eb8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015eba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015ebc:	891b      	ldrh	r3, [r3, #8]
 8015ebe:	4619      	mov	r1, r3
 8015ec0:	8c3b      	ldrh	r3, [r7, #32]
 8015ec2:	440b      	add	r3, r1
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	da06      	bge.n	8015ed6 <tcp_write+0x116>
 8015ec8:	4b74      	ldr	r3, [pc, #464]	@ (801609c <tcp_write+0x2dc>)
 8015eca:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8015ece:	4977      	ldr	r1, [pc, #476]	@ (80160ac <tcp_write+0x2ec>)
 8015ed0:	4874      	ldr	r0, [pc, #464]	@ (80160a4 <tcp_write+0x2e4>)
 8015ed2:	f013 fa27 	bl	8029324 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015ed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015ed8:	891a      	ldrh	r2, [r3, #8]
 8015eda:	8c3b      	ldrh	r3, [r7, #32]
 8015edc:	4413      	add	r3, r2
 8015ede:	b29b      	uxth	r3, r3
 8015ee0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015ee2:	1ad3      	subs	r3, r2, r3
 8015ee4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8015eec:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015eee:	8a7b      	ldrh	r3, [r7, #18]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d026      	beq.n	8015f42 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8015ef4:	8a7b      	ldrh	r3, [r7, #18]
 8015ef6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015ef8:	429a      	cmp	r2, r3
 8015efa:	d206      	bcs.n	8015f0a <tcp_write+0x14a>
 8015efc:	4b67      	ldr	r3, [pc, #412]	@ (801609c <tcp_write+0x2dc>)
 8015efe:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8015f02:	496b      	ldr	r1, [pc, #428]	@ (80160b0 <tcp_write+0x2f0>)
 8015f04:	4867      	ldr	r0, [pc, #412]	@ (80160a4 <tcp_write+0x2e4>)
 8015f06:	f013 fa0d 	bl	8029324 <iprintf>
      seg = last_unsent;
 8015f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015f0e:	8a7b      	ldrh	r3, [r7, #18]
 8015f10:	88fa      	ldrh	r2, [r7, #6]
 8015f12:	4293      	cmp	r3, r2
 8015f14:	bf28      	it	cs
 8015f16:	4613      	movcs	r3, r2
 8015f18:	b29b      	uxth	r3, r3
 8015f1a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015f1c:	4293      	cmp	r3, r2
 8015f1e:	bf28      	it	cs
 8015f20:	4613      	movcs	r3, r2
 8015f22:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8015f24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015f28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015f2a:	4413      	add	r3, r2
 8015f2c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8015f30:	8a7a      	ldrh	r2, [r7, #18]
 8015f32:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015f34:	1ad3      	subs	r3, r2, r3
 8015f36:	b29b      	uxth	r3, r3
 8015f38:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015f3a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015f3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015f3e:	1ad3      	subs	r3, r2, r3
 8015f40:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8015f42:	8a7b      	ldrh	r3, [r7, #18]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d00b      	beq.n	8015f60 <tcp_write+0x1a0>
 8015f48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015f4c:	88fb      	ldrh	r3, [r7, #6]
 8015f4e:	429a      	cmp	r2, r3
 8015f50:	d006      	beq.n	8015f60 <tcp_write+0x1a0>
 8015f52:	4b52      	ldr	r3, [pc, #328]	@ (801609c <tcp_write+0x2dc>)
 8015f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015f58:	4956      	ldr	r1, [pc, #344]	@ (80160b4 <tcp_write+0x2f4>)
 8015f5a:	4852      	ldr	r0, [pc, #328]	@ (80160a4 <tcp_write+0x2e4>)
 8015f5c:	f013 f9e2 	bl	8029324 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015f60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015f64:	88fb      	ldrh	r3, [r7, #6]
 8015f66:	429a      	cmp	r2, r3
 8015f68:	f080 8167 	bcs.w	801623a <tcp_write+0x47a>
 8015f6c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	f000 8163 	beq.w	801623a <tcp_write+0x47a>
 8015f74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015f76:	891b      	ldrh	r3, [r3, #8]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	f000 815e 	beq.w	801623a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8015f7e:	88fa      	ldrh	r2, [r7, #6]
 8015f80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015f84:	1ad2      	subs	r2, r2, r3
 8015f86:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015f88:	4293      	cmp	r3, r2
 8015f8a:	bfa8      	it	ge
 8015f8c:	4613      	movge	r3, r2
 8015f8e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8015f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015f92:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015f94:	797b      	ldrb	r3, [r7, #5]
 8015f96:	f003 0301 	and.w	r3, r3, #1
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d027      	beq.n	8015fee <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8015f9e:	f107 0012 	add.w	r0, r7, #18
 8015fa2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015fa4:	8bf9      	ldrh	r1, [r7, #30]
 8015fa6:	2301      	movs	r3, #1
 8015fa8:	9302      	str	r3, [sp, #8]
 8015faa:	797b      	ldrb	r3, [r7, #5]
 8015fac:	9301      	str	r3, [sp, #4]
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	9300      	str	r3, [sp, #0]
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	2000      	movs	r0, #0
 8015fb6:	f7ff fe0f 	bl	8015bd8 <tcp_pbuf_prealloc>
 8015fba:	6578      	str	r0, [r7, #84]	@ 0x54
 8015fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	f000 8225 	beq.w	801640e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8015fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015fc6:	6858      	ldr	r0, [r3, #4]
 8015fc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015fcc:	68ba      	ldr	r2, [r7, #8]
 8015fce:	4413      	add	r3, r2
 8015fd0:	8bfa      	ldrh	r2, [r7, #30]
 8015fd2:	4619      	mov	r1, r3
 8015fd4:	f013 fc49 	bl	802986a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015fd8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8015fda:	f7fb fa63 	bl	80114a4 <pbuf_clen>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	461a      	mov	r2, r3
 8015fe2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015fe6:	4413      	add	r3, r2
 8015fe8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8015fec:	e041      	b.n	8016072 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8015fee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015ff0:	685b      	ldr	r3, [r3, #4]
 8015ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8015ff4:	e002      	b.n	8015ffc <tcp_write+0x23c>
 8015ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8015ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d1f8      	bne.n	8015ff6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016006:	7b1b      	ldrb	r3, [r3, #12]
 8016008:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801600c:	2b00      	cmp	r3, #0
 801600e:	d115      	bne.n	801603c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016012:	685b      	ldr	r3, [r3, #4]
 8016014:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016016:	8952      	ldrh	r2, [r2, #10]
 8016018:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801601a:	68ba      	ldr	r2, [r7, #8]
 801601c:	429a      	cmp	r2, r3
 801601e:	d10d      	bne.n	801603c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016020:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016024:	2b00      	cmp	r3, #0
 8016026:	d006      	beq.n	8016036 <tcp_write+0x276>
 8016028:	4b1c      	ldr	r3, [pc, #112]	@ (801609c <tcp_write+0x2dc>)
 801602a:	f240 2231 	movw	r2, #561	@ 0x231
 801602e:	4922      	ldr	r1, [pc, #136]	@ (80160b8 <tcp_write+0x2f8>)
 8016030:	481c      	ldr	r0, [pc, #112]	@ (80160a4 <tcp_write+0x2e4>)
 8016032:	f013 f977 	bl	8029324 <iprintf>
          extendlen = seglen;
 8016036:	8bfb      	ldrh	r3, [r7, #30]
 8016038:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801603a:	e01a      	b.n	8016072 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801603c:	8bfb      	ldrh	r3, [r7, #30]
 801603e:	2201      	movs	r2, #1
 8016040:	4619      	mov	r1, r3
 8016042:	2000      	movs	r0, #0
 8016044:	f7fa fe8a 	bl	8010d5c <pbuf_alloc>
 8016048:	6578      	str	r0, [r7, #84]	@ 0x54
 801604a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801604c:	2b00      	cmp	r3, #0
 801604e:	f000 81e0 	beq.w	8016412 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016052:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016056:	68ba      	ldr	r2, [r7, #8]
 8016058:	441a      	add	r2, r3
 801605a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801605c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801605e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016060:	f7fb fa20 	bl	80114a4 <pbuf_clen>
 8016064:	4603      	mov	r3, r0
 8016066:	461a      	mov	r2, r3
 8016068:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801606c:	4413      	add	r3, r2
 801606e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016072:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016076:	8bfb      	ldrh	r3, [r7, #30]
 8016078:	4413      	add	r3, r2
 801607a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801607e:	e0dc      	b.n	801623a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8016086:	2b00      	cmp	r3, #0
 8016088:	f000 80d7 	beq.w	801623a <tcp_write+0x47a>
 801608c:	4b03      	ldr	r3, [pc, #12]	@ (801609c <tcp_write+0x2dc>)
 801608e:	f240 224a 	movw	r2, #586	@ 0x24a
 8016092:	490a      	ldr	r1, [pc, #40]	@ (80160bc <tcp_write+0x2fc>)
 8016094:	4803      	ldr	r0, [pc, #12]	@ (80160a4 <tcp_write+0x2e4>)
 8016096:	f013 f945 	bl	8029324 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801609a:	e0ce      	b.n	801623a <tcp_write+0x47a>
 801609c:	0802dc3c 	.word	0x0802dc3c
 80160a0:	0802dddc 	.word	0x0802dddc
 80160a4:	0802dc90 	.word	0x0802dc90
 80160a8:	0802ddf4 	.word	0x0802ddf4
 80160ac:	0802de28 	.word	0x0802de28
 80160b0:	0802de40 	.word	0x0802de40
 80160b4:	0802de60 	.word	0x0802de60
 80160b8:	0802de80 	.word	0x0802de80
 80160bc:	0802deac 	.word	0x0802deac
    struct pbuf *p;
    u16_t left = len - pos;
 80160c0:	88fa      	ldrh	r2, [r7, #6]
 80160c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80160c6:	1ad3      	subs	r3, r2, r3
 80160c8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80160ca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80160ce:	b29b      	uxth	r3, r3
 80160d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80160d2:	1ad3      	subs	r3, r2, r3
 80160d4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80160d6:	8b7a      	ldrh	r2, [r7, #26]
 80160d8:	8bbb      	ldrh	r3, [r7, #28]
 80160da:	4293      	cmp	r3, r2
 80160dc:	bf28      	it	cs
 80160de:	4613      	movcs	r3, r2
 80160e0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80160e2:	797b      	ldrb	r3, [r7, #5]
 80160e4:	f003 0301 	and.w	r3, r3, #1
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d036      	beq.n	801615a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80160ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80160f0:	b29a      	uxth	r2, r3
 80160f2:	8b3b      	ldrh	r3, [r7, #24]
 80160f4:	4413      	add	r3, r2
 80160f6:	b299      	uxth	r1, r3
 80160f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	bf0c      	ite	eq
 80160fe:	2301      	moveq	r3, #1
 8016100:	2300      	movne	r3, #0
 8016102:	b2db      	uxtb	r3, r3
 8016104:	f107 0012 	add.w	r0, r7, #18
 8016108:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801610a:	9302      	str	r3, [sp, #8]
 801610c:	797b      	ldrb	r3, [r7, #5]
 801610e:	9301      	str	r3, [sp, #4]
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	9300      	str	r3, [sp, #0]
 8016114:	4603      	mov	r3, r0
 8016116:	2036      	movs	r0, #54	@ 0x36
 8016118:	f7ff fd5e 	bl	8015bd8 <tcp_pbuf_prealloc>
 801611c:	6338      	str	r0, [r7, #48]	@ 0x30
 801611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016120:	2b00      	cmp	r3, #0
 8016122:	f000 8178 	beq.w	8016416 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016128:	895b      	ldrh	r3, [r3, #10]
 801612a:	8b3a      	ldrh	r2, [r7, #24]
 801612c:	429a      	cmp	r2, r3
 801612e:	d906      	bls.n	801613e <tcp_write+0x37e>
 8016130:	4b8c      	ldr	r3, [pc, #560]	@ (8016364 <tcp_write+0x5a4>)
 8016132:	f240 2266 	movw	r2, #614	@ 0x266
 8016136:	498c      	ldr	r1, [pc, #560]	@ (8016368 <tcp_write+0x5a8>)
 8016138:	488c      	ldr	r0, [pc, #560]	@ (801636c <tcp_write+0x5ac>)
 801613a:	f013 f8f3 	bl	8029324 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016140:	685a      	ldr	r2, [r3, #4]
 8016142:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016146:	18d0      	adds	r0, r2, r3
 8016148:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801614c:	68ba      	ldr	r2, [r7, #8]
 801614e:	4413      	add	r3, r2
 8016150:	8b3a      	ldrh	r2, [r7, #24]
 8016152:	4619      	mov	r1, r3
 8016154:	f013 fb89 	bl	802986a <memcpy>
 8016158:	e02f      	b.n	80161ba <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801615a:	8a7b      	ldrh	r3, [r7, #18]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d006      	beq.n	801616e <tcp_write+0x3ae>
 8016160:	4b80      	ldr	r3, [pc, #512]	@ (8016364 <tcp_write+0x5a4>)
 8016162:	f240 2271 	movw	r2, #625	@ 0x271
 8016166:	4982      	ldr	r1, [pc, #520]	@ (8016370 <tcp_write+0x5b0>)
 8016168:	4880      	ldr	r0, [pc, #512]	@ (801636c <tcp_write+0x5ac>)
 801616a:	f013 f8db 	bl	8029324 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801616e:	8b3b      	ldrh	r3, [r7, #24]
 8016170:	2201      	movs	r2, #1
 8016172:	4619      	mov	r1, r3
 8016174:	2036      	movs	r0, #54	@ 0x36
 8016176:	f7fa fdf1 	bl	8010d5c <pbuf_alloc>
 801617a:	6178      	str	r0, [r7, #20]
 801617c:	697b      	ldr	r3, [r7, #20]
 801617e:	2b00      	cmp	r3, #0
 8016180:	f000 814b 	beq.w	801641a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016184:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016188:	68ba      	ldr	r2, [r7, #8]
 801618a:	441a      	add	r2, r3
 801618c:	697b      	ldr	r3, [r7, #20]
 801618e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016190:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016194:	b29b      	uxth	r3, r3
 8016196:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801619a:	4619      	mov	r1, r3
 801619c:	2036      	movs	r0, #54	@ 0x36
 801619e:	f7fa fddd 	bl	8010d5c <pbuf_alloc>
 80161a2:	6338      	str	r0, [r7, #48]	@ 0x30
 80161a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d103      	bne.n	80161b2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80161aa:	6978      	ldr	r0, [r7, #20]
 80161ac:	f7fb f8ec 	bl	8011388 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80161b0:	e136      	b.n	8016420 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80161b2:	6979      	ldr	r1, [r7, #20]
 80161b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80161b6:	f7fb f9b5 	bl	8011524 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80161ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80161bc:	f7fb f972 	bl	80114a4 <pbuf_clen>
 80161c0:	4603      	mov	r3, r0
 80161c2:	461a      	mov	r2, r3
 80161c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80161c8:	4413      	add	r3, r2
 80161ca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80161ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80161d2:	2b09      	cmp	r3, #9
 80161d4:	d903      	bls.n	80161de <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80161d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80161d8:	f7fb f8d6 	bl	8011388 <pbuf_free>
      goto memerr;
 80161dc:	e120      	b.n	8016420 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80161e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80161e6:	441a      	add	r2, r3
 80161e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80161ec:	9300      	str	r3, [sp, #0]
 80161ee:	4613      	mov	r3, r2
 80161f0:	2200      	movs	r2, #0
 80161f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80161f4:	68f8      	ldr	r0, [r7, #12]
 80161f6:	f7ff fc53 	bl	8015aa0 <tcp_create_segment>
 80161fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80161fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80161fe:	2b00      	cmp	r3, #0
 8016200:	f000 810d 	beq.w	801641e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016206:	2b00      	cmp	r3, #0
 8016208:	d102      	bne.n	8016210 <tcp_write+0x450>
      queue = seg;
 801620a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801620c:	647b      	str	r3, [r7, #68]	@ 0x44
 801620e:	e00c      	b.n	801622a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016212:	2b00      	cmp	r3, #0
 8016214:	d106      	bne.n	8016224 <tcp_write+0x464>
 8016216:	4b53      	ldr	r3, [pc, #332]	@ (8016364 <tcp_write+0x5a4>)
 8016218:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801621c:	4955      	ldr	r1, [pc, #340]	@ (8016374 <tcp_write+0x5b4>)
 801621e:	4853      	ldr	r0, [pc, #332]	@ (801636c <tcp_write+0x5ac>)
 8016220:	f013 f880 	bl	8029324 <iprintf>
      prev_seg->next = seg;
 8016224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016226:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016228:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801622a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801622c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801622e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016232:	8b3b      	ldrh	r3, [r7, #24]
 8016234:	4413      	add	r3, r2
 8016236:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801623a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801623e:	88fb      	ldrh	r3, [r7, #6]
 8016240:	429a      	cmp	r2, r3
 8016242:	f4ff af3d 	bcc.w	80160c0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016246:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016248:	2b00      	cmp	r3, #0
 801624a:	d02c      	beq.n	80162a6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801624c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801624e:	685b      	ldr	r3, [r3, #4]
 8016250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016252:	e01e      	b.n	8016292 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016256:	891a      	ldrh	r2, [r3, #8]
 8016258:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801625a:	4413      	add	r3, r2
 801625c:	b29a      	uxth	r2, r3
 801625e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016260:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d110      	bne.n	801628c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801626a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801626c:	685b      	ldr	r3, [r3, #4]
 801626e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016270:	8952      	ldrh	r2, [r2, #10]
 8016272:	4413      	add	r3, r2
 8016274:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016276:	68b9      	ldr	r1, [r7, #8]
 8016278:	4618      	mov	r0, r3
 801627a:	f013 faf6 	bl	802986a <memcpy>
        p->len += oversize_used;
 801627e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016280:	895a      	ldrh	r2, [r3, #10]
 8016282:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016284:	4413      	add	r3, r2
 8016286:	b29a      	uxth	r2, r3
 8016288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801628a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801628c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016294:	2b00      	cmp	r3, #0
 8016296:	d1dd      	bne.n	8016254 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801629a:	891a      	ldrh	r2, [r3, #8]
 801629c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801629e:	4413      	add	r3, r2
 80162a0:	b29a      	uxth	r2, r3
 80162a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80162a4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80162a6:	8a7a      	ldrh	r2, [r7, #18]
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80162ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d018      	beq.n	80162e6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80162b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d106      	bne.n	80162c8 <tcp_write+0x508>
 80162ba:	4b2a      	ldr	r3, [pc, #168]	@ (8016364 <tcp_write+0x5a4>)
 80162bc:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80162c0:	492d      	ldr	r1, [pc, #180]	@ (8016378 <tcp_write+0x5b8>)
 80162c2:	482a      	ldr	r0, [pc, #168]	@ (801636c <tcp_write+0x5ac>)
 80162c4:	f013 f82e 	bl	8029324 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80162c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80162ca:	685b      	ldr	r3, [r3, #4]
 80162cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80162ce:	4618      	mov	r0, r3
 80162d0:	f7fb f928 	bl	8011524 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80162d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80162d6:	891a      	ldrh	r2, [r3, #8]
 80162d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80162da:	891b      	ldrh	r3, [r3, #8]
 80162dc:	4413      	add	r3, r2
 80162de:	b29a      	uxth	r2, r3
 80162e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80162e2:	811a      	strh	r2, [r3, #8]
 80162e4:	e037      	b.n	8016356 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80162e6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d034      	beq.n	8016356 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80162ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d003      	beq.n	80162fa <tcp_write+0x53a>
 80162f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80162f4:	685b      	ldr	r3, [r3, #4]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d106      	bne.n	8016308 <tcp_write+0x548>
 80162fa:	4b1a      	ldr	r3, [pc, #104]	@ (8016364 <tcp_write+0x5a4>)
 80162fc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8016300:	491e      	ldr	r1, [pc, #120]	@ (801637c <tcp_write+0x5bc>)
 8016302:	481a      	ldr	r0, [pc, #104]	@ (801636c <tcp_write+0x5ac>)
 8016304:	f013 f80e 	bl	8029324 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801630a:	685b      	ldr	r3, [r3, #4]
 801630c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801630e:	e009      	b.n	8016324 <tcp_write+0x564>
      p->tot_len += extendlen;
 8016310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016312:	891a      	ldrh	r2, [r3, #8]
 8016314:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016316:	4413      	add	r3, r2
 8016318:	b29a      	uxth	r2, r3
 801631a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801631c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801631e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d1f1      	bne.n	8016310 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801632c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801632e:	891a      	ldrh	r2, [r3, #8]
 8016330:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016332:	4413      	add	r3, r2
 8016334:	b29a      	uxth	r2, r3
 8016336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016338:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801633a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801633c:	895a      	ldrh	r2, [r3, #10]
 801633e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016340:	4413      	add	r3, r2
 8016342:	b29a      	uxth	r2, r3
 8016344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016346:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801634a:	891a      	ldrh	r2, [r3, #8]
 801634c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801634e:	4413      	add	r3, r2
 8016350:	b29a      	uxth	r2, r3
 8016352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016354:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016358:	2b00      	cmp	r3, #0
 801635a:	d111      	bne.n	8016380 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016360:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016362:	e010      	b.n	8016386 <tcp_write+0x5c6>
 8016364:	0802dc3c 	.word	0x0802dc3c
 8016368:	0802dedc 	.word	0x0802dedc
 801636c:	0802dc90 	.word	0x0802dc90
 8016370:	0802df1c 	.word	0x0802df1c
 8016374:	0802df2c 	.word	0x0802df2c
 8016378:	0802df40 	.word	0x0802df40
 801637c:	0802df78 	.word	0x0802df78
  } else {
    last_unsent->next = queue;
 8016380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016382:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016384:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801638a:	88fb      	ldrh	r3, [r7, #6]
 801638c:	441a      	add	r2, r3
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8016398:	88fb      	ldrh	r3, [r7, #6]
 801639a:	1ad3      	subs	r3, r2, r3
 801639c:	b29a      	uxth	r2, r3
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80163aa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d00e      	beq.n	80163d6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d10a      	bne.n	80163d6 <tcp_write+0x616>
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d106      	bne.n	80163d6 <tcp_write+0x616>
 80163c8:	4b2c      	ldr	r3, [pc, #176]	@ (801647c <tcp_write+0x6bc>)
 80163ca:	f240 3212 	movw	r2, #786	@ 0x312
 80163ce:	492c      	ldr	r1, [pc, #176]	@ (8016480 <tcp_write+0x6c0>)
 80163d0:	482c      	ldr	r0, [pc, #176]	@ (8016484 <tcp_write+0x6c4>)
 80163d2:	f012 ffa7 	bl	8029324 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80163d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d016      	beq.n	801640a <tcp_write+0x64a>
 80163dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80163de:	68db      	ldr	r3, [r3, #12]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d012      	beq.n	801640a <tcp_write+0x64a>
 80163e4:	797b      	ldrb	r3, [r7, #5]
 80163e6:	f003 0302 	and.w	r3, r3, #2
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d10d      	bne.n	801640a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80163ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80163f0:	68db      	ldr	r3, [r3, #12]
 80163f2:	899b      	ldrh	r3, [r3, #12]
 80163f4:	b29c      	uxth	r4, r3
 80163f6:	2008      	movs	r0, #8
 80163f8:	f7f9 facc 	bl	800f994 <lwip_htons>
 80163fc:	4603      	mov	r3, r0
 80163fe:	461a      	mov	r2, r3
 8016400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016402:	68db      	ldr	r3, [r3, #12]
 8016404:	4322      	orrs	r2, r4
 8016406:	b292      	uxth	r2, r2
 8016408:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801640a:	2300      	movs	r3, #0
 801640c:	e031      	b.n	8016472 <tcp_write+0x6b2>
          goto memerr;
 801640e:	bf00      	nop
 8016410:	e006      	b.n	8016420 <tcp_write+0x660>
            goto memerr;
 8016412:	bf00      	nop
 8016414:	e004      	b.n	8016420 <tcp_write+0x660>
        goto memerr;
 8016416:	bf00      	nop
 8016418:	e002      	b.n	8016420 <tcp_write+0x660>
        goto memerr;
 801641a:	bf00      	nop
 801641c:	e000      	b.n	8016420 <tcp_write+0x660>
      goto memerr;
 801641e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	8b5b      	ldrh	r3, [r3, #26]
 8016424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016428:	b29a      	uxth	r2, r3
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801642e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016430:	2b00      	cmp	r3, #0
 8016432:	d002      	beq.n	801643a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016434:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016436:	f7fa ffa7 	bl	8011388 <pbuf_free>
  }
  if (queue != NULL) {
 801643a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801643c:	2b00      	cmp	r3, #0
 801643e:	d002      	beq.n	8016446 <tcp_write+0x686>
    tcp_segs_free(queue);
 8016440:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016442:	f7fc fb71 	bl	8012b28 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801644c:	2b00      	cmp	r3, #0
 801644e:	d00e      	beq.n	801646e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016454:	2b00      	cmp	r3, #0
 8016456:	d10a      	bne.n	801646e <tcp_write+0x6ae>
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801645c:	2b00      	cmp	r3, #0
 801645e:	d106      	bne.n	801646e <tcp_write+0x6ae>
 8016460:	4b06      	ldr	r3, [pc, #24]	@ (801647c <tcp_write+0x6bc>)
 8016462:	f240 3227 	movw	r2, #807	@ 0x327
 8016466:	4906      	ldr	r1, [pc, #24]	@ (8016480 <tcp_write+0x6c0>)
 8016468:	4806      	ldr	r0, [pc, #24]	@ (8016484 <tcp_write+0x6c4>)
 801646a:	f012 ff5b 	bl	8029324 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801646e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8016472:	4618      	mov	r0, r3
 8016474:	375c      	adds	r7, #92	@ 0x5c
 8016476:	46bd      	mov	sp, r7
 8016478:	bd90      	pop	{r4, r7, pc}
 801647a:	bf00      	nop
 801647c:	0802dc3c 	.word	0x0802dc3c
 8016480:	0802dfb0 	.word	0x0802dfb0
 8016484:	0802dc90 	.word	0x0802dc90

08016488 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016488:	b590      	push	{r4, r7, lr}
 801648a:	b08b      	sub	sp, #44	@ 0x2c
 801648c:	af02      	add	r7, sp, #8
 801648e:	6078      	str	r0, [r7, #4]
 8016490:	460b      	mov	r3, r1
 8016492:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016494:	2300      	movs	r3, #0
 8016496:	61fb      	str	r3, [r7, #28]
 8016498:	2300      	movs	r3, #0
 801649a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801649c:	2300      	movs	r3, #0
 801649e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d106      	bne.n	80164b4 <tcp_split_unsent_seg+0x2c>
 80164a6:	4b95      	ldr	r3, [pc, #596]	@ (80166fc <tcp_split_unsent_seg+0x274>)
 80164a8:	f240 324b 	movw	r2, #843	@ 0x34b
 80164ac:	4994      	ldr	r1, [pc, #592]	@ (8016700 <tcp_split_unsent_seg+0x278>)
 80164ae:	4895      	ldr	r0, [pc, #596]	@ (8016704 <tcp_split_unsent_seg+0x27c>)
 80164b0:	f012 ff38 	bl	8029324 <iprintf>

  useg = pcb->unsent;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80164b8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80164ba:	697b      	ldr	r3, [r7, #20]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d102      	bne.n	80164c6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80164c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80164c4:	e116      	b.n	80166f4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80164c6:	887b      	ldrh	r3, [r7, #2]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d109      	bne.n	80164e0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80164cc:	4b8b      	ldr	r3, [pc, #556]	@ (80166fc <tcp_split_unsent_seg+0x274>)
 80164ce:	f240 3253 	movw	r2, #851	@ 0x353
 80164d2:	498d      	ldr	r1, [pc, #564]	@ (8016708 <tcp_split_unsent_seg+0x280>)
 80164d4:	488b      	ldr	r0, [pc, #556]	@ (8016704 <tcp_split_unsent_seg+0x27c>)
 80164d6:	f012 ff25 	bl	8029324 <iprintf>
    return ERR_VAL;
 80164da:	f06f 0305 	mvn.w	r3, #5
 80164de:	e109      	b.n	80166f4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80164e0:	697b      	ldr	r3, [r7, #20]
 80164e2:	891b      	ldrh	r3, [r3, #8]
 80164e4:	887a      	ldrh	r2, [r7, #2]
 80164e6:	429a      	cmp	r2, r3
 80164e8:	d301      	bcc.n	80164ee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80164ea:	2300      	movs	r3, #0
 80164ec:	e102      	b.n	80166f4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80164f2:	887a      	ldrh	r2, [r7, #2]
 80164f4:	429a      	cmp	r2, r3
 80164f6:	d906      	bls.n	8016506 <tcp_split_unsent_seg+0x7e>
 80164f8:	4b80      	ldr	r3, [pc, #512]	@ (80166fc <tcp_split_unsent_seg+0x274>)
 80164fa:	f240 325b 	movw	r2, #859	@ 0x35b
 80164fe:	4983      	ldr	r1, [pc, #524]	@ (801670c <tcp_split_unsent_seg+0x284>)
 8016500:	4880      	ldr	r0, [pc, #512]	@ (8016704 <tcp_split_unsent_seg+0x27c>)
 8016502:	f012 ff0f 	bl	8029324 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016506:	697b      	ldr	r3, [r7, #20]
 8016508:	891b      	ldrh	r3, [r3, #8]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d106      	bne.n	801651c <tcp_split_unsent_seg+0x94>
 801650e:	4b7b      	ldr	r3, [pc, #492]	@ (80166fc <tcp_split_unsent_seg+0x274>)
 8016510:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8016514:	497e      	ldr	r1, [pc, #504]	@ (8016710 <tcp_split_unsent_seg+0x288>)
 8016516:	487b      	ldr	r0, [pc, #492]	@ (8016704 <tcp_split_unsent_seg+0x27c>)
 8016518:	f012 ff04 	bl	8029324 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801651c:	697b      	ldr	r3, [r7, #20]
 801651e:	7a9b      	ldrb	r3, [r3, #10]
 8016520:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016522:	7bfb      	ldrb	r3, [r7, #15]
 8016524:	009b      	lsls	r3, r3, #2
 8016526:	b2db      	uxtb	r3, r3
 8016528:	f003 0304 	and.w	r3, r3, #4
 801652c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801652e:	697b      	ldr	r3, [r7, #20]
 8016530:	891a      	ldrh	r2, [r3, #8]
 8016532:	887b      	ldrh	r3, [r7, #2]
 8016534:	1ad3      	subs	r3, r2, r3
 8016536:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016538:	7bbb      	ldrb	r3, [r7, #14]
 801653a:	b29a      	uxth	r2, r3
 801653c:	89bb      	ldrh	r3, [r7, #12]
 801653e:	4413      	add	r3, r2
 8016540:	b29b      	uxth	r3, r3
 8016542:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016546:	4619      	mov	r1, r3
 8016548:	2036      	movs	r0, #54	@ 0x36
 801654a:	f7fa fc07 	bl	8010d5c <pbuf_alloc>
 801654e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016550:	693b      	ldr	r3, [r7, #16]
 8016552:	2b00      	cmp	r3, #0
 8016554:	f000 80b7 	beq.w	80166c6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016558:	697b      	ldr	r3, [r7, #20]
 801655a:	685b      	ldr	r3, [r3, #4]
 801655c:	891a      	ldrh	r2, [r3, #8]
 801655e:	697b      	ldr	r3, [r7, #20]
 8016560:	891b      	ldrh	r3, [r3, #8]
 8016562:	1ad3      	subs	r3, r2, r3
 8016564:	b29a      	uxth	r2, r3
 8016566:	887b      	ldrh	r3, [r7, #2]
 8016568:	4413      	add	r3, r2
 801656a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801656c:	697b      	ldr	r3, [r7, #20]
 801656e:	6858      	ldr	r0, [r3, #4]
 8016570:	693b      	ldr	r3, [r7, #16]
 8016572:	685a      	ldr	r2, [r3, #4]
 8016574:	7bbb      	ldrb	r3, [r7, #14]
 8016576:	18d1      	adds	r1, r2, r3
 8016578:	897b      	ldrh	r3, [r7, #10]
 801657a:	89ba      	ldrh	r2, [r7, #12]
 801657c:	f7fb f90a 	bl	8011794 <pbuf_copy_partial>
 8016580:	4603      	mov	r3, r0
 8016582:	461a      	mov	r2, r3
 8016584:	89bb      	ldrh	r3, [r7, #12]
 8016586:	4293      	cmp	r3, r2
 8016588:	f040 809f 	bne.w	80166ca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801658c:	697b      	ldr	r3, [r7, #20]
 801658e:	68db      	ldr	r3, [r3, #12]
 8016590:	899b      	ldrh	r3, [r3, #12]
 8016592:	b29b      	uxth	r3, r3
 8016594:	4618      	mov	r0, r3
 8016596:	f7f9 f9fd 	bl	800f994 <lwip_htons>
 801659a:	4603      	mov	r3, r0
 801659c:	b2db      	uxtb	r3, r3
 801659e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80165a2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80165a4:	2300      	movs	r3, #0
 80165a6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80165a8:	7efb      	ldrb	r3, [r7, #27]
 80165aa:	f003 0308 	and.w	r3, r3, #8
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d007      	beq.n	80165c2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80165b2:	7efb      	ldrb	r3, [r7, #27]
 80165b4:	f023 0308 	bic.w	r3, r3, #8
 80165b8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80165ba:	7ebb      	ldrb	r3, [r7, #26]
 80165bc:	f043 0308 	orr.w	r3, r3, #8
 80165c0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80165c2:	7efb      	ldrb	r3, [r7, #27]
 80165c4:	f003 0301 	and.w	r3, r3, #1
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d007      	beq.n	80165dc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80165cc:	7efb      	ldrb	r3, [r7, #27]
 80165ce:	f023 0301 	bic.w	r3, r3, #1
 80165d2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80165d4:	7ebb      	ldrb	r3, [r7, #26]
 80165d6:	f043 0301 	orr.w	r3, r3, #1
 80165da:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80165dc:	697b      	ldr	r3, [r7, #20]
 80165de:	68db      	ldr	r3, [r3, #12]
 80165e0:	685b      	ldr	r3, [r3, #4]
 80165e2:	4618      	mov	r0, r3
 80165e4:	f7f9 f9eb 	bl	800f9be <lwip_htonl>
 80165e8:	4602      	mov	r2, r0
 80165ea:	887b      	ldrh	r3, [r7, #2]
 80165ec:	18d1      	adds	r1, r2, r3
 80165ee:	7eba      	ldrb	r2, [r7, #26]
 80165f0:	7bfb      	ldrb	r3, [r7, #15]
 80165f2:	9300      	str	r3, [sp, #0]
 80165f4:	460b      	mov	r3, r1
 80165f6:	6939      	ldr	r1, [r7, #16]
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f7ff fa51 	bl	8015aa0 <tcp_create_segment>
 80165fe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016600:	69fb      	ldr	r3, [r7, #28]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d063      	beq.n	80166ce <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016606:	697b      	ldr	r3, [r7, #20]
 8016608:	685b      	ldr	r3, [r3, #4]
 801660a:	4618      	mov	r0, r3
 801660c:	f7fa ff4a 	bl	80114a4 <pbuf_clen>
 8016610:	4603      	mov	r3, r0
 8016612:	461a      	mov	r2, r3
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801661a:	1a9b      	subs	r3, r3, r2
 801661c:	b29a      	uxth	r2, r3
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	6858      	ldr	r0, [r3, #4]
 8016628:	697b      	ldr	r3, [r7, #20]
 801662a:	685b      	ldr	r3, [r3, #4]
 801662c:	891a      	ldrh	r2, [r3, #8]
 801662e:	89bb      	ldrh	r3, [r7, #12]
 8016630:	1ad3      	subs	r3, r2, r3
 8016632:	b29b      	uxth	r3, r3
 8016634:	4619      	mov	r1, r3
 8016636:	f7fa fcef 	bl	8011018 <pbuf_realloc>
  useg->len -= remainder;
 801663a:	697b      	ldr	r3, [r7, #20]
 801663c:	891a      	ldrh	r2, [r3, #8]
 801663e:	89bb      	ldrh	r3, [r7, #12]
 8016640:	1ad3      	subs	r3, r2, r3
 8016642:	b29a      	uxth	r2, r3
 8016644:	697b      	ldr	r3, [r7, #20]
 8016646:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016648:	697b      	ldr	r3, [r7, #20]
 801664a:	68db      	ldr	r3, [r3, #12]
 801664c:	899b      	ldrh	r3, [r3, #12]
 801664e:	b29c      	uxth	r4, r3
 8016650:	7efb      	ldrb	r3, [r7, #27]
 8016652:	b29b      	uxth	r3, r3
 8016654:	4618      	mov	r0, r3
 8016656:	f7f9 f99d 	bl	800f994 <lwip_htons>
 801665a:	4603      	mov	r3, r0
 801665c:	461a      	mov	r2, r3
 801665e:	697b      	ldr	r3, [r7, #20]
 8016660:	68db      	ldr	r3, [r3, #12]
 8016662:	4322      	orrs	r2, r4
 8016664:	b292      	uxth	r2, r2
 8016666:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016668:	697b      	ldr	r3, [r7, #20]
 801666a:	685b      	ldr	r3, [r3, #4]
 801666c:	4618      	mov	r0, r3
 801666e:	f7fa ff19 	bl	80114a4 <pbuf_clen>
 8016672:	4603      	mov	r3, r0
 8016674:	461a      	mov	r2, r3
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801667c:	4413      	add	r3, r2
 801667e:	b29a      	uxth	r2, r3
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016686:	69fb      	ldr	r3, [r7, #28]
 8016688:	685b      	ldr	r3, [r3, #4]
 801668a:	4618      	mov	r0, r3
 801668c:	f7fa ff0a 	bl	80114a4 <pbuf_clen>
 8016690:	4603      	mov	r3, r0
 8016692:	461a      	mov	r2, r3
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801669a:	4413      	add	r3, r2
 801669c:	b29a      	uxth	r2, r3
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80166a4:	697b      	ldr	r3, [r7, #20]
 80166a6:	681a      	ldr	r2, [r3, #0]
 80166a8:	69fb      	ldr	r3, [r7, #28]
 80166aa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80166ac:	697b      	ldr	r3, [r7, #20]
 80166ae:	69fa      	ldr	r2, [r7, #28]
 80166b0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80166b2:	69fb      	ldr	r3, [r7, #28]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d103      	bne.n	80166c2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2200      	movs	r2, #0
 80166be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80166c2:	2300      	movs	r3, #0
 80166c4:	e016      	b.n	80166f4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80166c6:	bf00      	nop
 80166c8:	e002      	b.n	80166d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80166ca:	bf00      	nop
 80166cc:	e000      	b.n	80166d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80166ce:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80166d0:	69fb      	ldr	r3, [r7, #28]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d006      	beq.n	80166e4 <tcp_split_unsent_seg+0x25c>
 80166d6:	4b09      	ldr	r3, [pc, #36]	@ (80166fc <tcp_split_unsent_seg+0x274>)
 80166d8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80166dc:	490d      	ldr	r1, [pc, #52]	@ (8016714 <tcp_split_unsent_seg+0x28c>)
 80166de:	4809      	ldr	r0, [pc, #36]	@ (8016704 <tcp_split_unsent_seg+0x27c>)
 80166e0:	f012 fe20 	bl	8029324 <iprintf>
  if (p != NULL) {
 80166e4:	693b      	ldr	r3, [r7, #16]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d002      	beq.n	80166f0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80166ea:	6938      	ldr	r0, [r7, #16]
 80166ec:	f7fa fe4c 	bl	8011388 <pbuf_free>
  }

  return ERR_MEM;
 80166f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	3724      	adds	r7, #36	@ 0x24
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd90      	pop	{r4, r7, pc}
 80166fc:	0802dc3c 	.word	0x0802dc3c
 8016700:	0802dfd0 	.word	0x0802dfd0
 8016704:	0802dc90 	.word	0x0802dc90
 8016708:	0802dff4 	.word	0x0802dff4
 801670c:	0802e018 	.word	0x0802e018
 8016710:	0802e028 	.word	0x0802e028
 8016714:	0802e038 	.word	0x0802e038

08016718 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016718:	b590      	push	{r4, r7, lr}
 801671a:	b085      	sub	sp, #20
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d106      	bne.n	8016734 <tcp_send_fin+0x1c>
 8016726:	4b21      	ldr	r3, [pc, #132]	@ (80167ac <tcp_send_fin+0x94>)
 8016728:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801672c:	4920      	ldr	r1, [pc, #128]	@ (80167b0 <tcp_send_fin+0x98>)
 801672e:	4821      	ldr	r0, [pc, #132]	@ (80167b4 <tcp_send_fin+0x9c>)
 8016730:	f012 fdf8 	bl	8029324 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016738:	2b00      	cmp	r3, #0
 801673a:	d02e      	beq.n	801679a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016740:	60fb      	str	r3, [r7, #12]
 8016742:	e002      	b.n	801674a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d1f8      	bne.n	8016744 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	68db      	ldr	r3, [r3, #12]
 8016756:	899b      	ldrh	r3, [r3, #12]
 8016758:	b29b      	uxth	r3, r3
 801675a:	4618      	mov	r0, r3
 801675c:	f7f9 f91a 	bl	800f994 <lwip_htons>
 8016760:	4603      	mov	r3, r0
 8016762:	b2db      	uxtb	r3, r3
 8016764:	f003 0307 	and.w	r3, r3, #7
 8016768:	2b00      	cmp	r3, #0
 801676a:	d116      	bne.n	801679a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	68db      	ldr	r3, [r3, #12]
 8016770:	899b      	ldrh	r3, [r3, #12]
 8016772:	b29c      	uxth	r4, r3
 8016774:	2001      	movs	r0, #1
 8016776:	f7f9 f90d 	bl	800f994 <lwip_htons>
 801677a:	4603      	mov	r3, r0
 801677c:	461a      	mov	r2, r3
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	68db      	ldr	r3, [r3, #12]
 8016782:	4322      	orrs	r2, r4
 8016784:	b292      	uxth	r2, r2
 8016786:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	8b5b      	ldrh	r3, [r3, #26]
 801678c:	f043 0320 	orr.w	r3, r3, #32
 8016790:	b29a      	uxth	r2, r3
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016796:	2300      	movs	r3, #0
 8016798:	e004      	b.n	80167a4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801679a:	2101      	movs	r1, #1
 801679c:	6878      	ldr	r0, [r7, #4]
 801679e:	f000 f80b 	bl	80167b8 <tcp_enqueue_flags>
 80167a2:	4603      	mov	r3, r0
}
 80167a4:	4618      	mov	r0, r3
 80167a6:	3714      	adds	r7, #20
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd90      	pop	{r4, r7, pc}
 80167ac:	0802dc3c 	.word	0x0802dc3c
 80167b0:	0802e044 	.word	0x0802e044
 80167b4:	0802dc90 	.word	0x0802dc90

080167b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	b08a      	sub	sp, #40	@ 0x28
 80167bc:	af02      	add	r7, sp, #8
 80167be:	6078      	str	r0, [r7, #4]
 80167c0:	460b      	mov	r3, r1
 80167c2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80167c4:	2300      	movs	r3, #0
 80167c6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80167c8:	2300      	movs	r3, #0
 80167ca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80167cc:	78fb      	ldrb	r3, [r7, #3]
 80167ce:	f003 0303 	and.w	r3, r3, #3
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d106      	bne.n	80167e4 <tcp_enqueue_flags+0x2c>
 80167d6:	4b67      	ldr	r3, [pc, #412]	@ (8016974 <tcp_enqueue_flags+0x1bc>)
 80167d8:	f240 4211 	movw	r2, #1041	@ 0x411
 80167dc:	4966      	ldr	r1, [pc, #408]	@ (8016978 <tcp_enqueue_flags+0x1c0>)
 80167de:	4867      	ldr	r0, [pc, #412]	@ (801697c <tcp_enqueue_flags+0x1c4>)
 80167e0:	f012 fda0 	bl	8029324 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d106      	bne.n	80167f8 <tcp_enqueue_flags+0x40>
 80167ea:	4b62      	ldr	r3, [pc, #392]	@ (8016974 <tcp_enqueue_flags+0x1bc>)
 80167ec:	f240 4213 	movw	r2, #1043	@ 0x413
 80167f0:	4963      	ldr	r1, [pc, #396]	@ (8016980 <tcp_enqueue_flags+0x1c8>)
 80167f2:	4862      	ldr	r0, [pc, #392]	@ (801697c <tcp_enqueue_flags+0x1c4>)
 80167f4:	f012 fd96 	bl	8029324 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80167f8:	78fb      	ldrb	r3, [r7, #3]
 80167fa:	f003 0302 	and.w	r3, r3, #2
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d001      	beq.n	8016806 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016802:	2301      	movs	r3, #1
 8016804:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016806:	7ffb      	ldrb	r3, [r7, #31]
 8016808:	009b      	lsls	r3, r3, #2
 801680a:	b2db      	uxtb	r3, r3
 801680c:	f003 0304 	and.w	r3, r3, #4
 8016810:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016812:	7dfb      	ldrb	r3, [r7, #23]
 8016814:	b29b      	uxth	r3, r3
 8016816:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801681a:	4619      	mov	r1, r3
 801681c:	2036      	movs	r0, #54	@ 0x36
 801681e:	f7fa fa9d 	bl	8010d5c <pbuf_alloc>
 8016822:	6138      	str	r0, [r7, #16]
 8016824:	693b      	ldr	r3, [r7, #16]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d109      	bne.n	801683e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	8b5b      	ldrh	r3, [r3, #26]
 801682e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016832:	b29a      	uxth	r2, r3
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016838:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801683c:	e095      	b.n	801696a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801683e:	693b      	ldr	r3, [r7, #16]
 8016840:	895a      	ldrh	r2, [r3, #10]
 8016842:	7dfb      	ldrb	r3, [r7, #23]
 8016844:	b29b      	uxth	r3, r3
 8016846:	429a      	cmp	r2, r3
 8016848:	d206      	bcs.n	8016858 <tcp_enqueue_flags+0xa0>
 801684a:	4b4a      	ldr	r3, [pc, #296]	@ (8016974 <tcp_enqueue_flags+0x1bc>)
 801684c:	f240 4239 	movw	r2, #1081	@ 0x439
 8016850:	494c      	ldr	r1, [pc, #304]	@ (8016984 <tcp_enqueue_flags+0x1cc>)
 8016852:	484a      	ldr	r0, [pc, #296]	@ (801697c <tcp_enqueue_flags+0x1c4>)
 8016854:	f012 fd66 	bl	8029324 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801685c:	78fa      	ldrb	r2, [r7, #3]
 801685e:	7ffb      	ldrb	r3, [r7, #31]
 8016860:	9300      	str	r3, [sp, #0]
 8016862:	460b      	mov	r3, r1
 8016864:	6939      	ldr	r1, [r7, #16]
 8016866:	6878      	ldr	r0, [r7, #4]
 8016868:	f7ff f91a 	bl	8015aa0 <tcp_create_segment>
 801686c:	60f8      	str	r0, [r7, #12]
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d109      	bne.n	8016888 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	8b5b      	ldrh	r3, [r3, #26]
 8016878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801687c:	b29a      	uxth	r2, r3
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016886:	e070      	b.n	801696a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	68db      	ldr	r3, [r3, #12]
 801688c:	f003 0303 	and.w	r3, r3, #3
 8016890:	2b00      	cmp	r3, #0
 8016892:	d006      	beq.n	80168a2 <tcp_enqueue_flags+0xea>
 8016894:	4b37      	ldr	r3, [pc, #220]	@ (8016974 <tcp_enqueue_flags+0x1bc>)
 8016896:	f240 4242 	movw	r2, #1090	@ 0x442
 801689a:	493b      	ldr	r1, [pc, #236]	@ (8016988 <tcp_enqueue_flags+0x1d0>)
 801689c:	4837      	ldr	r0, [pc, #220]	@ (801697c <tcp_enqueue_flags+0x1c4>)
 801689e:	f012 fd41 	bl	8029324 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	891b      	ldrh	r3, [r3, #8]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d006      	beq.n	80168b8 <tcp_enqueue_flags+0x100>
 80168aa:	4b32      	ldr	r3, [pc, #200]	@ (8016974 <tcp_enqueue_flags+0x1bc>)
 80168ac:	f240 4243 	movw	r2, #1091	@ 0x443
 80168b0:	4936      	ldr	r1, [pc, #216]	@ (801698c <tcp_enqueue_flags+0x1d4>)
 80168b2:	4832      	ldr	r0, [pc, #200]	@ (801697c <tcp_enqueue_flags+0x1c4>)
 80168b4:	f012 fd36 	bl	8029324 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d103      	bne.n	80168c8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	68fa      	ldr	r2, [r7, #12]
 80168c4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80168c6:	e00d      	b.n	80168e4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168cc:	61bb      	str	r3, [r7, #24]
 80168ce:	e002      	b.n	80168d6 <tcp_enqueue_flags+0x11e>
 80168d0:	69bb      	ldr	r3, [r7, #24]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	61bb      	str	r3, [r7, #24]
 80168d6:	69bb      	ldr	r3, [r7, #24]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d1f8      	bne.n	80168d0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80168de:	69bb      	ldr	r3, [r7, #24]
 80168e0:	68fa      	ldr	r2, [r7, #12]
 80168e2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2200      	movs	r2, #0
 80168e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80168ec:	78fb      	ldrb	r3, [r7, #3]
 80168ee:	f003 0302 	and.w	r3, r3, #2
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d104      	bne.n	8016900 <tcp_enqueue_flags+0x148>
 80168f6:	78fb      	ldrb	r3, [r7, #3]
 80168f8:	f003 0301 	and.w	r3, r3, #1
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d004      	beq.n	801690a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016904:	1c5a      	adds	r2, r3, #1
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801690a:	78fb      	ldrb	r3, [r7, #3]
 801690c:	f003 0301 	and.w	r3, r3, #1
 8016910:	2b00      	cmp	r3, #0
 8016912:	d006      	beq.n	8016922 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	8b5b      	ldrh	r3, [r3, #26]
 8016918:	f043 0320 	orr.w	r3, r3, #32
 801691c:	b29a      	uxth	r2, r3
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	685b      	ldr	r3, [r3, #4]
 8016926:	4618      	mov	r0, r3
 8016928:	f7fa fdbc 	bl	80114a4 <pbuf_clen>
 801692c:	4603      	mov	r3, r0
 801692e:	461a      	mov	r2, r3
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016936:	4413      	add	r3, r2
 8016938:	b29a      	uxth	r2, r3
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016946:	2b00      	cmp	r3, #0
 8016948:	d00e      	beq.n	8016968 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801694e:	2b00      	cmp	r3, #0
 8016950:	d10a      	bne.n	8016968 <tcp_enqueue_flags+0x1b0>
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016956:	2b00      	cmp	r3, #0
 8016958:	d106      	bne.n	8016968 <tcp_enqueue_flags+0x1b0>
 801695a:	4b06      	ldr	r3, [pc, #24]	@ (8016974 <tcp_enqueue_flags+0x1bc>)
 801695c:	f240 4265 	movw	r2, #1125	@ 0x465
 8016960:	490b      	ldr	r1, [pc, #44]	@ (8016990 <tcp_enqueue_flags+0x1d8>)
 8016962:	4806      	ldr	r0, [pc, #24]	@ (801697c <tcp_enqueue_flags+0x1c4>)
 8016964:	f012 fcde 	bl	8029324 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016968:	2300      	movs	r3, #0
}
 801696a:	4618      	mov	r0, r3
 801696c:	3720      	adds	r7, #32
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
 8016972:	bf00      	nop
 8016974:	0802dc3c 	.word	0x0802dc3c
 8016978:	0802e060 	.word	0x0802e060
 801697c:	0802dc90 	.word	0x0802dc90
 8016980:	0802e0b8 	.word	0x0802e0b8
 8016984:	0802e0d8 	.word	0x0802e0d8
 8016988:	0802e114 	.word	0x0802e114
 801698c:	0802e12c 	.word	0x0802e12c
 8016990:	0802e158 	.word	0x0802e158

08016994 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016994:	b5b0      	push	{r4, r5, r7, lr}
 8016996:	b08a      	sub	sp, #40	@ 0x28
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d106      	bne.n	80169b0 <tcp_output+0x1c>
 80169a2:	4b8a      	ldr	r3, [pc, #552]	@ (8016bcc <tcp_output+0x238>)
 80169a4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80169a8:	4989      	ldr	r1, [pc, #548]	@ (8016bd0 <tcp_output+0x23c>)
 80169aa:	488a      	ldr	r0, [pc, #552]	@ (8016bd4 <tcp_output+0x240>)
 80169ac:	f012 fcba 	bl	8029324 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	7d1b      	ldrb	r3, [r3, #20]
 80169b4:	2b01      	cmp	r3, #1
 80169b6:	d106      	bne.n	80169c6 <tcp_output+0x32>
 80169b8:	4b84      	ldr	r3, [pc, #528]	@ (8016bcc <tcp_output+0x238>)
 80169ba:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80169be:	4986      	ldr	r1, [pc, #536]	@ (8016bd8 <tcp_output+0x244>)
 80169c0:	4884      	ldr	r0, [pc, #528]	@ (8016bd4 <tcp_output+0x240>)
 80169c2:	f012 fcaf 	bl	8029324 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80169c6:	4b85      	ldr	r3, [pc, #532]	@ (8016bdc <tcp_output+0x248>)
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	687a      	ldr	r2, [r7, #4]
 80169cc:	429a      	cmp	r2, r3
 80169ce:	d101      	bne.n	80169d4 <tcp_output+0x40>
    return ERR_OK;
 80169d0:	2300      	movs	r3, #0
 80169d2:	e1ce      	b.n	8016d72 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80169e0:	4293      	cmp	r3, r2
 80169e2:	bf28      	it	cs
 80169e4:	4613      	movcs	r3, r2
 80169e6:	b29b      	uxth	r3, r3
 80169e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80169ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80169f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d10b      	bne.n	8016a0e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	8b5b      	ldrh	r3, [r3, #26]
 80169fa:	f003 0302 	and.w	r3, r3, #2
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	f000 81aa 	beq.w	8016d58 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	f000 fdcb 	bl	80175a0 <tcp_send_empty_ack>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	e1b1      	b.n	8016d72 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016a0e:	6879      	ldr	r1, [r7, #4]
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	3304      	adds	r3, #4
 8016a14:	461a      	mov	r2, r3
 8016a16:	6878      	ldr	r0, [r7, #4]
 8016a18:	f7ff f826 	bl	8015a68 <tcp_route>
 8016a1c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016a1e:	697b      	ldr	r3, [r7, #20]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d102      	bne.n	8016a2a <tcp_output+0x96>
    return ERR_RTE;
 8016a24:	f06f 0303 	mvn.w	r3, #3
 8016a28:	e1a3      	b.n	8016d72 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d003      	beq.n	8016a38 <tcp_output+0xa4>
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d111      	bne.n	8016a5c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016a38:	697b      	ldr	r3, [r7, #20]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d002      	beq.n	8016a44 <tcp_output+0xb0>
 8016a3e:	697b      	ldr	r3, [r7, #20]
 8016a40:	3304      	adds	r3, #4
 8016a42:	e000      	b.n	8016a46 <tcp_output+0xb2>
 8016a44:	2300      	movs	r3, #0
 8016a46:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016a48:	693b      	ldr	r3, [r7, #16]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d102      	bne.n	8016a54 <tcp_output+0xc0>
      return ERR_RTE;
 8016a4e:	f06f 0303 	mvn.w	r3, #3
 8016a52:	e18e      	b.n	8016d72 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016a54:	693b      	ldr	r3, [r7, #16]
 8016a56:	681a      	ldr	r2, [r3, #0]
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a5e:	68db      	ldr	r3, [r3, #12]
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	4618      	mov	r0, r3
 8016a64:	f7f8 ffab 	bl	800f9be <lwip_htonl>
 8016a68:	4602      	mov	r2, r0
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016a6e:	1ad3      	subs	r3, r2, r3
 8016a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a72:	8912      	ldrh	r2, [r2, #8]
 8016a74:	4413      	add	r3, r2
 8016a76:	69ba      	ldr	r2, [r7, #24]
 8016a78:	429a      	cmp	r2, r3
 8016a7a:	d227      	bcs.n	8016acc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016a82:	461a      	mov	r2, r3
 8016a84:	69bb      	ldr	r3, [r7, #24]
 8016a86:	4293      	cmp	r3, r2
 8016a88:	d114      	bne.n	8016ab4 <tcp_output+0x120>
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d110      	bne.n	8016ab4 <tcp_output+0x120>
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d10b      	bne.n	8016ab4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	2200      	movs	r2, #0
 8016aa0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	2201      	movs	r2, #1
 8016aa8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	2200      	movs	r2, #0
 8016ab0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	8b5b      	ldrh	r3, [r3, #26]
 8016ab8:	f003 0302 	and.w	r3, r3, #2
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	f000 814d 	beq.w	8016d5c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016ac2:	6878      	ldr	r0, [r7, #4]
 8016ac4:	f000 fd6c 	bl	80175a0 <tcp_send_empty_ack>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	e152      	b.n	8016d72 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2200      	movs	r2, #0
 8016ad0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ad8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016ada:	6a3b      	ldr	r3, [r7, #32]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	f000 811c 	beq.w	8016d1a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016ae2:	e002      	b.n	8016aea <tcp_output+0x156>
 8016ae4:	6a3b      	ldr	r3, [r7, #32]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	623b      	str	r3, [r7, #32]
 8016aea:	6a3b      	ldr	r3, [r7, #32]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d1f8      	bne.n	8016ae4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016af2:	e112      	b.n	8016d1a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016af6:	68db      	ldr	r3, [r3, #12]
 8016af8:	899b      	ldrh	r3, [r3, #12]
 8016afa:	b29b      	uxth	r3, r3
 8016afc:	4618      	mov	r0, r3
 8016afe:	f7f8 ff49 	bl	800f994 <lwip_htons>
 8016b02:	4603      	mov	r3, r0
 8016b04:	b2db      	uxtb	r3, r3
 8016b06:	f003 0304 	and.w	r3, r3, #4
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d006      	beq.n	8016b1c <tcp_output+0x188>
 8016b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8016bcc <tcp_output+0x238>)
 8016b10:	f240 5236 	movw	r2, #1334	@ 0x536
 8016b14:	4932      	ldr	r1, [pc, #200]	@ (8016be0 <tcp_output+0x24c>)
 8016b16:	482f      	ldr	r0, [pc, #188]	@ (8016bd4 <tcp_output+0x240>)
 8016b18:	f012 fc04 	bl	8029324 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d01f      	beq.n	8016b64 <tcp_output+0x1d0>
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	8b5b      	ldrh	r3, [r3, #26]
 8016b28:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d119      	bne.n	8016b64 <tcp_output+0x1d0>
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d00b      	beq.n	8016b50 <tcp_output+0x1bc>
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d110      	bne.n	8016b64 <tcp_output+0x1d0>
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b46:	891a      	ldrh	r2, [r3, #8]
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016b4c:	429a      	cmp	r2, r3
 8016b4e:	d209      	bcs.n	8016b64 <tcp_output+0x1d0>
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d004      	beq.n	8016b64 <tcp_output+0x1d0>
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016b60:	2b08      	cmp	r3, #8
 8016b62:	d901      	bls.n	8016b68 <tcp_output+0x1d4>
 8016b64:	2301      	movs	r3, #1
 8016b66:	e000      	b.n	8016b6a <tcp_output+0x1d6>
 8016b68:	2300      	movs	r3, #0
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d106      	bne.n	8016b7c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	8b5b      	ldrh	r3, [r3, #26]
 8016b72:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	f000 80e4 	beq.w	8016d44 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	7d1b      	ldrb	r3, [r3, #20]
 8016b80:	2b02      	cmp	r3, #2
 8016b82:	d00d      	beq.n	8016ba0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b86:	68db      	ldr	r3, [r3, #12]
 8016b88:	899b      	ldrh	r3, [r3, #12]
 8016b8a:	b29c      	uxth	r4, r3
 8016b8c:	2010      	movs	r0, #16
 8016b8e:	f7f8 ff01 	bl	800f994 <lwip_htons>
 8016b92:	4603      	mov	r3, r0
 8016b94:	461a      	mov	r2, r3
 8016b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b98:	68db      	ldr	r3, [r3, #12]
 8016b9a:	4322      	orrs	r2, r4
 8016b9c:	b292      	uxth	r2, r2
 8016b9e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016ba0:	697a      	ldr	r2, [r7, #20]
 8016ba2:	6879      	ldr	r1, [r7, #4]
 8016ba4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016ba6:	f000 f909 	bl	8016dbc <tcp_output_segment>
 8016baa:	4603      	mov	r3, r0
 8016bac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d016      	beq.n	8016be4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	8b5b      	ldrh	r3, [r3, #26]
 8016bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016bbe:	b29a      	uxth	r2, r3
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	835a      	strh	r2, [r3, #26]
      return err;
 8016bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016bc8:	e0d3      	b.n	8016d72 <tcp_output+0x3de>
 8016bca:	bf00      	nop
 8016bcc:	0802dc3c 	.word	0x0802dc3c
 8016bd0:	0802e180 	.word	0x0802e180
 8016bd4:	0802dc90 	.word	0x0802dc90
 8016bd8:	0802e198 	.word	0x0802e198
 8016bdc:	20042600 	.word	0x20042600
 8016be0:	0802e1c0 	.word	0x0802e1c0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016be6:	681a      	ldr	r2, [r3, #0]
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	7d1b      	ldrb	r3, [r3, #20]
 8016bf0:	2b02      	cmp	r3, #2
 8016bf2:	d006      	beq.n	8016c02 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	8b5b      	ldrh	r3, [r3, #26]
 8016bf8:	f023 0303 	bic.w	r3, r3, #3
 8016bfc:	b29a      	uxth	r2, r3
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c04:	68db      	ldr	r3, [r3, #12]
 8016c06:	685b      	ldr	r3, [r3, #4]
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f7f8 fed8 	bl	800f9be <lwip_htonl>
 8016c0e:	4604      	mov	r4, r0
 8016c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c12:	891b      	ldrh	r3, [r3, #8]
 8016c14:	461d      	mov	r5, r3
 8016c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c18:	68db      	ldr	r3, [r3, #12]
 8016c1a:	899b      	ldrh	r3, [r3, #12]
 8016c1c:	b29b      	uxth	r3, r3
 8016c1e:	4618      	mov	r0, r3
 8016c20:	f7f8 feb8 	bl	800f994 <lwip_htons>
 8016c24:	4603      	mov	r3, r0
 8016c26:	b2db      	uxtb	r3, r3
 8016c28:	f003 0303 	and.w	r3, r3, #3
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d001      	beq.n	8016c34 <tcp_output+0x2a0>
 8016c30:	2301      	movs	r3, #1
 8016c32:	e000      	b.n	8016c36 <tcp_output+0x2a2>
 8016c34:	2300      	movs	r3, #0
 8016c36:	442b      	add	r3, r5
 8016c38:	4423      	add	r3, r4
 8016c3a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	1ad3      	subs	r3, r2, r3
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	da02      	bge.n	8016c4e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	68ba      	ldr	r2, [r7, #8]
 8016c4c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c50:	891b      	ldrh	r3, [r3, #8]
 8016c52:	461c      	mov	r4, r3
 8016c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c56:	68db      	ldr	r3, [r3, #12]
 8016c58:	899b      	ldrh	r3, [r3, #12]
 8016c5a:	b29b      	uxth	r3, r3
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f7f8 fe99 	bl	800f994 <lwip_htons>
 8016c62:	4603      	mov	r3, r0
 8016c64:	b2db      	uxtb	r3, r3
 8016c66:	f003 0303 	and.w	r3, r3, #3
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d001      	beq.n	8016c72 <tcp_output+0x2de>
 8016c6e:	2301      	movs	r3, #1
 8016c70:	e000      	b.n	8016c74 <tcp_output+0x2e0>
 8016c72:	2300      	movs	r3, #0
 8016c74:	4423      	add	r3, r4
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d049      	beq.n	8016d0e <tcp_output+0x37a>
      seg->next = NULL;
 8016c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d105      	bne.n	8016c94 <tcp_output+0x300>
        pcb->unacked = seg;
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c8c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8016c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c90:	623b      	str	r3, [r7, #32]
 8016c92:	e03f      	b.n	8016d14 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c96:	68db      	ldr	r3, [r3, #12]
 8016c98:	685b      	ldr	r3, [r3, #4]
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f7f8 fe8f 	bl	800f9be <lwip_htonl>
 8016ca0:	4604      	mov	r4, r0
 8016ca2:	6a3b      	ldr	r3, [r7, #32]
 8016ca4:	68db      	ldr	r3, [r3, #12]
 8016ca6:	685b      	ldr	r3, [r3, #4]
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f7f8 fe88 	bl	800f9be <lwip_htonl>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	1ae3      	subs	r3, r4, r3
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	da24      	bge.n	8016d00 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	3370      	adds	r3, #112	@ 0x70
 8016cba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016cbc:	e002      	b.n	8016cc4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016cbe:	69fb      	ldr	r3, [r7, #28]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016cc4:	69fb      	ldr	r3, [r7, #28]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d011      	beq.n	8016cf0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016ccc:	69fb      	ldr	r3, [r7, #28]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	68db      	ldr	r3, [r3, #12]
 8016cd2:	685b      	ldr	r3, [r3, #4]
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f7f8 fe72 	bl	800f9be <lwip_htonl>
 8016cda:	4604      	mov	r4, r0
 8016cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cde:	68db      	ldr	r3, [r3, #12]
 8016ce0:	685b      	ldr	r3, [r3, #4]
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	f7f8 fe6b 	bl	800f9be <lwip_htonl>
 8016ce8:	4603      	mov	r3, r0
 8016cea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	dbe6      	blt.n	8016cbe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016cf0:	69fb      	ldr	r3, [r7, #28]
 8016cf2:	681a      	ldr	r2, [r3, #0]
 8016cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cf6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016cf8:	69fb      	ldr	r3, [r7, #28]
 8016cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016cfc:	601a      	str	r2, [r3, #0]
 8016cfe:	e009      	b.n	8016d14 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016d00:	6a3b      	ldr	r3, [r7, #32]
 8016d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016d04:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016d06:	6a3b      	ldr	r3, [r7, #32]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	623b      	str	r3, [r7, #32]
 8016d0c:	e002      	b.n	8016d14 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016d0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016d10:	f7fb ff1f 	bl	8012b52 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d18:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8016d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d012      	beq.n	8016d46 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d22:	68db      	ldr	r3, [r3, #12]
 8016d24:	685b      	ldr	r3, [r3, #4]
 8016d26:	4618      	mov	r0, r3
 8016d28:	f7f8 fe49 	bl	800f9be <lwip_htonl>
 8016d2c:	4602      	mov	r2, r0
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d32:	1ad3      	subs	r3, r2, r3
 8016d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016d36:	8912      	ldrh	r2, [r2, #8]
 8016d38:	4413      	add	r3, r2
  while (seg != NULL &&
 8016d3a:	69ba      	ldr	r2, [r7, #24]
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	f4bf aed9 	bcs.w	8016af4 <tcp_output+0x160>
 8016d42:	e000      	b.n	8016d46 <tcp_output+0x3b2>
      break;
 8016d44:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d108      	bne.n	8016d60 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	2200      	movs	r2, #0
 8016d52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8016d56:	e004      	b.n	8016d62 <tcp_output+0x3ce>
    goto output_done;
 8016d58:	bf00      	nop
 8016d5a:	e002      	b.n	8016d62 <tcp_output+0x3ce>
    goto output_done;
 8016d5c:	bf00      	nop
 8016d5e:	e000      	b.n	8016d62 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016d60:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	8b5b      	ldrh	r3, [r3, #26]
 8016d66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016d6a:	b29a      	uxth	r2, r3
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016d70:	2300      	movs	r3, #0
}
 8016d72:	4618      	mov	r0, r3
 8016d74:	3728      	adds	r7, #40	@ 0x28
 8016d76:	46bd      	mov	sp, r7
 8016d78:	bdb0      	pop	{r4, r5, r7, pc}
 8016d7a:	bf00      	nop

08016d7c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b082      	sub	sp, #8
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d106      	bne.n	8016d98 <tcp_output_segment_busy+0x1c>
 8016d8a:	4b09      	ldr	r3, [pc, #36]	@ (8016db0 <tcp_output_segment_busy+0x34>)
 8016d8c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8016d90:	4908      	ldr	r1, [pc, #32]	@ (8016db4 <tcp_output_segment_busy+0x38>)
 8016d92:	4809      	ldr	r0, [pc, #36]	@ (8016db8 <tcp_output_segment_busy+0x3c>)
 8016d94:	f012 fac6 	bl	8029324 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	685b      	ldr	r3, [r3, #4]
 8016d9c:	7b9b      	ldrb	r3, [r3, #14]
 8016d9e:	2b01      	cmp	r3, #1
 8016da0:	d001      	beq.n	8016da6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016da2:	2301      	movs	r3, #1
 8016da4:	e000      	b.n	8016da8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016da6:	2300      	movs	r3, #0
}
 8016da8:	4618      	mov	r0, r3
 8016daa:	3708      	adds	r7, #8
 8016dac:	46bd      	mov	sp, r7
 8016dae:	bd80      	pop	{r7, pc}
 8016db0:	0802dc3c 	.word	0x0802dc3c
 8016db4:	0802e1d8 	.word	0x0802e1d8
 8016db8:	0802dc90 	.word	0x0802dc90

08016dbc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016dbc:	b5b0      	push	{r4, r5, r7, lr}
 8016dbe:	b08c      	sub	sp, #48	@ 0x30
 8016dc0:	af04      	add	r7, sp, #16
 8016dc2:	60f8      	str	r0, [r7, #12]
 8016dc4:	60b9      	str	r1, [r7, #8]
 8016dc6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d106      	bne.n	8016ddc <tcp_output_segment+0x20>
 8016dce:	4b64      	ldr	r3, [pc, #400]	@ (8016f60 <tcp_output_segment+0x1a4>)
 8016dd0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8016dd4:	4963      	ldr	r1, [pc, #396]	@ (8016f64 <tcp_output_segment+0x1a8>)
 8016dd6:	4864      	ldr	r0, [pc, #400]	@ (8016f68 <tcp_output_segment+0x1ac>)
 8016dd8:	f012 faa4 	bl	8029324 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d106      	bne.n	8016df0 <tcp_output_segment+0x34>
 8016de2:	4b5f      	ldr	r3, [pc, #380]	@ (8016f60 <tcp_output_segment+0x1a4>)
 8016de4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8016de8:	4960      	ldr	r1, [pc, #384]	@ (8016f6c <tcp_output_segment+0x1b0>)
 8016dea:	485f      	ldr	r0, [pc, #380]	@ (8016f68 <tcp_output_segment+0x1ac>)
 8016dec:	f012 fa9a 	bl	8029324 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d106      	bne.n	8016e04 <tcp_output_segment+0x48>
 8016df6:	4b5a      	ldr	r3, [pc, #360]	@ (8016f60 <tcp_output_segment+0x1a4>)
 8016df8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8016dfc:	495c      	ldr	r1, [pc, #368]	@ (8016f70 <tcp_output_segment+0x1b4>)
 8016dfe:	485a      	ldr	r0, [pc, #360]	@ (8016f68 <tcp_output_segment+0x1ac>)
 8016e00:	f012 fa90 	bl	8029324 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016e04:	68f8      	ldr	r0, [r7, #12]
 8016e06:	f7ff ffb9 	bl	8016d7c <tcp_output_segment_busy>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d001      	beq.n	8016e14 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016e10:	2300      	movs	r3, #0
 8016e12:	e0a1      	b.n	8016f58 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016e14:	68bb      	ldr	r3, [r7, #8]
 8016e16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	68dc      	ldr	r4, [r3, #12]
 8016e1c:	4610      	mov	r0, r2
 8016e1e:	f7f8 fdce 	bl	800f9be <lwip_htonl>
 8016e22:	4603      	mov	r3, r0
 8016e24:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016e26:	68bb      	ldr	r3, [r7, #8]
 8016e28:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	68dc      	ldr	r4, [r3, #12]
 8016e2e:	4610      	mov	r0, r2
 8016e30:	f7f8 fdb0 	bl	800f994 <lwip_htons>
 8016e34:	4603      	mov	r3, r0
 8016e36:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016e38:	68bb      	ldr	r3, [r7, #8]
 8016e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e3c:	68ba      	ldr	r2, [r7, #8]
 8016e3e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8016e40:	441a      	add	r2, r3
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	68db      	ldr	r3, [r3, #12]
 8016e4a:	3314      	adds	r3, #20
 8016e4c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	7a9b      	ldrb	r3, [r3, #10]
 8016e52:	f003 0301 	and.w	r3, r3, #1
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d015      	beq.n	8016e86 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	3304      	adds	r3, #4
 8016e5e:	461a      	mov	r2, r3
 8016e60:	6879      	ldr	r1, [r7, #4]
 8016e62:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8016e66:	f7fc fa39 	bl	80132dc <tcp_eff_send_mss_netif>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016e6e:	8b7b      	ldrh	r3, [r7, #26]
 8016e70:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8016e74:	4618      	mov	r0, r3
 8016e76:	f7f8 fda2 	bl	800f9be <lwip_htonl>
 8016e7a:	4602      	mov	r2, r0
 8016e7c:	69fb      	ldr	r3, [r7, #28]
 8016e7e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016e80:	69fb      	ldr	r3, [r7, #28]
 8016e82:	3304      	adds	r3, #4
 8016e84:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	da02      	bge.n	8016e96 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016e90:	68bb      	ldr	r3, [r7, #8]
 8016e92:	2200      	movs	r2, #0
 8016e94:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8016e96:	68bb      	ldr	r3, [r7, #8]
 8016e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d10c      	bne.n	8016eb8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016e9e:	4b35      	ldr	r3, [pc, #212]	@ (8016f74 <tcp_output_segment+0x1b8>)
 8016ea0:	681a      	ldr	r2, [r3, #0]
 8016ea2:	68bb      	ldr	r3, [r7, #8]
 8016ea4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	68db      	ldr	r3, [r3, #12]
 8016eaa:	685b      	ldr	r3, [r3, #4]
 8016eac:	4618      	mov	r0, r3
 8016eae:	f7f8 fd86 	bl	800f9be <lwip_htonl>
 8016eb2:	4602      	mov	r2, r0
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	68da      	ldr	r2, [r3, #12]
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	685b      	ldr	r3, [r3, #4]
 8016ec0:	685b      	ldr	r3, [r3, #4]
 8016ec2:	1ad3      	subs	r3, r2, r3
 8016ec4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	685b      	ldr	r3, [r3, #4]
 8016eca:	8959      	ldrh	r1, [r3, #10]
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	685b      	ldr	r3, [r3, #4]
 8016ed0:	8b3a      	ldrh	r2, [r7, #24]
 8016ed2:	1a8a      	subs	r2, r1, r2
 8016ed4:	b292      	uxth	r2, r2
 8016ed6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	685b      	ldr	r3, [r3, #4]
 8016edc:	8919      	ldrh	r1, [r3, #8]
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	685b      	ldr	r3, [r3, #4]
 8016ee2:	8b3a      	ldrh	r2, [r7, #24]
 8016ee4:	1a8a      	subs	r2, r1, r2
 8016ee6:	b292      	uxth	r2, r2
 8016ee8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	685b      	ldr	r3, [r3, #4]
 8016eee:	68fa      	ldr	r2, [r7, #12]
 8016ef0:	68d2      	ldr	r2, [r2, #12]
 8016ef2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	68db      	ldr	r3, [r3, #12]
 8016ef8:	2200      	movs	r2, #0
 8016efa:	741a      	strb	r2, [r3, #16]
 8016efc:	2200      	movs	r2, #0
 8016efe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	68da      	ldr	r2, [r3, #12]
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	7a9b      	ldrb	r3, [r3, #10]
 8016f08:	f003 0301 	and.w	r3, r3, #1
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d001      	beq.n	8016f14 <tcp_output_segment+0x158>
 8016f10:	2318      	movs	r3, #24
 8016f12:	e000      	b.n	8016f16 <tcp_output_segment+0x15a>
 8016f14:	2314      	movs	r3, #20
 8016f16:	4413      	add	r3, r2
 8016f18:	69fa      	ldr	r2, [r7, #28]
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	d006      	beq.n	8016f2c <tcp_output_segment+0x170>
 8016f1e:	4b10      	ldr	r3, [pc, #64]	@ (8016f60 <tcp_output_segment+0x1a4>)
 8016f20:	f240 621c 	movw	r2, #1564	@ 0x61c
 8016f24:	4914      	ldr	r1, [pc, #80]	@ (8016f78 <tcp_output_segment+0x1bc>)
 8016f26:	4810      	ldr	r0, [pc, #64]	@ (8016f68 <tcp_output_segment+0x1ac>)
 8016f28:	f012 f9fc 	bl	8029324 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	6858      	ldr	r0, [r3, #4]
 8016f30:	68b9      	ldr	r1, [r7, #8]
 8016f32:	68bb      	ldr	r3, [r7, #8]
 8016f34:	1d1c      	adds	r4, r3, #4
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	7add      	ldrb	r5, [r3, #11]
 8016f3a:	68bb      	ldr	r3, [r7, #8]
 8016f3c:	7a9b      	ldrb	r3, [r3, #10]
 8016f3e:	687a      	ldr	r2, [r7, #4]
 8016f40:	9202      	str	r2, [sp, #8]
 8016f42:	2206      	movs	r2, #6
 8016f44:	9201      	str	r2, [sp, #4]
 8016f46:	9300      	str	r3, [sp, #0]
 8016f48:	462b      	mov	r3, r5
 8016f4a:	4622      	mov	r2, r4
 8016f4c:	f003 faca 	bl	801a4e4 <ip4_output_if>
 8016f50:	4603      	mov	r3, r0
 8016f52:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016f54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	3720      	adds	r7, #32
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8016f60:	0802dc3c 	.word	0x0802dc3c
 8016f64:	0802e200 	.word	0x0802e200
 8016f68:	0802dc90 	.word	0x0802dc90
 8016f6c:	0802e220 	.word	0x0802e220
 8016f70:	0802e240 	.word	0x0802e240
 8016f74:	200425b4 	.word	0x200425b4
 8016f78:	0802e264 	.word	0x0802e264

08016f7c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016f7c:	b5b0      	push	{r4, r5, r7, lr}
 8016f7e:	b084      	sub	sp, #16
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d106      	bne.n	8016f98 <tcp_rexmit_rto_prepare+0x1c>
 8016f8a:	4b31      	ldr	r3, [pc, #196]	@ (8017050 <tcp_rexmit_rto_prepare+0xd4>)
 8016f8c:	f240 6263 	movw	r2, #1635	@ 0x663
 8016f90:	4930      	ldr	r1, [pc, #192]	@ (8017054 <tcp_rexmit_rto_prepare+0xd8>)
 8016f92:	4831      	ldr	r0, [pc, #196]	@ (8017058 <tcp_rexmit_rto_prepare+0xdc>)
 8016f94:	f012 f9c6 	bl	8029324 <iprintf>

  if (pcb->unacked == NULL) {
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d102      	bne.n	8016fa6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016fa0:	f06f 0305 	mvn.w	r3, #5
 8016fa4:	e050      	b.n	8017048 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016faa:	60fb      	str	r3, [r7, #12]
 8016fac:	e00b      	b.n	8016fc6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016fae:	68f8      	ldr	r0, [r7, #12]
 8016fb0:	f7ff fee4 	bl	8016d7c <tcp_output_segment_busy>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d002      	beq.n	8016fc0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016fba:	f06f 0305 	mvn.w	r3, #5
 8016fbe:	e043      	b.n	8017048 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	60fb      	str	r3, [r7, #12]
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d1ef      	bne.n	8016fae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016fce:	68f8      	ldr	r0, [r7, #12]
 8016fd0:	f7ff fed4 	bl	8016d7c <tcp_output_segment_busy>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d002      	beq.n	8016fe0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016fda:	f06f 0305 	mvn.w	r3, #5
 8016fde:	e033      	b.n	8017048 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	8b5b      	ldrh	r3, [r3, #26]
 8016ffa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8016ffe:	b29a      	uxth	r2, r3
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	68db      	ldr	r3, [r3, #12]
 8017008:	685b      	ldr	r3, [r3, #4]
 801700a:	4618      	mov	r0, r3
 801700c:	f7f8 fcd7 	bl	800f9be <lwip_htonl>
 8017010:	4604      	mov	r4, r0
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	891b      	ldrh	r3, [r3, #8]
 8017016:	461d      	mov	r5, r3
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	68db      	ldr	r3, [r3, #12]
 801701c:	899b      	ldrh	r3, [r3, #12]
 801701e:	b29b      	uxth	r3, r3
 8017020:	4618      	mov	r0, r3
 8017022:	f7f8 fcb7 	bl	800f994 <lwip_htons>
 8017026:	4603      	mov	r3, r0
 8017028:	b2db      	uxtb	r3, r3
 801702a:	f003 0303 	and.w	r3, r3, #3
 801702e:	2b00      	cmp	r3, #0
 8017030:	d001      	beq.n	8017036 <tcp_rexmit_rto_prepare+0xba>
 8017032:	2301      	movs	r3, #1
 8017034:	e000      	b.n	8017038 <tcp_rexmit_rto_prepare+0xbc>
 8017036:	2300      	movs	r3, #0
 8017038:	442b      	add	r3, r5
 801703a:	18e2      	adds	r2, r4, r3
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	2200      	movs	r2, #0
 8017044:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8017046:	2300      	movs	r3, #0
}
 8017048:	4618      	mov	r0, r3
 801704a:	3710      	adds	r7, #16
 801704c:	46bd      	mov	sp, r7
 801704e:	bdb0      	pop	{r4, r5, r7, pc}
 8017050:	0802dc3c 	.word	0x0802dc3c
 8017054:	0802e278 	.word	0x0802e278
 8017058:	0802dc90 	.word	0x0802dc90

0801705c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b082      	sub	sp, #8
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d106      	bne.n	8017078 <tcp_rexmit_rto_commit+0x1c>
 801706a:	4b0d      	ldr	r3, [pc, #52]	@ (80170a0 <tcp_rexmit_rto_commit+0x44>)
 801706c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8017070:	490c      	ldr	r1, [pc, #48]	@ (80170a4 <tcp_rexmit_rto_commit+0x48>)
 8017072:	480d      	ldr	r0, [pc, #52]	@ (80170a8 <tcp_rexmit_rto_commit+0x4c>)
 8017074:	f012 f956 	bl	8029324 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801707e:	2bff      	cmp	r3, #255	@ 0xff
 8017080:	d007      	beq.n	8017092 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017088:	3301      	adds	r3, #1
 801708a:	b2da      	uxtb	r2, r3
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017092:	6878      	ldr	r0, [r7, #4]
 8017094:	f7ff fc7e 	bl	8016994 <tcp_output>
}
 8017098:	bf00      	nop
 801709a:	3708      	adds	r7, #8
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	0802dc3c 	.word	0x0802dc3c
 80170a4:	0802e29c 	.word	0x0802e29c
 80170a8:	0802dc90 	.word	0x0802dc90

080170ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b082      	sub	sp, #8
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d106      	bne.n	80170c8 <tcp_rexmit_rto+0x1c>
 80170ba:	4b0a      	ldr	r3, [pc, #40]	@ (80170e4 <tcp_rexmit_rto+0x38>)
 80170bc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80170c0:	4909      	ldr	r1, [pc, #36]	@ (80170e8 <tcp_rexmit_rto+0x3c>)
 80170c2:	480a      	ldr	r0, [pc, #40]	@ (80170ec <tcp_rexmit_rto+0x40>)
 80170c4:	f012 f92e 	bl	8029324 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80170c8:	6878      	ldr	r0, [r7, #4]
 80170ca:	f7ff ff57 	bl	8016f7c <tcp_rexmit_rto_prepare>
 80170ce:	4603      	mov	r3, r0
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d102      	bne.n	80170da <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80170d4:	6878      	ldr	r0, [r7, #4]
 80170d6:	f7ff ffc1 	bl	801705c <tcp_rexmit_rto_commit>
  }
}
 80170da:	bf00      	nop
 80170dc:	3708      	adds	r7, #8
 80170de:	46bd      	mov	sp, r7
 80170e0:	bd80      	pop	{r7, pc}
 80170e2:	bf00      	nop
 80170e4:	0802dc3c 	.word	0x0802dc3c
 80170e8:	0802e2c0 	.word	0x0802e2c0
 80170ec:	0802dc90 	.word	0x0802dc90

080170f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80170f0:	b590      	push	{r4, r7, lr}
 80170f2:	b085      	sub	sp, #20
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d106      	bne.n	801710c <tcp_rexmit+0x1c>
 80170fe:	4b2f      	ldr	r3, [pc, #188]	@ (80171bc <tcp_rexmit+0xcc>)
 8017100:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8017104:	492e      	ldr	r1, [pc, #184]	@ (80171c0 <tcp_rexmit+0xd0>)
 8017106:	482f      	ldr	r0, [pc, #188]	@ (80171c4 <tcp_rexmit+0xd4>)
 8017108:	f012 f90c 	bl	8029324 <iprintf>

  if (pcb->unacked == NULL) {
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017110:	2b00      	cmp	r3, #0
 8017112:	d102      	bne.n	801711a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017114:	f06f 0305 	mvn.w	r3, #5
 8017118:	e04c      	b.n	80171b4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801711e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017120:	68b8      	ldr	r0, [r7, #8]
 8017122:	f7ff fe2b 	bl	8016d7c <tcp_output_segment_busy>
 8017126:	4603      	mov	r3, r0
 8017128:	2b00      	cmp	r3, #0
 801712a:	d002      	beq.n	8017132 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801712c:	f06f 0305 	mvn.w	r3, #5
 8017130:	e040      	b.n	80171b4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017132:	68bb      	ldr	r3, [r7, #8]
 8017134:	681a      	ldr	r2, [r3, #0]
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	336c      	adds	r3, #108	@ 0x6c
 801713e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017140:	e002      	b.n	8017148 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d011      	beq.n	8017174 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	68db      	ldr	r3, [r3, #12]
 8017156:	685b      	ldr	r3, [r3, #4]
 8017158:	4618      	mov	r0, r3
 801715a:	f7f8 fc30 	bl	800f9be <lwip_htonl>
 801715e:	4604      	mov	r4, r0
 8017160:	68bb      	ldr	r3, [r7, #8]
 8017162:	68db      	ldr	r3, [r3, #12]
 8017164:	685b      	ldr	r3, [r3, #4]
 8017166:	4618      	mov	r0, r3
 8017168:	f7f8 fc29 	bl	800f9be <lwip_htonl>
 801716c:	4603      	mov	r3, r0
 801716e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017170:	2b00      	cmp	r3, #0
 8017172:	dbe6      	blt.n	8017142 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	681a      	ldr	r2, [r3, #0]
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	68ba      	ldr	r2, [r7, #8]
 8017180:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017182:	68bb      	ldr	r3, [r7, #8]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d103      	bne.n	8017192 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	2200      	movs	r2, #0
 801718e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017198:	2bff      	cmp	r3, #255	@ 0xff
 801719a:	d007      	beq.n	80171ac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80171a2:	3301      	adds	r3, #1
 80171a4:	b2da      	uxtb	r2, r3
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	2200      	movs	r2, #0
 80171b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80171b2:	2300      	movs	r3, #0
}
 80171b4:	4618      	mov	r0, r3
 80171b6:	3714      	adds	r7, #20
 80171b8:	46bd      	mov	sp, r7
 80171ba:	bd90      	pop	{r4, r7, pc}
 80171bc:	0802dc3c 	.word	0x0802dc3c
 80171c0:	0802e2dc 	.word	0x0802e2dc
 80171c4:	0802dc90 	.word	0x0802dc90

080171c8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b082      	sub	sp, #8
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d106      	bne.n	80171e4 <tcp_rexmit_fast+0x1c>
 80171d6:	4b2a      	ldr	r3, [pc, #168]	@ (8017280 <tcp_rexmit_fast+0xb8>)
 80171d8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80171dc:	4929      	ldr	r1, [pc, #164]	@ (8017284 <tcp_rexmit_fast+0xbc>)
 80171de:	482a      	ldr	r0, [pc, #168]	@ (8017288 <tcp_rexmit_fast+0xc0>)
 80171e0:	f012 f8a0 	bl	8029324 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d045      	beq.n	8017278 <tcp_rexmit_fast+0xb0>
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	8b5b      	ldrh	r3, [r3, #26]
 80171f0:	f003 0304 	and.w	r3, r3, #4
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d13f      	bne.n	8017278 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80171f8:	6878      	ldr	r0, [r7, #4]
 80171fa:	f7ff ff79 	bl	80170f0 <tcp_rexmit>
 80171fe:	4603      	mov	r3, r0
 8017200:	2b00      	cmp	r3, #0
 8017202:	d139      	bne.n	8017278 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017210:	4293      	cmp	r3, r2
 8017212:	bf28      	it	cs
 8017214:	4613      	movcs	r3, r2
 8017216:	b29b      	uxth	r3, r3
 8017218:	2b00      	cmp	r3, #0
 801721a:	da00      	bge.n	801721e <tcp_rexmit_fast+0x56>
 801721c:	3301      	adds	r3, #1
 801721e:	105b      	asrs	r3, r3, #1
 8017220:	b29a      	uxth	r2, r3
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801722e:	461a      	mov	r2, r3
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017234:	005b      	lsls	r3, r3, #1
 8017236:	429a      	cmp	r2, r3
 8017238:	d206      	bcs.n	8017248 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801723e:	005b      	lsls	r3, r3, #1
 8017240:	b29a      	uxth	r2, r3
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017252:	4619      	mov	r1, r3
 8017254:	0049      	lsls	r1, r1, #1
 8017256:	440b      	add	r3, r1
 8017258:	b29b      	uxth	r3, r3
 801725a:	4413      	add	r3, r2
 801725c:	b29a      	uxth	r2, r3
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	8b5b      	ldrh	r3, [r3, #26]
 8017268:	f043 0304 	orr.w	r3, r3, #4
 801726c:	b29a      	uxth	r2, r3
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	2200      	movs	r2, #0
 8017276:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8017278:	bf00      	nop
 801727a:	3708      	adds	r7, #8
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}
 8017280:	0802dc3c 	.word	0x0802dc3c
 8017284:	0802e2f4 	.word	0x0802e2f4
 8017288:	0802dc90 	.word	0x0802dc90

0801728c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b086      	sub	sp, #24
 8017290:	af00      	add	r7, sp, #0
 8017292:	60f8      	str	r0, [r7, #12]
 8017294:	607b      	str	r3, [r7, #4]
 8017296:	460b      	mov	r3, r1
 8017298:	817b      	strh	r3, [r7, #10]
 801729a:	4613      	mov	r3, r2
 801729c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801729e:	897a      	ldrh	r2, [r7, #10]
 80172a0:	893b      	ldrh	r3, [r7, #8]
 80172a2:	4413      	add	r3, r2
 80172a4:	b29b      	uxth	r3, r3
 80172a6:	3314      	adds	r3, #20
 80172a8:	b29b      	uxth	r3, r3
 80172aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80172ae:	4619      	mov	r1, r3
 80172b0:	2022      	movs	r0, #34	@ 0x22
 80172b2:	f7f9 fd53 	bl	8010d5c <pbuf_alloc>
 80172b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80172b8:	697b      	ldr	r3, [r7, #20]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d04d      	beq.n	801735a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80172be:	897b      	ldrh	r3, [r7, #10]
 80172c0:	3313      	adds	r3, #19
 80172c2:	697a      	ldr	r2, [r7, #20]
 80172c4:	8952      	ldrh	r2, [r2, #10]
 80172c6:	4293      	cmp	r3, r2
 80172c8:	db06      	blt.n	80172d8 <tcp_output_alloc_header_common+0x4c>
 80172ca:	4b26      	ldr	r3, [pc, #152]	@ (8017364 <tcp_output_alloc_header_common+0xd8>)
 80172cc:	f240 7223 	movw	r2, #1827	@ 0x723
 80172d0:	4925      	ldr	r1, [pc, #148]	@ (8017368 <tcp_output_alloc_header_common+0xdc>)
 80172d2:	4826      	ldr	r0, [pc, #152]	@ (801736c <tcp_output_alloc_header_common+0xe0>)
 80172d4:	f012 f826 	bl	8029324 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80172d8:	697b      	ldr	r3, [r7, #20]
 80172da:	685b      	ldr	r3, [r3, #4]
 80172dc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80172de:	8c3b      	ldrh	r3, [r7, #32]
 80172e0:	4618      	mov	r0, r3
 80172e2:	f7f8 fb57 	bl	800f994 <lwip_htons>
 80172e6:	4603      	mov	r3, r0
 80172e8:	461a      	mov	r2, r3
 80172ea:	693b      	ldr	r3, [r7, #16]
 80172ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80172ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80172f0:	4618      	mov	r0, r3
 80172f2:	f7f8 fb4f 	bl	800f994 <lwip_htons>
 80172f6:	4603      	mov	r3, r0
 80172f8:	461a      	mov	r2, r3
 80172fa:	693b      	ldr	r3, [r7, #16]
 80172fc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80172fe:	693b      	ldr	r3, [r7, #16]
 8017300:	687a      	ldr	r2, [r7, #4]
 8017302:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017304:	68f8      	ldr	r0, [r7, #12]
 8017306:	f7f8 fb5a 	bl	800f9be <lwip_htonl>
 801730a:	4602      	mov	r2, r0
 801730c:	693b      	ldr	r3, [r7, #16]
 801730e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017310:	897b      	ldrh	r3, [r7, #10]
 8017312:	089b      	lsrs	r3, r3, #2
 8017314:	b29b      	uxth	r3, r3
 8017316:	3305      	adds	r3, #5
 8017318:	b29b      	uxth	r3, r3
 801731a:	031b      	lsls	r3, r3, #12
 801731c:	b29a      	uxth	r2, r3
 801731e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017322:	b29b      	uxth	r3, r3
 8017324:	4313      	orrs	r3, r2
 8017326:	b29b      	uxth	r3, r3
 8017328:	4618      	mov	r0, r3
 801732a:	f7f8 fb33 	bl	800f994 <lwip_htons>
 801732e:	4603      	mov	r3, r0
 8017330:	461a      	mov	r2, r3
 8017332:	693b      	ldr	r3, [r7, #16]
 8017334:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017336:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017338:	4618      	mov	r0, r3
 801733a:	f7f8 fb2b 	bl	800f994 <lwip_htons>
 801733e:	4603      	mov	r3, r0
 8017340:	461a      	mov	r2, r3
 8017342:	693b      	ldr	r3, [r7, #16]
 8017344:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017346:	693b      	ldr	r3, [r7, #16]
 8017348:	2200      	movs	r2, #0
 801734a:	741a      	strb	r2, [r3, #16]
 801734c:	2200      	movs	r2, #0
 801734e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017350:	693b      	ldr	r3, [r7, #16]
 8017352:	2200      	movs	r2, #0
 8017354:	749a      	strb	r2, [r3, #18]
 8017356:	2200      	movs	r2, #0
 8017358:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801735a:	697b      	ldr	r3, [r7, #20]
}
 801735c:	4618      	mov	r0, r3
 801735e:	3718      	adds	r7, #24
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}
 8017364:	0802dc3c 	.word	0x0802dc3c
 8017368:	0802e314 	.word	0x0802e314
 801736c:	0802dc90 	.word	0x0802dc90

08017370 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017370:	b5b0      	push	{r4, r5, r7, lr}
 8017372:	b08a      	sub	sp, #40	@ 0x28
 8017374:	af04      	add	r7, sp, #16
 8017376:	60f8      	str	r0, [r7, #12]
 8017378:	607b      	str	r3, [r7, #4]
 801737a:	460b      	mov	r3, r1
 801737c:	817b      	strh	r3, [r7, #10]
 801737e:	4613      	mov	r3, r2
 8017380:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d106      	bne.n	8017396 <tcp_output_alloc_header+0x26>
 8017388:	4b15      	ldr	r3, [pc, #84]	@ (80173e0 <tcp_output_alloc_header+0x70>)
 801738a:	f240 7242 	movw	r2, #1858	@ 0x742
 801738e:	4915      	ldr	r1, [pc, #84]	@ (80173e4 <tcp_output_alloc_header+0x74>)
 8017390:	4815      	ldr	r0, [pc, #84]	@ (80173e8 <tcp_output_alloc_header+0x78>)
 8017392:	f011 ffc7 	bl	8029324 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	8adb      	ldrh	r3, [r3, #22]
 801739e:	68fa      	ldr	r2, [r7, #12]
 80173a0:	8b12      	ldrh	r2, [r2, #24]
 80173a2:	68f9      	ldr	r1, [r7, #12]
 80173a4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80173a6:	893d      	ldrh	r5, [r7, #8]
 80173a8:	897c      	ldrh	r4, [r7, #10]
 80173aa:	9103      	str	r1, [sp, #12]
 80173ac:	2110      	movs	r1, #16
 80173ae:	9102      	str	r1, [sp, #8]
 80173b0:	9201      	str	r2, [sp, #4]
 80173b2:	9300      	str	r3, [sp, #0]
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	462a      	mov	r2, r5
 80173b8:	4621      	mov	r1, r4
 80173ba:	f7ff ff67 	bl	801728c <tcp_output_alloc_header_common>
 80173be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80173c0:	697b      	ldr	r3, [r7, #20]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d006      	beq.n	80173d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173ca:	68fa      	ldr	r2, [r7, #12]
 80173cc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80173ce:	441a      	add	r2, r3
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80173d4:	697b      	ldr	r3, [r7, #20]
}
 80173d6:	4618      	mov	r0, r3
 80173d8:	3718      	adds	r7, #24
 80173da:	46bd      	mov	sp, r7
 80173dc:	bdb0      	pop	{r4, r5, r7, pc}
 80173de:	bf00      	nop
 80173e0:	0802dc3c 	.word	0x0802dc3c
 80173e4:	0802e344 	.word	0x0802e344
 80173e8:	0802dc90 	.word	0x0802dc90

080173ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b088      	sub	sp, #32
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	60f8      	str	r0, [r7, #12]
 80173f4:	60b9      	str	r1, [r7, #8]
 80173f6:	4611      	mov	r1, r2
 80173f8:	461a      	mov	r2, r3
 80173fa:	460b      	mov	r3, r1
 80173fc:	71fb      	strb	r3, [r7, #7]
 80173fe:	4613      	mov	r3, r2
 8017400:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017402:	2300      	movs	r3, #0
 8017404:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017406:	68bb      	ldr	r3, [r7, #8]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d106      	bne.n	801741a <tcp_output_fill_options+0x2e>
 801740c:	4b12      	ldr	r3, [pc, #72]	@ (8017458 <tcp_output_fill_options+0x6c>)
 801740e:	f240 7256 	movw	r2, #1878	@ 0x756
 8017412:	4912      	ldr	r1, [pc, #72]	@ (801745c <tcp_output_fill_options+0x70>)
 8017414:	4812      	ldr	r0, [pc, #72]	@ (8017460 <tcp_output_fill_options+0x74>)
 8017416:	f011 ff85 	bl	8029324 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801741a:	68bb      	ldr	r3, [r7, #8]
 801741c:	685b      	ldr	r3, [r3, #4]
 801741e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017420:	69bb      	ldr	r3, [r7, #24]
 8017422:	3314      	adds	r3, #20
 8017424:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017426:	8bfb      	ldrh	r3, [r7, #30]
 8017428:	009b      	lsls	r3, r3, #2
 801742a:	461a      	mov	r2, r3
 801742c:	79fb      	ldrb	r3, [r7, #7]
 801742e:	009b      	lsls	r3, r3, #2
 8017430:	f003 0304 	and.w	r3, r3, #4
 8017434:	4413      	add	r3, r2
 8017436:	3314      	adds	r3, #20
 8017438:	69ba      	ldr	r2, [r7, #24]
 801743a:	4413      	add	r3, r2
 801743c:	697a      	ldr	r2, [r7, #20]
 801743e:	429a      	cmp	r2, r3
 8017440:	d006      	beq.n	8017450 <tcp_output_fill_options+0x64>
 8017442:	4b05      	ldr	r3, [pc, #20]	@ (8017458 <tcp_output_fill_options+0x6c>)
 8017444:	f240 7275 	movw	r2, #1909	@ 0x775
 8017448:	4906      	ldr	r1, [pc, #24]	@ (8017464 <tcp_output_fill_options+0x78>)
 801744a:	4805      	ldr	r0, [pc, #20]	@ (8017460 <tcp_output_fill_options+0x74>)
 801744c:	f011 ff6a 	bl	8029324 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017450:	bf00      	nop
 8017452:	3720      	adds	r7, #32
 8017454:	46bd      	mov	sp, r7
 8017456:	bd80      	pop	{r7, pc}
 8017458:	0802dc3c 	.word	0x0802dc3c
 801745c:	0802e36c 	.word	0x0802e36c
 8017460:	0802dc90 	.word	0x0802dc90
 8017464:	0802e264 	.word	0x0802e264

08017468 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b08a      	sub	sp, #40	@ 0x28
 801746c:	af04      	add	r7, sp, #16
 801746e:	60f8      	str	r0, [r7, #12]
 8017470:	60b9      	str	r1, [r7, #8]
 8017472:	607a      	str	r2, [r7, #4]
 8017474:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017476:	68bb      	ldr	r3, [r7, #8]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d106      	bne.n	801748a <tcp_output_control_segment+0x22>
 801747c:	4b1c      	ldr	r3, [pc, #112]	@ (80174f0 <tcp_output_control_segment+0x88>)
 801747e:	f240 7287 	movw	r2, #1927	@ 0x787
 8017482:	491c      	ldr	r1, [pc, #112]	@ (80174f4 <tcp_output_control_segment+0x8c>)
 8017484:	481c      	ldr	r0, [pc, #112]	@ (80174f8 <tcp_output_control_segment+0x90>)
 8017486:	f011 ff4d 	bl	8029324 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801748a:	683a      	ldr	r2, [r7, #0]
 801748c:	6879      	ldr	r1, [r7, #4]
 801748e:	68f8      	ldr	r0, [r7, #12]
 8017490:	f7fe faea 	bl	8015a68 <tcp_route>
 8017494:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017496:	693b      	ldr	r3, [r7, #16]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d102      	bne.n	80174a2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801749c:	23fc      	movs	r3, #252	@ 0xfc
 801749e:	75fb      	strb	r3, [r7, #23]
 80174a0:	e01c      	b.n	80174dc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d006      	beq.n	80174b6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	7adb      	ldrb	r3, [r3, #11]
 80174ac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	7a9b      	ldrb	r3, [r3, #10]
 80174b2:	757b      	strb	r3, [r7, #21]
 80174b4:	e003      	b.n	80174be <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80174b6:	23ff      	movs	r3, #255	@ 0xff
 80174b8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80174ba:	2300      	movs	r3, #0
 80174bc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80174be:	7dba      	ldrb	r2, [r7, #22]
 80174c0:	693b      	ldr	r3, [r7, #16]
 80174c2:	9302      	str	r3, [sp, #8]
 80174c4:	2306      	movs	r3, #6
 80174c6:	9301      	str	r3, [sp, #4]
 80174c8:	7d7b      	ldrb	r3, [r7, #21]
 80174ca:	9300      	str	r3, [sp, #0]
 80174cc:	4613      	mov	r3, r2
 80174ce:	683a      	ldr	r2, [r7, #0]
 80174d0:	6879      	ldr	r1, [r7, #4]
 80174d2:	68b8      	ldr	r0, [r7, #8]
 80174d4:	f003 f806 	bl	801a4e4 <ip4_output_if>
 80174d8:	4603      	mov	r3, r0
 80174da:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80174dc:	68b8      	ldr	r0, [r7, #8]
 80174de:	f7f9 ff53 	bl	8011388 <pbuf_free>
  return err;
 80174e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80174e6:	4618      	mov	r0, r3
 80174e8:	3718      	adds	r7, #24
 80174ea:	46bd      	mov	sp, r7
 80174ec:	bd80      	pop	{r7, pc}
 80174ee:	bf00      	nop
 80174f0:	0802dc3c 	.word	0x0802dc3c
 80174f4:	0802e394 	.word	0x0802e394
 80174f8:	0802dc90 	.word	0x0802dc90

080174fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80174fc:	b590      	push	{r4, r7, lr}
 80174fe:	b08b      	sub	sp, #44	@ 0x2c
 8017500:	af04      	add	r7, sp, #16
 8017502:	60f8      	str	r0, [r7, #12]
 8017504:	60b9      	str	r1, [r7, #8]
 8017506:	607a      	str	r2, [r7, #4]
 8017508:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d106      	bne.n	801751e <tcp_rst+0x22>
 8017510:	4b1f      	ldr	r3, [pc, #124]	@ (8017590 <tcp_rst+0x94>)
 8017512:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8017516:	491f      	ldr	r1, [pc, #124]	@ (8017594 <tcp_rst+0x98>)
 8017518:	481f      	ldr	r0, [pc, #124]	@ (8017598 <tcp_rst+0x9c>)
 801751a:	f011 ff03 	bl	8029324 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801751e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017520:	2b00      	cmp	r3, #0
 8017522:	d106      	bne.n	8017532 <tcp_rst+0x36>
 8017524:	4b1a      	ldr	r3, [pc, #104]	@ (8017590 <tcp_rst+0x94>)
 8017526:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801752a:	491c      	ldr	r1, [pc, #112]	@ (801759c <tcp_rst+0xa0>)
 801752c:	481a      	ldr	r0, [pc, #104]	@ (8017598 <tcp_rst+0x9c>)
 801752e:	f011 fef9 	bl	8029324 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017532:	2300      	movs	r3, #0
 8017534:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017536:	f246 0308 	movw	r3, #24584	@ 0x6008
 801753a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801753c:	7dfb      	ldrb	r3, [r7, #23]
 801753e:	b29c      	uxth	r4, r3
 8017540:	68b8      	ldr	r0, [r7, #8]
 8017542:	f7f8 fa3c 	bl	800f9be <lwip_htonl>
 8017546:	4602      	mov	r2, r0
 8017548:	8abb      	ldrh	r3, [r7, #20]
 801754a:	9303      	str	r3, [sp, #12]
 801754c:	2314      	movs	r3, #20
 801754e:	9302      	str	r3, [sp, #8]
 8017550:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017552:	9301      	str	r3, [sp, #4]
 8017554:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017556:	9300      	str	r3, [sp, #0]
 8017558:	4613      	mov	r3, r2
 801755a:	2200      	movs	r2, #0
 801755c:	4621      	mov	r1, r4
 801755e:	6878      	ldr	r0, [r7, #4]
 8017560:	f7ff fe94 	bl	801728c <tcp_output_alloc_header_common>
 8017564:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017566:	693b      	ldr	r3, [r7, #16]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d00c      	beq.n	8017586 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801756c:	7dfb      	ldrb	r3, [r7, #23]
 801756e:	2200      	movs	r2, #0
 8017570:	6939      	ldr	r1, [r7, #16]
 8017572:	68f8      	ldr	r0, [r7, #12]
 8017574:	f7ff ff3a 	bl	80173ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801757a:	683a      	ldr	r2, [r7, #0]
 801757c:	6939      	ldr	r1, [r7, #16]
 801757e:	68f8      	ldr	r0, [r7, #12]
 8017580:	f7ff ff72 	bl	8017468 <tcp_output_control_segment>
 8017584:	e000      	b.n	8017588 <tcp_rst+0x8c>
    return;
 8017586:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017588:	371c      	adds	r7, #28
 801758a:	46bd      	mov	sp, r7
 801758c:	bd90      	pop	{r4, r7, pc}
 801758e:	bf00      	nop
 8017590:	0802dc3c 	.word	0x0802dc3c
 8017594:	0802e3c0 	.word	0x0802e3c0
 8017598:	0802dc90 	.word	0x0802dc90
 801759c:	0802e3dc 	.word	0x0802e3dc

080175a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80175a0:	b590      	push	{r4, r7, lr}
 80175a2:	b087      	sub	sp, #28
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80175a8:	2300      	movs	r3, #0
 80175aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80175ac:	2300      	movs	r3, #0
 80175ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d106      	bne.n	80175c4 <tcp_send_empty_ack+0x24>
 80175b6:	4b28      	ldr	r3, [pc, #160]	@ (8017658 <tcp_send_empty_ack+0xb8>)
 80175b8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80175bc:	4927      	ldr	r1, [pc, #156]	@ (801765c <tcp_send_empty_ack+0xbc>)
 80175be:	4828      	ldr	r0, [pc, #160]	@ (8017660 <tcp_send_empty_ack+0xc0>)
 80175c0:	f011 feb0 	bl	8029324 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80175c4:	7dfb      	ldrb	r3, [r7, #23]
 80175c6:	009b      	lsls	r3, r3, #2
 80175c8:	b2db      	uxtb	r3, r3
 80175ca:	f003 0304 	and.w	r3, r3, #4
 80175ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80175d0:	7d7b      	ldrb	r3, [r7, #21]
 80175d2:	b29c      	uxth	r4, r3
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80175d8:	4618      	mov	r0, r3
 80175da:	f7f8 f9f0 	bl	800f9be <lwip_htonl>
 80175de:	4603      	mov	r3, r0
 80175e0:	2200      	movs	r2, #0
 80175e2:	4621      	mov	r1, r4
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f7ff fec3 	bl	8017370 <tcp_output_alloc_header>
 80175ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80175ec:	693b      	ldr	r3, [r7, #16]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d109      	bne.n	8017606 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	8b5b      	ldrh	r3, [r3, #26]
 80175f6:	f043 0303 	orr.w	r3, r3, #3
 80175fa:	b29a      	uxth	r2, r3
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017600:	f06f 0301 	mvn.w	r3, #1
 8017604:	e023      	b.n	801764e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017606:	7dbb      	ldrb	r3, [r7, #22]
 8017608:	7dfa      	ldrb	r2, [r7, #23]
 801760a:	6939      	ldr	r1, [r7, #16]
 801760c:	6878      	ldr	r0, [r7, #4]
 801760e:	f7ff feed 	bl	80173ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017612:	687a      	ldr	r2, [r7, #4]
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	3304      	adds	r3, #4
 8017618:	6939      	ldr	r1, [r7, #16]
 801761a:	6878      	ldr	r0, [r7, #4]
 801761c:	f7ff ff24 	bl	8017468 <tcp_output_control_segment>
 8017620:	4603      	mov	r3, r0
 8017622:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017628:	2b00      	cmp	r3, #0
 801762a:	d007      	beq.n	801763c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	8b5b      	ldrh	r3, [r3, #26]
 8017630:	f043 0303 	orr.w	r3, r3, #3
 8017634:	b29a      	uxth	r2, r3
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	835a      	strh	r2, [r3, #26]
 801763a:	e006      	b.n	801764a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	8b5b      	ldrh	r3, [r3, #26]
 8017640:	f023 0303 	bic.w	r3, r3, #3
 8017644:	b29a      	uxth	r2, r3
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801764a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801764e:	4618      	mov	r0, r3
 8017650:	371c      	adds	r7, #28
 8017652:	46bd      	mov	sp, r7
 8017654:	bd90      	pop	{r4, r7, pc}
 8017656:	bf00      	nop
 8017658:	0802dc3c 	.word	0x0802dc3c
 801765c:	0802e3f8 	.word	0x0802e3f8
 8017660:	0802dc90 	.word	0x0802dc90

08017664 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017664:	b590      	push	{r4, r7, lr}
 8017666:	b087      	sub	sp, #28
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801766c:	2300      	movs	r3, #0
 801766e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d106      	bne.n	8017684 <tcp_keepalive+0x20>
 8017676:	4b18      	ldr	r3, [pc, #96]	@ (80176d8 <tcp_keepalive+0x74>)
 8017678:	f640 0224 	movw	r2, #2084	@ 0x824
 801767c:	4917      	ldr	r1, [pc, #92]	@ (80176dc <tcp_keepalive+0x78>)
 801767e:	4818      	ldr	r0, [pc, #96]	@ (80176e0 <tcp_keepalive+0x7c>)
 8017680:	f011 fe50 	bl	8029324 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017684:	7dfb      	ldrb	r3, [r7, #23]
 8017686:	b29c      	uxth	r4, r3
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801768c:	3b01      	subs	r3, #1
 801768e:	4618      	mov	r0, r3
 8017690:	f7f8 f995 	bl	800f9be <lwip_htonl>
 8017694:	4603      	mov	r3, r0
 8017696:	2200      	movs	r2, #0
 8017698:	4621      	mov	r1, r4
 801769a:	6878      	ldr	r0, [r7, #4]
 801769c:	f7ff fe68 	bl	8017370 <tcp_output_alloc_header>
 80176a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80176a2:	693b      	ldr	r3, [r7, #16]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d102      	bne.n	80176ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80176a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80176ac:	e010      	b.n	80176d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80176ae:	7dfb      	ldrb	r3, [r7, #23]
 80176b0:	2200      	movs	r2, #0
 80176b2:	6939      	ldr	r1, [r7, #16]
 80176b4:	6878      	ldr	r0, [r7, #4]
 80176b6:	f7ff fe99 	bl	80173ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80176ba:	687a      	ldr	r2, [r7, #4]
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	3304      	adds	r3, #4
 80176c0:	6939      	ldr	r1, [r7, #16]
 80176c2:	6878      	ldr	r0, [r7, #4]
 80176c4:	f7ff fed0 	bl	8017468 <tcp_output_control_segment>
 80176c8:	4603      	mov	r3, r0
 80176ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80176cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80176d0:	4618      	mov	r0, r3
 80176d2:	371c      	adds	r7, #28
 80176d4:	46bd      	mov	sp, r7
 80176d6:	bd90      	pop	{r4, r7, pc}
 80176d8:	0802dc3c 	.word	0x0802dc3c
 80176dc:	0802e418 	.word	0x0802e418
 80176e0:	0802dc90 	.word	0x0802dc90

080176e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80176e4:	b590      	push	{r4, r7, lr}
 80176e6:	b08b      	sub	sp, #44	@ 0x2c
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80176ec:	2300      	movs	r3, #0
 80176ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d106      	bne.n	8017706 <tcp_zero_window_probe+0x22>
 80176f8:	4b4c      	ldr	r3, [pc, #304]	@ (801782c <tcp_zero_window_probe+0x148>)
 80176fa:	f640 024f 	movw	r2, #2127	@ 0x84f
 80176fe:	494c      	ldr	r1, [pc, #304]	@ (8017830 <tcp_zero_window_probe+0x14c>)
 8017700:	484c      	ldr	r0, [pc, #304]	@ (8017834 <tcp_zero_window_probe+0x150>)
 8017702:	f011 fe0f 	bl	8029324 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801770a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801770c:	6a3b      	ldr	r3, [r7, #32]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d101      	bne.n	8017716 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017712:	2300      	movs	r3, #0
 8017714:	e086      	b.n	8017824 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801771c:	2bff      	cmp	r3, #255	@ 0xff
 801771e:	d007      	beq.n	8017730 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017726:	3301      	adds	r3, #1
 8017728:	b2da      	uxtb	r2, r3
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017730:	6a3b      	ldr	r3, [r7, #32]
 8017732:	68db      	ldr	r3, [r3, #12]
 8017734:	899b      	ldrh	r3, [r3, #12]
 8017736:	b29b      	uxth	r3, r3
 8017738:	4618      	mov	r0, r3
 801773a:	f7f8 f92b 	bl	800f994 <lwip_htons>
 801773e:	4603      	mov	r3, r0
 8017740:	b2db      	uxtb	r3, r3
 8017742:	f003 0301 	and.w	r3, r3, #1
 8017746:	2b00      	cmp	r3, #0
 8017748:	d005      	beq.n	8017756 <tcp_zero_window_probe+0x72>
 801774a:	6a3b      	ldr	r3, [r7, #32]
 801774c:	891b      	ldrh	r3, [r3, #8]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d101      	bne.n	8017756 <tcp_zero_window_probe+0x72>
 8017752:	2301      	movs	r3, #1
 8017754:	e000      	b.n	8017758 <tcp_zero_window_probe+0x74>
 8017756:	2300      	movs	r3, #0
 8017758:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801775a:	7ffb      	ldrb	r3, [r7, #31]
 801775c:	2b00      	cmp	r3, #0
 801775e:	bf0c      	ite	eq
 8017760:	2301      	moveq	r3, #1
 8017762:	2300      	movne	r3, #0
 8017764:	b2db      	uxtb	r3, r3
 8017766:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801776c:	b299      	uxth	r1, r3
 801776e:	6a3b      	ldr	r3, [r7, #32]
 8017770:	68db      	ldr	r3, [r3, #12]
 8017772:	685b      	ldr	r3, [r3, #4]
 8017774:	8bba      	ldrh	r2, [r7, #28]
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f7ff fdfa 	bl	8017370 <tcp_output_alloc_header>
 801777c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801777e:	69bb      	ldr	r3, [r7, #24]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d102      	bne.n	801778a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017784:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017788:	e04c      	b.n	8017824 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801778a:	69bb      	ldr	r3, [r7, #24]
 801778c:	685b      	ldr	r3, [r3, #4]
 801778e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017790:	7ffb      	ldrb	r3, [r7, #31]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d011      	beq.n	80177ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017796:	697b      	ldr	r3, [r7, #20]
 8017798:	899b      	ldrh	r3, [r3, #12]
 801779a:	b29b      	uxth	r3, r3
 801779c:	b21b      	sxth	r3, r3
 801779e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80177a2:	b21c      	sxth	r4, r3
 80177a4:	2011      	movs	r0, #17
 80177a6:	f7f8 f8f5 	bl	800f994 <lwip_htons>
 80177aa:	4603      	mov	r3, r0
 80177ac:	b21b      	sxth	r3, r3
 80177ae:	4323      	orrs	r3, r4
 80177b0:	b21b      	sxth	r3, r3
 80177b2:	b29a      	uxth	r2, r3
 80177b4:	697b      	ldr	r3, [r7, #20]
 80177b6:	819a      	strh	r2, [r3, #12]
 80177b8:	e010      	b.n	80177dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80177ba:	69bb      	ldr	r3, [r7, #24]
 80177bc:	685b      	ldr	r3, [r3, #4]
 80177be:	3314      	adds	r3, #20
 80177c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80177c2:	6a3b      	ldr	r3, [r7, #32]
 80177c4:	6858      	ldr	r0, [r3, #4]
 80177c6:	6a3b      	ldr	r3, [r7, #32]
 80177c8:	685b      	ldr	r3, [r3, #4]
 80177ca:	891a      	ldrh	r2, [r3, #8]
 80177cc:	6a3b      	ldr	r3, [r7, #32]
 80177ce:	891b      	ldrh	r3, [r3, #8]
 80177d0:	1ad3      	subs	r3, r2, r3
 80177d2:	b29b      	uxth	r3, r3
 80177d4:	2201      	movs	r2, #1
 80177d6:	6939      	ldr	r1, [r7, #16]
 80177d8:	f7f9 ffdc 	bl	8011794 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80177dc:	6a3b      	ldr	r3, [r7, #32]
 80177de:	68db      	ldr	r3, [r3, #12]
 80177e0:	685b      	ldr	r3, [r3, #4]
 80177e2:	4618      	mov	r0, r3
 80177e4:	f7f8 f8eb 	bl	800f9be <lwip_htonl>
 80177e8:	4603      	mov	r3, r0
 80177ea:	3301      	adds	r3, #1
 80177ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	1ad3      	subs	r3, r2, r3
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	da02      	bge.n	8017800 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	68fa      	ldr	r2, [r7, #12]
 80177fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017804:	2200      	movs	r2, #0
 8017806:	69b9      	ldr	r1, [r7, #24]
 8017808:	6878      	ldr	r0, [r7, #4]
 801780a:	f7ff fdef 	bl	80173ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801780e:	687a      	ldr	r2, [r7, #4]
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	3304      	adds	r3, #4
 8017814:	69b9      	ldr	r1, [r7, #24]
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f7ff fe26 	bl	8017468 <tcp_output_control_segment>
 801781c:	4603      	mov	r3, r0
 801781e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017820:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017824:	4618      	mov	r0, r3
 8017826:	372c      	adds	r7, #44	@ 0x2c
 8017828:	46bd      	mov	sp, r7
 801782a:	bd90      	pop	{r4, r7, pc}
 801782c:	0802dc3c 	.word	0x0802dc3c
 8017830:	0802e434 	.word	0x0802e434
 8017834:	0802dc90 	.word	0x0802dc90

08017838 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017838:	b580      	push	{r7, lr}
 801783a:	b082      	sub	sp, #8
 801783c:	af00      	add	r7, sp, #0
 801783e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017840:	f7fa f896 	bl	8011970 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017844:	4b0a      	ldr	r3, [pc, #40]	@ (8017870 <tcpip_tcp_timer+0x38>)
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d103      	bne.n	8017854 <tcpip_tcp_timer+0x1c>
 801784c:	4b09      	ldr	r3, [pc, #36]	@ (8017874 <tcpip_tcp_timer+0x3c>)
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d005      	beq.n	8017860 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017854:	2200      	movs	r2, #0
 8017856:	4908      	ldr	r1, [pc, #32]	@ (8017878 <tcpip_tcp_timer+0x40>)
 8017858:	20fa      	movs	r0, #250	@ 0xfa
 801785a:	f000 f8f3 	bl	8017a44 <sys_timeout>
 801785e:	e003      	b.n	8017868 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017860:	4b06      	ldr	r3, [pc, #24]	@ (801787c <tcpip_tcp_timer+0x44>)
 8017862:	2200      	movs	r2, #0
 8017864:	601a      	str	r2, [r3, #0]
  }
}
 8017866:	bf00      	nop
 8017868:	bf00      	nop
 801786a:	3708      	adds	r7, #8
 801786c:	46bd      	mov	sp, r7
 801786e:	bd80      	pop	{r7, pc}
 8017870:	200425c0 	.word	0x200425c0
 8017874:	200425c4 	.word	0x200425c4
 8017878:	08017839 	.word	0x08017839
 801787c:	2004260c 	.word	0x2004260c

08017880 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017884:	4b0a      	ldr	r3, [pc, #40]	@ (80178b0 <tcp_timer_needed+0x30>)
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d10f      	bne.n	80178ac <tcp_timer_needed+0x2c>
 801788c:	4b09      	ldr	r3, [pc, #36]	@ (80178b4 <tcp_timer_needed+0x34>)
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d103      	bne.n	801789c <tcp_timer_needed+0x1c>
 8017894:	4b08      	ldr	r3, [pc, #32]	@ (80178b8 <tcp_timer_needed+0x38>)
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d007      	beq.n	80178ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801789c:	4b04      	ldr	r3, [pc, #16]	@ (80178b0 <tcp_timer_needed+0x30>)
 801789e:	2201      	movs	r2, #1
 80178a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80178a2:	2200      	movs	r2, #0
 80178a4:	4905      	ldr	r1, [pc, #20]	@ (80178bc <tcp_timer_needed+0x3c>)
 80178a6:	20fa      	movs	r0, #250	@ 0xfa
 80178a8:	f000 f8cc 	bl	8017a44 <sys_timeout>
  }
}
 80178ac:	bf00      	nop
 80178ae:	bd80      	pop	{r7, pc}
 80178b0:	2004260c 	.word	0x2004260c
 80178b4:	200425c0 	.word	0x200425c0
 80178b8:	200425c4 	.word	0x200425c4
 80178bc:	08017839 	.word	0x08017839

080178c0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b086      	sub	sp, #24
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	60f8      	str	r0, [r7, #12]
 80178c8:	60b9      	str	r1, [r7, #8]
 80178ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80178cc:	200b      	movs	r0, #11
 80178ce:	f7f8 fdb9 	bl	8010444 <memp_malloc>
 80178d2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80178d4:	693b      	ldr	r3, [r7, #16]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d109      	bne.n	80178ee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80178da:	693b      	ldr	r3, [r7, #16]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d151      	bne.n	8017984 <sys_timeout_abs+0xc4>
 80178e0:	4b2a      	ldr	r3, [pc, #168]	@ (801798c <sys_timeout_abs+0xcc>)
 80178e2:	22be      	movs	r2, #190	@ 0xbe
 80178e4:	492a      	ldr	r1, [pc, #168]	@ (8017990 <sys_timeout_abs+0xd0>)
 80178e6:	482b      	ldr	r0, [pc, #172]	@ (8017994 <sys_timeout_abs+0xd4>)
 80178e8:	f011 fd1c 	bl	8029324 <iprintf>
    return;
 80178ec:	e04a      	b.n	8017984 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80178ee:	693b      	ldr	r3, [r7, #16]
 80178f0:	2200      	movs	r2, #0
 80178f2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80178f4:	693b      	ldr	r3, [r7, #16]
 80178f6:	68ba      	ldr	r2, [r7, #8]
 80178f8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80178fa:	693b      	ldr	r3, [r7, #16]
 80178fc:	687a      	ldr	r2, [r7, #4]
 80178fe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017900:	693b      	ldr	r3, [r7, #16]
 8017902:	68fa      	ldr	r2, [r7, #12]
 8017904:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017906:	4b24      	ldr	r3, [pc, #144]	@ (8017998 <sys_timeout_abs+0xd8>)
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d103      	bne.n	8017916 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801790e:	4a22      	ldr	r2, [pc, #136]	@ (8017998 <sys_timeout_abs+0xd8>)
 8017910:	693b      	ldr	r3, [r7, #16]
 8017912:	6013      	str	r3, [r2, #0]
    return;
 8017914:	e037      	b.n	8017986 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017916:	693b      	ldr	r3, [r7, #16]
 8017918:	685a      	ldr	r2, [r3, #4]
 801791a:	4b1f      	ldr	r3, [pc, #124]	@ (8017998 <sys_timeout_abs+0xd8>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	685b      	ldr	r3, [r3, #4]
 8017920:	1ad3      	subs	r3, r2, r3
 8017922:	0fdb      	lsrs	r3, r3, #31
 8017924:	f003 0301 	and.w	r3, r3, #1
 8017928:	b2db      	uxtb	r3, r3
 801792a:	2b00      	cmp	r3, #0
 801792c:	d007      	beq.n	801793e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801792e:	4b1a      	ldr	r3, [pc, #104]	@ (8017998 <sys_timeout_abs+0xd8>)
 8017930:	681a      	ldr	r2, [r3, #0]
 8017932:	693b      	ldr	r3, [r7, #16]
 8017934:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017936:	4a18      	ldr	r2, [pc, #96]	@ (8017998 <sys_timeout_abs+0xd8>)
 8017938:	693b      	ldr	r3, [r7, #16]
 801793a:	6013      	str	r3, [r2, #0]
 801793c:	e023      	b.n	8017986 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801793e:	4b16      	ldr	r3, [pc, #88]	@ (8017998 <sys_timeout_abs+0xd8>)
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	617b      	str	r3, [r7, #20]
 8017944:	e01a      	b.n	801797c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017946:	697b      	ldr	r3, [r7, #20]
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d00b      	beq.n	8017966 <sys_timeout_abs+0xa6>
 801794e:	693b      	ldr	r3, [r7, #16]
 8017950:	685a      	ldr	r2, [r3, #4]
 8017952:	697b      	ldr	r3, [r7, #20]
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	685b      	ldr	r3, [r3, #4]
 8017958:	1ad3      	subs	r3, r2, r3
 801795a:	0fdb      	lsrs	r3, r3, #31
 801795c:	f003 0301 	and.w	r3, r3, #1
 8017960:	b2db      	uxtb	r3, r3
 8017962:	2b00      	cmp	r3, #0
 8017964:	d007      	beq.n	8017976 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017966:	697b      	ldr	r3, [r7, #20]
 8017968:	681a      	ldr	r2, [r3, #0]
 801796a:	693b      	ldr	r3, [r7, #16]
 801796c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801796e:	697b      	ldr	r3, [r7, #20]
 8017970:	693a      	ldr	r2, [r7, #16]
 8017972:	601a      	str	r2, [r3, #0]
        break;
 8017974:	e007      	b.n	8017986 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017976:	697b      	ldr	r3, [r7, #20]
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	617b      	str	r3, [r7, #20]
 801797c:	697b      	ldr	r3, [r7, #20]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d1e1      	bne.n	8017946 <sys_timeout_abs+0x86>
 8017982:	e000      	b.n	8017986 <sys_timeout_abs+0xc6>
    return;
 8017984:	bf00      	nop
      }
    }
  }
}
 8017986:	3718      	adds	r7, #24
 8017988:	46bd      	mov	sp, r7
 801798a:	bd80      	pop	{r7, pc}
 801798c:	0802e458 	.word	0x0802e458
 8017990:	0802e48c 	.word	0x0802e48c
 8017994:	0802e4cc 	.word	0x0802e4cc
 8017998:	20042604 	.word	0x20042604

0801799c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b086      	sub	sp, #24
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80179a8:	697b      	ldr	r3, [r7, #20]
 80179aa:	685b      	ldr	r3, [r3, #4]
 80179ac:	4798      	blx	r3

  now = sys_now();
 80179ae:	f7f0 fb55 	bl	800805c <sys_now>
 80179b2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80179b4:	697b      	ldr	r3, [r7, #20]
 80179b6:	681a      	ldr	r2, [r3, #0]
 80179b8:	4b0f      	ldr	r3, [pc, #60]	@ (80179f8 <lwip_cyclic_timer+0x5c>)
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	4413      	add	r3, r2
 80179be:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80179c0:	68fa      	ldr	r2, [r7, #12]
 80179c2:	693b      	ldr	r3, [r7, #16]
 80179c4:	1ad3      	subs	r3, r2, r3
 80179c6:	0fdb      	lsrs	r3, r3, #31
 80179c8:	f003 0301 	and.w	r3, r3, #1
 80179cc:	b2db      	uxtb	r3, r3
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d009      	beq.n	80179e6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80179d2:	697b      	ldr	r3, [r7, #20]
 80179d4:	681a      	ldr	r2, [r3, #0]
 80179d6:	693b      	ldr	r3, [r7, #16]
 80179d8:	4413      	add	r3, r2
 80179da:	687a      	ldr	r2, [r7, #4]
 80179dc:	4907      	ldr	r1, [pc, #28]	@ (80179fc <lwip_cyclic_timer+0x60>)
 80179de:	4618      	mov	r0, r3
 80179e0:	f7ff ff6e 	bl	80178c0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80179e4:	e004      	b.n	80179f0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80179e6:	687a      	ldr	r2, [r7, #4]
 80179e8:	4904      	ldr	r1, [pc, #16]	@ (80179fc <lwip_cyclic_timer+0x60>)
 80179ea:	68f8      	ldr	r0, [r7, #12]
 80179ec:	f7ff ff68 	bl	80178c0 <sys_timeout_abs>
}
 80179f0:	bf00      	nop
 80179f2:	3718      	adds	r7, #24
 80179f4:	46bd      	mov	sp, r7
 80179f6:	bd80      	pop	{r7, pc}
 80179f8:	20042608 	.word	0x20042608
 80179fc:	0801799d 	.word	0x0801799d

08017a00 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017a00:	b580      	push	{r7, lr}
 8017a02:	b082      	sub	sp, #8
 8017a04:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017a06:	2301      	movs	r3, #1
 8017a08:	607b      	str	r3, [r7, #4]
 8017a0a:	e00e      	b.n	8017a2a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8017a3c <sys_timeouts_init+0x3c>)
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	00db      	lsls	r3, r3, #3
 8017a18:	4a08      	ldr	r2, [pc, #32]	@ (8017a3c <sys_timeouts_init+0x3c>)
 8017a1a:	4413      	add	r3, r2
 8017a1c:	461a      	mov	r2, r3
 8017a1e:	4908      	ldr	r1, [pc, #32]	@ (8017a40 <sys_timeouts_init+0x40>)
 8017a20:	f000 f810 	bl	8017a44 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	3301      	adds	r3, #1
 8017a28:	607b      	str	r3, [r7, #4]
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	2b03      	cmp	r3, #3
 8017a2e:	d9ed      	bls.n	8017a0c <sys_timeouts_init+0xc>
  }
}
 8017a30:	bf00      	nop
 8017a32:	bf00      	nop
 8017a34:	3708      	adds	r7, #8
 8017a36:	46bd      	mov	sp, r7
 8017a38:	bd80      	pop	{r7, pc}
 8017a3a:	bf00      	nop
 8017a3c:	0802f4ec 	.word	0x0802f4ec
 8017a40:	0801799d 	.word	0x0801799d

08017a44 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b086      	sub	sp, #24
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	60f8      	str	r0, [r7, #12]
 8017a4c:	60b9      	str	r1, [r7, #8]
 8017a4e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017a56:	d306      	bcc.n	8017a66 <sys_timeout+0x22>
 8017a58:	4b0a      	ldr	r3, [pc, #40]	@ (8017a84 <sys_timeout+0x40>)
 8017a5a:	f240 1229 	movw	r2, #297	@ 0x129
 8017a5e:	490a      	ldr	r1, [pc, #40]	@ (8017a88 <sys_timeout+0x44>)
 8017a60:	480a      	ldr	r0, [pc, #40]	@ (8017a8c <sys_timeout+0x48>)
 8017a62:	f011 fc5f 	bl	8029324 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017a66:	f7f0 faf9 	bl	800805c <sys_now>
 8017a6a:	4602      	mov	r2, r0
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	4413      	add	r3, r2
 8017a70:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017a72:	687a      	ldr	r2, [r7, #4]
 8017a74:	68b9      	ldr	r1, [r7, #8]
 8017a76:	6978      	ldr	r0, [r7, #20]
 8017a78:	f7ff ff22 	bl	80178c0 <sys_timeout_abs>
#endif
}
 8017a7c:	bf00      	nop
 8017a7e:	3718      	adds	r7, #24
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd80      	pop	{r7, pc}
 8017a84:	0802e458 	.word	0x0802e458
 8017a88:	0802e4f4 	.word	0x0802e4f4
 8017a8c:	0802e4cc 	.word	0x0802e4cc

08017a90 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b084      	sub	sp, #16
 8017a94:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017a96:	f7f0 fae1 	bl	800805c <sys_now>
 8017a9a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017a9c:	4b17      	ldr	r3, [pc, #92]	@ (8017afc <sys_check_timeouts+0x6c>)
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017aa2:	68bb      	ldr	r3, [r7, #8]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d022      	beq.n	8017aee <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017aa8:	68bb      	ldr	r3, [r7, #8]
 8017aaa:	685b      	ldr	r3, [r3, #4]
 8017aac:	68fa      	ldr	r2, [r7, #12]
 8017aae:	1ad3      	subs	r3, r2, r3
 8017ab0:	0fdb      	lsrs	r3, r3, #31
 8017ab2:	f003 0301 	and.w	r3, r3, #1
 8017ab6:	b2db      	uxtb	r3, r3
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d11a      	bne.n	8017af2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017abc:	68bb      	ldr	r3, [r7, #8]
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	4a0e      	ldr	r2, [pc, #56]	@ (8017afc <sys_check_timeouts+0x6c>)
 8017ac2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017ac4:	68bb      	ldr	r3, [r7, #8]
 8017ac6:	689b      	ldr	r3, [r3, #8]
 8017ac8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017aca:	68bb      	ldr	r3, [r7, #8]
 8017acc:	68db      	ldr	r3, [r3, #12]
 8017ace:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017ad0:	68bb      	ldr	r3, [r7, #8]
 8017ad2:	685b      	ldr	r3, [r3, #4]
 8017ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8017b00 <sys_check_timeouts+0x70>)
 8017ad6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017ad8:	68b9      	ldr	r1, [r7, #8]
 8017ada:	200b      	movs	r0, #11
 8017adc:	f7f8 fd28 	bl	8010530 <memp_free>
    if (handler != NULL) {
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d0da      	beq.n	8017a9c <sys_check_timeouts+0xc>
      handler(arg);
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	6838      	ldr	r0, [r7, #0]
 8017aea:	4798      	blx	r3
  do {
 8017aec:	e7d6      	b.n	8017a9c <sys_check_timeouts+0xc>
      return;
 8017aee:	bf00      	nop
 8017af0:	e000      	b.n	8017af4 <sys_check_timeouts+0x64>
      return;
 8017af2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017af4:	3710      	adds	r7, #16
 8017af6:	46bd      	mov	sp, r7
 8017af8:	bd80      	pop	{r7, pc}
 8017afa:	bf00      	nop
 8017afc:	20042604 	.word	0x20042604
 8017b00:	20042608 	.word	0x20042608

08017b04 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017b0a:	4b16      	ldr	r3, [pc, #88]	@ (8017b64 <sys_timeouts_sleeptime+0x60>)
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d102      	bne.n	8017b18 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017b12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017b16:	e020      	b.n	8017b5a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017b18:	f7f0 faa0 	bl	800805c <sys_now>
 8017b1c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017b1e:	4b11      	ldr	r3, [pc, #68]	@ (8017b64 <sys_timeouts_sleeptime+0x60>)
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	685a      	ldr	r2, [r3, #4]
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	1ad3      	subs	r3, r2, r3
 8017b28:	0fdb      	lsrs	r3, r3, #31
 8017b2a:	f003 0301 	and.w	r3, r3, #1
 8017b2e:	b2db      	uxtb	r3, r3
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d001      	beq.n	8017b38 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017b34:	2300      	movs	r3, #0
 8017b36:	e010      	b.n	8017b5a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017b38:	4b0a      	ldr	r3, [pc, #40]	@ (8017b64 <sys_timeouts_sleeptime+0x60>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	685a      	ldr	r2, [r3, #4]
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	1ad3      	subs	r3, r2, r3
 8017b42:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017b44:	683b      	ldr	r3, [r7, #0]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	da06      	bge.n	8017b58 <sys_timeouts_sleeptime+0x54>
 8017b4a:	4b07      	ldr	r3, [pc, #28]	@ (8017b68 <sys_timeouts_sleeptime+0x64>)
 8017b4c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8017b50:	4906      	ldr	r1, [pc, #24]	@ (8017b6c <sys_timeouts_sleeptime+0x68>)
 8017b52:	4807      	ldr	r0, [pc, #28]	@ (8017b70 <sys_timeouts_sleeptime+0x6c>)
 8017b54:	f011 fbe6 	bl	8029324 <iprintf>
    return ret;
 8017b58:	683b      	ldr	r3, [r7, #0]
  }
}
 8017b5a:	4618      	mov	r0, r3
 8017b5c:	3708      	adds	r7, #8
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	bd80      	pop	{r7, pc}
 8017b62:	bf00      	nop
 8017b64:	20042604 	.word	0x20042604
 8017b68:	0802e458 	.word	0x0802e458
 8017b6c:	0802e52c 	.word	0x0802e52c
 8017b70:	0802e4cc 	.word	0x0802e4cc

08017b74 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017b78:	f010 fcf0 	bl	802855c <rand>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	b29b      	uxth	r3, r3
 8017b80:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017b84:	b29b      	uxth	r3, r3
 8017b86:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8017b8a:	b29a      	uxth	r2, r3
 8017b8c:	4b01      	ldr	r3, [pc, #4]	@ (8017b94 <udp_init+0x20>)
 8017b8e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017b90:	bf00      	nop
 8017b92:	bd80      	pop	{r7, pc}
 8017b94:	20000034 	.word	0x20000034

08017b98 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017b98:	b480      	push	{r7}
 8017b9a:	b083      	sub	sp, #12
 8017b9c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017ba2:	4b17      	ldr	r3, [pc, #92]	@ (8017c00 <udp_new_port+0x68>)
 8017ba4:	881b      	ldrh	r3, [r3, #0]
 8017ba6:	1c5a      	adds	r2, r3, #1
 8017ba8:	b291      	uxth	r1, r2
 8017baa:	4a15      	ldr	r2, [pc, #84]	@ (8017c00 <udp_new_port+0x68>)
 8017bac:	8011      	strh	r1, [r2, #0]
 8017bae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017bb2:	4293      	cmp	r3, r2
 8017bb4:	d103      	bne.n	8017bbe <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017bb6:	4b12      	ldr	r3, [pc, #72]	@ (8017c00 <udp_new_port+0x68>)
 8017bb8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8017bbc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017bbe:	4b11      	ldr	r3, [pc, #68]	@ (8017c04 <udp_new_port+0x6c>)
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	603b      	str	r3, [r7, #0]
 8017bc4:	e011      	b.n	8017bea <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017bc6:	683b      	ldr	r3, [r7, #0]
 8017bc8:	8a5a      	ldrh	r2, [r3, #18]
 8017bca:	4b0d      	ldr	r3, [pc, #52]	@ (8017c00 <udp_new_port+0x68>)
 8017bcc:	881b      	ldrh	r3, [r3, #0]
 8017bce:	429a      	cmp	r2, r3
 8017bd0:	d108      	bne.n	8017be4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017bd2:	88fb      	ldrh	r3, [r7, #6]
 8017bd4:	3301      	adds	r3, #1
 8017bd6:	80fb      	strh	r3, [r7, #6]
 8017bd8:	88fb      	ldrh	r3, [r7, #6]
 8017bda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017bde:	d3e0      	bcc.n	8017ba2 <udp_new_port+0xa>
        return 0;
 8017be0:	2300      	movs	r3, #0
 8017be2:	e007      	b.n	8017bf4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	68db      	ldr	r3, [r3, #12]
 8017be8:	603b      	str	r3, [r7, #0]
 8017bea:	683b      	ldr	r3, [r7, #0]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d1ea      	bne.n	8017bc6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017bf0:	4b03      	ldr	r3, [pc, #12]	@ (8017c00 <udp_new_port+0x68>)
 8017bf2:	881b      	ldrh	r3, [r3, #0]
}
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	370c      	adds	r7, #12
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bfe:	4770      	bx	lr
 8017c00:	20000034 	.word	0x20000034
 8017c04:	20042610 	.word	0x20042610

08017c08 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b084      	sub	sp, #16
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	60f8      	str	r0, [r7, #12]
 8017c10:	60b9      	str	r1, [r7, #8]
 8017c12:	4613      	mov	r3, r2
 8017c14:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d105      	bne.n	8017c28 <udp_input_local_match+0x20>
 8017c1c:	4b27      	ldr	r3, [pc, #156]	@ (8017cbc <udp_input_local_match+0xb4>)
 8017c1e:	2287      	movs	r2, #135	@ 0x87
 8017c20:	4927      	ldr	r1, [pc, #156]	@ (8017cc0 <udp_input_local_match+0xb8>)
 8017c22:	4828      	ldr	r0, [pc, #160]	@ (8017cc4 <udp_input_local_match+0xbc>)
 8017c24:	f011 fb7e 	bl	8029324 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017c28:	68bb      	ldr	r3, [r7, #8]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d105      	bne.n	8017c3a <udp_input_local_match+0x32>
 8017c2e:	4b23      	ldr	r3, [pc, #140]	@ (8017cbc <udp_input_local_match+0xb4>)
 8017c30:	2288      	movs	r2, #136	@ 0x88
 8017c32:	4925      	ldr	r1, [pc, #148]	@ (8017cc8 <udp_input_local_match+0xc0>)
 8017c34:	4823      	ldr	r0, [pc, #140]	@ (8017cc4 <udp_input_local_match+0xbc>)
 8017c36:	f011 fb75 	bl	8029324 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	7a1b      	ldrb	r3, [r3, #8]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d00b      	beq.n	8017c5a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	7a1a      	ldrb	r2, [r3, #8]
 8017c46:	4b21      	ldr	r3, [pc, #132]	@ (8017ccc <udp_input_local_match+0xc4>)
 8017c48:	685b      	ldr	r3, [r3, #4]
 8017c4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017c4e:	3301      	adds	r3, #1
 8017c50:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017c52:	429a      	cmp	r2, r3
 8017c54:	d001      	beq.n	8017c5a <udp_input_local_match+0x52>
    return 0;
 8017c56:	2300      	movs	r3, #0
 8017c58:	e02b      	b.n	8017cb2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017c5a:	79fb      	ldrb	r3, [r7, #7]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d018      	beq.n	8017c92 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d013      	beq.n	8017c8e <udp_input_local_match+0x86>
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d00f      	beq.n	8017c8e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017c6e:	4b17      	ldr	r3, [pc, #92]	@ (8017ccc <udp_input_local_match+0xc4>)
 8017c70:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017c72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017c76:	d00a      	beq.n	8017c8e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	681a      	ldr	r2, [r3, #0]
 8017c7c:	4b13      	ldr	r3, [pc, #76]	@ (8017ccc <udp_input_local_match+0xc4>)
 8017c7e:	695b      	ldr	r3, [r3, #20]
 8017c80:	405a      	eors	r2, r3
 8017c82:	68bb      	ldr	r3, [r7, #8]
 8017c84:	3308      	adds	r3, #8
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d110      	bne.n	8017cb0 <udp_input_local_match+0xa8>
          return 1;
 8017c8e:	2301      	movs	r3, #1
 8017c90:	e00f      	b.n	8017cb2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d009      	beq.n	8017cac <udp_input_local_match+0xa4>
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d005      	beq.n	8017cac <udp_input_local_match+0xa4>
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	681a      	ldr	r2, [r3, #0]
 8017ca4:	4b09      	ldr	r3, [pc, #36]	@ (8017ccc <udp_input_local_match+0xc4>)
 8017ca6:	695b      	ldr	r3, [r3, #20]
 8017ca8:	429a      	cmp	r2, r3
 8017caa:	d101      	bne.n	8017cb0 <udp_input_local_match+0xa8>
        return 1;
 8017cac:	2301      	movs	r3, #1
 8017cae:	e000      	b.n	8017cb2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017cb0:	2300      	movs	r3, #0
}
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	3710      	adds	r7, #16
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	bd80      	pop	{r7, pc}
 8017cba:	bf00      	nop
 8017cbc:	0802e540 	.word	0x0802e540
 8017cc0:	0802e570 	.word	0x0802e570
 8017cc4:	0802e594 	.word	0x0802e594
 8017cc8:	0802e5bc 	.word	0x0802e5bc
 8017ccc:	20037370 	.word	0x20037370

08017cd0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017cd0:	b590      	push	{r4, r7, lr}
 8017cd2:	b08d      	sub	sp, #52	@ 0x34
 8017cd4:	af02      	add	r7, sp, #8
 8017cd6:	6078      	str	r0, [r7, #4]
 8017cd8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017cda:	2300      	movs	r3, #0
 8017cdc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d105      	bne.n	8017cf0 <udp_input+0x20>
 8017ce4:	4b7c      	ldr	r3, [pc, #496]	@ (8017ed8 <udp_input+0x208>)
 8017ce6:	22cf      	movs	r2, #207	@ 0xcf
 8017ce8:	497c      	ldr	r1, [pc, #496]	@ (8017edc <udp_input+0x20c>)
 8017cea:	487d      	ldr	r0, [pc, #500]	@ (8017ee0 <udp_input+0x210>)
 8017cec:	f011 fb1a 	bl	8029324 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017cf0:	683b      	ldr	r3, [r7, #0]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d105      	bne.n	8017d02 <udp_input+0x32>
 8017cf6:	4b78      	ldr	r3, [pc, #480]	@ (8017ed8 <udp_input+0x208>)
 8017cf8:	22d0      	movs	r2, #208	@ 0xd0
 8017cfa:	497a      	ldr	r1, [pc, #488]	@ (8017ee4 <udp_input+0x214>)
 8017cfc:	4878      	ldr	r0, [pc, #480]	@ (8017ee0 <udp_input+0x210>)
 8017cfe:	f011 fb11 	bl	8029324 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	895b      	ldrh	r3, [r3, #10]
 8017d06:	2b07      	cmp	r3, #7
 8017d08:	d803      	bhi.n	8017d12 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017d0a:	6878      	ldr	r0, [r7, #4]
 8017d0c:	f7f9 fb3c 	bl	8011388 <pbuf_free>
    goto end;
 8017d10:	e0de      	b.n	8017ed0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	685b      	ldr	r3, [r3, #4]
 8017d16:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017d18:	4b73      	ldr	r3, [pc, #460]	@ (8017ee8 <udp_input+0x218>)
 8017d1a:	695b      	ldr	r3, [r3, #20]
 8017d1c:	4a72      	ldr	r2, [pc, #456]	@ (8017ee8 <udp_input+0x218>)
 8017d1e:	6812      	ldr	r2, [r2, #0]
 8017d20:	4611      	mov	r1, r2
 8017d22:	4618      	mov	r0, r3
 8017d24:	f002 fd2c 	bl	801a780 <ip4_addr_isbroadcast_u32>
 8017d28:	4603      	mov	r3, r0
 8017d2a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	881b      	ldrh	r3, [r3, #0]
 8017d30:	b29b      	uxth	r3, r3
 8017d32:	4618      	mov	r0, r3
 8017d34:	f7f7 fe2e 	bl	800f994 <lwip_htons>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	885b      	ldrh	r3, [r3, #2]
 8017d40:	b29b      	uxth	r3, r3
 8017d42:	4618      	mov	r0, r3
 8017d44:	f7f7 fe26 	bl	800f994 <lwip_htons>
 8017d48:	4603      	mov	r3, r0
 8017d4a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8017d50:	2300      	movs	r3, #0
 8017d52:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017d54:	2300      	movs	r3, #0
 8017d56:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d58:	4b64      	ldr	r3, [pc, #400]	@ (8017eec <udp_input+0x21c>)
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8017d5e:	e054      	b.n	8017e0a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d62:	8a5b      	ldrh	r3, [r3, #18]
 8017d64:	89fa      	ldrh	r2, [r7, #14]
 8017d66:	429a      	cmp	r2, r3
 8017d68:	d14a      	bne.n	8017e00 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017d6a:	7cfb      	ldrb	r3, [r7, #19]
 8017d6c:	461a      	mov	r2, r3
 8017d6e:	6839      	ldr	r1, [r7, #0]
 8017d70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017d72:	f7ff ff49 	bl	8017c08 <udp_input_local_match>
 8017d76:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d041      	beq.n	8017e00 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d7e:	7c1b      	ldrb	r3, [r3, #16]
 8017d80:	f003 0304 	and.w	r3, r3, #4
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d11d      	bne.n	8017dc4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017d88:	69fb      	ldr	r3, [r7, #28]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d102      	bne.n	8017d94 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d90:	61fb      	str	r3, [r7, #28]
 8017d92:	e017      	b.n	8017dc4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017d94:	7cfb      	ldrb	r3, [r7, #19]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d014      	beq.n	8017dc4 <udp_input+0xf4>
 8017d9a:	4b53      	ldr	r3, [pc, #332]	@ (8017ee8 <udp_input+0x218>)
 8017d9c:	695b      	ldr	r3, [r3, #20]
 8017d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017da2:	d10f      	bne.n	8017dc4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017da4:	69fb      	ldr	r3, [r7, #28]
 8017da6:	681a      	ldr	r2, [r3, #0]
 8017da8:	683b      	ldr	r3, [r7, #0]
 8017daa:	3304      	adds	r3, #4
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d008      	beq.n	8017dc4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017db4:	681a      	ldr	r2, [r3, #0]
 8017db6:	683b      	ldr	r3, [r7, #0]
 8017db8:	3304      	adds	r3, #4
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	429a      	cmp	r2, r3
 8017dbe:	d101      	bne.n	8017dc4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dc2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dc6:	8a9b      	ldrh	r3, [r3, #20]
 8017dc8:	8a3a      	ldrh	r2, [r7, #16]
 8017dca:	429a      	cmp	r2, r3
 8017dcc:	d118      	bne.n	8017e00 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dd0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d005      	beq.n	8017de2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dd8:	685a      	ldr	r2, [r3, #4]
 8017dda:	4b43      	ldr	r3, [pc, #268]	@ (8017ee8 <udp_input+0x218>)
 8017ddc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d10e      	bne.n	8017e00 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017de2:	6a3b      	ldr	r3, [r7, #32]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d014      	beq.n	8017e12 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dea:	68da      	ldr	r2, [r3, #12]
 8017dec:	6a3b      	ldr	r3, [r7, #32]
 8017dee:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017df0:	4b3e      	ldr	r3, [pc, #248]	@ (8017eec <udp_input+0x21c>)
 8017df2:	681a      	ldr	r2, [r3, #0]
 8017df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017df6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017df8:	4a3c      	ldr	r2, [pc, #240]	@ (8017eec <udp_input+0x21c>)
 8017dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dfc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017dfe:	e008      	b.n	8017e12 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e02:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e06:	68db      	ldr	r3, [r3, #12]
 8017e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8017e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d1a7      	bne.n	8017d60 <udp_input+0x90>
 8017e10:	e000      	b.n	8017e14 <udp_input+0x144>
        break;
 8017e12:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d101      	bne.n	8017e1e <udp_input+0x14e>
    pcb = uncon_pcb;
 8017e1a:	69fb      	ldr	r3, [r7, #28]
 8017e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d002      	beq.n	8017e2a <udp_input+0x15a>
    for_us = 1;
 8017e24:	2301      	movs	r3, #1
 8017e26:	76fb      	strb	r3, [r7, #27]
 8017e28:	e00a      	b.n	8017e40 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	3304      	adds	r3, #4
 8017e2e:	681a      	ldr	r2, [r3, #0]
 8017e30:	4b2d      	ldr	r3, [pc, #180]	@ (8017ee8 <udp_input+0x218>)
 8017e32:	695b      	ldr	r3, [r3, #20]
 8017e34:	429a      	cmp	r2, r3
 8017e36:	bf0c      	ite	eq
 8017e38:	2301      	moveq	r3, #1
 8017e3a:	2300      	movne	r3, #0
 8017e3c:	b2db      	uxtb	r3, r3
 8017e3e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017e40:	7efb      	ldrb	r3, [r7, #27]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d041      	beq.n	8017eca <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017e46:	2108      	movs	r1, #8
 8017e48:	6878      	ldr	r0, [r7, #4]
 8017e4a:	f7f9 f9e5 	bl	8011218 <pbuf_remove_header>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d00a      	beq.n	8017e6a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017e54:	4b20      	ldr	r3, [pc, #128]	@ (8017ed8 <udp_input+0x208>)
 8017e56:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8017e5a:	4925      	ldr	r1, [pc, #148]	@ (8017ef0 <udp_input+0x220>)
 8017e5c:	4820      	ldr	r0, [pc, #128]	@ (8017ee0 <udp_input+0x210>)
 8017e5e:	f011 fa61 	bl	8029324 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017e62:	6878      	ldr	r0, [r7, #4]
 8017e64:	f7f9 fa90 	bl	8011388 <pbuf_free>
      goto end;
 8017e68:	e032      	b.n	8017ed0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d012      	beq.n	8017e96 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e72:	6a1b      	ldr	r3, [r3, #32]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d00a      	beq.n	8017e8e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e7a:	6a1c      	ldr	r4, [r3, #32]
 8017e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e7e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8017e80:	8a3b      	ldrh	r3, [r7, #16]
 8017e82:	9300      	str	r3, [sp, #0]
 8017e84:	4b1b      	ldr	r3, [pc, #108]	@ (8017ef4 <udp_input+0x224>)
 8017e86:	687a      	ldr	r2, [r7, #4]
 8017e88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017e8a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017e8c:	e021      	b.n	8017ed2 <udp_input+0x202>
        pbuf_free(p);
 8017e8e:	6878      	ldr	r0, [r7, #4]
 8017e90:	f7f9 fa7a 	bl	8011388 <pbuf_free>
        goto end;
 8017e94:	e01c      	b.n	8017ed0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017e96:	7cfb      	ldrb	r3, [r7, #19]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d112      	bne.n	8017ec2 <udp_input+0x1f2>
 8017e9c:	4b12      	ldr	r3, [pc, #72]	@ (8017ee8 <udp_input+0x218>)
 8017e9e:	695b      	ldr	r3, [r3, #20]
 8017ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017ea4:	2be0      	cmp	r3, #224	@ 0xe0
 8017ea6:	d00c      	beq.n	8017ec2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8017ee8 <udp_input+0x218>)
 8017eaa:	899b      	ldrh	r3, [r3, #12]
 8017eac:	3308      	adds	r3, #8
 8017eae:	b29b      	uxth	r3, r3
 8017eb0:	b21b      	sxth	r3, r3
 8017eb2:	4619      	mov	r1, r3
 8017eb4:	6878      	ldr	r0, [r7, #4]
 8017eb6:	f7f9 fa22 	bl	80112fe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017eba:	2103      	movs	r1, #3
 8017ebc:	6878      	ldr	r0, [r7, #4]
 8017ebe:	f001 fbf5 	bl	80196ac <icmp_dest_unreach>
      pbuf_free(p);
 8017ec2:	6878      	ldr	r0, [r7, #4]
 8017ec4:	f7f9 fa60 	bl	8011388 <pbuf_free>
  return;
 8017ec8:	e003      	b.n	8017ed2 <udp_input+0x202>
    pbuf_free(p);
 8017eca:	6878      	ldr	r0, [r7, #4]
 8017ecc:	f7f9 fa5c 	bl	8011388 <pbuf_free>
  return;
 8017ed0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017ed2:	372c      	adds	r7, #44	@ 0x2c
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	bd90      	pop	{r4, r7, pc}
 8017ed8:	0802e540 	.word	0x0802e540
 8017edc:	0802e5e4 	.word	0x0802e5e4
 8017ee0:	0802e594 	.word	0x0802e594
 8017ee4:	0802e5fc 	.word	0x0802e5fc
 8017ee8:	20037370 	.word	0x20037370
 8017eec:	20042610 	.word	0x20042610
 8017ef0:	0802e618 	.word	0x0802e618
 8017ef4:	20037380 	.word	0x20037380

08017ef8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b082      	sub	sp, #8
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
 8017f00:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d109      	bne.n	8017f1c <udp_send+0x24>
 8017f08:	4b11      	ldr	r3, [pc, #68]	@ (8017f50 <udp_send+0x58>)
 8017f0a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8017f0e:	4911      	ldr	r1, [pc, #68]	@ (8017f54 <udp_send+0x5c>)
 8017f10:	4811      	ldr	r0, [pc, #68]	@ (8017f58 <udp_send+0x60>)
 8017f12:	f011 fa07 	bl	8029324 <iprintf>
 8017f16:	f06f 030f 	mvn.w	r3, #15
 8017f1a:	e015      	b.n	8017f48 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8017f1c:	683b      	ldr	r3, [r7, #0]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d109      	bne.n	8017f36 <udp_send+0x3e>
 8017f22:	4b0b      	ldr	r3, [pc, #44]	@ (8017f50 <udp_send+0x58>)
 8017f24:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8017f28:	490c      	ldr	r1, [pc, #48]	@ (8017f5c <udp_send+0x64>)
 8017f2a:	480b      	ldr	r0, [pc, #44]	@ (8017f58 <udp_send+0x60>)
 8017f2c:	f011 f9fa 	bl	8029324 <iprintf>
 8017f30:	f06f 030f 	mvn.w	r3, #15
 8017f34:	e008      	b.n	8017f48 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	1d1a      	adds	r2, r3, #4
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	8a9b      	ldrh	r3, [r3, #20]
 8017f3e:	6839      	ldr	r1, [r7, #0]
 8017f40:	6878      	ldr	r0, [r7, #4]
 8017f42:	f000 f80d 	bl	8017f60 <udp_sendto>
 8017f46:	4603      	mov	r3, r0
}
 8017f48:	4618      	mov	r0, r3
 8017f4a:	3708      	adds	r7, #8
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}
 8017f50:	0802e540 	.word	0x0802e540
 8017f54:	0802e634 	.word	0x0802e634
 8017f58:	0802e594 	.word	0x0802e594
 8017f5c:	0802e64c 	.word	0x0802e64c

08017f60 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b088      	sub	sp, #32
 8017f64:	af02      	add	r7, sp, #8
 8017f66:	60f8      	str	r0, [r7, #12]
 8017f68:	60b9      	str	r1, [r7, #8]
 8017f6a:	607a      	str	r2, [r7, #4]
 8017f6c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d109      	bne.n	8017f88 <udp_sendto+0x28>
 8017f74:	4b36      	ldr	r3, [pc, #216]	@ (8018050 <udp_sendto+0xf0>)
 8017f76:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017f7a:	4936      	ldr	r1, [pc, #216]	@ (8018054 <udp_sendto+0xf4>)
 8017f7c:	4836      	ldr	r0, [pc, #216]	@ (8018058 <udp_sendto+0xf8>)
 8017f7e:	f011 f9d1 	bl	8029324 <iprintf>
 8017f82:	f06f 030f 	mvn.w	r3, #15
 8017f86:	e05e      	b.n	8018046 <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8017f88:	68bb      	ldr	r3, [r7, #8]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d109      	bne.n	8017fa2 <udp_sendto+0x42>
 8017f8e:	4b30      	ldr	r3, [pc, #192]	@ (8018050 <udp_sendto+0xf0>)
 8017f90:	f240 2219 	movw	r2, #537	@ 0x219
 8017f94:	4931      	ldr	r1, [pc, #196]	@ (801805c <udp_sendto+0xfc>)
 8017f96:	4830      	ldr	r0, [pc, #192]	@ (8018058 <udp_sendto+0xf8>)
 8017f98:	f011 f9c4 	bl	8029324 <iprintf>
 8017f9c:	f06f 030f 	mvn.w	r3, #15
 8017fa0:	e051      	b.n	8018046 <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d109      	bne.n	8017fbc <udp_sendto+0x5c>
 8017fa8:	4b29      	ldr	r3, [pc, #164]	@ (8018050 <udp_sendto+0xf0>)
 8017faa:	f240 221a 	movw	r2, #538	@ 0x21a
 8017fae:	492c      	ldr	r1, [pc, #176]	@ (8018060 <udp_sendto+0x100>)
 8017fb0:	4829      	ldr	r0, [pc, #164]	@ (8018058 <udp_sendto+0xf8>)
 8017fb2:	f011 f9b7 	bl	8029324 <iprintf>
 8017fb6:	f06f 030f 	mvn.w	r3, #15
 8017fba:	e044      	b.n	8018046 <udp_sendto+0xe6>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	7a1b      	ldrb	r3, [r3, #8]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d006      	beq.n	8017fd2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	7a1b      	ldrb	r3, [r3, #8]
 8017fc8:	4618      	mov	r0, r3
 8017fca:	f7f8 fde5 	bl	8010b98 <netif_get_by_index>
 8017fce:	6178      	str	r0, [r7, #20]
 8017fd0:	e029      	b.n	8018026 <udp_sendto+0xc6>
  } else {
#if LWIP_MULTICAST_TX_OPTIONS
    netif = NULL;
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	617b      	str	r3, [r7, #20]
    if (ip_addr_ismulticast(dst_ip)) {
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017fde:	2be0      	cmp	r3, #224	@ 0xe0
 8017fe0:	d11a      	bne.n	8018018 <udp_sendto+0xb8>
       * is specified using an interface index. The same approach may be used for
       * IPv4 as well, in which case it overrides the IPv4 multicast override
       * address below. Here we have to look up the netif by going through the
       * list, but by doing so we skip a route lookup. If the interface index has
       * gone stale, we fall through and do the regular route lookup after all. */
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	7f1b      	ldrb	r3, [r3, #28]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d006      	beq.n	8017ff8 <udp_sendto+0x98>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	7f1b      	ldrb	r3, [r3, #28]
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f7f8 fdd2 	bl	8010b98 <netif_get_by_index>
 8017ff4:	6178      	str	r0, [r7, #20]
 8017ff6:	e00f      	b.n	8018018 <udp_sendto+0xb8>
          /* IPv4 does not use source-based routing by default, so we use an
             administratively selected interface for multicast by default.
             However, this can be overridden by setting an interface address
             in pcb->mcast_ip4 that is used for routing. If this routing lookup
             fails, we try regular routing as though no override was set. */
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	699b      	ldr	r3, [r3, #24]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d00b      	beq.n	8018018 <udp_sendto+0xb8>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	699a      	ldr	r2, [r3, #24]
 8018004:	4b17      	ldr	r3, [pc, #92]	@ (8018064 <udp_sendto+0x104>)
 8018006:	681b      	ldr	r3, [r3, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8018008:	429a      	cmp	r2, r3
 801800a:	d005      	beq.n	8018018 <udp_sendto+0xb8>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	3318      	adds	r3, #24
 8018010:	4618      	mov	r0, r3
 8018012:	f002 f85f 	bl	801a0d4 <ip4_route>
 8018016:	6178      	str	r0, [r7, #20]
          }
        }
#endif /* LWIP_IPV4 */
    }

    if (netif == NULL)
 8018018:	697b      	ldr	r3, [r7, #20]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d103      	bne.n	8018026 <udp_sendto+0xc6>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801801e:	6878      	ldr	r0, [r7, #4]
 8018020:	f002 f858 	bl	801a0d4 <ip4_route>
 8018024:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8018026:	697b      	ldr	r3, [r7, #20]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d102      	bne.n	8018032 <udp_sendto+0xd2>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801802c:	f06f 0303 	mvn.w	r3, #3
 8018030:	e009      	b.n	8018046 <udp_sendto+0xe6>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8018032:	887a      	ldrh	r2, [r7, #2]
 8018034:	697b      	ldr	r3, [r7, #20]
 8018036:	9300      	str	r3, [sp, #0]
 8018038:	4613      	mov	r3, r2
 801803a:	687a      	ldr	r2, [r7, #4]
 801803c:	68b9      	ldr	r1, [r7, #8]
 801803e:	68f8      	ldr	r0, [r7, #12]
 8018040:	f000 f812 	bl	8018068 <udp_sendto_if>
 8018044:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018046:	4618      	mov	r0, r3
 8018048:	3718      	adds	r7, #24
 801804a:	46bd      	mov	sp, r7
 801804c:	bd80      	pop	{r7, pc}
 801804e:	bf00      	nop
 8018050:	0802e540 	.word	0x0802e540
 8018054:	0802e664 	.word	0x0802e664
 8018058:	0802e594 	.word	0x0802e594
 801805c:	0802e67c 	.word	0x0802e67c
 8018060:	0802e698 	.word	0x0802e698
 8018064:	0802f510 	.word	0x0802f510

08018068 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8018068:	b580      	push	{r7, lr}
 801806a:	b088      	sub	sp, #32
 801806c:	af02      	add	r7, sp, #8
 801806e:	60f8      	str	r0, [r7, #12]
 8018070:	60b9      	str	r1, [r7, #8]
 8018072:	607a      	str	r2, [r7, #4]
 8018074:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d109      	bne.n	8018090 <udp_sendto_if+0x28>
 801807c:	4b2e      	ldr	r3, [pc, #184]	@ (8018138 <udp_sendto_if+0xd0>)
 801807e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018082:	492e      	ldr	r1, [pc, #184]	@ (801813c <udp_sendto_if+0xd4>)
 8018084:	482e      	ldr	r0, [pc, #184]	@ (8018140 <udp_sendto_if+0xd8>)
 8018086:	f011 f94d 	bl	8029324 <iprintf>
 801808a:	f06f 030f 	mvn.w	r3, #15
 801808e:	e04f      	b.n	8018130 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018090:	68bb      	ldr	r3, [r7, #8]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d109      	bne.n	80180aa <udp_sendto_if+0x42>
 8018096:	4b28      	ldr	r3, [pc, #160]	@ (8018138 <udp_sendto_if+0xd0>)
 8018098:	f240 2281 	movw	r2, #641	@ 0x281
 801809c:	4929      	ldr	r1, [pc, #164]	@ (8018144 <udp_sendto_if+0xdc>)
 801809e:	4828      	ldr	r0, [pc, #160]	@ (8018140 <udp_sendto_if+0xd8>)
 80180a0:	f011 f940 	bl	8029324 <iprintf>
 80180a4:	f06f 030f 	mvn.w	r3, #15
 80180a8:	e042      	b.n	8018130 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d109      	bne.n	80180c4 <udp_sendto_if+0x5c>
 80180b0:	4b21      	ldr	r3, [pc, #132]	@ (8018138 <udp_sendto_if+0xd0>)
 80180b2:	f240 2282 	movw	r2, #642	@ 0x282
 80180b6:	4924      	ldr	r1, [pc, #144]	@ (8018148 <udp_sendto_if+0xe0>)
 80180b8:	4821      	ldr	r0, [pc, #132]	@ (8018140 <udp_sendto_if+0xd8>)
 80180ba:	f011 f933 	bl	8029324 <iprintf>
 80180be:	f06f 030f 	mvn.w	r3, #15
 80180c2:	e035      	b.n	8018130 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80180c4:	6a3b      	ldr	r3, [r7, #32]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d109      	bne.n	80180de <udp_sendto_if+0x76>
 80180ca:	4b1b      	ldr	r3, [pc, #108]	@ (8018138 <udp_sendto_if+0xd0>)
 80180cc:	f240 2283 	movw	r2, #643	@ 0x283
 80180d0:	491e      	ldr	r1, [pc, #120]	@ (801814c <udp_sendto_if+0xe4>)
 80180d2:	481b      	ldr	r0, [pc, #108]	@ (8018140 <udp_sendto_if+0xd8>)
 80180d4:	f011 f926 	bl	8029324 <iprintf>
 80180d8:	f06f 030f 	mvn.w	r3, #15
 80180dc:	e028      	b.n	8018130 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d009      	beq.n	80180f8 <udp_sendto_if+0x90>
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d005      	beq.n	80180f8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80180f4:	2be0      	cmp	r3, #224	@ 0xe0
 80180f6:	d103      	bne.n	8018100 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80180f8:	6a3b      	ldr	r3, [r7, #32]
 80180fa:	3304      	adds	r3, #4
 80180fc:	617b      	str	r3, [r7, #20]
 80180fe:	e00b      	b.n	8018118 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	681a      	ldr	r2, [r3, #0]
 8018104:	6a3b      	ldr	r3, [r7, #32]
 8018106:	3304      	adds	r3, #4
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	429a      	cmp	r2, r3
 801810c:	d002      	beq.n	8018114 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801810e:	f06f 0303 	mvn.w	r3, #3
 8018112:	e00d      	b.n	8018130 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018118:	887a      	ldrh	r2, [r7, #2]
 801811a:	697b      	ldr	r3, [r7, #20]
 801811c:	9301      	str	r3, [sp, #4]
 801811e:	6a3b      	ldr	r3, [r7, #32]
 8018120:	9300      	str	r3, [sp, #0]
 8018122:	4613      	mov	r3, r2
 8018124:	687a      	ldr	r2, [r7, #4]
 8018126:	68b9      	ldr	r1, [r7, #8]
 8018128:	68f8      	ldr	r0, [r7, #12]
 801812a:	f000 f811 	bl	8018150 <udp_sendto_if_src>
 801812e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018130:	4618      	mov	r0, r3
 8018132:	3718      	adds	r7, #24
 8018134:	46bd      	mov	sp, r7
 8018136:	bd80      	pop	{r7, pc}
 8018138:	0802e540 	.word	0x0802e540
 801813c:	0802e6b4 	.word	0x0802e6b4
 8018140:	0802e594 	.word	0x0802e594
 8018144:	0802e6d0 	.word	0x0802e6d0
 8018148:	0802e6ec 	.word	0x0802e6ec
 801814c:	0802e70c 	.word	0x0802e70c

08018150 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b08c      	sub	sp, #48	@ 0x30
 8018154:	af04      	add	r7, sp, #16
 8018156:	60f8      	str	r0, [r7, #12]
 8018158:	60b9      	str	r1, [r7, #8]
 801815a:	607a      	str	r2, [r7, #4]
 801815c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d109      	bne.n	8018178 <udp_sendto_if_src+0x28>
 8018164:	4b73      	ldr	r3, [pc, #460]	@ (8018334 <udp_sendto_if_src+0x1e4>)
 8018166:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801816a:	4973      	ldr	r1, [pc, #460]	@ (8018338 <udp_sendto_if_src+0x1e8>)
 801816c:	4873      	ldr	r0, [pc, #460]	@ (801833c <udp_sendto_if_src+0x1ec>)
 801816e:	f011 f8d9 	bl	8029324 <iprintf>
 8018172:	f06f 030f 	mvn.w	r3, #15
 8018176:	e0d8      	b.n	801832a <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8018178:	68bb      	ldr	r3, [r7, #8]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d109      	bne.n	8018192 <udp_sendto_if_src+0x42>
 801817e:	4b6d      	ldr	r3, [pc, #436]	@ (8018334 <udp_sendto_if_src+0x1e4>)
 8018180:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8018184:	496e      	ldr	r1, [pc, #440]	@ (8018340 <udp_sendto_if_src+0x1f0>)
 8018186:	486d      	ldr	r0, [pc, #436]	@ (801833c <udp_sendto_if_src+0x1ec>)
 8018188:	f011 f8cc 	bl	8029324 <iprintf>
 801818c:	f06f 030f 	mvn.w	r3, #15
 8018190:	e0cb      	b.n	801832a <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d109      	bne.n	80181ac <udp_sendto_if_src+0x5c>
 8018198:	4b66      	ldr	r3, [pc, #408]	@ (8018334 <udp_sendto_if_src+0x1e4>)
 801819a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801819e:	4969      	ldr	r1, [pc, #420]	@ (8018344 <udp_sendto_if_src+0x1f4>)
 80181a0:	4866      	ldr	r0, [pc, #408]	@ (801833c <udp_sendto_if_src+0x1ec>)
 80181a2:	f011 f8bf 	bl	8029324 <iprintf>
 80181a6:	f06f 030f 	mvn.w	r3, #15
 80181aa:	e0be      	b.n	801832a <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80181ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d109      	bne.n	80181c6 <udp_sendto_if_src+0x76>
 80181b2:	4b60      	ldr	r3, [pc, #384]	@ (8018334 <udp_sendto_if_src+0x1e4>)
 80181b4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80181b8:	4963      	ldr	r1, [pc, #396]	@ (8018348 <udp_sendto_if_src+0x1f8>)
 80181ba:	4860      	ldr	r0, [pc, #384]	@ (801833c <udp_sendto_if_src+0x1ec>)
 80181bc:	f011 f8b2 	bl	8029324 <iprintf>
 80181c0:	f06f 030f 	mvn.w	r3, #15
 80181c4:	e0b1      	b.n	801832a <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80181c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d109      	bne.n	80181e0 <udp_sendto_if_src+0x90>
 80181cc:	4b59      	ldr	r3, [pc, #356]	@ (8018334 <udp_sendto_if_src+0x1e4>)
 80181ce:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80181d2:	495e      	ldr	r1, [pc, #376]	@ (801834c <udp_sendto_if_src+0x1fc>)
 80181d4:	4859      	ldr	r0, [pc, #356]	@ (801833c <udp_sendto_if_src+0x1ec>)
 80181d6:	f011 f8a5 	bl	8029324 <iprintf>
 80181da:	f06f 030f 	mvn.w	r3, #15
 80181de:	e0a4      	b.n	801832a <udp_sendto_if_src+0x1da>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	8a5b      	ldrh	r3, [r3, #18]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d10f      	bne.n	8018208 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80181e8:	68f9      	ldr	r1, [r7, #12]
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	8a5b      	ldrh	r3, [r3, #18]
 80181ee:	461a      	mov	r2, r3
 80181f0:	68f8      	ldr	r0, [r7, #12]
 80181f2:	f000 f8af 	bl	8018354 <udp_bind>
 80181f6:	4603      	mov	r3, r0
 80181f8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80181fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d002      	beq.n	8018208 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8018202:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018206:	e090      	b.n	801832a <udp_sendto_if_src+0x1da>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018208:	68bb      	ldr	r3, [r7, #8]
 801820a:	891b      	ldrh	r3, [r3, #8]
 801820c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8018210:	4293      	cmp	r3, r2
 8018212:	d902      	bls.n	801821a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8018214:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018218:	e087      	b.n	801832a <udp_sendto_if_src+0x1da>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801821a:	2108      	movs	r1, #8
 801821c:	68b8      	ldr	r0, [r7, #8]
 801821e:	f7f8 ffeb 	bl	80111f8 <pbuf_add_header>
 8018222:	4603      	mov	r3, r0
 8018224:	2b00      	cmp	r3, #0
 8018226:	d015      	beq.n	8018254 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018228:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801822c:	2108      	movs	r1, #8
 801822e:	2022      	movs	r0, #34	@ 0x22
 8018230:	f7f8 fd94 	bl	8010d5c <pbuf_alloc>
 8018234:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8018236:	69fb      	ldr	r3, [r7, #28]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d102      	bne.n	8018242 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801823c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018240:	e073      	b.n	801832a <udp_sendto_if_src+0x1da>
    }
    if (p->tot_len != 0) {
 8018242:	68bb      	ldr	r3, [r7, #8]
 8018244:	891b      	ldrh	r3, [r3, #8]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d006      	beq.n	8018258 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801824a:	68b9      	ldr	r1, [r7, #8]
 801824c:	69f8      	ldr	r0, [r7, #28]
 801824e:	f7f9 f9bf 	bl	80115d0 <pbuf_chain>
 8018252:	e001      	b.n	8018258 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018258:	69fb      	ldr	r3, [r7, #28]
 801825a:	895b      	ldrh	r3, [r3, #10]
 801825c:	2b07      	cmp	r3, #7
 801825e:	d806      	bhi.n	801826e <udp_sendto_if_src+0x11e>
 8018260:	4b34      	ldr	r3, [pc, #208]	@ (8018334 <udp_sendto_if_src+0x1e4>)
 8018262:	f240 320d 	movw	r2, #781	@ 0x30d
 8018266:	493a      	ldr	r1, [pc, #232]	@ (8018350 <udp_sendto_if_src+0x200>)
 8018268:	4834      	ldr	r0, [pc, #208]	@ (801833c <udp_sendto_if_src+0x1ec>)
 801826a:	f011 f85b 	bl	8029324 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801826e:	69fb      	ldr	r3, [r7, #28]
 8018270:	685b      	ldr	r3, [r3, #4]
 8018272:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	8a5b      	ldrh	r3, [r3, #18]
 8018278:	4618      	mov	r0, r3
 801827a:	f7f7 fb8b 	bl	800f994 <lwip_htons>
 801827e:	4603      	mov	r3, r0
 8018280:	461a      	mov	r2, r3
 8018282:	697b      	ldr	r3, [r7, #20]
 8018284:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8018286:	887b      	ldrh	r3, [r7, #2]
 8018288:	4618      	mov	r0, r3
 801828a:	f7f7 fb83 	bl	800f994 <lwip_htons>
 801828e:	4603      	mov	r3, r0
 8018290:	461a      	mov	r2, r3
 8018292:	697b      	ldr	r3, [r7, #20]
 8018294:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8018296:	697b      	ldr	r3, [r7, #20]
 8018298:	2200      	movs	r2, #0
 801829a:	719a      	strb	r2, [r3, #6]
 801829c:	2200      	movs	r2, #0
 801829e:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_MULTICAST_TX_OPTIONS
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	7c1b      	ldrb	r3, [r3, #16]
 80182a4:	f003 0308 	and.w	r3, r3, #8
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d00c      	beq.n	80182c6 <udp_sendto_if_src+0x176>
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80182b4:	2be0      	cmp	r3, #224	@ 0xe0
 80182b6:	d106      	bne.n	80182c6 <udp_sendto_if_src+0x176>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 80182b8:	69fb      	ldr	r3, [r7, #28]
 80182ba:	7b5b      	ldrb	r3, [r3, #13]
 80182bc:	f043 0304 	orr.w	r3, r3, #4
 80182c0:	b2da      	uxtb	r2, r3
 80182c2:	69fb      	ldr	r3, [r7, #28]
 80182c4:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80182c6:	69fb      	ldr	r3, [r7, #28]
 80182c8:	891b      	ldrh	r3, [r3, #8]
 80182ca:	4618      	mov	r0, r3
 80182cc:	f7f7 fb62 	bl	800f994 <lwip_htons>
 80182d0:	4603      	mov	r3, r0
 80182d2:	461a      	mov	r2, r3
 80182d4:	697b      	ldr	r3, [r7, #20]
 80182d6:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80182d8:	2311      	movs	r3, #17
 80182da:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80182e4:	2be0      	cmp	r3, #224	@ 0xe0
 80182e6:	d102      	bne.n	80182ee <udp_sendto_if_src+0x19e>
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	7f5b      	ldrb	r3, [r3, #29]
 80182ec:	e001      	b.n	80182f2 <udp_sendto_if_src+0x1a2>
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	7adb      	ldrb	r3, [r3, #11]
 80182f2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	7a9b      	ldrb	r3, [r3, #10]
 80182f8:	7cb9      	ldrb	r1, [r7, #18]
 80182fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80182fc:	9202      	str	r2, [sp, #8]
 80182fe:	7cfa      	ldrb	r2, [r7, #19]
 8018300:	9201      	str	r2, [sp, #4]
 8018302:	9300      	str	r3, [sp, #0]
 8018304:	460b      	mov	r3, r1
 8018306:	687a      	ldr	r2, [r7, #4]
 8018308:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801830a:	69f8      	ldr	r0, [r7, #28]
 801830c:	f002 f935 	bl	801a57a <ip4_output_if_src>
 8018310:	4603      	mov	r3, r0
 8018312:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8018314:	69fa      	ldr	r2, [r7, #28]
 8018316:	68bb      	ldr	r3, [r7, #8]
 8018318:	429a      	cmp	r2, r3
 801831a:	d004      	beq.n	8018326 <udp_sendto_if_src+0x1d6>
    /* free the header pbuf */
    pbuf_free(q);
 801831c:	69f8      	ldr	r0, [r7, #28]
 801831e:	f7f9 f833 	bl	8011388 <pbuf_free>
    q = NULL;
 8018322:	2300      	movs	r3, #0
 8018324:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8018326:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801832a:	4618      	mov	r0, r3
 801832c:	3720      	adds	r7, #32
 801832e:	46bd      	mov	sp, r7
 8018330:	bd80      	pop	{r7, pc}
 8018332:	bf00      	nop
 8018334:	0802e540 	.word	0x0802e540
 8018338:	0802e72c 	.word	0x0802e72c
 801833c:	0802e594 	.word	0x0802e594
 8018340:	0802e74c 	.word	0x0802e74c
 8018344:	0802e76c 	.word	0x0802e76c
 8018348:	0802e790 	.word	0x0802e790
 801834c:	0802e7b4 	.word	0x0802e7b4
 8018350:	0802e7d8 	.word	0x0802e7d8

08018354 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018354:	b580      	push	{r7, lr}
 8018356:	b086      	sub	sp, #24
 8018358:	af00      	add	r7, sp, #0
 801835a:	60f8      	str	r0, [r7, #12]
 801835c:	60b9      	str	r1, [r7, #8]
 801835e:	4613      	mov	r3, r2
 8018360:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018362:	68bb      	ldr	r3, [r7, #8]
 8018364:	2b00      	cmp	r3, #0
 8018366:	d101      	bne.n	801836c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018368:	4b39      	ldr	r3, [pc, #228]	@ (8018450 <udp_bind+0xfc>)
 801836a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d109      	bne.n	8018386 <udp_bind+0x32>
 8018372:	4b38      	ldr	r3, [pc, #224]	@ (8018454 <udp_bind+0x100>)
 8018374:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8018378:	4937      	ldr	r1, [pc, #220]	@ (8018458 <udp_bind+0x104>)
 801837a:	4838      	ldr	r0, [pc, #224]	@ (801845c <udp_bind+0x108>)
 801837c:	f010 ffd2 	bl	8029324 <iprintf>
 8018380:	f06f 030f 	mvn.w	r3, #15
 8018384:	e060      	b.n	8018448 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8018386:	2300      	movs	r3, #0
 8018388:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801838a:	4b35      	ldr	r3, [pc, #212]	@ (8018460 <udp_bind+0x10c>)
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	617b      	str	r3, [r7, #20]
 8018390:	e009      	b.n	80183a6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8018392:	68fa      	ldr	r2, [r7, #12]
 8018394:	697b      	ldr	r3, [r7, #20]
 8018396:	429a      	cmp	r2, r3
 8018398:	d102      	bne.n	80183a0 <udp_bind+0x4c>
      rebind = 1;
 801839a:	2301      	movs	r3, #1
 801839c:	74fb      	strb	r3, [r7, #19]
      break;
 801839e:	e005      	b.n	80183ac <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80183a0:	697b      	ldr	r3, [r7, #20]
 80183a2:	68db      	ldr	r3, [r3, #12]
 80183a4:	617b      	str	r3, [r7, #20]
 80183a6:	697b      	ldr	r3, [r7, #20]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d1f2      	bne.n	8018392 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80183ac:	88fb      	ldrh	r3, [r7, #6]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d109      	bne.n	80183c6 <udp_bind+0x72>
    port = udp_new_port();
 80183b2:	f7ff fbf1 	bl	8017b98 <udp_new_port>
 80183b6:	4603      	mov	r3, r0
 80183b8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80183ba:	88fb      	ldrh	r3, [r7, #6]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d12c      	bne.n	801841a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80183c0:	f06f 0307 	mvn.w	r3, #7
 80183c4:	e040      	b.n	8018448 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80183c6:	4b26      	ldr	r3, [pc, #152]	@ (8018460 <udp_bind+0x10c>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	617b      	str	r3, [r7, #20]
 80183cc:	e022      	b.n	8018414 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80183ce:	68fa      	ldr	r2, [r7, #12]
 80183d0:	697b      	ldr	r3, [r7, #20]
 80183d2:	429a      	cmp	r2, r3
 80183d4:	d01b      	beq.n	801840e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80183d6:	697b      	ldr	r3, [r7, #20]
 80183d8:	8a5b      	ldrh	r3, [r3, #18]
 80183da:	88fa      	ldrh	r2, [r7, #6]
 80183dc:	429a      	cmp	r2, r3
 80183de:	d116      	bne.n	801840e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80183e0:	697b      	ldr	r3, [r7, #20]
 80183e2:	681a      	ldr	r2, [r3, #0]
 80183e4:	68bb      	ldr	r3, [r7, #8]
 80183e6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80183e8:	429a      	cmp	r2, r3
 80183ea:	d00d      	beq.n	8018408 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80183ec:	68bb      	ldr	r3, [r7, #8]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d00a      	beq.n	8018408 <udp_bind+0xb4>
 80183f2:	68bb      	ldr	r3, [r7, #8]
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d006      	beq.n	8018408 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80183fa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d003      	beq.n	8018408 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018400:	697b      	ldr	r3, [r7, #20]
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d102      	bne.n	801840e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018408:	f06f 0307 	mvn.w	r3, #7
 801840c:	e01c      	b.n	8018448 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801840e:	697b      	ldr	r3, [r7, #20]
 8018410:	68db      	ldr	r3, [r3, #12]
 8018412:	617b      	str	r3, [r7, #20]
 8018414:	697b      	ldr	r3, [r7, #20]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d1d9      	bne.n	80183ce <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801841a:	68bb      	ldr	r3, [r7, #8]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d002      	beq.n	8018426 <udp_bind+0xd2>
 8018420:	68bb      	ldr	r3, [r7, #8]
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	e000      	b.n	8018428 <udp_bind+0xd4>
 8018426:	2300      	movs	r3, #0
 8018428:	68fa      	ldr	r2, [r7, #12]
 801842a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	88fa      	ldrh	r2, [r7, #6]
 8018430:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018432:	7cfb      	ldrb	r3, [r7, #19]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d106      	bne.n	8018446 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018438:	4b09      	ldr	r3, [pc, #36]	@ (8018460 <udp_bind+0x10c>)
 801843a:	681a      	ldr	r2, [r3, #0]
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018440:	4a07      	ldr	r2, [pc, #28]	@ (8018460 <udp_bind+0x10c>)
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018446:	2300      	movs	r3, #0
}
 8018448:	4618      	mov	r0, r3
 801844a:	3718      	adds	r7, #24
 801844c:	46bd      	mov	sp, r7
 801844e:	bd80      	pop	{r7, pc}
 8018450:	0802f50c 	.word	0x0802f50c
 8018454:	0802e540 	.word	0x0802e540
 8018458:	0802e808 	.word	0x0802e808
 801845c:	0802e594 	.word	0x0802e594
 8018460:	20042610 	.word	0x20042610

08018464 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8018464:	b480      	push	{r7}
 8018466:	b083      	sub	sp, #12
 8018468:	af00      	add	r7, sp, #0
 801846a:	6078      	str	r0, [r7, #4]
 801846c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 801846e:	683b      	ldr	r3, [r7, #0]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d007      	beq.n	8018484 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8018474:	683b      	ldr	r3, [r7, #0]
 8018476:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801847a:	3301      	adds	r3, #1
 801847c:	b2da      	uxtb	r2, r3
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8018482:	e002      	b.n	801848a <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	2200      	movs	r2, #0
 8018488:	721a      	strb	r2, [r3, #8]
}
 801848a:	bf00      	nop
 801848c:	370c      	adds	r7, #12
 801848e:	46bd      	mov	sp, r7
 8018490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018494:	4770      	bx	lr
	...

08018498 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018498:	b580      	push	{r7, lr}
 801849a:	b084      	sub	sp, #16
 801849c:	af00      	add	r7, sp, #0
 801849e:	60f8      	str	r0, [r7, #12]
 80184a0:	60b9      	str	r1, [r7, #8]
 80184a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d107      	bne.n	80184ba <udp_recv+0x22>
 80184aa:	4b08      	ldr	r3, [pc, #32]	@ (80184cc <udp_recv+0x34>)
 80184ac:	f240 428a 	movw	r2, #1162	@ 0x48a
 80184b0:	4907      	ldr	r1, [pc, #28]	@ (80184d0 <udp_recv+0x38>)
 80184b2:	4808      	ldr	r0, [pc, #32]	@ (80184d4 <udp_recv+0x3c>)
 80184b4:	f010 ff36 	bl	8029324 <iprintf>
 80184b8:	e005      	b.n	80184c6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	68ba      	ldr	r2, [r7, #8]
 80184be:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	687a      	ldr	r2, [r7, #4]
 80184c4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80184c6:	3710      	adds	r7, #16
 80184c8:	46bd      	mov	sp, r7
 80184ca:	bd80      	pop	{r7, pc}
 80184cc:	0802e540 	.word	0x0802e540
 80184d0:	0802e874 	.word	0x0802e874
 80184d4:	0802e594 	.word	0x0802e594

080184d8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b084      	sub	sp, #16
 80184dc:	af00      	add	r7, sp, #0
 80184de:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d107      	bne.n	80184f6 <udp_remove+0x1e>
 80184e6:	4b19      	ldr	r3, [pc, #100]	@ (801854c <udp_remove+0x74>)
 80184e8:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80184ec:	4918      	ldr	r1, [pc, #96]	@ (8018550 <udp_remove+0x78>)
 80184ee:	4819      	ldr	r0, [pc, #100]	@ (8018554 <udp_remove+0x7c>)
 80184f0:	f010 ff18 	bl	8029324 <iprintf>
 80184f4:	e026      	b.n	8018544 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80184f6:	4b18      	ldr	r3, [pc, #96]	@ (8018558 <udp_remove+0x80>)
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	687a      	ldr	r2, [r7, #4]
 80184fc:	429a      	cmp	r2, r3
 80184fe:	d105      	bne.n	801850c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018500:	4b15      	ldr	r3, [pc, #84]	@ (8018558 <udp_remove+0x80>)
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	68db      	ldr	r3, [r3, #12]
 8018506:	4a14      	ldr	r2, [pc, #80]	@ (8018558 <udp_remove+0x80>)
 8018508:	6013      	str	r3, [r2, #0]
 801850a:	e017      	b.n	801853c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801850c:	4b12      	ldr	r3, [pc, #72]	@ (8018558 <udp_remove+0x80>)
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	60fb      	str	r3, [r7, #12]
 8018512:	e010      	b.n	8018536 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	68db      	ldr	r3, [r3, #12]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d009      	beq.n	8018530 <udp_remove+0x58>
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	68db      	ldr	r3, [r3, #12]
 8018520:	687a      	ldr	r2, [r7, #4]
 8018522:	429a      	cmp	r2, r3
 8018524:	d104      	bne.n	8018530 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	68da      	ldr	r2, [r3, #12]
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	60da      	str	r2, [r3, #12]
        break;
 801852e:	e005      	b.n	801853c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	68db      	ldr	r3, [r3, #12]
 8018534:	60fb      	str	r3, [r7, #12]
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d1eb      	bne.n	8018514 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801853c:	6879      	ldr	r1, [r7, #4]
 801853e:	2000      	movs	r0, #0
 8018540:	f7f7 fff6 	bl	8010530 <memp_free>
}
 8018544:	3710      	adds	r7, #16
 8018546:	46bd      	mov	sp, r7
 8018548:	bd80      	pop	{r7, pc}
 801854a:	bf00      	nop
 801854c:	0802e540 	.word	0x0802e540
 8018550:	0802e88c 	.word	0x0802e88c
 8018554:	0802e594 	.word	0x0802e594
 8018558:	20042610 	.word	0x20042610

0801855c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b082      	sub	sp, #8
 8018560:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018562:	2000      	movs	r0, #0
 8018564:	f7f7 ff6e 	bl	8010444 <memp_malloc>
 8018568:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d00a      	beq.n	8018586 <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018570:	2228      	movs	r2, #40	@ 0x28
 8018572:	2100      	movs	r1, #0
 8018574:	6878      	ldr	r0, [r7, #4]
 8018576:	f011 f855 	bl	8029624 <memset>
    pcb->ttl = UDP_TTL;
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	22ff      	movs	r2, #255	@ 0xff
 801857e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	22ff      	movs	r2, #255	@ 0xff
 8018584:	775a      	strb	r2, [r3, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018586:	687b      	ldr	r3, [r7, #4]
}
 8018588:	4618      	mov	r0, r3
 801858a:	3708      	adds	r7, #8
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}

08018590 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b084      	sub	sp, #16
 8018594:	af00      	add	r7, sp, #0
 8018596:	4603      	mov	r3, r0
 8018598:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801859a:	f7ff ffdf 	bl	801855c <udp_new>
 801859e:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80185a0:	68fb      	ldr	r3, [r7, #12]
}
 80185a2:	4618      	mov	r0, r3
 80185a4:	3710      	adds	r7, #16
 80185a6:	46bd      	mov	sp, r7
 80185a8:	bd80      	pop	{r7, pc}
	...

080185ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80185ac:	b480      	push	{r7}
 80185ae:	b085      	sub	sp, #20
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
 80185b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d01e      	beq.n	80185fa <udp_netif_ip_addr_changed+0x4e>
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d01a      	beq.n	80185fa <udp_netif_ip_addr_changed+0x4e>
 80185c4:	683b      	ldr	r3, [r7, #0]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d017      	beq.n	80185fa <udp_netif_ip_addr_changed+0x4e>
 80185ca:	683b      	ldr	r3, [r7, #0]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d013      	beq.n	80185fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80185d2:	4b0d      	ldr	r3, [pc, #52]	@ (8018608 <udp_netif_ip_addr_changed+0x5c>)
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	60fb      	str	r3, [r7, #12]
 80185d8:	e00c      	b.n	80185f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	681a      	ldr	r2, [r3, #0]
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	429a      	cmp	r2, r3
 80185e4:	d103      	bne.n	80185ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80185e6:	683b      	ldr	r3, [r7, #0]
 80185e8:	681a      	ldr	r2, [r3, #0]
 80185ea:	68fb      	ldr	r3, [r7, #12]
 80185ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	68db      	ldr	r3, [r3, #12]
 80185f2:	60fb      	str	r3, [r7, #12]
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d1ef      	bne.n	80185da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80185fa:	bf00      	nop
 80185fc:	3714      	adds	r7, #20
 80185fe:	46bd      	mov	sp, r7
 8018600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018604:	4770      	bx	lr
 8018606:	bf00      	nop
 8018608:	20042610 	.word	0x20042610

0801860c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b082      	sub	sp, #8
 8018610:	af00      	add	r7, sp, #0
 8018612:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018614:	4915      	ldr	r1, [pc, #84]	@ (801866c <etharp_free_entry+0x60>)
 8018616:	687a      	ldr	r2, [r7, #4]
 8018618:	4613      	mov	r3, r2
 801861a:	005b      	lsls	r3, r3, #1
 801861c:	4413      	add	r3, r2
 801861e:	00db      	lsls	r3, r3, #3
 8018620:	440b      	add	r3, r1
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d013      	beq.n	8018650 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018628:	4910      	ldr	r1, [pc, #64]	@ (801866c <etharp_free_entry+0x60>)
 801862a:	687a      	ldr	r2, [r7, #4]
 801862c:	4613      	mov	r3, r2
 801862e:	005b      	lsls	r3, r3, #1
 8018630:	4413      	add	r3, r2
 8018632:	00db      	lsls	r3, r3, #3
 8018634:	440b      	add	r3, r1
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	4618      	mov	r0, r3
 801863a:	f7f8 fea5 	bl	8011388 <pbuf_free>
    arp_table[i].q = NULL;
 801863e:	490b      	ldr	r1, [pc, #44]	@ (801866c <etharp_free_entry+0x60>)
 8018640:	687a      	ldr	r2, [r7, #4]
 8018642:	4613      	mov	r3, r2
 8018644:	005b      	lsls	r3, r3, #1
 8018646:	4413      	add	r3, r2
 8018648:	00db      	lsls	r3, r3, #3
 801864a:	440b      	add	r3, r1
 801864c:	2200      	movs	r2, #0
 801864e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018650:	4906      	ldr	r1, [pc, #24]	@ (801866c <etharp_free_entry+0x60>)
 8018652:	687a      	ldr	r2, [r7, #4]
 8018654:	4613      	mov	r3, r2
 8018656:	005b      	lsls	r3, r3, #1
 8018658:	4413      	add	r3, r2
 801865a:	00db      	lsls	r3, r3, #3
 801865c:	440b      	add	r3, r1
 801865e:	3314      	adds	r3, #20
 8018660:	2200      	movs	r2, #0
 8018662:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018664:	bf00      	nop
 8018666:	3708      	adds	r7, #8
 8018668:	46bd      	mov	sp, r7
 801866a:	bd80      	pop	{r7, pc}
 801866c:	20042614 	.word	0x20042614

08018670 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b082      	sub	sp, #8
 8018674:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018676:	2300      	movs	r3, #0
 8018678:	607b      	str	r3, [r7, #4]
 801867a:	e096      	b.n	80187aa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801867c:	494f      	ldr	r1, [pc, #316]	@ (80187bc <etharp_tmr+0x14c>)
 801867e:	687a      	ldr	r2, [r7, #4]
 8018680:	4613      	mov	r3, r2
 8018682:	005b      	lsls	r3, r3, #1
 8018684:	4413      	add	r3, r2
 8018686:	00db      	lsls	r3, r3, #3
 8018688:	440b      	add	r3, r1
 801868a:	3314      	adds	r3, #20
 801868c:	781b      	ldrb	r3, [r3, #0]
 801868e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018690:	78fb      	ldrb	r3, [r7, #3]
 8018692:	2b00      	cmp	r3, #0
 8018694:	f000 8086 	beq.w	80187a4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018698:	4948      	ldr	r1, [pc, #288]	@ (80187bc <etharp_tmr+0x14c>)
 801869a:	687a      	ldr	r2, [r7, #4]
 801869c:	4613      	mov	r3, r2
 801869e:	005b      	lsls	r3, r3, #1
 80186a0:	4413      	add	r3, r2
 80186a2:	00db      	lsls	r3, r3, #3
 80186a4:	440b      	add	r3, r1
 80186a6:	3312      	adds	r3, #18
 80186a8:	881b      	ldrh	r3, [r3, #0]
 80186aa:	3301      	adds	r3, #1
 80186ac:	b298      	uxth	r0, r3
 80186ae:	4943      	ldr	r1, [pc, #268]	@ (80187bc <etharp_tmr+0x14c>)
 80186b0:	687a      	ldr	r2, [r7, #4]
 80186b2:	4613      	mov	r3, r2
 80186b4:	005b      	lsls	r3, r3, #1
 80186b6:	4413      	add	r3, r2
 80186b8:	00db      	lsls	r3, r3, #3
 80186ba:	440b      	add	r3, r1
 80186bc:	3312      	adds	r3, #18
 80186be:	4602      	mov	r2, r0
 80186c0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80186c2:	493e      	ldr	r1, [pc, #248]	@ (80187bc <etharp_tmr+0x14c>)
 80186c4:	687a      	ldr	r2, [r7, #4]
 80186c6:	4613      	mov	r3, r2
 80186c8:	005b      	lsls	r3, r3, #1
 80186ca:	4413      	add	r3, r2
 80186cc:	00db      	lsls	r3, r3, #3
 80186ce:	440b      	add	r3, r1
 80186d0:	3312      	adds	r3, #18
 80186d2:	881b      	ldrh	r3, [r3, #0]
 80186d4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80186d8:	d215      	bcs.n	8018706 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80186da:	4938      	ldr	r1, [pc, #224]	@ (80187bc <etharp_tmr+0x14c>)
 80186dc:	687a      	ldr	r2, [r7, #4]
 80186de:	4613      	mov	r3, r2
 80186e0:	005b      	lsls	r3, r3, #1
 80186e2:	4413      	add	r3, r2
 80186e4:	00db      	lsls	r3, r3, #3
 80186e6:	440b      	add	r3, r1
 80186e8:	3314      	adds	r3, #20
 80186ea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80186ec:	2b01      	cmp	r3, #1
 80186ee:	d10e      	bne.n	801870e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80186f0:	4932      	ldr	r1, [pc, #200]	@ (80187bc <etharp_tmr+0x14c>)
 80186f2:	687a      	ldr	r2, [r7, #4]
 80186f4:	4613      	mov	r3, r2
 80186f6:	005b      	lsls	r3, r3, #1
 80186f8:	4413      	add	r3, r2
 80186fa:	00db      	lsls	r3, r3, #3
 80186fc:	440b      	add	r3, r1
 80186fe:	3312      	adds	r3, #18
 8018700:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018702:	2b04      	cmp	r3, #4
 8018704:	d903      	bls.n	801870e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018706:	6878      	ldr	r0, [r7, #4]
 8018708:	f7ff ff80 	bl	801860c <etharp_free_entry>
 801870c:	e04a      	b.n	80187a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801870e:	492b      	ldr	r1, [pc, #172]	@ (80187bc <etharp_tmr+0x14c>)
 8018710:	687a      	ldr	r2, [r7, #4]
 8018712:	4613      	mov	r3, r2
 8018714:	005b      	lsls	r3, r3, #1
 8018716:	4413      	add	r3, r2
 8018718:	00db      	lsls	r3, r3, #3
 801871a:	440b      	add	r3, r1
 801871c:	3314      	adds	r3, #20
 801871e:	781b      	ldrb	r3, [r3, #0]
 8018720:	2b03      	cmp	r3, #3
 8018722:	d10a      	bne.n	801873a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018724:	4925      	ldr	r1, [pc, #148]	@ (80187bc <etharp_tmr+0x14c>)
 8018726:	687a      	ldr	r2, [r7, #4]
 8018728:	4613      	mov	r3, r2
 801872a:	005b      	lsls	r3, r3, #1
 801872c:	4413      	add	r3, r2
 801872e:	00db      	lsls	r3, r3, #3
 8018730:	440b      	add	r3, r1
 8018732:	3314      	adds	r3, #20
 8018734:	2204      	movs	r2, #4
 8018736:	701a      	strb	r2, [r3, #0]
 8018738:	e034      	b.n	80187a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801873a:	4920      	ldr	r1, [pc, #128]	@ (80187bc <etharp_tmr+0x14c>)
 801873c:	687a      	ldr	r2, [r7, #4]
 801873e:	4613      	mov	r3, r2
 8018740:	005b      	lsls	r3, r3, #1
 8018742:	4413      	add	r3, r2
 8018744:	00db      	lsls	r3, r3, #3
 8018746:	440b      	add	r3, r1
 8018748:	3314      	adds	r3, #20
 801874a:	781b      	ldrb	r3, [r3, #0]
 801874c:	2b04      	cmp	r3, #4
 801874e:	d10a      	bne.n	8018766 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018750:	491a      	ldr	r1, [pc, #104]	@ (80187bc <etharp_tmr+0x14c>)
 8018752:	687a      	ldr	r2, [r7, #4]
 8018754:	4613      	mov	r3, r2
 8018756:	005b      	lsls	r3, r3, #1
 8018758:	4413      	add	r3, r2
 801875a:	00db      	lsls	r3, r3, #3
 801875c:	440b      	add	r3, r1
 801875e:	3314      	adds	r3, #20
 8018760:	2202      	movs	r2, #2
 8018762:	701a      	strb	r2, [r3, #0]
 8018764:	e01e      	b.n	80187a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018766:	4915      	ldr	r1, [pc, #84]	@ (80187bc <etharp_tmr+0x14c>)
 8018768:	687a      	ldr	r2, [r7, #4]
 801876a:	4613      	mov	r3, r2
 801876c:	005b      	lsls	r3, r3, #1
 801876e:	4413      	add	r3, r2
 8018770:	00db      	lsls	r3, r3, #3
 8018772:	440b      	add	r3, r1
 8018774:	3314      	adds	r3, #20
 8018776:	781b      	ldrb	r3, [r3, #0]
 8018778:	2b01      	cmp	r3, #1
 801877a:	d113      	bne.n	80187a4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801877c:	490f      	ldr	r1, [pc, #60]	@ (80187bc <etharp_tmr+0x14c>)
 801877e:	687a      	ldr	r2, [r7, #4]
 8018780:	4613      	mov	r3, r2
 8018782:	005b      	lsls	r3, r3, #1
 8018784:	4413      	add	r3, r2
 8018786:	00db      	lsls	r3, r3, #3
 8018788:	440b      	add	r3, r1
 801878a:	3308      	adds	r3, #8
 801878c:	6818      	ldr	r0, [r3, #0]
 801878e:	687a      	ldr	r2, [r7, #4]
 8018790:	4613      	mov	r3, r2
 8018792:	005b      	lsls	r3, r3, #1
 8018794:	4413      	add	r3, r2
 8018796:	00db      	lsls	r3, r3, #3
 8018798:	4a08      	ldr	r2, [pc, #32]	@ (80187bc <etharp_tmr+0x14c>)
 801879a:	4413      	add	r3, r2
 801879c:	3304      	adds	r3, #4
 801879e:	4619      	mov	r1, r3
 80187a0:	f000 fe6e 	bl	8019480 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	3301      	adds	r3, #1
 80187a8:	607b      	str	r3, [r7, #4]
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	2b09      	cmp	r3, #9
 80187ae:	f77f af65 	ble.w	801867c <etharp_tmr+0xc>
      }
    }
  }
}
 80187b2:	bf00      	nop
 80187b4:	bf00      	nop
 80187b6:	3708      	adds	r7, #8
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}
 80187bc:	20042614 	.word	0x20042614

080187c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80187c0:	b580      	push	{r7, lr}
 80187c2:	b08a      	sub	sp, #40	@ 0x28
 80187c4:	af00      	add	r7, sp, #0
 80187c6:	60f8      	str	r0, [r7, #12]
 80187c8:	460b      	mov	r3, r1
 80187ca:	607a      	str	r2, [r7, #4]
 80187cc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80187ce:	230a      	movs	r3, #10
 80187d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80187d2:	230a      	movs	r3, #10
 80187d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80187d6:	230a      	movs	r3, #10
 80187d8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80187da:	2300      	movs	r3, #0
 80187dc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80187de:	230a      	movs	r3, #10
 80187e0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80187e2:	2300      	movs	r3, #0
 80187e4:	83bb      	strh	r3, [r7, #28]
 80187e6:	2300      	movs	r3, #0
 80187e8:	837b      	strh	r3, [r7, #26]
 80187ea:	2300      	movs	r3, #0
 80187ec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80187ee:	2300      	movs	r3, #0
 80187f0:	843b      	strh	r3, [r7, #32]
 80187f2:	e0ae      	b.n	8018952 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80187f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187f8:	49a6      	ldr	r1, [pc, #664]	@ (8018a94 <etharp_find_entry+0x2d4>)
 80187fa:	4613      	mov	r3, r2
 80187fc:	005b      	lsls	r3, r3, #1
 80187fe:	4413      	add	r3, r2
 8018800:	00db      	lsls	r3, r3, #3
 8018802:	440b      	add	r3, r1
 8018804:	3314      	adds	r3, #20
 8018806:	781b      	ldrb	r3, [r3, #0]
 8018808:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801880a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801880e:	2b0a      	cmp	r3, #10
 8018810:	d105      	bne.n	801881e <etharp_find_entry+0x5e>
 8018812:	7dfb      	ldrb	r3, [r7, #23]
 8018814:	2b00      	cmp	r3, #0
 8018816:	d102      	bne.n	801881e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018818:	8c3b      	ldrh	r3, [r7, #32]
 801881a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801881c:	e095      	b.n	801894a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801881e:	7dfb      	ldrb	r3, [r7, #23]
 8018820:	2b00      	cmp	r3, #0
 8018822:	f000 8092 	beq.w	801894a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018826:	7dfb      	ldrb	r3, [r7, #23]
 8018828:	2b01      	cmp	r3, #1
 801882a:	d009      	beq.n	8018840 <etharp_find_entry+0x80>
 801882c:	7dfb      	ldrb	r3, [r7, #23]
 801882e:	2b01      	cmp	r3, #1
 8018830:	d806      	bhi.n	8018840 <etharp_find_entry+0x80>
 8018832:	4b99      	ldr	r3, [pc, #612]	@ (8018a98 <etharp_find_entry+0x2d8>)
 8018834:	f240 1223 	movw	r2, #291	@ 0x123
 8018838:	4998      	ldr	r1, [pc, #608]	@ (8018a9c <etharp_find_entry+0x2dc>)
 801883a:	4899      	ldr	r0, [pc, #612]	@ (8018aa0 <etharp_find_entry+0x2e0>)
 801883c:	f010 fd72 	bl	8029324 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d020      	beq.n	8018888 <etharp_find_entry+0xc8>
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	6819      	ldr	r1, [r3, #0]
 801884a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801884e:	4891      	ldr	r0, [pc, #580]	@ (8018a94 <etharp_find_entry+0x2d4>)
 8018850:	4613      	mov	r3, r2
 8018852:	005b      	lsls	r3, r3, #1
 8018854:	4413      	add	r3, r2
 8018856:	00db      	lsls	r3, r3, #3
 8018858:	4403      	add	r3, r0
 801885a:	3304      	adds	r3, #4
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	4299      	cmp	r1, r3
 8018860:	d112      	bne.n	8018888 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d00c      	beq.n	8018882 <etharp_find_entry+0xc2>
 8018868:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801886c:	4989      	ldr	r1, [pc, #548]	@ (8018a94 <etharp_find_entry+0x2d4>)
 801886e:	4613      	mov	r3, r2
 8018870:	005b      	lsls	r3, r3, #1
 8018872:	4413      	add	r3, r2
 8018874:	00db      	lsls	r3, r3, #3
 8018876:	440b      	add	r3, r1
 8018878:	3308      	adds	r3, #8
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	687a      	ldr	r2, [r7, #4]
 801887e:	429a      	cmp	r2, r3
 8018880:	d102      	bne.n	8018888 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018882:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018886:	e100      	b.n	8018a8a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018888:	7dfb      	ldrb	r3, [r7, #23]
 801888a:	2b01      	cmp	r3, #1
 801888c:	d140      	bne.n	8018910 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801888e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018892:	4980      	ldr	r1, [pc, #512]	@ (8018a94 <etharp_find_entry+0x2d4>)
 8018894:	4613      	mov	r3, r2
 8018896:	005b      	lsls	r3, r3, #1
 8018898:	4413      	add	r3, r2
 801889a:	00db      	lsls	r3, r3, #3
 801889c:	440b      	add	r3, r1
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d01a      	beq.n	80188da <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80188a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80188a8:	497a      	ldr	r1, [pc, #488]	@ (8018a94 <etharp_find_entry+0x2d4>)
 80188aa:	4613      	mov	r3, r2
 80188ac:	005b      	lsls	r3, r3, #1
 80188ae:	4413      	add	r3, r2
 80188b0:	00db      	lsls	r3, r3, #3
 80188b2:	440b      	add	r3, r1
 80188b4:	3312      	adds	r3, #18
 80188b6:	881b      	ldrh	r3, [r3, #0]
 80188b8:	8bba      	ldrh	r2, [r7, #28]
 80188ba:	429a      	cmp	r2, r3
 80188bc:	d845      	bhi.n	801894a <etharp_find_entry+0x18a>
            old_queue = i;
 80188be:	8c3b      	ldrh	r3, [r7, #32]
 80188c0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80188c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80188c6:	4973      	ldr	r1, [pc, #460]	@ (8018a94 <etharp_find_entry+0x2d4>)
 80188c8:	4613      	mov	r3, r2
 80188ca:	005b      	lsls	r3, r3, #1
 80188cc:	4413      	add	r3, r2
 80188ce:	00db      	lsls	r3, r3, #3
 80188d0:	440b      	add	r3, r1
 80188d2:	3312      	adds	r3, #18
 80188d4:	881b      	ldrh	r3, [r3, #0]
 80188d6:	83bb      	strh	r3, [r7, #28]
 80188d8:	e037      	b.n	801894a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80188da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80188de:	496d      	ldr	r1, [pc, #436]	@ (8018a94 <etharp_find_entry+0x2d4>)
 80188e0:	4613      	mov	r3, r2
 80188e2:	005b      	lsls	r3, r3, #1
 80188e4:	4413      	add	r3, r2
 80188e6:	00db      	lsls	r3, r3, #3
 80188e8:	440b      	add	r3, r1
 80188ea:	3312      	adds	r3, #18
 80188ec:	881b      	ldrh	r3, [r3, #0]
 80188ee:	8b7a      	ldrh	r2, [r7, #26]
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d82a      	bhi.n	801894a <etharp_find_entry+0x18a>
            old_pending = i;
 80188f4:	8c3b      	ldrh	r3, [r7, #32]
 80188f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80188f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80188fc:	4965      	ldr	r1, [pc, #404]	@ (8018a94 <etharp_find_entry+0x2d4>)
 80188fe:	4613      	mov	r3, r2
 8018900:	005b      	lsls	r3, r3, #1
 8018902:	4413      	add	r3, r2
 8018904:	00db      	lsls	r3, r3, #3
 8018906:	440b      	add	r3, r1
 8018908:	3312      	adds	r3, #18
 801890a:	881b      	ldrh	r3, [r3, #0]
 801890c:	837b      	strh	r3, [r7, #26]
 801890e:	e01c      	b.n	801894a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018910:	7dfb      	ldrb	r3, [r7, #23]
 8018912:	2b01      	cmp	r3, #1
 8018914:	d919      	bls.n	801894a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018916:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801891a:	495e      	ldr	r1, [pc, #376]	@ (8018a94 <etharp_find_entry+0x2d4>)
 801891c:	4613      	mov	r3, r2
 801891e:	005b      	lsls	r3, r3, #1
 8018920:	4413      	add	r3, r2
 8018922:	00db      	lsls	r3, r3, #3
 8018924:	440b      	add	r3, r1
 8018926:	3312      	adds	r3, #18
 8018928:	881b      	ldrh	r3, [r3, #0]
 801892a:	8b3a      	ldrh	r2, [r7, #24]
 801892c:	429a      	cmp	r2, r3
 801892e:	d80c      	bhi.n	801894a <etharp_find_entry+0x18a>
            old_stable = i;
 8018930:	8c3b      	ldrh	r3, [r7, #32]
 8018932:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8018934:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018938:	4956      	ldr	r1, [pc, #344]	@ (8018a94 <etharp_find_entry+0x2d4>)
 801893a:	4613      	mov	r3, r2
 801893c:	005b      	lsls	r3, r3, #1
 801893e:	4413      	add	r3, r2
 8018940:	00db      	lsls	r3, r3, #3
 8018942:	440b      	add	r3, r1
 8018944:	3312      	adds	r3, #18
 8018946:	881b      	ldrh	r3, [r3, #0]
 8018948:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801894a:	8c3b      	ldrh	r3, [r7, #32]
 801894c:	3301      	adds	r3, #1
 801894e:	b29b      	uxth	r3, r3
 8018950:	843b      	strh	r3, [r7, #32]
 8018952:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018956:	2b09      	cmp	r3, #9
 8018958:	f77f af4c 	ble.w	80187f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801895c:	7afb      	ldrb	r3, [r7, #11]
 801895e:	f003 0302 	and.w	r3, r3, #2
 8018962:	2b00      	cmp	r3, #0
 8018964:	d108      	bne.n	8018978 <etharp_find_entry+0x1b8>
 8018966:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801896a:	2b0a      	cmp	r3, #10
 801896c:	d107      	bne.n	801897e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801896e:	7afb      	ldrb	r3, [r7, #11]
 8018970:	f003 0301 	and.w	r3, r3, #1
 8018974:	2b00      	cmp	r3, #0
 8018976:	d102      	bne.n	801897e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801897c:	e085      	b.n	8018a8a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801897e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018982:	2b09      	cmp	r3, #9
 8018984:	dc02      	bgt.n	801898c <etharp_find_entry+0x1cc>
    i = empty;
 8018986:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018988:	843b      	strh	r3, [r7, #32]
 801898a:	e039      	b.n	8018a00 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801898c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8018990:	2b09      	cmp	r3, #9
 8018992:	dc14      	bgt.n	80189be <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018994:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018996:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018998:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801899c:	493d      	ldr	r1, [pc, #244]	@ (8018a94 <etharp_find_entry+0x2d4>)
 801899e:	4613      	mov	r3, r2
 80189a0:	005b      	lsls	r3, r3, #1
 80189a2:	4413      	add	r3, r2
 80189a4:	00db      	lsls	r3, r3, #3
 80189a6:	440b      	add	r3, r1
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d018      	beq.n	80189e0 <etharp_find_entry+0x220>
 80189ae:	4b3a      	ldr	r3, [pc, #232]	@ (8018a98 <etharp_find_entry+0x2d8>)
 80189b0:	f240 126d 	movw	r2, #365	@ 0x16d
 80189b4:	493b      	ldr	r1, [pc, #236]	@ (8018aa4 <etharp_find_entry+0x2e4>)
 80189b6:	483a      	ldr	r0, [pc, #232]	@ (8018aa0 <etharp_find_entry+0x2e0>)
 80189b8:	f010 fcb4 	bl	8029324 <iprintf>
 80189bc:	e010      	b.n	80189e0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80189be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80189c2:	2b09      	cmp	r3, #9
 80189c4:	dc02      	bgt.n	80189cc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80189c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80189c8:	843b      	strh	r3, [r7, #32]
 80189ca:	e009      	b.n	80189e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80189cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80189d0:	2b09      	cmp	r3, #9
 80189d2:	dc02      	bgt.n	80189da <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80189d4:	8bfb      	ldrh	r3, [r7, #30]
 80189d6:	843b      	strh	r3, [r7, #32]
 80189d8:	e002      	b.n	80189e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80189da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80189de:	e054      	b.n	8018a8a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80189e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80189e4:	2b09      	cmp	r3, #9
 80189e6:	dd06      	ble.n	80189f6 <etharp_find_entry+0x236>
 80189e8:	4b2b      	ldr	r3, [pc, #172]	@ (8018a98 <etharp_find_entry+0x2d8>)
 80189ea:	f240 127f 	movw	r2, #383	@ 0x17f
 80189ee:	492e      	ldr	r1, [pc, #184]	@ (8018aa8 <etharp_find_entry+0x2e8>)
 80189f0:	482b      	ldr	r0, [pc, #172]	@ (8018aa0 <etharp_find_entry+0x2e0>)
 80189f2:	f010 fc97 	bl	8029324 <iprintf>
    etharp_free_entry(i);
 80189f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80189fa:	4618      	mov	r0, r3
 80189fc:	f7ff fe06 	bl	801860c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018a00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018a04:	2b09      	cmp	r3, #9
 8018a06:	dd06      	ble.n	8018a16 <etharp_find_entry+0x256>
 8018a08:	4b23      	ldr	r3, [pc, #140]	@ (8018a98 <etharp_find_entry+0x2d8>)
 8018a0a:	f240 1283 	movw	r2, #387	@ 0x183
 8018a0e:	4926      	ldr	r1, [pc, #152]	@ (8018aa8 <etharp_find_entry+0x2e8>)
 8018a10:	4823      	ldr	r0, [pc, #140]	@ (8018aa0 <etharp_find_entry+0x2e0>)
 8018a12:	f010 fc87 	bl	8029324 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018a16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a1a:	491e      	ldr	r1, [pc, #120]	@ (8018a94 <etharp_find_entry+0x2d4>)
 8018a1c:	4613      	mov	r3, r2
 8018a1e:	005b      	lsls	r3, r3, #1
 8018a20:	4413      	add	r3, r2
 8018a22:	00db      	lsls	r3, r3, #3
 8018a24:	440b      	add	r3, r1
 8018a26:	3314      	adds	r3, #20
 8018a28:	781b      	ldrb	r3, [r3, #0]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d006      	beq.n	8018a3c <etharp_find_entry+0x27c>
 8018a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8018a98 <etharp_find_entry+0x2d8>)
 8018a30:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8018a34:	491d      	ldr	r1, [pc, #116]	@ (8018aac <etharp_find_entry+0x2ec>)
 8018a36:	481a      	ldr	r0, [pc, #104]	@ (8018aa0 <etharp_find_entry+0x2e0>)
 8018a38:	f010 fc74 	bl	8029324 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d00b      	beq.n	8018a5a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018a42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	6819      	ldr	r1, [r3, #0]
 8018a4a:	4812      	ldr	r0, [pc, #72]	@ (8018a94 <etharp_find_entry+0x2d4>)
 8018a4c:	4613      	mov	r3, r2
 8018a4e:	005b      	lsls	r3, r3, #1
 8018a50:	4413      	add	r3, r2
 8018a52:	00db      	lsls	r3, r3, #3
 8018a54:	4403      	add	r3, r0
 8018a56:	3304      	adds	r3, #4
 8018a58:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018a5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a5e:	490d      	ldr	r1, [pc, #52]	@ (8018a94 <etharp_find_entry+0x2d4>)
 8018a60:	4613      	mov	r3, r2
 8018a62:	005b      	lsls	r3, r3, #1
 8018a64:	4413      	add	r3, r2
 8018a66:	00db      	lsls	r3, r3, #3
 8018a68:	440b      	add	r3, r1
 8018a6a:	3312      	adds	r3, #18
 8018a6c:	2200      	movs	r2, #0
 8018a6e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018a70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a74:	4907      	ldr	r1, [pc, #28]	@ (8018a94 <etharp_find_entry+0x2d4>)
 8018a76:	4613      	mov	r3, r2
 8018a78:	005b      	lsls	r3, r3, #1
 8018a7a:	4413      	add	r3, r2
 8018a7c:	00db      	lsls	r3, r3, #3
 8018a7e:	440b      	add	r3, r1
 8018a80:	3308      	adds	r3, #8
 8018a82:	687a      	ldr	r2, [r7, #4]
 8018a84:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018a86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018a8a:	4618      	mov	r0, r3
 8018a8c:	3728      	adds	r7, #40	@ 0x28
 8018a8e:	46bd      	mov	sp, r7
 8018a90:	bd80      	pop	{r7, pc}
 8018a92:	bf00      	nop
 8018a94:	20042614 	.word	0x20042614
 8018a98:	0802e8a4 	.word	0x0802e8a4
 8018a9c:	0802e8dc 	.word	0x0802e8dc
 8018aa0:	0802e91c 	.word	0x0802e91c
 8018aa4:	0802e944 	.word	0x0802e944
 8018aa8:	0802e95c 	.word	0x0802e95c
 8018aac:	0802e970 	.word	0x0802e970

08018ab0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b088      	sub	sp, #32
 8018ab4:	af02      	add	r7, sp, #8
 8018ab6:	60f8      	str	r0, [r7, #12]
 8018ab8:	60b9      	str	r1, [r7, #8]
 8018aba:	607a      	str	r2, [r7, #4]
 8018abc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018ac4:	2b06      	cmp	r3, #6
 8018ac6:	d006      	beq.n	8018ad6 <etharp_update_arp_entry+0x26>
 8018ac8:	4b48      	ldr	r3, [pc, #288]	@ (8018bec <etharp_update_arp_entry+0x13c>)
 8018aca:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8018ace:	4948      	ldr	r1, [pc, #288]	@ (8018bf0 <etharp_update_arp_entry+0x140>)
 8018ad0:	4848      	ldr	r0, [pc, #288]	@ (8018bf4 <etharp_update_arp_entry+0x144>)
 8018ad2:	f010 fc27 	bl	8029324 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018ad6:	68bb      	ldr	r3, [r7, #8]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d012      	beq.n	8018b02 <etharp_update_arp_entry+0x52>
 8018adc:	68bb      	ldr	r3, [r7, #8]
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d00e      	beq.n	8018b02 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018ae4:	68bb      	ldr	r3, [r7, #8]
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	68f9      	ldr	r1, [r7, #12]
 8018aea:	4618      	mov	r0, r3
 8018aec:	f001 fe48 	bl	801a780 <ip4_addr_isbroadcast_u32>
 8018af0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d105      	bne.n	8018b02 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018af6:	68bb      	ldr	r3, [r7, #8]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018afe:	2be0      	cmp	r3, #224	@ 0xe0
 8018b00:	d102      	bne.n	8018b08 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018b02:	f06f 030f 	mvn.w	r3, #15
 8018b06:	e06c      	b.n	8018be2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018b08:	78fb      	ldrb	r3, [r7, #3]
 8018b0a:	68fa      	ldr	r2, [r7, #12]
 8018b0c:	4619      	mov	r1, r3
 8018b0e:	68b8      	ldr	r0, [r7, #8]
 8018b10:	f7ff fe56 	bl	80187c0 <etharp_find_entry>
 8018b14:	4603      	mov	r3, r0
 8018b16:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018b18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	da02      	bge.n	8018b26 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018b20:	8afb      	ldrh	r3, [r7, #22]
 8018b22:	b25b      	sxtb	r3, r3
 8018b24:	e05d      	b.n	8018be2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018b26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b2a:	4933      	ldr	r1, [pc, #204]	@ (8018bf8 <etharp_update_arp_entry+0x148>)
 8018b2c:	4613      	mov	r3, r2
 8018b2e:	005b      	lsls	r3, r3, #1
 8018b30:	4413      	add	r3, r2
 8018b32:	00db      	lsls	r3, r3, #3
 8018b34:	440b      	add	r3, r1
 8018b36:	3314      	adds	r3, #20
 8018b38:	2202      	movs	r2, #2
 8018b3a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018b3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b40:	492d      	ldr	r1, [pc, #180]	@ (8018bf8 <etharp_update_arp_entry+0x148>)
 8018b42:	4613      	mov	r3, r2
 8018b44:	005b      	lsls	r3, r3, #1
 8018b46:	4413      	add	r3, r2
 8018b48:	00db      	lsls	r3, r3, #3
 8018b4a:	440b      	add	r3, r1
 8018b4c:	3308      	adds	r3, #8
 8018b4e:	68fa      	ldr	r2, [r7, #12]
 8018b50:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018b52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b56:	4613      	mov	r3, r2
 8018b58:	005b      	lsls	r3, r3, #1
 8018b5a:	4413      	add	r3, r2
 8018b5c:	00db      	lsls	r3, r3, #3
 8018b5e:	3308      	adds	r3, #8
 8018b60:	4a25      	ldr	r2, [pc, #148]	@ (8018bf8 <etharp_update_arp_entry+0x148>)
 8018b62:	4413      	add	r3, r2
 8018b64:	3304      	adds	r3, #4
 8018b66:	2206      	movs	r2, #6
 8018b68:	6879      	ldr	r1, [r7, #4]
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	f010 fe7d 	bl	802986a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018b70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b74:	4920      	ldr	r1, [pc, #128]	@ (8018bf8 <etharp_update_arp_entry+0x148>)
 8018b76:	4613      	mov	r3, r2
 8018b78:	005b      	lsls	r3, r3, #1
 8018b7a:	4413      	add	r3, r2
 8018b7c:	00db      	lsls	r3, r3, #3
 8018b7e:	440b      	add	r3, r1
 8018b80:	3312      	adds	r3, #18
 8018b82:	2200      	movs	r2, #0
 8018b84:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018b86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b8a:	491b      	ldr	r1, [pc, #108]	@ (8018bf8 <etharp_update_arp_entry+0x148>)
 8018b8c:	4613      	mov	r3, r2
 8018b8e:	005b      	lsls	r3, r3, #1
 8018b90:	4413      	add	r3, r2
 8018b92:	00db      	lsls	r3, r3, #3
 8018b94:	440b      	add	r3, r1
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d021      	beq.n	8018be0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018b9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018ba0:	4915      	ldr	r1, [pc, #84]	@ (8018bf8 <etharp_update_arp_entry+0x148>)
 8018ba2:	4613      	mov	r3, r2
 8018ba4:	005b      	lsls	r3, r3, #1
 8018ba6:	4413      	add	r3, r2
 8018ba8:	00db      	lsls	r3, r3, #3
 8018baa:	440b      	add	r3, r1
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018bb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018bb4:	4910      	ldr	r1, [pc, #64]	@ (8018bf8 <etharp_update_arp_entry+0x148>)
 8018bb6:	4613      	mov	r3, r2
 8018bb8:	005b      	lsls	r3, r3, #1
 8018bba:	4413      	add	r3, r2
 8018bbc:	00db      	lsls	r3, r3, #3
 8018bbe:	440b      	add	r3, r1
 8018bc0:	2200      	movs	r2, #0
 8018bc2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8018bca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018bce:	9300      	str	r3, [sp, #0]
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	6939      	ldr	r1, [r7, #16]
 8018bd4:	68f8      	ldr	r0, [r7, #12]
 8018bd6:	f002 fe1f 	bl	801b818 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018bda:	6938      	ldr	r0, [r7, #16]
 8018bdc:	f7f8 fbd4 	bl	8011388 <pbuf_free>
  }
  return ERR_OK;
 8018be0:	2300      	movs	r3, #0
}
 8018be2:	4618      	mov	r0, r3
 8018be4:	3718      	adds	r7, #24
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bd80      	pop	{r7, pc}
 8018bea:	bf00      	nop
 8018bec:	0802e8a4 	.word	0x0802e8a4
 8018bf0:	0802e99c 	.word	0x0802e99c
 8018bf4:	0802e91c 	.word	0x0802e91c
 8018bf8:	20042614 	.word	0x20042614

08018bfc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b084      	sub	sp, #16
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018c04:	2300      	movs	r3, #0
 8018c06:	60fb      	str	r3, [r7, #12]
 8018c08:	e01e      	b.n	8018c48 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018c0a:	4913      	ldr	r1, [pc, #76]	@ (8018c58 <etharp_cleanup_netif+0x5c>)
 8018c0c:	68fa      	ldr	r2, [r7, #12]
 8018c0e:	4613      	mov	r3, r2
 8018c10:	005b      	lsls	r3, r3, #1
 8018c12:	4413      	add	r3, r2
 8018c14:	00db      	lsls	r3, r3, #3
 8018c16:	440b      	add	r3, r1
 8018c18:	3314      	adds	r3, #20
 8018c1a:	781b      	ldrb	r3, [r3, #0]
 8018c1c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018c1e:	7afb      	ldrb	r3, [r7, #11]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d00e      	beq.n	8018c42 <etharp_cleanup_netif+0x46>
 8018c24:	490c      	ldr	r1, [pc, #48]	@ (8018c58 <etharp_cleanup_netif+0x5c>)
 8018c26:	68fa      	ldr	r2, [r7, #12]
 8018c28:	4613      	mov	r3, r2
 8018c2a:	005b      	lsls	r3, r3, #1
 8018c2c:	4413      	add	r3, r2
 8018c2e:	00db      	lsls	r3, r3, #3
 8018c30:	440b      	add	r3, r1
 8018c32:	3308      	adds	r3, #8
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	687a      	ldr	r2, [r7, #4]
 8018c38:	429a      	cmp	r2, r3
 8018c3a:	d102      	bne.n	8018c42 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018c3c:	68f8      	ldr	r0, [r7, #12]
 8018c3e:	f7ff fce5 	bl	801860c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	3301      	adds	r3, #1
 8018c46:	60fb      	str	r3, [r7, #12]
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	2b09      	cmp	r3, #9
 8018c4c:	dddd      	ble.n	8018c0a <etharp_cleanup_netif+0xe>
    }
  }
}
 8018c4e:	bf00      	nop
 8018c50:	bf00      	nop
 8018c52:	3710      	adds	r7, #16
 8018c54:	46bd      	mov	sp, r7
 8018c56:	bd80      	pop	{r7, pc}
 8018c58:	20042614 	.word	0x20042614

08018c5c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018c5c:	b5b0      	push	{r4, r5, r7, lr}
 8018c5e:	b08a      	sub	sp, #40	@ 0x28
 8018c60:	af04      	add	r7, sp, #16
 8018c62:	6078      	str	r0, [r7, #4]
 8018c64:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018c66:	683b      	ldr	r3, [r7, #0]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d107      	bne.n	8018c7c <etharp_input+0x20>
 8018c6c:	4b3d      	ldr	r3, [pc, #244]	@ (8018d64 <etharp_input+0x108>)
 8018c6e:	f240 228a 	movw	r2, #650	@ 0x28a
 8018c72:	493d      	ldr	r1, [pc, #244]	@ (8018d68 <etharp_input+0x10c>)
 8018c74:	483d      	ldr	r0, [pc, #244]	@ (8018d6c <etharp_input+0x110>)
 8018c76:	f010 fb55 	bl	8029324 <iprintf>
 8018c7a:	e06f      	b.n	8018d5c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	685b      	ldr	r3, [r3, #4]
 8018c80:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018c82:	693b      	ldr	r3, [r7, #16]
 8018c84:	881b      	ldrh	r3, [r3, #0]
 8018c86:	b29b      	uxth	r3, r3
 8018c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018c8c:	d10c      	bne.n	8018ca8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018c8e:	693b      	ldr	r3, [r7, #16]
 8018c90:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018c92:	2b06      	cmp	r3, #6
 8018c94:	d108      	bne.n	8018ca8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018c96:	693b      	ldr	r3, [r7, #16]
 8018c98:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018c9a:	2b04      	cmp	r3, #4
 8018c9c:	d104      	bne.n	8018ca8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018c9e:	693b      	ldr	r3, [r7, #16]
 8018ca0:	885b      	ldrh	r3, [r3, #2]
 8018ca2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018ca4:	2b08      	cmp	r3, #8
 8018ca6:	d003      	beq.n	8018cb0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018ca8:	6878      	ldr	r0, [r7, #4]
 8018caa:	f7f8 fb6d 	bl	8011388 <pbuf_free>
    return;
 8018cae:	e055      	b.n	8018d5c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018cb0:	693b      	ldr	r3, [r7, #16]
 8018cb2:	330e      	adds	r3, #14
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018cb8:	693b      	ldr	r3, [r7, #16]
 8018cba:	3318      	adds	r3, #24
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018cc0:	683b      	ldr	r3, [r7, #0]
 8018cc2:	3304      	adds	r3, #4
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d102      	bne.n	8018cd0 <etharp_input+0x74>
    for_us = 0;
 8018cca:	2300      	movs	r3, #0
 8018ccc:	75fb      	strb	r3, [r7, #23]
 8018cce:	e009      	b.n	8018ce4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018cd0:	68ba      	ldr	r2, [r7, #8]
 8018cd2:	683b      	ldr	r3, [r7, #0]
 8018cd4:	3304      	adds	r3, #4
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	429a      	cmp	r2, r3
 8018cda:	bf0c      	ite	eq
 8018cdc:	2301      	moveq	r3, #1
 8018cde:	2300      	movne	r3, #0
 8018ce0:	b2db      	uxtb	r3, r3
 8018ce2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018ce4:	693b      	ldr	r3, [r7, #16]
 8018ce6:	f103 0208 	add.w	r2, r3, #8
 8018cea:	7dfb      	ldrb	r3, [r7, #23]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d001      	beq.n	8018cf4 <etharp_input+0x98>
 8018cf0:	2301      	movs	r3, #1
 8018cf2:	e000      	b.n	8018cf6 <etharp_input+0x9a>
 8018cf4:	2302      	movs	r3, #2
 8018cf6:	f107 010c 	add.w	r1, r7, #12
 8018cfa:	6838      	ldr	r0, [r7, #0]
 8018cfc:	f7ff fed8 	bl	8018ab0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018d00:	693b      	ldr	r3, [r7, #16]
 8018d02:	88db      	ldrh	r3, [r3, #6]
 8018d04:	b29b      	uxth	r3, r3
 8018d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018d0a:	d003      	beq.n	8018d14 <etharp_input+0xb8>
 8018d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018d10:	d01e      	beq.n	8018d50 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018d12:	e020      	b.n	8018d56 <etharp_input+0xfa>
      if (for_us) {
 8018d14:	7dfb      	ldrb	r3, [r7, #23]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d01c      	beq.n	8018d54 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018d1a:	683b      	ldr	r3, [r7, #0]
 8018d1c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8018d20:	693b      	ldr	r3, [r7, #16]
 8018d22:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018d26:	683b      	ldr	r3, [r7, #0]
 8018d28:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8018d2c:	683b      	ldr	r3, [r7, #0]
 8018d2e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018d30:	693a      	ldr	r2, [r7, #16]
 8018d32:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018d34:	2102      	movs	r1, #2
 8018d36:	9103      	str	r1, [sp, #12]
 8018d38:	f107 010c 	add.w	r1, r7, #12
 8018d3c:	9102      	str	r1, [sp, #8]
 8018d3e:	9201      	str	r2, [sp, #4]
 8018d40:	9300      	str	r3, [sp, #0]
 8018d42:	462b      	mov	r3, r5
 8018d44:	4622      	mov	r2, r4
 8018d46:	4601      	mov	r1, r0
 8018d48:	6838      	ldr	r0, [r7, #0]
 8018d4a:	f000 faeb 	bl	8019324 <etharp_raw>
      break;
 8018d4e:	e001      	b.n	8018d54 <etharp_input+0xf8>
      break;
 8018d50:	bf00      	nop
 8018d52:	e000      	b.n	8018d56 <etharp_input+0xfa>
      break;
 8018d54:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	f7f8 fb16 	bl	8011388 <pbuf_free>
}
 8018d5c:	3718      	adds	r7, #24
 8018d5e:	46bd      	mov	sp, r7
 8018d60:	bdb0      	pop	{r4, r5, r7, pc}
 8018d62:	bf00      	nop
 8018d64:	0802e8a4 	.word	0x0802e8a4
 8018d68:	0802e9f4 	.word	0x0802e9f4
 8018d6c:	0802e91c 	.word	0x0802e91c

08018d70 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b086      	sub	sp, #24
 8018d74:	af02      	add	r7, sp, #8
 8018d76:	60f8      	str	r0, [r7, #12]
 8018d78:	60b9      	str	r1, [r7, #8]
 8018d7a:	4613      	mov	r3, r2
 8018d7c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018d7e:	79fa      	ldrb	r2, [r7, #7]
 8018d80:	4944      	ldr	r1, [pc, #272]	@ (8018e94 <etharp_output_to_arp_index+0x124>)
 8018d82:	4613      	mov	r3, r2
 8018d84:	005b      	lsls	r3, r3, #1
 8018d86:	4413      	add	r3, r2
 8018d88:	00db      	lsls	r3, r3, #3
 8018d8a:	440b      	add	r3, r1
 8018d8c:	3314      	adds	r3, #20
 8018d8e:	781b      	ldrb	r3, [r3, #0]
 8018d90:	2b01      	cmp	r3, #1
 8018d92:	d806      	bhi.n	8018da2 <etharp_output_to_arp_index+0x32>
 8018d94:	4b40      	ldr	r3, [pc, #256]	@ (8018e98 <etharp_output_to_arp_index+0x128>)
 8018d96:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8018d9a:	4940      	ldr	r1, [pc, #256]	@ (8018e9c <etharp_output_to_arp_index+0x12c>)
 8018d9c:	4840      	ldr	r0, [pc, #256]	@ (8018ea0 <etharp_output_to_arp_index+0x130>)
 8018d9e:	f010 fac1 	bl	8029324 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018da2:	79fa      	ldrb	r2, [r7, #7]
 8018da4:	493b      	ldr	r1, [pc, #236]	@ (8018e94 <etharp_output_to_arp_index+0x124>)
 8018da6:	4613      	mov	r3, r2
 8018da8:	005b      	lsls	r3, r3, #1
 8018daa:	4413      	add	r3, r2
 8018dac:	00db      	lsls	r3, r3, #3
 8018dae:	440b      	add	r3, r1
 8018db0:	3314      	adds	r3, #20
 8018db2:	781b      	ldrb	r3, [r3, #0]
 8018db4:	2b02      	cmp	r3, #2
 8018db6:	d153      	bne.n	8018e60 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018db8:	79fa      	ldrb	r2, [r7, #7]
 8018dba:	4936      	ldr	r1, [pc, #216]	@ (8018e94 <etharp_output_to_arp_index+0x124>)
 8018dbc:	4613      	mov	r3, r2
 8018dbe:	005b      	lsls	r3, r3, #1
 8018dc0:	4413      	add	r3, r2
 8018dc2:	00db      	lsls	r3, r3, #3
 8018dc4:	440b      	add	r3, r1
 8018dc6:	3312      	adds	r3, #18
 8018dc8:	881b      	ldrh	r3, [r3, #0]
 8018dca:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8018dce:	d919      	bls.n	8018e04 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018dd0:	79fa      	ldrb	r2, [r7, #7]
 8018dd2:	4613      	mov	r3, r2
 8018dd4:	005b      	lsls	r3, r3, #1
 8018dd6:	4413      	add	r3, r2
 8018dd8:	00db      	lsls	r3, r3, #3
 8018dda:	4a2e      	ldr	r2, [pc, #184]	@ (8018e94 <etharp_output_to_arp_index+0x124>)
 8018ddc:	4413      	add	r3, r2
 8018dde:	3304      	adds	r3, #4
 8018de0:	4619      	mov	r1, r3
 8018de2:	68f8      	ldr	r0, [r7, #12]
 8018de4:	f000 fb4c 	bl	8019480 <etharp_request>
 8018de8:	4603      	mov	r3, r0
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d138      	bne.n	8018e60 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018dee:	79fa      	ldrb	r2, [r7, #7]
 8018df0:	4928      	ldr	r1, [pc, #160]	@ (8018e94 <etharp_output_to_arp_index+0x124>)
 8018df2:	4613      	mov	r3, r2
 8018df4:	005b      	lsls	r3, r3, #1
 8018df6:	4413      	add	r3, r2
 8018df8:	00db      	lsls	r3, r3, #3
 8018dfa:	440b      	add	r3, r1
 8018dfc:	3314      	adds	r3, #20
 8018dfe:	2203      	movs	r2, #3
 8018e00:	701a      	strb	r2, [r3, #0]
 8018e02:	e02d      	b.n	8018e60 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018e04:	79fa      	ldrb	r2, [r7, #7]
 8018e06:	4923      	ldr	r1, [pc, #140]	@ (8018e94 <etharp_output_to_arp_index+0x124>)
 8018e08:	4613      	mov	r3, r2
 8018e0a:	005b      	lsls	r3, r3, #1
 8018e0c:	4413      	add	r3, r2
 8018e0e:	00db      	lsls	r3, r3, #3
 8018e10:	440b      	add	r3, r1
 8018e12:	3312      	adds	r3, #18
 8018e14:	881b      	ldrh	r3, [r3, #0]
 8018e16:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8018e1a:	d321      	bcc.n	8018e60 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018e1c:	79fa      	ldrb	r2, [r7, #7]
 8018e1e:	4613      	mov	r3, r2
 8018e20:	005b      	lsls	r3, r3, #1
 8018e22:	4413      	add	r3, r2
 8018e24:	00db      	lsls	r3, r3, #3
 8018e26:	4a1b      	ldr	r2, [pc, #108]	@ (8018e94 <etharp_output_to_arp_index+0x124>)
 8018e28:	4413      	add	r3, r2
 8018e2a:	1d19      	adds	r1, r3, #4
 8018e2c:	79fa      	ldrb	r2, [r7, #7]
 8018e2e:	4613      	mov	r3, r2
 8018e30:	005b      	lsls	r3, r3, #1
 8018e32:	4413      	add	r3, r2
 8018e34:	00db      	lsls	r3, r3, #3
 8018e36:	3308      	adds	r3, #8
 8018e38:	4a16      	ldr	r2, [pc, #88]	@ (8018e94 <etharp_output_to_arp_index+0x124>)
 8018e3a:	4413      	add	r3, r2
 8018e3c:	3304      	adds	r3, #4
 8018e3e:	461a      	mov	r2, r3
 8018e40:	68f8      	ldr	r0, [r7, #12]
 8018e42:	f000 fafb 	bl	801943c <etharp_request_dst>
 8018e46:	4603      	mov	r3, r0
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d109      	bne.n	8018e60 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018e4c:	79fa      	ldrb	r2, [r7, #7]
 8018e4e:	4911      	ldr	r1, [pc, #68]	@ (8018e94 <etharp_output_to_arp_index+0x124>)
 8018e50:	4613      	mov	r3, r2
 8018e52:	005b      	lsls	r3, r3, #1
 8018e54:	4413      	add	r3, r2
 8018e56:	00db      	lsls	r3, r3, #3
 8018e58:	440b      	add	r3, r1
 8018e5a:	3314      	adds	r3, #20
 8018e5c:	2203      	movs	r2, #3
 8018e5e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8018e66:	79fa      	ldrb	r2, [r7, #7]
 8018e68:	4613      	mov	r3, r2
 8018e6a:	005b      	lsls	r3, r3, #1
 8018e6c:	4413      	add	r3, r2
 8018e6e:	00db      	lsls	r3, r3, #3
 8018e70:	3308      	adds	r3, #8
 8018e72:	4a08      	ldr	r2, [pc, #32]	@ (8018e94 <etharp_output_to_arp_index+0x124>)
 8018e74:	4413      	add	r3, r2
 8018e76:	3304      	adds	r3, #4
 8018e78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018e7c:	9200      	str	r2, [sp, #0]
 8018e7e:	460a      	mov	r2, r1
 8018e80:	68b9      	ldr	r1, [r7, #8]
 8018e82:	68f8      	ldr	r0, [r7, #12]
 8018e84:	f002 fcc8 	bl	801b818 <ethernet_output>
 8018e88:	4603      	mov	r3, r0
}
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	3710      	adds	r7, #16
 8018e8e:	46bd      	mov	sp, r7
 8018e90:	bd80      	pop	{r7, pc}
 8018e92:	bf00      	nop
 8018e94:	20042614 	.word	0x20042614
 8018e98:	0802e8a4 	.word	0x0802e8a4
 8018e9c:	0802ea14 	.word	0x0802ea14
 8018ea0:	0802e91c 	.word	0x0802e91c

08018ea4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b08a      	sub	sp, #40	@ 0x28
 8018ea8:	af02      	add	r7, sp, #8
 8018eaa:	60f8      	str	r0, [r7, #12]
 8018eac:	60b9      	str	r1, [r7, #8]
 8018eae:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d106      	bne.n	8018ec8 <etharp_output+0x24>
 8018eba:	4b73      	ldr	r3, [pc, #460]	@ (8019088 <etharp_output+0x1e4>)
 8018ebc:	f240 321e 	movw	r2, #798	@ 0x31e
 8018ec0:	4972      	ldr	r1, [pc, #456]	@ (801908c <etharp_output+0x1e8>)
 8018ec2:	4873      	ldr	r0, [pc, #460]	@ (8019090 <etharp_output+0x1ec>)
 8018ec4:	f010 fa2e 	bl	8029324 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018ec8:	68bb      	ldr	r3, [r7, #8]
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d106      	bne.n	8018edc <etharp_output+0x38>
 8018ece:	4b6e      	ldr	r3, [pc, #440]	@ (8019088 <etharp_output+0x1e4>)
 8018ed0:	f240 321f 	movw	r2, #799	@ 0x31f
 8018ed4:	496f      	ldr	r1, [pc, #444]	@ (8019094 <etharp_output+0x1f0>)
 8018ed6:	486e      	ldr	r0, [pc, #440]	@ (8019090 <etharp_output+0x1ec>)
 8018ed8:	f010 fa24 	bl	8029324 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d106      	bne.n	8018ef0 <etharp_output+0x4c>
 8018ee2:	4b69      	ldr	r3, [pc, #420]	@ (8019088 <etharp_output+0x1e4>)
 8018ee4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8018ee8:	496b      	ldr	r1, [pc, #428]	@ (8019098 <etharp_output+0x1f4>)
 8018eea:	4869      	ldr	r0, [pc, #420]	@ (8019090 <etharp_output+0x1ec>)
 8018eec:	f010 fa1a 	bl	8029324 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	68f9      	ldr	r1, [r7, #12]
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	f001 fc42 	bl	801a780 <ip4_addr_isbroadcast_u32>
 8018efc:	4603      	mov	r3, r0
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d002      	beq.n	8018f08 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018f02:	4b66      	ldr	r3, [pc, #408]	@ (801909c <etharp_output+0x1f8>)
 8018f04:	61fb      	str	r3, [r7, #28]
 8018f06:	e0af      	b.n	8019068 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018f10:	2be0      	cmp	r3, #224	@ 0xe0
 8018f12:	d118      	bne.n	8018f46 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018f14:	2301      	movs	r3, #1
 8018f16:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018f18:	2300      	movs	r3, #0
 8018f1a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018f1c:	235e      	movs	r3, #94	@ 0x5e
 8018f1e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	3301      	adds	r3, #1
 8018f24:	781b      	ldrb	r3, [r3, #0]
 8018f26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018f2a:	b2db      	uxtb	r3, r3
 8018f2c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	3302      	adds	r3, #2
 8018f32:	781b      	ldrb	r3, [r3, #0]
 8018f34:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	3303      	adds	r3, #3
 8018f3a:	781b      	ldrb	r3, [r3, #0]
 8018f3c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018f3e:	f107 0310 	add.w	r3, r7, #16
 8018f42:	61fb      	str	r3, [r7, #28]
 8018f44:	e090      	b.n	8019068 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	681a      	ldr	r2, [r3, #0]
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	3304      	adds	r3, #4
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	405a      	eors	r2, r3
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	3308      	adds	r3, #8
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	4013      	ands	r3, r2
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d012      	beq.n	8018f84 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018f64:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8018f68:	4293      	cmp	r3, r2
 8018f6a:	d00b      	beq.n	8018f84 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	330c      	adds	r3, #12
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d003      	beq.n	8018f7e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	330c      	adds	r3, #12
 8018f7a:	61bb      	str	r3, [r7, #24]
 8018f7c:	e002      	b.n	8018f84 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018f7e:	f06f 0303 	mvn.w	r3, #3
 8018f82:	e07d      	b.n	8019080 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018f84:	4b46      	ldr	r3, [pc, #280]	@ (80190a0 <etharp_output+0x1fc>)
 8018f86:	781b      	ldrb	r3, [r3, #0]
 8018f88:	4619      	mov	r1, r3
 8018f8a:	4a46      	ldr	r2, [pc, #280]	@ (80190a4 <etharp_output+0x200>)
 8018f8c:	460b      	mov	r3, r1
 8018f8e:	005b      	lsls	r3, r3, #1
 8018f90:	440b      	add	r3, r1
 8018f92:	00db      	lsls	r3, r3, #3
 8018f94:	4413      	add	r3, r2
 8018f96:	3314      	adds	r3, #20
 8018f98:	781b      	ldrb	r3, [r3, #0]
 8018f9a:	2b01      	cmp	r3, #1
 8018f9c:	d925      	bls.n	8018fea <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018f9e:	4b40      	ldr	r3, [pc, #256]	@ (80190a0 <etharp_output+0x1fc>)
 8018fa0:	781b      	ldrb	r3, [r3, #0]
 8018fa2:	4619      	mov	r1, r3
 8018fa4:	4a3f      	ldr	r2, [pc, #252]	@ (80190a4 <etharp_output+0x200>)
 8018fa6:	460b      	mov	r3, r1
 8018fa8:	005b      	lsls	r3, r3, #1
 8018faa:	440b      	add	r3, r1
 8018fac:	00db      	lsls	r3, r3, #3
 8018fae:	4413      	add	r3, r2
 8018fb0:	3308      	adds	r3, #8
 8018fb2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018fb4:	68fa      	ldr	r2, [r7, #12]
 8018fb6:	429a      	cmp	r2, r3
 8018fb8:	d117      	bne.n	8018fea <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018fba:	69bb      	ldr	r3, [r7, #24]
 8018fbc:	681a      	ldr	r2, [r3, #0]
 8018fbe:	4b38      	ldr	r3, [pc, #224]	@ (80190a0 <etharp_output+0x1fc>)
 8018fc0:	781b      	ldrb	r3, [r3, #0]
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	4937      	ldr	r1, [pc, #220]	@ (80190a4 <etharp_output+0x200>)
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	005b      	lsls	r3, r3, #1
 8018fca:	4403      	add	r3, r0
 8018fcc:	00db      	lsls	r3, r3, #3
 8018fce:	440b      	add	r3, r1
 8018fd0:	3304      	adds	r3, #4
 8018fd2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018fd4:	429a      	cmp	r2, r3
 8018fd6:	d108      	bne.n	8018fea <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018fd8:	4b31      	ldr	r3, [pc, #196]	@ (80190a0 <etharp_output+0x1fc>)
 8018fda:	781b      	ldrb	r3, [r3, #0]
 8018fdc:	461a      	mov	r2, r3
 8018fde:	68b9      	ldr	r1, [r7, #8]
 8018fe0:	68f8      	ldr	r0, [r7, #12]
 8018fe2:	f7ff fec5 	bl	8018d70 <etharp_output_to_arp_index>
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	e04a      	b.n	8019080 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018fea:	2300      	movs	r3, #0
 8018fec:	75fb      	strb	r3, [r7, #23]
 8018fee:	e031      	b.n	8019054 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018ff0:	7dfa      	ldrb	r2, [r7, #23]
 8018ff2:	492c      	ldr	r1, [pc, #176]	@ (80190a4 <etharp_output+0x200>)
 8018ff4:	4613      	mov	r3, r2
 8018ff6:	005b      	lsls	r3, r3, #1
 8018ff8:	4413      	add	r3, r2
 8018ffa:	00db      	lsls	r3, r3, #3
 8018ffc:	440b      	add	r3, r1
 8018ffe:	3314      	adds	r3, #20
 8019000:	781b      	ldrb	r3, [r3, #0]
 8019002:	2b01      	cmp	r3, #1
 8019004:	d923      	bls.n	801904e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019006:	7dfa      	ldrb	r2, [r7, #23]
 8019008:	4926      	ldr	r1, [pc, #152]	@ (80190a4 <etharp_output+0x200>)
 801900a:	4613      	mov	r3, r2
 801900c:	005b      	lsls	r3, r3, #1
 801900e:	4413      	add	r3, r2
 8019010:	00db      	lsls	r3, r3, #3
 8019012:	440b      	add	r3, r1
 8019014:	3308      	adds	r3, #8
 8019016:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019018:	68fa      	ldr	r2, [r7, #12]
 801901a:	429a      	cmp	r2, r3
 801901c:	d117      	bne.n	801904e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801901e:	69bb      	ldr	r3, [r7, #24]
 8019020:	6819      	ldr	r1, [r3, #0]
 8019022:	7dfa      	ldrb	r2, [r7, #23]
 8019024:	481f      	ldr	r0, [pc, #124]	@ (80190a4 <etharp_output+0x200>)
 8019026:	4613      	mov	r3, r2
 8019028:	005b      	lsls	r3, r3, #1
 801902a:	4413      	add	r3, r2
 801902c:	00db      	lsls	r3, r3, #3
 801902e:	4403      	add	r3, r0
 8019030:	3304      	adds	r3, #4
 8019032:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019034:	4299      	cmp	r1, r3
 8019036:	d10a      	bne.n	801904e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019038:	4a19      	ldr	r2, [pc, #100]	@ (80190a0 <etharp_output+0x1fc>)
 801903a:	7dfb      	ldrb	r3, [r7, #23]
 801903c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801903e:	7dfb      	ldrb	r3, [r7, #23]
 8019040:	461a      	mov	r2, r3
 8019042:	68b9      	ldr	r1, [r7, #8]
 8019044:	68f8      	ldr	r0, [r7, #12]
 8019046:	f7ff fe93 	bl	8018d70 <etharp_output_to_arp_index>
 801904a:	4603      	mov	r3, r0
 801904c:	e018      	b.n	8019080 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801904e:	7dfb      	ldrb	r3, [r7, #23]
 8019050:	3301      	adds	r3, #1
 8019052:	75fb      	strb	r3, [r7, #23]
 8019054:	7dfb      	ldrb	r3, [r7, #23]
 8019056:	2b09      	cmp	r3, #9
 8019058:	d9ca      	bls.n	8018ff0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801905a:	68ba      	ldr	r2, [r7, #8]
 801905c:	69b9      	ldr	r1, [r7, #24]
 801905e:	68f8      	ldr	r0, [r7, #12]
 8019060:	f000 f822 	bl	80190a8 <etharp_query>
 8019064:	4603      	mov	r3, r0
 8019066:	e00b      	b.n	8019080 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801906e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019072:	9300      	str	r3, [sp, #0]
 8019074:	69fb      	ldr	r3, [r7, #28]
 8019076:	68b9      	ldr	r1, [r7, #8]
 8019078:	68f8      	ldr	r0, [r7, #12]
 801907a:	f002 fbcd 	bl	801b818 <ethernet_output>
 801907e:	4603      	mov	r3, r0
}
 8019080:	4618      	mov	r0, r3
 8019082:	3720      	adds	r7, #32
 8019084:	46bd      	mov	sp, r7
 8019086:	bd80      	pop	{r7, pc}
 8019088:	0802e8a4 	.word	0x0802e8a4
 801908c:	0802e9f4 	.word	0x0802e9f4
 8019090:	0802e91c 	.word	0x0802e91c
 8019094:	0802ea44 	.word	0x0802ea44
 8019098:	0802e9e4 	.word	0x0802e9e4
 801909c:	0802f514 	.word	0x0802f514
 80190a0:	20042704 	.word	0x20042704
 80190a4:	20042614 	.word	0x20042614

080190a8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b08c      	sub	sp, #48	@ 0x30
 80190ac:	af02      	add	r7, sp, #8
 80190ae:	60f8      	str	r0, [r7, #12]
 80190b0:	60b9      	str	r1, [r7, #8]
 80190b2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	332a      	adds	r3, #42	@ 0x2a
 80190b8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80190ba:	23ff      	movs	r3, #255	@ 0xff
 80190bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80190c0:	2300      	movs	r3, #0
 80190c2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80190c4:	68bb      	ldr	r3, [r7, #8]
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	68f9      	ldr	r1, [r7, #12]
 80190ca:	4618      	mov	r0, r3
 80190cc:	f001 fb58 	bl	801a780 <ip4_addr_isbroadcast_u32>
 80190d0:	4603      	mov	r3, r0
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d10c      	bne.n	80190f0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80190d6:	68bb      	ldr	r3, [r7, #8]
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80190de:	2be0      	cmp	r3, #224	@ 0xe0
 80190e0:	d006      	beq.n	80190f0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80190e2:	68bb      	ldr	r3, [r7, #8]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d003      	beq.n	80190f0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80190e8:	68bb      	ldr	r3, [r7, #8]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d102      	bne.n	80190f6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80190f0:	f06f 030f 	mvn.w	r3, #15
 80190f4:	e101      	b.n	80192fa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80190f6:	68fa      	ldr	r2, [r7, #12]
 80190f8:	2101      	movs	r1, #1
 80190fa:	68b8      	ldr	r0, [r7, #8]
 80190fc:	f7ff fb60 	bl	80187c0 <etharp_find_entry>
 8019100:	4603      	mov	r3, r0
 8019102:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019104:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019108:	2b00      	cmp	r3, #0
 801910a:	da02      	bge.n	8019112 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801910c:	8a7b      	ldrh	r3, [r7, #18]
 801910e:	b25b      	sxtb	r3, r3
 8019110:	e0f3      	b.n	80192fa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019112:	8a7b      	ldrh	r3, [r7, #18]
 8019114:	2b7e      	cmp	r3, #126	@ 0x7e
 8019116:	d906      	bls.n	8019126 <etharp_query+0x7e>
 8019118:	4b7a      	ldr	r3, [pc, #488]	@ (8019304 <etharp_query+0x25c>)
 801911a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801911e:	497a      	ldr	r1, [pc, #488]	@ (8019308 <etharp_query+0x260>)
 8019120:	487a      	ldr	r0, [pc, #488]	@ (801930c <etharp_query+0x264>)
 8019122:	f010 f8ff 	bl	8029324 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019126:	8a7b      	ldrh	r3, [r7, #18]
 8019128:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801912a:	7c7a      	ldrb	r2, [r7, #17]
 801912c:	4978      	ldr	r1, [pc, #480]	@ (8019310 <etharp_query+0x268>)
 801912e:	4613      	mov	r3, r2
 8019130:	005b      	lsls	r3, r3, #1
 8019132:	4413      	add	r3, r2
 8019134:	00db      	lsls	r3, r3, #3
 8019136:	440b      	add	r3, r1
 8019138:	3314      	adds	r3, #20
 801913a:	781b      	ldrb	r3, [r3, #0]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d115      	bne.n	801916c <etharp_query+0xc4>
    is_new_entry = 1;
 8019140:	2301      	movs	r3, #1
 8019142:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019144:	7c7a      	ldrb	r2, [r7, #17]
 8019146:	4972      	ldr	r1, [pc, #456]	@ (8019310 <etharp_query+0x268>)
 8019148:	4613      	mov	r3, r2
 801914a:	005b      	lsls	r3, r3, #1
 801914c:	4413      	add	r3, r2
 801914e:	00db      	lsls	r3, r3, #3
 8019150:	440b      	add	r3, r1
 8019152:	3314      	adds	r3, #20
 8019154:	2201      	movs	r2, #1
 8019156:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019158:	7c7a      	ldrb	r2, [r7, #17]
 801915a:	496d      	ldr	r1, [pc, #436]	@ (8019310 <etharp_query+0x268>)
 801915c:	4613      	mov	r3, r2
 801915e:	005b      	lsls	r3, r3, #1
 8019160:	4413      	add	r3, r2
 8019162:	00db      	lsls	r3, r3, #3
 8019164:	440b      	add	r3, r1
 8019166:	3308      	adds	r3, #8
 8019168:	68fa      	ldr	r2, [r7, #12]
 801916a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801916c:	7c7a      	ldrb	r2, [r7, #17]
 801916e:	4968      	ldr	r1, [pc, #416]	@ (8019310 <etharp_query+0x268>)
 8019170:	4613      	mov	r3, r2
 8019172:	005b      	lsls	r3, r3, #1
 8019174:	4413      	add	r3, r2
 8019176:	00db      	lsls	r3, r3, #3
 8019178:	440b      	add	r3, r1
 801917a:	3314      	adds	r3, #20
 801917c:	781b      	ldrb	r3, [r3, #0]
 801917e:	2b01      	cmp	r3, #1
 8019180:	d011      	beq.n	80191a6 <etharp_query+0xfe>
 8019182:	7c7a      	ldrb	r2, [r7, #17]
 8019184:	4962      	ldr	r1, [pc, #392]	@ (8019310 <etharp_query+0x268>)
 8019186:	4613      	mov	r3, r2
 8019188:	005b      	lsls	r3, r3, #1
 801918a:	4413      	add	r3, r2
 801918c:	00db      	lsls	r3, r3, #3
 801918e:	440b      	add	r3, r1
 8019190:	3314      	adds	r3, #20
 8019192:	781b      	ldrb	r3, [r3, #0]
 8019194:	2b01      	cmp	r3, #1
 8019196:	d806      	bhi.n	80191a6 <etharp_query+0xfe>
 8019198:	4b5a      	ldr	r3, [pc, #360]	@ (8019304 <etharp_query+0x25c>)
 801919a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801919e:	495d      	ldr	r1, [pc, #372]	@ (8019314 <etharp_query+0x26c>)
 80191a0:	485a      	ldr	r0, [pc, #360]	@ (801930c <etharp_query+0x264>)
 80191a2:	f010 f8bf 	bl	8029324 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80191a6:	6a3b      	ldr	r3, [r7, #32]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d102      	bne.n	80191b2 <etharp_query+0x10a>
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d10c      	bne.n	80191cc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80191b2:	68b9      	ldr	r1, [r7, #8]
 80191b4:	68f8      	ldr	r0, [r7, #12]
 80191b6:	f000 f963 	bl	8019480 <etharp_request>
 80191ba:	4603      	mov	r3, r0
 80191bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d102      	bne.n	80191cc <etharp_query+0x124>
      return result;
 80191c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80191ca:	e096      	b.n	80192fa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d106      	bne.n	80191e0 <etharp_query+0x138>
 80191d2:	4b4c      	ldr	r3, [pc, #304]	@ (8019304 <etharp_query+0x25c>)
 80191d4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80191d8:	494f      	ldr	r1, [pc, #316]	@ (8019318 <etharp_query+0x270>)
 80191da:	484c      	ldr	r0, [pc, #304]	@ (801930c <etharp_query+0x264>)
 80191dc:	f010 f8a2 	bl	8029324 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80191e0:	7c7a      	ldrb	r2, [r7, #17]
 80191e2:	494b      	ldr	r1, [pc, #300]	@ (8019310 <etharp_query+0x268>)
 80191e4:	4613      	mov	r3, r2
 80191e6:	005b      	lsls	r3, r3, #1
 80191e8:	4413      	add	r3, r2
 80191ea:	00db      	lsls	r3, r3, #3
 80191ec:	440b      	add	r3, r1
 80191ee:	3314      	adds	r3, #20
 80191f0:	781b      	ldrb	r3, [r3, #0]
 80191f2:	2b01      	cmp	r3, #1
 80191f4:	d917      	bls.n	8019226 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80191f6:	4a49      	ldr	r2, [pc, #292]	@ (801931c <etharp_query+0x274>)
 80191f8:	7c7b      	ldrb	r3, [r7, #17]
 80191fa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80191fc:	7c7a      	ldrb	r2, [r7, #17]
 80191fe:	4613      	mov	r3, r2
 8019200:	005b      	lsls	r3, r3, #1
 8019202:	4413      	add	r3, r2
 8019204:	00db      	lsls	r3, r3, #3
 8019206:	3308      	adds	r3, #8
 8019208:	4a41      	ldr	r2, [pc, #260]	@ (8019310 <etharp_query+0x268>)
 801920a:	4413      	add	r3, r2
 801920c:	3304      	adds	r3, #4
 801920e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019212:	9200      	str	r2, [sp, #0]
 8019214:	697a      	ldr	r2, [r7, #20]
 8019216:	6879      	ldr	r1, [r7, #4]
 8019218:	68f8      	ldr	r0, [r7, #12]
 801921a:	f002 fafd 	bl	801b818 <ethernet_output>
 801921e:	4603      	mov	r3, r0
 8019220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019224:	e067      	b.n	80192f6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019226:	7c7a      	ldrb	r2, [r7, #17]
 8019228:	4939      	ldr	r1, [pc, #228]	@ (8019310 <etharp_query+0x268>)
 801922a:	4613      	mov	r3, r2
 801922c:	005b      	lsls	r3, r3, #1
 801922e:	4413      	add	r3, r2
 8019230:	00db      	lsls	r3, r3, #3
 8019232:	440b      	add	r3, r1
 8019234:	3314      	adds	r3, #20
 8019236:	781b      	ldrb	r3, [r3, #0]
 8019238:	2b01      	cmp	r3, #1
 801923a:	d15c      	bne.n	80192f6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801923c:	2300      	movs	r3, #0
 801923e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019244:	e01c      	b.n	8019280 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019246:	69fb      	ldr	r3, [r7, #28]
 8019248:	895a      	ldrh	r2, [r3, #10]
 801924a:	69fb      	ldr	r3, [r7, #28]
 801924c:	891b      	ldrh	r3, [r3, #8]
 801924e:	429a      	cmp	r2, r3
 8019250:	d10a      	bne.n	8019268 <etharp_query+0x1c0>
 8019252:	69fb      	ldr	r3, [r7, #28]
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d006      	beq.n	8019268 <etharp_query+0x1c0>
 801925a:	4b2a      	ldr	r3, [pc, #168]	@ (8019304 <etharp_query+0x25c>)
 801925c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8019260:	492f      	ldr	r1, [pc, #188]	@ (8019320 <etharp_query+0x278>)
 8019262:	482a      	ldr	r0, [pc, #168]	@ (801930c <etharp_query+0x264>)
 8019264:	f010 f85e 	bl	8029324 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019268:	69fb      	ldr	r3, [r7, #28]
 801926a:	7b1b      	ldrb	r3, [r3, #12]
 801926c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019270:	2b00      	cmp	r3, #0
 8019272:	d002      	beq.n	801927a <etharp_query+0x1d2>
        copy_needed = 1;
 8019274:	2301      	movs	r3, #1
 8019276:	61bb      	str	r3, [r7, #24]
        break;
 8019278:	e005      	b.n	8019286 <etharp_query+0x1de>
      }
      p = p->next;
 801927a:	69fb      	ldr	r3, [r7, #28]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019280:	69fb      	ldr	r3, [r7, #28]
 8019282:	2b00      	cmp	r3, #0
 8019284:	d1df      	bne.n	8019246 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019286:	69bb      	ldr	r3, [r7, #24]
 8019288:	2b00      	cmp	r3, #0
 801928a:	d007      	beq.n	801929c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801928c:	687a      	ldr	r2, [r7, #4]
 801928e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8019292:	200e      	movs	r0, #14
 8019294:	f7f8 faf0 	bl	8011878 <pbuf_clone>
 8019298:	61f8      	str	r0, [r7, #28]
 801929a:	e004      	b.n	80192a6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80192a0:	69f8      	ldr	r0, [r7, #28]
 80192a2:	f7f8 f917 	bl	80114d4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80192a6:	69fb      	ldr	r3, [r7, #28]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d021      	beq.n	80192f0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80192ac:	7c7a      	ldrb	r2, [r7, #17]
 80192ae:	4918      	ldr	r1, [pc, #96]	@ (8019310 <etharp_query+0x268>)
 80192b0:	4613      	mov	r3, r2
 80192b2:	005b      	lsls	r3, r3, #1
 80192b4:	4413      	add	r3, r2
 80192b6:	00db      	lsls	r3, r3, #3
 80192b8:	440b      	add	r3, r1
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d00a      	beq.n	80192d6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80192c0:	7c7a      	ldrb	r2, [r7, #17]
 80192c2:	4913      	ldr	r1, [pc, #76]	@ (8019310 <etharp_query+0x268>)
 80192c4:	4613      	mov	r3, r2
 80192c6:	005b      	lsls	r3, r3, #1
 80192c8:	4413      	add	r3, r2
 80192ca:	00db      	lsls	r3, r3, #3
 80192cc:	440b      	add	r3, r1
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	4618      	mov	r0, r3
 80192d2:	f7f8 f859 	bl	8011388 <pbuf_free>
      }
      arp_table[i].q = p;
 80192d6:	7c7a      	ldrb	r2, [r7, #17]
 80192d8:	490d      	ldr	r1, [pc, #52]	@ (8019310 <etharp_query+0x268>)
 80192da:	4613      	mov	r3, r2
 80192dc:	005b      	lsls	r3, r3, #1
 80192de:	4413      	add	r3, r2
 80192e0:	00db      	lsls	r3, r3, #3
 80192e2:	440b      	add	r3, r1
 80192e4:	69fa      	ldr	r2, [r7, #28]
 80192e6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80192e8:	2300      	movs	r3, #0
 80192ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80192ee:	e002      	b.n	80192f6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80192f0:	23ff      	movs	r3, #255	@ 0xff
 80192f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80192f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80192fa:	4618      	mov	r0, r3
 80192fc:	3728      	adds	r7, #40	@ 0x28
 80192fe:	46bd      	mov	sp, r7
 8019300:	bd80      	pop	{r7, pc}
 8019302:	bf00      	nop
 8019304:	0802e8a4 	.word	0x0802e8a4
 8019308:	0802ea50 	.word	0x0802ea50
 801930c:	0802e91c 	.word	0x0802e91c
 8019310:	20042614 	.word	0x20042614
 8019314:	0802ea60 	.word	0x0802ea60
 8019318:	0802ea44 	.word	0x0802ea44
 801931c:	20042704 	.word	0x20042704
 8019320:	0802ea88 	.word	0x0802ea88

08019324 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019324:	b580      	push	{r7, lr}
 8019326:	b08a      	sub	sp, #40	@ 0x28
 8019328:	af02      	add	r7, sp, #8
 801932a:	60f8      	str	r0, [r7, #12]
 801932c:	60b9      	str	r1, [r7, #8]
 801932e:	607a      	str	r2, [r7, #4]
 8019330:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019332:	2300      	movs	r3, #0
 8019334:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d106      	bne.n	801934a <etharp_raw+0x26>
 801933c:	4b3a      	ldr	r3, [pc, #232]	@ (8019428 <etharp_raw+0x104>)
 801933e:	f240 4257 	movw	r2, #1111	@ 0x457
 8019342:	493a      	ldr	r1, [pc, #232]	@ (801942c <etharp_raw+0x108>)
 8019344:	483a      	ldr	r0, [pc, #232]	@ (8019430 <etharp_raw+0x10c>)
 8019346:	f00f ffed 	bl	8029324 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801934a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801934e:	211c      	movs	r1, #28
 8019350:	200e      	movs	r0, #14
 8019352:	f7f7 fd03 	bl	8010d5c <pbuf_alloc>
 8019356:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019358:	69bb      	ldr	r3, [r7, #24]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d102      	bne.n	8019364 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801935e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019362:	e05d      	b.n	8019420 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019364:	69bb      	ldr	r3, [r7, #24]
 8019366:	895b      	ldrh	r3, [r3, #10]
 8019368:	2b1b      	cmp	r3, #27
 801936a:	d806      	bhi.n	801937a <etharp_raw+0x56>
 801936c:	4b2e      	ldr	r3, [pc, #184]	@ (8019428 <etharp_raw+0x104>)
 801936e:	f240 4262 	movw	r2, #1122	@ 0x462
 8019372:	4930      	ldr	r1, [pc, #192]	@ (8019434 <etharp_raw+0x110>)
 8019374:	482e      	ldr	r0, [pc, #184]	@ (8019430 <etharp_raw+0x10c>)
 8019376:	f00f ffd5 	bl	8029324 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801937a:	69bb      	ldr	r3, [r7, #24]
 801937c:	685b      	ldr	r3, [r3, #4]
 801937e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019380:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019382:	4618      	mov	r0, r3
 8019384:	f7f6 fb06 	bl	800f994 <lwip_htons>
 8019388:	4603      	mov	r3, r0
 801938a:	461a      	mov	r2, r3
 801938c:	697b      	ldr	r3, [r7, #20]
 801938e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019396:	2b06      	cmp	r3, #6
 8019398:	d006      	beq.n	80193a8 <etharp_raw+0x84>
 801939a:	4b23      	ldr	r3, [pc, #140]	@ (8019428 <etharp_raw+0x104>)
 801939c:	f240 4269 	movw	r2, #1129	@ 0x469
 80193a0:	4925      	ldr	r1, [pc, #148]	@ (8019438 <etharp_raw+0x114>)
 80193a2:	4823      	ldr	r0, [pc, #140]	@ (8019430 <etharp_raw+0x10c>)
 80193a4:	f00f ffbe 	bl	8029324 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80193a8:	697b      	ldr	r3, [r7, #20]
 80193aa:	3308      	adds	r3, #8
 80193ac:	2206      	movs	r2, #6
 80193ae:	6839      	ldr	r1, [r7, #0]
 80193b0:	4618      	mov	r0, r3
 80193b2:	f010 fa5a 	bl	802986a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80193b6:	697b      	ldr	r3, [r7, #20]
 80193b8:	3312      	adds	r3, #18
 80193ba:	2206      	movs	r2, #6
 80193bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80193be:	4618      	mov	r0, r3
 80193c0:	f010 fa53 	bl	802986a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80193c4:	697b      	ldr	r3, [r7, #20]
 80193c6:	330e      	adds	r3, #14
 80193c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80193ca:	6812      	ldr	r2, [r2, #0]
 80193cc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80193ce:	697b      	ldr	r3, [r7, #20]
 80193d0:	3318      	adds	r3, #24
 80193d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80193d4:	6812      	ldr	r2, [r2, #0]
 80193d6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80193d8:	697b      	ldr	r3, [r7, #20]
 80193da:	2200      	movs	r2, #0
 80193dc:	701a      	strb	r2, [r3, #0]
 80193de:	2200      	movs	r2, #0
 80193e0:	f042 0201 	orr.w	r2, r2, #1
 80193e4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80193e6:	697b      	ldr	r3, [r7, #20]
 80193e8:	2200      	movs	r2, #0
 80193ea:	f042 0208 	orr.w	r2, r2, #8
 80193ee:	709a      	strb	r2, [r3, #2]
 80193f0:	2200      	movs	r2, #0
 80193f2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80193f4:	697b      	ldr	r3, [r7, #20]
 80193f6:	2206      	movs	r2, #6
 80193f8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80193fa:	697b      	ldr	r3, [r7, #20]
 80193fc:	2204      	movs	r2, #4
 80193fe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019400:	f640 0306 	movw	r3, #2054	@ 0x806
 8019404:	9300      	str	r3, [sp, #0]
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	68ba      	ldr	r2, [r7, #8]
 801940a:	69b9      	ldr	r1, [r7, #24]
 801940c:	68f8      	ldr	r0, [r7, #12]
 801940e:	f002 fa03 	bl	801b818 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019412:	69b8      	ldr	r0, [r7, #24]
 8019414:	f7f7 ffb8 	bl	8011388 <pbuf_free>
  p = NULL;
 8019418:	2300      	movs	r3, #0
 801941a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801941c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019420:	4618      	mov	r0, r3
 8019422:	3720      	adds	r7, #32
 8019424:	46bd      	mov	sp, r7
 8019426:	bd80      	pop	{r7, pc}
 8019428:	0802e8a4 	.word	0x0802e8a4
 801942c:	0802e9f4 	.word	0x0802e9f4
 8019430:	0802e91c 	.word	0x0802e91c
 8019434:	0802eaa4 	.word	0x0802eaa4
 8019438:	0802ead8 	.word	0x0802ead8

0801943c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b088      	sub	sp, #32
 8019440:	af04      	add	r7, sp, #16
 8019442:	60f8      	str	r0, [r7, #12]
 8019444:	60b9      	str	r1, [r7, #8]
 8019446:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019458:	2201      	movs	r2, #1
 801945a:	9203      	str	r2, [sp, #12]
 801945c:	68ba      	ldr	r2, [r7, #8]
 801945e:	9202      	str	r2, [sp, #8]
 8019460:	4a06      	ldr	r2, [pc, #24]	@ (801947c <etharp_request_dst+0x40>)
 8019462:	9201      	str	r2, [sp, #4]
 8019464:	9300      	str	r3, [sp, #0]
 8019466:	4603      	mov	r3, r0
 8019468:	687a      	ldr	r2, [r7, #4]
 801946a:	68f8      	ldr	r0, [r7, #12]
 801946c:	f7ff ff5a 	bl	8019324 <etharp_raw>
 8019470:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019472:	4618      	mov	r0, r3
 8019474:	3710      	adds	r7, #16
 8019476:	46bd      	mov	sp, r7
 8019478:	bd80      	pop	{r7, pc}
 801947a:	bf00      	nop
 801947c:	0802f51c 	.word	0x0802f51c

08019480 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019480:	b580      	push	{r7, lr}
 8019482:	b082      	sub	sp, #8
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
 8019488:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801948a:	4a05      	ldr	r2, [pc, #20]	@ (80194a0 <etharp_request+0x20>)
 801948c:	6839      	ldr	r1, [r7, #0]
 801948e:	6878      	ldr	r0, [r7, #4]
 8019490:	f7ff ffd4 	bl	801943c <etharp_request_dst>
 8019494:	4603      	mov	r3, r0
}
 8019496:	4618      	mov	r0, r3
 8019498:	3708      	adds	r7, #8
 801949a:	46bd      	mov	sp, r7
 801949c:	bd80      	pop	{r7, pc}
 801949e:	bf00      	nop
 80194a0:	0802f514 	.word	0x0802f514

080194a4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b08e      	sub	sp, #56	@ 0x38
 80194a8:	af04      	add	r7, sp, #16
 80194aa:	6078      	str	r0, [r7, #4]
 80194ac:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80194ae:	4b79      	ldr	r3, [pc, #484]	@ (8019694 <icmp_input+0x1f0>)
 80194b0:	689b      	ldr	r3, [r3, #8]
 80194b2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80194b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194b6:	781b      	ldrb	r3, [r3, #0]
 80194b8:	f003 030f 	and.w	r3, r3, #15
 80194bc:	b2db      	uxtb	r3, r3
 80194be:	009b      	lsls	r3, r3, #2
 80194c0:	b2db      	uxtb	r3, r3
 80194c2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80194c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80194c6:	2b13      	cmp	r3, #19
 80194c8:	f240 80cd 	bls.w	8019666 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	895b      	ldrh	r3, [r3, #10]
 80194d0:	2b03      	cmp	r3, #3
 80194d2:	f240 80ca 	bls.w	801966a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	685b      	ldr	r3, [r3, #4]
 80194da:	781b      	ldrb	r3, [r3, #0]
 80194dc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80194e0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	f000 80b7 	beq.w	8019658 <icmp_input+0x1b4>
 80194ea:	2b08      	cmp	r3, #8
 80194ec:	f040 80b7 	bne.w	801965e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80194f0:	4b69      	ldr	r3, [pc, #420]	@ (8019698 <icmp_input+0x1f4>)
 80194f2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80194f4:	4b67      	ldr	r3, [pc, #412]	@ (8019694 <icmp_input+0x1f0>)
 80194f6:	695b      	ldr	r3, [r3, #20]
 80194f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80194fc:	2be0      	cmp	r3, #224	@ 0xe0
 80194fe:	f000 80bb 	beq.w	8019678 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019502:	4b64      	ldr	r3, [pc, #400]	@ (8019694 <icmp_input+0x1f0>)
 8019504:	695b      	ldr	r3, [r3, #20]
 8019506:	4a63      	ldr	r2, [pc, #396]	@ (8019694 <icmp_input+0x1f0>)
 8019508:	6812      	ldr	r2, [r2, #0]
 801950a:	4611      	mov	r1, r2
 801950c:	4618      	mov	r0, r3
 801950e:	f001 f937 	bl	801a780 <ip4_addr_isbroadcast_u32>
 8019512:	4603      	mov	r3, r0
 8019514:	2b00      	cmp	r3, #0
 8019516:	f040 80b1 	bne.w	801967c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	891b      	ldrh	r3, [r3, #8]
 801951e:	2b07      	cmp	r3, #7
 8019520:	f240 80a5 	bls.w	801966e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019524:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019526:	330e      	adds	r3, #14
 8019528:	4619      	mov	r1, r3
 801952a:	6878      	ldr	r0, [r7, #4]
 801952c:	f7f7 fe64 	bl	80111f8 <pbuf_add_header>
 8019530:	4603      	mov	r3, r0
 8019532:	2b00      	cmp	r3, #0
 8019534:	d04b      	beq.n	80195ce <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	891a      	ldrh	r2, [r3, #8]
 801953a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801953c:	4413      	add	r3, r2
 801953e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	891b      	ldrh	r3, [r3, #8]
 8019544:	8b7a      	ldrh	r2, [r7, #26]
 8019546:	429a      	cmp	r2, r3
 8019548:	f0c0 809a 	bcc.w	8019680 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801954c:	8b7b      	ldrh	r3, [r7, #26]
 801954e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019552:	4619      	mov	r1, r3
 8019554:	200e      	movs	r0, #14
 8019556:	f7f7 fc01 	bl	8010d5c <pbuf_alloc>
 801955a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801955c:	697b      	ldr	r3, [r7, #20]
 801955e:	2b00      	cmp	r3, #0
 8019560:	f000 8090 	beq.w	8019684 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019564:	697b      	ldr	r3, [r7, #20]
 8019566:	895b      	ldrh	r3, [r3, #10]
 8019568:	461a      	mov	r2, r3
 801956a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801956c:	3308      	adds	r3, #8
 801956e:	429a      	cmp	r2, r3
 8019570:	d203      	bcs.n	801957a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019572:	6978      	ldr	r0, [r7, #20]
 8019574:	f7f7 ff08 	bl	8011388 <pbuf_free>
          goto icmperr;
 8019578:	e085      	b.n	8019686 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801957a:	697b      	ldr	r3, [r7, #20]
 801957c:	685b      	ldr	r3, [r3, #4]
 801957e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019582:	4618      	mov	r0, r3
 8019584:	f010 f971 	bl	802986a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019588:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801958a:	4619      	mov	r1, r3
 801958c:	6978      	ldr	r0, [r7, #20]
 801958e:	f7f7 fe43 	bl	8011218 <pbuf_remove_header>
 8019592:	4603      	mov	r3, r0
 8019594:	2b00      	cmp	r3, #0
 8019596:	d009      	beq.n	80195ac <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019598:	4b40      	ldr	r3, [pc, #256]	@ (801969c <icmp_input+0x1f8>)
 801959a:	22b6      	movs	r2, #182	@ 0xb6
 801959c:	4940      	ldr	r1, [pc, #256]	@ (80196a0 <icmp_input+0x1fc>)
 801959e:	4841      	ldr	r0, [pc, #260]	@ (80196a4 <icmp_input+0x200>)
 80195a0:	f00f fec0 	bl	8029324 <iprintf>
          pbuf_free(r);
 80195a4:	6978      	ldr	r0, [r7, #20]
 80195a6:	f7f7 feef 	bl	8011388 <pbuf_free>
          goto icmperr;
 80195aa:	e06c      	b.n	8019686 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80195ac:	6879      	ldr	r1, [r7, #4]
 80195ae:	6978      	ldr	r0, [r7, #20]
 80195b0:	f7f8 f81e 	bl	80115f0 <pbuf_copy>
 80195b4:	4603      	mov	r3, r0
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d003      	beq.n	80195c2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80195ba:	6978      	ldr	r0, [r7, #20]
 80195bc:	f7f7 fee4 	bl	8011388 <pbuf_free>
          goto icmperr;
 80195c0:	e061      	b.n	8019686 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80195c2:	6878      	ldr	r0, [r7, #4]
 80195c4:	f7f7 fee0 	bl	8011388 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80195c8:	697b      	ldr	r3, [r7, #20]
 80195ca:	607b      	str	r3, [r7, #4]
 80195cc:	e00f      	b.n	80195ee <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80195ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80195d0:	330e      	adds	r3, #14
 80195d2:	4619      	mov	r1, r3
 80195d4:	6878      	ldr	r0, [r7, #4]
 80195d6:	f7f7 fe1f 	bl	8011218 <pbuf_remove_header>
 80195da:	4603      	mov	r3, r0
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d006      	beq.n	80195ee <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80195e0:	4b2e      	ldr	r3, [pc, #184]	@ (801969c <icmp_input+0x1f8>)
 80195e2:	22c7      	movs	r2, #199	@ 0xc7
 80195e4:	4930      	ldr	r1, [pc, #192]	@ (80196a8 <icmp_input+0x204>)
 80195e6:	482f      	ldr	r0, [pc, #188]	@ (80196a4 <icmp_input+0x200>)
 80195e8:	f00f fe9c 	bl	8029324 <iprintf>
          goto icmperr;
 80195ec:	e04b      	b.n	8019686 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	685b      	ldr	r3, [r3, #4]
 80195f2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80195f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80195f6:	4619      	mov	r1, r3
 80195f8:	6878      	ldr	r0, [r7, #4]
 80195fa:	f7f7 fdfd 	bl	80111f8 <pbuf_add_header>
 80195fe:	4603      	mov	r3, r0
 8019600:	2b00      	cmp	r3, #0
 8019602:	d12b      	bne.n	801965c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	685b      	ldr	r3, [r3, #4]
 8019608:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801960a:	69fb      	ldr	r3, [r7, #28]
 801960c:	681a      	ldr	r2, [r3, #0]
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019612:	4b20      	ldr	r3, [pc, #128]	@ (8019694 <icmp_input+0x1f0>)
 8019614:	691a      	ldr	r2, [r3, #16]
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801961a:	693b      	ldr	r3, [r7, #16]
 801961c:	2200      	movs	r2, #0
 801961e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019620:	693b      	ldr	r3, [r7, #16]
 8019622:	2200      	movs	r2, #0
 8019624:	709a      	strb	r2, [r3, #2]
 8019626:	2200      	movs	r2, #0
 8019628:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	22ff      	movs	r2, #255	@ 0xff
 801962e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	2200      	movs	r2, #0
 8019634:	729a      	strb	r2, [r3, #10]
 8019636:	2200      	movs	r2, #0
 8019638:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801963a:	683b      	ldr	r3, [r7, #0]
 801963c:	9302      	str	r3, [sp, #8]
 801963e:	2301      	movs	r3, #1
 8019640:	9301      	str	r3, [sp, #4]
 8019642:	2300      	movs	r3, #0
 8019644:	9300      	str	r3, [sp, #0]
 8019646:	23ff      	movs	r3, #255	@ 0xff
 8019648:	2200      	movs	r2, #0
 801964a:	69f9      	ldr	r1, [r7, #28]
 801964c:	6878      	ldr	r0, [r7, #4]
 801964e:	f000 ff49 	bl	801a4e4 <ip4_output_if>
 8019652:	4603      	mov	r3, r0
 8019654:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019656:	e001      	b.n	801965c <icmp_input+0x1b8>
      break;
 8019658:	bf00      	nop
 801965a:	e000      	b.n	801965e <icmp_input+0x1ba>
      break;
 801965c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801965e:	6878      	ldr	r0, [r7, #4]
 8019660:	f7f7 fe92 	bl	8011388 <pbuf_free>
  return;
 8019664:	e013      	b.n	801968e <icmp_input+0x1ea>
    goto lenerr;
 8019666:	bf00      	nop
 8019668:	e002      	b.n	8019670 <icmp_input+0x1cc>
    goto lenerr;
 801966a:	bf00      	nop
 801966c:	e000      	b.n	8019670 <icmp_input+0x1cc>
        goto lenerr;
 801966e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019670:	6878      	ldr	r0, [r7, #4]
 8019672:	f7f7 fe89 	bl	8011388 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019676:	e00a      	b.n	801968e <icmp_input+0x1ea>
        goto icmperr;
 8019678:	bf00      	nop
 801967a:	e004      	b.n	8019686 <icmp_input+0x1e2>
        goto icmperr;
 801967c:	bf00      	nop
 801967e:	e002      	b.n	8019686 <icmp_input+0x1e2>
          goto icmperr;
 8019680:	bf00      	nop
 8019682:	e000      	b.n	8019686 <icmp_input+0x1e2>
          goto icmperr;
 8019684:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019686:	6878      	ldr	r0, [r7, #4]
 8019688:	f7f7 fe7e 	bl	8011388 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801968c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801968e:	3728      	adds	r7, #40	@ 0x28
 8019690:	46bd      	mov	sp, r7
 8019692:	bd80      	pop	{r7, pc}
 8019694:	20037370 	.word	0x20037370
 8019698:	20037384 	.word	0x20037384
 801969c:	0802eb1c 	.word	0x0802eb1c
 80196a0:	0802eb54 	.word	0x0802eb54
 80196a4:	0802eb8c 	.word	0x0802eb8c
 80196a8:	0802ebb4 	.word	0x0802ebb4

080196ac <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80196ac:	b580      	push	{r7, lr}
 80196ae:	b082      	sub	sp, #8
 80196b0:	af00      	add	r7, sp, #0
 80196b2:	6078      	str	r0, [r7, #4]
 80196b4:	460b      	mov	r3, r1
 80196b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80196b8:	78fb      	ldrb	r3, [r7, #3]
 80196ba:	461a      	mov	r2, r3
 80196bc:	2103      	movs	r1, #3
 80196be:	6878      	ldr	r0, [r7, #4]
 80196c0:	f000 f814 	bl	80196ec <icmp_send_response>
}
 80196c4:	bf00      	nop
 80196c6:	3708      	adds	r7, #8
 80196c8:	46bd      	mov	sp, r7
 80196ca:	bd80      	pop	{r7, pc}

080196cc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b082      	sub	sp, #8
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	6078      	str	r0, [r7, #4]
 80196d4:	460b      	mov	r3, r1
 80196d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80196d8:	78fb      	ldrb	r3, [r7, #3]
 80196da:	461a      	mov	r2, r3
 80196dc:	210b      	movs	r1, #11
 80196de:	6878      	ldr	r0, [r7, #4]
 80196e0:	f000 f804 	bl	80196ec <icmp_send_response>
}
 80196e4:	bf00      	nop
 80196e6:	3708      	adds	r7, #8
 80196e8:	46bd      	mov	sp, r7
 80196ea:	bd80      	pop	{r7, pc}

080196ec <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b08c      	sub	sp, #48	@ 0x30
 80196f0:	af04      	add	r7, sp, #16
 80196f2:	6078      	str	r0, [r7, #4]
 80196f4:	460b      	mov	r3, r1
 80196f6:	70fb      	strb	r3, [r7, #3]
 80196f8:	4613      	mov	r3, r2
 80196fa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80196fc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019700:	2124      	movs	r1, #36	@ 0x24
 8019702:	2022      	movs	r0, #34	@ 0x22
 8019704:	f7f7 fb2a 	bl	8010d5c <pbuf_alloc>
 8019708:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801970a:	69fb      	ldr	r3, [r7, #28]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d04c      	beq.n	80197aa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019710:	69fb      	ldr	r3, [r7, #28]
 8019712:	895b      	ldrh	r3, [r3, #10]
 8019714:	2b23      	cmp	r3, #35	@ 0x23
 8019716:	d806      	bhi.n	8019726 <icmp_send_response+0x3a>
 8019718:	4b26      	ldr	r3, [pc, #152]	@ (80197b4 <icmp_send_response+0xc8>)
 801971a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801971e:	4926      	ldr	r1, [pc, #152]	@ (80197b8 <icmp_send_response+0xcc>)
 8019720:	4826      	ldr	r0, [pc, #152]	@ (80197bc <icmp_send_response+0xd0>)
 8019722:	f00f fdff 	bl	8029324 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	685b      	ldr	r3, [r3, #4]
 801972a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801972c:	69fb      	ldr	r3, [r7, #28]
 801972e:	685b      	ldr	r3, [r3, #4]
 8019730:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019732:	697b      	ldr	r3, [r7, #20]
 8019734:	78fa      	ldrb	r2, [r7, #3]
 8019736:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019738:	697b      	ldr	r3, [r7, #20]
 801973a:	78ba      	ldrb	r2, [r7, #2]
 801973c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801973e:	697b      	ldr	r3, [r7, #20]
 8019740:	2200      	movs	r2, #0
 8019742:	711a      	strb	r2, [r3, #4]
 8019744:	2200      	movs	r2, #0
 8019746:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019748:	697b      	ldr	r3, [r7, #20]
 801974a:	2200      	movs	r2, #0
 801974c:	719a      	strb	r2, [r3, #6]
 801974e:	2200      	movs	r2, #0
 8019750:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019752:	69fb      	ldr	r3, [r7, #28]
 8019754:	685b      	ldr	r3, [r3, #4]
 8019756:	f103 0008 	add.w	r0, r3, #8
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	685b      	ldr	r3, [r3, #4]
 801975e:	221c      	movs	r2, #28
 8019760:	4619      	mov	r1, r3
 8019762:	f010 f882 	bl	802986a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019766:	69bb      	ldr	r3, [r7, #24]
 8019768:	68db      	ldr	r3, [r3, #12]
 801976a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801976c:	f107 030c 	add.w	r3, r7, #12
 8019770:	4618      	mov	r0, r3
 8019772:	f000 fcaf 	bl	801a0d4 <ip4_route>
 8019776:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019778:	693b      	ldr	r3, [r7, #16]
 801977a:	2b00      	cmp	r3, #0
 801977c:	d011      	beq.n	80197a2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801977e:	697b      	ldr	r3, [r7, #20]
 8019780:	2200      	movs	r2, #0
 8019782:	709a      	strb	r2, [r3, #2]
 8019784:	2200      	movs	r2, #0
 8019786:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019788:	f107 020c 	add.w	r2, r7, #12
 801978c:	693b      	ldr	r3, [r7, #16]
 801978e:	9302      	str	r3, [sp, #8]
 8019790:	2301      	movs	r3, #1
 8019792:	9301      	str	r3, [sp, #4]
 8019794:	2300      	movs	r3, #0
 8019796:	9300      	str	r3, [sp, #0]
 8019798:	23ff      	movs	r3, #255	@ 0xff
 801979a:	2100      	movs	r1, #0
 801979c:	69f8      	ldr	r0, [r7, #28]
 801979e:	f000 fea1 	bl	801a4e4 <ip4_output_if>
  }
  pbuf_free(q);
 80197a2:	69f8      	ldr	r0, [r7, #28]
 80197a4:	f7f7 fdf0 	bl	8011388 <pbuf_free>
 80197a8:	e000      	b.n	80197ac <icmp_send_response+0xc0>
    return;
 80197aa:	bf00      	nop
}
 80197ac:	3720      	adds	r7, #32
 80197ae:	46bd      	mov	sp, r7
 80197b0:	bd80      	pop	{r7, pc}
 80197b2:	bf00      	nop
 80197b4:	0802eb1c 	.word	0x0802eb1c
 80197b8:	0802ebe8 	.word	0x0802ebe8
 80197bc:	0802eb8c 	.word	0x0802eb8c

080197c0 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 80197c0:	b480      	push	{r7}
 80197c2:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 80197c4:	4b05      	ldr	r3, [pc, #20]	@ (80197dc <igmp_init+0x1c>)
 80197c6:	4a06      	ldr	r2, [pc, #24]	@ (80197e0 <igmp_init+0x20>)
 80197c8:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 80197ca:	4b06      	ldr	r3, [pc, #24]	@ (80197e4 <igmp_init+0x24>)
 80197cc:	4a06      	ldr	r2, [pc, #24]	@ (80197e8 <igmp_init+0x28>)
 80197ce:	601a      	str	r2, [r3, #0]
}
 80197d0:	bf00      	nop
 80197d2:	46bd      	mov	sp, r7
 80197d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197d8:	4770      	bx	lr
 80197da:	bf00      	nop
 80197dc:	20042708 	.word	0x20042708
 80197e0:	010000e0 	.word	0x010000e0
 80197e4:	2004270c 	.word	0x2004270c
 80197e8:	020000e0 	.word	0x020000e0

080197ec <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	b084      	sub	sp, #16
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 80197f4:	4911      	ldr	r1, [pc, #68]	@ (801983c <igmp_start+0x50>)
 80197f6:	6878      	ldr	r0, [r7, #4]
 80197f8:	f000 f85e 	bl	80198b8 <igmp_lookup_group>
 80197fc:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	2b00      	cmp	r3, #0
 8019802:	d014      	beq.n	801982e <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	2202      	movs	r2, #2
 8019808:	725a      	strb	r2, [r3, #9]
    group->use++;
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	7b1b      	ldrb	r3, [r3, #12]
 801980e:	3301      	adds	r3, #1
 8019810:	b2da      	uxtb	r2, r3
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801981a:	2b00      	cmp	r3, #0
 801981c:	d005      	beq.n	801982a <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019822:	2201      	movs	r2, #1
 8019824:	4905      	ldr	r1, [pc, #20]	@ (801983c <igmp_start+0x50>)
 8019826:	6878      	ldr	r0, [r7, #4]
 8019828:	4798      	blx	r3
    }

    return ERR_OK;
 801982a:	2300      	movs	r3, #0
 801982c:	e001      	b.n	8019832 <igmp_start+0x46>
  }

  return ERR_MEM;
 801982e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8019832:	4618      	mov	r0, r3
 8019834:	3710      	adds	r7, #16
 8019836:	46bd      	mov	sp, r7
 8019838:	bd80      	pop	{r7, pc}
 801983a:	bf00      	nop
 801983c:	20042708 	.word	0x20042708

08019840 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b084      	sub	sp, #16
 8019844:	af00      	add	r7, sp, #0
 8019846:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801984c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	2b00      	cmp	r3, #0
 8019852:	d00a      	beq.n	801986a <igmp_report_groups+0x2a>
    group = group->next;
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 801985a:	e006      	b.n	801986a <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 801985c:	2105      	movs	r1, #5
 801985e:	68f8      	ldr	r0, [r7, #12]
 8019860:	f000 fb7d 	bl	8019f5e <igmp_delaying_member>
    group = group->next;
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	2b00      	cmp	r3, #0
 801986e:	d1f5      	bne.n	801985c <igmp_report_groups+0x1c>
  }
}
 8019870:	bf00      	nop
 8019872:	bf00      	nop
 8019874:	3710      	adds	r7, #16
 8019876:	46bd      	mov	sp, r7
 8019878:	bd80      	pop	{r7, pc}

0801987a <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 801987a:	b480      	push	{r7}
 801987c:	b085      	sub	sp, #20
 801987e:	af00      	add	r7, sp, #0
 8019880:	6078      	str	r0, [r7, #4]
 8019882:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019888:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 801988a:	e00a      	b.n	80198a2 <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	685a      	ldr	r2, [r3, #4]
 8019890:	683b      	ldr	r3, [r7, #0]
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	429a      	cmp	r2, r3
 8019896:	d101      	bne.n	801989c <igmp_lookfor_group+0x22>
      return group;
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	e006      	b.n	80198aa <igmp_lookfor_group+0x30>
    }
    group = group->next;
 801989c:	68fb      	ldr	r3, [r7, #12]
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d1f1      	bne.n	801988c <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 80198a8:	2300      	movs	r3, #0
}
 80198aa:	4618      	mov	r0, r3
 80198ac:	3714      	adds	r7, #20
 80198ae:	46bd      	mov	sp, r7
 80198b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b4:	4770      	bx	lr
	...

080198b8 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 80198b8:	b580      	push	{r7, lr}
 80198ba:	b084      	sub	sp, #16
 80198bc:	af00      	add	r7, sp, #0
 80198be:	6078      	str	r0, [r7, #4]
 80198c0:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80198c6:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 80198c8:	6839      	ldr	r1, [r7, #0]
 80198ca:	6878      	ldr	r0, [r7, #4]
 80198cc:	f7ff ffd5 	bl	801987a <igmp_lookfor_group>
 80198d0:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 80198d2:	68bb      	ldr	r3, [r7, #8]
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d001      	beq.n	80198dc <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 80198d8:	68bb      	ldr	r3, [r7, #8]
 80198da:	e047      	b.n	801996c <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 80198dc:	200a      	movs	r0, #10
 80198de:	f7f6 fdb1 	bl	8010444 <memp_malloc>
 80198e2:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 80198e4:	68bb      	ldr	r3, [r7, #8]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d03f      	beq.n	801996a <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 80198ea:	683b      	ldr	r3, [r7, #0]
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d002      	beq.n	80198f6 <igmp_lookup_group+0x3e>
 80198f0:	683b      	ldr	r3, [r7, #0]
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	e000      	b.n	80198f8 <igmp_lookup_group+0x40>
 80198f6:	2300      	movs	r3, #0
 80198f8:	68ba      	ldr	r2, [r7, #8]
 80198fa:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 80198fc:	68bb      	ldr	r3, [r7, #8]
 80198fe:	2200      	movs	r2, #0
 8019900:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 8019902:	68bb      	ldr	r3, [r7, #8]
 8019904:	2200      	movs	r2, #0
 8019906:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 8019908:	68bb      	ldr	r3, [r7, #8]
 801990a:	2200      	movs	r2, #0
 801990c:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 801990e:	68bb      	ldr	r3, [r7, #8]
 8019910:	2200      	movs	r2, #0
 8019912:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d113      	bne.n	8019942 <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 801991a:	683b      	ldr	r3, [r7, #0]
 801991c:	681a      	ldr	r2, [r3, #0]
 801991e:	4b15      	ldr	r3, [pc, #84]	@ (8019974 <igmp_lookup_group+0xbc>)
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	429a      	cmp	r2, r3
 8019924:	d006      	beq.n	8019934 <igmp_lookup_group+0x7c>
 8019926:	4b14      	ldr	r3, [pc, #80]	@ (8019978 <igmp_lookup_group+0xc0>)
 8019928:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 801992c:	4913      	ldr	r1, [pc, #76]	@ (801997c <igmp_lookup_group+0xc4>)
 801992e:	4814      	ldr	r0, [pc, #80]	@ (8019980 <igmp_lookup_group+0xc8>)
 8019930:	f00f fcf8 	bl	8029324 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 8019934:	68bb      	ldr	r3, [r7, #8]
 8019936:	2200      	movs	r2, #0
 8019938:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	68ba      	ldr	r2, [r7, #8]
 801993e:	625a      	str	r2, [r3, #36]	@ 0x24
 8019940:	e013      	b.n	801996a <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 8019942:	683b      	ldr	r3, [r7, #0]
 8019944:	681a      	ldr	r2, [r3, #0]
 8019946:	4b0b      	ldr	r3, [pc, #44]	@ (8019974 <igmp_lookup_group+0xbc>)
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	429a      	cmp	r2, r3
 801994c:	d106      	bne.n	801995c <igmp_lookup_group+0xa4>
 801994e:	4b0a      	ldr	r3, [pc, #40]	@ (8019978 <igmp_lookup_group+0xc0>)
 8019950:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8019954:	490b      	ldr	r1, [pc, #44]	@ (8019984 <igmp_lookup_group+0xcc>)
 8019956:	480a      	ldr	r0, [pc, #40]	@ (8019980 <igmp_lookup_group+0xc8>)
 8019958:	f00f fce4 	bl	8029324 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	681a      	ldr	r2, [r3, #0]
 8019960:	68bb      	ldr	r3, [r7, #8]
 8019962:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	68ba      	ldr	r2, [r7, #8]
 8019968:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 801996a:	68bb      	ldr	r3, [r7, #8]
}
 801996c:	4618      	mov	r0, r3
 801996e:	3710      	adds	r7, #16
 8019970:	46bd      	mov	sp, r7
 8019972:	bd80      	pop	{r7, pc}
 8019974:	20042708 	.word	0x20042708
 8019978:	0802ec14 	.word	0x0802ec14
 801997c:	0802ec4c 	.word	0x0802ec4c
 8019980:	0802ec80 	.word	0x0802ec80
 8019984:	0802eca8 	.word	0x0802eca8

08019988 <igmp_remove_group>:
 * @param group the group to remove from the netif's igmp group list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif *netif, struct igmp_group *group)
{
 8019988:	b480      	push	{r7}
 801998a:	b085      	sub	sp, #20
 801998c:	af00      	add	r7, sp, #0
 801998e:	6078      	str	r0, [r7, #4]
 8019990:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8019992:	2300      	movs	r3, #0
 8019994:	73fb      	strb	r3, [r7, #15]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801999a:	60bb      	str	r3, [r7, #8]
 801999c:	e00c      	b.n	80199b8 <igmp_remove_group+0x30>
    if (tmp_group->next == group) {
 801999e:	68bb      	ldr	r3, [r7, #8]
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	683a      	ldr	r2, [r7, #0]
 80199a4:	429a      	cmp	r2, r3
 80199a6:	d104      	bne.n	80199b2 <igmp_remove_group+0x2a>
      tmp_group->next = group->next;
 80199a8:	683b      	ldr	r3, [r7, #0]
 80199aa:	681a      	ldr	r2, [r3, #0]
 80199ac:	68bb      	ldr	r3, [r7, #8]
 80199ae:	601a      	str	r2, [r3, #0]
      break;
 80199b0:	e005      	b.n	80199be <igmp_remove_group+0x36>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 80199b2:	68bb      	ldr	r3, [r7, #8]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	60bb      	str	r3, [r7, #8]
 80199b8:	68bb      	ldr	r3, [r7, #8]
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d1ef      	bne.n	801999e <igmp_remove_group+0x16>
    }
  }
  /* Group not found in netif's igmp group list */
  if (tmp_group == NULL) {
 80199be:	68bb      	ldr	r3, [r7, #8]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d101      	bne.n	80199c8 <igmp_remove_group+0x40>
    err = ERR_ARG;
 80199c4:	23f0      	movs	r3, #240	@ 0xf0
 80199c6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80199c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80199cc:	4618      	mov	r0, r3
 80199ce:	3714      	adds	r7, #20
 80199d0:	46bd      	mov	sp, r7
 80199d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199d6:	4770      	bx	lr

080199d8 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 80199d8:	b580      	push	{r7, lr}
 80199da:	b088      	sub	sp, #32
 80199dc:	af00      	add	r7, sp, #0
 80199de:	60f8      	str	r0, [r7, #12]
 80199e0:	60b9      	str	r1, [r7, #8]
 80199e2:	607a      	str	r2, [r7, #4]
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	895b      	ldrh	r3, [r3, #10]
 80199e8:	2b07      	cmp	r3, #7
 80199ea:	d803      	bhi.n	80199f4 <igmp_input+0x1c>
    pbuf_free(p);
 80199ec:	68f8      	ldr	r0, [r7, #12]
 80199ee:	f7f7 fccb 	bl	8011388 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 80199f2:	e086      	b.n	8019b02 <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	685b      	ldr	r3, [r3, #4]
 80199f8:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	895b      	ldrh	r3, [r3, #10]
 80199fe:	4619      	mov	r1, r3
 8019a00:	6978      	ldr	r0, [r7, #20]
 8019a02:	f7f6 f852 	bl	800faaa <inet_chksum>
 8019a06:	4603      	mov	r3, r0
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d003      	beq.n	8019a14 <igmp_input+0x3c>
    pbuf_free(p);
 8019a0c:	68f8      	ldr	r0, [r7, #12]
 8019a0e:	f7f7 fcbb 	bl	8011388 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 8019a12:	e076      	b.n	8019b02 <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 8019a14:	6879      	ldr	r1, [r7, #4]
 8019a16:	68b8      	ldr	r0, [r7, #8]
 8019a18:	f7ff ff2f 	bl	801987a <igmp_lookfor_group>
 8019a1c:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 8019a1e:	69fb      	ldr	r3, [r7, #28]
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d103      	bne.n	8019a2c <igmp_input+0x54>
    pbuf_free(p);
 8019a24:	68f8      	ldr	r0, [r7, #12]
 8019a26:	f7f7 fcaf 	bl	8011388 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8019a2a:	e06a      	b.n	8019b02 <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8019a2c:	697b      	ldr	r3, [r7, #20]
 8019a2e:	781b      	ldrb	r3, [r3, #0]
 8019a30:	2b11      	cmp	r3, #17
 8019a32:	d002      	beq.n	8019a3a <igmp_input+0x62>
 8019a34:	2b16      	cmp	r3, #22
 8019a36:	d04f      	beq.n	8019ad8 <igmp_input+0x100>
      break;
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
      break;
 8019a38:	e05f      	b.n	8019afa <igmp_input+0x122>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	681a      	ldr	r2, [r3, #0]
 8019a3e:	4b32      	ldr	r3, [pc, #200]	@ (8019b08 <igmp_input+0x130>)
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	429a      	cmp	r2, r3
 8019a44:	d125      	bne.n	8019a92 <igmp_input+0xba>
 8019a46:	697b      	ldr	r3, [r7, #20]
 8019a48:	3304      	adds	r3, #4
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d003      	beq.n	8019a56 <igmp_input+0x7e>
 8019a4e:	697b      	ldr	r3, [r7, #20]
 8019a50:	685b      	ldr	r3, [r3, #4]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d11d      	bne.n	8019a92 <igmp_input+0xba>
        if (igmp->igmp_maxresp == 0) {
 8019a56:	697b      	ldr	r3, [r7, #20]
 8019a58:	785b      	ldrb	r3, [r3, #1]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d102      	bne.n	8019a64 <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 8019a5e:	697b      	ldr	r3, [r7, #20]
 8019a60:	220a      	movs	r2, #10
 8019a62:	705a      	strb	r2, [r3, #1]
        groupref = netif_igmp_data(inp);
 8019a64:	68bb      	ldr	r3, [r7, #8]
 8019a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019a68:	61bb      	str	r3, [r7, #24]
        if (groupref != NULL) {
 8019a6a:	69bb      	ldr	r3, [r7, #24]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d00c      	beq.n	8019a8a <igmp_input+0xb2>
          groupref = groupref->next;
 8019a70:	69bb      	ldr	r3, [r7, #24]
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 8019a76:	e008      	b.n	8019a8a <igmp_input+0xb2>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8019a78:	697b      	ldr	r3, [r7, #20]
 8019a7a:	785b      	ldrb	r3, [r3, #1]
 8019a7c:	4619      	mov	r1, r3
 8019a7e:	69b8      	ldr	r0, [r7, #24]
 8019a80:	f000 fa6d 	bl	8019f5e <igmp_delaying_member>
          groupref = groupref->next;
 8019a84:	69bb      	ldr	r3, [r7, #24]
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 8019a8a:	69bb      	ldr	r3, [r7, #24]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d1f3      	bne.n	8019a78 <igmp_input+0xa0>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8019a90:	e021      	b.n	8019ad6 <igmp_input+0xfe>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 8019a92:	697b      	ldr	r3, [r7, #20]
 8019a94:	3304      	adds	r3, #4
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d02c      	beq.n	8019af4 <igmp_input+0x11c>
 8019a9a:	697b      	ldr	r3, [r7, #20]
 8019a9c:	685b      	ldr	r3, [r3, #4]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d028      	beq.n	8019af4 <igmp_input+0x11c>
          if (ip4_addr_cmp(dest, &allsystems)) {
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	681a      	ldr	r2, [r3, #0]
 8019aa6:	4b18      	ldr	r3, [pc, #96]	@ (8019b08 <igmp_input+0x130>)
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	429a      	cmp	r2, r3
 8019aac:	d109      	bne.n	8019ac2 <igmp_input+0xea>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 8019aae:	697b      	ldr	r3, [r7, #20]
 8019ab0:	685b      	ldr	r3, [r3, #4]
 8019ab2:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 8019ab4:	f107 0310 	add.w	r3, r7, #16
 8019ab8:	4619      	mov	r1, r3
 8019aba:	68b8      	ldr	r0, [r7, #8]
 8019abc:	f7ff fedd 	bl	801987a <igmp_lookfor_group>
 8019ac0:	61f8      	str	r0, [r7, #28]
          if (group != NULL) {
 8019ac2:	69fb      	ldr	r3, [r7, #28]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d015      	beq.n	8019af4 <igmp_input+0x11c>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 8019ac8:	697b      	ldr	r3, [r7, #20]
 8019aca:	785b      	ldrb	r3, [r3, #1]
 8019acc:	4619      	mov	r1, r3
 8019ace:	69f8      	ldr	r0, [r7, #28]
 8019ad0:	f000 fa45 	bl	8019f5e <igmp_delaying_member>
      break;
 8019ad4:	e00e      	b.n	8019af4 <igmp_input+0x11c>
 8019ad6:	e00d      	b.n	8019af4 <igmp_input+0x11c>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 8019ad8:	69fb      	ldr	r3, [r7, #28]
 8019ada:	7a5b      	ldrb	r3, [r3, #9]
 8019adc:	2b01      	cmp	r3, #1
 8019ade:	d10b      	bne.n	8019af8 <igmp_input+0x120>
        group->timer = 0; /* stopped */
 8019ae0:	69fb      	ldr	r3, [r7, #28]
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8019ae6:	69fb      	ldr	r3, [r7, #28]
 8019ae8:	2202      	movs	r2, #2
 8019aea:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 8019aec:	69fb      	ldr	r3, [r7, #28]
 8019aee:	2200      	movs	r2, #0
 8019af0:	721a      	strb	r2, [r3, #8]
      break;
 8019af2:	e001      	b.n	8019af8 <igmp_input+0x120>
      break;
 8019af4:	bf00      	nop
 8019af6:	e000      	b.n	8019afa <igmp_input+0x122>
      break;
 8019af8:	bf00      	nop
  }

  pbuf_free(p);
 8019afa:	68f8      	ldr	r0, [r7, #12]
 8019afc:	f7f7 fc44 	bl	8011388 <pbuf_free>
  return;
 8019b00:	bf00      	nop
}
 8019b02:	3720      	adds	r7, #32
 8019b04:	46bd      	mov	sp, r7
 8019b06:	bd80      	pop	{r7, pc}
 8019b08:	20042708 	.word	0x20042708

08019b0c <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 8019b0c:	b580      	push	{r7, lr}
 8019b0e:	b084      	sub	sp, #16
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	6078      	str	r0, [r7, #4]
 8019b14:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 8019b16:	23fa      	movs	r3, #250	@ 0xfa
 8019b18:	73fb      	strb	r3, [r7, #15]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8019b1a:	683b      	ldr	r3, [r7, #0]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019b22:	2be0      	cmp	r3, #224	@ 0xe0
 8019b24:	d009      	beq.n	8019b3a <igmp_joingroup+0x2e>
 8019b26:	4b26      	ldr	r3, [pc, #152]	@ (8019bc0 <igmp_joingroup+0xb4>)
 8019b28:	f240 12c9 	movw	r2, #457	@ 0x1c9
 8019b2c:	4925      	ldr	r1, [pc, #148]	@ (8019bc4 <igmp_joingroup+0xb8>)
 8019b2e:	4826      	ldr	r0, [pc, #152]	@ (8019bc8 <igmp_joingroup+0xbc>)
 8019b30:	f00f fbf8 	bl	8029324 <iprintf>
 8019b34:	f06f 0305 	mvn.w	r3, #5
 8019b38:	e03d      	b.n	8019bb6 <igmp_joingroup+0xaa>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8019b3a:	683b      	ldr	r3, [r7, #0]
 8019b3c:	681a      	ldr	r2, [r3, #0]
 8019b3e:	4b23      	ldr	r3, [pc, #140]	@ (8019bcc <igmp_joingroup+0xc0>)
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	429a      	cmp	r2, r3
 8019b44:	d109      	bne.n	8019b5a <igmp_joingroup+0x4e>
 8019b46:	4b1e      	ldr	r3, [pc, #120]	@ (8019bc0 <igmp_joingroup+0xb4>)
 8019b48:	f44f 72e5 	mov.w	r2, #458	@ 0x1ca
 8019b4c:	4920      	ldr	r1, [pc, #128]	@ (8019bd0 <igmp_joingroup+0xc4>)
 8019b4e:	481e      	ldr	r0, [pc, #120]	@ (8019bc8 <igmp_joingroup+0xbc>)
 8019b50:	f00f fbe8 	bl	8029324 <iprintf>
 8019b54:	f06f 0305 	mvn.w	r3, #5
 8019b58:	e02d      	b.n	8019bb6 <igmp_joingroup+0xaa>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8019b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8019bd4 <igmp_joingroup+0xc8>)
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	60bb      	str	r3, [r7, #8]
 8019b60:	e024      	b.n	8019bac <igmp_joingroup+0xa0>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 8019b62:	68bb      	ldr	r3, [r7, #8]
 8019b64:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019b68:	f003 0320 	and.w	r3, r3, #32
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d01a      	beq.n	8019ba6 <igmp_joingroup+0x9a>
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d00a      	beq.n	8019b8c <igmp_joingroup+0x80>
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d006      	beq.n	8019b8c <igmp_joingroup+0x80>
 8019b7e:	68bb      	ldr	r3, [r7, #8]
 8019b80:	3304      	adds	r3, #4
 8019b82:	681a      	ldr	r2, [r3, #0]
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	429a      	cmp	r2, r3
 8019b8a:	d10c      	bne.n	8019ba6 <igmp_joingroup+0x9a>
      err = igmp_joingroup_netif(netif, groupaddr);
 8019b8c:	6839      	ldr	r1, [r7, #0]
 8019b8e:	68b8      	ldr	r0, [r7, #8]
 8019b90:	f000 f822 	bl	8019bd8 <igmp_joingroup_netif>
 8019b94:	4603      	mov	r3, r0
 8019b96:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8019b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d002      	beq.n	8019ba6 <igmp_joingroup+0x9a>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
 8019ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ba4:	e007      	b.n	8019bb6 <igmp_joingroup+0xaa>
  NETIF_FOREACH(netif) {
 8019ba6:	68bb      	ldr	r3, [r7, #8]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	60bb      	str	r3, [r7, #8]
 8019bac:	68bb      	ldr	r3, [r7, #8]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d1d7      	bne.n	8019b62 <igmp_joingroup+0x56>
      }
    }
  }

  return err;
 8019bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	3710      	adds	r7, #16
 8019bba:	46bd      	mov	sp, r7
 8019bbc:	bd80      	pop	{r7, pc}
 8019bbe:	bf00      	nop
 8019bc0:	0802ec14 	.word	0x0802ec14
 8019bc4:	0802ecec 	.word	0x0802ecec
 8019bc8:	0802ec80 	.word	0x0802ec80
 8019bcc:	20042708 	.word	0x20042708
 8019bd0:	0802ed24 	.word	0x0802ed24
 8019bd4:	200425a8 	.word	0x200425a8

08019bd8 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b084      	sub	sp, #16
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
 8019be0:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8019be2:	683b      	ldr	r3, [r7, #0]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019bea:	2be0      	cmp	r3, #224	@ 0xe0
 8019bec:	d009      	beq.n	8019c02 <igmp_joingroup_netif+0x2a>
 8019bee:	4b2f      	ldr	r3, [pc, #188]	@ (8019cac <igmp_joingroup_netif+0xd4>)
 8019bf0:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 8019bf4:	492e      	ldr	r1, [pc, #184]	@ (8019cb0 <igmp_joingroup_netif+0xd8>)
 8019bf6:	482f      	ldr	r0, [pc, #188]	@ (8019cb4 <igmp_joingroup_netif+0xdc>)
 8019bf8:	f00f fb94 	bl	8029324 <iprintf>
 8019bfc:	f06f 0305 	mvn.w	r3, #5
 8019c00:	e050      	b.n	8019ca4 <igmp_joingroup_netif+0xcc>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8019c02:	683b      	ldr	r3, [r7, #0]
 8019c04:	681a      	ldr	r2, [r3, #0]
 8019c06:	4b2c      	ldr	r3, [pc, #176]	@ (8019cb8 <igmp_joingroup_netif+0xe0>)
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	429a      	cmp	r2, r3
 8019c0c:	d109      	bne.n	8019c22 <igmp_joingroup_netif+0x4a>
 8019c0e:	4b27      	ldr	r3, [pc, #156]	@ (8019cac <igmp_joingroup_netif+0xd4>)
 8019c10:	f240 12ed 	movw	r2, #493	@ 0x1ed
 8019c14:	4929      	ldr	r1, [pc, #164]	@ (8019cbc <igmp_joingroup_netif+0xe4>)
 8019c16:	4827      	ldr	r0, [pc, #156]	@ (8019cb4 <igmp_joingroup_netif+0xdc>)
 8019c18:	f00f fb84 	bl	8029324 <iprintf>
 8019c1c:	f06f 0305 	mvn.w	r3, #5
 8019c20:	e040      	b.n	8019ca4 <igmp_joingroup_netif+0xcc>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019c28:	f003 0320 	and.w	r3, r3, #32
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d109      	bne.n	8019c44 <igmp_joingroup_netif+0x6c>
 8019c30:	4b1e      	ldr	r3, [pc, #120]	@ (8019cac <igmp_joingroup_netif+0xd4>)
 8019c32:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 8019c36:	4922      	ldr	r1, [pc, #136]	@ (8019cc0 <igmp_joingroup_netif+0xe8>)
 8019c38:	481e      	ldr	r0, [pc, #120]	@ (8019cb4 <igmp_joingroup_netif+0xdc>)
 8019c3a:	f00f fb73 	bl	8029324 <iprintf>
 8019c3e:	f06f 0305 	mvn.w	r3, #5
 8019c42:	e02f      	b.n	8019ca4 <igmp_joingroup_netif+0xcc>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
 8019c44:	6839      	ldr	r1, [r7, #0]
 8019c46:	6878      	ldr	r0, [r7, #4]
 8019c48:	f7ff fe36 	bl	80198b8 <igmp_lookup_group>
 8019c4c:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d025      	beq.n	8019ca0 <igmp_joingroup_netif+0xc8>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	7a5b      	ldrb	r3, [r3, #9]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d119      	bne.n	8019c90 <igmp_joingroup_netif+0xb8>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use == 0) && (netif->igmp_mac_filter != NULL)) {
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	7b1b      	ldrb	r3, [r3, #12]
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d109      	bne.n	8019c78 <igmp_joingroup_netif+0xa0>
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d005      	beq.n	8019c78 <igmp_joingroup_netif+0xa0>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019c70:	2201      	movs	r2, #1
 8019c72:	6839      	ldr	r1, [r7, #0]
 8019c74:	6878      	ldr	r0, [r7, #4]
 8019c76:	4798      	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8019c78:	2216      	movs	r2, #22
 8019c7a:	68f9      	ldr	r1, [r7, #12]
 8019c7c:	6878      	ldr	r0, [r7, #4]
 8019c7e:	f000 f9b5 	bl	8019fec <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 8019c82:	2105      	movs	r1, #5
 8019c84:	68f8      	ldr	r0, [r7, #12]
 8019c86:	f000 f947 	bl	8019f18 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	2201      	movs	r2, #1
 8019c8e:	725a      	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	7b1b      	ldrb	r3, [r3, #12]
 8019c94:	3301      	adds	r3, #1
 8019c96:	b2da      	uxtb	r2, r3
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	731a      	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
 8019c9c:	2300      	movs	r3, #0
 8019c9e:	e001      	b.n	8019ca4 <igmp_joingroup_netif+0xcc>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
 8019ca0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	3710      	adds	r7, #16
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bd80      	pop	{r7, pc}
 8019cac:	0802ec14 	.word	0x0802ec14
 8019cb0:	0802ed58 	.word	0x0802ed58
 8019cb4:	0802ec80 	.word	0x0802ec80
 8019cb8:	20042708 	.word	0x20042708
 8019cbc:	0802ed94 	.word	0x0802ed94
 8019cc0:	0802edd0 	.word	0x0802edd0

08019cc4 <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 8019cc4:	b580      	push	{r7, lr}
 8019cc6:	b086      	sub	sp, #24
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	6078      	str	r0, [r7, #4]
 8019ccc:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 8019cce:	23fa      	movs	r3, #250	@ 0xfa
 8019cd0:	75fb      	strb	r3, [r7, #23]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8019cd2:	683b      	ldr	r3, [r7, #0]
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019cda:	2be0      	cmp	r3, #224	@ 0xe0
 8019cdc:	d009      	beq.n	8019cf2 <igmp_leavegroup+0x2e>
 8019cde:	4b25      	ldr	r3, [pc, #148]	@ (8019d74 <igmp_leavegroup+0xb0>)
 8019ce0:	f240 222a 	movw	r2, #554	@ 0x22a
 8019ce4:	4924      	ldr	r1, [pc, #144]	@ (8019d78 <igmp_leavegroup+0xb4>)
 8019ce6:	4825      	ldr	r0, [pc, #148]	@ (8019d7c <igmp_leavegroup+0xb8>)
 8019ce8:	f00f fb1c 	bl	8029324 <iprintf>
 8019cec:	f06f 0305 	mvn.w	r3, #5
 8019cf0:	e03c      	b.n	8019d6c <igmp_leavegroup+0xa8>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8019cf2:	683b      	ldr	r3, [r7, #0]
 8019cf4:	681a      	ldr	r2, [r3, #0]
 8019cf6:	4b22      	ldr	r3, [pc, #136]	@ (8019d80 <igmp_leavegroup+0xbc>)
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	429a      	cmp	r2, r3
 8019cfc:	d109      	bne.n	8019d12 <igmp_leavegroup+0x4e>
 8019cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8019d74 <igmp_leavegroup+0xb0>)
 8019d00:	f240 222b 	movw	r2, #555	@ 0x22b
 8019d04:	491f      	ldr	r1, [pc, #124]	@ (8019d84 <igmp_leavegroup+0xc0>)
 8019d06:	481d      	ldr	r0, [pc, #116]	@ (8019d7c <igmp_leavegroup+0xb8>)
 8019d08:	f00f fb0c 	bl	8029324 <iprintf>
 8019d0c:	f06f 0305 	mvn.w	r3, #5
 8019d10:	e02c      	b.n	8019d6c <igmp_leavegroup+0xa8>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8019d12:	4b1d      	ldr	r3, [pc, #116]	@ (8019d88 <igmp_leavegroup+0xc4>)
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	613b      	str	r3, [r7, #16]
 8019d18:	e023      	b.n	8019d62 <igmp_leavegroup+0x9e>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 8019d1a:	693b      	ldr	r3, [r7, #16]
 8019d1c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019d20:	f003 0320 	and.w	r3, r3, #32
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d019      	beq.n	8019d5c <igmp_leavegroup+0x98>
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d00a      	beq.n	8019d44 <igmp_leavegroup+0x80>
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d006      	beq.n	8019d44 <igmp_leavegroup+0x80>
 8019d36:	693b      	ldr	r3, [r7, #16]
 8019d38:	3304      	adds	r3, #4
 8019d3a:	681a      	ldr	r2, [r3, #0]
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	429a      	cmp	r2, r3
 8019d42:	d10b      	bne.n	8019d5c <igmp_leavegroup+0x98>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
 8019d44:	6839      	ldr	r1, [r7, #0]
 8019d46:	6938      	ldr	r0, [r7, #16]
 8019d48:	f000 f820 	bl	8019d8c <igmp_leavegroup_netif>
 8019d4c:	4603      	mov	r3, r0
 8019d4e:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8019d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d001      	beq.n	8019d5c <igmp_leavegroup+0x98>
        /* Store this result if we have not yet gotten a success */
        err = res;
 8019d58:	7bfb      	ldrb	r3, [r7, #15]
 8019d5a:	75fb      	strb	r3, [r7, #23]
  NETIF_FOREACH(netif) {
 8019d5c:	693b      	ldr	r3, [r7, #16]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	613b      	str	r3, [r7, #16]
 8019d62:	693b      	ldr	r3, [r7, #16]
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d1d8      	bne.n	8019d1a <igmp_leavegroup+0x56>
      }
    }
  }

  return err;
 8019d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	3718      	adds	r7, #24
 8019d70:	46bd      	mov	sp, r7
 8019d72:	bd80      	pop	{r7, pc}
 8019d74:	0802ec14 	.word	0x0802ec14
 8019d78:	0802ee08 	.word	0x0802ee08
 8019d7c:	0802ec80 	.word	0x0802ec80
 8019d80:	20042708 	.word	0x20042708
 8019d84:	0802ee40 	.word	0x0802ee40
 8019d88:	200425a8 	.word	0x200425a8

08019d8c <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 8019d8c:	b580      	push	{r7, lr}
 8019d8e:	b084      	sub	sp, #16
 8019d90:	af00      	add	r7, sp, #0
 8019d92:	6078      	str	r0, [r7, #4]
 8019d94:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8019d96:	683b      	ldr	r3, [r7, #0]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019d9e:	2be0      	cmp	r3, #224	@ 0xe0
 8019da0:	d009      	beq.n	8019db6 <igmp_leavegroup_netif+0x2a>
 8019da2:	4b30      	ldr	r3, [pc, #192]	@ (8019e64 <igmp_leavegroup_netif+0xd8>)
 8019da4:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 8019da8:	492f      	ldr	r1, [pc, #188]	@ (8019e68 <igmp_leavegroup_netif+0xdc>)
 8019daa:	4830      	ldr	r0, [pc, #192]	@ (8019e6c <igmp_leavegroup_netif+0xe0>)
 8019dac:	f00f faba 	bl	8029324 <iprintf>
 8019db0:	f06f 0305 	mvn.w	r3, #5
 8019db4:	e052      	b.n	8019e5c <igmp_leavegroup_netif+0xd0>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8019db6:	683b      	ldr	r3, [r7, #0]
 8019db8:	681a      	ldr	r2, [r3, #0]
 8019dba:	4b2d      	ldr	r3, [pc, #180]	@ (8019e70 <igmp_leavegroup_netif+0xe4>)
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	429a      	cmp	r2, r3
 8019dc0:	d109      	bne.n	8019dd6 <igmp_leavegroup_netif+0x4a>
 8019dc2:	4b28      	ldr	r3, [pc, #160]	@ (8019e64 <igmp_leavegroup_netif+0xd8>)
 8019dc4:	f240 224d 	movw	r2, #589	@ 0x24d
 8019dc8:	492a      	ldr	r1, [pc, #168]	@ (8019e74 <igmp_leavegroup_netif+0xe8>)
 8019dca:	4828      	ldr	r0, [pc, #160]	@ (8019e6c <igmp_leavegroup_netif+0xe0>)
 8019dcc:	f00f faaa 	bl	8029324 <iprintf>
 8019dd0:	f06f 0305 	mvn.w	r3, #5
 8019dd4:	e042      	b.n	8019e5c <igmp_leavegroup_netif+0xd0>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019ddc:	f003 0320 	and.w	r3, r3, #32
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d109      	bne.n	8019df8 <igmp_leavegroup_netif+0x6c>
 8019de4:	4b1f      	ldr	r3, [pc, #124]	@ (8019e64 <igmp_leavegroup_netif+0xd8>)
 8019de6:	f44f 7214 	mov.w	r2, #592	@ 0x250
 8019dea:	4923      	ldr	r1, [pc, #140]	@ (8019e78 <igmp_leavegroup_netif+0xec>)
 8019dec:	481f      	ldr	r0, [pc, #124]	@ (8019e6c <igmp_leavegroup_netif+0xe0>)
 8019dee:	f00f fa99 	bl	8029324 <iprintf>
 8019df2:	f06f 0305 	mvn.w	r3, #5
 8019df6:	e031      	b.n	8019e5c <igmp_leavegroup_netif+0xd0>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
 8019df8:	6839      	ldr	r1, [r7, #0]
 8019dfa:	6878      	ldr	r0, [r7, #4]
 8019dfc:	f7ff fd3d 	bl	801987a <igmp_lookfor_group>
 8019e00:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8019e02:	68fb      	ldr	r3, [r7, #12]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d027      	beq.n	8019e58 <igmp_leavegroup_netif+0xcc>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	7b1b      	ldrb	r3, [r3, #12]
 8019e0c:	2b01      	cmp	r3, #1
 8019e0e:	d81b      	bhi.n	8019e48 <igmp_leavegroup_netif+0xbc>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
 8019e10:	68f9      	ldr	r1, [r7, #12]
 8019e12:	6878      	ldr	r0, [r7, #4]
 8019e14:	f7ff fdb8 	bl	8019988 <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	7a1b      	ldrb	r3, [r3, #8]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d004      	beq.n	8019e2a <igmp_leavegroup_netif+0x9e>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
 8019e20:	2217      	movs	r2, #23
 8019e22:	68f9      	ldr	r1, [r7, #12]
 8019e24:	6878      	ldr	r0, [r7, #4]
 8019e26:	f000 f8e1 	bl	8019fec <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d005      	beq.n	8019e3e <igmp_leavegroup_netif+0xb2>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019e36:	2200      	movs	r2, #0
 8019e38:	6839      	ldr	r1, [r7, #0]
 8019e3a:	6878      	ldr	r0, [r7, #4]
 8019e3c:	4798      	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
 8019e3e:	68f9      	ldr	r1, [r7, #12]
 8019e40:	200a      	movs	r0, #10
 8019e42:	f7f6 fb75 	bl	8010530 <memp_free>
 8019e46:	e005      	b.n	8019e54 <igmp_leavegroup_netif+0xc8>
    } else {
      /* Decrement group use */
      group->use--;
 8019e48:	68fb      	ldr	r3, [r7, #12]
 8019e4a:	7b1b      	ldrb	r3, [r3, #12]
 8019e4c:	3b01      	subs	r3, #1
 8019e4e:	b2da      	uxtb	r2, r3
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	731a      	strb	r2, [r3, #12]
    }
    return ERR_OK;
 8019e54:	2300      	movs	r3, #0
 8019e56:	e001      	b.n	8019e5c <igmp_leavegroup_netif+0xd0>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
 8019e58:	f06f 0305 	mvn.w	r3, #5
  }
}
 8019e5c:	4618      	mov	r0, r3
 8019e5e:	3710      	adds	r7, #16
 8019e60:	46bd      	mov	sp, r7
 8019e62:	bd80      	pop	{r7, pc}
 8019e64:	0802ec14 	.word	0x0802ec14
 8019e68:	0802ee78 	.word	0x0802ee78
 8019e6c:	0802ec80 	.word	0x0802ec80
 8019e70:	20042708 	.word	0x20042708
 8019e74:	0802eeb8 	.word	0x0802eeb8
 8019e78:	0802eef4 	.word	0x0802eef4

08019e7c <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8019e7c:	b580      	push	{r7, lr}
 8019e7e:	b082      	sub	sp, #8
 8019e80:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 8019e82:	4b15      	ldr	r3, [pc, #84]	@ (8019ed8 <igmp_tmr+0x5c>)
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	607b      	str	r3, [r7, #4]
 8019e88:	e01e      	b.n	8019ec8 <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e8e:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 8019e90:	e014      	b.n	8019ebc <igmp_tmr+0x40>
      if (group->timer > 0) {
 8019e92:	683b      	ldr	r3, [r7, #0]
 8019e94:	895b      	ldrh	r3, [r3, #10]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d00d      	beq.n	8019eb6 <igmp_tmr+0x3a>
        group->timer--;
 8019e9a:	683b      	ldr	r3, [r7, #0]
 8019e9c:	895b      	ldrh	r3, [r3, #10]
 8019e9e:	3b01      	subs	r3, #1
 8019ea0:	b29a      	uxth	r2, r3
 8019ea2:	683b      	ldr	r3, [r7, #0]
 8019ea4:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 8019ea6:	683b      	ldr	r3, [r7, #0]
 8019ea8:	895b      	ldrh	r3, [r3, #10]
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d103      	bne.n	8019eb6 <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 8019eae:	6839      	ldr	r1, [r7, #0]
 8019eb0:	6878      	ldr	r0, [r7, #4]
 8019eb2:	f000 f813 	bl	8019edc <igmp_timeout>
        }
      }
      group = group->next;
 8019eb6:	683b      	ldr	r3, [r7, #0]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 8019ebc:	683b      	ldr	r3, [r7, #0]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d1e7      	bne.n	8019e92 <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	607b      	str	r3, [r7, #4]
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d1dd      	bne.n	8019e8a <igmp_tmr+0xe>
    }
  }
}
 8019ece:	bf00      	nop
 8019ed0:	bf00      	nop
 8019ed2:	3708      	adds	r7, #8
 8019ed4:	46bd      	mov	sp, r7
 8019ed6:	bd80      	pop	{r7, pc}
 8019ed8:	200425a8 	.word	0x200425a8

08019edc <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 8019edc:	b580      	push	{r7, lr}
 8019ede:	b082      	sub	sp, #8
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	6078      	str	r0, [r7, #4]
 8019ee4:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	7a5b      	ldrb	r3, [r3, #9]
 8019eea:	2b01      	cmp	r3, #1
 8019eec:	d10d      	bne.n	8019f0a <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 8019eee:	683b      	ldr	r3, [r7, #0]
 8019ef0:	685a      	ldr	r2, [r3, #4]
 8019ef2:	4b08      	ldr	r3, [pc, #32]	@ (8019f14 <igmp_timeout+0x38>)
 8019ef4:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8019ef6:	429a      	cmp	r2, r3
 8019ef8:	d007      	beq.n	8019f0a <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8019efa:	683b      	ldr	r3, [r7, #0]
 8019efc:	2202      	movs	r2, #2
 8019efe:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8019f00:	2216      	movs	r2, #22
 8019f02:	6839      	ldr	r1, [r7, #0]
 8019f04:	6878      	ldr	r0, [r7, #4]
 8019f06:	f000 f871 	bl	8019fec <igmp_send>
  }
}
 8019f0a:	bf00      	nop
 8019f0c:	3708      	adds	r7, #8
 8019f0e:	46bd      	mov	sp, r7
 8019f10:	bd80      	pop	{r7, pc}
 8019f12:	bf00      	nop
 8019f14:	20042708 	.word	0x20042708

08019f18 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 8019f18:	b580      	push	{r7, lr}
 8019f1a:	b082      	sub	sp, #8
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
 8019f20:	460b      	mov	r3, r1
 8019f22:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 8019f24:	78fb      	ldrb	r3, [r7, #3]
 8019f26:	2b02      	cmp	r3, #2
 8019f28:	d90b      	bls.n	8019f42 <igmp_start_timer+0x2a>
 8019f2a:	f00e fb17 	bl	802855c <rand>
 8019f2e:	4603      	mov	r3, r0
 8019f30:	461a      	mov	r2, r3
 8019f32:	78fb      	ldrb	r3, [r7, #3]
 8019f34:	fbb2 f1f3 	udiv	r1, r2, r3
 8019f38:	fb01 f303 	mul.w	r3, r1, r3
 8019f3c:	1ad3      	subs	r3, r2, r3
 8019f3e:	b29a      	uxth	r2, r3
 8019f40:	e000      	b.n	8019f44 <igmp_start_timer+0x2c>
 8019f42:	2201      	movs	r2, #1
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	895b      	ldrh	r3, [r3, #10]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d102      	bne.n	8019f56 <igmp_start_timer+0x3e>
    group->timer = 1;
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	2201      	movs	r2, #1
 8019f54:	815a      	strh	r2, [r3, #10]
  }
}
 8019f56:	bf00      	nop
 8019f58:	3708      	adds	r7, #8
 8019f5a:	46bd      	mov	sp, r7
 8019f5c:	bd80      	pop	{r7, pc}

08019f5e <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 8019f5e:	b580      	push	{r7, lr}
 8019f60:	b082      	sub	sp, #8
 8019f62:	af00      	add	r7, sp, #0
 8019f64:	6078      	str	r0, [r7, #4]
 8019f66:	460b      	mov	r3, r1
 8019f68:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	7a5b      	ldrb	r3, [r3, #9]
 8019f6e:	2b02      	cmp	r3, #2
 8019f70:	d00d      	beq.n	8019f8e <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8019f76:	2b01      	cmp	r3, #1
 8019f78:	d111      	bne.n	8019f9e <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d005      	beq.n	8019f8e <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8019f82:	78fb      	ldrb	r3, [r7, #3]
 8019f84:	b29a      	uxth	r2, r3
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	895b      	ldrh	r3, [r3, #10]
 8019f8a:	429a      	cmp	r2, r3
 8019f8c:	d207      	bcs.n	8019f9e <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 8019f8e:	78fb      	ldrb	r3, [r7, #3]
 8019f90:	4619      	mov	r1, r3
 8019f92:	6878      	ldr	r0, [r7, #4]
 8019f94:	f7ff ffc0 	bl	8019f18 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	2201      	movs	r2, #1
 8019f9c:	725a      	strb	r2, [r3, #9]
  }
}
 8019f9e:	bf00      	nop
 8019fa0:	3708      	adds	r7, #8
 8019fa2:	46bd      	mov	sp, r7
 8019fa4:	bd80      	pop	{r7, pc}

08019fa6 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 8019fa6:	b580      	push	{r7, lr}
 8019fa8:	b08c      	sub	sp, #48	@ 0x30
 8019faa:	af06      	add	r7, sp, #24
 8019fac:	60f8      	str	r0, [r7, #12]
 8019fae:	60b9      	str	r1, [r7, #8]
 8019fb0:	607a      	str	r2, [r7, #4]
 8019fb2:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 8019fb4:	f240 4394 	movw	r3, #1172	@ 0x494
 8019fb8:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8019fba:	2300      	movs	r3, #0
 8019fbc:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8019fbe:	2304      	movs	r3, #4
 8019fc0:	9304      	str	r3, [sp, #16]
 8019fc2:	f107 0314 	add.w	r3, r7, #20
 8019fc6:	9303      	str	r3, [sp, #12]
 8019fc8:	683b      	ldr	r3, [r7, #0]
 8019fca:	9302      	str	r3, [sp, #8]
 8019fcc:	2302      	movs	r3, #2
 8019fce:	9301      	str	r3, [sp, #4]
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	9300      	str	r3, [sp, #0]
 8019fd4:	2301      	movs	r3, #1
 8019fd6:	687a      	ldr	r2, [r7, #4]
 8019fd8:	68b9      	ldr	r1, [r7, #8]
 8019fda:	68f8      	ldr	r0, [r7, #12]
 8019fdc:	f000 fa9f 	bl	801a51e <ip4_output_if_opt>
 8019fe0:	4603      	mov	r3, r0
}
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	3718      	adds	r7, #24
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	bd80      	pop	{r7, pc}
	...

08019fec <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b088      	sub	sp, #32
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	60f8      	str	r0, [r7, #12]
 8019ff4:	60b9      	str	r1, [r7, #8]
 8019ff6:	4613      	mov	r3, r2
 8019ff8:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 8019ffe:	2300      	movs	r3, #0
 801a000:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 801a002:	4b2f      	ldr	r3, [pc, #188]	@ (801a0c0 <igmp_send+0xd4>)
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 801a008:	2300      	movs	r3, #0
 801a00a:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 801a00c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a010:	2108      	movs	r1, #8
 801a012:	2036      	movs	r0, #54	@ 0x36
 801a014:	f7f6 fea2 	bl	8010d5c <pbuf_alloc>
 801a018:	61b8      	str	r0, [r7, #24]

  if (p) {
 801a01a:	69bb      	ldr	r3, [r7, #24]
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d04b      	beq.n	801a0b8 <igmp_send+0xcc>
    igmp = (struct igmp_msg *)p->payload;
 801a020:	69bb      	ldr	r3, [r7, #24]
 801a022:	685b      	ldr	r3, [r3, #4]
 801a024:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 801a026:	69bb      	ldr	r3, [r7, #24]
 801a028:	895b      	ldrh	r3, [r3, #10]
 801a02a:	2b07      	cmp	r3, #7
 801a02c:	d806      	bhi.n	801a03c <igmp_send+0x50>
 801a02e:	4b25      	ldr	r3, [pc, #148]	@ (801a0c4 <igmp_send+0xd8>)
 801a030:	f240 3202 	movw	r2, #770	@ 0x302
 801a034:	4924      	ldr	r1, [pc, #144]	@ (801a0c8 <igmp_send+0xdc>)
 801a036:	4825      	ldr	r0, [pc, #148]	@ (801a0cc <igmp_send+0xe0>)
 801a038:	f00f f974 	bl	8029324 <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	3304      	adds	r3, #4
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 801a044:	79fb      	ldrb	r3, [r7, #7]
 801a046:	2b16      	cmp	r3, #22
 801a048:	d10a      	bne.n	801a060 <igmp_send+0x74>
      dest = &(group->group_address);
 801a04a:	68bb      	ldr	r3, [r7, #8]
 801a04c:	3304      	adds	r3, #4
 801a04e:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 801a050:	68bb      	ldr	r3, [r7, #8]
 801a052:	685a      	ldr	r2, [r3, #4]
 801a054:	697b      	ldr	r3, [r7, #20]
 801a056:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 801a058:	68bb      	ldr	r3, [r7, #8]
 801a05a:	2201      	movs	r2, #1
 801a05c:	721a      	strb	r2, [r3, #8]
 801a05e:	e008      	b.n	801a072 <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 801a060:	79fb      	ldrb	r3, [r7, #7]
 801a062:	2b17      	cmp	r3, #23
 801a064:	d105      	bne.n	801a072 <igmp_send+0x86>
        dest = &allrouters;
 801a066:	4b1a      	ldr	r3, [pc, #104]	@ (801a0d0 <igmp_send+0xe4>)
 801a068:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 801a06a:	68bb      	ldr	r3, [r7, #8]
 801a06c:	685a      	ldr	r2, [r3, #4]
 801a06e:	697b      	ldr	r3, [r7, #20]
 801a070:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 801a072:	79fb      	ldrb	r3, [r7, #7]
 801a074:	2b16      	cmp	r3, #22
 801a076:	d002      	beq.n	801a07e <igmp_send+0x92>
 801a078:	79fb      	ldrb	r3, [r7, #7]
 801a07a:	2b17      	cmp	r3, #23
 801a07c:	d119      	bne.n	801a0b2 <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 801a07e:	697b      	ldr	r3, [r7, #20]
 801a080:	79fa      	ldrb	r2, [r7, #7]
 801a082:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 801a084:	697b      	ldr	r3, [r7, #20]
 801a086:	2200      	movs	r2, #0
 801a088:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 801a08a:	697b      	ldr	r3, [r7, #20]
 801a08c:	2200      	movs	r2, #0
 801a08e:	709a      	strb	r2, [r3, #2]
 801a090:	2200      	movs	r2, #0
 801a092:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 801a094:	2108      	movs	r1, #8
 801a096:	6978      	ldr	r0, [r7, #20]
 801a098:	f7f5 fd07 	bl	800faaa <inet_chksum>
 801a09c:	4603      	mov	r3, r0
 801a09e:	461a      	mov	r2, r3
 801a0a0:	697b      	ldr	r3, [r7, #20]
 801a0a2:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 801a0a4:	f107 0110 	add.w	r1, r7, #16
 801a0a8:	68fb      	ldr	r3, [r7, #12]
 801a0aa:	69fa      	ldr	r2, [r7, #28]
 801a0ac:	69b8      	ldr	r0, [r7, #24]
 801a0ae:	f7ff ff7a 	bl	8019fa6 <igmp_ip_output_if>
    }

    pbuf_free(p);
 801a0b2:	69b8      	ldr	r0, [r7, #24]
 801a0b4:	f7f7 f968 	bl	8011388 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 801a0b8:	bf00      	nop
 801a0ba:	3720      	adds	r7, #32
 801a0bc:	46bd      	mov	sp, r7
 801a0be:	bd80      	pop	{r7, pc}
 801a0c0:	0802f50c 	.word	0x0802f50c
 801a0c4:	0802ec14 	.word	0x0802ec14
 801a0c8:	0802ef30 	.word	0x0802ef30
 801a0cc:	0802ec80 	.word	0x0802ec80
 801a0d0:	2004270c 	.word	0x2004270c

0801a0d4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a0d4:	b480      	push	{r7}
 801a0d6:	b085      	sub	sp, #20
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a0e4:	2be0      	cmp	r3, #224	@ 0xe0
 801a0e6:	d106      	bne.n	801a0f6 <ip4_route+0x22>
 801a0e8:	4b36      	ldr	r3, [pc, #216]	@ (801a1c4 <ip4_route+0xf0>)
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d002      	beq.n	801a0f6 <ip4_route+0x22>
    return ip4_default_multicast_netif;
 801a0f0:	4b34      	ldr	r3, [pc, #208]	@ (801a1c4 <ip4_route+0xf0>)
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	e060      	b.n	801a1b8 <ip4_route+0xe4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801a0f6:	4b34      	ldr	r3, [pc, #208]	@ (801a1c8 <ip4_route+0xf4>)
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	60fb      	str	r3, [r7, #12]
 801a0fc:	e036      	b.n	801a16c <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a104:	f003 0301 	and.w	r3, r3, #1
 801a108:	b2db      	uxtb	r3, r3
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d02b      	beq.n	801a166 <ip4_route+0x92>
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a114:	089b      	lsrs	r3, r3, #2
 801a116:	f003 0301 	and.w	r3, r3, #1
 801a11a:	b2db      	uxtb	r3, r3
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d022      	beq.n	801a166 <ip4_route+0x92>
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	3304      	adds	r3, #4
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d01d      	beq.n	801a166 <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	681a      	ldr	r2, [r3, #0]
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	3304      	adds	r3, #4
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	405a      	eors	r2, r3
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	3308      	adds	r3, #8
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	4013      	ands	r3, r2
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d101      	bne.n	801a146 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 801a142:	68fb      	ldr	r3, [r7, #12]
 801a144:	e038      	b.n	801a1b8 <ip4_route+0xe4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a14c:	f003 0302 	and.w	r3, r3, #2
 801a150:	2b00      	cmp	r3, #0
 801a152:	d108      	bne.n	801a166 <ip4_route+0x92>
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	681a      	ldr	r2, [r3, #0]
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	330c      	adds	r3, #12
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	429a      	cmp	r2, r3
 801a160:	d101      	bne.n	801a166 <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	e028      	b.n	801a1b8 <ip4_route+0xe4>
  NETIF_FOREACH(netif) {
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	60fb      	str	r3, [r7, #12]
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d1c5      	bne.n	801a0fe <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a172:	4b16      	ldr	r3, [pc, #88]	@ (801a1cc <ip4_route+0xf8>)
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d01a      	beq.n	801a1b0 <ip4_route+0xdc>
 801a17a:	4b14      	ldr	r3, [pc, #80]	@ (801a1cc <ip4_route+0xf8>)
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a182:	f003 0301 	and.w	r3, r3, #1
 801a186:	2b00      	cmp	r3, #0
 801a188:	d012      	beq.n	801a1b0 <ip4_route+0xdc>
 801a18a:	4b10      	ldr	r3, [pc, #64]	@ (801a1cc <ip4_route+0xf8>)
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a192:	f003 0304 	and.w	r3, r3, #4
 801a196:	2b00      	cmp	r3, #0
 801a198:	d00a      	beq.n	801a1b0 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a19a:	4b0c      	ldr	r3, [pc, #48]	@ (801a1cc <ip4_route+0xf8>)
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	3304      	adds	r3, #4
 801a1a0:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d004      	beq.n	801a1b0 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	b2db      	uxtb	r3, r3
 801a1ac:	2b7f      	cmp	r3, #127	@ 0x7f
 801a1ae:	d101      	bne.n	801a1b4 <ip4_route+0xe0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	e001      	b.n	801a1b8 <ip4_route+0xe4>
  }

  return netif_default;
 801a1b4:	4b05      	ldr	r3, [pc, #20]	@ (801a1cc <ip4_route+0xf8>)
 801a1b6:	681b      	ldr	r3, [r3, #0]
}
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	3714      	adds	r7, #20
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c2:	4770      	bx	lr
 801a1c4:	20042714 	.word	0x20042714
 801a1c8:	200425a8 	.word	0x200425a8
 801a1cc:	200425ac 	.word	0x200425ac

0801a1d0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801a1d0:	b580      	push	{r7, lr}
 801a1d2:	b082      	sub	sp, #8
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a1de:	f003 0301 	and.w	r3, r3, #1
 801a1e2:	b2db      	uxtb	r3, r3
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d016      	beq.n	801a216 <ip4_input_accept+0x46>
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	3304      	adds	r3, #4
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d011      	beq.n	801a216 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a1f2:	4b0b      	ldr	r3, [pc, #44]	@ (801a220 <ip4_input_accept+0x50>)
 801a1f4:	695a      	ldr	r2, [r3, #20]
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	3304      	adds	r3, #4
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	429a      	cmp	r2, r3
 801a1fe:	d008      	beq.n	801a212 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a200:	4b07      	ldr	r3, [pc, #28]	@ (801a220 <ip4_input_accept+0x50>)
 801a202:	695b      	ldr	r3, [r3, #20]
 801a204:	6879      	ldr	r1, [r7, #4]
 801a206:	4618      	mov	r0, r3
 801a208:	f000 faba 	bl	801a780 <ip4_addr_isbroadcast_u32>
 801a20c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d001      	beq.n	801a216 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801a212:	2301      	movs	r3, #1
 801a214:	e000      	b.n	801a218 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801a216:	2300      	movs	r3, #0
}
 801a218:	4618      	mov	r0, r3
 801a21a:	3708      	adds	r7, #8
 801a21c:	46bd      	mov	sp, r7
 801a21e:	bd80      	pop	{r7, pc}
 801a220:	20037370 	.word	0x20037370

0801a224 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a224:	b580      	push	{r7, lr}
 801a226:	b088      	sub	sp, #32
 801a228:	af00      	add	r7, sp, #0
 801a22a:	6078      	str	r0, [r7, #4]
 801a22c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801a22e:	2301      	movs	r3, #1
 801a230:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	685b      	ldr	r3, [r3, #4]
 801a236:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801a238:	69fb      	ldr	r3, [r7, #28]
 801a23a:	781b      	ldrb	r3, [r3, #0]
 801a23c:	091b      	lsrs	r3, r3, #4
 801a23e:	b2db      	uxtb	r3, r3
 801a240:	2b04      	cmp	r3, #4
 801a242:	d004      	beq.n	801a24e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a244:	6878      	ldr	r0, [r7, #4]
 801a246:	f7f7 f89f 	bl	8011388 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a24a:	2300      	movs	r3, #0
 801a24c:	e13d      	b.n	801a4ca <ip4_input+0x2a6>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a24e:	69fb      	ldr	r3, [r7, #28]
 801a250:	781b      	ldrb	r3, [r3, #0]
 801a252:	f003 030f 	and.w	r3, r3, #15
 801a256:	b2db      	uxtb	r3, r3
 801a258:	009b      	lsls	r3, r3, #2
 801a25a:	b2db      	uxtb	r3, r3
 801a25c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a25e:	69fb      	ldr	r3, [r7, #28]
 801a260:	885b      	ldrh	r3, [r3, #2]
 801a262:	b29b      	uxth	r3, r3
 801a264:	4618      	mov	r0, r3
 801a266:	f7f5 fb95 	bl	800f994 <lwip_htons>
 801a26a:	4603      	mov	r3, r0
 801a26c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	891b      	ldrh	r3, [r3, #8]
 801a272:	8a3a      	ldrh	r2, [r7, #16]
 801a274:	429a      	cmp	r2, r3
 801a276:	d204      	bcs.n	801a282 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801a278:	8a3b      	ldrh	r3, [r7, #16]
 801a27a:	4619      	mov	r1, r3
 801a27c:	6878      	ldr	r0, [r7, #4]
 801a27e:	f7f6 fecb 	bl	8011018 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	895b      	ldrh	r3, [r3, #10]
 801a286:	8a7a      	ldrh	r2, [r7, #18]
 801a288:	429a      	cmp	r2, r3
 801a28a:	d807      	bhi.n	801a29c <ip4_input+0x78>
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	891b      	ldrh	r3, [r3, #8]
 801a290:	8a3a      	ldrh	r2, [r7, #16]
 801a292:	429a      	cmp	r2, r3
 801a294:	d802      	bhi.n	801a29c <ip4_input+0x78>
 801a296:	8a7b      	ldrh	r3, [r7, #18]
 801a298:	2b13      	cmp	r3, #19
 801a29a:	d804      	bhi.n	801a2a6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a29c:	6878      	ldr	r0, [r7, #4]
 801a29e:	f7f7 f873 	bl	8011388 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	e111      	b.n	801a4ca <ip4_input+0x2a6>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a2a6:	69fb      	ldr	r3, [r7, #28]
 801a2a8:	691b      	ldr	r3, [r3, #16]
 801a2aa:	4a8a      	ldr	r2, [pc, #552]	@ (801a4d4 <ip4_input+0x2b0>)
 801a2ac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a2ae:	69fb      	ldr	r3, [r7, #28]
 801a2b0:	68db      	ldr	r3, [r3, #12]
 801a2b2:	4a88      	ldr	r2, [pc, #544]	@ (801a4d4 <ip4_input+0x2b0>)
 801a2b4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a2b6:	4b87      	ldr	r3, [pc, #540]	@ (801a4d4 <ip4_input+0x2b0>)
 801a2b8:	695b      	ldr	r3, [r3, #20]
 801a2ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a2be:	2be0      	cmp	r3, #224	@ 0xe0
 801a2c0:	d120      	bne.n	801a304 <ip4_input+0xe0>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801a2c2:	683b      	ldr	r3, [r7, #0]
 801a2c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a2c8:	f003 0320 	and.w	r3, r3, #32
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d016      	beq.n	801a2fe <ip4_input+0xda>
 801a2d0:	4981      	ldr	r1, [pc, #516]	@ (801a4d8 <ip4_input+0x2b4>)
 801a2d2:	6838      	ldr	r0, [r7, #0]
 801a2d4:	f7ff fad1 	bl	801987a <igmp_lookfor_group>
 801a2d8:	4603      	mov	r3, r0
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d00f      	beq.n	801a2fe <ip4_input+0xda>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 801a2de:	4b7f      	ldr	r3, [pc, #508]	@ (801a4dc <ip4_input+0x2b8>)
 801a2e0:	60fb      	str	r3, [r7, #12]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 801a2e2:	4b7c      	ldr	r3, [pc, #496]	@ (801a4d4 <ip4_input+0x2b0>)
 801a2e4:	695a      	ldr	r2, [r3, #20]
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	429a      	cmp	r2, r3
 801a2ea:	d105      	bne.n	801a2f8 <ip4_input+0xd4>
          ip4_addr_isany(ip4_current_src_addr())) {
 801a2ec:	4b79      	ldr	r3, [pc, #484]	@ (801a4d4 <ip4_input+0x2b0>)
 801a2ee:	691b      	ldr	r3, [r3, #16]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d101      	bne.n	801a2f8 <ip4_input+0xd4>
        check_ip_src = 0;
 801a2f4:	2300      	movs	r3, #0
 801a2f6:	617b      	str	r3, [r7, #20]
      }
      netif = inp;
 801a2f8:	683b      	ldr	r3, [r7, #0]
 801a2fa:	61bb      	str	r3, [r7, #24]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801a2fc:	e02a      	b.n	801a354 <ip4_input+0x130>
    } else {
      netif = NULL;
 801a2fe:	2300      	movs	r3, #0
 801a300:	61bb      	str	r3, [r7, #24]
 801a302:	e027      	b.n	801a354 <ip4_input+0x130>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a304:	6838      	ldr	r0, [r7, #0]
 801a306:	f7ff ff63 	bl	801a1d0 <ip4_input_accept>
 801a30a:	4603      	mov	r3, r0
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d002      	beq.n	801a316 <ip4_input+0xf2>
      netif = inp;
 801a310:	683b      	ldr	r3, [r7, #0]
 801a312:	61bb      	str	r3, [r7, #24]
 801a314:	e01e      	b.n	801a354 <ip4_input+0x130>
    } else {
      netif = NULL;
 801a316:	2300      	movs	r3, #0
 801a318:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a31a:	4b6e      	ldr	r3, [pc, #440]	@ (801a4d4 <ip4_input+0x2b0>)
 801a31c:	695b      	ldr	r3, [r3, #20]
 801a31e:	b2db      	uxtb	r3, r3
 801a320:	2b7f      	cmp	r3, #127	@ 0x7f
 801a322:	d017      	beq.n	801a354 <ip4_input+0x130>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a324:	4b6e      	ldr	r3, [pc, #440]	@ (801a4e0 <ip4_input+0x2bc>)
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	61bb      	str	r3, [r7, #24]
 801a32a:	e00e      	b.n	801a34a <ip4_input+0x126>
          if (netif == inp) {
 801a32c:	69ba      	ldr	r2, [r7, #24]
 801a32e:	683b      	ldr	r3, [r7, #0]
 801a330:	429a      	cmp	r2, r3
 801a332:	d006      	beq.n	801a342 <ip4_input+0x11e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a334:	69b8      	ldr	r0, [r7, #24]
 801a336:	f7ff ff4b 	bl	801a1d0 <ip4_input_accept>
 801a33a:	4603      	mov	r3, r0
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d108      	bne.n	801a352 <ip4_input+0x12e>
 801a340:	e000      	b.n	801a344 <ip4_input+0x120>
            continue;
 801a342:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a344:	69bb      	ldr	r3, [r7, #24]
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	61bb      	str	r3, [r7, #24]
 801a34a:	69bb      	ldr	r3, [r7, #24]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d1ed      	bne.n	801a32c <ip4_input+0x108>
 801a350:	e000      	b.n	801a354 <ip4_input+0x130>
            break;
 801a352:	bf00      	nop
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801a354:	697b      	ldr	r3, [r7, #20]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d013      	beq.n	801a382 <ip4_input+0x15e>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a35a:	4b5e      	ldr	r3, [pc, #376]	@ (801a4d4 <ip4_input+0x2b0>)
 801a35c:	691b      	ldr	r3, [r3, #16]
 801a35e:	6839      	ldr	r1, [r7, #0]
 801a360:	4618      	mov	r0, r3
 801a362:	f000 fa0d 	bl	801a780 <ip4_addr_isbroadcast_u32>
 801a366:	4603      	mov	r3, r0
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d105      	bne.n	801a378 <ip4_input+0x154>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a36c:	4b59      	ldr	r3, [pc, #356]	@ (801a4d4 <ip4_input+0x2b0>)
 801a36e:	691b      	ldr	r3, [r3, #16]
 801a370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a374:	2be0      	cmp	r3, #224	@ 0xe0
 801a376:	d104      	bne.n	801a382 <ip4_input+0x15e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a378:	6878      	ldr	r0, [r7, #4]
 801a37a:	f7f7 f805 	bl	8011388 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a37e:	2300      	movs	r3, #0
 801a380:	e0a3      	b.n	801a4ca <ip4_input+0x2a6>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a382:	69bb      	ldr	r3, [r7, #24]
 801a384:	2b00      	cmp	r3, #0
 801a386:	d104      	bne.n	801a392 <ip4_input+0x16e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a388:	6878      	ldr	r0, [r7, #4]
 801a38a:	f7f6 fffd 	bl	8011388 <pbuf_free>
    return ERR_OK;
 801a38e:	2300      	movs	r3, #0
 801a390:	e09b      	b.n	801a4ca <ip4_input+0x2a6>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a392:	69fb      	ldr	r3, [r7, #28]
 801a394:	88db      	ldrh	r3, [r3, #6]
 801a396:	b29b      	uxth	r3, r3
 801a398:	461a      	mov	r2, r3
 801a39a:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801a39e:	4013      	ands	r3, r2
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d00b      	beq.n	801a3bc <ip4_input+0x198>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a3a4:	6878      	ldr	r0, [r7, #4]
 801a3a6:	f000 fe6f 	bl	801b088 <ip4_reass>
 801a3aa:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d101      	bne.n	801a3b6 <ip4_input+0x192>
      return ERR_OK;
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	e089      	b.n	801a4ca <ip4_input+0x2a6>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	685b      	ldr	r3, [r3, #4]
 801a3ba:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a3bc:	4a45      	ldr	r2, [pc, #276]	@ (801a4d4 <ip4_input+0x2b0>)
 801a3be:	69bb      	ldr	r3, [r7, #24]
 801a3c0:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a3c2:	4a44      	ldr	r2, [pc, #272]	@ (801a4d4 <ip4_input+0x2b0>)
 801a3c4:	683b      	ldr	r3, [r7, #0]
 801a3c6:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a3c8:	4a42      	ldr	r2, [pc, #264]	@ (801a4d4 <ip4_input+0x2b0>)
 801a3ca:	69fb      	ldr	r3, [r7, #28]
 801a3cc:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a3ce:	69fb      	ldr	r3, [r7, #28]
 801a3d0:	781b      	ldrb	r3, [r3, #0]
 801a3d2:	f003 030f 	and.w	r3, r3, #15
 801a3d6:	b2db      	uxtb	r3, r3
 801a3d8:	009b      	lsls	r3, r3, #2
 801a3da:	b2db      	uxtb	r3, r3
 801a3dc:	461a      	mov	r2, r3
 801a3de:	4b3d      	ldr	r3, [pc, #244]	@ (801a4d4 <ip4_input+0x2b0>)
 801a3e0:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a3e2:	8a7b      	ldrh	r3, [r7, #18]
 801a3e4:	4619      	mov	r1, r3
 801a3e6:	6878      	ldr	r0, [r7, #4]
 801a3e8:	f7f6 ff16 	bl	8011218 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a3ec:	69fb      	ldr	r3, [r7, #28]
 801a3ee:	7a5b      	ldrb	r3, [r3, #9]
 801a3f0:	3b01      	subs	r3, #1
 801a3f2:	2b10      	cmp	r3, #16
 801a3f4:	d839      	bhi.n	801a46a <ip4_input+0x246>
 801a3f6:	a201      	add	r2, pc, #4	@ (adr r2, 801a3fc <ip4_input+0x1d8>)
 801a3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a3fc:	0801a455 	.word	0x0801a455
 801a400:	0801a45f 	.word	0x0801a45f
 801a404:	0801a46b 	.word	0x0801a46b
 801a408:	0801a46b 	.word	0x0801a46b
 801a40c:	0801a46b 	.word	0x0801a46b
 801a410:	0801a44b 	.word	0x0801a44b
 801a414:	0801a46b 	.word	0x0801a46b
 801a418:	0801a46b 	.word	0x0801a46b
 801a41c:	0801a46b 	.word	0x0801a46b
 801a420:	0801a46b 	.word	0x0801a46b
 801a424:	0801a46b 	.word	0x0801a46b
 801a428:	0801a46b 	.word	0x0801a46b
 801a42c:	0801a46b 	.word	0x0801a46b
 801a430:	0801a46b 	.word	0x0801a46b
 801a434:	0801a46b 	.word	0x0801a46b
 801a438:	0801a46b 	.word	0x0801a46b
 801a43c:	0801a441 	.word	0x0801a441
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a440:	6839      	ldr	r1, [r7, #0]
 801a442:	6878      	ldr	r0, [r7, #4]
 801a444:	f7fd fc44 	bl	8017cd0 <udp_input>
        break;
 801a448:	e02c      	b.n	801a4a4 <ip4_input+0x280>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a44a:	6839      	ldr	r1, [r7, #0]
 801a44c:	6878      	ldr	r0, [r7, #4]
 801a44e:	f7f9 f803 	bl	8013458 <tcp_input>
        break;
 801a452:	e027      	b.n	801a4a4 <ip4_input+0x280>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a454:	6839      	ldr	r1, [r7, #0]
 801a456:	6878      	ldr	r0, [r7, #4]
 801a458:	f7ff f824 	bl	80194a4 <icmp_input>
        break;
 801a45c:	e022      	b.n	801a4a4 <ip4_input+0x280>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 801a45e:	4a1e      	ldr	r2, [pc, #120]	@ (801a4d8 <ip4_input+0x2b4>)
 801a460:	6839      	ldr	r1, [r7, #0]
 801a462:	6878      	ldr	r0, [r7, #4]
 801a464:	f7ff fab8 	bl	80199d8 <igmp_input>
        break;
 801a468:	e01c      	b.n	801a4a4 <ip4_input+0x280>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a46a:	4b1a      	ldr	r3, [pc, #104]	@ (801a4d4 <ip4_input+0x2b0>)
 801a46c:	695b      	ldr	r3, [r3, #20]
 801a46e:	69b9      	ldr	r1, [r7, #24]
 801a470:	4618      	mov	r0, r3
 801a472:	f000 f985 	bl	801a780 <ip4_addr_isbroadcast_u32>
 801a476:	4603      	mov	r3, r0
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d10f      	bne.n	801a49c <ip4_input+0x278>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a47c:	4b15      	ldr	r3, [pc, #84]	@ (801a4d4 <ip4_input+0x2b0>)
 801a47e:	695b      	ldr	r3, [r3, #20]
 801a480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a484:	2be0      	cmp	r3, #224	@ 0xe0
 801a486:	d009      	beq.n	801a49c <ip4_input+0x278>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a488:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a48c:	4619      	mov	r1, r3
 801a48e:	6878      	ldr	r0, [r7, #4]
 801a490:	f7f6 ff35 	bl	80112fe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a494:	2102      	movs	r1, #2
 801a496:	6878      	ldr	r0, [r7, #4]
 801a498:	f7ff f908 	bl	80196ac <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a49c:	6878      	ldr	r0, [r7, #4]
 801a49e:	f7f6 ff73 	bl	8011388 <pbuf_free>
        break;
 801a4a2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a4a4:	4b0b      	ldr	r3, [pc, #44]	@ (801a4d4 <ip4_input+0x2b0>)
 801a4a6:	2200      	movs	r2, #0
 801a4a8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a4aa:	4b0a      	ldr	r3, [pc, #40]	@ (801a4d4 <ip4_input+0x2b0>)
 801a4ac:	2200      	movs	r2, #0
 801a4ae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a4b0:	4b08      	ldr	r3, [pc, #32]	@ (801a4d4 <ip4_input+0x2b0>)
 801a4b2:	2200      	movs	r2, #0
 801a4b4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a4b6:	4b07      	ldr	r3, [pc, #28]	@ (801a4d4 <ip4_input+0x2b0>)
 801a4b8:	2200      	movs	r2, #0
 801a4ba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a4bc:	4b05      	ldr	r3, [pc, #20]	@ (801a4d4 <ip4_input+0x2b0>)
 801a4be:	2200      	movs	r2, #0
 801a4c0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a4c2:	4b04      	ldr	r3, [pc, #16]	@ (801a4d4 <ip4_input+0x2b0>)
 801a4c4:	2200      	movs	r2, #0
 801a4c6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a4c8:	2300      	movs	r3, #0
}
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	3720      	adds	r7, #32
 801a4ce:	46bd      	mov	sp, r7
 801a4d0:	bd80      	pop	{r7, pc}
 801a4d2:	bf00      	nop
 801a4d4:	20037370 	.word	0x20037370
 801a4d8:	20037384 	.word	0x20037384
 801a4dc:	010000e0 	.word	0x010000e0
 801a4e0:	200425a8 	.word	0x200425a8

0801a4e4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a4e4:	b580      	push	{r7, lr}
 801a4e6:	b08a      	sub	sp, #40	@ 0x28
 801a4e8:	af06      	add	r7, sp, #24
 801a4ea:	60f8      	str	r0, [r7, #12]
 801a4ec:	60b9      	str	r1, [r7, #8]
 801a4ee:	607a      	str	r2, [r7, #4]
 801a4f0:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 801a4f2:	78fa      	ldrb	r2, [r7, #3]
 801a4f4:	2300      	movs	r3, #0
 801a4f6:	9304      	str	r3, [sp, #16]
 801a4f8:	2300      	movs	r3, #0
 801a4fa:	9303      	str	r3, [sp, #12]
 801a4fc:	6a3b      	ldr	r3, [r7, #32]
 801a4fe:	9302      	str	r3, [sp, #8]
 801a500:	7f3b      	ldrb	r3, [r7, #28]
 801a502:	9301      	str	r3, [sp, #4]
 801a504:	7e3b      	ldrb	r3, [r7, #24]
 801a506:	9300      	str	r3, [sp, #0]
 801a508:	4613      	mov	r3, r2
 801a50a:	687a      	ldr	r2, [r7, #4]
 801a50c:	68b9      	ldr	r1, [r7, #8]
 801a50e:	68f8      	ldr	r0, [r7, #12]
 801a510:	f000 f805 	bl	801a51e <ip4_output_if_opt>
 801a514:	4603      	mov	r3, r0
}
 801a516:	4618      	mov	r0, r3
 801a518:	3710      	adds	r7, #16
 801a51a:	46bd      	mov	sp, r7
 801a51c:	bd80      	pop	{r7, pc}

0801a51e <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 801a51e:	b580      	push	{r7, lr}
 801a520:	b08c      	sub	sp, #48	@ 0x30
 801a522:	af06      	add	r7, sp, #24
 801a524:	60f8      	str	r0, [r7, #12]
 801a526:	60b9      	str	r1, [r7, #8]
 801a528:	607a      	str	r2, [r7, #4]
 801a52a:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a52c:	68bb      	ldr	r3, [r7, #8]
 801a52e:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	2b00      	cmp	r3, #0
 801a534:	d009      	beq.n	801a54a <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 801a536:	68bb      	ldr	r3, [r7, #8]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d003      	beq.n	801a544 <ip4_output_if_opt+0x26>
 801a53c:	68bb      	ldr	r3, [r7, #8]
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	2b00      	cmp	r3, #0
 801a542:	d102      	bne.n	801a54a <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 801a544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a546:	3304      	adds	r3, #4
 801a548:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 801a54a:	78fa      	ldrb	r2, [r7, #3]
 801a54c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801a54e:	9304      	str	r3, [sp, #16]
 801a550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a552:	9303      	str	r3, [sp, #12]
 801a554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a556:	9302      	str	r3, [sp, #8]
 801a558:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801a55c:	9301      	str	r3, [sp, #4]
 801a55e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a562:	9300      	str	r3, [sp, #0]
 801a564:	4613      	mov	r3, r2
 801a566:	687a      	ldr	r2, [r7, #4]
 801a568:	6979      	ldr	r1, [r7, #20]
 801a56a:	68f8      	ldr	r0, [r7, #12]
 801a56c:	f000 f822 	bl	801a5b4 <ip4_output_if_opt_src>
 801a570:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 801a572:	4618      	mov	r0, r3
 801a574:	3718      	adds	r7, #24
 801a576:	46bd      	mov	sp, r7
 801a578:	bd80      	pop	{r7, pc}

0801a57a <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a57a:	b580      	push	{r7, lr}
 801a57c:	b08a      	sub	sp, #40	@ 0x28
 801a57e:	af06      	add	r7, sp, #24
 801a580:	60f8      	str	r0, [r7, #12]
 801a582:	60b9      	str	r1, [r7, #8]
 801a584:	607a      	str	r2, [r7, #4]
 801a586:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 801a588:	78fa      	ldrb	r2, [r7, #3]
 801a58a:	2300      	movs	r3, #0
 801a58c:	9304      	str	r3, [sp, #16]
 801a58e:	2300      	movs	r3, #0
 801a590:	9303      	str	r3, [sp, #12]
 801a592:	6a3b      	ldr	r3, [r7, #32]
 801a594:	9302      	str	r3, [sp, #8]
 801a596:	7f3b      	ldrb	r3, [r7, #28]
 801a598:	9301      	str	r3, [sp, #4]
 801a59a:	7e3b      	ldrb	r3, [r7, #24]
 801a59c:	9300      	str	r3, [sp, #0]
 801a59e:	4613      	mov	r3, r2
 801a5a0:	687a      	ldr	r2, [r7, #4]
 801a5a2:	68b9      	ldr	r1, [r7, #8]
 801a5a4:	68f8      	ldr	r0, [r7, #12]
 801a5a6:	f000 f805 	bl	801a5b4 <ip4_output_if_opt_src>
 801a5aa:	4603      	mov	r3, r0
}
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	3710      	adds	r7, #16
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	bd80      	pop	{r7, pc}

0801a5b4 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	b088      	sub	sp, #32
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	60f8      	str	r0, [r7, #12]
 801a5bc:	60b9      	str	r1, [r7, #8]
 801a5be:	607a      	str	r2, [r7, #4]
 801a5c0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	7b9b      	ldrb	r3, [r3, #14]
 801a5c6:	2b01      	cmp	r3, #1
 801a5c8:	d006      	beq.n	801a5d8 <ip4_output_if_opt_src+0x24>
 801a5ca:	4b67      	ldr	r3, [pc, #412]	@ (801a768 <ip4_output_if_opt_src+0x1b4>)
 801a5cc:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801a5d0:	4966      	ldr	r1, [pc, #408]	@ (801a76c <ip4_output_if_opt_src+0x1b8>)
 801a5d2:	4867      	ldr	r0, [pc, #412]	@ (801a770 <ip4_output_if_opt_src+0x1bc>)
 801a5d4:	f00e fea6 	bl	8029324 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	f000 8097 	beq.w	801a70e <ip4_output_if_opt_src+0x15a>
    u16_t ip_hlen = IP_HLEN;
 801a5e0:	2314      	movs	r3, #20
 801a5e2:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 801a5e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d030      	beq.n	801a650 <ip4_output_if_opt_src+0x9c>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 801a5ee:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a5f0:	2b28      	cmp	r3, #40	@ 0x28
 801a5f2:	d902      	bls.n	801a5fa <ip4_output_if_opt_src+0x46>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 801a5f4:	f06f 0305 	mvn.w	r3, #5
 801a5f8:	e0b1      	b.n	801a75e <ip4_output_if_opt_src+0x1aa>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 801a5fa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a5fc:	3303      	adds	r3, #3
 801a5fe:	b29b      	uxth	r3, r3
 801a600:	f023 0303 	bic.w	r3, r3, #3
 801a604:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 801a606:	8bfa      	ldrh	r2, [r7, #30]
 801a608:	8afb      	ldrh	r3, [r7, #22]
 801a60a:	4413      	add	r3, r2
 801a60c:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 801a60e:	8afb      	ldrh	r3, [r7, #22]
 801a610:	4619      	mov	r1, r3
 801a612:	68f8      	ldr	r0, [r7, #12]
 801a614:	f7f6 fdf0 	bl	80111f8 <pbuf_add_header>
 801a618:	4603      	mov	r3, r0
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d002      	beq.n	801a624 <ip4_output_if_opt_src+0x70>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 801a61e:	f06f 0301 	mvn.w	r3, #1
 801a622:	e09c      	b.n	801a75e <ip4_output_if_opt_src+0x1aa>
      }
      MEMCPY(p->payload, ip_options, optlen);
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	685b      	ldr	r3, [r3, #4]
 801a628:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801a62a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a62c:	4618      	mov	r0, r3
 801a62e:	f00f f91c 	bl	802986a <memcpy>
      if (optlen < optlen_aligned) {
 801a632:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801a634:	8afb      	ldrh	r3, [r7, #22]
 801a636:	429a      	cmp	r2, r3
 801a638:	d20a      	bcs.n	801a650 <ip4_output_if_opt_src+0x9c>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 801a63a:	68fb      	ldr	r3, [r7, #12]
 801a63c:	685a      	ldr	r2, [r3, #4]
 801a63e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a640:	18d0      	adds	r0, r2, r3
 801a642:	8afa      	ldrh	r2, [r7, #22]
 801a644:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a646:	1ad3      	subs	r3, r2, r3
 801a648:	461a      	mov	r2, r3
 801a64a:	2100      	movs	r1, #0
 801a64c:	f00e ffea 	bl	8029624 <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a650:	2114      	movs	r1, #20
 801a652:	68f8      	ldr	r0, [r7, #12]
 801a654:	f7f6 fdd0 	bl	80111f8 <pbuf_add_header>
 801a658:	4603      	mov	r3, r0
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d002      	beq.n	801a664 <ip4_output_if_opt_src+0xb0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a65e:	f06f 0301 	mvn.w	r3, #1
 801a662:	e07c      	b.n	801a75e <ip4_output_if_opt_src+0x1aa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	685b      	ldr	r3, [r3, #4]
 801a668:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	895b      	ldrh	r3, [r3, #10]
 801a66e:	2b13      	cmp	r3, #19
 801a670:	d806      	bhi.n	801a680 <ip4_output_if_opt_src+0xcc>
 801a672:	4b3d      	ldr	r3, [pc, #244]	@ (801a768 <ip4_output_if_opt_src+0x1b4>)
 801a674:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801a678:	493e      	ldr	r1, [pc, #248]	@ (801a774 <ip4_output_if_opt_src+0x1c0>)
 801a67a:	483d      	ldr	r0, [pc, #244]	@ (801a770 <ip4_output_if_opt_src+0x1bc>)
 801a67c:	f00e fe52 	bl	8029324 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a680:	69bb      	ldr	r3, [r7, #24]
 801a682:	78fa      	ldrb	r2, [r7, #3]
 801a684:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a686:	69bb      	ldr	r3, [r7, #24]
 801a688:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801a68c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	681a      	ldr	r2, [r3, #0]
 801a692:	69bb      	ldr	r3, [r7, #24]
 801a694:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a696:	8bfb      	ldrh	r3, [r7, #30]
 801a698:	089b      	lsrs	r3, r3, #2
 801a69a:	b29b      	uxth	r3, r3
 801a69c:	b2db      	uxtb	r3, r3
 801a69e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a6a2:	b2da      	uxtb	r2, r3
 801a6a4:	69bb      	ldr	r3, [r7, #24]
 801a6a6:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a6a8:	69bb      	ldr	r3, [r7, #24]
 801a6aa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801a6ae:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a6b0:	68fb      	ldr	r3, [r7, #12]
 801a6b2:	891b      	ldrh	r3, [r3, #8]
 801a6b4:	4618      	mov	r0, r3
 801a6b6:	f7f5 f96d 	bl	800f994 <lwip_htons>
 801a6ba:	4603      	mov	r3, r0
 801a6bc:	461a      	mov	r2, r3
 801a6be:	69bb      	ldr	r3, [r7, #24]
 801a6c0:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a6c2:	69bb      	ldr	r3, [r7, #24]
 801a6c4:	2200      	movs	r2, #0
 801a6c6:	719a      	strb	r2, [r3, #6]
 801a6c8:	2200      	movs	r2, #0
 801a6ca:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a6cc:	4b2a      	ldr	r3, [pc, #168]	@ (801a778 <ip4_output_if_opt_src+0x1c4>)
 801a6ce:	881b      	ldrh	r3, [r3, #0]
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	f7f5 f95f 	bl	800f994 <lwip_htons>
 801a6d6:	4603      	mov	r3, r0
 801a6d8:	461a      	mov	r2, r3
 801a6da:	69bb      	ldr	r3, [r7, #24]
 801a6dc:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a6de:	4b26      	ldr	r3, [pc, #152]	@ (801a778 <ip4_output_if_opt_src+0x1c4>)
 801a6e0:	881b      	ldrh	r3, [r3, #0]
 801a6e2:	3301      	adds	r3, #1
 801a6e4:	b29a      	uxth	r2, r3
 801a6e6:	4b24      	ldr	r3, [pc, #144]	@ (801a778 <ip4_output_if_opt_src+0x1c4>)
 801a6e8:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a6ea:	68bb      	ldr	r3, [r7, #8]
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d104      	bne.n	801a6fa <ip4_output_if_opt_src+0x146>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a6f0:	4b22      	ldr	r3, [pc, #136]	@ (801a77c <ip4_output_if_opt_src+0x1c8>)
 801a6f2:	681a      	ldr	r2, [r3, #0]
 801a6f4:	69bb      	ldr	r3, [r7, #24]
 801a6f6:	60da      	str	r2, [r3, #12]
 801a6f8:	e003      	b.n	801a702 <ip4_output_if_opt_src+0x14e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a6fa:	68bb      	ldr	r3, [r7, #8]
 801a6fc:	681a      	ldr	r2, [r3, #0]
 801a6fe:	69bb      	ldr	r3, [r7, #24]
 801a700:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a702:	69bb      	ldr	r3, [r7, #24]
 801a704:	2200      	movs	r2, #0
 801a706:	729a      	strb	r2, [r3, #10]
 801a708:	2200      	movs	r2, #0
 801a70a:	72da      	strb	r2, [r3, #11]
 801a70c:	e00f      	b.n	801a72e <ip4_output_if_opt_src+0x17a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	895b      	ldrh	r3, [r3, #10]
 801a712:	2b13      	cmp	r3, #19
 801a714:	d802      	bhi.n	801a71c <ip4_output_if_opt_src+0x168>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a716:	f06f 0301 	mvn.w	r3, #1
 801a71a:	e020      	b.n	801a75e <ip4_output_if_opt_src+0x1aa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	685b      	ldr	r3, [r3, #4]
 801a720:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a722:	69bb      	ldr	r3, [r7, #24]
 801a724:	691b      	ldr	r3, [r3, #16]
 801a726:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 801a728:	f107 0310 	add.w	r3, r7, #16
 801a72c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a732:	2b00      	cmp	r3, #0
 801a734:	d00c      	beq.n	801a750 <ip4_output_if_opt_src+0x19c>
 801a736:	68fb      	ldr	r3, [r7, #12]
 801a738:	891a      	ldrh	r2, [r3, #8]
 801a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a73c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a73e:	429a      	cmp	r2, r3
 801a740:	d906      	bls.n	801a750 <ip4_output_if_opt_src+0x19c>
    return ip4_frag(p, netif, dest);
 801a742:	687a      	ldr	r2, [r7, #4]
 801a744:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801a746:	68f8      	ldr	r0, [r7, #12]
 801a748:	f000 fe92 	bl	801b470 <ip4_frag>
 801a74c:	4603      	mov	r3, r0
 801a74e:	e006      	b.n	801a75e <ip4_output_if_opt_src+0x1aa>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a752:	695b      	ldr	r3, [r3, #20]
 801a754:	687a      	ldr	r2, [r7, #4]
 801a756:	68f9      	ldr	r1, [r7, #12]
 801a758:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a75a:	4798      	blx	r3
 801a75c:	4603      	mov	r3, r0
}
 801a75e:	4618      	mov	r0, r3
 801a760:	3720      	adds	r7, #32
 801a762:	46bd      	mov	sp, r7
 801a764:	bd80      	pop	{r7, pc}
 801a766:	bf00      	nop
 801a768:	0802ef6c 	.word	0x0802ef6c
 801a76c:	0802efa0 	.word	0x0802efa0
 801a770:	0802efac 	.word	0x0802efac
 801a774:	0802efd4 	.word	0x0802efd4
 801a778:	20042710 	.word	0x20042710
 801a77c:	0802f50c 	.word	0x0802f50c

0801a780 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a780:	b480      	push	{r7}
 801a782:	b085      	sub	sp, #20
 801a784:	af00      	add	r7, sp, #0
 801a786:	6078      	str	r0, [r7, #4]
 801a788:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a794:	d002      	beq.n	801a79c <ip4_addr_isbroadcast_u32+0x1c>
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d101      	bne.n	801a7a0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a79c:	2301      	movs	r3, #1
 801a79e:	e02a      	b.n	801a7f6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a7a0:	683b      	ldr	r3, [r7, #0]
 801a7a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a7a6:	f003 0302 	and.w	r3, r3, #2
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d101      	bne.n	801a7b2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a7ae:	2300      	movs	r3, #0
 801a7b0:	e021      	b.n	801a7f6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a7b2:	683b      	ldr	r3, [r7, #0]
 801a7b4:	3304      	adds	r3, #4
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	687a      	ldr	r2, [r7, #4]
 801a7ba:	429a      	cmp	r2, r3
 801a7bc:	d101      	bne.n	801a7c2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a7be:	2300      	movs	r3, #0
 801a7c0:	e019      	b.n	801a7f6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a7c2:	68fa      	ldr	r2, [r7, #12]
 801a7c4:	683b      	ldr	r3, [r7, #0]
 801a7c6:	3304      	adds	r3, #4
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	405a      	eors	r2, r3
 801a7cc:	683b      	ldr	r3, [r7, #0]
 801a7ce:	3308      	adds	r3, #8
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	4013      	ands	r3, r2
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d10d      	bne.n	801a7f4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a7d8:	683b      	ldr	r3, [r7, #0]
 801a7da:	3308      	adds	r3, #8
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	43da      	mvns	r2, r3
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a7e4:	683b      	ldr	r3, [r7, #0]
 801a7e6:	3308      	adds	r3, #8
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a7ec:	429a      	cmp	r2, r3
 801a7ee:	d101      	bne.n	801a7f4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a7f0:	2301      	movs	r3, #1
 801a7f2:	e000      	b.n	801a7f6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a7f4:	2300      	movs	r3, #0
  }
}
 801a7f6:	4618      	mov	r0, r3
 801a7f8:	3714      	adds	r7, #20
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a800:	4770      	bx	lr

0801a802 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 801a802:	b580      	push	{r7, lr}
 801a804:	b084      	sub	sp, #16
 801a806:	af00      	add	r7, sp, #0
 801a808:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 801a80a:	f107 030c 	add.w	r3, r7, #12
 801a80e:	4619      	mov	r1, r3
 801a810:	6878      	ldr	r0, [r7, #4]
 801a812:	f000 f80b 	bl	801a82c <ip4addr_aton>
 801a816:	4603      	mov	r3, r0
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d001      	beq.n	801a820 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	e001      	b.n	801a824 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 801a820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a824:	4618      	mov	r0, r3
 801a826:	3710      	adds	r7, #16
 801a828:	46bd      	mov	sp, r7
 801a82a:	bd80      	pop	{r7, pc}

0801a82c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b08a      	sub	sp, #40	@ 0x28
 801a830:	af00      	add	r7, sp, #0
 801a832:	6078      	str	r0, [r7, #4]
 801a834:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801a836:	f107 030c 	add.w	r3, r7, #12
 801a83a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	781b      	ldrb	r3, [r3, #0]
 801a840:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801a844:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801a848:	3301      	adds	r3, #1
 801a84a:	4a89      	ldr	r2, [pc, #548]	@ (801aa70 <ip4addr_aton+0x244>)
 801a84c:	4413      	add	r3, r2
 801a84e:	781b      	ldrb	r3, [r3, #0]
 801a850:	f003 0304 	and.w	r3, r3, #4
 801a854:	2b00      	cmp	r3, #0
 801a856:	d101      	bne.n	801a85c <ip4addr_aton+0x30>
      return 0;
 801a858:	2300      	movs	r3, #0
 801a85a:	e105      	b.n	801aa68 <ip4addr_aton+0x23c>
    }
    val = 0;
 801a85c:	2300      	movs	r3, #0
 801a85e:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 801a860:	230a      	movs	r3, #10
 801a862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801a866:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801a86a:	2b30      	cmp	r3, #48	@ 0x30
 801a86c:	d11c      	bne.n	801a8a8 <ip4addr_aton+0x7c>
      c = *++cp;
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	3301      	adds	r3, #1
 801a872:	607b      	str	r3, [r7, #4]
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	781b      	ldrb	r3, [r3, #0]
 801a878:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 801a87c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801a880:	2b78      	cmp	r3, #120	@ 0x78
 801a882:	d003      	beq.n	801a88c <ip4addr_aton+0x60>
 801a884:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801a888:	2b58      	cmp	r3, #88	@ 0x58
 801a88a:	d10a      	bne.n	801a8a2 <ip4addr_aton+0x76>
        base = 16;
 801a88c:	2310      	movs	r3, #16
 801a88e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	3301      	adds	r3, #1
 801a896:	607b      	str	r3, [r7, #4]
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	781b      	ldrb	r3, [r3, #0]
 801a89c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801a8a0:	e002      	b.n	801a8a8 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801a8a2:	2308      	movs	r3, #8
 801a8a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801a8a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801a8ac:	3301      	adds	r3, #1
 801a8ae:	4a70      	ldr	r2, [pc, #448]	@ (801aa70 <ip4addr_aton+0x244>)
 801a8b0:	4413      	add	r3, r2
 801a8b2:	781b      	ldrb	r3, [r3, #0]
 801a8b4:	f003 0304 	and.w	r3, r3, #4
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d011      	beq.n	801a8e0 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801a8bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a8c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a8c2:	fb03 f202 	mul.w	r2, r3, r2
 801a8c6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801a8ca:	4413      	add	r3, r2
 801a8cc:	3b30      	subs	r3, #48	@ 0x30
 801a8ce:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	3301      	adds	r3, #1
 801a8d4:	607b      	str	r3, [r7, #4]
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	781b      	ldrb	r3, [r3, #0]
 801a8da:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801a8de:	e7e3      	b.n	801a8a8 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801a8e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a8e4:	2b10      	cmp	r3, #16
 801a8e6:	d127      	bne.n	801a938 <ip4addr_aton+0x10c>
 801a8e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801a8ec:	3301      	adds	r3, #1
 801a8ee:	4a60      	ldr	r2, [pc, #384]	@ (801aa70 <ip4addr_aton+0x244>)
 801a8f0:	4413      	add	r3, r2
 801a8f2:	781b      	ldrb	r3, [r3, #0]
 801a8f4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	d01d      	beq.n	801a938 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801a8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8fe:	011b      	lsls	r3, r3, #4
 801a900:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801a904:	f102 010a 	add.w	r1, r2, #10
 801a908:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801a90c:	3201      	adds	r2, #1
 801a90e:	4858      	ldr	r0, [pc, #352]	@ (801aa70 <ip4addr_aton+0x244>)
 801a910:	4402      	add	r2, r0
 801a912:	7812      	ldrb	r2, [r2, #0]
 801a914:	f002 0203 	and.w	r2, r2, #3
 801a918:	2a02      	cmp	r2, #2
 801a91a:	d101      	bne.n	801a920 <ip4addr_aton+0xf4>
 801a91c:	2261      	movs	r2, #97	@ 0x61
 801a91e:	e000      	b.n	801a922 <ip4addr_aton+0xf6>
 801a920:	2241      	movs	r2, #65	@ 0x41
 801a922:	1a8a      	subs	r2, r1, r2
 801a924:	4313      	orrs	r3, r2
 801a926:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	3301      	adds	r3, #1
 801a92c:	607b      	str	r3, [r7, #4]
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	781b      	ldrb	r3, [r3, #0]
 801a932:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 801a936:	e7b7      	b.n	801a8a8 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801a938:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801a93c:	2b2e      	cmp	r3, #46	@ 0x2e
 801a93e:	d114      	bne.n	801a96a <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801a940:	f107 030c 	add.w	r3, r7, #12
 801a944:	330c      	adds	r3, #12
 801a946:	69fa      	ldr	r2, [r7, #28]
 801a948:	429a      	cmp	r2, r3
 801a94a:	d301      	bcc.n	801a950 <ip4addr_aton+0x124>
        return 0;
 801a94c:	2300      	movs	r3, #0
 801a94e:	e08b      	b.n	801aa68 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801a950:	69fb      	ldr	r3, [r7, #28]
 801a952:	1d1a      	adds	r2, r3, #4
 801a954:	61fa      	str	r2, [r7, #28]
 801a956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a958:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	3301      	adds	r3, #1
 801a95e:	607b      	str	r3, [r7, #4]
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	781b      	ldrb	r3, [r3, #0]
 801a964:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 801a968:	e76c      	b.n	801a844 <ip4addr_aton+0x18>
    } else {
      break;
 801a96a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801a96c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801a970:	2b00      	cmp	r3, #0
 801a972:	d00b      	beq.n	801a98c <ip4addr_aton+0x160>
 801a974:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801a978:	3301      	adds	r3, #1
 801a97a:	4a3d      	ldr	r2, [pc, #244]	@ (801aa70 <ip4addr_aton+0x244>)
 801a97c:	4413      	add	r3, r2
 801a97e:	781b      	ldrb	r3, [r3, #0]
 801a980:	f003 0308 	and.w	r3, r3, #8
 801a984:	2b00      	cmp	r3, #0
 801a986:	d101      	bne.n	801a98c <ip4addr_aton+0x160>
    return 0;
 801a988:	2300      	movs	r3, #0
 801a98a:	e06d      	b.n	801aa68 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801a98c:	f107 030c 	add.w	r3, r7, #12
 801a990:	69fa      	ldr	r2, [r7, #28]
 801a992:	1ad3      	subs	r3, r2, r3
 801a994:	109b      	asrs	r3, r3, #2
 801a996:	3301      	adds	r3, #1
 801a998:	2b04      	cmp	r3, #4
 801a99a:	d853      	bhi.n	801aa44 <ip4addr_aton+0x218>
 801a99c:	a201      	add	r2, pc, #4	@ (adr r2, 801a9a4 <ip4addr_aton+0x178>)
 801a99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a9a2:	bf00      	nop
 801a9a4:	0801a9b9 	.word	0x0801a9b9
 801a9a8:	0801aa53 	.word	0x0801aa53
 801a9ac:	0801a9bd 	.word	0x0801a9bd
 801a9b0:	0801a9df 	.word	0x0801a9df
 801a9b4:	0801aa0d 	.word	0x0801aa0d

    case 0:
      return 0;       /* initial nondigit */
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	e055      	b.n	801aa68 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801a9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a9c2:	d301      	bcc.n	801a9c8 <ip4addr_aton+0x19c>
        return 0;
 801a9c4:	2300      	movs	r3, #0
 801a9c6:	e04f      	b.n	801aa68 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	2bff      	cmp	r3, #255	@ 0xff
 801a9cc:	d901      	bls.n	801a9d2 <ip4addr_aton+0x1a6>
        return 0;
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	e04a      	b.n	801aa68 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	061b      	lsls	r3, r3, #24
 801a9d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a9d8:	4313      	orrs	r3, r2
 801a9da:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801a9dc:	e03a      	b.n	801aa54 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801a9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a9e4:	d301      	bcc.n	801a9ea <ip4addr_aton+0x1be>
        return 0;
 801a9e6:	2300      	movs	r3, #0
 801a9e8:	e03e      	b.n	801aa68 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801a9ea:	68fb      	ldr	r3, [r7, #12]
 801a9ec:	2bff      	cmp	r3, #255	@ 0xff
 801a9ee:	d802      	bhi.n	801a9f6 <ip4addr_aton+0x1ca>
 801a9f0:	693b      	ldr	r3, [r7, #16]
 801a9f2:	2bff      	cmp	r3, #255	@ 0xff
 801a9f4:	d901      	bls.n	801a9fa <ip4addr_aton+0x1ce>
        return 0;
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	e036      	b.n	801aa68 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	061a      	lsls	r2, r3, #24
 801a9fe:	693b      	ldr	r3, [r7, #16]
 801aa00:	041b      	lsls	r3, r3, #16
 801aa02:	4313      	orrs	r3, r2
 801aa04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aa06:	4313      	orrs	r3, r2
 801aa08:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801aa0a:	e023      	b.n	801aa54 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801aa0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa0e:	2bff      	cmp	r3, #255	@ 0xff
 801aa10:	d901      	bls.n	801aa16 <ip4addr_aton+0x1ea>
        return 0;
 801aa12:	2300      	movs	r3, #0
 801aa14:	e028      	b.n	801aa68 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	2bff      	cmp	r3, #255	@ 0xff
 801aa1a:	d805      	bhi.n	801aa28 <ip4addr_aton+0x1fc>
 801aa1c:	693b      	ldr	r3, [r7, #16]
 801aa1e:	2bff      	cmp	r3, #255	@ 0xff
 801aa20:	d802      	bhi.n	801aa28 <ip4addr_aton+0x1fc>
 801aa22:	697b      	ldr	r3, [r7, #20]
 801aa24:	2bff      	cmp	r3, #255	@ 0xff
 801aa26:	d901      	bls.n	801aa2c <ip4addr_aton+0x200>
        return 0;
 801aa28:	2300      	movs	r3, #0
 801aa2a:	e01d      	b.n	801aa68 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	061a      	lsls	r2, r3, #24
 801aa30:	693b      	ldr	r3, [r7, #16]
 801aa32:	041b      	lsls	r3, r3, #16
 801aa34:	431a      	orrs	r2, r3
 801aa36:	697b      	ldr	r3, [r7, #20]
 801aa38:	021b      	lsls	r3, r3, #8
 801aa3a:	4313      	orrs	r3, r2
 801aa3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aa3e:	4313      	orrs	r3, r2
 801aa40:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801aa42:	e007      	b.n	801aa54 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801aa44:	4b0b      	ldr	r3, [pc, #44]	@ (801aa74 <ip4addr_aton+0x248>)
 801aa46:	22f9      	movs	r2, #249	@ 0xf9
 801aa48:	490b      	ldr	r1, [pc, #44]	@ (801aa78 <ip4addr_aton+0x24c>)
 801aa4a:	480c      	ldr	r0, [pc, #48]	@ (801aa7c <ip4addr_aton+0x250>)
 801aa4c:	f00e fc6a 	bl	8029324 <iprintf>
      break;
 801aa50:	e000      	b.n	801aa54 <ip4addr_aton+0x228>
      break;
 801aa52:	bf00      	nop
  }
  if (addr) {
 801aa54:	683b      	ldr	r3, [r7, #0]
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d005      	beq.n	801aa66 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801aa5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801aa5c:	f7f4 ffaf 	bl	800f9be <lwip_htonl>
 801aa60:	4602      	mov	r2, r0
 801aa62:	683b      	ldr	r3, [r7, #0]
 801aa64:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801aa66:	2301      	movs	r3, #1
}
 801aa68:	4618      	mov	r0, r3
 801aa6a:	3728      	adds	r7, #40	@ 0x28
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	bd80      	pop	{r7, pc}
 801aa70:	080301cd 	.word	0x080301cd
 801aa74:	0802f004 	.word	0x0802f004
 801aa78:	0802f040 	.word	0x0802f040
 801aa7c:	0802f04c 	.word	0x0802f04c

0801aa80 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801aa80:	b580      	push	{r7, lr}
 801aa82:	b084      	sub	sp, #16
 801aa84:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801aa86:	2300      	movs	r3, #0
 801aa88:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801aa8a:	4b12      	ldr	r3, [pc, #72]	@ (801aad4 <ip_reass_tmr+0x54>)
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801aa90:	e018      	b.n	801aac4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	7fdb      	ldrb	r3, [r3, #31]
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	d00b      	beq.n	801aab2 <ip_reass_tmr+0x32>
      r->timer--;
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	7fdb      	ldrb	r3, [r3, #31]
 801aa9e:	3b01      	subs	r3, #1
 801aaa0:	b2da      	uxtb	r2, r3
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	60fb      	str	r3, [r7, #12]
 801aab0:	e008      	b.n	801aac4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801aabc:	68b9      	ldr	r1, [r7, #8]
 801aabe:	6878      	ldr	r0, [r7, #4]
 801aac0:	f000 f80a 	bl	801aad8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d1e3      	bne.n	801aa92 <ip_reass_tmr+0x12>
    }
  }
}
 801aaca:	bf00      	nop
 801aacc:	bf00      	nop
 801aace:	3710      	adds	r7, #16
 801aad0:	46bd      	mov	sp, r7
 801aad2:	bd80      	pop	{r7, pc}
 801aad4:	20042718 	.word	0x20042718

0801aad8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b088      	sub	sp, #32
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
 801aae0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801aae2:	2300      	movs	r3, #0
 801aae4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801aae6:	683a      	ldr	r2, [r7, #0]
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	429a      	cmp	r2, r3
 801aaec:	d105      	bne.n	801aafa <ip_reass_free_complete_datagram+0x22>
 801aaee:	4b45      	ldr	r3, [pc, #276]	@ (801ac04 <ip_reass_free_complete_datagram+0x12c>)
 801aaf0:	22ab      	movs	r2, #171	@ 0xab
 801aaf2:	4945      	ldr	r1, [pc, #276]	@ (801ac08 <ip_reass_free_complete_datagram+0x130>)
 801aaf4:	4845      	ldr	r0, [pc, #276]	@ (801ac0c <ip_reass_free_complete_datagram+0x134>)
 801aaf6:	f00e fc15 	bl	8029324 <iprintf>
  if (prev != NULL) {
 801aafa:	683b      	ldr	r3, [r7, #0]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d00a      	beq.n	801ab16 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801ab00:	683b      	ldr	r3, [r7, #0]
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	687a      	ldr	r2, [r7, #4]
 801ab06:	429a      	cmp	r2, r3
 801ab08:	d005      	beq.n	801ab16 <ip_reass_free_complete_datagram+0x3e>
 801ab0a:	4b3e      	ldr	r3, [pc, #248]	@ (801ac04 <ip_reass_free_complete_datagram+0x12c>)
 801ab0c:	22ad      	movs	r2, #173	@ 0xad
 801ab0e:	4940      	ldr	r1, [pc, #256]	@ (801ac10 <ip_reass_free_complete_datagram+0x138>)
 801ab10:	483e      	ldr	r0, [pc, #248]	@ (801ac0c <ip_reass_free_complete_datagram+0x134>)
 801ab12:	f00e fc07 	bl	8029324 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	685b      	ldr	r3, [r3, #4]
 801ab1a:	685b      	ldr	r3, [r3, #4]
 801ab1c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ab1e:	697b      	ldr	r3, [r7, #20]
 801ab20:	889b      	ldrh	r3, [r3, #4]
 801ab22:	b29b      	uxth	r3, r3
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d12a      	bne.n	801ab7e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	685b      	ldr	r3, [r3, #4]
 801ab2c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ab2e:	697b      	ldr	r3, [r7, #20]
 801ab30:	681a      	ldr	r2, [r3, #0]
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ab36:	69bb      	ldr	r3, [r7, #24]
 801ab38:	6858      	ldr	r0, [r3, #4]
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	3308      	adds	r3, #8
 801ab3e:	2214      	movs	r2, #20
 801ab40:	4619      	mov	r1, r3
 801ab42:	f00e fe92 	bl	802986a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ab46:	2101      	movs	r1, #1
 801ab48:	69b8      	ldr	r0, [r7, #24]
 801ab4a:	f7fe fdbf 	bl	80196cc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801ab4e:	69b8      	ldr	r0, [r7, #24]
 801ab50:	f7f6 fca8 	bl	80114a4 <pbuf_clen>
 801ab54:	4603      	mov	r3, r0
 801ab56:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ab58:	8bfa      	ldrh	r2, [r7, #30]
 801ab5a:	8a7b      	ldrh	r3, [r7, #18]
 801ab5c:	4413      	add	r3, r2
 801ab5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ab62:	db05      	blt.n	801ab70 <ip_reass_free_complete_datagram+0x98>
 801ab64:	4b27      	ldr	r3, [pc, #156]	@ (801ac04 <ip_reass_free_complete_datagram+0x12c>)
 801ab66:	22bc      	movs	r2, #188	@ 0xbc
 801ab68:	492a      	ldr	r1, [pc, #168]	@ (801ac14 <ip_reass_free_complete_datagram+0x13c>)
 801ab6a:	4828      	ldr	r0, [pc, #160]	@ (801ac0c <ip_reass_free_complete_datagram+0x134>)
 801ab6c:	f00e fbda 	bl	8029324 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ab70:	8bfa      	ldrh	r2, [r7, #30]
 801ab72:	8a7b      	ldrh	r3, [r7, #18]
 801ab74:	4413      	add	r3, r2
 801ab76:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ab78:	69b8      	ldr	r0, [r7, #24]
 801ab7a:	f7f6 fc05 	bl	8011388 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	685b      	ldr	r3, [r3, #4]
 801ab82:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ab84:	e01f      	b.n	801abc6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ab86:	69bb      	ldr	r3, [r7, #24]
 801ab88:	685b      	ldr	r3, [r3, #4]
 801ab8a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801ab8c:	69bb      	ldr	r3, [r7, #24]
 801ab8e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801ab90:	697b      	ldr	r3, [r7, #20]
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ab96:	68f8      	ldr	r0, [r7, #12]
 801ab98:	f7f6 fc84 	bl	80114a4 <pbuf_clen>
 801ab9c:	4603      	mov	r3, r0
 801ab9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801aba0:	8bfa      	ldrh	r2, [r7, #30]
 801aba2:	8a7b      	ldrh	r3, [r7, #18]
 801aba4:	4413      	add	r3, r2
 801aba6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801abaa:	db05      	blt.n	801abb8 <ip_reass_free_complete_datagram+0xe0>
 801abac:	4b15      	ldr	r3, [pc, #84]	@ (801ac04 <ip_reass_free_complete_datagram+0x12c>)
 801abae:	22cc      	movs	r2, #204	@ 0xcc
 801abb0:	4918      	ldr	r1, [pc, #96]	@ (801ac14 <ip_reass_free_complete_datagram+0x13c>)
 801abb2:	4816      	ldr	r0, [pc, #88]	@ (801ac0c <ip_reass_free_complete_datagram+0x134>)
 801abb4:	f00e fbb6 	bl	8029324 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801abb8:	8bfa      	ldrh	r2, [r7, #30]
 801abba:	8a7b      	ldrh	r3, [r7, #18]
 801abbc:	4413      	add	r3, r2
 801abbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801abc0:	68f8      	ldr	r0, [r7, #12]
 801abc2:	f7f6 fbe1 	bl	8011388 <pbuf_free>
  while (p != NULL) {
 801abc6:	69bb      	ldr	r3, [r7, #24]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d1dc      	bne.n	801ab86 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801abcc:	6839      	ldr	r1, [r7, #0]
 801abce:	6878      	ldr	r0, [r7, #4]
 801abd0:	f000 f8c2 	bl	801ad58 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801abd4:	4b10      	ldr	r3, [pc, #64]	@ (801ac18 <ip_reass_free_complete_datagram+0x140>)
 801abd6:	881b      	ldrh	r3, [r3, #0]
 801abd8:	8bfa      	ldrh	r2, [r7, #30]
 801abda:	429a      	cmp	r2, r3
 801abdc:	d905      	bls.n	801abea <ip_reass_free_complete_datagram+0x112>
 801abde:	4b09      	ldr	r3, [pc, #36]	@ (801ac04 <ip_reass_free_complete_datagram+0x12c>)
 801abe0:	22d2      	movs	r2, #210	@ 0xd2
 801abe2:	490e      	ldr	r1, [pc, #56]	@ (801ac1c <ip_reass_free_complete_datagram+0x144>)
 801abe4:	4809      	ldr	r0, [pc, #36]	@ (801ac0c <ip_reass_free_complete_datagram+0x134>)
 801abe6:	f00e fb9d 	bl	8029324 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801abea:	4b0b      	ldr	r3, [pc, #44]	@ (801ac18 <ip_reass_free_complete_datagram+0x140>)
 801abec:	881a      	ldrh	r2, [r3, #0]
 801abee:	8bfb      	ldrh	r3, [r7, #30]
 801abf0:	1ad3      	subs	r3, r2, r3
 801abf2:	b29a      	uxth	r2, r3
 801abf4:	4b08      	ldr	r3, [pc, #32]	@ (801ac18 <ip_reass_free_complete_datagram+0x140>)
 801abf6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801abf8:	8bfb      	ldrh	r3, [r7, #30]
}
 801abfa:	4618      	mov	r0, r3
 801abfc:	3720      	adds	r7, #32
 801abfe:	46bd      	mov	sp, r7
 801ac00:	bd80      	pop	{r7, pc}
 801ac02:	bf00      	nop
 801ac04:	0802f074 	.word	0x0802f074
 801ac08:	0802f0b0 	.word	0x0802f0b0
 801ac0c:	0802f0bc 	.word	0x0802f0bc
 801ac10:	0802f0e4 	.word	0x0802f0e4
 801ac14:	0802f0f8 	.word	0x0802f0f8
 801ac18:	2004271c 	.word	0x2004271c
 801ac1c:	0802f118 	.word	0x0802f118

0801ac20 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b08a      	sub	sp, #40	@ 0x28
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	6078      	str	r0, [r7, #4]
 801ac28:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ac2e:	2300      	movs	r3, #0
 801ac30:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ac32:	2300      	movs	r3, #0
 801ac34:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ac36:	2300      	movs	r3, #0
 801ac38:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ac3e:	4b28      	ldr	r3, [pc, #160]	@ (801ace0 <ip_reass_remove_oldest_datagram+0xc0>)
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801ac44:	e030      	b.n	801aca8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ac46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac48:	695a      	ldr	r2, [r3, #20]
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	68db      	ldr	r3, [r3, #12]
 801ac4e:	429a      	cmp	r2, r3
 801ac50:	d10c      	bne.n	801ac6c <ip_reass_remove_oldest_datagram+0x4c>
 801ac52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac54:	699a      	ldr	r2, [r3, #24]
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	691b      	ldr	r3, [r3, #16]
 801ac5a:	429a      	cmp	r2, r3
 801ac5c:	d106      	bne.n	801ac6c <ip_reass_remove_oldest_datagram+0x4c>
 801ac5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac60:	899a      	ldrh	r2, [r3, #12]
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	889b      	ldrh	r3, [r3, #4]
 801ac66:	b29b      	uxth	r3, r3
 801ac68:	429a      	cmp	r2, r3
 801ac6a:	d014      	beq.n	801ac96 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ac6c:	693b      	ldr	r3, [r7, #16]
 801ac6e:	3301      	adds	r3, #1
 801ac70:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ac72:	6a3b      	ldr	r3, [r7, #32]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d104      	bne.n	801ac82 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ac78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac7a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ac7c:	69fb      	ldr	r3, [r7, #28]
 801ac7e:	61bb      	str	r3, [r7, #24]
 801ac80:	e009      	b.n	801ac96 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ac82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac84:	7fda      	ldrb	r2, [r3, #31]
 801ac86:	6a3b      	ldr	r3, [r7, #32]
 801ac88:	7fdb      	ldrb	r3, [r3, #31]
 801ac8a:	429a      	cmp	r2, r3
 801ac8c:	d803      	bhi.n	801ac96 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ac8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac90:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ac92:	69fb      	ldr	r3, [r7, #28]
 801ac94:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ac96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d001      	beq.n	801aca2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ac9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aca0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801aca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801aca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d1cb      	bne.n	801ac46 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801acae:	6a3b      	ldr	r3, [r7, #32]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d008      	beq.n	801acc6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801acb4:	69b9      	ldr	r1, [r7, #24]
 801acb6:	6a38      	ldr	r0, [r7, #32]
 801acb8:	f7ff ff0e 	bl	801aad8 <ip_reass_free_complete_datagram>
 801acbc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801acbe:	697a      	ldr	r2, [r7, #20]
 801acc0:	68fb      	ldr	r3, [r7, #12]
 801acc2:	4413      	add	r3, r2
 801acc4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801acc6:	697a      	ldr	r2, [r7, #20]
 801acc8:	683b      	ldr	r3, [r7, #0]
 801acca:	429a      	cmp	r2, r3
 801accc:	da02      	bge.n	801acd4 <ip_reass_remove_oldest_datagram+0xb4>
 801acce:	693b      	ldr	r3, [r7, #16]
 801acd0:	2b01      	cmp	r3, #1
 801acd2:	dcac      	bgt.n	801ac2e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801acd4:	697b      	ldr	r3, [r7, #20]
}
 801acd6:	4618      	mov	r0, r3
 801acd8:	3728      	adds	r7, #40	@ 0x28
 801acda:	46bd      	mov	sp, r7
 801acdc:	bd80      	pop	{r7, pc}
 801acde:	bf00      	nop
 801ace0:	20042718 	.word	0x20042718

0801ace4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ace4:	b580      	push	{r7, lr}
 801ace6:	b084      	sub	sp, #16
 801ace8:	af00      	add	r7, sp, #0
 801acea:	6078      	str	r0, [r7, #4]
 801acec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801acee:	2004      	movs	r0, #4
 801acf0:	f7f5 fba8 	bl	8010444 <memp_malloc>
 801acf4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d110      	bne.n	801ad1e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801acfc:	6839      	ldr	r1, [r7, #0]
 801acfe:	6878      	ldr	r0, [r7, #4]
 801ad00:	f7ff ff8e 	bl	801ac20 <ip_reass_remove_oldest_datagram>
 801ad04:	4602      	mov	r2, r0
 801ad06:	683b      	ldr	r3, [r7, #0]
 801ad08:	4293      	cmp	r3, r2
 801ad0a:	dc03      	bgt.n	801ad14 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ad0c:	2004      	movs	r0, #4
 801ad0e:	f7f5 fb99 	bl	8010444 <memp_malloc>
 801ad12:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ad14:	68fb      	ldr	r3, [r7, #12]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d101      	bne.n	801ad1e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801ad1a:	2300      	movs	r3, #0
 801ad1c:	e016      	b.n	801ad4c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ad1e:	2220      	movs	r2, #32
 801ad20:	2100      	movs	r1, #0
 801ad22:	68f8      	ldr	r0, [r7, #12]
 801ad24:	f00e fc7e 	bl	8029624 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	220f      	movs	r2, #15
 801ad2c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ad2e:	4b09      	ldr	r3, [pc, #36]	@ (801ad54 <ip_reass_enqueue_new_datagram+0x70>)
 801ad30:	681a      	ldr	r2, [r3, #0]
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ad36:	4a07      	ldr	r2, [pc, #28]	@ (801ad54 <ip_reass_enqueue_new_datagram+0x70>)
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ad3c:	68fb      	ldr	r3, [r7, #12]
 801ad3e:	3308      	adds	r3, #8
 801ad40:	2214      	movs	r2, #20
 801ad42:	6879      	ldr	r1, [r7, #4]
 801ad44:	4618      	mov	r0, r3
 801ad46:	f00e fd90 	bl	802986a <memcpy>
  return ipr;
 801ad4a:	68fb      	ldr	r3, [r7, #12]
}
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	3710      	adds	r7, #16
 801ad50:	46bd      	mov	sp, r7
 801ad52:	bd80      	pop	{r7, pc}
 801ad54:	20042718 	.word	0x20042718

0801ad58 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	b082      	sub	sp, #8
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	6078      	str	r0, [r7, #4]
 801ad60:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801ad62:	4b10      	ldr	r3, [pc, #64]	@ (801ada4 <ip_reass_dequeue_datagram+0x4c>)
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	687a      	ldr	r2, [r7, #4]
 801ad68:	429a      	cmp	r2, r3
 801ad6a:	d104      	bne.n	801ad76 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	4a0c      	ldr	r2, [pc, #48]	@ (801ada4 <ip_reass_dequeue_datagram+0x4c>)
 801ad72:	6013      	str	r3, [r2, #0]
 801ad74:	e00d      	b.n	801ad92 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801ad76:	683b      	ldr	r3, [r7, #0]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d106      	bne.n	801ad8a <ip_reass_dequeue_datagram+0x32>
 801ad7c:	4b0a      	ldr	r3, [pc, #40]	@ (801ada8 <ip_reass_dequeue_datagram+0x50>)
 801ad7e:	f240 1245 	movw	r2, #325	@ 0x145
 801ad82:	490a      	ldr	r1, [pc, #40]	@ (801adac <ip_reass_dequeue_datagram+0x54>)
 801ad84:	480a      	ldr	r0, [pc, #40]	@ (801adb0 <ip_reass_dequeue_datagram+0x58>)
 801ad86:	f00e facd 	bl	8029324 <iprintf>
    prev->next = ipr->next;
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	681a      	ldr	r2, [r3, #0]
 801ad8e:	683b      	ldr	r3, [r7, #0]
 801ad90:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801ad92:	6879      	ldr	r1, [r7, #4]
 801ad94:	2004      	movs	r0, #4
 801ad96:	f7f5 fbcb 	bl	8010530 <memp_free>
}
 801ad9a:	bf00      	nop
 801ad9c:	3708      	adds	r7, #8
 801ad9e:	46bd      	mov	sp, r7
 801ada0:	bd80      	pop	{r7, pc}
 801ada2:	bf00      	nop
 801ada4:	20042718 	.word	0x20042718
 801ada8:	0802f074 	.word	0x0802f074
 801adac:	0802f13c 	.word	0x0802f13c
 801adb0:	0802f0bc 	.word	0x0802f0bc

0801adb4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801adb4:	b580      	push	{r7, lr}
 801adb6:	b08c      	sub	sp, #48	@ 0x30
 801adb8:	af00      	add	r7, sp, #0
 801adba:	60f8      	str	r0, [r7, #12]
 801adbc:	60b9      	str	r1, [r7, #8]
 801adbe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801adc0:	2300      	movs	r3, #0
 801adc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801adc4:	2301      	movs	r3, #1
 801adc6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801adc8:	68bb      	ldr	r3, [r7, #8]
 801adca:	685b      	ldr	r3, [r3, #4]
 801adcc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801adce:	69fb      	ldr	r3, [r7, #28]
 801add0:	885b      	ldrh	r3, [r3, #2]
 801add2:	b29b      	uxth	r3, r3
 801add4:	4618      	mov	r0, r3
 801add6:	f7f4 fddd 	bl	800f994 <lwip_htons>
 801adda:	4603      	mov	r3, r0
 801addc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801adde:	69fb      	ldr	r3, [r7, #28]
 801ade0:	781b      	ldrb	r3, [r3, #0]
 801ade2:	f003 030f 	and.w	r3, r3, #15
 801ade6:	b2db      	uxtb	r3, r3
 801ade8:	009b      	lsls	r3, r3, #2
 801adea:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801adec:	7e7b      	ldrb	r3, [r7, #25]
 801adee:	b29b      	uxth	r3, r3
 801adf0:	8b7a      	ldrh	r2, [r7, #26]
 801adf2:	429a      	cmp	r2, r3
 801adf4:	d202      	bcs.n	801adfc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801adf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801adfa:	e135      	b.n	801b068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801adfc:	7e7b      	ldrb	r3, [r7, #25]
 801adfe:	b29b      	uxth	r3, r3
 801ae00:	8b7a      	ldrh	r2, [r7, #26]
 801ae02:	1ad3      	subs	r3, r2, r3
 801ae04:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ae06:	69fb      	ldr	r3, [r7, #28]
 801ae08:	88db      	ldrh	r3, [r3, #6]
 801ae0a:	b29b      	uxth	r3, r3
 801ae0c:	4618      	mov	r0, r3
 801ae0e:	f7f4 fdc1 	bl	800f994 <lwip_htons>
 801ae12:	4603      	mov	r3, r0
 801ae14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ae18:	b29b      	uxth	r3, r3
 801ae1a:	00db      	lsls	r3, r3, #3
 801ae1c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ae1e:	68bb      	ldr	r3, [r7, #8]
 801ae20:	685b      	ldr	r3, [r3, #4]
 801ae22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801ae24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae26:	2200      	movs	r2, #0
 801ae28:	701a      	strb	r2, [r3, #0]
 801ae2a:	2200      	movs	r2, #0
 801ae2c:	705a      	strb	r2, [r3, #1]
 801ae2e:	2200      	movs	r2, #0
 801ae30:	709a      	strb	r2, [r3, #2]
 801ae32:	2200      	movs	r2, #0
 801ae34:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ae36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae38:	8afa      	ldrh	r2, [r7, #22]
 801ae3a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801ae3c:	8afa      	ldrh	r2, [r7, #22]
 801ae3e:	8b7b      	ldrh	r3, [r7, #26]
 801ae40:	4413      	add	r3, r2
 801ae42:	b29a      	uxth	r2, r3
 801ae44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae46:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ae48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae4a:	88db      	ldrh	r3, [r3, #6]
 801ae4c:	b29b      	uxth	r3, r3
 801ae4e:	8afa      	ldrh	r2, [r7, #22]
 801ae50:	429a      	cmp	r2, r3
 801ae52:	d902      	bls.n	801ae5a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ae54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ae58:	e106      	b.n	801b068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	685b      	ldr	r3, [r3, #4]
 801ae5e:	627b      	str	r3, [r7, #36]	@ 0x24
 801ae60:	e068      	b.n	801af34 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801ae62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae64:	685b      	ldr	r3, [r3, #4]
 801ae66:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801ae68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae6a:	889b      	ldrh	r3, [r3, #4]
 801ae6c:	b29a      	uxth	r2, r3
 801ae6e:	693b      	ldr	r3, [r7, #16]
 801ae70:	889b      	ldrh	r3, [r3, #4]
 801ae72:	b29b      	uxth	r3, r3
 801ae74:	429a      	cmp	r2, r3
 801ae76:	d235      	bcs.n	801aee4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801ae78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ae7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801ae7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d020      	beq.n	801aec6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801ae84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae86:	889b      	ldrh	r3, [r3, #4]
 801ae88:	b29a      	uxth	r2, r3
 801ae8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae8c:	88db      	ldrh	r3, [r3, #6]
 801ae8e:	b29b      	uxth	r3, r3
 801ae90:	429a      	cmp	r2, r3
 801ae92:	d307      	bcc.n	801aea4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801ae94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae96:	88db      	ldrh	r3, [r3, #6]
 801ae98:	b29a      	uxth	r2, r3
 801ae9a:	693b      	ldr	r3, [r7, #16]
 801ae9c:	889b      	ldrh	r3, [r3, #4]
 801ae9e:	b29b      	uxth	r3, r3
 801aea0:	429a      	cmp	r2, r3
 801aea2:	d902      	bls.n	801aeaa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aea4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801aea8:	e0de      	b.n	801b068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801aeaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aeac:	68ba      	ldr	r2, [r7, #8]
 801aeae:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801aeb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aeb2:	88db      	ldrh	r3, [r3, #6]
 801aeb4:	b29a      	uxth	r2, r3
 801aeb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aeb8:	889b      	ldrh	r3, [r3, #4]
 801aeba:	b29b      	uxth	r3, r3
 801aebc:	429a      	cmp	r2, r3
 801aebe:	d03d      	beq.n	801af3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801aec0:	2300      	movs	r3, #0
 801aec2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801aec4:	e03a      	b.n	801af3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801aec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aec8:	88db      	ldrh	r3, [r3, #6]
 801aeca:	b29a      	uxth	r2, r3
 801aecc:	693b      	ldr	r3, [r7, #16]
 801aece:	889b      	ldrh	r3, [r3, #4]
 801aed0:	b29b      	uxth	r3, r3
 801aed2:	429a      	cmp	r2, r3
 801aed4:	d902      	bls.n	801aedc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801aeda:	e0c5      	b.n	801b068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	68ba      	ldr	r2, [r7, #8]
 801aee0:	605a      	str	r2, [r3, #4]
      break;
 801aee2:	e02b      	b.n	801af3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801aee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aee6:	889b      	ldrh	r3, [r3, #4]
 801aee8:	b29a      	uxth	r2, r3
 801aeea:	693b      	ldr	r3, [r7, #16]
 801aeec:	889b      	ldrh	r3, [r3, #4]
 801aeee:	b29b      	uxth	r3, r3
 801aef0:	429a      	cmp	r2, r3
 801aef2:	d102      	bne.n	801aefa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aef4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801aef8:	e0b6      	b.n	801b068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801aefa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aefc:	889b      	ldrh	r3, [r3, #4]
 801aefe:	b29a      	uxth	r2, r3
 801af00:	693b      	ldr	r3, [r7, #16]
 801af02:	88db      	ldrh	r3, [r3, #6]
 801af04:	b29b      	uxth	r3, r3
 801af06:	429a      	cmp	r2, r3
 801af08:	d202      	bcs.n	801af10 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801af0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801af0e:	e0ab      	b.n	801b068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801af10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af12:	2b00      	cmp	r3, #0
 801af14:	d009      	beq.n	801af2a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801af16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af18:	88db      	ldrh	r3, [r3, #6]
 801af1a:	b29a      	uxth	r2, r3
 801af1c:	693b      	ldr	r3, [r7, #16]
 801af1e:	889b      	ldrh	r3, [r3, #4]
 801af20:	b29b      	uxth	r3, r3
 801af22:	429a      	cmp	r2, r3
 801af24:	d001      	beq.n	801af2a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801af26:	2300      	movs	r3, #0
 801af28:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801af2a:	693b      	ldr	r3, [r7, #16]
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801af30:	693b      	ldr	r3, [r7, #16]
 801af32:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801af34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af36:	2b00      	cmp	r3, #0
 801af38:	d193      	bne.n	801ae62 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801af3a:	e000      	b.n	801af3e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801af3c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801af3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af40:	2b00      	cmp	r3, #0
 801af42:	d12d      	bne.n	801afa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801af44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af46:	2b00      	cmp	r3, #0
 801af48:	d01c      	beq.n	801af84 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801af4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af4c:	88db      	ldrh	r3, [r3, #6]
 801af4e:	b29a      	uxth	r2, r3
 801af50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af52:	889b      	ldrh	r3, [r3, #4]
 801af54:	b29b      	uxth	r3, r3
 801af56:	429a      	cmp	r2, r3
 801af58:	d906      	bls.n	801af68 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801af5a:	4b45      	ldr	r3, [pc, #276]	@ (801b070 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801af5c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801af60:	4944      	ldr	r1, [pc, #272]	@ (801b074 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801af62:	4845      	ldr	r0, [pc, #276]	@ (801b078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801af64:	f00e f9de 	bl	8029324 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801af68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af6a:	68ba      	ldr	r2, [r7, #8]
 801af6c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801af6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af70:	88db      	ldrh	r3, [r3, #6]
 801af72:	b29a      	uxth	r2, r3
 801af74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af76:	889b      	ldrh	r3, [r3, #4]
 801af78:	b29b      	uxth	r3, r3
 801af7a:	429a      	cmp	r2, r3
 801af7c:	d010      	beq.n	801afa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801af7e:	2300      	movs	r3, #0
 801af80:	623b      	str	r3, [r7, #32]
 801af82:	e00d      	b.n	801afa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	685b      	ldr	r3, [r3, #4]
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d006      	beq.n	801af9a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801af8c:	4b38      	ldr	r3, [pc, #224]	@ (801b070 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801af8e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801af92:	493a      	ldr	r1, [pc, #232]	@ (801b07c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801af94:	4838      	ldr	r0, [pc, #224]	@ (801b078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801af96:	f00e f9c5 	bl	8029324 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	68ba      	ldr	r2, [r7, #8]
 801af9e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d105      	bne.n	801afb2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	7f9b      	ldrb	r3, [r3, #30]
 801afaa:	f003 0301 	and.w	r3, r3, #1
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d059      	beq.n	801b066 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801afb2:	6a3b      	ldr	r3, [r7, #32]
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d04f      	beq.n	801b058 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	685b      	ldr	r3, [r3, #4]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d006      	beq.n	801afce <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	685b      	ldr	r3, [r3, #4]
 801afc4:	685b      	ldr	r3, [r3, #4]
 801afc6:	889b      	ldrh	r3, [r3, #4]
 801afc8:	b29b      	uxth	r3, r3
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d002      	beq.n	801afd4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801afce:	2300      	movs	r3, #0
 801afd0:	623b      	str	r3, [r7, #32]
 801afd2:	e041      	b.n	801b058 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801afd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afd6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801afd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801afde:	e012      	b.n	801b006 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801afe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afe2:	685b      	ldr	r3, [r3, #4]
 801afe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801afe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801afe8:	88db      	ldrh	r3, [r3, #6]
 801afea:	b29a      	uxth	r2, r3
 801afec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afee:	889b      	ldrh	r3, [r3, #4]
 801aff0:	b29b      	uxth	r3, r3
 801aff2:	429a      	cmp	r2, r3
 801aff4:	d002      	beq.n	801affc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801aff6:	2300      	movs	r3, #0
 801aff8:	623b      	str	r3, [r7, #32]
            break;
 801affa:	e007      	b.n	801b00c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801affc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801affe:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801b000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b002:	681b      	ldr	r3, [r3, #0]
 801b004:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d1e9      	bne.n	801afe0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b00c:	6a3b      	ldr	r3, [r7, #32]
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d022      	beq.n	801b058 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	685b      	ldr	r3, [r3, #4]
 801b016:	2b00      	cmp	r3, #0
 801b018:	d106      	bne.n	801b028 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801b01a:	4b15      	ldr	r3, [pc, #84]	@ (801b070 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b01c:	f240 12df 	movw	r2, #479	@ 0x1df
 801b020:	4917      	ldr	r1, [pc, #92]	@ (801b080 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b022:	4815      	ldr	r0, [pc, #84]	@ (801b078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b024:	f00e f97e 	bl	8029324 <iprintf>
          LWIP_ASSERT("sanity check",
 801b028:	68fb      	ldr	r3, [r7, #12]
 801b02a:	685b      	ldr	r3, [r3, #4]
 801b02c:	685b      	ldr	r3, [r3, #4]
 801b02e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b030:	429a      	cmp	r2, r3
 801b032:	d106      	bne.n	801b042 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801b034:	4b0e      	ldr	r3, [pc, #56]	@ (801b070 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b036:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801b03a:	4911      	ldr	r1, [pc, #68]	@ (801b080 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b03c:	480e      	ldr	r0, [pc, #56]	@ (801b078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b03e:	f00e f971 	bl	8029324 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d006      	beq.n	801b058 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801b04a:	4b09      	ldr	r3, [pc, #36]	@ (801b070 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b04c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801b050:	490c      	ldr	r1, [pc, #48]	@ (801b084 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801b052:	4809      	ldr	r0, [pc, #36]	@ (801b078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b054:	f00e f966 	bl	8029324 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b058:	6a3b      	ldr	r3, [r7, #32]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	bf14      	ite	ne
 801b05e:	2301      	movne	r3, #1
 801b060:	2300      	moveq	r3, #0
 801b062:	b2db      	uxtb	r3, r3
 801b064:	e000      	b.n	801b068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b066:	2300      	movs	r3, #0
}
 801b068:	4618      	mov	r0, r3
 801b06a:	3730      	adds	r7, #48	@ 0x30
 801b06c:	46bd      	mov	sp, r7
 801b06e:	bd80      	pop	{r7, pc}
 801b070:	0802f074 	.word	0x0802f074
 801b074:	0802f158 	.word	0x0802f158
 801b078:	0802f0bc 	.word	0x0802f0bc
 801b07c:	0802f178 	.word	0x0802f178
 801b080:	0802f1b0 	.word	0x0802f1b0
 801b084:	0802f1c0 	.word	0x0802f1c0

0801b088 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b088:	b580      	push	{r7, lr}
 801b08a:	b08e      	sub	sp, #56	@ 0x38
 801b08c:	af00      	add	r7, sp, #0
 801b08e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	685b      	ldr	r3, [r3, #4]
 801b094:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801b096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b098:	781b      	ldrb	r3, [r3, #0]
 801b09a:	f003 030f 	and.w	r3, r3, #15
 801b09e:	b2db      	uxtb	r3, r3
 801b0a0:	009b      	lsls	r3, r3, #2
 801b0a2:	b2db      	uxtb	r3, r3
 801b0a4:	2b14      	cmp	r3, #20
 801b0a6:	f040 8171 	bne.w	801b38c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801b0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0ac:	88db      	ldrh	r3, [r3, #6]
 801b0ae:	b29b      	uxth	r3, r3
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	f7f4 fc6f 	bl	800f994 <lwip_htons>
 801b0b6:	4603      	mov	r3, r0
 801b0b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b0bc:	b29b      	uxth	r3, r3
 801b0be:	00db      	lsls	r3, r3, #3
 801b0c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0c4:	885b      	ldrh	r3, [r3, #2]
 801b0c6:	b29b      	uxth	r3, r3
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f7f4 fc63 	bl	800f994 <lwip_htons>
 801b0ce:	4603      	mov	r3, r0
 801b0d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801b0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0d4:	781b      	ldrb	r3, [r3, #0]
 801b0d6:	f003 030f 	and.w	r3, r3, #15
 801b0da:	b2db      	uxtb	r3, r3
 801b0dc:	009b      	lsls	r3, r3, #2
 801b0de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801b0e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b0e6:	b29b      	uxth	r3, r3
 801b0e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801b0ea:	429a      	cmp	r2, r3
 801b0ec:	f0c0 8150 	bcc.w	801b390 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801b0f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b0f4:	b29b      	uxth	r3, r3
 801b0f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801b0f8:	1ad3      	subs	r3, r2, r3
 801b0fa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b0fc:	6878      	ldr	r0, [r7, #4]
 801b0fe:	f7f6 f9d1 	bl	80114a4 <pbuf_clen>
 801b102:	4603      	mov	r3, r0
 801b104:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b106:	4b8c      	ldr	r3, [pc, #560]	@ (801b338 <ip4_reass+0x2b0>)
 801b108:	881b      	ldrh	r3, [r3, #0]
 801b10a:	461a      	mov	r2, r3
 801b10c:	8c3b      	ldrh	r3, [r7, #32]
 801b10e:	4413      	add	r3, r2
 801b110:	2b0a      	cmp	r3, #10
 801b112:	dd10      	ble.n	801b136 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b114:	8c3b      	ldrh	r3, [r7, #32]
 801b116:	4619      	mov	r1, r3
 801b118:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b11a:	f7ff fd81 	bl	801ac20 <ip_reass_remove_oldest_datagram>
 801b11e:	4603      	mov	r3, r0
 801b120:	2b00      	cmp	r3, #0
 801b122:	f000 8137 	beq.w	801b394 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b126:	4b84      	ldr	r3, [pc, #528]	@ (801b338 <ip4_reass+0x2b0>)
 801b128:	881b      	ldrh	r3, [r3, #0]
 801b12a:	461a      	mov	r2, r3
 801b12c:	8c3b      	ldrh	r3, [r7, #32]
 801b12e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b130:	2b0a      	cmp	r3, #10
 801b132:	f300 812f 	bgt.w	801b394 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b136:	4b81      	ldr	r3, [pc, #516]	@ (801b33c <ip4_reass+0x2b4>)
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	633b      	str	r3, [r7, #48]	@ 0x30
 801b13c:	e015      	b.n	801b16a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b140:	695a      	ldr	r2, [r3, #20]
 801b142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b144:	68db      	ldr	r3, [r3, #12]
 801b146:	429a      	cmp	r2, r3
 801b148:	d10c      	bne.n	801b164 <ip4_reass+0xdc>
 801b14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b14c:	699a      	ldr	r2, [r3, #24]
 801b14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b150:	691b      	ldr	r3, [r3, #16]
 801b152:	429a      	cmp	r2, r3
 801b154:	d106      	bne.n	801b164 <ip4_reass+0xdc>
 801b156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b158:	899a      	ldrh	r2, [r3, #12]
 801b15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b15c:	889b      	ldrh	r3, [r3, #4]
 801b15e:	b29b      	uxth	r3, r3
 801b160:	429a      	cmp	r2, r3
 801b162:	d006      	beq.n	801b172 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	633b      	str	r3, [r7, #48]	@ 0x30
 801b16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d1e6      	bne.n	801b13e <ip4_reass+0xb6>
 801b170:	e000      	b.n	801b174 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b172:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b176:	2b00      	cmp	r3, #0
 801b178:	d109      	bne.n	801b18e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b17a:	8c3b      	ldrh	r3, [r7, #32]
 801b17c:	4619      	mov	r1, r3
 801b17e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b180:	f7ff fdb0 	bl	801ace4 <ip_reass_enqueue_new_datagram>
 801b184:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d11c      	bne.n	801b1c6 <ip4_reass+0x13e>
      goto nullreturn;
 801b18c:	e105      	b.n	801b39a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b190:	88db      	ldrh	r3, [r3, #6]
 801b192:	b29b      	uxth	r3, r3
 801b194:	4618      	mov	r0, r3
 801b196:	f7f4 fbfd 	bl	800f994 <lwip_htons>
 801b19a:	4603      	mov	r3, r0
 801b19c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d110      	bne.n	801b1c6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b1a6:	89db      	ldrh	r3, [r3, #14]
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	f7f4 fbf3 	bl	800f994 <lwip_htons>
 801b1ae:	4603      	mov	r3, r0
 801b1b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d006      	beq.n	801b1c6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b1ba:	3308      	adds	r3, #8
 801b1bc:	2214      	movs	r2, #20
 801b1be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b1c0:	4618      	mov	r0, r3
 801b1c2:	f00e fb52 	bl	802986a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b1c8:	88db      	ldrh	r3, [r3, #6]
 801b1ca:	b29b      	uxth	r3, r3
 801b1cc:	f003 0320 	and.w	r3, r3, #32
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	bf0c      	ite	eq
 801b1d4:	2301      	moveq	r3, #1
 801b1d6:	2300      	movne	r3, #0
 801b1d8:	b2db      	uxtb	r3, r3
 801b1da:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b1dc:	69fb      	ldr	r3, [r7, #28]
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d00e      	beq.n	801b200 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801b1e2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801b1e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b1e6:	4413      	add	r3, r2
 801b1e8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b1ea:	8b7a      	ldrh	r2, [r7, #26]
 801b1ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801b1ee:	429a      	cmp	r2, r3
 801b1f0:	f0c0 80a0 	bcc.w	801b334 <ip4_reass+0x2ac>
 801b1f4:	8b7b      	ldrh	r3, [r7, #26]
 801b1f6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801b1fa:	4293      	cmp	r3, r2
 801b1fc:	f200 809a 	bhi.w	801b334 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b200:	69fa      	ldr	r2, [r7, #28]
 801b202:	6879      	ldr	r1, [r7, #4]
 801b204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b206:	f7ff fdd5 	bl	801adb4 <ip_reass_chain_frag_into_datagram_and_validate>
 801b20a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b20c:	697b      	ldr	r3, [r7, #20]
 801b20e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b212:	f000 809b 	beq.w	801b34c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b216:	4b48      	ldr	r3, [pc, #288]	@ (801b338 <ip4_reass+0x2b0>)
 801b218:	881a      	ldrh	r2, [r3, #0]
 801b21a:	8c3b      	ldrh	r3, [r7, #32]
 801b21c:	4413      	add	r3, r2
 801b21e:	b29a      	uxth	r2, r3
 801b220:	4b45      	ldr	r3, [pc, #276]	@ (801b338 <ip4_reass+0x2b0>)
 801b222:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b224:	69fb      	ldr	r3, [r7, #28]
 801b226:	2b00      	cmp	r3, #0
 801b228:	d00d      	beq.n	801b246 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801b22a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801b22c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b22e:	4413      	add	r3, r2
 801b230:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b234:	8a7a      	ldrh	r2, [r7, #18]
 801b236:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b23a:	7f9b      	ldrb	r3, [r3, #30]
 801b23c:	f043 0301 	orr.w	r3, r3, #1
 801b240:	b2da      	uxtb	r2, r3
 801b242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b244:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b246:	697b      	ldr	r3, [r7, #20]
 801b248:	2b01      	cmp	r3, #1
 801b24a:	d171      	bne.n	801b330 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b24e:	8b9b      	ldrh	r3, [r3, #28]
 801b250:	3314      	adds	r3, #20
 801b252:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b256:	685b      	ldr	r3, [r3, #4]
 801b258:	685b      	ldr	r3, [r3, #4]
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801b25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b260:	685b      	ldr	r3, [r3, #4]
 801b262:	685b      	ldr	r3, [r3, #4]
 801b264:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b268:	3308      	adds	r3, #8
 801b26a:	2214      	movs	r2, #20
 801b26c:	4619      	mov	r1, r3
 801b26e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b270:	f00e fafb 	bl	802986a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b274:	8a3b      	ldrh	r3, [r7, #16]
 801b276:	4618      	mov	r0, r3
 801b278:	f7f4 fb8c 	bl	800f994 <lwip_htons>
 801b27c:	4603      	mov	r3, r0
 801b27e:	461a      	mov	r2, r3
 801b280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b282:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b286:	2200      	movs	r2, #0
 801b288:	719a      	strb	r2, [r3, #6]
 801b28a:	2200      	movs	r2, #0
 801b28c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b290:	2200      	movs	r2, #0
 801b292:	729a      	strb	r2, [r3, #10]
 801b294:	2200      	movs	r2, #0
 801b296:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b29a:	685b      	ldr	r3, [r3, #4]
 801b29c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b29e:	e00d      	b.n	801b2bc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801b2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2a2:	685b      	ldr	r3, [r3, #4]
 801b2a4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801b2a6:	2114      	movs	r1, #20
 801b2a8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801b2aa:	f7f5 ffb5 	bl	8011218 <pbuf_remove_header>
      pbuf_cat(p, r);
 801b2ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801b2b0:	6878      	ldr	r0, [r7, #4]
 801b2b2:	f7f6 f937 	bl	8011524 <pbuf_cat>
      r = iprh->next_pbuf;
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801b2bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d1ee      	bne.n	801b2a0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b2c2:	4b1e      	ldr	r3, [pc, #120]	@ (801b33c <ip4_reass+0x2b4>)
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b2c8:	429a      	cmp	r2, r3
 801b2ca:	d102      	bne.n	801b2d2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b2d0:	e010      	b.n	801b2f4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b2d2:	4b1a      	ldr	r3, [pc, #104]	@ (801b33c <ip4_reass+0x2b4>)
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b2d8:	e007      	b.n	801b2ea <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801b2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b2e0:	429a      	cmp	r2, r3
 801b2e2:	d006      	beq.n	801b2f2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d1f4      	bne.n	801b2da <ip4_reass+0x252>
 801b2f0:	e000      	b.n	801b2f4 <ip4_reass+0x26c>
          break;
 801b2f2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b2f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b2f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b2f8:	f7ff fd2e 	bl	801ad58 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801b2fc:	6878      	ldr	r0, [r7, #4]
 801b2fe:	f7f6 f8d1 	bl	80114a4 <pbuf_clen>
 801b302:	4603      	mov	r3, r0
 801b304:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b306:	4b0c      	ldr	r3, [pc, #48]	@ (801b338 <ip4_reass+0x2b0>)
 801b308:	881b      	ldrh	r3, [r3, #0]
 801b30a:	8c3a      	ldrh	r2, [r7, #32]
 801b30c:	429a      	cmp	r2, r3
 801b30e:	d906      	bls.n	801b31e <ip4_reass+0x296>
 801b310:	4b0b      	ldr	r3, [pc, #44]	@ (801b340 <ip4_reass+0x2b8>)
 801b312:	f240 229b 	movw	r2, #667	@ 0x29b
 801b316:	490b      	ldr	r1, [pc, #44]	@ (801b344 <ip4_reass+0x2bc>)
 801b318:	480b      	ldr	r0, [pc, #44]	@ (801b348 <ip4_reass+0x2c0>)
 801b31a:	f00e f803 	bl	8029324 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b31e:	4b06      	ldr	r3, [pc, #24]	@ (801b338 <ip4_reass+0x2b0>)
 801b320:	881a      	ldrh	r2, [r3, #0]
 801b322:	8c3b      	ldrh	r3, [r7, #32]
 801b324:	1ad3      	subs	r3, r2, r3
 801b326:	b29a      	uxth	r2, r3
 801b328:	4b03      	ldr	r3, [pc, #12]	@ (801b338 <ip4_reass+0x2b0>)
 801b32a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	e038      	b.n	801b3a2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b330:	2300      	movs	r3, #0
 801b332:	e036      	b.n	801b3a2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801b334:	bf00      	nop
 801b336:	e00a      	b.n	801b34e <ip4_reass+0x2c6>
 801b338:	2004271c 	.word	0x2004271c
 801b33c:	20042718 	.word	0x20042718
 801b340:	0802f074 	.word	0x0802f074
 801b344:	0802f1e4 	.word	0x0802f1e4
 801b348:	0802f0bc 	.word	0x0802f0bc
    goto nullreturn_ipr;
 801b34c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b350:	2b00      	cmp	r3, #0
 801b352:	d106      	bne.n	801b362 <ip4_reass+0x2da>
 801b354:	4b15      	ldr	r3, [pc, #84]	@ (801b3ac <ip4_reass+0x324>)
 801b356:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801b35a:	4915      	ldr	r1, [pc, #84]	@ (801b3b0 <ip4_reass+0x328>)
 801b35c:	4815      	ldr	r0, [pc, #84]	@ (801b3b4 <ip4_reass+0x32c>)
 801b35e:	f00d ffe1 	bl	8029324 <iprintf>
  if (ipr->p == NULL) {
 801b362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b364:	685b      	ldr	r3, [r3, #4]
 801b366:	2b00      	cmp	r3, #0
 801b368:	d116      	bne.n	801b398 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b36a:	4b13      	ldr	r3, [pc, #76]	@ (801b3b8 <ip4_reass+0x330>)
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b370:	429a      	cmp	r2, r3
 801b372:	d006      	beq.n	801b382 <ip4_reass+0x2fa>
 801b374:	4b0d      	ldr	r3, [pc, #52]	@ (801b3ac <ip4_reass+0x324>)
 801b376:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801b37a:	4910      	ldr	r1, [pc, #64]	@ (801b3bc <ip4_reass+0x334>)
 801b37c:	480d      	ldr	r0, [pc, #52]	@ (801b3b4 <ip4_reass+0x32c>)
 801b37e:	f00d ffd1 	bl	8029324 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b382:	2100      	movs	r1, #0
 801b384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b386:	f7ff fce7 	bl	801ad58 <ip_reass_dequeue_datagram>
 801b38a:	e006      	b.n	801b39a <ip4_reass+0x312>
    goto nullreturn;
 801b38c:	bf00      	nop
 801b38e:	e004      	b.n	801b39a <ip4_reass+0x312>
    goto nullreturn;
 801b390:	bf00      	nop
 801b392:	e002      	b.n	801b39a <ip4_reass+0x312>
      goto nullreturn;
 801b394:	bf00      	nop
 801b396:	e000      	b.n	801b39a <ip4_reass+0x312>
  }

nullreturn:
 801b398:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b39a:	6878      	ldr	r0, [r7, #4]
 801b39c:	f7f5 fff4 	bl	8011388 <pbuf_free>
  return NULL;
 801b3a0:	2300      	movs	r3, #0
}
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	3738      	adds	r7, #56	@ 0x38
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	bd80      	pop	{r7, pc}
 801b3aa:	bf00      	nop
 801b3ac:	0802f074 	.word	0x0802f074
 801b3b0:	0802f200 	.word	0x0802f200
 801b3b4:	0802f0bc 	.word	0x0802f0bc
 801b3b8:	20042718 	.word	0x20042718
 801b3bc:	0802f20c 	.word	0x0802f20c

0801b3c0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b3c0:	b580      	push	{r7, lr}
 801b3c2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b3c4:	2005      	movs	r0, #5
 801b3c6:	f7f5 f83d 	bl	8010444 <memp_malloc>
 801b3ca:	4603      	mov	r3, r0
}
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	bd80      	pop	{r7, pc}

0801b3d0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b3d0:	b580      	push	{r7, lr}
 801b3d2:	b082      	sub	sp, #8
 801b3d4:	af00      	add	r7, sp, #0
 801b3d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d106      	bne.n	801b3ec <ip_frag_free_pbuf_custom_ref+0x1c>
 801b3de:	4b07      	ldr	r3, [pc, #28]	@ (801b3fc <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b3e0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801b3e4:	4906      	ldr	r1, [pc, #24]	@ (801b400 <ip_frag_free_pbuf_custom_ref+0x30>)
 801b3e6:	4807      	ldr	r0, [pc, #28]	@ (801b404 <ip_frag_free_pbuf_custom_ref+0x34>)
 801b3e8:	f00d ff9c 	bl	8029324 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b3ec:	6879      	ldr	r1, [r7, #4]
 801b3ee:	2005      	movs	r0, #5
 801b3f0:	f7f5 f89e 	bl	8010530 <memp_free>
}
 801b3f4:	bf00      	nop
 801b3f6:	3708      	adds	r7, #8
 801b3f8:	46bd      	mov	sp, r7
 801b3fa:	bd80      	pop	{r7, pc}
 801b3fc:	0802f074 	.word	0x0802f074
 801b400:	0802f22c 	.word	0x0802f22c
 801b404:	0802f0bc 	.word	0x0802f0bc

0801b408 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b408:	b580      	push	{r7, lr}
 801b40a:	b084      	sub	sp, #16
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	2b00      	cmp	r3, #0
 801b418:	d106      	bne.n	801b428 <ipfrag_free_pbuf_custom+0x20>
 801b41a:	4b11      	ldr	r3, [pc, #68]	@ (801b460 <ipfrag_free_pbuf_custom+0x58>)
 801b41c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801b420:	4910      	ldr	r1, [pc, #64]	@ (801b464 <ipfrag_free_pbuf_custom+0x5c>)
 801b422:	4811      	ldr	r0, [pc, #68]	@ (801b468 <ipfrag_free_pbuf_custom+0x60>)
 801b424:	f00d ff7e 	bl	8029324 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b428:	68fa      	ldr	r2, [r7, #12]
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	429a      	cmp	r2, r3
 801b42e:	d006      	beq.n	801b43e <ipfrag_free_pbuf_custom+0x36>
 801b430:	4b0b      	ldr	r3, [pc, #44]	@ (801b460 <ipfrag_free_pbuf_custom+0x58>)
 801b432:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801b436:	490d      	ldr	r1, [pc, #52]	@ (801b46c <ipfrag_free_pbuf_custom+0x64>)
 801b438:	480b      	ldr	r0, [pc, #44]	@ (801b468 <ipfrag_free_pbuf_custom+0x60>)
 801b43a:	f00d ff73 	bl	8029324 <iprintf>
  if (pcr->original != NULL) {
 801b43e:	68fb      	ldr	r3, [r7, #12]
 801b440:	695b      	ldr	r3, [r3, #20]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d004      	beq.n	801b450 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	695b      	ldr	r3, [r3, #20]
 801b44a:	4618      	mov	r0, r3
 801b44c:	f7f5 ff9c 	bl	8011388 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b450:	68f8      	ldr	r0, [r7, #12]
 801b452:	f7ff ffbd 	bl	801b3d0 <ip_frag_free_pbuf_custom_ref>
}
 801b456:	bf00      	nop
 801b458:	3710      	adds	r7, #16
 801b45a:	46bd      	mov	sp, r7
 801b45c:	bd80      	pop	{r7, pc}
 801b45e:	bf00      	nop
 801b460:	0802f074 	.word	0x0802f074
 801b464:	0802f238 	.word	0x0802f238
 801b468:	0802f0bc 	.word	0x0802f0bc
 801b46c:	0802f244 	.word	0x0802f244

0801b470 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b470:	b580      	push	{r7, lr}
 801b472:	b094      	sub	sp, #80	@ 0x50
 801b474:	af02      	add	r7, sp, #8
 801b476:	60f8      	str	r0, [r7, #12]
 801b478:	60b9      	str	r1, [r7, #8]
 801b47a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b47c:	2300      	movs	r3, #0
 801b47e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b482:	68bb      	ldr	r3, [r7, #8]
 801b484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b486:	3b14      	subs	r3, #20
 801b488:	2b00      	cmp	r3, #0
 801b48a:	da00      	bge.n	801b48e <ip4_frag+0x1e>
 801b48c:	3307      	adds	r3, #7
 801b48e:	10db      	asrs	r3, r3, #3
 801b490:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b492:	2314      	movs	r3, #20
 801b494:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b496:	68fb      	ldr	r3, [r7, #12]
 801b498:	685b      	ldr	r3, [r3, #4]
 801b49a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801b49c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b49e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b4a2:	781b      	ldrb	r3, [r3, #0]
 801b4a4:	f003 030f 	and.w	r3, r3, #15
 801b4a8:	b2db      	uxtb	r3, r3
 801b4aa:	009b      	lsls	r3, r3, #2
 801b4ac:	b2db      	uxtb	r3, r3
 801b4ae:	2b14      	cmp	r3, #20
 801b4b0:	d002      	beq.n	801b4b8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b4b2:	f06f 0305 	mvn.w	r3, #5
 801b4b6:	e110      	b.n	801b6da <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b4b8:	68fb      	ldr	r3, [r7, #12]
 801b4ba:	895b      	ldrh	r3, [r3, #10]
 801b4bc:	2b13      	cmp	r3, #19
 801b4be:	d809      	bhi.n	801b4d4 <ip4_frag+0x64>
 801b4c0:	4b88      	ldr	r3, [pc, #544]	@ (801b6e4 <ip4_frag+0x274>)
 801b4c2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801b4c6:	4988      	ldr	r1, [pc, #544]	@ (801b6e8 <ip4_frag+0x278>)
 801b4c8:	4888      	ldr	r0, [pc, #544]	@ (801b6ec <ip4_frag+0x27c>)
 801b4ca:	f00d ff2b 	bl	8029324 <iprintf>
 801b4ce:	f06f 0305 	mvn.w	r3, #5
 801b4d2:	e102      	b.n	801b6da <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b4d6:	88db      	ldrh	r3, [r3, #6]
 801b4d8:	b29b      	uxth	r3, r3
 801b4da:	4618      	mov	r0, r3
 801b4dc:	f7f4 fa5a 	bl	800f994 <lwip_htons>
 801b4e0:	4603      	mov	r3, r0
 801b4e2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801b4e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b4e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b4ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b4ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b4f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b4f6:	68fb      	ldr	r3, [r7, #12]
 801b4f8:	891b      	ldrh	r3, [r3, #8]
 801b4fa:	3b14      	subs	r3, #20
 801b4fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801b500:	e0e1      	b.n	801b6c6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b502:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801b504:	00db      	lsls	r3, r3, #3
 801b506:	b29b      	uxth	r3, r3
 801b508:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801b50c:	4293      	cmp	r3, r2
 801b50e:	bf28      	it	cs
 801b510:	4613      	movcs	r3, r2
 801b512:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b514:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b518:	2114      	movs	r1, #20
 801b51a:	200e      	movs	r0, #14
 801b51c:	f7f5 fc1e 	bl	8010d5c <pbuf_alloc>
 801b520:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801b522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b524:	2b00      	cmp	r3, #0
 801b526:	f000 80d5 	beq.w	801b6d4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b52c:	895b      	ldrh	r3, [r3, #10]
 801b52e:	2b13      	cmp	r3, #19
 801b530:	d806      	bhi.n	801b540 <ip4_frag+0xd0>
 801b532:	4b6c      	ldr	r3, [pc, #432]	@ (801b6e4 <ip4_frag+0x274>)
 801b534:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801b538:	496d      	ldr	r1, [pc, #436]	@ (801b6f0 <ip4_frag+0x280>)
 801b53a:	486c      	ldr	r0, [pc, #432]	@ (801b6ec <ip4_frag+0x27c>)
 801b53c:	f00d fef2 	bl	8029324 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b542:	685b      	ldr	r3, [r3, #4]
 801b544:	2214      	movs	r2, #20
 801b546:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801b548:	4618      	mov	r0, r3
 801b54a:	f00e f98e 	bl	802986a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b550:	685b      	ldr	r3, [r3, #4]
 801b552:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801b554:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801b556:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801b55a:	e064      	b.n	801b626 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b55c:	68fb      	ldr	r3, [r7, #12]
 801b55e:	895a      	ldrh	r2, [r3, #10]
 801b560:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b562:	1ad3      	subs	r3, r2, r3
 801b564:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b566:	68fb      	ldr	r3, [r7, #12]
 801b568:	895b      	ldrh	r3, [r3, #10]
 801b56a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801b56c:	429a      	cmp	r2, r3
 801b56e:	d906      	bls.n	801b57e <ip4_frag+0x10e>
 801b570:	4b5c      	ldr	r3, [pc, #368]	@ (801b6e4 <ip4_frag+0x274>)
 801b572:	f240 322d 	movw	r2, #813	@ 0x32d
 801b576:	495f      	ldr	r1, [pc, #380]	@ (801b6f4 <ip4_frag+0x284>)
 801b578:	485c      	ldr	r0, [pc, #368]	@ (801b6ec <ip4_frag+0x27c>)
 801b57a:	f00d fed3 	bl	8029324 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b57e:	8bfa      	ldrh	r2, [r7, #30]
 801b580:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801b584:	4293      	cmp	r3, r2
 801b586:	bf28      	it	cs
 801b588:	4613      	movcs	r3, r2
 801b58a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b58e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801b592:	2b00      	cmp	r3, #0
 801b594:	d105      	bne.n	801b5a2 <ip4_frag+0x132>
        poff = 0;
 801b596:	2300      	movs	r3, #0
 801b598:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801b59a:	68fb      	ldr	r3, [r7, #12]
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	60fb      	str	r3, [r7, #12]
        continue;
 801b5a0:	e041      	b.n	801b626 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b5a2:	f7ff ff0d 	bl	801b3c0 <ip_frag_alloc_pbuf_custom_ref>
 801b5a6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b5a8:	69bb      	ldr	r3, [r7, #24]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d103      	bne.n	801b5b6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b5ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b5b0:	f7f5 feea 	bl	8011388 <pbuf_free>
        goto memerr;
 801b5b4:	e08f      	b.n	801b6d6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b5b6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b5bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b5be:	4413      	add	r3, r2
 801b5c0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801b5c4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801b5c8:	9201      	str	r2, [sp, #4]
 801b5ca:	9300      	str	r3, [sp, #0]
 801b5cc:	4603      	mov	r3, r0
 801b5ce:	2241      	movs	r2, #65	@ 0x41
 801b5d0:	2000      	movs	r0, #0
 801b5d2:	f7f5 fced 	bl	8010fb0 <pbuf_alloced_custom>
 801b5d6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b5d8:	697b      	ldr	r3, [r7, #20]
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d106      	bne.n	801b5ec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b5de:	69b8      	ldr	r0, [r7, #24]
 801b5e0:	f7ff fef6 	bl	801b3d0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b5e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b5e6:	f7f5 fecf 	bl	8011388 <pbuf_free>
        goto memerr;
 801b5ea:	e074      	b.n	801b6d6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801b5ec:	68f8      	ldr	r0, [r7, #12]
 801b5ee:	f7f5 ff71 	bl	80114d4 <pbuf_ref>
      pcr->original = p;
 801b5f2:	69bb      	ldr	r3, [r7, #24]
 801b5f4:	68fa      	ldr	r2, [r7, #12]
 801b5f6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b5f8:	69bb      	ldr	r3, [r7, #24]
 801b5fa:	4a3f      	ldr	r2, [pc, #252]	@ (801b6f8 <ip4_frag+0x288>)
 801b5fc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b5fe:	6979      	ldr	r1, [r7, #20]
 801b600:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b602:	f7f5 ff8f 	bl	8011524 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b606:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801b60a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801b60e:	1ad3      	subs	r3, r2, r3
 801b610:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801b614:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d004      	beq.n	801b626 <ip4_frag+0x1b6>
        poff = 0;
 801b61c:	2300      	movs	r3, #0
 801b61e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b626:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d196      	bne.n	801b55c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b62e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801b630:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801b634:	4413      	add	r3, r2
 801b636:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b638:	68bb      	ldr	r3, [r7, #8]
 801b63a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b63c:	f1a3 0213 	sub.w	r2, r3, #19
 801b640:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801b644:	429a      	cmp	r2, r3
 801b646:	bfcc      	ite	gt
 801b648:	2301      	movgt	r3, #1
 801b64a:	2300      	movle	r3, #0
 801b64c:	b2db      	uxtb	r3, r3
 801b64e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b650:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801b654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b658:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801b65a:	6a3b      	ldr	r3, [r7, #32]
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d002      	beq.n	801b666 <ip4_frag+0x1f6>
 801b660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b662:	2b00      	cmp	r3, #0
 801b664:	d003      	beq.n	801b66e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b666:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b668:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801b66c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b66e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b670:	4618      	mov	r0, r3
 801b672:	f7f4 f98f 	bl	800f994 <lwip_htons>
 801b676:	4603      	mov	r3, r0
 801b678:	461a      	mov	r2, r3
 801b67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b67c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b67e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801b680:	3314      	adds	r3, #20
 801b682:	b29b      	uxth	r3, r3
 801b684:	4618      	mov	r0, r3
 801b686:	f7f4 f985 	bl	800f994 <lwip_htons>
 801b68a:	4603      	mov	r3, r0
 801b68c:	461a      	mov	r2, r3
 801b68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b690:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b694:	2200      	movs	r2, #0
 801b696:	729a      	strb	r2, [r3, #10]
 801b698:	2200      	movs	r2, #0
 801b69a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b69c:	68bb      	ldr	r3, [r7, #8]
 801b69e:	695b      	ldr	r3, [r3, #20]
 801b6a0:	687a      	ldr	r2, [r7, #4]
 801b6a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b6a4:	68b8      	ldr	r0, [r7, #8]
 801b6a6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b6a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b6aa:	f7f5 fe6d 	bl	8011388 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b6ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801b6b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801b6b4:	1ad3      	subs	r3, r2, r3
 801b6b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801b6ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801b6be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801b6c0:	4413      	add	r3, r2
 801b6c2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801b6c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	f47f af19 	bne.w	801b502 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b6d0:	2300      	movs	r3, #0
 801b6d2:	e002      	b.n	801b6da <ip4_frag+0x26a>
      goto memerr;
 801b6d4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b6d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801b6da:	4618      	mov	r0, r3
 801b6dc:	3748      	adds	r7, #72	@ 0x48
 801b6de:	46bd      	mov	sp, r7
 801b6e0:	bd80      	pop	{r7, pc}
 801b6e2:	bf00      	nop
 801b6e4:	0802f074 	.word	0x0802f074
 801b6e8:	0802f250 	.word	0x0802f250
 801b6ec:	0802f0bc 	.word	0x0802f0bc
 801b6f0:	0802f26c 	.word	0x0802f26c
 801b6f4:	0802f28c 	.word	0x0802f28c
 801b6f8:	0801b409 	.word	0x0801b409

0801b6fc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b6fc:	b580      	push	{r7, lr}
 801b6fe:	b086      	sub	sp, #24
 801b700:	af00      	add	r7, sp, #0
 801b702:	6078      	str	r0, [r7, #4]
 801b704:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b706:	230e      	movs	r3, #14
 801b708:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	895b      	ldrh	r3, [r3, #10]
 801b70e:	2b0e      	cmp	r3, #14
 801b710:	d96e      	bls.n	801b7f0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	7bdb      	ldrb	r3, [r3, #15]
 801b716:	2b00      	cmp	r3, #0
 801b718:	d106      	bne.n	801b728 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b71a:	683b      	ldr	r3, [r7, #0]
 801b71c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801b720:	3301      	adds	r3, #1
 801b722:	b2da      	uxtb	r2, r3
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	685b      	ldr	r3, [r3, #4]
 801b72c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b72e:	693b      	ldr	r3, [r7, #16]
 801b730:	7b1a      	ldrb	r2, [r3, #12]
 801b732:	7b5b      	ldrb	r3, [r3, #13]
 801b734:	021b      	lsls	r3, r3, #8
 801b736:	4313      	orrs	r3, r2
 801b738:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b73a:	693b      	ldr	r3, [r7, #16]
 801b73c:	781b      	ldrb	r3, [r3, #0]
 801b73e:	f003 0301 	and.w	r3, r3, #1
 801b742:	2b00      	cmp	r3, #0
 801b744:	d023      	beq.n	801b78e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b746:	693b      	ldr	r3, [r7, #16]
 801b748:	781b      	ldrb	r3, [r3, #0]
 801b74a:	2b01      	cmp	r3, #1
 801b74c:	d10f      	bne.n	801b76e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b74e:	693b      	ldr	r3, [r7, #16]
 801b750:	785b      	ldrb	r3, [r3, #1]
 801b752:	2b00      	cmp	r3, #0
 801b754:	d11b      	bne.n	801b78e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b756:	693b      	ldr	r3, [r7, #16]
 801b758:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b75a:	2b5e      	cmp	r3, #94	@ 0x5e
 801b75c:	d117      	bne.n	801b78e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	7b5b      	ldrb	r3, [r3, #13]
 801b762:	f043 0310 	orr.w	r3, r3, #16
 801b766:	b2da      	uxtb	r2, r3
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	735a      	strb	r2, [r3, #13]
 801b76c:	e00f      	b.n	801b78e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b76e:	693b      	ldr	r3, [r7, #16]
 801b770:	2206      	movs	r2, #6
 801b772:	4928      	ldr	r1, [pc, #160]	@ (801b814 <ethernet_input+0x118>)
 801b774:	4618      	mov	r0, r3
 801b776:	f00d ff2b 	bl	80295d0 <memcmp>
 801b77a:	4603      	mov	r3, r0
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d106      	bne.n	801b78e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	7b5b      	ldrb	r3, [r3, #13]
 801b784:	f043 0308 	orr.w	r3, r3, #8
 801b788:	b2da      	uxtb	r2, r3
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b78e:	89fb      	ldrh	r3, [r7, #14]
 801b790:	2b08      	cmp	r3, #8
 801b792:	d003      	beq.n	801b79c <ethernet_input+0xa0>
 801b794:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801b798:	d014      	beq.n	801b7c4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b79a:	e032      	b.n	801b802 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b79c:	683b      	ldr	r3, [r7, #0]
 801b79e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b7a2:	f003 0308 	and.w	r3, r3, #8
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d024      	beq.n	801b7f4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b7aa:	8afb      	ldrh	r3, [r7, #22]
 801b7ac:	4619      	mov	r1, r3
 801b7ae:	6878      	ldr	r0, [r7, #4]
 801b7b0:	f7f5 fd32 	bl	8011218 <pbuf_remove_header>
 801b7b4:	4603      	mov	r3, r0
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d11e      	bne.n	801b7f8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b7ba:	6839      	ldr	r1, [r7, #0]
 801b7bc:	6878      	ldr	r0, [r7, #4]
 801b7be:	f7fe fd31 	bl	801a224 <ip4_input>
      break;
 801b7c2:	e013      	b.n	801b7ec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b7c4:	683b      	ldr	r3, [r7, #0]
 801b7c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b7ca:	f003 0308 	and.w	r3, r3, #8
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d014      	beq.n	801b7fc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b7d2:	8afb      	ldrh	r3, [r7, #22]
 801b7d4:	4619      	mov	r1, r3
 801b7d6:	6878      	ldr	r0, [r7, #4]
 801b7d8:	f7f5 fd1e 	bl	8011218 <pbuf_remove_header>
 801b7dc:	4603      	mov	r3, r0
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d10e      	bne.n	801b800 <ethernet_input+0x104>
        etharp_input(p, netif);
 801b7e2:	6839      	ldr	r1, [r7, #0]
 801b7e4:	6878      	ldr	r0, [r7, #4]
 801b7e6:	f7fd fa39 	bl	8018c5c <etharp_input>
      break;
 801b7ea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b7ec:	2300      	movs	r3, #0
 801b7ee:	e00c      	b.n	801b80a <ethernet_input+0x10e>
    goto free_and_return;
 801b7f0:	bf00      	nop
 801b7f2:	e006      	b.n	801b802 <ethernet_input+0x106>
        goto free_and_return;
 801b7f4:	bf00      	nop
 801b7f6:	e004      	b.n	801b802 <ethernet_input+0x106>
        goto free_and_return;
 801b7f8:	bf00      	nop
 801b7fa:	e002      	b.n	801b802 <ethernet_input+0x106>
        goto free_and_return;
 801b7fc:	bf00      	nop
 801b7fe:	e000      	b.n	801b802 <ethernet_input+0x106>
        goto free_and_return;
 801b800:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b802:	6878      	ldr	r0, [r7, #4]
 801b804:	f7f5 fdc0 	bl	8011388 <pbuf_free>
  return ERR_OK;
 801b808:	2300      	movs	r3, #0
}
 801b80a:	4618      	mov	r0, r3
 801b80c:	3718      	adds	r7, #24
 801b80e:	46bd      	mov	sp, r7
 801b810:	bd80      	pop	{r7, pc}
 801b812:	bf00      	nop
 801b814:	0802f514 	.word	0x0802f514

0801b818 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b818:	b580      	push	{r7, lr}
 801b81a:	b086      	sub	sp, #24
 801b81c:	af00      	add	r7, sp, #0
 801b81e:	60f8      	str	r0, [r7, #12]
 801b820:	60b9      	str	r1, [r7, #8]
 801b822:	607a      	str	r2, [r7, #4]
 801b824:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b826:	8c3b      	ldrh	r3, [r7, #32]
 801b828:	4618      	mov	r0, r3
 801b82a:	f7f4 f8b3 	bl	800f994 <lwip_htons>
 801b82e:	4603      	mov	r3, r0
 801b830:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b832:	210e      	movs	r1, #14
 801b834:	68b8      	ldr	r0, [r7, #8]
 801b836:	f7f5 fcdf 	bl	80111f8 <pbuf_add_header>
 801b83a:	4603      	mov	r3, r0
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d125      	bne.n	801b88c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b840:	68bb      	ldr	r3, [r7, #8]
 801b842:	685b      	ldr	r3, [r3, #4]
 801b844:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b846:	693b      	ldr	r3, [r7, #16]
 801b848:	8afa      	ldrh	r2, [r7, #22]
 801b84a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b84c:	693b      	ldr	r3, [r7, #16]
 801b84e:	2206      	movs	r2, #6
 801b850:	6839      	ldr	r1, [r7, #0]
 801b852:	4618      	mov	r0, r3
 801b854:	f00e f809 	bl	802986a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b858:	693b      	ldr	r3, [r7, #16]
 801b85a:	3306      	adds	r3, #6
 801b85c:	2206      	movs	r2, #6
 801b85e:	6879      	ldr	r1, [r7, #4]
 801b860:	4618      	mov	r0, r3
 801b862:	f00e f802 	bl	802986a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b86c:	2b06      	cmp	r3, #6
 801b86e:	d006      	beq.n	801b87e <ethernet_output+0x66>
 801b870:	4b0a      	ldr	r3, [pc, #40]	@ (801b89c <ethernet_output+0x84>)
 801b872:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801b876:	490a      	ldr	r1, [pc, #40]	@ (801b8a0 <ethernet_output+0x88>)
 801b878:	480a      	ldr	r0, [pc, #40]	@ (801b8a4 <ethernet_output+0x8c>)
 801b87a:	f00d fd53 	bl	8029324 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	699b      	ldr	r3, [r3, #24]
 801b882:	68b9      	ldr	r1, [r7, #8]
 801b884:	68f8      	ldr	r0, [r7, #12]
 801b886:	4798      	blx	r3
 801b888:	4603      	mov	r3, r0
 801b88a:	e002      	b.n	801b892 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b88c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b88e:	f06f 0301 	mvn.w	r3, #1
}
 801b892:	4618      	mov	r0, r3
 801b894:	3718      	adds	r7, #24
 801b896:	46bd      	mov	sp, r7
 801b898:	bd80      	pop	{r7, pc}
 801b89a:	bf00      	nop
 801b89c:	0802f29c 	.word	0x0802f29c
 801b8a0:	0802f2d4 	.word	0x0802f2d4
 801b8a4:	0802f308 	.word	0x0802f308

0801b8a8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b8a8:	b580      	push	{r7, lr}
 801b8aa:	b082      	sub	sp, #8
 801b8ac:	af00      	add	r7, sp, #0
 801b8ae:	6078      	str	r0, [r7, #4]
 801b8b0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801b8b2:	683b      	ldr	r3, [r7, #0]
 801b8b4:	2200      	movs	r2, #0
 801b8b6:	2104      	movs	r1, #4
 801b8b8:	4618      	mov	r0, r3
 801b8ba:	f7ed fa35 	bl	8008d28 <osMessageQueueNew>
 801b8be:	4602      	mov	r2, r0
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	681b      	ldr	r3, [r3, #0]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d102      	bne.n	801b8d2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801b8cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b8d0:	e000      	b.n	801b8d4 <sys_mbox_new+0x2c>

  return ERR_OK;
 801b8d2:	2300      	movs	r3, #0
}
 801b8d4:	4618      	mov	r0, r3
 801b8d6:	3708      	adds	r7, #8
 801b8d8:	46bd      	mov	sp, r7
 801b8da:	bd80      	pop	{r7, pc}

0801b8dc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801b8dc:	b580      	push	{r7, lr}
 801b8de:	b082      	sub	sp, #8
 801b8e0:	af00      	add	r7, sp, #0
 801b8e2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	4618      	mov	r0, r3
 801b8ea:	f7ed fb89 	bl	8009000 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	4618      	mov	r0, r3
 801b8f4:	f7ed fbb6 	bl	8009064 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801b8f8:	bf00      	nop
 801b8fa:	3708      	adds	r7, #8
 801b8fc:	46bd      	mov	sp, r7
 801b8fe:	bd80      	pop	{r7, pc}

0801b900 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b900:	b580      	push	{r7, lr}
 801b902:	b084      	sub	sp, #16
 801b904:	af00      	add	r7, sp, #0
 801b906:	6078      	str	r0, [r7, #4]
 801b908:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	6818      	ldr	r0, [r3, #0]
 801b90e:	4639      	mov	r1, r7
 801b910:	2300      	movs	r3, #0
 801b912:	2200      	movs	r2, #0
 801b914:	f7ed fa8e 	bl	8008e34 <osMessageQueuePut>
 801b918:	4603      	mov	r3, r0
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d102      	bne.n	801b924 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801b91e:	2300      	movs	r3, #0
 801b920:	73fb      	strb	r3, [r7, #15]
 801b922:	e001      	b.n	801b928 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b924:	23ff      	movs	r3, #255	@ 0xff
 801b926:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b928:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b92c:	4618      	mov	r0, r3
 801b92e:	3710      	adds	r7, #16
 801b930:	46bd      	mov	sp, r7
 801b932:	bd80      	pop	{r7, pc}

0801b934 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b934:	b580      	push	{r7, lr}
 801b936:	b086      	sub	sp, #24
 801b938:	af00      	add	r7, sp, #0
 801b93a:	60f8      	str	r0, [r7, #12]
 801b93c:	60b9      	str	r1, [r7, #8]
 801b93e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801b940:	f7ec fe1e 	bl	8008580 <osKernelGetTickCount>
 801b944:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d013      	beq.n	801b974 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801b94c:	68fb      	ldr	r3, [r7, #12]
 801b94e:	6818      	ldr	r0, [r3, #0]
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	2200      	movs	r2, #0
 801b954:	68b9      	ldr	r1, [r7, #8]
 801b956:	f7ed fae1 	bl	8008f1c <osMessageQueueGet>
 801b95a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801b95c:	693b      	ldr	r3, [r7, #16]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d105      	bne.n	801b96e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801b962:	f7ec fe0d 	bl	8008580 <osKernelGetTickCount>
 801b966:	4602      	mov	r2, r0
 801b968:	697b      	ldr	r3, [r7, #20]
 801b96a:	1ad3      	subs	r3, r2, r3
 801b96c:	e00f      	b.n	801b98e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b96e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b972:	e00c      	b.n	801b98e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801b974:	68fb      	ldr	r3, [r7, #12]
 801b976:	6818      	ldr	r0, [r3, #0]
 801b978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b97c:	2200      	movs	r2, #0
 801b97e:	68b9      	ldr	r1, [r7, #8]
 801b980:	f7ed facc 	bl	8008f1c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801b984:	f7ec fdfc 	bl	8008580 <osKernelGetTickCount>
 801b988:	4602      	mov	r2, r0
 801b98a:	697b      	ldr	r3, [r7, #20]
 801b98c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b98e:	4618      	mov	r0, r3
 801b990:	3718      	adds	r7, #24
 801b992:	46bd      	mov	sp, r7
 801b994:	bd80      	pop	{r7, pc}

0801b996 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801b996:	b580      	push	{r7, lr}
 801b998:	b082      	sub	sp, #8
 801b99a:	af00      	add	r7, sp, #0
 801b99c:	6078      	str	r0, [r7, #4]
 801b99e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	6818      	ldr	r0, [r3, #0]
 801b9a4:	2300      	movs	r3, #0
 801b9a6:	2200      	movs	r2, #0
 801b9a8:	6839      	ldr	r1, [r7, #0]
 801b9aa:	f7ed fab7 	bl	8008f1c <osMessageQueueGet>
 801b9ae:	4603      	mov	r3, r0
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d101      	bne.n	801b9b8 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801b9b4:	2300      	movs	r3, #0
 801b9b6:	e001      	b.n	801b9bc <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801b9b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801b9bc:	4618      	mov	r0, r3
 801b9be:	3708      	adds	r7, #8
 801b9c0:	46bd      	mov	sp, r7
 801b9c2:	bd80      	pop	{r7, pc}

0801b9c4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b9c4:	b480      	push	{r7}
 801b9c6:	b083      	sub	sp, #12
 801b9c8:	af00      	add	r7, sp, #0
 801b9ca:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	d101      	bne.n	801b9d8 <sys_mbox_valid+0x14>
    return 0;
 801b9d4:	2300      	movs	r3, #0
 801b9d6:	e000      	b.n	801b9da <sys_mbox_valid+0x16>
  else
    return 1;
 801b9d8:	2301      	movs	r3, #1
}
 801b9da:	4618      	mov	r0, r3
 801b9dc:	370c      	adds	r7, #12
 801b9de:	46bd      	mov	sp, r7
 801b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9e4:	4770      	bx	lr

0801b9e6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801b9e6:	b480      	push	{r7}
 801b9e8:	b083      	sub	sp, #12
 801b9ea:	af00      	add	r7, sp, #0
 801b9ec:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	2200      	movs	r2, #0
 801b9f2:	601a      	str	r2, [r3, #0]
}
 801b9f4:	bf00      	nop
 801b9f6:	370c      	adds	r7, #12
 801b9f8:	46bd      	mov	sp, r7
 801b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9fe:	4770      	bx	lr

0801ba00 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801ba00:	b580      	push	{r7, lr}
 801ba02:	b082      	sub	sp, #8
 801ba04:	af00      	add	r7, sp, #0
 801ba06:	6078      	str	r0, [r7, #4]
 801ba08:	460b      	mov	r3, r1
 801ba0a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801ba0c:	78fb      	ldrb	r3, [r7, #3]
 801ba0e:	2200      	movs	r2, #0
 801ba10:	4619      	mov	r1, r3
 801ba12:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801ba16:	f7ec fff7 	bl	8008a08 <osSemaphoreNew>
 801ba1a:	4602      	mov	r2, r0
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d102      	bne.n	801ba2e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ba28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ba2c:	e009      	b.n	801ba42 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801ba2e:	78fb      	ldrb	r3, [r7, #3]
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d105      	bne.n	801ba40 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	2100      	movs	r1, #0
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	f7ed f880 	bl	8008b40 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801ba40:	2300      	movs	r3, #0
}
 801ba42:	4618      	mov	r0, r3
 801ba44:	3708      	adds	r7, #8
 801ba46:	46bd      	mov	sp, r7
 801ba48:	bd80      	pop	{r7, pc}

0801ba4a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801ba4a:	b580      	push	{r7, lr}
 801ba4c:	b084      	sub	sp, #16
 801ba4e:	af00      	add	r7, sp, #0
 801ba50:	6078      	str	r0, [r7, #4]
 801ba52:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801ba54:	f7ec fd94 	bl	8008580 <osKernelGetTickCount>
 801ba58:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801ba5a:	683b      	ldr	r3, [r7, #0]
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d011      	beq.n	801ba84 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	6839      	ldr	r1, [r7, #0]
 801ba66:	4618      	mov	r0, r3
 801ba68:	f7ed f86a 	bl	8008b40 <osSemaphoreAcquire>
 801ba6c:	4603      	mov	r3, r0
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d105      	bne.n	801ba7e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801ba72:	f7ec fd85 	bl	8008580 <osKernelGetTickCount>
 801ba76:	4602      	mov	r2, r0
 801ba78:	68fb      	ldr	r3, [r7, #12]
 801ba7a:	1ad3      	subs	r3, r2, r3
 801ba7c:	e012      	b.n	801baa4 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ba7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ba82:	e00f      	b.n	801baa4 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801ba84:	bf00      	nop
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ba8e:	4618      	mov	r0, r3
 801ba90:	f7ed f856 	bl	8008b40 <osSemaphoreAcquire>
 801ba94:	4603      	mov	r3, r0
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d1f5      	bne.n	801ba86 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801ba9a:	f7ec fd71 	bl	8008580 <osKernelGetTickCount>
 801ba9e:	4602      	mov	r2, r0
 801baa0:	68fb      	ldr	r3, [r7, #12]
 801baa2:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801baa4:	4618      	mov	r0, r3
 801baa6:	3710      	adds	r7, #16
 801baa8:	46bd      	mov	sp, r7
 801baaa:	bd80      	pop	{r7, pc}

0801baac <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801baac:	b580      	push	{r7, lr}
 801baae:	b082      	sub	sp, #8
 801bab0:	af00      	add	r7, sp, #0
 801bab2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	4618      	mov	r0, r3
 801baba:	f7ed f8a7 	bl	8008c0c <osSemaphoreRelease>
}
 801babe:	bf00      	nop
 801bac0:	3708      	adds	r7, #8
 801bac2:	46bd      	mov	sp, r7
 801bac4:	bd80      	pop	{r7, pc}

0801bac6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801bac6:	b580      	push	{r7, lr}
 801bac8:	b082      	sub	sp, #8
 801baca:	af00      	add	r7, sp, #0
 801bacc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	4618      	mov	r0, r3
 801bad4:	f7ed f8f2 	bl	8008cbc <osSemaphoreDelete>
}
 801bad8:	bf00      	nop
 801bada:	3708      	adds	r7, #8
 801badc:	46bd      	mov	sp, r7
 801bade:	bd80      	pop	{r7, pc}

0801bae0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801bae0:	b480      	push	{r7}
 801bae2:	b083      	sub	sp, #12
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	2b00      	cmp	r3, #0
 801baee:	d101      	bne.n	801baf4 <sys_sem_valid+0x14>
    return 0;
 801baf0:	2300      	movs	r3, #0
 801baf2:	e000      	b.n	801baf6 <sys_sem_valid+0x16>
  else
    return 1;
 801baf4:	2301      	movs	r3, #1
}
 801baf6:	4618      	mov	r0, r3
 801baf8:	370c      	adds	r7, #12
 801bafa:	46bd      	mov	sp, r7
 801bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb00:	4770      	bx	lr

0801bb02 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801bb02:	b480      	push	{r7}
 801bb04:	b083      	sub	sp, #12
 801bb06:	af00      	add	r7, sp, #0
 801bb08:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	2200      	movs	r2, #0
 801bb0e:	601a      	str	r2, [r3, #0]
}
 801bb10:	bf00      	nop
 801bb12:	370c      	adds	r7, #12
 801bb14:	46bd      	mov	sp, r7
 801bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb1a:	4770      	bx	lr

0801bb1c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801bb1c:	b580      	push	{r7, lr}
 801bb1e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801bb20:	2000      	movs	r0, #0
 801bb22:	f7ec fe29 	bl	8008778 <osMutexNew>
 801bb26:	4603      	mov	r3, r0
 801bb28:	4a01      	ldr	r2, [pc, #4]	@ (801bb30 <sys_init+0x14>)
 801bb2a:	6013      	str	r3, [r2, #0]
#endif
}
 801bb2c:	bf00      	nop
 801bb2e:	bd80      	pop	{r7, pc}
 801bb30:	20042720 	.word	0x20042720

0801bb34 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801bb34:	b580      	push	{r7, lr}
 801bb36:	b082      	sub	sp, #8
 801bb38:	af00      	add	r7, sp, #0
 801bb3a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801bb3c:	2000      	movs	r0, #0
 801bb3e:	f7ec fe1b 	bl	8008778 <osMutexNew>
 801bb42:	4602      	mov	r2, r0
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	681b      	ldr	r3, [r3, #0]
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d102      	bne.n	801bb56 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801bb50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bb54:	e000      	b.n	801bb58 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801bb56:	2300      	movs	r3, #0
}
 801bb58:	4618      	mov	r0, r3
 801bb5a:	3708      	adds	r7, #8
 801bb5c:	46bd      	mov	sp, r7
 801bb5e:	bd80      	pop	{r7, pc}

0801bb60 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801bb60:	b580      	push	{r7, lr}
 801bb62:	b082      	sub	sp, #8
 801bb64:	af00      	add	r7, sp, #0
 801bb66:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801bb70:	4618      	mov	r0, r3
 801bb72:	f7ec fe9b 	bl	80088ac <osMutexAcquire>
#endif
}
 801bb76:	bf00      	nop
 801bb78:	3708      	adds	r7, #8
 801bb7a:	46bd      	mov	sp, r7
 801bb7c:	bd80      	pop	{r7, pc}

0801bb7e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801bb7e:	b580      	push	{r7, lr}
 801bb80:	b082      	sub	sp, #8
 801bb82:	af00      	add	r7, sp, #0
 801bb84:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	4618      	mov	r0, r3
 801bb8c:	f7ec feec 	bl	8008968 <osMutexRelease>
}
 801bb90:	bf00      	nop
 801bb92:	3708      	adds	r7, #8
 801bb94:	46bd      	mov	sp, r7
 801bb96:	bd80      	pop	{r7, pc}

0801bb98 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801bb98:	b580      	push	{r7, lr}
 801bb9a:	b08e      	sub	sp, #56	@ 0x38
 801bb9c:	af00      	add	r7, sp, #0
 801bb9e:	60f8      	str	r0, [r7, #12]
 801bba0:	60b9      	str	r1, [r7, #8]
 801bba2:	607a      	str	r2, [r7, #4]
 801bba4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801bba6:	f107 0314 	add.w	r3, r7, #20
 801bbaa:	2224      	movs	r2, #36	@ 0x24
 801bbac:	2100      	movs	r1, #0
 801bbae:	4618      	mov	r0, r3
 801bbb0:	f00d fd38 	bl	8029624 <memset>
 801bbb4:	68fb      	ldr	r3, [r7, #12]
 801bbb6:	617b      	str	r3, [r7, #20]
 801bbb8:	683b      	ldr	r3, [r7, #0]
 801bbba:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bbbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bbbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801bbc0:	f107 0314 	add.w	r3, r7, #20
 801bbc4:	461a      	mov	r2, r3
 801bbc6:	6879      	ldr	r1, [r7, #4]
 801bbc8:	68b8      	ldr	r0, [r7, #8]
 801bbca:	f7ec fd01 	bl	80085d0 <osThreadNew>
 801bbce:	4603      	mov	r3, r0
#endif
}
 801bbd0:	4618      	mov	r0, r3
 801bbd2:	3738      	adds	r7, #56	@ 0x38
 801bbd4:	46bd      	mov	sp, r7
 801bbd6:	bd80      	pop	{r7, pc}

0801bbd8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801bbd8:	b580      	push	{r7, lr}
 801bbda:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801bbdc:	4b04      	ldr	r3, [pc, #16]	@ (801bbf0 <sys_arch_protect+0x18>)
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	f7ec fe61 	bl	80088ac <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801bbea:	2301      	movs	r3, #1
}
 801bbec:	4618      	mov	r0, r3
 801bbee:	bd80      	pop	{r7, pc}
 801bbf0:	20042720 	.word	0x20042720

0801bbf4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b082      	sub	sp, #8
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801bbfc:	4b04      	ldr	r3, [pc, #16]	@ (801bc10 <sys_arch_unprotect+0x1c>)
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	4618      	mov	r0, r3
 801bc02:	f7ec feb1 	bl	8008968 <osMutexRelease>
}
 801bc06:	bf00      	nop
 801bc08:	3708      	adds	r7, #8
 801bc0a:	46bd      	mov	sp, r7
 801bc0c:	bd80      	pop	{r7, pc}
 801bc0e:	bf00      	nop
 801bc10:	20042720 	.word	0x20042720

0801bc14 <_rclc_check_for_new_data>:
 801bc14:	2800      	cmp	r0, #0
 801bc16:	d046      	beq.n	801bca6 <_rclc_check_for_new_data+0x92>
 801bc18:	4603      	mov	r3, r0
 801bc1a:	b530      	push	{r4, r5, lr}
 801bc1c:	7802      	ldrb	r2, [r0, #0]
 801bc1e:	b085      	sub	sp, #20
 801bc20:	2a0a      	cmp	r2, #10
 801bc22:	d842      	bhi.n	801bcaa <_rclc_check_for_new_data+0x96>
 801bc24:	e8df f002 	tbb	[pc, r2]
 801bc28:	14181212 	.word	0x14181212
 801bc2c:	06060614 	.word	0x06060614
 801bc30:	2e1a      	.short	0x2e1a
 801bc32:	16          	.byte	0x16
 801bc33:	00          	.byte	0x00
 801bc34:	6a0a      	ldr	r2, [r1, #32]
 801bc36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801bc38:	2000      	movs	r0, #0
 801bc3a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801bc3e:	1a12      	subs	r2, r2, r0
 801bc40:	bf18      	it	ne
 801bc42:	2201      	movne	r2, #1
 801bc44:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 801bc48:	b005      	add	sp, #20
 801bc4a:	bd30      	pop	{r4, r5, pc}
 801bc4c:	680a      	ldr	r2, [r1, #0]
 801bc4e:	e7f2      	b.n	801bc36 <_rclc_check_for_new_data+0x22>
 801bc50:	698a      	ldr	r2, [r1, #24]
 801bc52:	e7f0      	b.n	801bc36 <_rclc_check_for_new_data+0x22>
 801bc54:	688a      	ldr	r2, [r1, #8]
 801bc56:	e7ee      	b.n	801bc36 <_rclc_check_for_new_data+0x22>
 801bc58:	690a      	ldr	r2, [r1, #16]
 801bc5a:	e7ec      	b.n	801bc36 <_rclc_check_for_new_data+0x22>
 801bc5c:	685c      	ldr	r4, [r3, #4]
 801bc5e:	4608      	mov	r0, r1
 801bc60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bc64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bc68:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 801bc6c:	f104 0110 	add.w	r1, r4, #16
 801bc70:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801bc74:	9500      	str	r5, [sp, #0]
 801bc76:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 801bc7a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801bc7e:	f003 fbeb 	bl	801f458 <rcl_action_client_wait_set_get_entities_ready>
 801bc82:	e7e1      	b.n	801bc48 <_rclc_check_for_new_data+0x34>
 801bc84:	685c      	ldr	r4, [r3, #4]
 801bc86:	4608      	mov	r0, r1
 801bc88:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 801bc8c:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 801bc90:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801bc94:	e9cd 2100 	strd	r2, r1, [sp]
 801bc98:	f104 0220 	add.w	r2, r4, #32
 801bc9c:	f104 0110 	add.w	r1, r4, #16
 801bca0:	f003 fdf4 	bl	801f88c <rcl_action_server_wait_set_get_entities_ready>
 801bca4:	e7d0      	b.n	801bc48 <_rclc_check_for_new_data+0x34>
 801bca6:	200b      	movs	r0, #11
 801bca8:	4770      	bx	lr
 801bcaa:	2001      	movs	r0, #1
 801bcac:	e7cc      	b.n	801bc48 <_rclc_check_for_new_data+0x34>
 801bcae:	bf00      	nop

0801bcb0 <_rclc_take_new_data>:
 801bcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bcb2:	b09b      	sub	sp, #108	@ 0x6c
 801bcb4:	2800      	cmp	r0, #0
 801bcb6:	f000 8088 	beq.w	801bdca <_rclc_take_new_data+0x11a>
 801bcba:	7803      	ldrb	r3, [r0, #0]
 801bcbc:	4604      	mov	r4, r0
 801bcbe:	2b0a      	cmp	r3, #10
 801bcc0:	f200 8167 	bhi.w	801bf92 <_rclc_take_new_data+0x2e2>
 801bcc4:	e8df f003 	tbb	[pc, r3]
 801bcc8:	44152d2d 	.word	0x44152d2d
 801bccc:	19191944 	.word	0x19191944
 801bcd0:	065a      	.short	0x065a
 801bcd2:	15          	.byte	0x15
 801bcd3:	00          	.byte	0x00
 801bcd4:	6840      	ldr	r0, [r0, #4]
 801bcd6:	f890 3020 	ldrb.w	r3, [r0, #32]
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	f040 80b2 	bne.w	801be44 <_rclc_take_new_data+0x194>
 801bce0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	f040 80e4 	bne.w	801beb2 <_rclc_take_new_data+0x202>
 801bcea:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d16f      	bne.n	801bdd2 <_rclc_take_new_data+0x122>
 801bcf2:	2500      	movs	r5, #0
 801bcf4:	4628      	mov	r0, r5
 801bcf6:	b01b      	add	sp, #108	@ 0x6c
 801bcf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bcfa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801bcfc:	6a0b      	ldr	r3, [r1, #32]
 801bcfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d0f5      	beq.n	801bcf2 <_rclc_take_new_data+0x42>
 801bd06:	6882      	ldr	r2, [r0, #8]
 801bd08:	f100 0110 	add.w	r1, r0, #16
 801bd0c:	6840      	ldr	r0, [r0, #4]
 801bd0e:	f002 f861 	bl	801ddd4 <rcl_take_request>
 801bd12:	4605      	mov	r5, r0
 801bd14:	2800      	cmp	r0, #0
 801bd16:	d0ec      	beq.n	801bcf2 <_rclc_take_new_data+0x42>
 801bd18:	f240 2359 	movw	r3, #601	@ 0x259
 801bd1c:	4298      	cmp	r0, r3
 801bd1e:	d013      	beq.n	801bd48 <_rclc_take_new_data+0x98>
 801bd20:	e029      	b.n	801bd76 <_rclc_take_new_data+0xc6>
 801bd22:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801bd24:	680b      	ldr	r3, [r1, #0]
 801bd26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d0e1      	beq.n	801bcf2 <_rclc_take_new_data+0x42>
 801bd2e:	2300      	movs	r3, #0
 801bd30:	aa0a      	add	r2, sp, #40	@ 0x28
 801bd32:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 801bd36:	f002 f991 	bl	801e05c <rcl_take>
 801bd3a:	4605      	mov	r5, r0
 801bd3c:	2800      	cmp	r0, #0
 801bd3e:	d0d9      	beq.n	801bcf4 <_rclc_take_new_data+0x44>
 801bd40:	f240 1391 	movw	r3, #401	@ 0x191
 801bd44:	4298      	cmp	r0, r3
 801bd46:	d116      	bne.n	801bd76 <_rclc_take_new_data+0xc6>
 801bd48:	2300      	movs	r3, #0
 801bd4a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 801bd4e:	e7d1      	b.n	801bcf4 <_rclc_take_new_data+0x44>
 801bd50:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801bd52:	698b      	ldr	r3, [r1, #24]
 801bd54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d0ca      	beq.n	801bcf2 <_rclc_take_new_data+0x42>
 801bd5c:	6882      	ldr	r2, [r0, #8]
 801bd5e:	f100 0110 	add.w	r1, r0, #16
 801bd62:	6840      	ldr	r0, [r0, #4]
 801bd64:	f001 f9c8 	bl	801d0f8 <rcl_take_response>
 801bd68:	4605      	mov	r5, r0
 801bd6a:	2800      	cmp	r0, #0
 801bd6c:	d0c1      	beq.n	801bcf2 <_rclc_take_new_data+0x42>
 801bd6e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801bd72:	4298      	cmp	r0, r3
 801bd74:	d0be      	beq.n	801bcf4 <_rclc_take_new_data+0x44>
 801bd76:	f000 fea3 	bl	801cac0 <rcutils_reset_error>
 801bd7a:	e7bb      	b.n	801bcf4 <_rclc_take_new_data+0x44>
 801bd7c:	6840      	ldr	r0, [r0, #4]
 801bd7e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d17d      	bne.n	801be82 <_rclc_take_new_data+0x1d2>
 801bd86:	69c3      	ldr	r3, [r0, #28]
 801bd88:	b11b      	cbz	r3, 801bd92 <_rclc_take_new_data+0xe2>
 801bd8a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d144      	bne.n	801be1c <_rclc_take_new_data+0x16c>
 801bd92:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	f040 80ac 	bne.w	801bef4 <_rclc_take_new_data+0x244>
 801bd9c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d0a6      	beq.n	801bcf2 <_rclc_take_new_data+0x42>
 801bda4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801bda6:	a90a      	add	r1, sp, #40	@ 0x28
 801bda8:	3010      	adds	r0, #16
 801bdaa:	f003 fa2d 	bl	801f208 <rcl_action_take_result_response>
 801bdae:	4605      	mov	r5, r0
 801bdb0:	2800      	cmp	r0, #0
 801bdb2:	d1e0      	bne.n	801bd76 <_rclc_take_new_data+0xc6>
 801bdb4:	6860      	ldr	r0, [r4, #4]
 801bdb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801bdba:	f003 fe97 	bl	801faec <rclc_action_find_handle_by_result_request_sequence_number>
 801bdbe:	2800      	cmp	r0, #0
 801bdc0:	d098      	beq.n	801bcf4 <_rclc_take_new_data+0x44>
 801bdc2:	2301      	movs	r3, #1
 801bdc4:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 801bdc8:	e794      	b.n	801bcf4 <_rclc_take_new_data+0x44>
 801bdca:	250b      	movs	r5, #11
 801bdcc:	4628      	mov	r0, r5
 801bdce:	b01b      	add	sp, #108	@ 0x6c
 801bdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bdd2:	ae04      	add	r6, sp, #16
 801bdd4:	3010      	adds	r0, #16
 801bdd6:	aa0a      	add	r2, sp, #40	@ 0x28
 801bdd8:	4631      	mov	r1, r6
 801bdda:	f003 fc8b 	bl	801f6f4 <rcl_action_take_cancel_request>
 801bdde:	4605      	mov	r5, r0
 801bde0:	2800      	cmp	r0, #0
 801bde2:	d1c8      	bne.n	801bd76 <_rclc_take_new_data+0xc6>
 801bde4:	a90a      	add	r1, sp, #40	@ 0x28
 801bde6:	6860      	ldr	r0, [r4, #4]
 801bde8:	f003 fe40 	bl	801fa6c <rclc_action_find_goal_handle_by_uuid>
 801bdec:	4607      	mov	r7, r0
 801bdee:	2800      	cmp	r0, #0
 801bdf0:	f000 80bb 	beq.w	801bf6a <_rclc_take_new_data+0x2ba>
 801bdf4:	2101      	movs	r1, #1
 801bdf6:	f990 0008 	ldrsb.w	r0, [r0, #8]
 801bdfa:	f003 fdc1 	bl	801f980 <rcl_action_transition_goal_state>
 801bdfe:	2803      	cmp	r0, #3
 801be00:	4684      	mov	ip, r0
 801be02:	f040 80a7 	bne.w	801bf54 <_rclc_take_new_data+0x2a4>
 801be06:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 801be0a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801be0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801be0e:	e896 0003 	ldmia.w	r6, {r0, r1}
 801be12:	e884 0003 	stmia.w	r4, {r0, r1}
 801be16:	f887 c008 	strb.w	ip, [r7, #8]
 801be1a:	e76b      	b.n	801bcf4 <_rclc_take_new_data+0x44>
 801be1c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801be1e:	3010      	adds	r0, #16
 801be20:	f003 fa72 	bl	801f308 <rcl_action_take_feedback>
 801be24:	4605      	mov	r5, r0
 801be26:	2800      	cmp	r0, #0
 801be28:	d1a5      	bne.n	801bd76 <_rclc_take_new_data+0xc6>
 801be2a:	6860      	ldr	r0, [r4, #4]
 801be2c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801be2e:	f003 fe1d 	bl	801fa6c <rclc_action_find_goal_handle_by_uuid>
 801be32:	4603      	mov	r3, r0
 801be34:	2800      	cmp	r0, #0
 801be36:	f000 80a3 	beq.w	801bf80 <_rclc_take_new_data+0x2d0>
 801be3a:	2201      	movs	r2, #1
 801be3c:	6860      	ldr	r0, [r4, #4]
 801be3e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 801be42:	e7a6      	b.n	801bd92 <_rclc_take_new_data+0xe2>
 801be44:	f003 fdec 	bl	801fa20 <rclc_action_take_goal_handle>
 801be48:	4606      	mov	r6, r0
 801be4a:	6860      	ldr	r0, [r4, #4]
 801be4c:	2e00      	cmp	r6, #0
 801be4e:	f43f af47 	beq.w	801bce0 <_rclc_take_new_data+0x30>
 801be52:	6070      	str	r0, [r6, #4]
 801be54:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 801be58:	69f2      	ldr	r2, [r6, #28]
 801be5a:	3010      	adds	r0, #16
 801be5c:	f003 fb92 	bl	801f584 <rcl_action_take_goal_request>
 801be60:	4605      	mov	r5, r0
 801be62:	2800      	cmp	r0, #0
 801be64:	f040 808e 	bne.w	801bf84 <_rclc_take_new_data+0x2d4>
 801be68:	69f7      	ldr	r7, [r6, #28]
 801be6a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801be6c:	7235      	strb	r5, [r6, #8]
 801be6e:	f8c6 0009 	str.w	r0, [r6, #9]
 801be72:	f8c6 100d 	str.w	r1, [r6, #13]
 801be76:	6860      	ldr	r0, [r4, #4]
 801be78:	f8c6 2011 	str.w	r2, [r6, #17]
 801be7c:	f8c6 3015 	str.w	r3, [r6, #21]
 801be80:	e72e      	b.n	801bce0 <_rclc_take_new_data+0x30>
 801be82:	aa04      	add	r2, sp, #16
 801be84:	a90a      	add	r1, sp, #40	@ 0x28
 801be86:	3010      	adds	r0, #16
 801be88:	f003 f946 	bl	801f118 <rcl_action_take_goal_response>
 801be8c:	4605      	mov	r5, r0
 801be8e:	2800      	cmp	r0, #0
 801be90:	f47f af71 	bne.w	801bd76 <_rclc_take_new_data+0xc6>
 801be94:	6860      	ldr	r0, [r4, #4]
 801be96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801be9a:	f003 fe15 	bl	801fac8 <rclc_action_find_handle_by_goal_request_sequence_number>
 801be9e:	b130      	cbz	r0, 801beae <_rclc_take_new_data+0x1fe>
 801bea0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801bea4:	2201      	movs	r2, #1
 801bea6:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 801beaa:	f880 2020 	strb.w	r2, [r0, #32]
 801beae:	6860      	ldr	r0, [r4, #4]
 801beb0:	e769      	b.n	801bd86 <_rclc_take_new_data+0xd6>
 801beb2:	3010      	adds	r0, #16
 801beb4:	aa04      	add	r2, sp, #16
 801beb6:	a90a      	add	r1, sp, #40	@ 0x28
 801beb8:	f003 fbdc 	bl	801f674 <rcl_action_take_result_request>
 801bebc:	4605      	mov	r5, r0
 801bebe:	2800      	cmp	r0, #0
 801bec0:	f47f af59 	bne.w	801bd76 <_rclc_take_new_data+0xc6>
 801bec4:	a904      	add	r1, sp, #16
 801bec6:	6860      	ldr	r0, [r4, #4]
 801bec8:	f003 fdd0 	bl	801fa6c <rclc_action_find_goal_handle_by_uuid>
 801becc:	4607      	mov	r7, r0
 801bece:	b160      	cbz	r0, 801beea <_rclc_take_new_data+0x23a>
 801bed0:	ad0a      	add	r5, sp, #40	@ 0x28
 801bed2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 801bed6:	f04f 0c02 	mov.w	ip, #2
 801beda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bedc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bede:	e895 0003 	ldmia.w	r5, {r0, r1}
 801bee2:	e886 0003 	stmia.w	r6, {r0, r1}
 801bee6:	f887 c008 	strb.w	ip, [r7, #8]
 801beea:	6860      	ldr	r0, [r4, #4]
 801beec:	2300      	movs	r3, #0
 801beee:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 801bef2:	e6fa      	b.n	801bcea <_rclc_take_new_data+0x3a>
 801bef4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 801bef8:	a90a      	add	r1, sp, #40	@ 0x28
 801befa:	3010      	adds	r0, #16
 801befc:	f003 f9c4 	bl	801f288 <rcl_action_take_cancel_response>
 801bf00:	4605      	mov	r5, r0
 801bf02:	2800      	cmp	r0, #0
 801bf04:	f47f af37 	bne.w	801bd76 <_rclc_take_new_data+0xc6>
 801bf08:	6860      	ldr	r0, [r4, #4]
 801bf0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801bf0e:	f003 fdff 	bl	801fb10 <rclc_action_find_handle_by_cancel_request_sequence_number>
 801bf12:	4606      	mov	r6, r0
 801bf14:	6860      	ldr	r0, [r4, #4]
 801bf16:	2e00      	cmp	r6, #0
 801bf18:	f43f af40 	beq.w	801bd9c <_rclc_take_new_data+0xec>
 801bf1c:	2701      	movs	r7, #1
 801bf1e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801bf20:	84b7      	strh	r7, [r6, #36]	@ 0x24
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	f43f af3a 	beq.w	801bd9c <_rclc_take_new_data+0xec>
 801bf28:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801bf2a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801bf2e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801bf32:	f003 fd9b 	bl	801fa6c <rclc_action_find_goal_handle_by_uuid>
 801bf36:	b138      	cbz	r0, 801bf48 <_rclc_take_new_data+0x298>
 801bf38:	6860      	ldr	r0, [r4, #4]
 801bf3a:	3501      	adds	r5, #1
 801bf3c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 801bf40:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801bf42:	42ab      	cmp	r3, r5
 801bf44:	d8f0      	bhi.n	801bf28 <_rclc_take_new_data+0x278>
 801bf46:	e729      	b.n	801bd9c <_rclc_take_new_data+0xec>
 801bf48:	6860      	ldr	r0, [r4, #4]
 801bf4a:	3501      	adds	r5, #1
 801bf4c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801bf4e:	42ab      	cmp	r3, r5
 801bf50:	d8ea      	bhi.n	801bf28 <_rclc_take_new_data+0x278>
 801bf52:	e723      	b.n	801bd9c <_rclc_take_new_data+0xec>
 801bf54:	ab06      	add	r3, sp, #24
 801bf56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bf58:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801bf5c:	2103      	movs	r1, #3
 801bf5e:	6860      	ldr	r0, [r4, #4]
 801bf60:	e896 000c 	ldmia.w	r6, {r2, r3}
 801bf64:	f003 fe48 	bl	801fbf8 <rclc_action_server_goal_cancel_reject>
 801bf68:	e6c4      	b.n	801bcf4 <_rclc_take_new_data+0x44>
 801bf6a:	ab06      	add	r3, sp, #24
 801bf6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bf6e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801bf72:	2102      	movs	r1, #2
 801bf74:	6860      	ldr	r0, [r4, #4]
 801bf76:	e896 000c 	ldmia.w	r6, {r2, r3}
 801bf7a:	f003 fe3d 	bl	801fbf8 <rclc_action_server_goal_cancel_reject>
 801bf7e:	e6b9      	b.n	801bcf4 <_rclc_take_new_data+0x44>
 801bf80:	6860      	ldr	r0, [r4, #4]
 801bf82:	e706      	b.n	801bd92 <_rclc_take_new_data+0xe2>
 801bf84:	4631      	mov	r1, r6
 801bf86:	6860      	ldr	r0, [r4, #4]
 801bf88:	f003 fd5a 	bl	801fa40 <rclc_action_remove_used_goal_handle>
 801bf8c:	f000 fd98 	bl	801cac0 <rcutils_reset_error>
 801bf90:	e6b0      	b.n	801bcf4 <_rclc_take_new_data+0x44>
 801bf92:	2501      	movs	r5, #1
 801bf94:	e6ae      	b.n	801bcf4 <_rclc_take_new_data+0x44>
 801bf96:	bf00      	nop

0801bf98 <_rclc_execute.part.0>:
 801bf98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf9a:	7803      	ldrb	r3, [r0, #0]
 801bf9c:	b085      	sub	sp, #20
 801bf9e:	4604      	mov	r4, r0
 801bfa0:	2b0a      	cmp	r3, #10
 801bfa2:	f200 8139 	bhi.w	801c218 <_rclc_execute.part.0+0x280>
 801bfa6:	e8df f003 	tbb	[pc, r3]
 801bfaa:	4268      	.short	0x4268
 801bfac:	06a75b4d 	.word	0x06a75b4d
 801bfb0:	721d0606 	.word	0x721d0606
 801bfb4:	62          	.byte	0x62
 801bfb5:	00          	.byte	0x00
 801bfb6:	2b06      	cmp	r3, #6
 801bfb8:	f000 8126 	beq.w	801c208 <_rclc_execute.part.0+0x270>
 801bfbc:	2b07      	cmp	r3, #7
 801bfbe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801bfc0:	f040 811c 	bne.w	801c1fc <_rclc_execute.part.0+0x264>
 801bfc4:	f104 0510 	add.w	r5, r4, #16
 801bfc8:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 801bfcc:	6880      	ldr	r0, [r0, #8]
 801bfce:	4798      	blx	r3
 801bfd0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801bfd2:	4629      	mov	r1, r5
 801bfd4:	6860      	ldr	r0, [r4, #4]
 801bfd6:	f001 ff3d 	bl	801de54 <rcl_send_response>
 801bfda:	4604      	mov	r4, r0
 801bfdc:	b378      	cbz	r0, 801c03e <_rclc_execute.part.0+0xa6>
 801bfde:	f000 fd6f 	bl	801cac0 <rcutils_reset_error>
 801bfe2:	e02c      	b.n	801c03e <_rclc_execute.part.0+0xa6>
 801bfe4:	6840      	ldr	r0, [r0, #4]
 801bfe6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	f000 808e 	beq.w	801c10c <_rclc_execute.part.0+0x174>
 801bff0:	2600      	movs	r6, #0
 801bff2:	2701      	movs	r7, #1
 801bff4:	e004      	b.n	801c000 <_rclc_execute.part.0+0x68>
 801bff6:	f003 fced 	bl	801f9d4 <rclc_action_send_result_request>
 801bffa:	b998      	cbnz	r0, 801c024 <_rclc_execute.part.0+0x8c>
 801bffc:	722f      	strb	r7, [r5, #8]
 801bffe:	6860      	ldr	r0, [r4, #4]
 801c000:	f003 fd98 	bl	801fb34 <rclc_action_find_first_handle_with_goal_response>
 801c004:	4605      	mov	r5, r0
 801c006:	2800      	cmp	r0, #0
 801c008:	d07f      	beq.n	801c10a <_rclc_execute.part.0+0x172>
 801c00a:	6863      	ldr	r3, [r4, #4]
 801c00c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c00e:	699b      	ldr	r3, [r3, #24]
 801c010:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 801c014:	f885 6020 	strb.w	r6, [r5, #32]
 801c018:	4798      	blx	r3
 801c01a:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 801c01e:	4628      	mov	r0, r5
 801c020:	2b00      	cmp	r3, #0
 801c022:	d1e8      	bne.n	801bff6 <_rclc_execute.part.0+0x5e>
 801c024:	6860      	ldr	r0, [r4, #4]
 801c026:	4629      	mov	r1, r5
 801c028:	f003 fd0a 	bl	801fa40 <rclc_action_remove_used_goal_handle>
 801c02c:	e7e7      	b.n	801bffe <_rclc_execute.part.0+0x66>
 801c02e:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801c032:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 801c036:	b100      	cbz	r0, 801c03a <_rclc_execute.part.0+0xa2>
 801c038:	68a0      	ldr	r0, [r4, #8]
 801c03a:	2400      	movs	r4, #0
 801c03c:	4798      	blx	r3
 801c03e:	4620      	mov	r0, r4
 801c040:	b005      	add	sp, #20
 801c042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c044:	6840      	ldr	r0, [r0, #4]
 801c046:	f002 f91d 	bl	801e284 <rcl_timer_call>
 801c04a:	f240 3321 	movw	r3, #801	@ 0x321
 801c04e:	4604      	mov	r4, r0
 801c050:	4298      	cmp	r0, r3
 801c052:	d001      	beq.n	801c058 <_rclc_execute.part.0+0xc0>
 801c054:	2800      	cmp	r0, #0
 801c056:	d1c2      	bne.n	801bfde <_rclc_execute.part.0+0x46>
 801c058:	2400      	movs	r4, #0
 801c05a:	4620      	mov	r0, r4
 801c05c:	b005      	add	sp, #20
 801c05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c060:	2400      	movs	r4, #0
 801c062:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c064:	6880      	ldr	r0, [r0, #8]
 801c066:	4798      	blx	r3
 801c068:	4620      	mov	r0, r4
 801c06a:	b005      	add	sp, #20
 801c06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c06e:	2400      	movs	r4, #0
 801c070:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c072:	4798      	blx	r3
 801c074:	4620      	mov	r0, r4
 801c076:	b005      	add	sp, #20
 801c078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c07a:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801c07e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c080:	b100      	cbz	r0, 801c084 <_rclc_execute.part.0+0xec>
 801c082:	68a0      	ldr	r0, [r4, #8]
 801c084:	2400      	movs	r4, #0
 801c086:	4798      	blx	r3
 801c088:	4620      	mov	r0, r4
 801c08a:	b005      	add	sp, #20
 801c08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c08e:	6840      	ldr	r0, [r0, #4]
 801c090:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 801c094:	bb3b      	cbnz	r3, 801c0e6 <_rclc_execute.part.0+0x14e>
 801c096:	f890 3020 	ldrb.w	r3, [r0, #32]
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d07d      	beq.n	801c19a <_rclc_execute.part.0+0x202>
 801c09e:	f640 0634 	movw	r6, #2100	@ 0x834
 801c0a2:	2701      	movs	r7, #1
 801c0a4:	e007      	b.n	801c0b6 <_rclc_execute.part.0+0x11e>
 801c0a6:	4628      	mov	r0, r5
 801c0a8:	f003 fd5c 	bl	801fb64 <rclc_action_server_response_goal_request>
 801c0ac:	4629      	mov	r1, r5
 801c0ae:	6860      	ldr	r0, [r4, #4]
 801c0b0:	f003 fcc6 	bl	801fa40 <rclc_action_remove_used_goal_handle>
 801c0b4:	6860      	ldr	r0, [r4, #4]
 801c0b6:	2100      	movs	r1, #0
 801c0b8:	f003 fcee 	bl	801fa98 <rclc_action_find_first_handle_by_status>
 801c0bc:	4605      	mov	r5, r0
 801c0be:	2800      	cmp	r0, #0
 801c0c0:	d068      	beq.n	801c194 <_rclc_execute.part.0+0x1fc>
 801c0c2:	6863      	ldr	r3, [r4, #4]
 801c0c4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c0c6:	699b      	ldr	r3, [r3, #24]
 801c0c8:	4798      	blx	r3
 801c0ca:	42b0      	cmp	r0, r6
 801c0cc:	f04f 0100 	mov.w	r1, #0
 801c0d0:	d1e9      	bne.n	801c0a6 <_rclc_execute.part.0+0x10e>
 801c0d2:	2101      	movs	r1, #1
 801c0d4:	4628      	mov	r0, r5
 801c0d6:	f003 fd45 	bl	801fb64 <rclc_action_server_response_goal_request>
 801c0da:	722f      	strb	r7, [r5, #8]
 801c0dc:	e7ea      	b.n	801c0b4 <_rclc_execute.part.0+0x11c>
 801c0de:	6848      	ldr	r0, [r1, #4]
 801c0e0:	f003 fcae 	bl	801fa40 <rclc_action_remove_used_goal_handle>
 801c0e4:	6860      	ldr	r0, [r4, #4]
 801c0e6:	f003 fce3 	bl	801fab0 <rclc_action_find_first_terminated_handle>
 801c0ea:	4601      	mov	r1, r0
 801c0ec:	2800      	cmp	r0, #0
 801c0ee:	d1f6      	bne.n	801c0de <_rclc_execute.part.0+0x146>
 801c0f0:	6860      	ldr	r0, [r4, #4]
 801c0f2:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 801c0f6:	e7ce      	b.n	801c096 <_rclc_execute.part.0+0xfe>
 801c0f8:	2400      	movs	r4, #0
 801c0fa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c0fc:	f100 0110 	add.w	r1, r0, #16
 801c100:	6880      	ldr	r0, [r0, #8]
 801c102:	4798      	blx	r3
 801c104:	4620      	mov	r0, r4
 801c106:	b005      	add	sp, #20
 801c108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c10a:	6860      	ldr	r0, [r4, #4]
 801c10c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801c110:	b18b      	cbz	r3, 801c136 <_rclc_execute.part.0+0x19e>
 801c112:	68c5      	ldr	r5, [r0, #12]
 801c114:	b32d      	cbz	r5, 801c162 <_rclc_execute.part.0+0x1ca>
 801c116:	2600      	movs	r6, #0
 801c118:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 801c11c:	b143      	cbz	r3, 801c130 <_rclc_execute.part.0+0x198>
 801c11e:	69c3      	ldr	r3, [r0, #28]
 801c120:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 801c124:	b123      	cbz	r3, 801c130 <_rclc_execute.part.0+0x198>
 801c126:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801c128:	4628      	mov	r0, r5
 801c12a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c12c:	4798      	blx	r3
 801c12e:	6860      	ldr	r0, [r4, #4]
 801c130:	682d      	ldr	r5, [r5, #0]
 801c132:	2d00      	cmp	r5, #0
 801c134:	d1f0      	bne.n	801c118 <_rclc_execute.part.0+0x180>
 801c136:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801c13a:	b193      	cbz	r3, 801c162 <_rclc_execute.part.0+0x1ca>
 801c13c:	68c5      	ldr	r5, [r0, #12]
 801c13e:	b185      	cbz	r5, 801c162 <_rclc_execute.part.0+0x1ca>
 801c140:	2600      	movs	r6, #0
 801c142:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 801c146:	b14b      	cbz	r3, 801c15c <_rclc_execute.part.0+0x1c4>
 801c148:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801c14a:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 801c14e:	b12b      	cbz	r3, 801c15c <_rclc_execute.part.0+0x1c4>
 801c150:	4628      	mov	r0, r5
 801c152:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 801c156:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c158:	4798      	blx	r3
 801c15a:	6860      	ldr	r0, [r4, #4]
 801c15c:	682d      	ldr	r5, [r5, #0]
 801c15e:	2d00      	cmp	r5, #0
 801c160:	d1ef      	bne.n	801c142 <_rclc_execute.part.0+0x1aa>
 801c162:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 801c166:	2b00      	cmp	r3, #0
 801c168:	f43f af76 	beq.w	801c058 <_rclc_execute.part.0+0xc0>
 801c16c:	2700      	movs	r7, #0
 801c16e:	e00b      	b.n	801c188 <_rclc_execute.part.0+0x1f0>
 801c170:	6863      	ldr	r3, [r4, #4]
 801c172:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c174:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801c176:	6a1e      	ldr	r6, [r3, #32]
 801c178:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 801c17c:	47b0      	blx	r6
 801c17e:	6860      	ldr	r0, [r4, #4]
 801c180:	4629      	mov	r1, r5
 801c182:	f003 fc5d 	bl	801fa40 <rclc_action_remove_used_goal_handle>
 801c186:	6860      	ldr	r0, [r4, #4]
 801c188:	f003 fce0 	bl	801fb4c <rclc_action_find_first_handle_with_result_response>
 801c18c:	4605      	mov	r5, r0
 801c18e:	2800      	cmp	r0, #0
 801c190:	d1ee      	bne.n	801c170 <_rclc_execute.part.0+0x1d8>
 801c192:	e761      	b.n	801c058 <_rclc_execute.part.0+0xc0>
 801c194:	6860      	ldr	r0, [r4, #4]
 801c196:	f880 5020 	strb.w	r5, [r0, #32]
 801c19a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	f43f af5a 	beq.w	801c058 <_rclc_execute.part.0+0xc0>
 801c1a4:	68c5      	ldr	r5, [r0, #12]
 801c1a6:	b1b5      	cbz	r5, 801c1d6 <_rclc_execute.part.0+0x23e>
 801c1a8:	2602      	movs	r6, #2
 801c1aa:	e001      	b.n	801c1b0 <_rclc_execute.part.0+0x218>
 801c1ac:	682d      	ldr	r5, [r5, #0]
 801c1ae:	b195      	cbz	r5, 801c1d6 <_rclc_execute.part.0+0x23e>
 801c1b0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 801c1b4:	2b03      	cmp	r3, #3
 801c1b6:	d1f9      	bne.n	801c1ac <_rclc_execute.part.0+0x214>
 801c1b8:	69c3      	ldr	r3, [r0, #28]
 801c1ba:	4628      	mov	r0, r5
 801c1bc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c1be:	4798      	blx	r3
 801c1c0:	4603      	mov	r3, r0
 801c1c2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 801c1c6:	4628      	mov	r0, r5
 801c1c8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 801c1cc:	b143      	cbz	r3, 801c1e0 <_rclc_execute.part.0+0x248>
 801c1ce:	f003 fce7 	bl	801fba0 <rclc_action_server_goal_cancel_accept>
 801c1d2:	6860      	ldr	r0, [r4, #4]
 801c1d4:	e7ea      	b.n	801c1ac <_rclc_execute.part.0+0x214>
 801c1d6:	2300      	movs	r3, #0
 801c1d8:	461c      	mov	r4, r3
 801c1da:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 801c1de:	e72e      	b.n	801c03e <_rclc_execute.part.0+0xa6>
 801c1e0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801c1e2:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 801c1e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801c1ea:	2101      	movs	r1, #1
 801c1ec:	6860      	ldr	r0, [r4, #4]
 801c1ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c1f2:	f003 fd01 	bl	801fbf8 <rclc_action_server_goal_cancel_reject>
 801c1f6:	722e      	strb	r6, [r5, #8]
 801c1f8:	6860      	ldr	r0, [r4, #4]
 801c1fa:	e7d7      	b.n	801c1ac <_rclc_execute.part.0+0x214>
 801c1fc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801c1fe:	f104 0510 	add.w	r5, r4, #16
 801c202:	6880      	ldr	r0, [r0, #8]
 801c204:	4798      	blx	r3
 801c206:	e6e3      	b.n	801bfd0 <_rclc_execute.part.0+0x38>
 801c208:	f100 0510 	add.w	r5, r0, #16
 801c20c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c20e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 801c210:	4629      	mov	r1, r5
 801c212:	6880      	ldr	r0, [r0, #8]
 801c214:	4798      	blx	r3
 801c216:	e6db      	b.n	801bfd0 <_rclc_execute.part.0+0x38>
 801c218:	2401      	movs	r4, #1
 801c21a:	e710      	b.n	801c03e <_rclc_execute.part.0+0xa6>

0801c21c <rclc_executor_trigger_any>:
 801c21c:	2800      	cmp	r0, #0
 801c21e:	d03d      	beq.n	801c29c <rclc_executor_trigger_any+0x80>
 801c220:	2900      	cmp	r1, #0
 801c222:	d03c      	beq.n	801c29e <rclc_executor_trigger_any+0x82>
 801c224:	4603      	mov	r3, r0
 801c226:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 801c22a:	2200      	movs	r2, #0
 801c22c:	2800      	cmp	r0, #0
 801c22e:	d035      	beq.n	801c29c <rclc_executor_trigger_any+0x80>
 801c230:	b430      	push	{r4, r5}
 801c232:	f893 c000 	ldrb.w	ip, [r3]
 801c236:	f1bc 0f08 	cmp.w	ip, #8
 801c23a:	d11d      	bne.n	801c278 <rclc_executor_trigger_any+0x5c>
 801c23c:	685c      	ldr	r4, [r3, #4]
 801c23e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 801c240:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 801c244:	d105      	bne.n	801c252 <rclc_executor_trigger_any+0x36>
 801c246:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 801c24a:	b910      	cbnz	r0, 801c252 <rclc_executor_trigger_any+0x36>
 801c24c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 801c250:	b128      	cbz	r0, 801c25e <rclc_executor_trigger_any+0x42>
 801c252:	bc30      	pop	{r4, r5}
 801c254:	4770      	bx	lr
 801c256:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 801c25a:	2800      	cmp	r0, #0
 801c25c:	d1f9      	bne.n	801c252 <rclc_executor_trigger_any+0x36>
 801c25e:	3201      	adds	r2, #1
 801c260:	3340      	adds	r3, #64	@ 0x40
 801c262:	4291      	cmp	r1, r2
 801c264:	d017      	beq.n	801c296 <rclc_executor_trigger_any+0x7a>
 801c266:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 801c26a:	2800      	cmp	r0, #0
 801c26c:	d0f1      	beq.n	801c252 <rclc_executor_trigger_any+0x36>
 801c26e:	f893 c000 	ldrb.w	ip, [r3]
 801c272:	f1bc 0f08 	cmp.w	ip, #8
 801c276:	d0e1      	beq.n	801c23c <rclc_executor_trigger_any+0x20>
 801c278:	f1bc 0f09 	cmp.w	ip, #9
 801c27c:	d1eb      	bne.n	801c256 <rclc_executor_trigger_any+0x3a>
 801c27e:	685c      	ldr	r4, [r3, #4]
 801c280:	6a25      	ldr	r5, [r4, #32]
 801c282:	2d00      	cmp	r5, #0
 801c284:	d1e5      	bne.n	801c252 <rclc_executor_trigger_any+0x36>
 801c286:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 801c28a:	2800      	cmp	r0, #0
 801c28c:	d1e1      	bne.n	801c252 <rclc_executor_trigger_any+0x36>
 801c28e:	3201      	adds	r2, #1
 801c290:	3340      	adds	r3, #64	@ 0x40
 801c292:	4291      	cmp	r1, r2
 801c294:	d1e7      	bne.n	801c266 <rclc_executor_trigger_any+0x4a>
 801c296:	2000      	movs	r0, #0
 801c298:	bc30      	pop	{r4, r5}
 801c29a:	4770      	bx	lr
 801c29c:	4770      	bx	lr
 801c29e:	4608      	mov	r0, r1
 801c2a0:	4770      	bx	lr
 801c2a2:	bf00      	nop
 801c2a4:	0000      	movs	r0, r0
	...

0801c2a8 <rclc_executor_init>:
 801c2a8:	2900      	cmp	r1, #0
 801c2aa:	d06a      	beq.n	801c382 <rclc_executor_init+0xda>
 801c2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2b0:	4605      	mov	r5, r0
 801c2b2:	b0b0      	sub	sp, #192	@ 0xc0
 801c2b4:	2800      	cmp	r0, #0
 801c2b6:	d05c      	beq.n	801c372 <rclc_executor_init+0xca>
 801c2b8:	4616      	mov	r6, r2
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	4688      	mov	r8, r1
 801c2be:	461f      	mov	r7, r3
 801c2c0:	f000 fbda 	bl	801ca78 <rcutils_allocator_is_valid>
 801c2c4:	2e00      	cmp	r6, #0
 801c2c6:	d054      	beq.n	801c372 <rclc_executor_init+0xca>
 801c2c8:	f080 0401 	eor.w	r4, r0, #1
 801c2cc:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 801c2d0:	d14f      	bne.n	801c372 <rclc_executor_init+0xca>
 801c2d2:	2288      	movs	r2, #136	@ 0x88
 801c2d4:	4930      	ldr	r1, [pc, #192]	@ (801c398 <rclc_executor_init+0xf0>)
 801c2d6:	a80e      	add	r0, sp, #56	@ 0x38
 801c2d8:	f00d fac7 	bl	802986a <memcpy>
 801c2dc:	a90e      	add	r1, sp, #56	@ 0x38
 801c2de:	2288      	movs	r2, #136	@ 0x88
 801c2e0:	4628      	mov	r0, r5
 801c2e2:	f00d fac2 	bl	802986a <memcpy>
 801c2e6:	4668      	mov	r0, sp
 801c2e8:	f8c5 8000 	str.w	r8, [r5]
 801c2ec:	60ae      	str	r6, [r5, #8]
 801c2ee:	f002 f93f 	bl	801e570 <rcl_get_zero_initialized_wait_set>
 801c2f2:	46ec      	mov	ip, sp
 801c2f4:	f105 0e14 	add.w	lr, r5, #20
 801c2f8:	f8d7 8000 	ldr.w	r8, [r7]
 801c2fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c300:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c304:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c308:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c30c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c310:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 801c390 <rclc_executor_init+0xe8>
 801c314:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c318:	f8dc 3000 	ldr.w	r3, [ip]
 801c31c:	01b0      	lsls	r0, r6, #6
 801c31e:	6939      	ldr	r1, [r7, #16]
 801c320:	f8ce 3000 	str.w	r3, [lr]
 801c324:	612f      	str	r7, [r5, #16]
 801c326:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 801c32a:	47c0      	blx	r8
 801c32c:	6068      	str	r0, [r5, #4]
 801c32e:	b908      	cbnz	r0, 801c334 <rclc_executor_init+0x8c>
 801c330:	e029      	b.n	801c386 <rclc_executor_init+0xde>
 801c332:	6868      	ldr	r0, [r5, #4]
 801c334:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 801c338:	3401      	adds	r4, #1
 801c33a:	4631      	mov	r1, r6
 801c33c:	f000 fa7c 	bl	801c838 <rclc_executor_handle_init>
 801c340:	42a6      	cmp	r6, r4
 801c342:	d8f6      	bhi.n	801c332 <rclc_executor_init+0x8a>
 801c344:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 801c348:	f000 fa6a 	bl	801c820 <rclc_executor_handle_counters_zero_init>
 801c34c:	4a13      	ldr	r2, [pc, #76]	@ (801c39c <rclc_executor_init+0xf4>)
 801c34e:	2300      	movs	r3, #0
 801c350:	6868      	ldr	r0, [r5, #4]
 801c352:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 801c356:	b168      	cbz	r0, 801c374 <rclc_executor_init+0xcc>
 801c358:	68ab      	ldr	r3, [r5, #8]
 801c35a:	b173      	cbz	r3, 801c37a <rclc_executor_init+0xd2>
 801c35c:	692a      	ldr	r2, [r5, #16]
 801c35e:	fab2 f382 	clz	r3, r2
 801c362:	095b      	lsrs	r3, r3, #5
 801c364:	b14a      	cbz	r2, 801c37a <rclc_executor_init+0xd2>
 801c366:	4618      	mov	r0, r3
 801c368:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 801c36c:	b030      	add	sp, #192	@ 0xc0
 801c36e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c372:	200b      	movs	r0, #11
 801c374:	b030      	add	sp, #192	@ 0xc0
 801c376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c37a:	2000      	movs	r0, #0
 801c37c:	b030      	add	sp, #192	@ 0xc0
 801c37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c382:	200b      	movs	r0, #11
 801c384:	4770      	bx	lr
 801c386:	200a      	movs	r0, #10
 801c388:	e7f4      	b.n	801c374 <rclc_executor_init+0xcc>
 801c38a:	bf00      	nop
 801c38c:	f3af 8000 	nop.w
 801c390:	3b9aca00 	.word	0x3b9aca00
 801c394:	00000000 	.word	0x00000000
 801c398:	0802f528 	.word	0x0802f528
 801c39c:	0801c21d 	.word	0x0801c21d

0801c3a0 <rclc_executor_add_subscription>:
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	bf18      	it	ne
 801c3a4:	2a00      	cmpne	r2, #0
 801c3a6:	b570      	push	{r4, r5, r6, lr}
 801c3a8:	4604      	mov	r4, r0
 801c3aa:	bf0c      	ite	eq
 801c3ac:	2001      	moveq	r0, #1
 801c3ae:	2000      	movne	r0, #0
 801c3b0:	f89d c010 	ldrb.w	ip, [sp, #16]
 801c3b4:	2900      	cmp	r1, #0
 801c3b6:	bf08      	it	eq
 801c3b8:	f040 0001 	orreq.w	r0, r0, #1
 801c3bc:	bb28      	cbnz	r0, 801c40a <rclc_executor_add_subscription+0x6a>
 801c3be:	fab4 f584 	clz	r5, r4
 801c3c2:	096d      	lsrs	r5, r5, #5
 801c3c4:	b30c      	cbz	r4, 801c40a <rclc_executor_add_subscription+0x6a>
 801c3c6:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 801c3ca:	4286      	cmp	r6, r0
 801c3cc:	d301      	bcc.n	801c3d2 <rclc_executor_add_subscription+0x32>
 801c3ce:	2001      	movs	r0, #1
 801c3d0:	bd70      	pop	{r4, r5, r6, pc}
 801c3d2:	6860      	ldr	r0, [r4, #4]
 801c3d4:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 801c3d8:	f800 500e 	strb.w	r5, [r0, lr]
 801c3dc:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 801c3e0:	3601      	adds	r6, #1
 801c3e2:	6303      	str	r3, [r0, #48]	@ 0x30
 801c3e4:	2301      	movs	r3, #1
 801c3e6:	62c5      	str	r5, [r0, #44]	@ 0x2c
 801c3e8:	f104 0514 	add.w	r5, r4, #20
 801c3ec:	f880 c001 	strb.w	ip, [r0, #1]
 801c3f0:	8703      	strh	r3, [r0, #56]	@ 0x38
 801c3f2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801c3f6:	4628      	mov	r0, r5
 801c3f8:	60e6      	str	r6, [r4, #12]
 801c3fa:	f002 f8cd 	bl	801e598 <rcl_wait_set_is_valid>
 801c3fe:	b930      	cbnz	r0, 801c40e <rclc_executor_add_subscription+0x6e>
 801c400:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 801c402:	2000      	movs	r0, #0
 801c404:	3301      	adds	r3, #1
 801c406:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c408:	bd70      	pop	{r4, r5, r6, pc}
 801c40a:	200b      	movs	r0, #11
 801c40c:	bd70      	pop	{r4, r5, r6, pc}
 801c40e:	4628      	mov	r0, r5
 801c410:	f002 f8c8 	bl	801e5a4 <rcl_wait_set_fini>
 801c414:	2800      	cmp	r0, #0
 801c416:	d0f3      	beq.n	801c400 <rclc_executor_add_subscription+0x60>
 801c418:	bd70      	pop	{r4, r5, r6, pc}
 801c41a:	bf00      	nop

0801c41c <rclc_executor_prepare>:
 801c41c:	2800      	cmp	r0, #0
 801c41e:	d044      	beq.n	801c4aa <rclc_executor_prepare+0x8e>
 801c420:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c422:	f100 0514 	add.w	r5, r0, #20
 801c426:	b09b      	sub	sp, #108	@ 0x6c
 801c428:	4604      	mov	r4, r0
 801c42a:	4628      	mov	r0, r5
 801c42c:	f002 f8b4 	bl	801e598 <rcl_wait_set_is_valid>
 801c430:	b110      	cbz	r0, 801c438 <rclc_executor_prepare+0x1c>
 801c432:	2000      	movs	r0, #0
 801c434:	b01b      	add	sp, #108	@ 0x6c
 801c436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c438:	4628      	mov	r0, r5
 801c43a:	f002 f8b3 	bl	801e5a4 <rcl_wait_set_fini>
 801c43e:	2800      	cmp	r0, #0
 801c440:	d130      	bne.n	801c4a4 <rclc_executor_prepare+0x88>
 801c442:	a80c      	add	r0, sp, #48	@ 0x30
 801c444:	ae04      	add	r6, sp, #16
 801c446:	f002 f893 	bl	801e570 <rcl_get_zero_initialized_wait_set>
 801c44a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801c44e:	46ae      	mov	lr, r5
 801c450:	6927      	ldr	r7, [r4, #16]
 801c452:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c456:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c45a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c45e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c462:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c466:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c46a:	f8dc 3000 	ldr.w	r3, [ip]
 801c46e:	f8ce 3000 	str.w	r3, [lr]
 801c472:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801c474:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c476:	683b      	ldr	r3, [r7, #0]
 801c478:	4628      	mov	r0, r5
 801c47a:	6822      	ldr	r2, [r4, #0]
 801c47c:	6033      	str	r3, [r6, #0]
 801c47e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c480:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 801c482:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801c486:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 801c48a:	e9cd 2100 	strd	r2, r1, [sp]
 801c48e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801c490:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801c492:	f002 fb87 	bl	801eba4 <rcl_wait_set_init>
 801c496:	2800      	cmp	r0, #0
 801c498:	d0cc      	beq.n	801c434 <rclc_executor_prepare+0x18>
 801c49a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801c49c:	f000 fb10 	bl	801cac0 <rcutils_reset_error>
 801c4a0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c4a2:	e7c7      	b.n	801c434 <rclc_executor_prepare+0x18>
 801c4a4:	f000 fb0c 	bl	801cac0 <rcutils_reset_error>
 801c4a8:	e7cb      	b.n	801c442 <rclc_executor_prepare+0x26>
 801c4aa:	200b      	movs	r0, #11
 801c4ac:	4770      	bx	lr
 801c4ae:	bf00      	nop

0801c4b0 <rclc_executor_spin_some.part.0>:
 801c4b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4b4:	4605      	mov	r5, r0
 801c4b6:	4691      	mov	r9, r2
 801c4b8:	4698      	mov	r8, r3
 801c4ba:	f7ff ffaf 	bl	801c41c <rclc_executor_prepare>
 801c4be:	f105 0614 	add.w	r6, r5, #20
 801c4c2:	4630      	mov	r0, r6
 801c4c4:	f002 f93a 	bl	801e73c <rcl_wait_set_clear>
 801c4c8:	4607      	mov	r7, r0
 801c4ca:	2800      	cmp	r0, #0
 801c4cc:	f040 80a8 	bne.w	801c620 <rclc_executor_spin_some.part.0+0x170>
 801c4d0:	68ab      	ldr	r3, [r5, #8]
 801c4d2:	b30b      	cbz	r3, 801c518 <rclc_executor_spin_some.part.0+0x68>
 801c4d4:	4604      	mov	r4, r0
 801c4d6:	6869      	ldr	r1, [r5, #4]
 801c4d8:	01a2      	lsls	r2, r4, #6
 801c4da:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 801c4de:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 801c4e2:	b1cb      	cbz	r3, 801c518 <rclc_executor_spin_some.part.0+0x68>
 801c4e4:	5c8b      	ldrb	r3, [r1, r2]
 801c4e6:	2b0a      	cmp	r3, #10
 801c4e8:	f200 80de 	bhi.w	801c6a8 <rclc_executor_spin_some.part.0+0x1f8>
 801c4ec:	e8df f003 	tbb	[pc, r3]
 801c4f0:	8da99d9d 	.word	0x8da99d9d
 801c4f4:	0606068d 	.word	0x0606068d
 801c4f8:	c1ce      	.short	0xc1ce
 801c4fa:	b5          	.byte	0xb5
 801c4fb:	00          	.byte	0x00
 801c4fc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801c500:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801c504:	4630      	mov	r0, r6
 801c506:	f002 fc69 	bl	801eddc <rcl_wait_set_add_service>
 801c50a:	2800      	cmp	r0, #0
 801c50c:	f040 8087 	bne.w	801c61e <rclc_executor_spin_some.part.0+0x16e>
 801c510:	3401      	adds	r4, #1
 801c512:	68ab      	ldr	r3, [r5, #8]
 801c514:	429c      	cmp	r4, r3
 801c516:	d3de      	bcc.n	801c4d6 <rclc_executor_spin_some.part.0+0x26>
 801c518:	4643      	mov	r3, r8
 801c51a:	464a      	mov	r2, r9
 801c51c:	4630      	mov	r0, r6
 801c51e:	f002 fc8b 	bl	801ee38 <rcl_wait>
 801c522:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 801c526:	2b00      	cmp	r3, #0
 801c528:	f000 80c6 	beq.w	801c6b8 <rclc_executor_spin_some.part.0+0x208>
 801c52c:	2b01      	cmp	r3, #1
 801c52e:	f040 80bb 	bne.w	801c6a8 <rclc_executor_spin_some.part.0+0x1f8>
 801c532:	68ab      	ldr	r3, [r5, #8]
 801c534:	2b00      	cmp	r3, #0
 801c536:	f000 8159 	beq.w	801c7ec <rclc_executor_spin_some.part.0+0x33c>
 801c53a:	2400      	movs	r4, #0
 801c53c:	f240 1991 	movw	r9, #401	@ 0x191
 801c540:	46a0      	mov	r8, r4
 801c542:	e00a      	b.n	801c55a <rclc_executor_spin_some.part.0+0xaa>
 801c544:	f7ff fb66 	bl	801bc14 <_rclc_check_for_new_data>
 801c548:	4604      	mov	r4, r0
 801c54a:	b110      	cbz	r0, 801c552 <rclc_executor_spin_some.part.0+0xa2>
 801c54c:	4548      	cmp	r0, r9
 801c54e:	f040 80b1 	bne.w	801c6b4 <rclc_executor_spin_some.part.0+0x204>
 801c552:	68ab      	ldr	r3, [r5, #8]
 801c554:	4598      	cmp	r8, r3
 801c556:	f080 8126 	bcs.w	801c7a6 <rclc_executor_spin_some.part.0+0x2f6>
 801c55a:	686a      	ldr	r2, [r5, #4]
 801c55c:	4631      	mov	r1, r6
 801c55e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801c562:	f108 0801 	add.w	r8, r8, #1
 801c566:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801c56a:	f1bc 0f00 	cmp.w	ip, #0
 801c56e:	d1e9      	bne.n	801c544 <rclc_executor_spin_some.part.0+0x94>
 801c570:	4619      	mov	r1, r3
 801c572:	4610      	mov	r0, r2
 801c574:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 801c578:	4798      	blx	r3
 801c57a:	2800      	cmp	r0, #0
 801c57c:	f000 809a 	beq.w	801c6b4 <rclc_executor_spin_some.part.0+0x204>
 801c580:	68ab      	ldr	r3, [r5, #8]
 801c582:	2b00      	cmp	r3, #0
 801c584:	f000 8096 	beq.w	801c6b4 <rclc_executor_spin_some.part.0+0x204>
 801c588:	f04f 0800 	mov.w	r8, #0
 801c58c:	f240 1991 	movw	r9, #401	@ 0x191
 801c590:	e009      	b.n	801c5a6 <rclc_executor_spin_some.part.0+0xf6>
 801c592:	f7ff fb8d 	bl	801bcb0 <_rclc_take_new_data>
 801c596:	4604      	mov	r4, r0
 801c598:	b110      	cbz	r0, 801c5a0 <rclc_executor_spin_some.part.0+0xf0>
 801c59a:	4548      	cmp	r0, r9
 801c59c:	f040 808a 	bne.w	801c6b4 <rclc_executor_spin_some.part.0+0x204>
 801c5a0:	68ab      	ldr	r3, [r5, #8]
 801c5a2:	4598      	cmp	r8, r3
 801c5a4:	d209      	bcs.n	801c5ba <rclc_executor_spin_some.part.0+0x10a>
 801c5a6:	6868      	ldr	r0, [r5, #4]
 801c5a8:	4631      	mov	r1, r6
 801c5aa:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 801c5ae:	f108 0801 	add.w	r8, r8, #1
 801c5b2:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 801c5b6:	2a00      	cmp	r2, #0
 801c5b8:	d1eb      	bne.n	801c592 <rclc_executor_spin_some.part.0+0xe2>
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d07a      	beq.n	801c6b4 <rclc_executor_spin_some.part.0+0x204>
 801c5be:	2600      	movs	r6, #0
 801c5c0:	e00e      	b.n	801c5e0 <rclc_executor_spin_some.part.0+0x130>
 801c5c2:	f812 200c 	ldrb.w	r2, [r2, ip]
 801c5c6:	2a08      	cmp	r2, #8
 801c5c8:	f000 80fc 	beq.w	801c7c4 <rclc_executor_spin_some.part.0+0x314>
 801c5cc:	2a09      	cmp	r2, #9
 801c5ce:	f000 80ee 	beq.w	801c7ae <rclc_executor_spin_some.part.0+0x2fe>
 801c5d2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 801c5d6:	b98a      	cbnz	r2, 801c5fc <rclc_executor_spin_some.part.0+0x14c>
 801c5d8:	3601      	adds	r6, #1
 801c5da:	429e      	cmp	r6, r3
 801c5dc:	d267      	bcs.n	801c6ae <rclc_executor_spin_some.part.0+0x1fe>
 801c5de:	2400      	movs	r4, #0
 801c5e0:	686a      	ldr	r2, [r5, #4]
 801c5e2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 801c5e6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801c5ea:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 801c5ee:	2900      	cmp	r1, #0
 801c5f0:	d060      	beq.n	801c6b4 <rclc_executor_spin_some.part.0+0x204>
 801c5f2:	7841      	ldrb	r1, [r0, #1]
 801c5f4:	2900      	cmp	r1, #0
 801c5f6:	d0e4      	beq.n	801c5c2 <rclc_executor_spin_some.part.0+0x112>
 801c5f8:	2901      	cmp	r1, #1
 801c5fa:	d1ed      	bne.n	801c5d8 <rclc_executor_spin_some.part.0+0x128>
 801c5fc:	f7ff fccc 	bl	801bf98 <_rclc_execute.part.0>
 801c600:	2800      	cmp	r0, #0
 801c602:	f040 80b5 	bne.w	801c770 <rclc_executor_spin_some.part.0+0x2c0>
 801c606:	68ab      	ldr	r3, [r5, #8]
 801c608:	e7e6      	b.n	801c5d8 <rclc_executor_spin_some.part.0+0x128>
 801c60a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801c60e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801c612:	4630      	mov	r0, r6
 801c614:	f002 fbb6 	bl	801ed84 <rcl_wait_set_add_client>
 801c618:	2800      	cmp	r0, #0
 801c61a:	f43f af79 	beq.w	801c510 <rclc_executor_spin_some.part.0+0x60>
 801c61e:	4607      	mov	r7, r0
 801c620:	f000 fa4e 	bl	801cac0 <rcutils_reset_error>
 801c624:	4638      	mov	r0, r7
 801c626:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c62a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801c62e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801c632:	4630      	mov	r0, r6
 801c634:	f002 f856 	bl	801e6e4 <rcl_wait_set_add_subscription>
 801c638:	2800      	cmp	r0, #0
 801c63a:	f43f af69 	beq.w	801c510 <rclc_executor_spin_some.part.0+0x60>
 801c63e:	4607      	mov	r7, r0
 801c640:	e7ee      	b.n	801c620 <rclc_executor_spin_some.part.0+0x170>
 801c642:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801c646:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801c64a:	4630      	mov	r0, r6
 801c64c:	f002 fb6a 	bl	801ed24 <rcl_wait_set_add_timer>
 801c650:	2800      	cmp	r0, #0
 801c652:	f43f af5d 	beq.w	801c510 <rclc_executor_spin_some.part.0+0x60>
 801c656:	4607      	mov	r7, r0
 801c658:	e7e2      	b.n	801c620 <rclc_executor_spin_some.part.0+0x170>
 801c65a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801c65e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801c662:	4630      	mov	r0, r6
 801c664:	f002 fb32 	bl	801eccc <rcl_wait_set_add_guard_condition>
 801c668:	2800      	cmp	r0, #0
 801c66a:	f43f af51 	beq.w	801c510 <rclc_executor_spin_some.part.0+0x60>
 801c66e:	4607      	mov	r7, r0
 801c670:	e7d6      	b.n	801c620 <rclc_executor_spin_some.part.0+0x170>
 801c672:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801c676:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801c67a:	4630      	mov	r0, r6
 801c67c:	3110      	adds	r1, #16
 801c67e:	f003 f8b1 	bl	801f7e4 <rcl_action_wait_set_add_action_server>
 801c682:	2800      	cmp	r0, #0
 801c684:	f43f af44 	beq.w	801c510 <rclc_executor_spin_some.part.0+0x60>
 801c688:	4607      	mov	r7, r0
 801c68a:	e7c9      	b.n	801c620 <rclc_executor_spin_some.part.0+0x170>
 801c68c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801c690:	2300      	movs	r3, #0
 801c692:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801c696:	4630      	mov	r0, r6
 801c698:	3110      	adds	r1, #16
 801c69a:	f002 fe79 	bl	801f390 <rcl_action_wait_set_add_action_client>
 801c69e:	2800      	cmp	r0, #0
 801c6a0:	f43f af36 	beq.w	801c510 <rclc_executor_spin_some.part.0+0x60>
 801c6a4:	4607      	mov	r7, r0
 801c6a6:	e7bb      	b.n	801c620 <rclc_executor_spin_some.part.0+0x170>
 801c6a8:	2701      	movs	r7, #1
 801c6aa:	f000 fa09 	bl	801cac0 <rcutils_reset_error>
 801c6ae:	4638      	mov	r0, r7
 801c6b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6b4:	4627      	mov	r7, r4
 801c6b6:	e7fa      	b.n	801c6ae <rclc_executor_spin_some.part.0+0x1fe>
 801c6b8:	68ab      	ldr	r3, [r5, #8]
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	f000 8093 	beq.w	801c7e6 <rclc_executor_spin_some.part.0+0x336>
 801c6c0:	2400      	movs	r4, #0
 801c6c2:	f240 1991 	movw	r9, #401	@ 0x191
 801c6c6:	46a0      	mov	r8, r4
 801c6c8:	e008      	b.n	801c6dc <rclc_executor_spin_some.part.0+0x22c>
 801c6ca:	f7ff faa3 	bl	801bc14 <_rclc_check_for_new_data>
 801c6ce:	4604      	mov	r4, r0
 801c6d0:	b108      	cbz	r0, 801c6d6 <rclc_executor_spin_some.part.0+0x226>
 801c6d2:	4548      	cmp	r0, r9
 801c6d4:	d1ee      	bne.n	801c6b4 <rclc_executor_spin_some.part.0+0x204>
 801c6d6:	68ab      	ldr	r3, [r5, #8]
 801c6d8:	4598      	cmp	r8, r3
 801c6da:	d266      	bcs.n	801c7aa <rclc_executor_spin_some.part.0+0x2fa>
 801c6dc:	686a      	ldr	r2, [r5, #4]
 801c6de:	4631      	mov	r1, r6
 801c6e0:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801c6e4:	f108 0801 	add.w	r8, r8, #1
 801c6e8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801c6ec:	f1bc 0f00 	cmp.w	ip, #0
 801c6f0:	d1eb      	bne.n	801c6ca <rclc_executor_spin_some.part.0+0x21a>
 801c6f2:	4619      	mov	r1, r3
 801c6f4:	4610      	mov	r0, r2
 801c6f6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 801c6fa:	4798      	blx	r3
 801c6fc:	2800      	cmp	r0, #0
 801c6fe:	d0d9      	beq.n	801c6b4 <rclc_executor_spin_some.part.0+0x204>
 801c700:	68ab      	ldr	r3, [r5, #8]
 801c702:	2b00      	cmp	r3, #0
 801c704:	d0d6      	beq.n	801c6b4 <rclc_executor_spin_some.part.0+0x204>
 801c706:	f04f 0a00 	mov.w	sl, #0
 801c70a:	f240 1891 	movw	r8, #401	@ 0x191
 801c70e:	f240 2959 	movw	r9, #601	@ 0x259
 801c712:	e00e      	b.n	801c732 <rclc_executor_spin_some.part.0+0x282>
 801c714:	f813 300b 	ldrb.w	r3, [r3, fp]
 801c718:	2b08      	cmp	r3, #8
 801c71a:	d034      	beq.n	801c786 <rclc_executor_spin_some.part.0+0x2d6>
 801c71c:	2b09      	cmp	r3, #9
 801c71e:	d029      	beq.n	801c774 <rclc_executor_spin_some.part.0+0x2c4>
 801c720:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 801c724:	bb03      	cbnz	r3, 801c768 <rclc_executor_spin_some.part.0+0x2b8>
 801c726:	f10a 0a01 	add.w	sl, sl, #1
 801c72a:	68ab      	ldr	r3, [r5, #8]
 801c72c:	459a      	cmp	sl, r3
 801c72e:	d2be      	bcs.n	801c6ae <rclc_executor_spin_some.part.0+0x1fe>
 801c730:	2400      	movs	r4, #0
 801c732:	6868      	ldr	r0, [r5, #4]
 801c734:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 801c738:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 801c73c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801c740:	2b00      	cmp	r3, #0
 801c742:	d0b7      	beq.n	801c6b4 <rclc_executor_spin_some.part.0+0x204>
 801c744:	4631      	mov	r1, r6
 801c746:	f7ff fab3 	bl	801bcb0 <_rclc_take_new_data>
 801c74a:	2800      	cmp	r0, #0
 801c74c:	bf18      	it	ne
 801c74e:	4540      	cmpne	r0, r8
 801c750:	d001      	beq.n	801c756 <rclc_executor_spin_some.part.0+0x2a6>
 801c752:	4548      	cmp	r0, r9
 801c754:	d10c      	bne.n	801c770 <rclc_executor_spin_some.part.0+0x2c0>
 801c756:	686b      	ldr	r3, [r5, #4]
 801c758:	eb13 000b 	adds.w	r0, r3, fp
 801c75c:	d021      	beq.n	801c7a2 <rclc_executor_spin_some.part.0+0x2f2>
 801c75e:	7842      	ldrb	r2, [r0, #1]
 801c760:	2a00      	cmp	r2, #0
 801c762:	d0d7      	beq.n	801c714 <rclc_executor_spin_some.part.0+0x264>
 801c764:	2a01      	cmp	r2, #1
 801c766:	d1de      	bne.n	801c726 <rclc_executor_spin_some.part.0+0x276>
 801c768:	f7ff fc16 	bl	801bf98 <_rclc_execute.part.0>
 801c76c:	2800      	cmp	r0, #0
 801c76e:	d0da      	beq.n	801c726 <rclc_executor_spin_some.part.0+0x276>
 801c770:	4607      	mov	r7, r0
 801c772:	e79c      	b.n	801c6ae <rclc_executor_spin_some.part.0+0x1fe>
 801c774:	6843      	ldr	r3, [r0, #4]
 801c776:	6a1a      	ldr	r2, [r3, #32]
 801c778:	2a00      	cmp	r2, #0
 801c77a:	d1f5      	bne.n	801c768 <rclc_executor_spin_some.part.0+0x2b8>
 801c77c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801c780:	2b00      	cmp	r3, #0
 801c782:	d0d0      	beq.n	801c726 <rclc_executor_spin_some.part.0+0x276>
 801c784:	e7f0      	b.n	801c768 <rclc_executor_spin_some.part.0+0x2b8>
 801c786:	6843      	ldr	r3, [r0, #4]
 801c788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801c78a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801c78e:	d1eb      	bne.n	801c768 <rclc_executor_spin_some.part.0+0x2b8>
 801c790:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801c794:	2a00      	cmp	r2, #0
 801c796:	d1e7      	bne.n	801c768 <rclc_executor_spin_some.part.0+0x2b8>
 801c798:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d0c2      	beq.n	801c726 <rclc_executor_spin_some.part.0+0x276>
 801c7a0:	e7e2      	b.n	801c768 <rclc_executor_spin_some.part.0+0x2b8>
 801c7a2:	270b      	movs	r7, #11
 801c7a4:	e783      	b.n	801c6ae <rclc_executor_spin_some.part.0+0x1fe>
 801c7a6:	686a      	ldr	r2, [r5, #4]
 801c7a8:	e6e2      	b.n	801c570 <rclc_executor_spin_some.part.0+0xc0>
 801c7aa:	686a      	ldr	r2, [r5, #4]
 801c7ac:	e7a1      	b.n	801c6f2 <rclc_executor_spin_some.part.0+0x242>
 801c7ae:	6842      	ldr	r2, [r0, #4]
 801c7b0:	6a11      	ldr	r1, [r2, #32]
 801c7b2:	2900      	cmp	r1, #0
 801c7b4:	f47f af22 	bne.w	801c5fc <rclc_executor_spin_some.part.0+0x14c>
 801c7b8:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 801c7bc:	2a00      	cmp	r2, #0
 801c7be:	f43f af0b 	beq.w	801c5d8 <rclc_executor_spin_some.part.0+0x128>
 801c7c2:	e71b      	b.n	801c5fc <rclc_executor_spin_some.part.0+0x14c>
 801c7c4:	6842      	ldr	r2, [r0, #4]
 801c7c6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 801c7c8:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 801c7cc:	f47f af16 	bne.w	801c5fc <rclc_executor_spin_some.part.0+0x14c>
 801c7d0:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 801c7d4:	2900      	cmp	r1, #0
 801c7d6:	f47f af11 	bne.w	801c5fc <rclc_executor_spin_some.part.0+0x14c>
 801c7da:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 801c7de:	2a00      	cmp	r2, #0
 801c7e0:	f43f aefa 	beq.w	801c5d8 <rclc_executor_spin_some.part.0+0x128>
 801c7e4:	e70a      	b.n	801c5fc <rclc_executor_spin_some.part.0+0x14c>
 801c7e6:	686a      	ldr	r2, [r5, #4]
 801c7e8:	461c      	mov	r4, r3
 801c7ea:	e782      	b.n	801c6f2 <rclc_executor_spin_some.part.0+0x242>
 801c7ec:	686a      	ldr	r2, [r5, #4]
 801c7ee:	461c      	mov	r4, r3
 801c7f0:	e6be      	b.n	801c570 <rclc_executor_spin_some.part.0+0xc0>
 801c7f2:	bf00      	nop

0801c7f4 <rclc_executor_spin_some>:
 801c7f4:	b190      	cbz	r0, 801c81c <rclc_executor_spin_some+0x28>
 801c7f6:	b570      	push	{r4, r5, r6, lr}
 801c7f8:	4604      	mov	r4, r0
 801c7fa:	6800      	ldr	r0, [r0, #0]
 801c7fc:	4616      	mov	r6, r2
 801c7fe:	461d      	mov	r5, r3
 801c800:	f000 fcd6 	bl	801d1b0 <rcl_context_is_valid>
 801c804:	b130      	cbz	r0, 801c814 <rclc_executor_spin_some+0x20>
 801c806:	4632      	mov	r2, r6
 801c808:	462b      	mov	r3, r5
 801c80a:	4620      	mov	r0, r4
 801c80c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c810:	f7ff be4e 	b.w	801c4b0 <rclc_executor_spin_some.part.0>
 801c814:	f000 f954 	bl	801cac0 <rcutils_reset_error>
 801c818:	2001      	movs	r0, #1
 801c81a:	bd70      	pop	{r4, r5, r6, pc}
 801c81c:	200b      	movs	r0, #11
 801c81e:	4770      	bx	lr

0801c820 <rclc_executor_handle_counters_zero_init>:
 801c820:	b130      	cbz	r0, 801c830 <rclc_executor_handle_counters_zero_init+0x10>
 801c822:	2220      	movs	r2, #32
 801c824:	2100      	movs	r1, #0
 801c826:	b508      	push	{r3, lr}
 801c828:	f00c fefc 	bl	8029624 <memset>
 801c82c:	2000      	movs	r0, #0
 801c82e:	bd08      	pop	{r3, pc}
 801c830:	200b      	movs	r0, #11
 801c832:	4770      	bx	lr
 801c834:	0000      	movs	r0, r0
	...

0801c838 <rclc_executor_handle_init>:
 801c838:	4603      	mov	r3, r0
 801c83a:	b178      	cbz	r0, 801c85c <rclc_executor_handle_init+0x24>
 801c83c:	2200      	movs	r2, #0
 801c83e:	f04f 0c0b 	mov.w	ip, #11
 801c842:	6341      	str	r1, [r0, #52]	@ 0x34
 801c844:	4610      	mov	r0, r2
 801c846:	f8a3 c000 	strh.w	ip, [r3]
 801c84a:	631a      	str	r2, [r3, #48]	@ 0x30
 801c84c:	871a      	strh	r2, [r3, #56]	@ 0x38
 801c84e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 801c860 <rclc_executor_handle_init+0x28>
 801c852:	e9c3 2201 	strd	r2, r2, [r3, #4]
 801c856:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 801c85a:	4770      	bx	lr
 801c85c:	200b      	movs	r0, #11
 801c85e:	4770      	bx	lr
	...

0801c868 <rclc_support_init>:
 801c868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c86c:	b086      	sub	sp, #24
 801c86e:	b3bb      	cbz	r3, 801c8e0 <rclc_support_init+0x78>
 801c870:	4606      	mov	r6, r0
 801c872:	b3a8      	cbz	r0, 801c8e0 <rclc_support_init+0x78>
 801c874:	461c      	mov	r4, r3
 801c876:	460f      	mov	r7, r1
 801c878:	4690      	mov	r8, r2
 801c87a:	f000 fe05 	bl	801d488 <rcl_get_zero_initialized_init_options>
 801c87e:	f104 050c 	add.w	r5, r4, #12
 801c882:	9005      	str	r0, [sp, #20]
 801c884:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c888:	e88d 0003 	stmia.w	sp, {r0, r1}
 801c88c:	a805      	add	r0, sp, #20
 801c88e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801c892:	f000 fdfb 	bl	801d48c <rcl_init_options_init>
 801c896:	4605      	mov	r5, r0
 801c898:	b9e0      	cbnz	r0, 801c8d4 <rclc_support_init+0x6c>
 801c89a:	ad02      	add	r5, sp, #8
 801c89c:	4628      	mov	r0, r5
 801c89e:	f000 fc7d 	bl	801d19c <rcl_get_zero_initialized_context>
 801c8a2:	4633      	mov	r3, r6
 801c8a4:	aa05      	add	r2, sp, #20
 801c8a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c8aa:	e886 0003 	stmia.w	r6, {r0, r1}
 801c8ae:	4641      	mov	r1, r8
 801c8b0:	4638      	mov	r0, r7
 801c8b2:	f000 fce3 	bl	801d27c <rcl_init>
 801c8b6:	4605      	mov	r5, r0
 801c8b8:	b9b8      	cbnz	r0, 801c8ea <rclc_support_init+0x82>
 801c8ba:	4622      	mov	r2, r4
 801c8bc:	f106 010c 	add.w	r1, r6, #12
 801c8c0:	2003      	movs	r0, #3
 801c8c2:	60b4      	str	r4, [r6, #8]
 801c8c4:	f001 fc4a 	bl	801e15c <rcl_clock_init>
 801c8c8:	4605      	mov	r5, r0
 801c8ca:	b970      	cbnz	r0, 801c8ea <rclc_support_init+0x82>
 801c8cc:	a805      	add	r0, sp, #20
 801c8ce:	f000 fe43 	bl	801d558 <rcl_init_options_fini>
 801c8d2:	b108      	cbz	r0, 801c8d8 <rclc_support_init+0x70>
 801c8d4:	f000 f8f4 	bl	801cac0 <rcutils_reset_error>
 801c8d8:	4628      	mov	r0, r5
 801c8da:	b006      	add	sp, #24
 801c8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8e0:	250b      	movs	r5, #11
 801c8e2:	4628      	mov	r0, r5
 801c8e4:	b006      	add	sp, #24
 801c8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8ea:	f000 f8e9 	bl	801cac0 <rcutils_reset_error>
 801c8ee:	a805      	add	r0, sp, #20
 801c8f0:	f000 fe32 	bl	801d558 <rcl_init_options_fini>
 801c8f4:	2800      	cmp	r0, #0
 801c8f6:	d0ef      	beq.n	801c8d8 <rclc_support_init+0x70>
 801c8f8:	e7ec      	b.n	801c8d4 <rclc_support_init+0x6c>
 801c8fa:	bf00      	nop

0801c8fc <rclc_node_init_default>:
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	bf18      	it	ne
 801c900:	2a00      	cmpne	r2, #0
 801c902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c906:	4616      	mov	r6, r2
 801c908:	bf0c      	ite	eq
 801c90a:	2201      	moveq	r2, #1
 801c90c:	2200      	movne	r2, #0
 801c90e:	b0a1      	sub	sp, #132	@ 0x84
 801c910:	2900      	cmp	r1, #0
 801c912:	bf08      	it	eq
 801c914:	f042 0201 	orreq.w	r2, r2, #1
 801c918:	bb22      	cbnz	r2, 801c964 <rclc_node_init_default+0x68>
 801c91a:	4604      	mov	r4, r0
 801c91c:	b310      	cbz	r0, 801c964 <rclc_node_init_default+0x68>
 801c91e:	f10d 0810 	add.w	r8, sp, #16
 801c922:	461f      	mov	r7, r3
 801c924:	460d      	mov	r5, r1
 801c926:	f10d 0918 	add.w	r9, sp, #24
 801c92a:	4640      	mov	r0, r8
 801c92c:	f000 fece 	bl	801d6cc <rcl_get_zero_initialized_node>
 801c930:	e898 0003 	ldmia.w	r8, {r0, r1}
 801c934:	e884 0003 	stmia.w	r4, {r0, r1}
 801c938:	4648      	mov	r0, r9
 801c93a:	f001 f841 	bl	801d9c0 <rcl_node_get_default_options>
 801c93e:	4640      	mov	r0, r8
 801c940:	f000 fec4 	bl	801d6cc <rcl_get_zero_initialized_node>
 801c944:	f8cd 9000 	str.w	r9, [sp]
 801c948:	463b      	mov	r3, r7
 801c94a:	4632      	mov	r2, r6
 801c94c:	e898 0003 	ldmia.w	r8, {r0, r1}
 801c950:	e884 0003 	stmia.w	r4, {r0, r1}
 801c954:	4629      	mov	r1, r5
 801c956:	4620      	mov	r0, r4
 801c958:	f000 fec2 	bl	801d6e0 <rcl_node_init>
 801c95c:	b930      	cbnz	r0, 801c96c <rclc_node_init_default+0x70>
 801c95e:	b021      	add	sp, #132	@ 0x84
 801c960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c964:	200b      	movs	r0, #11
 801c966:	b021      	add	sp, #132	@ 0x84
 801c968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c96c:	9003      	str	r0, [sp, #12]
 801c96e:	f000 f8a7 	bl	801cac0 <rcutils_reset_error>
 801c972:	f000 f8a5 	bl	801cac0 <rcutils_reset_error>
 801c976:	9803      	ldr	r0, [sp, #12]
 801c978:	b021      	add	sp, #132	@ 0x84
 801c97a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c97e:	bf00      	nop

0801c980 <rclc_subscription_init_default>:
 801c980:	2b00      	cmp	r3, #0
 801c982:	bf18      	it	ne
 801c984:	2a00      	cmpne	r2, #0
 801c986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c98a:	4616      	mov	r6, r2
 801c98c:	bf0c      	ite	eq
 801c98e:	2201      	moveq	r2, #1
 801c990:	2200      	movne	r2, #0
 801c992:	b0a0      	sub	sp, #128	@ 0x80
 801c994:	2900      	cmp	r1, #0
 801c996:	bf08      	it	eq
 801c998:	f042 0201 	orreq.w	r2, r2, #1
 801c99c:	bb1a      	cbnz	r2, 801c9e6 <rclc_subscription_init_default+0x66>
 801c99e:	4604      	mov	r4, r0
 801c9a0:	b308      	cbz	r0, 801c9e6 <rclc_subscription_init_default+0x66>
 801c9a2:	f10d 0810 	add.w	r8, sp, #16
 801c9a6:	461f      	mov	r7, r3
 801c9a8:	460d      	mov	r5, r1
 801c9aa:	f001 fa75 	bl	801de98 <rcl_get_zero_initialized_subscription>
 801c9ae:	6020      	str	r0, [r4, #0]
 801c9b0:	4640      	mov	r0, r8
 801c9b2:	f001 fb25 	bl	801e000 <rcl_subscription_get_default_options>
 801c9b6:	2250      	movs	r2, #80	@ 0x50
 801c9b8:	490d      	ldr	r1, [pc, #52]	@ (801c9f0 <rclc_subscription_init_default+0x70>)
 801c9ba:	4640      	mov	r0, r8
 801c9bc:	f00c ff55 	bl	802986a <memcpy>
 801c9c0:	463b      	mov	r3, r7
 801c9c2:	4632      	mov	r2, r6
 801c9c4:	4629      	mov	r1, r5
 801c9c6:	4620      	mov	r0, r4
 801c9c8:	f8cd 8000 	str.w	r8, [sp]
 801c9cc:	f001 fa6a 	bl	801dea4 <rcl_subscription_init>
 801c9d0:	b910      	cbnz	r0, 801c9d8 <rclc_subscription_init_default+0x58>
 801c9d2:	b020      	add	sp, #128	@ 0x80
 801c9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9d8:	9003      	str	r0, [sp, #12]
 801c9da:	f000 f871 	bl	801cac0 <rcutils_reset_error>
 801c9de:	9803      	ldr	r0, [sp, #12]
 801c9e0:	b020      	add	sp, #128	@ 0x80
 801c9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9e6:	200b      	movs	r0, #11
 801c9e8:	b020      	add	sp, #128	@ 0x80
 801c9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9ee:	bf00      	nop
 801c9f0:	0802f5b0 	.word	0x0802f5b0

0801c9f4 <__default_zero_allocate>:
 801c9f4:	f00b bc50 	b.w	8028298 <calloc>

0801c9f8 <__default_reallocate>:
 801c9f8:	f00b bdee 	b.w	80285d8 <realloc>

0801c9fc <__default_deallocate>:
 801c9fc:	f00b bcca 	b.w	8028394 <free>

0801ca00 <__default_allocate>:
 801ca00:	f00b bcc0 	b.w	8028384 <malloc>

0801ca04 <rcutils_get_zero_initialized_allocator>:
 801ca04:	b510      	push	{r4, lr}
 801ca06:	4c05      	ldr	r4, [pc, #20]	@ (801ca1c <rcutils_get_zero_initialized_allocator+0x18>)
 801ca08:	4686      	mov	lr, r0
 801ca0a:	4684      	mov	ip, r0
 801ca0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ca0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ca12:	6823      	ldr	r3, [r4, #0]
 801ca14:	4670      	mov	r0, lr
 801ca16:	f8cc 3000 	str.w	r3, [ip]
 801ca1a:	bd10      	pop	{r4, pc}
 801ca1c:	0802f600 	.word	0x0802f600

0801ca20 <rcutils_set_default_allocator>:
 801ca20:	b1a8      	cbz	r0, 801ca4e <rcutils_set_default_allocator+0x2e>
 801ca22:	6802      	ldr	r2, [r0, #0]
 801ca24:	b1a2      	cbz	r2, 801ca50 <rcutils_set_default_allocator+0x30>
 801ca26:	6841      	ldr	r1, [r0, #4]
 801ca28:	b1a1      	cbz	r1, 801ca54 <rcutils_set_default_allocator+0x34>
 801ca2a:	b410      	push	{r4}
 801ca2c:	68c4      	ldr	r4, [r0, #12]
 801ca2e:	b164      	cbz	r4, 801ca4a <rcutils_set_default_allocator+0x2a>
 801ca30:	6880      	ldr	r0, [r0, #8]
 801ca32:	b138      	cbz	r0, 801ca44 <rcutils_set_default_allocator+0x24>
 801ca34:	4b08      	ldr	r3, [pc, #32]	@ (801ca58 <rcutils_set_default_allocator+0x38>)
 801ca36:	601a      	str	r2, [r3, #0]
 801ca38:	2200      	movs	r2, #0
 801ca3a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 801ca3e:	2001      	movs	r0, #1
 801ca40:	e9c3 4203 	strd	r4, r2, [r3, #12]
 801ca44:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca48:	4770      	bx	lr
 801ca4a:	4620      	mov	r0, r4
 801ca4c:	e7fa      	b.n	801ca44 <rcutils_set_default_allocator+0x24>
 801ca4e:	4770      	bx	lr
 801ca50:	4610      	mov	r0, r2
 801ca52:	4770      	bx	lr
 801ca54:	4608      	mov	r0, r1
 801ca56:	4770      	bx	lr
 801ca58:	20000038 	.word	0x20000038

0801ca5c <rcutils_get_default_allocator>:
 801ca5c:	b510      	push	{r4, lr}
 801ca5e:	4c05      	ldr	r4, [pc, #20]	@ (801ca74 <rcutils_get_default_allocator+0x18>)
 801ca60:	4686      	mov	lr, r0
 801ca62:	4684      	mov	ip, r0
 801ca64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ca66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ca6a:	6823      	ldr	r3, [r4, #0]
 801ca6c:	4670      	mov	r0, lr
 801ca6e:	f8cc 3000 	str.w	r3, [ip]
 801ca72:	bd10      	pop	{r4, pc}
 801ca74:	20000038 	.word	0x20000038

0801ca78 <rcutils_allocator_is_valid>:
 801ca78:	b158      	cbz	r0, 801ca92 <rcutils_allocator_is_valid+0x1a>
 801ca7a:	6803      	ldr	r3, [r0, #0]
 801ca7c:	b143      	cbz	r3, 801ca90 <rcutils_allocator_is_valid+0x18>
 801ca7e:	6843      	ldr	r3, [r0, #4]
 801ca80:	b133      	cbz	r3, 801ca90 <rcutils_allocator_is_valid+0x18>
 801ca82:	68c3      	ldr	r3, [r0, #12]
 801ca84:	b123      	cbz	r3, 801ca90 <rcutils_allocator_is_valid+0x18>
 801ca86:	6880      	ldr	r0, [r0, #8]
 801ca88:	3800      	subs	r0, #0
 801ca8a:	bf18      	it	ne
 801ca8c:	2001      	movne	r0, #1
 801ca8e:	4770      	bx	lr
 801ca90:	4618      	mov	r0, r3
 801ca92:	4770      	bx	lr

0801ca94 <rcutils_get_error_string>:
 801ca94:	4b06      	ldr	r3, [pc, #24]	@ (801cab0 <rcutils_get_error_string+0x1c>)
 801ca96:	781b      	ldrb	r3, [r3, #0]
 801ca98:	b13b      	cbz	r3, 801caaa <rcutils_get_error_string+0x16>
 801ca9a:	4b06      	ldr	r3, [pc, #24]	@ (801cab4 <rcutils_get_error_string+0x20>)
 801ca9c:	781a      	ldrb	r2, [r3, #0]
 801ca9e:	b90a      	cbnz	r2, 801caa4 <rcutils_get_error_string+0x10>
 801caa0:	2201      	movs	r2, #1
 801caa2:	701a      	strb	r2, [r3, #0]
 801caa4:	4b04      	ldr	r3, [pc, #16]	@ (801cab8 <rcutils_get_error_string+0x24>)
 801caa6:	7818      	ldrb	r0, [r3, #0]
 801caa8:	4770      	bx	lr
 801caaa:	4b04      	ldr	r3, [pc, #16]	@ (801cabc <rcutils_get_error_string+0x28>)
 801caac:	7818      	ldrb	r0, [r3, #0]
 801caae:	4770      	bx	lr
 801cab0:	20042724 	.word	0x20042724
 801cab4:	20042739 	.word	0x20042739
 801cab8:	20042738 	.word	0x20042738
 801cabc:	0802f614 	.word	0x0802f614

0801cac0 <rcutils_reset_error>:
 801cac0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801cae0 <rcutils_reset_error+0x20>
 801cac4:	2300      	movs	r3, #0
 801cac6:	4a08      	ldr	r2, [pc, #32]	@ (801cae8 <rcutils_reset_error+0x28>)
 801cac8:	4808      	ldr	r0, [pc, #32]	@ (801caec <rcutils_reset_error+0x2c>)
 801caca:	8013      	strh	r3, [r2, #0]
 801cacc:	4908      	ldr	r1, [pc, #32]	@ (801caf0 <rcutils_reset_error+0x30>)
 801cace:	7003      	strb	r3, [r0, #0]
 801cad0:	700b      	strb	r3, [r1, #0]
 801cad2:	ed82 7b02 	vstr	d7, [r2, #8]
 801cad6:	4a07      	ldr	r2, [pc, #28]	@ (801caf4 <rcutils_reset_error+0x34>)
 801cad8:	7013      	strb	r3, [r2, #0]
 801cada:	4770      	bx	lr
 801cadc:	f3af 8000 	nop.w
	...
 801cae8:	20042728 	.word	0x20042728
 801caec:	20042739 	.word	0x20042739
 801caf0:	20042738 	.word	0x20042738
 801caf4:	20042724 	.word	0x20042724

0801caf8 <rcutils_system_time_now>:
 801caf8:	b300      	cbz	r0, 801cb3c <rcutils_system_time_now+0x44>
 801cafa:	b570      	push	{r4, r5, r6, lr}
 801cafc:	b084      	sub	sp, #16
 801cafe:	4604      	mov	r4, r0
 801cb00:	2001      	movs	r0, #1
 801cb02:	4669      	mov	r1, sp
 801cb04:	f7e5 f830 	bl	8001b68 <clock_gettime>
 801cb08:	e9dd 3100 	ldrd	r3, r1, [sp]
 801cb0c:	2900      	cmp	r1, #0
 801cb0e:	db12      	blt.n	801cb36 <rcutils_system_time_now+0x3e>
 801cb10:	ea53 0201 	orrs.w	r2, r3, r1
 801cb14:	9d02      	ldr	r5, [sp, #8]
 801cb16:	d101      	bne.n	801cb1c <rcutils_system_time_now+0x24>
 801cb18:	2d00      	cmp	r5, #0
 801cb1a:	db0c      	blt.n	801cb36 <rcutils_system_time_now+0x3e>
 801cb1c:	4e08      	ldr	r6, [pc, #32]	@ (801cb40 <rcutils_system_time_now+0x48>)
 801cb1e:	2000      	movs	r0, #0
 801cb20:	fba3 3206 	umull	r3, r2, r3, r6
 801cb24:	195b      	adds	r3, r3, r5
 801cb26:	fb06 2201 	mla	r2, r6, r1, r2
 801cb2a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801cb2e:	e9c4 3200 	strd	r3, r2, [r4]
 801cb32:	b004      	add	sp, #16
 801cb34:	bd70      	pop	{r4, r5, r6, pc}
 801cb36:	2002      	movs	r0, #2
 801cb38:	b004      	add	sp, #16
 801cb3a:	bd70      	pop	{r4, r5, r6, pc}
 801cb3c:	200b      	movs	r0, #11
 801cb3e:	4770      	bx	lr
 801cb40:	3b9aca00 	.word	0x3b9aca00

0801cb44 <rcutils_steady_time_now>:
 801cb44:	b300      	cbz	r0, 801cb88 <rcutils_steady_time_now+0x44>
 801cb46:	b570      	push	{r4, r5, r6, lr}
 801cb48:	b084      	sub	sp, #16
 801cb4a:	4604      	mov	r4, r0
 801cb4c:	2000      	movs	r0, #0
 801cb4e:	4669      	mov	r1, sp
 801cb50:	f7e5 f80a 	bl	8001b68 <clock_gettime>
 801cb54:	e9dd 3100 	ldrd	r3, r1, [sp]
 801cb58:	2900      	cmp	r1, #0
 801cb5a:	db12      	blt.n	801cb82 <rcutils_steady_time_now+0x3e>
 801cb5c:	ea53 0201 	orrs.w	r2, r3, r1
 801cb60:	9d02      	ldr	r5, [sp, #8]
 801cb62:	d101      	bne.n	801cb68 <rcutils_steady_time_now+0x24>
 801cb64:	2d00      	cmp	r5, #0
 801cb66:	db0c      	blt.n	801cb82 <rcutils_steady_time_now+0x3e>
 801cb68:	4e08      	ldr	r6, [pc, #32]	@ (801cb8c <rcutils_steady_time_now+0x48>)
 801cb6a:	2000      	movs	r0, #0
 801cb6c:	fba3 3206 	umull	r3, r2, r3, r6
 801cb70:	195b      	adds	r3, r3, r5
 801cb72:	fb06 2201 	mla	r2, r6, r1, r2
 801cb76:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801cb7a:	e9c4 3200 	strd	r3, r2, [r4]
 801cb7e:	b004      	add	sp, #16
 801cb80:	bd70      	pop	{r4, r5, r6, pc}
 801cb82:	2002      	movs	r0, #2
 801cb84:	b004      	add	sp, #16
 801cb86:	bd70      	pop	{r4, r5, r6, pc}
 801cb88:	200b      	movs	r0, #11
 801cb8a:	4770      	bx	lr
 801cb8c:	3b9aca00 	.word	0x3b9aca00

0801cb90 <rmw_uros_set_custom_transport>:
 801cb90:	b470      	push	{r4, r5, r6}
 801cb92:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 801cb96:	b162      	cbz	r2, 801cbb2 <rmw_uros_set_custom_transport+0x22>
 801cb98:	b15b      	cbz	r3, 801cbb2 <rmw_uros_set_custom_transport+0x22>
 801cb9a:	b155      	cbz	r5, 801cbb2 <rmw_uros_set_custom_transport+0x22>
 801cb9c:	b14e      	cbz	r6, 801cbb2 <rmw_uros_set_custom_transport+0x22>
 801cb9e:	4c06      	ldr	r4, [pc, #24]	@ (801cbb8 <rmw_uros_set_custom_transport+0x28>)
 801cba0:	7020      	strb	r0, [r4, #0]
 801cba2:	2000      	movs	r0, #0
 801cba4:	6166      	str	r6, [r4, #20]
 801cba6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801cbaa:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801cbae:	bc70      	pop	{r4, r5, r6}
 801cbb0:	4770      	bx	lr
 801cbb2:	200b      	movs	r0, #11
 801cbb4:	bc70      	pop	{r4, r5, r6}
 801cbb6:	4770      	bx	lr
 801cbb8:	2004273c 	.word	0x2004273c

0801cbbc <std_msgs__msg__UInt16MultiArray__init>:
 801cbbc:	b570      	push	{r4, r5, r6, lr}
 801cbbe:	4605      	mov	r5, r0
 801cbc0:	b1b0      	cbz	r0, 801cbf0 <std_msgs__msg__UInt16MultiArray__init+0x34>
 801cbc2:	f005 fa2d 	bl	8022020 <std_msgs__msg__MultiArrayLayout__init>
 801cbc6:	4604      	mov	r4, r0
 801cbc8:	b148      	cbz	r0, 801cbde <std_msgs__msg__UInt16MultiArray__init+0x22>
 801cbca:	f105 0610 	add.w	r6, r5, #16
 801cbce:	2100      	movs	r1, #0
 801cbd0:	4630      	mov	r0, r6
 801cbd2:	f005 f9cb 	bl	8021f6c <rosidl_runtime_c__uint16__Sequence__init>
 801cbd6:	4604      	mov	r4, r0
 801cbd8:	b168      	cbz	r0, 801cbf6 <std_msgs__msg__UInt16MultiArray__init+0x3a>
 801cbda:	4620      	mov	r0, r4
 801cbdc:	bd70      	pop	{r4, r5, r6, pc}
 801cbde:	4628      	mov	r0, r5
 801cbe0:	f005 fa30 	bl	8022044 <std_msgs__msg__MultiArrayLayout__fini>
 801cbe4:	f105 0010 	add.w	r0, r5, #16
 801cbe8:	f005 f9d8 	bl	8021f9c <rosidl_runtime_c__uint16__Sequence__fini>
 801cbec:	4620      	mov	r0, r4
 801cbee:	bd70      	pop	{r4, r5, r6, pc}
 801cbf0:	4604      	mov	r4, r0
 801cbf2:	4620      	mov	r0, r4
 801cbf4:	bd70      	pop	{r4, r5, r6, pc}
 801cbf6:	4628      	mov	r0, r5
 801cbf8:	f005 fa24 	bl	8022044 <std_msgs__msg__MultiArrayLayout__fini>
 801cbfc:	4630      	mov	r0, r6
 801cbfe:	f005 f9cd 	bl	8021f9c <rosidl_runtime_c__uint16__Sequence__fini>
 801cc02:	e7ea      	b.n	801cbda <std_msgs__msg__UInt16MultiArray__init+0x1e>

0801cc04 <std_msgs__msg__UInt16MultiArray__fini>:
 801cc04:	b148      	cbz	r0, 801cc1a <std_msgs__msg__UInt16MultiArray__fini+0x16>
 801cc06:	b510      	push	{r4, lr}
 801cc08:	4604      	mov	r4, r0
 801cc0a:	f005 fa1b 	bl	8022044 <std_msgs__msg__MultiArrayLayout__fini>
 801cc0e:	f104 0010 	add.w	r0, r4, #16
 801cc12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc16:	f005 b9c1 	b.w	8021f9c <rosidl_runtime_c__uint16__Sequence__fini>
 801cc1a:	4770      	bx	lr

0801cc1c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 801cc1c:	4b04      	ldr	r3, [pc, #16]	@ (801cc30 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x14>)
 801cc1e:	681a      	ldr	r2, [r3, #0]
 801cc20:	b10a      	cbz	r2, 801cc26 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0xa>
 801cc22:	4803      	ldr	r0, [pc, #12]	@ (801cc30 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x14>)
 801cc24:	4770      	bx	lr
 801cc26:	4a03      	ldr	r2, [pc, #12]	@ (801cc34 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x18>)
 801cc28:	4801      	ldr	r0, [pc, #4]	@ (801cc30 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x14>)
 801cc2a:	6812      	ldr	r2, [r2, #0]
 801cc2c:	601a      	str	r2, [r3, #0]
 801cc2e:	4770      	bx	lr
 801cc30:	20000054 	.word	0x20000054
 801cc34:	2000010c 	.word	0x2000010c

0801cc38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 801cc38:	4a02      	ldr	r2, [pc, #8]	@ (801cc44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0xc>)
 801cc3a:	4b03      	ldr	r3, [pc, #12]	@ (801cc48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x10>)
 801cc3c:	6812      	ldr	r2, [r2, #0]
 801cc3e:	601a      	str	r2, [r3, #0]
 801cc40:	4770      	bx	lr
 801cc42:	bf00      	nop
 801cc44:	2000010c 	.word	0x2000010c
 801cc48:	20000054 	.word	0x20000054

0801cc4c <std_msgs__msg__UInt16MultiArray__rosidl_typesupport_introspection_c__size_function__UInt16MultiArray__data>:
 801cc4c:	6840      	ldr	r0, [r0, #4]
 801cc4e:	4770      	bx	lr

0801cc50 <std_msgs__msg__UInt16MultiArray__rosidl_typesupport_introspection_c__get_const_function__UInt16MultiArray__data>:
 801cc50:	6800      	ldr	r0, [r0, #0]
 801cc52:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801cc56:	4770      	bx	lr

0801cc58 <std_msgs__msg__UInt16MultiArray__rosidl_typesupport_introspection_c__fetch_function__UInt16MultiArray__data>:
 801cc58:	6803      	ldr	r3, [r0, #0]
 801cc5a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801cc5e:	8013      	strh	r3, [r2, #0]
 801cc60:	4770      	bx	lr
 801cc62:	bf00      	nop

0801cc64 <std_msgs__msg__UInt16MultiArray__rosidl_typesupport_introspection_c__assign_function__UInt16MultiArray__data>:
 801cc64:	8812      	ldrh	r2, [r2, #0]
 801cc66:	6803      	ldr	r3, [r0, #0]
 801cc68:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 801cc6c:	4770      	bx	lr
 801cc6e:	bf00      	nop

0801cc70 <std_msgs__msg__UInt16MultiArray__rosidl_typesupport_introspection_c__UInt16MultiArray_init_function>:
 801cc70:	f7ff bfa4 	b.w	801cbbc <std_msgs__msg__UInt16MultiArray__init>

0801cc74 <std_msgs__msg__UInt16MultiArray__rosidl_typesupport_introspection_c__UInt16MultiArray_fini_function>:
 801cc74:	f7ff bfc6 	b.w	801cc04 <std_msgs__msg__UInt16MultiArray__fini>

0801cc78 <std_msgs__msg__UInt16MultiArray__rosidl_typesupport_introspection_c__resize_function__UInt16MultiArray__data>:
 801cc78:	b510      	push	{r4, lr}
 801cc7a:	4604      	mov	r4, r0
 801cc7c:	b082      	sub	sp, #8
 801cc7e:	9101      	str	r1, [sp, #4]
 801cc80:	f005 f98c 	bl	8021f9c <rosidl_runtime_c__uint16__Sequence__fini>
 801cc84:	9901      	ldr	r1, [sp, #4]
 801cc86:	4620      	mov	r0, r4
 801cc88:	b002      	add	sp, #8
 801cc8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc8e:	f005 b96d 	b.w	8021f6c <rosidl_runtime_c__uint16__Sequence__init>
 801cc92:	bf00      	nop

0801cc94 <std_msgs__msg__UInt16MultiArray__rosidl_typesupport_introspection_c__get_function__UInt16MultiArray__data>:
 801cc94:	6800      	ldr	r0, [r0, #0]
 801cc96:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801cc9a:	4770      	bx	lr

0801cc9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 801cc9c:	b508      	push	{r3, lr}
 801cc9e:	f005 fa19 	bl	80220d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 801cca2:	4b06      	ldr	r3, [pc, #24]	@ (801ccbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x20>)
 801cca4:	4906      	ldr	r1, [pc, #24]	@ (801ccc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x24>)
 801cca6:	681a      	ldr	r2, [r3, #0]
 801cca8:	60c8      	str	r0, [r1, #12]
 801ccaa:	b10a      	cbz	r2, 801ccb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x14>
 801ccac:	4803      	ldr	r0, [pc, #12]	@ (801ccbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x20>)
 801ccae:	bd08      	pop	{r3, pc}
 801ccb0:	4a04      	ldr	r2, [pc, #16]	@ (801ccc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x28>)
 801ccb2:	4802      	ldr	r0, [pc, #8]	@ (801ccbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x20>)
 801ccb4:	6812      	ldr	r2, [r2, #0]
 801ccb6:	601a      	str	r2, [r3, #0]
 801ccb8:	bd08      	pop	{r3, pc}
 801ccba:	bf00      	nop
 801ccbc:	200000d8 	.word	0x200000d8
 801ccc0:	20000060 	.word	0x20000060
 801ccc4:	20000110 	.word	0x20000110

0801ccc8 <_UInt16MultiArray__max_serialized_size>:
 801ccc8:	b500      	push	{lr}
 801ccca:	b083      	sub	sp, #12
 801cccc:	2301      	movs	r3, #1
 801ccce:	2100      	movs	r1, #0
 801ccd0:	f10d 0007 	add.w	r0, sp, #7
 801ccd4:	f88d 3007 	strb.w	r3, [sp, #7]
 801ccd8:	f005 faaa 	bl	8022230 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 801ccdc:	b003      	add	sp, #12
 801ccde:	f85d fb04 	ldr.w	pc, [sp], #4
 801cce2:	bf00      	nop

0801cce4 <get_serialized_size_std_msgs__msg__UInt16MultiArray>:
 801cce4:	b570      	push	{r4, r5, r6, lr}
 801cce6:	4604      	mov	r4, r0
 801cce8:	b160      	cbz	r0, 801cd04 <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x20>
 801ccea:	460d      	mov	r5, r1
 801ccec:	f005 fa44 	bl	8022178 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 801ccf0:	6966      	ldr	r6, [r4, #20]
 801ccf2:	2104      	movs	r1, #4
 801ccf4:	182c      	adds	r4, r5, r0
 801ccf6:	4620      	mov	r0, r4
 801ccf8:	f000 f8cc 	bl	801ce94 <ucdr_alignment>
 801ccfc:	1d03      	adds	r3, r0, #4
 801ccfe:	441c      	add	r4, r3
 801cd00:	b90e      	cbnz	r6, 801cd06 <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x22>
 801cd02:	1b60      	subs	r0, r4, r5
 801cd04:	bd70      	pop	{r4, r5, r6, pc}
 801cd06:	4620      	mov	r0, r4
 801cd08:	2102      	movs	r1, #2
 801cd0a:	f000 f8c3 	bl	801ce94 <ucdr_alignment>
 801cd0e:	eb04 0346 	add.w	r3, r4, r6, lsl #1
 801cd12:	181c      	adds	r4, r3, r0
 801cd14:	1b60      	subs	r0, r4, r5
 801cd16:	e7f5      	b.n	801cd04 <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x20>

0801cd18 <_UInt16MultiArray__cdr_deserialize>:
 801cd18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd1a:	460c      	mov	r4, r1
 801cd1c:	b083      	sub	sp, #12
 801cd1e:	b1d9      	cbz	r1, 801cd58 <_UInt16MultiArray__cdr_deserialize+0x40>
 801cd20:	4606      	mov	r6, r0
 801cd22:	f005 fa8f 	bl	8022244 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 801cd26:	4603      	mov	r3, r0
 801cd28:	4621      	mov	r1, r4
 801cd2a:	4630      	mov	r0, r6
 801cd2c:	685b      	ldr	r3, [r3, #4]
 801cd2e:	68db      	ldr	r3, [r3, #12]
 801cd30:	4798      	blx	r3
 801cd32:	69a7      	ldr	r7, [r4, #24]
 801cd34:	ab01      	add	r3, sp, #4
 801cd36:	6921      	ldr	r1, [r4, #16]
 801cd38:	463a      	mov	r2, r7
 801cd3a:	4630      	mov	r0, r6
 801cd3c:	f000 f984 	bl	801d048 <ucdr_deserialize_sequence_uint16_t>
 801cd40:	9b01      	ldr	r3, [sp, #4]
 801cd42:	4605      	mov	r5, r0
 801cd44:	b920      	cbnz	r0, 801cd50 <_UInt16MultiArray__cdr_deserialize+0x38>
 801cd46:	429f      	cmp	r7, r3
 801cd48:	d30a      	bcc.n	801cd60 <_UInt16MultiArray__cdr_deserialize+0x48>
 801cd4a:	4628      	mov	r0, r5
 801cd4c:	b003      	add	sp, #12
 801cd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd50:	4628      	mov	r0, r5
 801cd52:	6163      	str	r3, [r4, #20]
 801cd54:	b003      	add	sp, #12
 801cd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd58:	460d      	mov	r5, r1
 801cd5a:	4628      	mov	r0, r5
 801cd5c:	b003      	add	sp, #12
 801cd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd60:	2301      	movs	r3, #1
 801cd62:	4630      	mov	r0, r6
 801cd64:	75b5      	strb	r5, [r6, #22]
 801cd66:	2102      	movs	r1, #2
 801cd68:	7573      	strb	r3, [r6, #21]
 801cd6a:	6165      	str	r5, [r4, #20]
 801cd6c:	f000 f8aa 	bl	801cec4 <ucdr_align_to>
 801cd70:	9901      	ldr	r1, [sp, #4]
 801cd72:	4630      	mov	r0, r6
 801cd74:	0049      	lsls	r1, r1, #1
 801cd76:	f000 f8dd 	bl	801cf34 <ucdr_advance_buffer>
 801cd7a:	4628      	mov	r0, r5
 801cd7c:	b003      	add	sp, #12
 801cd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cd80 <_UInt16MultiArray__cdr_serialize>:
 801cd80:	b188      	cbz	r0, 801cda6 <_UInt16MultiArray__cdr_serialize+0x26>
 801cd82:	b538      	push	{r3, r4, r5, lr}
 801cd84:	4604      	mov	r4, r0
 801cd86:	460d      	mov	r5, r1
 801cd88:	f005 fa5c 	bl	8022244 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 801cd8c:	4603      	mov	r3, r0
 801cd8e:	4629      	mov	r1, r5
 801cd90:	4620      	mov	r0, r4
 801cd92:	685b      	ldr	r3, [r3, #4]
 801cd94:	689b      	ldr	r3, [r3, #8]
 801cd96:	4798      	blx	r3
 801cd98:	4628      	mov	r0, r5
 801cd9a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 801cd9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cda2:	f000 b93f 	b.w	801d024 <ucdr_serialize_sequence_uint16_t>
 801cda6:	4770      	bx	lr

0801cda8 <_UInt16MultiArray__get_serialized_size>:
 801cda8:	b538      	push	{r3, r4, r5, lr}
 801cdaa:	4604      	mov	r4, r0
 801cdac:	b150      	cbz	r0, 801cdc4 <_UInt16MultiArray__get_serialized_size+0x1c>
 801cdae:	2100      	movs	r1, #0
 801cdb0:	f005 f9e2 	bl	8022178 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 801cdb4:	6965      	ldr	r5, [r4, #20]
 801cdb6:	4604      	mov	r4, r0
 801cdb8:	2104      	movs	r1, #4
 801cdba:	f000 f86b 	bl	801ce94 <ucdr_alignment>
 801cdbe:	4404      	add	r4, r0
 801cdc0:	3404      	adds	r4, #4
 801cdc2:	b90d      	cbnz	r5, 801cdc8 <_UInt16MultiArray__get_serialized_size+0x20>
 801cdc4:	4620      	mov	r0, r4
 801cdc6:	bd38      	pop	{r3, r4, r5, pc}
 801cdc8:	4620      	mov	r0, r4
 801cdca:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801cdce:	2102      	movs	r1, #2
 801cdd0:	f000 f860 	bl	801ce94 <ucdr_alignment>
 801cdd4:	4404      	add	r4, r0
 801cdd6:	4620      	mov	r0, r4
 801cdd8:	bd38      	pop	{r3, r4, r5, pc}
 801cdda:	bf00      	nop

0801cddc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 801cddc:	4800      	ldr	r0, [pc, #0]	@ (801cde0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x4>)
 801cdde:	4770      	bx	lr
 801cde0:	200000e4 	.word	0x200000e4

0801cde4 <ucdr_check_buffer_available_for>:
 801cde4:	7d83      	ldrb	r3, [r0, #22]
 801cde6:	b93b      	cbnz	r3, 801cdf8 <ucdr_check_buffer_available_for+0x14>
 801cde8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 801cdec:	4419      	add	r1, r3
 801cdee:	4288      	cmp	r0, r1
 801cdf0:	bf34      	ite	cc
 801cdf2:	2000      	movcc	r0, #0
 801cdf4:	2001      	movcs	r0, #1
 801cdf6:	4770      	bx	lr
 801cdf8:	2000      	movs	r0, #0
 801cdfa:	4770      	bx	lr

0801cdfc <ucdr_check_final_buffer_behavior>:
 801cdfc:	7d83      	ldrb	r3, [r0, #22]
 801cdfe:	b943      	cbnz	r3, 801ce12 <ucdr_check_final_buffer_behavior+0x16>
 801ce00:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801ce04:	b510      	push	{r4, lr}
 801ce06:	4291      	cmp	r1, r2
 801ce08:	4604      	mov	r4, r0
 801ce0a:	d205      	bcs.n	801ce18 <ucdr_check_final_buffer_behavior+0x1c>
 801ce0c:	2301      	movs	r3, #1
 801ce0e:	4618      	mov	r0, r3
 801ce10:	bd10      	pop	{r4, pc}
 801ce12:	2300      	movs	r3, #0
 801ce14:	4618      	mov	r0, r3
 801ce16:	4770      	bx	lr
 801ce18:	6982      	ldr	r2, [r0, #24]
 801ce1a:	b13a      	cbz	r2, 801ce2c <ucdr_check_final_buffer_behavior+0x30>
 801ce1c:	69c1      	ldr	r1, [r0, #28]
 801ce1e:	4790      	blx	r2
 801ce20:	f080 0301 	eor.w	r3, r0, #1
 801ce24:	75a0      	strb	r0, [r4, #22]
 801ce26:	b2db      	uxtb	r3, r3
 801ce28:	4618      	mov	r0, r3
 801ce2a:	bd10      	pop	{r4, pc}
 801ce2c:	2001      	movs	r0, #1
 801ce2e:	75a0      	strb	r0, [r4, #22]
 801ce30:	e7fa      	b.n	801ce28 <ucdr_check_final_buffer_behavior+0x2c>
 801ce32:	bf00      	nop

0801ce34 <ucdr_set_on_full_buffer_callback>:
 801ce34:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801ce38:	4770      	bx	lr
 801ce3a:	bf00      	nop

0801ce3c <ucdr_init_buffer_origin_offset_endian>:
 801ce3c:	b410      	push	{r4}
 801ce3e:	9c01      	ldr	r4, [sp, #4]
 801ce40:	440a      	add	r2, r1
 801ce42:	6001      	str	r1, [r0, #0]
 801ce44:	6042      	str	r2, [r0, #4]
 801ce46:	190a      	adds	r2, r1, r4
 801ce48:	441c      	add	r4, r3
 801ce4a:	6082      	str	r2, [r0, #8]
 801ce4c:	2200      	movs	r2, #0
 801ce4e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801ce52:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801ce56:	7542      	strb	r2, [r0, #21]
 801ce58:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce5c:	7582      	strb	r2, [r0, #22]
 801ce5e:	7503      	strb	r3, [r0, #20]
 801ce60:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801ce64:	4770      	bx	lr
 801ce66:	bf00      	nop

0801ce68 <ucdr_init_buffer_origin_offset>:
 801ce68:	b510      	push	{r4, lr}
 801ce6a:	b082      	sub	sp, #8
 801ce6c:	9c04      	ldr	r4, [sp, #16]
 801ce6e:	9400      	str	r4, [sp, #0]
 801ce70:	2401      	movs	r4, #1
 801ce72:	9401      	str	r4, [sp, #4]
 801ce74:	f7ff ffe2 	bl	801ce3c <ucdr_init_buffer_origin_offset_endian>
 801ce78:	b002      	add	sp, #8
 801ce7a:	bd10      	pop	{r4, pc}

0801ce7c <ucdr_init_buffer_origin>:
 801ce7c:	b510      	push	{r4, lr}
 801ce7e:	2400      	movs	r4, #0
 801ce80:	b082      	sub	sp, #8
 801ce82:	9400      	str	r4, [sp, #0]
 801ce84:	f7ff fff0 	bl	801ce68 <ucdr_init_buffer_origin_offset>
 801ce88:	b002      	add	sp, #8
 801ce8a:	bd10      	pop	{r4, pc}

0801ce8c <ucdr_init_buffer>:
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	f7ff bff5 	b.w	801ce7c <ucdr_init_buffer_origin>
 801ce92:	bf00      	nop

0801ce94 <ucdr_alignment>:
 801ce94:	fbb0 f2f1 	udiv	r2, r0, r1
 801ce98:	fb02 0011 	mls	r0, r2, r1, r0
 801ce9c:	1e4b      	subs	r3, r1, #1
 801ce9e:	1a08      	subs	r0, r1, r0
 801cea0:	4018      	ands	r0, r3
 801cea2:	4770      	bx	lr

0801cea4 <ucdr_buffer_alignment>:
 801cea4:	7d43      	ldrb	r3, [r0, #21]
 801cea6:	428b      	cmp	r3, r1
 801cea8:	d209      	bcs.n	801cebe <ucdr_buffer_alignment+0x1a>
 801ceaa:	6903      	ldr	r3, [r0, #16]
 801ceac:	1e4a      	subs	r2, r1, #1
 801ceae:	fbb3 f0f1 	udiv	r0, r3, r1
 801ceb2:	fb01 3010 	mls	r0, r1, r0, r3
 801ceb6:	1a09      	subs	r1, r1, r0
 801ceb8:	ea01 0002 	and.w	r0, r1, r2
 801cebc:	4770      	bx	lr
 801cebe:	2000      	movs	r0, #0
 801cec0:	4770      	bx	lr
 801cec2:	bf00      	nop

0801cec4 <ucdr_align_to>:
 801cec4:	b538      	push	{r3, r4, r5, lr}
 801cec6:	4604      	mov	r4, r0
 801cec8:	460d      	mov	r5, r1
 801ceca:	f7ff ffeb 	bl	801cea4 <ucdr_buffer_alignment>
 801cece:	68a3      	ldr	r3, [r4, #8]
 801ced0:	7565      	strb	r5, [r4, #21]
 801ced2:	181a      	adds	r2, r3, r0
 801ced4:	6923      	ldr	r3, [r4, #16]
 801ced6:	4418      	add	r0, r3
 801ced8:	6863      	ldr	r3, [r4, #4]
 801ceda:	4293      	cmp	r3, r2
 801cedc:	6120      	str	r0, [r4, #16]
 801cede:	bf28      	it	cs
 801cee0:	4613      	movcs	r3, r2
 801cee2:	60a3      	str	r3, [r4, #8]
 801cee4:	bd38      	pop	{r3, r4, r5, pc}
 801cee6:	bf00      	nop

0801cee8 <ucdr_buffer_length>:
 801cee8:	6882      	ldr	r2, [r0, #8]
 801ceea:	6800      	ldr	r0, [r0, #0]
 801ceec:	1a10      	subs	r0, r2, r0
 801ceee:	4770      	bx	lr

0801cef0 <ucdr_buffer_remaining>:
 801cef0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801cef4:	1a10      	subs	r0, r2, r0
 801cef6:	4770      	bx	lr

0801cef8 <ucdr_check_final_buffer_behavior_array>:
 801cef8:	b538      	push	{r3, r4, r5, lr}
 801cefa:	7d83      	ldrb	r3, [r0, #22]
 801cefc:	b9a3      	cbnz	r3, 801cf28 <ucdr_check_final_buffer_behavior_array+0x30>
 801cefe:	4604      	mov	r4, r0
 801cf00:	460d      	mov	r5, r1
 801cf02:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801cf06:	429a      	cmp	r2, r3
 801cf08:	d300      	bcc.n	801cf0c <ucdr_check_final_buffer_behavior_array+0x14>
 801cf0a:	b931      	cbnz	r1, 801cf1a <ucdr_check_final_buffer_behavior_array+0x22>
 801cf0c:	4620      	mov	r0, r4
 801cf0e:	f7ff ffef 	bl	801cef0 <ucdr_buffer_remaining>
 801cf12:	42a8      	cmp	r0, r5
 801cf14:	bf28      	it	cs
 801cf16:	4628      	movcs	r0, r5
 801cf18:	bd38      	pop	{r3, r4, r5, pc}
 801cf1a:	6983      	ldr	r3, [r0, #24]
 801cf1c:	b133      	cbz	r3, 801cf2c <ucdr_check_final_buffer_behavior_array+0x34>
 801cf1e:	69c1      	ldr	r1, [r0, #28]
 801cf20:	4798      	blx	r3
 801cf22:	75a0      	strb	r0, [r4, #22]
 801cf24:	2800      	cmp	r0, #0
 801cf26:	d0f1      	beq.n	801cf0c <ucdr_check_final_buffer_behavior_array+0x14>
 801cf28:	2000      	movs	r0, #0
 801cf2a:	bd38      	pop	{r3, r4, r5, pc}
 801cf2c:	2301      	movs	r3, #1
 801cf2e:	7583      	strb	r3, [r0, #22]
 801cf30:	e7fa      	b.n	801cf28 <ucdr_check_final_buffer_behavior_array+0x30>
 801cf32:	bf00      	nop

0801cf34 <ucdr_advance_buffer>:
 801cf34:	b538      	push	{r3, r4, r5, lr}
 801cf36:	4604      	mov	r4, r0
 801cf38:	460d      	mov	r5, r1
 801cf3a:	f7ff ff53 	bl	801cde4 <ucdr_check_buffer_available_for>
 801cf3e:	b178      	cbz	r0, 801cf60 <ucdr_advance_buffer+0x2c>
 801cf40:	6923      	ldr	r3, [r4, #16]
 801cf42:	68a2      	ldr	r2, [r4, #8]
 801cf44:	442b      	add	r3, r5
 801cf46:	442a      	add	r2, r5
 801cf48:	6123      	str	r3, [r4, #16]
 801cf4a:	2301      	movs	r3, #1
 801cf4c:	60a2      	str	r2, [r4, #8]
 801cf4e:	7563      	strb	r3, [r4, #21]
 801cf50:	bd38      	pop	{r3, r4, r5, pc}
 801cf52:	68a2      	ldr	r2, [r4, #8]
 801cf54:	1a2d      	subs	r5, r5, r0
 801cf56:	6923      	ldr	r3, [r4, #16]
 801cf58:	4402      	add	r2, r0
 801cf5a:	4418      	add	r0, r3
 801cf5c:	60a2      	str	r2, [r4, #8]
 801cf5e:	6120      	str	r0, [r4, #16]
 801cf60:	4629      	mov	r1, r5
 801cf62:	2201      	movs	r2, #1
 801cf64:	4620      	mov	r0, r4
 801cf66:	f7ff ffc7 	bl	801cef8 <ucdr_check_final_buffer_behavior_array>
 801cf6a:	2800      	cmp	r0, #0
 801cf6c:	d1f1      	bne.n	801cf52 <ucdr_advance_buffer+0x1e>
 801cf6e:	2301      	movs	r3, #1
 801cf70:	7563      	strb	r3, [r4, #21]
 801cf72:	bd38      	pop	{r3, r4, r5, pc}

0801cf74 <ucdr_serialize_sequence_char>:
 801cf74:	b570      	push	{r4, r5, r6, lr}
 801cf76:	4615      	mov	r5, r2
 801cf78:	460e      	mov	r6, r1
 801cf7a:	7d01      	ldrb	r1, [r0, #20]
 801cf7c:	4604      	mov	r4, r0
 801cf7e:	f005 fe1f 	bl	8022bc0 <ucdr_serialize_endian_uint32_t>
 801cf82:	b90d      	cbnz	r5, 801cf88 <ucdr_serialize_sequence_char+0x14>
 801cf84:	2001      	movs	r0, #1
 801cf86:	bd70      	pop	{r4, r5, r6, pc}
 801cf88:	462b      	mov	r3, r5
 801cf8a:	4632      	mov	r2, r6
 801cf8c:	7d21      	ldrb	r1, [r4, #20]
 801cf8e:	4620      	mov	r0, r4
 801cf90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf94:	f005 b95a 	b.w	802224c <ucdr_serialize_endian_array_char>

0801cf98 <ucdr_deserialize_sequence_char>:
 801cf98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf9c:	461d      	mov	r5, r3
 801cf9e:	4616      	mov	r6, r2
 801cfa0:	460f      	mov	r7, r1
 801cfa2:	461a      	mov	r2, r3
 801cfa4:	7d01      	ldrb	r1, [r0, #20]
 801cfa6:	4604      	mov	r4, r0
 801cfa8:	f005 ff32 	bl	8022e10 <ucdr_deserialize_endian_uint32_t>
 801cfac:	682b      	ldr	r3, [r5, #0]
 801cfae:	429e      	cmp	r6, r3
 801cfb0:	d201      	bcs.n	801cfb6 <ucdr_deserialize_sequence_char+0x1e>
 801cfb2:	2201      	movs	r2, #1
 801cfb4:	75a2      	strb	r2, [r4, #22]
 801cfb6:	b913      	cbnz	r3, 801cfbe <ucdr_deserialize_sequence_char+0x26>
 801cfb8:	2001      	movs	r0, #1
 801cfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cfbe:	463a      	mov	r2, r7
 801cfc0:	7d21      	ldrb	r1, [r4, #20]
 801cfc2:	4620      	mov	r0, r4
 801cfc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cfc8:	f005 b972 	b.w	80222b0 <ucdr_deserialize_endian_array_char>

0801cfcc <ucdr_serialize_sequence_uint8_t>:
 801cfcc:	b570      	push	{r4, r5, r6, lr}
 801cfce:	4615      	mov	r5, r2
 801cfd0:	460e      	mov	r6, r1
 801cfd2:	7d01      	ldrb	r1, [r0, #20]
 801cfd4:	4604      	mov	r4, r0
 801cfd6:	f005 fdf3 	bl	8022bc0 <ucdr_serialize_endian_uint32_t>
 801cfda:	b90d      	cbnz	r5, 801cfe0 <ucdr_serialize_sequence_uint8_t+0x14>
 801cfdc:	2001      	movs	r0, #1
 801cfde:	bd70      	pop	{r4, r5, r6, pc}
 801cfe0:	462b      	mov	r3, r5
 801cfe2:	4632      	mov	r2, r6
 801cfe4:	7d21      	ldrb	r1, [r4, #20]
 801cfe6:	4620      	mov	r0, r4
 801cfe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cfec:	f005 b9c6 	b.w	802237c <ucdr_serialize_endian_array_uint8_t>

0801cff0 <ucdr_deserialize_sequence_uint8_t>:
 801cff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cff4:	461d      	mov	r5, r3
 801cff6:	4616      	mov	r6, r2
 801cff8:	460f      	mov	r7, r1
 801cffa:	461a      	mov	r2, r3
 801cffc:	7d01      	ldrb	r1, [r0, #20]
 801cffe:	4604      	mov	r4, r0
 801d000:	f005 ff06 	bl	8022e10 <ucdr_deserialize_endian_uint32_t>
 801d004:	682b      	ldr	r3, [r5, #0]
 801d006:	429e      	cmp	r6, r3
 801d008:	d201      	bcs.n	801d00e <ucdr_deserialize_sequence_uint8_t+0x1e>
 801d00a:	2201      	movs	r2, #1
 801d00c:	75a2      	strb	r2, [r4, #22]
 801d00e:	b913      	cbnz	r3, 801d016 <ucdr_deserialize_sequence_uint8_t+0x26>
 801d010:	2001      	movs	r0, #1
 801d012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d016:	463a      	mov	r2, r7
 801d018:	7d21      	ldrb	r1, [r4, #20]
 801d01a:	4620      	mov	r0, r4
 801d01c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d020:	f005 ba12 	b.w	8022448 <ucdr_deserialize_endian_array_uint8_t>

0801d024 <ucdr_serialize_sequence_uint16_t>:
 801d024:	b570      	push	{r4, r5, r6, lr}
 801d026:	4615      	mov	r5, r2
 801d028:	460e      	mov	r6, r1
 801d02a:	7d01      	ldrb	r1, [r0, #20]
 801d02c:	4604      	mov	r4, r0
 801d02e:	f005 fdc7 	bl	8022bc0 <ucdr_serialize_endian_uint32_t>
 801d032:	b90d      	cbnz	r5, 801d038 <ucdr_serialize_sequence_uint16_t+0x14>
 801d034:	2001      	movs	r0, #1
 801d036:	bd70      	pop	{r4, r5, r6, pc}
 801d038:	462b      	mov	r3, r5
 801d03a:	4632      	mov	r2, r6
 801d03c:	7d21      	ldrb	r1, [r4, #20]
 801d03e:	4620      	mov	r0, r4
 801d040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d044:	f005 ba34 	b.w	80224b0 <ucdr_serialize_endian_array_uint16_t>

0801d048 <ucdr_deserialize_sequence_uint16_t>:
 801d048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d04c:	461d      	mov	r5, r3
 801d04e:	4616      	mov	r6, r2
 801d050:	460f      	mov	r7, r1
 801d052:	461a      	mov	r2, r3
 801d054:	7d01      	ldrb	r1, [r0, #20]
 801d056:	4604      	mov	r4, r0
 801d058:	f005 feda 	bl	8022e10 <ucdr_deserialize_endian_uint32_t>
 801d05c:	682b      	ldr	r3, [r5, #0]
 801d05e:	429e      	cmp	r6, r3
 801d060:	d201      	bcs.n	801d066 <ucdr_deserialize_sequence_uint16_t+0x1e>
 801d062:	2201      	movs	r2, #1
 801d064:	75a2      	strb	r2, [r4, #22]
 801d066:	b913      	cbnz	r3, 801d06e <ucdr_deserialize_sequence_uint16_t+0x26>
 801d068:	2001      	movs	r0, #1
 801d06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d06e:	463a      	mov	r2, r7
 801d070:	7d21      	ldrb	r1, [r4, #20]
 801d072:	4620      	mov	r0, r4
 801d074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d078:	f005 ba70 	b.w	802255c <ucdr_deserialize_endian_array_uint16_t>

0801d07c <rcl_client_get_rmw_handle>:
 801d07c:	b118      	cbz	r0, 801d086 <rcl_client_get_rmw_handle+0xa>
 801d07e:	6800      	ldr	r0, [r0, #0]
 801d080:	b108      	cbz	r0, 801d086 <rcl_client_get_rmw_handle+0xa>
 801d082:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801d086:	4770      	bx	lr

0801d088 <rcl_send_request>:
 801d088:	b570      	push	{r4, r5, r6, lr}
 801d08a:	b082      	sub	sp, #8
 801d08c:	b1f8      	cbz	r0, 801d0ce <rcl_send_request+0x46>
 801d08e:	4604      	mov	r4, r0
 801d090:	6800      	ldr	r0, [r0, #0]
 801d092:	b1e0      	cbz	r0, 801d0ce <rcl_send_request+0x46>
 801d094:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801d098:	b1cb      	cbz	r3, 801d0ce <rcl_send_request+0x46>
 801d09a:	460e      	mov	r6, r1
 801d09c:	b1e1      	cbz	r1, 801d0d8 <rcl_send_request+0x50>
 801d09e:	4615      	mov	r5, r2
 801d0a0:	b1d2      	cbz	r2, 801d0d8 <rcl_send_request+0x50>
 801d0a2:	2105      	movs	r1, #5
 801d0a4:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801d0a8:	f002 fdc6 	bl	801fc38 <__atomic_load_8>
 801d0ac:	4602      	mov	r2, r0
 801d0ae:	460b      	mov	r3, r1
 801d0b0:	4631      	mov	r1, r6
 801d0b2:	e9c5 2300 	strd	r2, r3, [r5]
 801d0b6:	6823      	ldr	r3, [r4, #0]
 801d0b8:	462a      	mov	r2, r5
 801d0ba:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801d0be:	f003 feef 	bl	8020ea0 <rmw_send_request>
 801d0c2:	4606      	mov	r6, r0
 801d0c4:	b160      	cbz	r0, 801d0e0 <rcl_send_request+0x58>
 801d0c6:	2601      	movs	r6, #1
 801d0c8:	4630      	mov	r0, r6
 801d0ca:	b002      	add	sp, #8
 801d0cc:	bd70      	pop	{r4, r5, r6, pc}
 801d0ce:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801d0d2:	4630      	mov	r0, r6
 801d0d4:	b002      	add	sp, #8
 801d0d6:	bd70      	pop	{r4, r5, r6, pc}
 801d0d8:	260b      	movs	r6, #11
 801d0da:	4630      	mov	r0, r6
 801d0dc:	b002      	add	sp, #8
 801d0de:	bd70      	pop	{r4, r5, r6, pc}
 801d0e0:	6820      	ldr	r0, [r4, #0]
 801d0e2:	2105      	movs	r1, #5
 801d0e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d0e8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801d0ec:	9100      	str	r1, [sp, #0]
 801d0ee:	f002 fe0f 	bl	801fd10 <__atomic_exchange_8>
 801d0f2:	4630      	mov	r0, r6
 801d0f4:	b002      	add	sp, #8
 801d0f6:	bd70      	pop	{r4, r5, r6, pc}

0801d0f8 <rcl_take_response>:
 801d0f8:	b570      	push	{r4, r5, r6, lr}
 801d0fa:	468e      	mov	lr, r1
 801d0fc:	b08c      	sub	sp, #48	@ 0x30
 801d0fe:	460c      	mov	r4, r1
 801d100:	4616      	mov	r6, r2
 801d102:	f10d 0c18 	add.w	ip, sp, #24
 801d106:	4605      	mov	r5, r0
 801d108:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d10c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d110:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801d114:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d118:	b35d      	cbz	r5, 801d172 <rcl_take_response+0x7a>
 801d11a:	682b      	ldr	r3, [r5, #0]
 801d11c:	b34b      	cbz	r3, 801d172 <rcl_take_response+0x7a>
 801d11e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801d122:	b330      	cbz	r0, 801d172 <rcl_take_response+0x7a>
 801d124:	b346      	cbz	r6, 801d178 <rcl_take_response+0x80>
 801d126:	2300      	movs	r3, #0
 801d128:	4632      	mov	r2, r6
 801d12a:	a902      	add	r1, sp, #8
 801d12c:	f88d 3007 	strb.w	r3, [sp, #7]
 801d130:	f10d 0307 	add.w	r3, sp, #7
 801d134:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 801d180 <rcl_take_response+0x88>
 801d138:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d13c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d140:	f003 ffb6 	bl	80210b0 <rmw_take_response>
 801d144:	4605      	mov	r5, r0
 801d146:	b9c8      	cbnz	r0, 801d17c <rcl_take_response+0x84>
 801d148:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801d14c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801d150:	2a00      	cmp	r2, #0
 801d152:	bf08      	it	eq
 801d154:	461d      	moveq	r5, r3
 801d156:	f10d 0e18 	add.w	lr, sp, #24
 801d15a:	46a4      	mov	ip, r4
 801d15c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d160:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d164:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801d168:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d16c:	4628      	mov	r0, r5
 801d16e:	b00c      	add	sp, #48	@ 0x30
 801d170:	bd70      	pop	{r4, r5, r6, pc}
 801d172:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801d176:	e7ee      	b.n	801d156 <rcl_take_response+0x5e>
 801d178:	250b      	movs	r5, #11
 801d17a:	e7ec      	b.n	801d156 <rcl_take_response+0x5e>
 801d17c:	2501      	movs	r5, #1
 801d17e:	e7ea      	b.n	801d156 <rcl_take_response+0x5e>
	...

0801d188 <rcl_client_is_valid>:
 801d188:	b130      	cbz	r0, 801d198 <rcl_client_is_valid+0x10>
 801d18a:	6800      	ldr	r0, [r0, #0]
 801d18c:	b120      	cbz	r0, 801d198 <rcl_client_is_valid+0x10>
 801d18e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801d192:	3800      	subs	r0, #0
 801d194:	bf18      	it	ne
 801d196:	2001      	movne	r0, #1
 801d198:	4770      	bx	lr
 801d19a:	bf00      	nop

0801d19c <rcl_get_zero_initialized_context>:
 801d19c:	4a03      	ldr	r2, [pc, #12]	@ (801d1ac <rcl_get_zero_initialized_context+0x10>)
 801d19e:	4603      	mov	r3, r0
 801d1a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d1a4:	e883 0003 	stmia.w	r3, {r0, r1}
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	4770      	bx	lr
 801d1ac:	0802f7a8 	.word	0x0802f7a8

0801d1b0 <rcl_context_is_valid>:
 801d1b0:	b118      	cbz	r0, 801d1ba <rcl_context_is_valid+0xa>
 801d1b2:	6840      	ldr	r0, [r0, #4]
 801d1b4:	3800      	subs	r0, #0
 801d1b6:	bf18      	it	ne
 801d1b8:	2001      	movne	r0, #1
 801d1ba:	4770      	bx	lr

0801d1bc <__cleanup_context>:
 801d1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d1c0:	4606      	mov	r6, r0
 801d1c2:	2300      	movs	r3, #0
 801d1c4:	6800      	ldr	r0, [r0, #0]
 801d1c6:	6073      	str	r3, [r6, #4]
 801d1c8:	2800      	cmp	r0, #0
 801d1ca:	d049      	beq.n	801d260 <__cleanup_context+0xa4>
 801d1cc:	6947      	ldr	r7, [r0, #20]
 801d1ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801d1d2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801d1d6:	b137      	cbz	r7, 801d1e6 <__cleanup_context+0x2a>
 801d1d8:	3014      	adds	r0, #20
 801d1da:	f000 f9bd 	bl	801d558 <rcl_init_options_fini>
 801d1de:	4607      	mov	r7, r0
 801d1e0:	2800      	cmp	r0, #0
 801d1e2:	d144      	bne.n	801d26e <__cleanup_context+0xb2>
 801d1e4:	6830      	ldr	r0, [r6, #0]
 801d1e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801d1e8:	b143      	cbz	r3, 801d1fc <__cleanup_context+0x40>
 801d1ea:	3028      	adds	r0, #40	@ 0x28
 801d1ec:	f003 fcbc 	bl	8020b68 <rmw_context_fini>
 801d1f0:	b118      	cbz	r0, 801d1fa <__cleanup_context+0x3e>
 801d1f2:	2f00      	cmp	r7, #0
 801d1f4:	d03e      	beq.n	801d274 <__cleanup_context+0xb8>
 801d1f6:	f7ff fc63 	bl	801cac0 <rcutils_reset_error>
 801d1fa:	6830      	ldr	r0, [r6, #0]
 801d1fc:	6a03      	ldr	r3, [r0, #32]
 801d1fe:	b1db      	cbz	r3, 801d238 <__cleanup_context+0x7c>
 801d200:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801d204:	2a01      	cmp	r2, #1
 801d206:	f17c 0100 	sbcs.w	r1, ip, #0
 801d20a:	db11      	blt.n	801d230 <__cleanup_context+0x74>
 801d20c:	2400      	movs	r4, #0
 801d20e:	4625      	mov	r5, r4
 801d210:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d214:	4649      	mov	r1, r9
 801d216:	b1b8      	cbz	r0, 801d248 <__cleanup_context+0x8c>
 801d218:	47c0      	blx	r8
 801d21a:	6833      	ldr	r3, [r6, #0]
 801d21c:	3401      	adds	r4, #1
 801d21e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801d222:	f145 0500 	adc.w	r5, r5, #0
 801d226:	6a1b      	ldr	r3, [r3, #32]
 801d228:	4294      	cmp	r4, r2
 801d22a:	eb75 010c 	sbcs.w	r1, r5, ip
 801d22e:	dbef      	blt.n	801d210 <__cleanup_context+0x54>
 801d230:	4618      	mov	r0, r3
 801d232:	4649      	mov	r1, r9
 801d234:	47c0      	blx	r8
 801d236:	6830      	ldr	r0, [r6, #0]
 801d238:	4649      	mov	r1, r9
 801d23a:	47c0      	blx	r8
 801d23c:	2300      	movs	r3, #0
 801d23e:	4638      	mov	r0, r7
 801d240:	e9c6 3300 	strd	r3, r3, [r6]
 801d244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d248:	3401      	adds	r4, #1
 801d24a:	f145 0500 	adc.w	r5, r5, #0
 801d24e:	4294      	cmp	r4, r2
 801d250:	eb75 010c 	sbcs.w	r1, r5, ip
 801d254:	dbdc      	blt.n	801d210 <__cleanup_context+0x54>
 801d256:	4618      	mov	r0, r3
 801d258:	4649      	mov	r1, r9
 801d25a:	47c0      	blx	r8
 801d25c:	6830      	ldr	r0, [r6, #0]
 801d25e:	e7eb      	b.n	801d238 <__cleanup_context+0x7c>
 801d260:	4607      	mov	r7, r0
 801d262:	2300      	movs	r3, #0
 801d264:	4638      	mov	r0, r7
 801d266:	e9c6 3300 	strd	r3, r3, [r6]
 801d26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d26e:	f7ff fc27 	bl	801cac0 <rcutils_reset_error>
 801d272:	e7b7      	b.n	801d1e4 <__cleanup_context+0x28>
 801d274:	f009 fb76 	bl	8026964 <rcl_convert_rmw_ret_to_rcl_ret>
 801d278:	4607      	mov	r7, r0
 801d27a:	e7bc      	b.n	801d1f6 <__cleanup_context+0x3a>

0801d27c <rcl_init>:
 801d27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d280:	1e05      	subs	r5, r0, #0
 801d282:	b09e      	sub	sp, #120	@ 0x78
 801d284:	460e      	mov	r6, r1
 801d286:	4690      	mov	r8, r2
 801d288:	461f      	mov	r7, r3
 801d28a:	f340 809f 	ble.w	801d3cc <rcl_init+0x150>
 801d28e:	2900      	cmp	r1, #0
 801d290:	f000 809f 	beq.w	801d3d2 <rcl_init+0x156>
 801d294:	f1a1 0e04 	sub.w	lr, r1, #4
 801d298:	f04f 0c00 	mov.w	ip, #0
 801d29c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801d2a0:	f10c 0c01 	add.w	ip, ip, #1
 801d2a4:	2c00      	cmp	r4, #0
 801d2a6:	f000 8094 	beq.w	801d3d2 <rcl_init+0x156>
 801d2aa:	4565      	cmp	r5, ip
 801d2ac:	d1f6      	bne.n	801d29c <rcl_init+0x20>
 801d2ae:	f1b8 0f00 	cmp.w	r8, #0
 801d2b2:	f000 808e 	beq.w	801d3d2 <rcl_init+0x156>
 801d2b6:	f8d8 4000 	ldr.w	r4, [r8]
 801d2ba:	2c00      	cmp	r4, #0
 801d2bc:	f000 8089 	beq.w	801d3d2 <rcl_init+0x156>
 801d2c0:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801d2c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d2c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d2ca:	6823      	ldr	r3, [r4, #0]
 801d2cc:	a819      	add	r0, sp, #100	@ 0x64
 801d2ce:	f8cc 3000 	str.w	r3, [ip]
 801d2d2:	f7ff fbd1 	bl	801ca78 <rcutils_allocator_is_valid>
 801d2d6:	f080 0001 	eor.w	r0, r0, #1
 801d2da:	b2c0      	uxtb	r0, r0
 801d2dc:	2800      	cmp	r0, #0
 801d2de:	d178      	bne.n	801d3d2 <rcl_init+0x156>
 801d2e0:	2f00      	cmp	r7, #0
 801d2e2:	d076      	beq.n	801d3d2 <rcl_init+0x156>
 801d2e4:	683b      	ldr	r3, [r7, #0]
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d178      	bne.n	801d3dc <rcl_init+0x160>
 801d2ea:	2178      	movs	r1, #120	@ 0x78
 801d2ec:	2001      	movs	r0, #1
 801d2ee:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801d2f2:	4798      	blx	r3
 801d2f4:	4604      	mov	r4, r0
 801d2f6:	6038      	str	r0, [r7, #0]
 801d2f8:	2800      	cmp	r0, #0
 801d2fa:	f000 80b6 	beq.w	801d46a <rcl_init+0x1ee>
 801d2fe:	a802      	add	r0, sp, #8
 801d300:	f003 f816 	bl	8020330 <rmw_get_zero_initialized_context>
 801d304:	a902      	add	r1, sp, #8
 801d306:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d30a:	2250      	movs	r2, #80	@ 0x50
 801d30c:	f00c faad 	bl	802986a <memcpy>
 801d310:	ac19      	add	r4, sp, #100	@ 0x64
 801d312:	f8d7 e000 	ldr.w	lr, [r7]
 801d316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d318:	46f4      	mov	ip, lr
 801d31a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d31e:	6823      	ldr	r3, [r4, #0]
 801d320:	f10e 0114 	add.w	r1, lr, #20
 801d324:	4640      	mov	r0, r8
 801d326:	f8cc 3000 	str.w	r3, [ip]
 801d32a:	f000 f93f 	bl	801d5ac <rcl_init_options_copy>
 801d32e:	4604      	mov	r4, r0
 801d330:	2800      	cmp	r0, #0
 801d332:	d144      	bne.n	801d3be <rcl_init+0x142>
 801d334:	f8d7 9000 	ldr.w	r9, [r7]
 801d338:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801d33c:	f8c9 0020 	str.w	r0, [r9, #32]
 801d340:	f8c9 5018 	str.w	r5, [r9, #24]
 801d344:	f8c9 801c 	str.w	r8, [r9, #28]
 801d348:	2d00      	cmp	r5, #0
 801d34a:	d04e      	beq.n	801d3ea <rcl_init+0x16e>
 801d34c:	2e00      	cmp	r6, #0
 801d34e:	d04c      	beq.n	801d3ea <rcl_init+0x16e>
 801d350:	2104      	movs	r1, #4
 801d352:	4628      	mov	r0, r5
 801d354:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801d358:	4798      	blx	r3
 801d35a:	f8c9 0020 	str.w	r0, [r9, #32]
 801d35e:	f8d7 9000 	ldr.w	r9, [r7]
 801d362:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801d366:	46ca      	mov	sl, r9
 801d368:	b343      	cbz	r3, 801d3bc <rcl_init+0x140>
 801d36a:	2d01      	cmp	r5, #1
 801d36c:	f178 0300 	sbcs.w	r3, r8, #0
 801d370:	db3b      	blt.n	801d3ea <rcl_init+0x16e>
 801d372:	2400      	movs	r4, #0
 801d374:	3e04      	subs	r6, #4
 801d376:	46a1      	mov	r9, r4
 801d378:	e00b      	b.n	801d392 <rcl_init+0x116>
 801d37a:	6831      	ldr	r1, [r6, #0]
 801d37c:	f00c fa75 	bl	802986a <memcpy>
 801d380:	3401      	adds	r4, #1
 801d382:	f149 0900 	adc.w	r9, r9, #0
 801d386:	45c8      	cmp	r8, r9
 801d388:	bf08      	it	eq
 801d38a:	42a5      	cmpeq	r5, r4
 801d38c:	d02b      	beq.n	801d3e6 <rcl_init+0x16a>
 801d38e:	f8d7 a000 	ldr.w	sl, [r7]
 801d392:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801d396:	f7e2 ff9b 	bl	80002d0 <strlen>
 801d39a:	1c42      	adds	r2, r0, #1
 801d39c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d39e:	4610      	mov	r0, r2
 801d3a0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d3a2:	f8da a020 	ldr.w	sl, [sl, #32]
 801d3a6:	9201      	str	r2, [sp, #4]
 801d3a8:	4798      	blx	r3
 801d3aa:	683b      	ldr	r3, [r7, #0]
 801d3ac:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801d3b0:	6a1b      	ldr	r3, [r3, #32]
 801d3b2:	9a01      	ldr	r2, [sp, #4]
 801d3b4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d3b8:	2800      	cmp	r0, #0
 801d3ba:	d1de      	bne.n	801d37a <rcl_init+0xfe>
 801d3bc:	240a      	movs	r4, #10
 801d3be:	4638      	mov	r0, r7
 801d3c0:	f7ff fefc 	bl	801d1bc <__cleanup_context>
 801d3c4:	4620      	mov	r0, r4
 801d3c6:	b01e      	add	sp, #120	@ 0x78
 801d3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3cc:	2900      	cmp	r1, #0
 801d3ce:	f43f af6e 	beq.w	801d2ae <rcl_init+0x32>
 801d3d2:	240b      	movs	r4, #11
 801d3d4:	4620      	mov	r0, r4
 801d3d6:	b01e      	add	sp, #120	@ 0x78
 801d3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3dc:	2464      	movs	r4, #100	@ 0x64
 801d3de:	4620      	mov	r0, r4
 801d3e0:	b01e      	add	sp, #120	@ 0x78
 801d3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3e6:	f8d7 9000 	ldr.w	r9, [r7]
 801d3ea:	4926      	ldr	r1, [pc, #152]	@ (801d484 <rcl_init+0x208>)
 801d3ec:	680b      	ldr	r3, [r1, #0]
 801d3ee:	3301      	adds	r3, #1
 801d3f0:	d036      	beq.n	801d460 <rcl_init+0x1e4>
 801d3f2:	461a      	mov	r2, r3
 801d3f4:	2400      	movs	r4, #0
 801d3f6:	600b      	str	r3, [r1, #0]
 801d3f8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801d3fc:	607b      	str	r3, [r7, #4]
 801d3fe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801d400:	3301      	adds	r3, #1
 801d402:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801d406:	d034      	beq.n	801d472 <rcl_init+0x1f6>
 801d408:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801d40c:	b93b      	cbnz	r3, 801d41e <rcl_init+0x1a2>
 801d40e:	3030      	adds	r0, #48	@ 0x30
 801d410:	f000 f93a 	bl	801d688 <rcl_get_localhost_only>
 801d414:	4604      	mov	r4, r0
 801d416:	2800      	cmp	r0, #0
 801d418:	d1d1      	bne.n	801d3be <rcl_init+0x142>
 801d41a:	683b      	ldr	r3, [r7, #0]
 801d41c:	6958      	ldr	r0, [r3, #20]
 801d41e:	aa18      	add	r2, sp, #96	@ 0x60
 801d420:	a917      	add	r1, sp, #92	@ 0x5c
 801d422:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801d424:	f001 f892 	bl	801e54c <rcl_validate_enclave_name>
 801d428:	4604      	mov	r4, r0
 801d42a:	2800      	cmp	r0, #0
 801d42c:	d1c7      	bne.n	801d3be <rcl_init+0x142>
 801d42e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d430:	b9eb      	cbnz	r3, 801d46e <rcl_init+0x1f2>
 801d432:	6839      	ldr	r1, [r7, #0]
 801d434:	694b      	ldr	r3, [r1, #20]
 801d436:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801d43a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801d43c:	f000 fc72 	bl	801dd24 <rcl_get_security_options_from_environment>
 801d440:	4604      	mov	r4, r0
 801d442:	2800      	cmp	r0, #0
 801d444:	d1bb      	bne.n	801d3be <rcl_init+0x142>
 801d446:	6839      	ldr	r1, [r7, #0]
 801d448:	6948      	ldr	r0, [r1, #20]
 801d44a:	3128      	adds	r1, #40	@ 0x28
 801d44c:	3018      	adds	r0, #24
 801d44e:	f003 fa55 	bl	80208fc <rmw_init>
 801d452:	4604      	mov	r4, r0
 801d454:	2800      	cmp	r0, #0
 801d456:	d0bd      	beq.n	801d3d4 <rcl_init+0x158>
 801d458:	f009 fa84 	bl	8026964 <rcl_convert_rmw_ret_to_rcl_ret>
 801d45c:	4604      	mov	r4, r0
 801d45e:	e7ae      	b.n	801d3be <rcl_init+0x142>
 801d460:	2201      	movs	r2, #1
 801d462:	461c      	mov	r4, r3
 801d464:	600a      	str	r2, [r1, #0]
 801d466:	4613      	mov	r3, r2
 801d468:	e7c6      	b.n	801d3f8 <rcl_init+0x17c>
 801d46a:	240a      	movs	r4, #10
 801d46c:	e7b2      	b.n	801d3d4 <rcl_init+0x158>
 801d46e:	2401      	movs	r4, #1
 801d470:	e7a5      	b.n	801d3be <rcl_init+0x142>
 801d472:	3024      	adds	r0, #36	@ 0x24
 801d474:	f009 fa8a 	bl	802698c <rcl_get_default_domain_id>
 801d478:	4604      	mov	r4, r0
 801d47a:	2800      	cmp	r0, #0
 801d47c:	d19f      	bne.n	801d3be <rcl_init+0x142>
 801d47e:	683b      	ldr	r3, [r7, #0]
 801d480:	6958      	ldr	r0, [r3, #20]
 801d482:	e7c1      	b.n	801d408 <rcl_init+0x18c>
 801d484:	20042758 	.word	0x20042758

0801d488 <rcl_get_zero_initialized_init_options>:
 801d488:	2000      	movs	r0, #0
 801d48a:	4770      	bx	lr

0801d48c <rcl_init_options_init>:
 801d48c:	b084      	sub	sp, #16
 801d48e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d490:	b097      	sub	sp, #92	@ 0x5c
 801d492:	ae1d      	add	r6, sp, #116	@ 0x74
 801d494:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801d498:	2800      	cmp	r0, #0
 801d49a:	d058      	beq.n	801d54e <rcl_init_options_init+0xc2>
 801d49c:	6803      	ldr	r3, [r0, #0]
 801d49e:	4605      	mov	r5, r0
 801d4a0:	b133      	cbz	r3, 801d4b0 <rcl_init_options_init+0x24>
 801d4a2:	2464      	movs	r4, #100	@ 0x64
 801d4a4:	4620      	mov	r0, r4
 801d4a6:	b017      	add	sp, #92	@ 0x5c
 801d4a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d4ac:	b004      	add	sp, #16
 801d4ae:	4770      	bx	lr
 801d4b0:	4630      	mov	r0, r6
 801d4b2:	f7ff fae1 	bl	801ca78 <rcutils_allocator_is_valid>
 801d4b6:	2800      	cmp	r0, #0
 801d4b8:	d049      	beq.n	801d54e <rcl_init_options_init+0xc2>
 801d4ba:	46b4      	mov	ip, r6
 801d4bc:	ac11      	add	r4, sp, #68	@ 0x44
 801d4be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801d4c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d4c4:	f8dc 3000 	ldr.w	r3, [ip]
 801d4c8:	2050      	movs	r0, #80	@ 0x50
 801d4ca:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801d4cc:	6023      	str	r3, [r4, #0]
 801d4ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d4d0:	4798      	blx	r3
 801d4d2:	4604      	mov	r4, r0
 801d4d4:	6028      	str	r0, [r5, #0]
 801d4d6:	2800      	cmp	r0, #0
 801d4d8:	d03b      	beq.n	801d552 <rcl_init_options_init+0xc6>
 801d4da:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801d4de:	4686      	mov	lr, r0
 801d4e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801d4e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d4e8:	f8dc 3000 	ldr.w	r3, [ip]
 801d4ec:	a802      	add	r0, sp, #8
 801d4ee:	f8ce 3000 	str.w	r3, [lr]
 801d4f2:	f002 ff31 	bl	8020358 <rmw_get_zero_initialized_init_options>
 801d4f6:	f10d 0e08 	add.w	lr, sp, #8
 801d4fa:	f104 0c18 	add.w	ip, r4, #24
 801d4fe:	682f      	ldr	r7, [r5, #0]
 801d500:	ac20      	add	r4, sp, #128	@ 0x80
 801d502:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d506:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d50a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d50e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d512:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d516:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d51a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801d51e:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d522:	e894 0003 	ldmia.w	r4, {r0, r1}
 801d526:	e88d 0003 	stmia.w	sp, {r0, r1}
 801d52a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801d52e:	f107 0018 	add.w	r0, r7, #24
 801d532:	f003 f8e5 	bl	8020700 <rmw_init_options_init>
 801d536:	4604      	mov	r4, r0
 801d538:	2800      	cmp	r0, #0
 801d53a:	d0b3      	beq.n	801d4a4 <rcl_init_options_init+0x18>
 801d53c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801d53e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d540:	6828      	ldr	r0, [r5, #0]
 801d542:	4798      	blx	r3
 801d544:	4620      	mov	r0, r4
 801d546:	f009 fa0d 	bl	8026964 <rcl_convert_rmw_ret_to_rcl_ret>
 801d54a:	4604      	mov	r4, r0
 801d54c:	e7aa      	b.n	801d4a4 <rcl_init_options_init+0x18>
 801d54e:	240b      	movs	r4, #11
 801d550:	e7a8      	b.n	801d4a4 <rcl_init_options_init+0x18>
 801d552:	240a      	movs	r4, #10
 801d554:	e7a6      	b.n	801d4a4 <rcl_init_options_init+0x18>
 801d556:	bf00      	nop

0801d558 <rcl_init_options_fini>:
 801d558:	b530      	push	{r4, r5, lr}
 801d55a:	b087      	sub	sp, #28
 801d55c:	b1f0      	cbz	r0, 801d59c <rcl_init_options_fini+0x44>
 801d55e:	6803      	ldr	r3, [r0, #0]
 801d560:	4604      	mov	r4, r0
 801d562:	b1db      	cbz	r3, 801d59c <rcl_init_options_fini+0x44>
 801d564:	469c      	mov	ip, r3
 801d566:	f10d 0e04 	add.w	lr, sp, #4
 801d56a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801d56e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d572:	f8dc 3000 	ldr.w	r3, [ip]
 801d576:	a801      	add	r0, sp, #4
 801d578:	f8ce 3000 	str.w	r3, [lr]
 801d57c:	f7ff fa7c 	bl	801ca78 <rcutils_allocator_is_valid>
 801d580:	b160      	cbz	r0, 801d59c <rcl_init_options_fini+0x44>
 801d582:	6820      	ldr	r0, [r4, #0]
 801d584:	3018      	adds	r0, #24
 801d586:	f003 f975 	bl	8020874 <rmw_init_options_fini>
 801d58a:	4605      	mov	r5, r0
 801d58c:	b950      	cbnz	r0, 801d5a4 <rcl_init_options_fini+0x4c>
 801d58e:	6820      	ldr	r0, [r4, #0]
 801d590:	9b02      	ldr	r3, [sp, #8]
 801d592:	9905      	ldr	r1, [sp, #20]
 801d594:	4798      	blx	r3
 801d596:	4628      	mov	r0, r5
 801d598:	b007      	add	sp, #28
 801d59a:	bd30      	pop	{r4, r5, pc}
 801d59c:	250b      	movs	r5, #11
 801d59e:	4628      	mov	r0, r5
 801d5a0:	b007      	add	sp, #28
 801d5a2:	bd30      	pop	{r4, r5, pc}
 801d5a4:	f009 f9de 	bl	8026964 <rcl_convert_rmw_ret_to_rcl_ret>
 801d5a8:	4605      	mov	r5, r0
 801d5aa:	e7f8      	b.n	801d59e <rcl_init_options_fini+0x46>

0801d5ac <rcl_init_options_copy>:
 801d5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5b0:	b094      	sub	sp, #80	@ 0x50
 801d5b2:	2800      	cmp	r0, #0
 801d5b4:	d05b      	beq.n	801d66e <rcl_init_options_copy+0xc2>
 801d5b6:	4604      	mov	r4, r0
 801d5b8:	6800      	ldr	r0, [r0, #0]
 801d5ba:	2800      	cmp	r0, #0
 801d5bc:	d057      	beq.n	801d66e <rcl_init_options_copy+0xc2>
 801d5be:	460e      	mov	r6, r1
 801d5c0:	f7ff fa5a 	bl	801ca78 <rcutils_allocator_is_valid>
 801d5c4:	2e00      	cmp	r6, #0
 801d5c6:	d052      	beq.n	801d66e <rcl_init_options_copy+0xc2>
 801d5c8:	f080 0001 	eor.w	r0, r0, #1
 801d5cc:	b2c0      	uxtb	r0, r0
 801d5ce:	2800      	cmp	r0, #0
 801d5d0:	d14d      	bne.n	801d66e <rcl_init_options_copy+0xc2>
 801d5d2:	6833      	ldr	r3, [r6, #0]
 801d5d4:	b123      	cbz	r3, 801d5e0 <rcl_init_options_copy+0x34>
 801d5d6:	2464      	movs	r4, #100	@ 0x64
 801d5d8:	4620      	mov	r0, r4
 801d5da:	b014      	add	sp, #80	@ 0x50
 801d5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5e0:	6827      	ldr	r7, [r4, #0]
 801d5e2:	ad0f      	add	r5, sp, #60	@ 0x3c
 801d5e4:	46bc      	mov	ip, r7
 801d5e6:	f8d7 8000 	ldr.w	r8, [r7]
 801d5ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801d5ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d5f0:	f8dc 3000 	ldr.w	r3, [ip]
 801d5f4:	2050      	movs	r0, #80	@ 0x50
 801d5f6:	4619      	mov	r1, r3
 801d5f8:	602b      	str	r3, [r5, #0]
 801d5fa:	47c0      	blx	r8
 801d5fc:	4605      	mov	r5, r0
 801d5fe:	6030      	str	r0, [r6, #0]
 801d600:	b3d0      	cbz	r0, 801d678 <rcl_init_options_copy+0xcc>
 801d602:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801d606:	4686      	mov	lr, r0
 801d608:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801d60c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d610:	f8dc 3000 	ldr.w	r3, [ip]
 801d614:	4668      	mov	r0, sp
 801d616:	f8ce 3000 	str.w	r3, [lr]
 801d61a:	f002 fe9d 	bl	8020358 <rmw_get_zero_initialized_init_options>
 801d61e:	46ee      	mov	lr, sp
 801d620:	f105 0c18 	add.w	ip, r5, #24
 801d624:	6824      	ldr	r4, [r4, #0]
 801d626:	6835      	ldr	r5, [r6, #0]
 801d628:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d62c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d630:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d634:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d638:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d63c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d640:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801d644:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d648:	f104 0018 	add.w	r0, r4, #24
 801d64c:	f105 0118 	add.w	r1, r5, #24
 801d650:	f003 f8be 	bl	80207d0 <rmw_init_options_copy>
 801d654:	4604      	mov	r4, r0
 801d656:	2800      	cmp	r0, #0
 801d658:	d0be      	beq.n	801d5d8 <rcl_init_options_copy+0x2c>
 801d65a:	f7ff fa1b 	bl	801ca94 <rcutils_get_error_string>
 801d65e:	f7ff fa2f 	bl	801cac0 <rcutils_reset_error>
 801d662:	4630      	mov	r0, r6
 801d664:	f7ff ff78 	bl	801d558 <rcl_init_options_fini>
 801d668:	b140      	cbz	r0, 801d67c <rcl_init_options_copy+0xd0>
 801d66a:	4604      	mov	r4, r0
 801d66c:	e7b4      	b.n	801d5d8 <rcl_init_options_copy+0x2c>
 801d66e:	240b      	movs	r4, #11
 801d670:	4620      	mov	r0, r4
 801d672:	b014      	add	sp, #80	@ 0x50
 801d674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d678:	240a      	movs	r4, #10
 801d67a:	e7ad      	b.n	801d5d8 <rcl_init_options_copy+0x2c>
 801d67c:	4620      	mov	r0, r4
 801d67e:	b014      	add	sp, #80	@ 0x50
 801d680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d684:	f009 b96e 	b.w	8026964 <rcl_convert_rmw_ret_to_rcl_ret>

0801d688 <rcl_get_localhost_only>:
 801d688:	b510      	push	{r4, lr}
 801d68a:	2300      	movs	r3, #0
 801d68c:	b082      	sub	sp, #8
 801d68e:	9301      	str	r3, [sp, #4]
 801d690:	b1b8      	cbz	r0, 801d6c2 <rcl_get_localhost_only+0x3a>
 801d692:	4604      	mov	r4, r0
 801d694:	a901      	add	r1, sp, #4
 801d696:	480c      	ldr	r0, [pc, #48]	@ (801d6c8 <rcl_get_localhost_only+0x40>)
 801d698:	f002 fb72 	bl	801fd80 <rcutils_get_env>
 801d69c:	b110      	cbz	r0, 801d6a4 <rcl_get_localhost_only+0x1c>
 801d69e:	2001      	movs	r0, #1
 801d6a0:	b002      	add	sp, #8
 801d6a2:	bd10      	pop	{r4, pc}
 801d6a4:	9b01      	ldr	r3, [sp, #4]
 801d6a6:	b113      	cbz	r3, 801d6ae <rcl_get_localhost_only+0x26>
 801d6a8:	781a      	ldrb	r2, [r3, #0]
 801d6aa:	2a31      	cmp	r2, #49	@ 0x31
 801d6ac:	d004      	beq.n	801d6b8 <rcl_get_localhost_only+0x30>
 801d6ae:	2302      	movs	r3, #2
 801d6b0:	2000      	movs	r0, #0
 801d6b2:	7023      	strb	r3, [r4, #0]
 801d6b4:	b002      	add	sp, #8
 801d6b6:	bd10      	pop	{r4, pc}
 801d6b8:	785b      	ldrb	r3, [r3, #1]
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d1f7      	bne.n	801d6ae <rcl_get_localhost_only+0x26>
 801d6be:	2301      	movs	r3, #1
 801d6c0:	e7f6      	b.n	801d6b0 <rcl_get_localhost_only+0x28>
 801d6c2:	200b      	movs	r0, #11
 801d6c4:	b002      	add	sp, #8
 801d6c6:	bd10      	pop	{r4, pc}
 801d6c8:	0802f7b0 	.word	0x0802f7b0

0801d6cc <rcl_get_zero_initialized_node>:
 801d6cc:	4a03      	ldr	r2, [pc, #12]	@ (801d6dc <rcl_get_zero_initialized_node+0x10>)
 801d6ce:	4603      	mov	r3, r0
 801d6d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d6d4:	e883 0003 	stmia.w	r3, {r0, r1}
 801d6d8:	4618      	mov	r0, r3
 801d6da:	4770      	bx	lr
 801d6dc:	0802f7e0 	.word	0x0802f7e0

0801d6e0 <rcl_node_init>:
 801d6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6e4:	b0a9      	sub	sp, #164	@ 0xa4
 801d6e6:	4604      	mov	r4, r0
 801d6e8:	460e      	mov	r6, r1
 801d6ea:	4615      	mov	r5, r2
 801d6ec:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 801d6f0:	a823      	add	r0, sp, #140	@ 0x8c
 801d6f2:	461f      	mov	r7, r3
 801d6f4:	f009 fb70 	bl	8026dd8 <rcl_guard_condition_get_default_options>
 801d6f8:	f1b8 0f00 	cmp.w	r8, #0
 801d6fc:	f000 80f3 	beq.w	801d8e6 <rcl_node_init+0x206>
 801d700:	4640      	mov	r0, r8
 801d702:	f7ff f9b9 	bl	801ca78 <rcutils_allocator_is_valid>
 801d706:	2d00      	cmp	r5, #0
 801d708:	bf18      	it	ne
 801d70a:	2c00      	cmpne	r4, #0
 801d70c:	f080 0001 	eor.w	r0, r0, #1
 801d710:	bf0c      	ite	eq
 801d712:	f04f 0c01 	moveq.w	ip, #1
 801d716:	f04f 0c00 	movne.w	ip, #0
 801d71a:	2e00      	cmp	r6, #0
 801d71c:	bf08      	it	eq
 801d71e:	f04c 0c01 	orreq.w	ip, ip, #1
 801d722:	ea4c 0c00 	orr.w	ip, ip, r0
 801d726:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 801d72a:	f040 80dc 	bne.w	801d8e6 <rcl_node_init+0x206>
 801d72e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801d732:	f1ba 0f00 	cmp.w	sl, #0
 801d736:	f040 80fc 	bne.w	801d932 <rcl_node_init+0x252>
 801d73a:	2f00      	cmp	r7, #0
 801d73c:	f000 80d3 	beq.w	801d8e6 <rcl_node_init+0x206>
 801d740:	4638      	mov	r0, r7
 801d742:	f7ff fd35 	bl	801d1b0 <rcl_context_is_valid>
 801d746:	4683      	mov	fp, r0
 801d748:	2800      	cmp	r0, #0
 801d74a:	f000 80d2 	beq.w	801d8f2 <rcl_node_init+0x212>
 801d74e:	4652      	mov	r2, sl
 801d750:	4630      	mov	r0, r6
 801d752:	a922      	add	r1, sp, #136	@ 0x88
 801d754:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 801d758:	f002 ff28 	bl	80205ac <rmw_validate_node_name>
 801d75c:	4682      	mov	sl, r0
 801d75e:	2800      	cmp	r0, #0
 801d760:	f040 80c3 	bne.w	801d8ea <rcl_node_init+0x20a>
 801d764:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801d766:	2800      	cmp	r0, #0
 801d768:	f040 80f1 	bne.w	801d94e <rcl_node_init+0x26e>
 801d76c:	4628      	mov	r0, r5
 801d76e:	f7e2 fdaf 	bl	80002d0 <strlen>
 801d772:	2800      	cmp	r0, #0
 801d774:	f040 80c0 	bne.w	801d8f8 <rcl_node_init+0x218>
 801d778:	4d79      	ldr	r5, [pc, #484]	@ (801d960 <rcl_node_init+0x280>)
 801d77a:	a922      	add	r1, sp, #136	@ 0x88
 801d77c:	2200      	movs	r2, #0
 801d77e:	4628      	mov	r0, r5
 801d780:	f002 fef6 	bl	8020570 <rmw_validate_namespace>
 801d784:	4682      	mov	sl, r0
 801d786:	2800      	cmp	r0, #0
 801d788:	f040 80af 	bne.w	801d8ea <rcl_node_init+0x20a>
 801d78c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801d78e:	2800      	cmp	r0, #0
 801d790:	f040 80d5 	bne.w	801d93e <rcl_node_init+0x25e>
 801d794:	f8d8 3000 	ldr.w	r3, [r8]
 801d798:	2078      	movs	r0, #120	@ 0x78
 801d79a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801d79e:	4798      	blx	r3
 801d7a0:	4682      	mov	sl, r0
 801d7a2:	6060      	str	r0, [r4, #4]
 801d7a4:	2800      	cmp	r0, #0
 801d7a6:	f000 80cf 	beq.w	801d948 <rcl_node_init+0x268>
 801d7aa:	2200      	movs	r2, #0
 801d7ac:	2300      	movs	r3, #0
 801d7ae:	a808      	add	r0, sp, #32
 801d7b0:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 801d7b4:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 801d7b8:	f000 f902 	bl	801d9c0 <rcl_node_get_default_options>
 801d7bc:	a908      	add	r1, sp, #32
 801d7be:	4650      	mov	r0, sl
 801d7c0:	2268      	movs	r2, #104	@ 0x68
 801d7c2:	f00c f852 	bl	802986a <memcpy>
 801d7c6:	6861      	ldr	r1, [r4, #4]
 801d7c8:	4640      	mov	r0, r8
 801d7ca:	6027      	str	r7, [r4, #0]
 801d7cc:	f000 f906 	bl	801d9dc <rcl_node_options_copy>
 801d7d0:	2800      	cmp	r0, #0
 801d7d2:	d158      	bne.n	801d886 <rcl_node_init+0x1a6>
 801d7d4:	4628      	mov	r0, r5
 801d7d6:	f7e2 fd7b 	bl	80002d0 <strlen>
 801d7da:	4428      	add	r0, r5
 801d7dc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801d7e0:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801d7e4:	2b2f      	cmp	r3, #47	@ 0x2f
 801d7e6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801d7ea:	9300      	str	r3, [sp, #0]
 801d7ec:	bf0c      	ite	eq
 801d7ee:	4b5d      	ldreq	r3, [pc, #372]	@ (801d964 <rcl_node_init+0x284>)
 801d7f0:	4b5d      	ldrne	r3, [pc, #372]	@ (801d968 <rcl_node_init+0x288>)
 801d7f2:	9302      	str	r3, [sp, #8]
 801d7f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d7f8:	9301      	str	r3, [sp, #4]
 801d7fa:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801d7fe:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801d802:	f002 fae5 	bl	801fdd0 <rcutils_format_string_limit>
 801d806:	6823      	ldr	r3, [r4, #0]
 801d808:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 801d80c:	4631      	mov	r1, r6
 801d80e:	6818      	ldr	r0, [r3, #0]
 801d810:	462a      	mov	r2, r5
 801d812:	6866      	ldr	r6, [r4, #4]
 801d814:	3028      	adds	r0, #40	@ 0x28
 801d816:	f003 fa59 	bl	8020ccc <rmw_create_node>
 801d81a:	6863      	ldr	r3, [r4, #4]
 801d81c:	66b0      	str	r0, [r6, #104]	@ 0x68
 801d81e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801d820:	2800      	cmp	r0, #0
 801d822:	d032      	beq.n	801d88a <rcl_node_init+0x1aa>
 801d824:	f003 fae2 	bl	8020dec <rmw_node_get_graph_guard_condition>
 801d828:	4682      	mov	sl, r0
 801d82a:	b360      	cbz	r0, 801d886 <rcl_node_init+0x1a6>
 801d82c:	f8d8 3000 	ldr.w	r3, [r8]
 801d830:	2008      	movs	r0, #8
 801d832:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801d836:	6866      	ldr	r6, [r4, #4]
 801d838:	4798      	blx	r3
 801d83a:	6863      	ldr	r3, [r4, #4]
 801d83c:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801d83e:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801d842:	f1bb 0f00 	cmp.w	fp, #0
 801d846:	d020      	beq.n	801d88a <rcl_node_init+0x1aa>
 801d848:	a806      	add	r0, sp, #24
 801d84a:	ae23      	add	r6, sp, #140	@ 0x8c
 801d84c:	f009 fa38 	bl	8026cc0 <rcl_get_zero_initialized_guard_condition>
 801d850:	a806      	add	r0, sp, #24
 801d852:	6863      	ldr	r3, [r4, #4]
 801d854:	46c4      	mov	ip, r8
 801d856:	c803      	ldmia	r0, {r0, r1}
 801d858:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801d85c:	e88b 0003 	stmia.w	fp, {r0, r1}
 801d860:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801d864:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801d866:	f8dc 3000 	ldr.w	r3, [ip]
 801d86a:	6033      	str	r3, [r6, #0]
 801d86c:	ab28      	add	r3, sp, #160	@ 0xa0
 801d86e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801d872:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801d876:	4651      	mov	r1, sl
 801d878:	463a      	mov	r2, r7
 801d87a:	4670      	mov	r0, lr
 801d87c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d87e:	f009 fa29 	bl	8026cd4 <rcl_guard_condition_init_from_rmw>
 801d882:	4682      	mov	sl, r0
 801d884:	b328      	cbz	r0, 801d8d2 <rcl_node_init+0x1f2>
 801d886:	6863      	ldr	r3, [r4, #4]
 801d888:	b1f3      	cbz	r3, 801d8c8 <rcl_node_init+0x1e8>
 801d88a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801d88c:	b128      	cbz	r0, 801d89a <rcl_node_init+0x1ba>
 801d88e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d892:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801d896:	4798      	blx	r3
 801d898:	6863      	ldr	r3, [r4, #4]
 801d89a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801d89c:	b110      	cbz	r0, 801d8a4 <rcl_node_init+0x1c4>
 801d89e:	f003 fa27 	bl	8020cf0 <rmw_destroy_node>
 801d8a2:	6863      	ldr	r3, [r4, #4]
 801d8a4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801d8a6:	b148      	cbz	r0, 801d8bc <rcl_node_init+0x1dc>
 801d8a8:	f009 fa70 	bl	8026d8c <rcl_guard_condition_fini>
 801d8ac:	6863      	ldr	r3, [r4, #4]
 801d8ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801d8b2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801d8b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d8b8:	4798      	blx	r3
 801d8ba:	6863      	ldr	r3, [r4, #4]
 801d8bc:	4618      	mov	r0, r3
 801d8be:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801d8c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d8c6:	4798      	blx	r3
 801d8c8:	2300      	movs	r3, #0
 801d8ca:	f04f 0a01 	mov.w	sl, #1
 801d8ce:	e9c4 3300 	strd	r3, r3, [r4]
 801d8d2:	f1b9 0f00 	cmp.w	r9, #0
 801d8d6:	d008      	beq.n	801d8ea <rcl_node_init+0x20a>
 801d8d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d8dc:	4628      	mov	r0, r5
 801d8de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801d8e2:	4798      	blx	r3
 801d8e4:	e001      	b.n	801d8ea <rcl_node_init+0x20a>
 801d8e6:	f04f 0a0b 	mov.w	sl, #11
 801d8ea:	4650      	mov	r0, sl
 801d8ec:	b029      	add	sp, #164	@ 0xa4
 801d8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8f2:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801d8f6:	e7f8      	b.n	801d8ea <rcl_node_init+0x20a>
 801d8f8:	782b      	ldrb	r3, [r5, #0]
 801d8fa:	2b2f      	cmp	r3, #47	@ 0x2f
 801d8fc:	f43f af3d 	beq.w	801d77a <rcl_node_init+0x9a>
 801d900:	9503      	str	r5, [sp, #12]
 801d902:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801d906:	9300      	str	r3, [sp, #0]
 801d908:	4b18      	ldr	r3, [pc, #96]	@ (801d96c <rcl_node_init+0x28c>)
 801d90a:	9302      	str	r3, [sp, #8]
 801d90c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d910:	9301      	str	r3, [sp, #4]
 801d912:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801d916:	f002 fa5b 	bl	801fdd0 <rcutils_format_string_limit>
 801d91a:	4605      	mov	r5, r0
 801d91c:	b1e0      	cbz	r0, 801d958 <rcl_node_init+0x278>
 801d91e:	2200      	movs	r2, #0
 801d920:	a922      	add	r1, sp, #136	@ 0x88
 801d922:	9222      	str	r2, [sp, #136]	@ 0x88
 801d924:	f002 fe24 	bl	8020570 <rmw_validate_namespace>
 801d928:	4682      	mov	sl, r0
 801d92a:	2800      	cmp	r0, #0
 801d92c:	d1d4      	bne.n	801d8d8 <rcl_node_init+0x1f8>
 801d92e:	46d9      	mov	r9, fp
 801d930:	e72c      	b.n	801d78c <rcl_node_init+0xac>
 801d932:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 801d936:	4650      	mov	r0, sl
 801d938:	b029      	add	sp, #164	@ 0xa4
 801d93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d93e:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 801d942:	f002 fe27 	bl	8020594 <rmw_namespace_validation_result_string>
 801d946:	e7c4      	b.n	801d8d2 <rcl_node_init+0x1f2>
 801d948:	f04f 0a0a 	mov.w	sl, #10
 801d94c:	e7c1      	b.n	801d8d2 <rcl_node_init+0x1f2>
 801d94e:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 801d952:	f002 fe7f 	bl	8020654 <rmw_node_name_validation_result_string>
 801d956:	e7c8      	b.n	801d8ea <rcl_node_init+0x20a>
 801d958:	f04f 0a0a 	mov.w	sl, #10
 801d95c:	e7c5      	b.n	801d8ea <rcl_node_init+0x20a>
 801d95e:	bf00      	nop
 801d960:	0802f7c8 	.word	0x0802f7c8
 801d964:	0802f7d0 	.word	0x0802f7d0
 801d968:	0802f7d8 	.word	0x0802f7d8
 801d96c:	0802f7cc 	.word	0x0802f7cc

0801d970 <rcl_node_is_valid>:
 801d970:	b130      	cbz	r0, 801d980 <rcl_node_is_valid+0x10>
 801d972:	6843      	ldr	r3, [r0, #4]
 801d974:	b123      	cbz	r3, 801d980 <rcl_node_is_valid+0x10>
 801d976:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d978:	b113      	cbz	r3, 801d980 <rcl_node_is_valid+0x10>
 801d97a:	6800      	ldr	r0, [r0, #0]
 801d97c:	f7ff bc18 	b.w	801d1b0 <rcl_context_is_valid>
 801d980:	2000      	movs	r0, #0
 801d982:	4770      	bx	lr

0801d984 <rcl_node_get_name>:
 801d984:	b120      	cbz	r0, 801d990 <rcl_node_get_name+0xc>
 801d986:	6840      	ldr	r0, [r0, #4]
 801d988:	b110      	cbz	r0, 801d990 <rcl_node_get_name+0xc>
 801d98a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801d98c:	b100      	cbz	r0, 801d990 <rcl_node_get_name+0xc>
 801d98e:	6880      	ldr	r0, [r0, #8]
 801d990:	4770      	bx	lr
 801d992:	bf00      	nop

0801d994 <rcl_node_get_namespace>:
 801d994:	b120      	cbz	r0, 801d9a0 <rcl_node_get_namespace+0xc>
 801d996:	6840      	ldr	r0, [r0, #4]
 801d998:	b110      	cbz	r0, 801d9a0 <rcl_node_get_namespace+0xc>
 801d99a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801d99c:	b100      	cbz	r0, 801d9a0 <rcl_node_get_namespace+0xc>
 801d99e:	68c0      	ldr	r0, [r0, #12]
 801d9a0:	4770      	bx	lr
 801d9a2:	bf00      	nop

0801d9a4 <rcl_node_get_options>:
 801d9a4:	b128      	cbz	r0, 801d9b2 <rcl_node_get_options+0xe>
 801d9a6:	6840      	ldr	r0, [r0, #4]
 801d9a8:	b118      	cbz	r0, 801d9b2 <rcl_node_get_options+0xe>
 801d9aa:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801d9ac:	2b00      	cmp	r3, #0
 801d9ae:	bf08      	it	eq
 801d9b0:	2000      	moveq	r0, #0
 801d9b2:	4770      	bx	lr

0801d9b4 <rcl_node_get_rmw_handle>:
 801d9b4:	b110      	cbz	r0, 801d9bc <rcl_node_get_rmw_handle+0x8>
 801d9b6:	6840      	ldr	r0, [r0, #4]
 801d9b8:	b100      	cbz	r0, 801d9bc <rcl_node_get_rmw_handle+0x8>
 801d9ba:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801d9bc:	4770      	bx	lr
 801d9be:	bf00      	nop

0801d9c0 <rcl_node_get_default_options>:
 801d9c0:	b510      	push	{r4, lr}
 801d9c2:	4604      	mov	r4, r0
 801d9c4:	2268      	movs	r2, #104	@ 0x68
 801d9c6:	2100      	movs	r1, #0
 801d9c8:	f00b fe2c 	bl	8029624 <memset>
 801d9cc:	4620      	mov	r0, r4
 801d9ce:	f7ff f845 	bl	801ca5c <rcutils_get_default_allocator>
 801d9d2:	2301      	movs	r3, #1
 801d9d4:	4620      	mov	r0, r4
 801d9d6:	7523      	strb	r3, [r4, #20]
 801d9d8:	bd10      	pop	{r4, pc}
 801d9da:	bf00      	nop

0801d9dc <rcl_node_options_copy>:
 801d9dc:	2800      	cmp	r0, #0
 801d9de:	bf18      	it	ne
 801d9e0:	4288      	cmpne	r0, r1
 801d9e2:	d01b      	beq.n	801da1c <rcl_node_options_copy+0x40>
 801d9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9e6:	fab1 f681 	clz	r6, r1
 801d9ea:	460c      	mov	r4, r1
 801d9ec:	0976      	lsrs	r6, r6, #5
 801d9ee:	b199      	cbz	r1, 801da18 <rcl_node_options_copy+0x3c>
 801d9f0:	4605      	mov	r5, r0
 801d9f2:	8a87      	ldrh	r7, [r0, #20]
 801d9f4:	4684      	mov	ip, r0
 801d9f6:	468e      	mov	lr, r1
 801d9f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d9fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d9fe:	682b      	ldr	r3, [r5, #0]
 801da00:	2250      	movs	r2, #80	@ 0x50
 801da02:	f10c 0118 	add.w	r1, ip, #24
 801da06:	f104 0018 	add.w	r0, r4, #24
 801da0a:	f8ce 3000 	str.w	r3, [lr]
 801da0e:	82a7      	strh	r7, [r4, #20]
 801da10:	f00b ff2b 	bl	802986a <memcpy>
 801da14:	4630      	mov	r0, r6
 801da16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da18:	200b      	movs	r0, #11
 801da1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da1c:	200b      	movs	r0, #11
 801da1e:	4770      	bx	lr

0801da20 <rcl_node_resolve_name>:
 801da20:	b082      	sub	sp, #8
 801da22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da26:	b091      	sub	sp, #68	@ 0x44
 801da28:	ac1a      	add	r4, sp, #104	@ 0x68
 801da2a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801da2e:	e884 000c 	stmia.w	r4, {r2, r3}
 801da32:	2800      	cmp	r0, #0
 801da34:	d03d      	beq.n	801dab2 <rcl_node_resolve_name+0x92>
 801da36:	460c      	mov	r4, r1
 801da38:	4605      	mov	r5, r0
 801da3a:	f7ff ffb3 	bl	801d9a4 <rcl_node_get_options>
 801da3e:	2800      	cmp	r0, #0
 801da40:	d03a      	beq.n	801dab8 <rcl_node_resolve_name+0x98>
 801da42:	4628      	mov	r0, r5
 801da44:	f7ff ff9e 	bl	801d984 <rcl_node_get_name>
 801da48:	4606      	mov	r6, r0
 801da4a:	4628      	mov	r0, r5
 801da4c:	ad0b      	add	r5, sp, #44	@ 0x2c
 801da4e:	f7ff ffa1 	bl	801d994 <rcl_node_get_namespace>
 801da52:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801da56:	4607      	mov	r7, r0
 801da58:	46ac      	mov	ip, r5
 801da5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801da5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801da62:	f8de 3000 	ldr.w	r3, [lr]
 801da66:	f8cc 3000 	str.w	r3, [ip]
 801da6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801da6c:	b30b      	cbz	r3, 801dab2 <rcl_node_resolve_name+0x92>
 801da6e:	4689      	mov	r9, r1
 801da70:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 801da74:	f002 fb2c 	bl	80200d0 <rcutils_get_zero_initialized_string_map>
 801da78:	ab10      	add	r3, sp, #64	@ 0x40
 801da7a:	9008      	str	r0, [sp, #32]
 801da7c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801da80:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801da84:	2100      	movs	r1, #0
 801da86:	a808      	add	r0, sp, #32
 801da88:	e895 000c 	ldmia.w	r5, {r2, r3}
 801da8c:	f002 fb96 	bl	80201bc <rcutils_string_map_init>
 801da90:	4683      	mov	fp, r0
 801da92:	b1a0      	cbz	r0, 801dabe <rcl_node_resolve_name+0x9e>
 801da94:	f7fe fffe 	bl	801ca94 <rcutils_get_error_string>
 801da98:	f7ff f812 	bl	801cac0 <rcutils_reset_error>
 801da9c:	f1bb 0f0a 	cmp.w	fp, #10
 801daa0:	bf18      	it	ne
 801daa2:	f04f 0b01 	movne.w	fp, #1
 801daa6:	4658      	mov	r0, fp
 801daa8:	b011      	add	sp, #68	@ 0x44
 801daaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daae:	b002      	add	sp, #8
 801dab0:	4770      	bx	lr
 801dab2:	f04f 0b0b 	mov.w	fp, #11
 801dab6:	e7f6      	b.n	801daa6 <rcl_node_resolve_name+0x86>
 801dab8:	f04f 0b01 	mov.w	fp, #1
 801dabc:	e7f3      	b.n	801daa6 <rcl_node_resolve_name+0x86>
 801dabe:	9009      	str	r0, [sp, #36]	@ 0x24
 801dac0:	9007      	str	r0, [sp, #28]
 801dac2:	a808      	add	r0, sp, #32
 801dac4:	f009 f8f6 	bl	8026cb4 <rcl_get_default_topic_name_substitutions>
 801dac8:	4683      	mov	fp, r0
 801daca:	b180      	cbz	r0, 801daee <rcl_node_resolve_name+0xce>
 801dacc:	280a      	cmp	r0, #10
 801dace:	a808      	add	r0, sp, #32
 801dad0:	bf18      	it	ne
 801dad2:	f04f 0b01 	movne.w	fp, #1
 801dad6:	f002 fbb1 	bl	802023c <rcutils_string_map_fini>
 801dada:	4604      	mov	r4, r0
 801dadc:	2800      	cmp	r0, #0
 801dade:	d15b      	bne.n	801db98 <rcl_node_resolve_name+0x178>
 801dae0:	4651      	mov	r1, sl
 801dae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dae4:	47c8      	blx	r9
 801dae6:	4651      	mov	r1, sl
 801dae8:	4620      	mov	r0, r4
 801daea:	47c8      	blx	r9
 801daec:	e7db      	b.n	801daa6 <rcl_node_resolve_name+0x86>
 801daee:	ab09      	add	r3, sp, #36	@ 0x24
 801daf0:	46ec      	mov	ip, sp
 801daf2:	9305      	str	r3, [sp, #20]
 801daf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801daf6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801dafa:	682b      	ldr	r3, [r5, #0]
 801dafc:	463a      	mov	r2, r7
 801dafe:	4631      	mov	r1, r6
 801db00:	4620      	mov	r0, r4
 801db02:	f8cc 3000 	str.w	r3, [ip]
 801db06:	ab08      	add	r3, sp, #32
 801db08:	f008 ff74 	bl	80269f4 <rcl_expand_topic_name>
 801db0c:	4683      	mov	fp, r0
 801db0e:	b9d8      	cbnz	r0, 801db48 <rcl_node_resolve_name+0x128>
 801db10:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801db12:	4602      	mov	r2, r0
 801db14:	9009      	str	r0, [sp, #36]	@ 0x24
 801db16:	a90a      	add	r1, sp, #40	@ 0x28
 801db18:	4620      	mov	r0, r4
 801db1a:	f002 fc59 	bl	80203d0 <rmw_validate_full_topic_name>
 801db1e:	bb50      	cbnz	r0, 801db76 <rcl_node_resolve_name+0x156>
 801db20:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801db22:	2d00      	cmp	r5, #0
 801db24:	d140      	bne.n	801dba8 <rcl_node_resolve_name+0x188>
 801db26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801db28:	a808      	add	r0, sp, #32
 801db2a:	601c      	str	r4, [r3, #0]
 801db2c:	f002 fb86 	bl	802023c <rcutils_string_map_fini>
 801db30:	4683      	mov	fp, r0
 801db32:	2800      	cmp	r0, #0
 801db34:	d043      	beq.n	801dbbe <rcl_node_resolve_name+0x19e>
 801db36:	f7fe ffad 	bl	801ca94 <rcutils_get_error_string>
 801db3a:	46a8      	mov	r8, r5
 801db3c:	f04f 0b01 	mov.w	fp, #1
 801db40:	462c      	mov	r4, r5
 801db42:	f7fe ffbd 	bl	801cac0 <rcutils_reset_error>
 801db46:	e00a      	b.n	801db5e <rcl_node_resolve_name+0x13e>
 801db48:	2867      	cmp	r0, #103	@ 0x67
 801db4a:	bf14      	ite	ne
 801db4c:	f04f 0800 	movne.w	r8, #0
 801db50:	f008 0801 	andeq.w	r8, r8, #1
 801db54:	9c07      	ldr	r4, [sp, #28]
 801db56:	a808      	add	r0, sp, #32
 801db58:	f002 fb70 	bl	802023c <rcutils_string_map_fini>
 801db5c:	bb50      	cbnz	r0, 801dbb4 <rcl_node_resolve_name+0x194>
 801db5e:	4651      	mov	r1, sl
 801db60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801db62:	47c8      	blx	r9
 801db64:	4651      	mov	r1, sl
 801db66:	4620      	mov	r0, r4
 801db68:	47c8      	blx	r9
 801db6a:	f1b8 0f00 	cmp.w	r8, #0
 801db6e:	bf18      	it	ne
 801db70:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 801db74:	e797      	b.n	801daa6 <rcl_node_resolve_name+0x86>
 801db76:	f7fe ff8d 	bl	801ca94 <rcutils_get_error_string>
 801db7a:	f7fe ffa1 	bl	801cac0 <rcutils_reset_error>
 801db7e:	a808      	add	r0, sp, #32
 801db80:	f002 fb5c 	bl	802023c <rcutils_string_map_fini>
 801db84:	b998      	cbnz	r0, 801dbae <rcl_node_resolve_name+0x18e>
 801db86:	4651      	mov	r1, sl
 801db88:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801db8a:	47c8      	blx	r9
 801db8c:	4651      	mov	r1, sl
 801db8e:	4620      	mov	r0, r4
 801db90:	f04f 0b01 	mov.w	fp, #1
 801db94:	47c8      	blx	r9
 801db96:	e786      	b.n	801daa6 <rcl_node_resolve_name+0x86>
 801db98:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801db9c:	f7fe ff7a 	bl	801ca94 <rcutils_get_error_string>
 801dba0:	f7fe ff8e 	bl	801cac0 <rcutils_reset_error>
 801dba4:	4644      	mov	r4, r8
 801dba6:	e7da      	b.n	801db5e <rcl_node_resolve_name+0x13e>
 801dba8:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 801dbac:	e7d3      	b.n	801db56 <rcl_node_resolve_name+0x136>
 801dbae:	46d8      	mov	r8, fp
 801dbb0:	f04f 0b01 	mov.w	fp, #1
 801dbb4:	f7fe ff6e 	bl	801ca94 <rcutils_get_error_string>
 801dbb8:	f7fe ff82 	bl	801cac0 <rcutils_reset_error>
 801dbbc:	e7cf      	b.n	801db5e <rcl_node_resolve_name+0x13e>
 801dbbe:	4651      	mov	r1, sl
 801dbc0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dbc2:	47c8      	blx	r9
 801dbc4:	4651      	mov	r1, sl
 801dbc6:	4658      	mov	r0, fp
 801dbc8:	47c8      	blx	r9
 801dbca:	e76c      	b.n	801daa6 <rcl_node_resolve_name+0x86>

0801dbcc <exact_match_lookup>:
 801dbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbce:	f102 0708 	add.w	r7, r2, #8
 801dbd2:	460b      	mov	r3, r1
 801dbd4:	b085      	sub	sp, #20
 801dbd6:	4614      	mov	r4, r2
 801dbd8:	4606      	mov	r6, r0
 801dbda:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801dbde:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801dbe2:	4618      	mov	r0, r3
 801dbe4:	4919      	ldr	r1, [pc, #100]	@ (801dc4c <exact_match_lookup+0x80>)
 801dbe6:	e894 000c 	ldmia.w	r4, {r2, r3}
 801dbea:	f002 f8e3 	bl	801fdb4 <rcutils_join_path>
 801dbee:	7833      	ldrb	r3, [r6, #0]
 801dbf0:	4605      	mov	r5, r0
 801dbf2:	2b2f      	cmp	r3, #47	@ 0x2f
 801dbf4:	d023      	beq.n	801dc3e <exact_match_lookup+0x72>
 801dbf6:	f104 030c 	add.w	r3, r4, #12
 801dbfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 801dbfe:	e88d 0003 	stmia.w	sp, {r0, r1}
 801dc02:	1c70      	adds	r0, r6, #1
 801dc04:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801dc08:	f002 f8da 	bl	801fdc0 <rcutils_to_native_path>
 801dc0c:	4606      	mov	r6, r0
 801dc0e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801dc12:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801dc16:	4631      	mov	r1, r6
 801dc18:	4628      	mov	r0, r5
 801dc1a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801dc1e:	f002 f8c9 	bl	801fdb4 <rcutils_join_path>
 801dc22:	4603      	mov	r3, r0
 801dc24:	4630      	mov	r0, r6
 801dc26:	6862      	ldr	r2, [r4, #4]
 801dc28:	461e      	mov	r6, r3
 801dc2a:	6921      	ldr	r1, [r4, #16]
 801dc2c:	4790      	blx	r2
 801dc2e:	4628      	mov	r0, r5
 801dc30:	4635      	mov	r5, r6
 801dc32:	6863      	ldr	r3, [r4, #4]
 801dc34:	6921      	ldr	r1, [r4, #16]
 801dc36:	4798      	blx	r3
 801dc38:	4628      	mov	r0, r5
 801dc3a:	b005      	add	sp, #20
 801dc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc3e:	7873      	ldrb	r3, [r6, #1]
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	d1d8      	bne.n	801dbf6 <exact_match_lookup+0x2a>
 801dc44:	4628      	mov	r0, r5
 801dc46:	b005      	add	sp, #20
 801dc48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc4a:	bf00      	nop
 801dc4c:	0802f824 	.word	0x0802f824

0801dc50 <rcl_get_secure_root>:
 801dc50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dc54:	b085      	sub	sp, #20
 801dc56:	b168      	cbz	r0, 801dc74 <rcl_get_secure_root+0x24>
 801dc58:	4607      	mov	r7, r0
 801dc5a:	4608      	mov	r0, r1
 801dc5c:	460c      	mov	r4, r1
 801dc5e:	f7fe ff0b 	bl	801ca78 <rcutils_allocator_is_valid>
 801dc62:	b138      	cbz	r0, 801dc74 <rcl_get_secure_root+0x24>
 801dc64:	2300      	movs	r3, #0
 801dc66:	482d      	ldr	r0, [pc, #180]	@ (801dd1c <rcl_get_secure_root+0xcc>)
 801dc68:	a903      	add	r1, sp, #12
 801dc6a:	9303      	str	r3, [sp, #12]
 801dc6c:	f002 f888 	bl	801fd80 <rcutils_get_env>
 801dc70:	4605      	mov	r5, r0
 801dc72:	b120      	cbz	r0, 801dc7e <rcl_get_secure_root+0x2e>
 801dc74:	2500      	movs	r5, #0
 801dc76:	4628      	mov	r0, r5
 801dc78:	b005      	add	sp, #20
 801dc7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dc7e:	9b03      	ldr	r3, [sp, #12]
 801dc80:	781a      	ldrb	r2, [r3, #0]
 801dc82:	2a00      	cmp	r2, #0
 801dc84:	d0f6      	beq.n	801dc74 <rcl_get_secure_root+0x24>
 801dc86:	f104 090c 	add.w	r9, r4, #12
 801dc8a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801dc8e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801dc92:	4618      	mov	r0, r3
 801dc94:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801dc98:	f002 f9dc 	bl	8020054 <rcutils_strdup>
 801dc9c:	4680      	mov	r8, r0
 801dc9e:	2800      	cmp	r0, #0
 801dca0:	d0e8      	beq.n	801dc74 <rcl_get_secure_root+0x24>
 801dca2:	a903      	add	r1, sp, #12
 801dca4:	481e      	ldr	r0, [pc, #120]	@ (801dd20 <rcl_get_secure_root+0xd0>)
 801dca6:	9503      	str	r5, [sp, #12]
 801dca8:	f002 f86a 	bl	801fd80 <rcutils_get_env>
 801dcac:	b160      	cbz	r0, 801dcc8 <rcl_get_secure_root+0x78>
 801dcae:	2600      	movs	r6, #0
 801dcb0:	4630      	mov	r0, r6
 801dcb2:	6863      	ldr	r3, [r4, #4]
 801dcb4:	6921      	ldr	r1, [r4, #16]
 801dcb6:	4798      	blx	r3
 801dcb8:	4640      	mov	r0, r8
 801dcba:	6863      	ldr	r3, [r4, #4]
 801dcbc:	6921      	ldr	r1, [r4, #16]
 801dcbe:	4798      	blx	r3
 801dcc0:	4628      	mov	r0, r5
 801dcc2:	b005      	add	sp, #20
 801dcc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dcc8:	9b03      	ldr	r3, [sp, #12]
 801dcca:	781e      	ldrb	r6, [r3, #0]
 801dccc:	b1f6      	cbz	r6, 801dd0c <rcl_get_secure_root+0xbc>
 801dcce:	e899 0003 	ldmia.w	r9, {r0, r1}
 801dcd2:	e88d 0003 	stmia.w	sp, {r0, r1}
 801dcd6:	4618      	mov	r0, r3
 801dcd8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801dcdc:	f002 f9ba 	bl	8020054 <rcutils_strdup>
 801dce0:	4606      	mov	r6, r0
 801dce2:	2800      	cmp	r0, #0
 801dce4:	d0e3      	beq.n	801dcae <rcl_get_secure_root+0x5e>
 801dce6:	4622      	mov	r2, r4
 801dce8:	4641      	mov	r1, r8
 801dcea:	f7ff ff6f 	bl	801dbcc <exact_match_lookup>
 801dcee:	4605      	mov	r5, r0
 801dcf0:	2d00      	cmp	r5, #0
 801dcf2:	d0dd      	beq.n	801dcb0 <rcl_get_secure_root+0x60>
 801dcf4:	4628      	mov	r0, r5
 801dcf6:	f002 f85b 	bl	801fdb0 <rcutils_is_directory>
 801dcfa:	4603      	mov	r3, r0
 801dcfc:	2800      	cmp	r0, #0
 801dcfe:	d1d7      	bne.n	801dcb0 <rcl_get_secure_root+0x60>
 801dd00:	4628      	mov	r0, r5
 801dd02:	6921      	ldr	r1, [r4, #16]
 801dd04:	461d      	mov	r5, r3
 801dd06:	6863      	ldr	r3, [r4, #4]
 801dd08:	4798      	blx	r3
 801dd0a:	e7d1      	b.n	801dcb0 <rcl_get_secure_root+0x60>
 801dd0c:	4622      	mov	r2, r4
 801dd0e:	4638      	mov	r0, r7
 801dd10:	4641      	mov	r1, r8
 801dd12:	f7ff ff5b 	bl	801dbcc <exact_match_lookup>
 801dd16:	4605      	mov	r5, r0
 801dd18:	e7ea      	b.n	801dcf0 <rcl_get_secure_root+0xa0>
 801dd1a:	bf00      	nop
 801dd1c:	0802f830 	.word	0x0802f830
 801dd20:	0802f848 	.word	0x0802f848

0801dd24 <rcl_get_security_options_from_environment>:
 801dd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd28:	b082      	sub	sp, #8
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	4606      	mov	r6, r0
 801dd2e:	460f      	mov	r7, r1
 801dd30:	4821      	ldr	r0, [pc, #132]	@ (801ddb8 <rcl_get_security_options_from_environment+0x94>)
 801dd32:	a901      	add	r1, sp, #4
 801dd34:	4690      	mov	r8, r2
 801dd36:	9301      	str	r3, [sp, #4]
 801dd38:	f002 f822 	bl	801fd80 <rcutils_get_env>
 801dd3c:	b120      	cbz	r0, 801dd48 <rcl_get_security_options_from_environment+0x24>
 801dd3e:	2501      	movs	r5, #1
 801dd40:	4628      	mov	r0, r5
 801dd42:	b002      	add	sp, #8
 801dd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd48:	4604      	mov	r4, r0
 801dd4a:	491c      	ldr	r1, [pc, #112]	@ (801ddbc <rcl_get_security_options_from_environment+0x98>)
 801dd4c:	9801      	ldr	r0, [sp, #4]
 801dd4e:	f7e2 fa5f 	bl	8000210 <strcmp>
 801dd52:	4605      	mov	r5, r0
 801dd54:	b9f0      	cbnz	r0, 801dd94 <rcl_get_security_options_from_environment+0x70>
 801dd56:	9001      	str	r0, [sp, #4]
 801dd58:	f1b8 0f00 	cmp.w	r8, #0
 801dd5c:	d021      	beq.n	801dda2 <rcl_get_security_options_from_environment+0x7e>
 801dd5e:	a901      	add	r1, sp, #4
 801dd60:	4817      	ldr	r0, [pc, #92]	@ (801ddc0 <rcl_get_security_options_from_environment+0x9c>)
 801dd62:	f002 f80d 	bl	801fd80 <rcutils_get_env>
 801dd66:	2800      	cmp	r0, #0
 801dd68:	d1e9      	bne.n	801dd3e <rcl_get_security_options_from_environment+0x1a>
 801dd6a:	4916      	ldr	r1, [pc, #88]	@ (801ddc4 <rcl_get_security_options_from_environment+0xa0>)
 801dd6c:	9801      	ldr	r0, [sp, #4]
 801dd6e:	f7e2 fa4f 	bl	8000210 <strcmp>
 801dd72:	4603      	mov	r3, r0
 801dd74:	4639      	mov	r1, r7
 801dd76:	4630      	mov	r0, r6
 801dd78:	fab3 f383 	clz	r3, r3
 801dd7c:	095b      	lsrs	r3, r3, #5
 801dd7e:	f888 3000 	strb.w	r3, [r8]
 801dd82:	f7ff ff65 	bl	801dc50 <rcl_get_secure_root>
 801dd86:	b170      	cbz	r0, 801dda6 <rcl_get_security_options_from_environment+0x82>
 801dd88:	f8c8 0004 	str.w	r0, [r8, #4]
 801dd8c:	4628      	mov	r0, r5
 801dd8e:	b002      	add	sp, #8
 801dd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd94:	4625      	mov	r5, r4
 801dd96:	f888 4000 	strb.w	r4, [r8]
 801dd9a:	4628      	mov	r0, r5
 801dd9c:	b002      	add	sp, #8
 801dd9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dda2:	250b      	movs	r5, #11
 801dda4:	e7cc      	b.n	801dd40 <rcl_get_security_options_from_environment+0x1c>
 801dda6:	f898 5000 	ldrb.w	r5, [r8]
 801ddaa:	f1a5 0501 	sub.w	r5, r5, #1
 801ddae:	fab5 f585 	clz	r5, r5
 801ddb2:	096d      	lsrs	r5, r5, #5
 801ddb4:	e7c4      	b.n	801dd40 <rcl_get_security_options_from_environment+0x1c>
 801ddb6:	bf00      	nop
 801ddb8:	0802f7e8 	.word	0x0802f7e8
 801ddbc:	0802f7fc 	.word	0x0802f7fc
 801ddc0:	0802f804 	.word	0x0802f804
 801ddc4:	0802f81c 	.word	0x0802f81c

0801ddc8 <rcl_service_get_rmw_handle>:
 801ddc8:	b118      	cbz	r0, 801ddd2 <rcl_service_get_rmw_handle+0xa>
 801ddca:	6800      	ldr	r0, [r0, #0]
 801ddcc:	b108      	cbz	r0, 801ddd2 <rcl_service_get_rmw_handle+0xa>
 801ddce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801ddd2:	4770      	bx	lr

0801ddd4 <rcl_take_request>:
 801ddd4:	b570      	push	{r4, r5, r6, lr}
 801ddd6:	468e      	mov	lr, r1
 801ddd8:	b08c      	sub	sp, #48	@ 0x30
 801ddda:	460c      	mov	r4, r1
 801dddc:	4616      	mov	r6, r2
 801ddde:	f10d 0c18 	add.w	ip, sp, #24
 801dde2:	4605      	mov	r5, r0
 801dde4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801dde8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ddec:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801ddf0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ddf4:	b30d      	cbz	r5, 801de3a <rcl_take_request+0x66>
 801ddf6:	682b      	ldr	r3, [r5, #0]
 801ddf8:	b1fb      	cbz	r3, 801de3a <rcl_take_request+0x66>
 801ddfa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801ddfe:	b1e0      	cbz	r0, 801de3a <rcl_take_request+0x66>
 801de00:	b336      	cbz	r6, 801de50 <rcl_take_request+0x7c>
 801de02:	2300      	movs	r3, #0
 801de04:	4632      	mov	r2, r6
 801de06:	a902      	add	r1, sp, #8
 801de08:	f88d 3007 	strb.w	r3, [sp, #7]
 801de0c:	f10d 0307 	add.w	r3, sp, #7
 801de10:	f003 f894 	bl	8020f3c <rmw_take_request>
 801de14:	4605      	mov	r5, r0
 801de16:	b198      	cbz	r0, 801de40 <rcl_take_request+0x6c>
 801de18:	280a      	cmp	r0, #10
 801de1a:	bf18      	it	ne
 801de1c:	2501      	movne	r5, #1
 801de1e:	f10d 0e18 	add.w	lr, sp, #24
 801de22:	46a4      	mov	ip, r4
 801de24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801de28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801de2c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801de30:	e88c 0003 	stmia.w	ip, {r0, r1}
 801de34:	4628      	mov	r0, r5
 801de36:	b00c      	add	sp, #48	@ 0x30
 801de38:	bd70      	pop	{r4, r5, r6, pc}
 801de3a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801de3e:	e7ee      	b.n	801de1e <rcl_take_request+0x4a>
 801de40:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801de44:	f240 2359 	movw	r3, #601	@ 0x259
 801de48:	2a00      	cmp	r2, #0
 801de4a:	bf08      	it	eq
 801de4c:	461d      	moveq	r5, r3
 801de4e:	e7e6      	b.n	801de1e <rcl_take_request+0x4a>
 801de50:	250b      	movs	r5, #11
 801de52:	e7e4      	b.n	801de1e <rcl_take_request+0x4a>

0801de54 <rcl_send_response>:
 801de54:	b170      	cbz	r0, 801de74 <rcl_send_response+0x20>
 801de56:	6800      	ldr	r0, [r0, #0]
 801de58:	b160      	cbz	r0, 801de74 <rcl_send_response+0x20>
 801de5a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801de5e:	b148      	cbz	r0, 801de74 <rcl_send_response+0x20>
 801de60:	b169      	cbz	r1, 801de7e <rcl_send_response+0x2a>
 801de62:	b510      	push	{r4, lr}
 801de64:	b14a      	cbz	r2, 801de7a <rcl_send_response+0x26>
 801de66:	f003 f8c7 	bl	8020ff8 <rmw_send_response>
 801de6a:	b110      	cbz	r0, 801de72 <rcl_send_response+0x1e>
 801de6c:	2802      	cmp	r0, #2
 801de6e:	bf18      	it	ne
 801de70:	2001      	movne	r0, #1
 801de72:	bd10      	pop	{r4, pc}
 801de74:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801de78:	4770      	bx	lr
 801de7a:	200b      	movs	r0, #11
 801de7c:	bd10      	pop	{r4, pc}
 801de7e:	200b      	movs	r0, #11
 801de80:	4770      	bx	lr
 801de82:	bf00      	nop

0801de84 <rcl_service_is_valid>:
 801de84:	b130      	cbz	r0, 801de94 <rcl_service_is_valid+0x10>
 801de86:	6800      	ldr	r0, [r0, #0]
 801de88:	b120      	cbz	r0, 801de94 <rcl_service_is_valid+0x10>
 801de8a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801de8e:	3800      	subs	r0, #0
 801de90:	bf18      	it	ne
 801de92:	2001      	movne	r0, #1
 801de94:	4770      	bx	lr
 801de96:	bf00      	nop

0801de98 <rcl_get_zero_initialized_subscription>:
 801de98:	4b01      	ldr	r3, [pc, #4]	@ (801dea0 <rcl_get_zero_initialized_subscription+0x8>)
 801de9a:	6818      	ldr	r0, [r3, #0]
 801de9c:	4770      	bx	lr
 801de9e:	bf00      	nop
 801dea0:	0802f868 	.word	0x0802f868

0801dea4 <rcl_subscription_init>:
 801dea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dea8:	b088      	sub	sp, #32
 801deaa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801deac:	b1ff      	cbz	r7, 801deee <rcl_subscription_init+0x4a>
 801deae:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801deb2:	4605      	mov	r5, r0
 801deb4:	460e      	mov	r6, r1
 801deb6:	4691      	mov	r9, r2
 801deb8:	4650      	mov	r0, sl
 801deba:	4698      	mov	r8, r3
 801debc:	f7fe fddc 	bl	801ca78 <rcutils_allocator_is_valid>
 801dec0:	f080 0401 	eor.w	r4, r0, #1
 801dec4:	b2e4      	uxtb	r4, r4
 801dec6:	b994      	cbnz	r4, 801deee <rcl_subscription_init+0x4a>
 801dec8:	b18d      	cbz	r5, 801deee <rcl_subscription_init+0x4a>
 801deca:	4630      	mov	r0, r6
 801decc:	f7ff fd50 	bl	801d970 <rcl_node_is_valid>
 801ded0:	2800      	cmp	r0, #0
 801ded2:	d055      	beq.n	801df80 <rcl_subscription_init+0xdc>
 801ded4:	f1b9 0f00 	cmp.w	r9, #0
 801ded8:	d009      	beq.n	801deee <rcl_subscription_init+0x4a>
 801deda:	f1b8 0f00 	cmp.w	r8, #0
 801dede:	d006      	beq.n	801deee <rcl_subscription_init+0x4a>
 801dee0:	682b      	ldr	r3, [r5, #0]
 801dee2:	b14b      	cbz	r3, 801def8 <rcl_subscription_init+0x54>
 801dee4:	2464      	movs	r4, #100	@ 0x64
 801dee6:	4620      	mov	r0, r4
 801dee8:	b008      	add	sp, #32
 801deea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801deee:	240b      	movs	r4, #11
 801def0:	4620      	mov	r0, r4
 801def2:	b008      	add	sp, #32
 801def4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801def8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801defc:	aa07      	add	r2, sp, #28
 801defe:	9307      	str	r3, [sp, #28]
 801df00:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801df04:	9205      	str	r2, [sp, #20]
 801df06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801df0a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801df0e:	4641      	mov	r1, r8
 801df10:	4630      	mov	r0, r6
 801df12:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801df16:	f7ff fd83 	bl	801da20 <rcl_node_resolve_name>
 801df1a:	2800      	cmp	r0, #0
 801df1c:	d15f      	bne.n	801dfde <rcl_subscription_init+0x13a>
 801df1e:	21c8      	movs	r1, #200	@ 0xc8
 801df20:	2001      	movs	r0, #1
 801df22:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 801df26:	4798      	blx	r3
 801df28:	6028      	str	r0, [r5, #0]
 801df2a:	2800      	cmp	r0, #0
 801df2c:	d05f      	beq.n	801dfee <rcl_subscription_init+0x14a>
 801df2e:	4630      	mov	r0, r6
 801df30:	f7ff fd40 	bl	801d9b4 <rcl_node_get_rmw_handle>
 801df34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801df38:	4649      	mov	r1, r9
 801df3a:	9a07      	ldr	r2, [sp, #28]
 801df3c:	9300      	str	r3, [sp, #0]
 801df3e:	463b      	mov	r3, r7
 801df40:	682c      	ldr	r4, [r5, #0]
 801df42:	f003 f941 	bl	80211c8 <rmw_create_subscription>
 801df46:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 801df4a:	682c      	ldr	r4, [r5, #0]
 801df4c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 801df50:	b348      	cbz	r0, 801dfa6 <rcl_subscription_init+0x102>
 801df52:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 801df56:	f003 fa2d 	bl	80213b4 <rmw_subscription_get_actual_qos>
 801df5a:	4604      	mov	r4, r0
 801df5c:	b9a8      	cbnz	r0, 801df8a <rcl_subscription_init+0xe6>
 801df5e:	6828      	ldr	r0, [r5, #0]
 801df60:	2270      	movs	r2, #112	@ 0x70
 801df62:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801df66:	4639      	mov	r1, r7
 801df68:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801df6c:	f00b fc7d 	bl	802986a <memcpy>
 801df70:	9807      	ldr	r0, [sp, #28]
 801df72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801df74:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801df76:	4798      	blx	r3
 801df78:	4620      	mov	r0, r4
 801df7a:	b008      	add	sp, #32
 801df7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df80:	24c8      	movs	r4, #200	@ 0xc8
 801df82:	4620      	mov	r0, r4
 801df84:	b008      	add	sp, #32
 801df86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df8a:	682c      	ldr	r4, [r5, #0]
 801df8c:	b36c      	cbz	r4, 801dfea <rcl_subscription_init+0x146>
 801df8e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 801df92:	b14b      	cbz	r3, 801dfa8 <rcl_subscription_init+0x104>
 801df94:	4630      	mov	r0, r6
 801df96:	f7ff fd0d 	bl	801d9b4 <rcl_node_get_rmw_handle>
 801df9a:	682b      	ldr	r3, [r5, #0]
 801df9c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 801dfa0:	f003 fa1c 	bl	80213dc <rmw_destroy_subscription>
 801dfa4:	682c      	ldr	r4, [r5, #0]
 801dfa6:	b194      	cbz	r4, 801dfce <rcl_subscription_init+0x12a>
 801dfa8:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 801dfac:	4630      	mov	r0, r6
 801dfae:	f7fe fd63 	bl	801ca78 <rcutils_allocator_is_valid>
 801dfb2:	b158      	cbz	r0, 801dfcc <rcl_subscription_init+0x128>
 801dfb4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801dfb6:	b148      	cbz	r0, 801dfcc <rcl_subscription_init+0x128>
 801dfb8:	4631      	mov	r1, r6
 801dfba:	f002 f9e1 	bl	8020380 <rmw_subscription_content_filter_options_fini>
 801dfbe:	4606      	mov	r6, r0
 801dfc0:	b9c8      	cbnz	r0, 801dff6 <rcl_subscription_init+0x152>
 801dfc2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801dfc4:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801dfc6:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801dfc8:	4798      	blx	r3
 801dfca:	66e6      	str	r6, [r4, #108]	@ 0x6c
 801dfcc:	682c      	ldr	r4, [r5, #0]
 801dfce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dfd0:	4620      	mov	r0, r4
 801dfd2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801dfd4:	2401      	movs	r4, #1
 801dfd6:	4798      	blx	r3
 801dfd8:	2300      	movs	r3, #0
 801dfda:	602b      	str	r3, [r5, #0]
 801dfdc:	e7c8      	b.n	801df70 <rcl_subscription_init+0xcc>
 801dfde:	2867      	cmp	r0, #103	@ 0x67
 801dfe0:	d007      	beq.n	801dff2 <rcl_subscription_init+0x14e>
 801dfe2:	2869      	cmp	r0, #105	@ 0x69
 801dfe4:	d005      	beq.n	801dff2 <rcl_subscription_init+0x14e>
 801dfe6:	280a      	cmp	r0, #10
 801dfe8:	d001      	beq.n	801dfee <rcl_subscription_init+0x14a>
 801dfea:	2401      	movs	r4, #1
 801dfec:	e7c0      	b.n	801df70 <rcl_subscription_init+0xcc>
 801dfee:	240a      	movs	r4, #10
 801dff0:	e7be      	b.n	801df70 <rcl_subscription_init+0xcc>
 801dff2:	2467      	movs	r4, #103	@ 0x67
 801dff4:	e7bc      	b.n	801df70 <rcl_subscription_init+0xcc>
 801dff6:	f008 fcb5 	bl	8026964 <rcl_convert_rmw_ret_to_rcl_ret>
 801dffa:	682c      	ldr	r4, [r5, #0]
 801dffc:	e7e7      	b.n	801dfce <rcl_subscription_init+0x12a>
 801dffe:	bf00      	nop

0801e000 <rcl_subscription_get_default_options>:
 801e000:	b570      	push	{r4, r5, r6, lr}
 801e002:	4d14      	ldr	r5, [pc, #80]	@ (801e054 <rcl_subscription_get_default_options+0x54>)
 801e004:	b08a      	sub	sp, #40	@ 0x28
 801e006:	4604      	mov	r4, r0
 801e008:	2250      	movs	r2, #80	@ 0x50
 801e00a:	4913      	ldr	r1, [pc, #76]	@ (801e058 <rcl_subscription_get_default_options+0x58>)
 801e00c:	4628      	mov	r0, r5
 801e00e:	f00b fc2c 	bl	802986a <memcpy>
 801e012:	a804      	add	r0, sp, #16
 801e014:	f7fe fd22 	bl	801ca5c <rcutils_get_default_allocator>
 801e018:	f10d 0c10 	add.w	ip, sp, #16
 801e01c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801e020:	466e      	mov	r6, sp
 801e022:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e026:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801e02a:	f8dc 3000 	ldr.w	r3, [ip]
 801e02e:	4630      	mov	r0, r6
 801e030:	f8ce 3000 	str.w	r3, [lr]
 801e034:	f002 f9be 	bl	80203b4 <rmw_get_default_subscription_options>
 801e038:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801e03c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801e040:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e044:	2270      	movs	r2, #112	@ 0x70
 801e046:	4629      	mov	r1, r5
 801e048:	4620      	mov	r0, r4
 801e04a:	f00b fc0e 	bl	802986a <memcpy>
 801e04e:	4620      	mov	r0, r4
 801e050:	b00a      	add	sp, #40	@ 0x28
 801e052:	bd70      	pop	{r4, r5, r6, pc}
 801e054:	20042760 	.word	0x20042760
 801e058:	0802f870 	.word	0x0802f870

0801e05c <rcl_take>:
 801e05c:	2800      	cmp	r0, #0
 801e05e:	d049      	beq.n	801e0f4 <rcl_take+0x98>
 801e060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e064:	4615      	mov	r5, r2
 801e066:	6802      	ldr	r2, [r0, #0]
 801e068:	b0a4      	sub	sp, #144	@ 0x90
 801e06a:	4604      	mov	r4, r0
 801e06c:	2a00      	cmp	r2, #0
 801e06e:	d039      	beq.n	801e0e4 <rcl_take+0x88>
 801e070:	461f      	mov	r7, r3
 801e072:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 801e076:	b3ab      	cbz	r3, 801e0e4 <rcl_take+0x88>
 801e078:	460e      	mov	r6, r1
 801e07a:	2900      	cmp	r1, #0
 801e07c:	d038      	beq.n	801e0f0 <rcl_take+0x94>
 801e07e:	2d00      	cmp	r5, #0
 801e080:	d03c      	beq.n	801e0fc <rcl_take+0xa0>
 801e082:	a802      	add	r0, sp, #8
 801e084:	f04f 0800 	mov.w	r8, #0
 801e088:	f002 f99a 	bl	80203c0 <rmw_get_zero_initialized_message_info>
 801e08c:	f10d 0c08 	add.w	ip, sp, #8
 801e090:	46ae      	mov	lr, r5
 801e092:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e096:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801e09a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e09e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801e0a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e0a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801e0aa:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801e0ae:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801e0b2:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801e0b6:	462b      	mov	r3, r5
 801e0b8:	6820      	ldr	r0, [r4, #0]
 801e0ba:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801e0be:	4631      	mov	r1, r6
 801e0c0:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801e0c4:	9700      	str	r7, [sp, #0]
 801e0c6:	f003 f9eb 	bl	80214a0 <rmw_take_with_info>
 801e0ca:	4603      	mov	r3, r0
 801e0cc:	b9c0      	cbnz	r0, 801e100 <rcl_take+0xa4>
 801e0ce:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801e0d2:	f240 1291 	movw	r2, #401	@ 0x191
 801e0d6:	2900      	cmp	r1, #0
 801e0d8:	bf08      	it	eq
 801e0da:	4613      	moveq	r3, r2
 801e0dc:	4618      	mov	r0, r3
 801e0de:	b024      	add	sp, #144	@ 0x90
 801e0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0e4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801e0e8:	4618      	mov	r0, r3
 801e0ea:	b024      	add	sp, #144	@ 0x90
 801e0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0f0:	230b      	movs	r3, #11
 801e0f2:	e7f3      	b.n	801e0dc <rcl_take+0x80>
 801e0f4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	4770      	bx	lr
 801e0fc:	ad14      	add	r5, sp, #80	@ 0x50
 801e0fe:	e7c0      	b.n	801e082 <rcl_take+0x26>
 801e100:	f008 fc30 	bl	8026964 <rcl_convert_rmw_ret_to_rcl_ret>
 801e104:	4603      	mov	r3, r0
 801e106:	e7e9      	b.n	801e0dc <rcl_take+0x80>

0801e108 <rcl_subscription_get_rmw_handle>:
 801e108:	b118      	cbz	r0, 801e112 <rcl_subscription_get_rmw_handle+0xa>
 801e10a:	6800      	ldr	r0, [r0, #0]
 801e10c:	b108      	cbz	r0, 801e112 <rcl_subscription_get_rmw_handle+0xa>
 801e10e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801e112:	4770      	bx	lr

0801e114 <rcl_subscription_is_valid>:
 801e114:	b130      	cbz	r0, 801e124 <rcl_subscription_is_valid+0x10>
 801e116:	6800      	ldr	r0, [r0, #0]
 801e118:	b120      	cbz	r0, 801e124 <rcl_subscription_is_valid+0x10>
 801e11a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801e11e:	3800      	subs	r0, #0
 801e120:	bf18      	it	ne
 801e122:	2001      	movne	r0, #1
 801e124:	4770      	bx	lr
 801e126:	bf00      	nop

0801e128 <rcl_get_system_time>:
 801e128:	4608      	mov	r0, r1
 801e12a:	f7fe bce5 	b.w	801caf8 <rcutils_system_time_now>
 801e12e:	bf00      	nop

0801e130 <rcl_get_steady_time>:
 801e130:	4608      	mov	r0, r1
 801e132:	f7fe bd07 	b.w	801cb44 <rcutils_steady_time_now>
 801e136:	bf00      	nop

0801e138 <rcl_get_ros_time>:
 801e138:	7a03      	ldrb	r3, [r0, #8]
 801e13a:	b510      	push	{r4, lr}
 801e13c:	460c      	mov	r4, r1
 801e13e:	b143      	cbz	r3, 801e152 <rcl_get_ros_time+0x1a>
 801e140:	2105      	movs	r1, #5
 801e142:	f001 fd79 	bl	801fc38 <__atomic_load_8>
 801e146:	4602      	mov	r2, r0
 801e148:	460b      	mov	r3, r1
 801e14a:	2000      	movs	r0, #0
 801e14c:	e9c4 2300 	strd	r2, r3, [r4]
 801e150:	bd10      	pop	{r4, pc}
 801e152:	4608      	mov	r0, r1
 801e154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e158:	f7fe bcce 	b.w	801caf8 <rcutils_system_time_now>

0801e15c <rcl_clock_init>:
 801e15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e15e:	4605      	mov	r5, r0
 801e160:	4610      	mov	r0, r2
 801e162:	4614      	mov	r4, r2
 801e164:	460e      	mov	r6, r1
 801e166:	f7fe fc87 	bl	801ca78 <rcutils_allocator_is_valid>
 801e16a:	b128      	cbz	r0, 801e178 <rcl_clock_init+0x1c>
 801e16c:	2d03      	cmp	r5, #3
 801e16e:	d803      	bhi.n	801e178 <rcl_clock_init+0x1c>
 801e170:	e8df f005 	tbb	[pc, r5]
 801e174:	0659301f 	.word	0x0659301f
 801e178:	f04f 0c0b 	mov.w	ip, #11
 801e17c:	4660      	mov	r0, ip
 801e17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e180:	2c00      	cmp	r4, #0
 801e182:	d0f9      	beq.n	801e178 <rcl_clock_init+0x1c>
 801e184:	fab6 f386 	clz	r3, r6
 801e188:	095b      	lsrs	r3, r3, #5
 801e18a:	2e00      	cmp	r6, #0
 801e18c:	d0f4      	beq.n	801e178 <rcl_clock_init+0x1c>
 801e18e:	6133      	str	r3, [r6, #16]
 801e190:	469c      	mov	ip, r3
 801e192:	f106 0514 	add.w	r5, r6, #20
 801e196:	4f32      	ldr	r7, [pc, #200]	@ (801e260 <rcl_clock_init+0x104>)
 801e198:	f04f 0e03 	mov.w	lr, #3
 801e19c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801e1a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e1a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e1a4:	6823      	ldr	r3, [r4, #0]
 801e1a6:	4660      	mov	r0, ip
 801e1a8:	602b      	str	r3, [r5, #0]
 801e1aa:	60f7      	str	r7, [r6, #12]
 801e1ac:	f886 e000 	strb.w	lr, [r6]
 801e1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e1b2:	2e00      	cmp	r6, #0
 801e1b4:	d0e0      	beq.n	801e178 <rcl_clock_init+0x1c>
 801e1b6:	2300      	movs	r3, #0
 801e1b8:	f106 0514 	add.w	r5, r6, #20
 801e1bc:	7033      	strb	r3, [r6, #0]
 801e1be:	469c      	mov	ip, r3
 801e1c0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801e1c4:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801e1c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e1ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e1cc:	6823      	ldr	r3, [r4, #0]
 801e1ce:	4660      	mov	r0, ip
 801e1d0:	602b      	str	r3, [r5, #0]
 801e1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e1d4:	2c00      	cmp	r4, #0
 801e1d6:	d0cf      	beq.n	801e178 <rcl_clock_init+0x1c>
 801e1d8:	fab6 f586 	clz	r5, r6
 801e1dc:	096d      	lsrs	r5, r5, #5
 801e1de:	2e00      	cmp	r6, #0
 801e1e0:	d0ca      	beq.n	801e178 <rcl_clock_init+0x1c>
 801e1e2:	46a6      	mov	lr, r4
 801e1e4:	7035      	strb	r5, [r6, #0]
 801e1e6:	f106 0c14 	add.w	ip, r6, #20
 801e1ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e1ee:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801e1f2:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801e1f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e1fa:	f8de 3000 	ldr.w	r3, [lr]
 801e1fe:	2010      	movs	r0, #16
 801e200:	f8cc 3000 	str.w	r3, [ip]
 801e204:	6823      	ldr	r3, [r4, #0]
 801e206:	6921      	ldr	r1, [r4, #16]
 801e208:	4798      	blx	r3
 801e20a:	6130      	str	r0, [r6, #16]
 801e20c:	b320      	cbz	r0, 801e258 <rcl_clock_init+0xfc>
 801e20e:	2200      	movs	r2, #0
 801e210:	2300      	movs	r3, #0
 801e212:	46ac      	mov	ip, r5
 801e214:	7205      	strb	r5, [r0, #8]
 801e216:	e9c0 2300 	strd	r2, r3, [r0]
 801e21a:	4a12      	ldr	r2, [pc, #72]	@ (801e264 <rcl_clock_init+0x108>)
 801e21c:	2301      	movs	r3, #1
 801e21e:	4660      	mov	r0, ip
 801e220:	60f2      	str	r2, [r6, #12]
 801e222:	7033      	strb	r3, [r6, #0]
 801e224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e226:	2c00      	cmp	r4, #0
 801e228:	d0a6      	beq.n	801e178 <rcl_clock_init+0x1c>
 801e22a:	fab6 f386 	clz	r3, r6
 801e22e:	095b      	lsrs	r3, r3, #5
 801e230:	2e00      	cmp	r6, #0
 801e232:	d0a1      	beq.n	801e178 <rcl_clock_init+0x1c>
 801e234:	6133      	str	r3, [r6, #16]
 801e236:	469c      	mov	ip, r3
 801e238:	f106 0514 	add.w	r5, r6, #20
 801e23c:	f8df e028 	ldr.w	lr, [pc, #40]	@ 801e268 <rcl_clock_init+0x10c>
 801e240:	2702      	movs	r7, #2
 801e242:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801e246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e24a:	6823      	ldr	r3, [r4, #0]
 801e24c:	4660      	mov	r0, ip
 801e24e:	602b      	str	r3, [r5, #0]
 801e250:	f8c6 e00c 	str.w	lr, [r6, #12]
 801e254:	7037      	strb	r7, [r6, #0]
 801e256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e258:	f04f 0c0a 	mov.w	ip, #10
 801e25c:	e78e      	b.n	801e17c <rcl_clock_init+0x20>
 801e25e:	bf00      	nop
 801e260:	0801e131 	.word	0x0801e131
 801e264:	0801e139 	.word	0x0801e139
 801e268:	0801e129 	.word	0x0801e129

0801e26c <rcl_clock_get_now>:
 801e26c:	b140      	cbz	r0, 801e280 <rcl_clock_get_now+0x14>
 801e26e:	b139      	cbz	r1, 801e280 <rcl_clock_get_now+0x14>
 801e270:	7803      	ldrb	r3, [r0, #0]
 801e272:	b11b      	cbz	r3, 801e27c <rcl_clock_get_now+0x10>
 801e274:	68c3      	ldr	r3, [r0, #12]
 801e276:	b10b      	cbz	r3, 801e27c <rcl_clock_get_now+0x10>
 801e278:	6900      	ldr	r0, [r0, #16]
 801e27a:	4718      	bx	r3
 801e27c:	2001      	movs	r0, #1
 801e27e:	4770      	bx	lr
 801e280:	200b      	movs	r0, #11
 801e282:	4770      	bx	lr

0801e284 <rcl_timer_call>:
 801e284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e288:	b087      	sub	sp, #28
 801e28a:	2800      	cmp	r0, #0
 801e28c:	d06c      	beq.n	801e368 <rcl_timer_call+0xe4>
 801e28e:	6803      	ldr	r3, [r0, #0]
 801e290:	4604      	mov	r4, r0
 801e292:	2b00      	cmp	r3, #0
 801e294:	d062      	beq.n	801e35c <rcl_timer_call+0xd8>
 801e296:	f3bf 8f5b 	dmb	ish
 801e29a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801e29e:	f3bf 8f5b 	dmb	ish
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d14f      	bne.n	801e346 <rcl_timer_call+0xc2>
 801e2a6:	6803      	ldr	r3, [r0, #0]
 801e2a8:	a904      	add	r1, sp, #16
 801e2aa:	6818      	ldr	r0, [r3, #0]
 801e2ac:	f7ff ffde 	bl	801e26c <rcl_clock_get_now>
 801e2b0:	4605      	mov	r5, r0
 801e2b2:	2800      	cmp	r0, #0
 801e2b4:	d149      	bne.n	801e34a <rcl_timer_call+0xc6>
 801e2b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e2ba:	2b00      	cmp	r3, #0
 801e2bc:	db49      	blt.n	801e352 <rcl_timer_call+0xce>
 801e2be:	2605      	movs	r6, #5
 801e2c0:	6820      	ldr	r0, [r4, #0]
 801e2c2:	9600      	str	r6, [sp, #0]
 801e2c4:	3020      	adds	r0, #32
 801e2c6:	f001 fd23 	bl	801fd10 <__atomic_exchange_8>
 801e2ca:	6823      	ldr	r3, [r4, #0]
 801e2cc:	4680      	mov	r8, r0
 801e2ce:	f3bf 8f5b 	dmb	ish
 801e2d2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801e2d6:	f3bf 8f5b 	dmb	ish
 801e2da:	6820      	ldr	r0, [r4, #0]
 801e2dc:	4689      	mov	r9, r1
 801e2de:	4631      	mov	r1, r6
 801e2e0:	3028      	adds	r0, #40	@ 0x28
 801e2e2:	f001 fca9 	bl	801fc38 <__atomic_load_8>
 801e2e6:	460f      	mov	r7, r1
 801e2e8:	4631      	mov	r1, r6
 801e2ea:	4606      	mov	r6, r0
 801e2ec:	6820      	ldr	r0, [r4, #0]
 801e2ee:	3018      	adds	r0, #24
 801e2f0:	f001 fca2 	bl	801fc38 <__atomic_load_8>
 801e2f4:	4602      	mov	r2, r0
 801e2f6:	9804      	ldr	r0, [sp, #16]
 801e2f8:	460b      	mov	r3, r1
 801e2fa:	18b6      	adds	r6, r6, r2
 801e2fc:	f8dd c014 	ldr.w	ip, [sp, #20]
 801e300:	4692      	mov	sl, r2
 801e302:	eb47 0701 	adc.w	r7, r7, r1
 801e306:	4286      	cmp	r6, r0
 801e308:	eb77 010c 	sbcs.w	r1, r7, ip
 801e30c:	da04      	bge.n	801e318 <rcl_timer_call+0x94>
 801e30e:	ea53 0102 	orrs.w	r1, r3, r2
 801e312:	d12e      	bne.n	801e372 <rcl_timer_call+0xee>
 801e314:	4606      	mov	r6, r0
 801e316:	4667      	mov	r7, ip
 801e318:	6820      	ldr	r0, [r4, #0]
 801e31a:	2105      	movs	r1, #5
 801e31c:	4632      	mov	r2, r6
 801e31e:	463b      	mov	r3, r7
 801e320:	3028      	adds	r0, #40	@ 0x28
 801e322:	9100      	str	r1, [sp, #0]
 801e324:	f001 fcbe 	bl	801fca4 <__atomic_store_8>
 801e328:	f1bb 0f00 	cmp.w	fp, #0
 801e32c:	d00d      	beq.n	801e34a <rcl_timer_call+0xc6>
 801e32e:	9a04      	ldr	r2, [sp, #16]
 801e330:	4620      	mov	r0, r4
 801e332:	9b05      	ldr	r3, [sp, #20]
 801e334:	ebb2 0208 	subs.w	r2, r2, r8
 801e338:	eb63 0309 	sbc.w	r3, r3, r9
 801e33c:	47d8      	blx	fp
 801e33e:	4628      	mov	r0, r5
 801e340:	b007      	add	sp, #28
 801e342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e346:	f240 3521 	movw	r5, #801	@ 0x321
 801e34a:	4628      	mov	r0, r5
 801e34c:	b007      	add	sp, #28
 801e34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e352:	2501      	movs	r5, #1
 801e354:	4628      	mov	r0, r5
 801e356:	b007      	add	sp, #28
 801e358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e35c:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801e360:	4628      	mov	r0, r5
 801e362:	b007      	add	sp, #28
 801e364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e368:	250b      	movs	r5, #11
 801e36a:	4628      	mov	r0, r5
 801e36c:	b007      	add	sp, #28
 801e36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e372:	1b80      	subs	r0, r0, r6
 801e374:	eb6c 0107 	sbc.w	r1, ip, r7
 801e378:	3801      	subs	r0, #1
 801e37a:	f161 0100 	sbc.w	r1, r1, #0
 801e37e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801e382:	f7e2 fc41 	bl	8000c08 <__aeabi_ldivmod>
 801e386:	9b02      	ldr	r3, [sp, #8]
 801e388:	3001      	adds	r0, #1
 801e38a:	f141 0100 	adc.w	r1, r1, #0
 801e38e:	fb00 f303 	mul.w	r3, r0, r3
 801e392:	fb01 330a 	mla	r3, r1, sl, r3
 801e396:	fba0 0a0a 	umull	r0, sl, r0, sl
 801e39a:	1986      	adds	r6, r0, r6
 801e39c:	4453      	add	r3, sl
 801e39e:	eb43 0707 	adc.w	r7, r3, r7
 801e3a2:	e7b9      	b.n	801e318 <rcl_timer_call+0x94>

0801e3a4 <rcl_timer_is_ready>:
 801e3a4:	b570      	push	{r4, r5, r6, lr}
 801e3a6:	b082      	sub	sp, #8
 801e3a8:	b380      	cbz	r0, 801e40c <rcl_timer_is_ready+0x68>
 801e3aa:	6803      	ldr	r3, [r0, #0]
 801e3ac:	4604      	mov	r4, r0
 801e3ae:	b38b      	cbz	r3, 801e414 <rcl_timer_is_ready+0x70>
 801e3b0:	460d      	mov	r5, r1
 801e3b2:	b359      	cbz	r1, 801e40c <rcl_timer_is_ready+0x68>
 801e3b4:	f3bf 8f5b 	dmb	ish
 801e3b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801e3bc:	f3bf 8f5b 	dmb	ish
 801e3c0:	b953      	cbnz	r3, 801e3d8 <rcl_timer_is_ready+0x34>
 801e3c2:	6803      	ldr	r3, [r0, #0]
 801e3c4:	4669      	mov	r1, sp
 801e3c6:	6818      	ldr	r0, [r3, #0]
 801e3c8:	f7ff ff50 	bl	801e26c <rcl_clock_get_now>
 801e3cc:	4606      	mov	r6, r0
 801e3ce:	b148      	cbz	r0, 801e3e4 <rcl_timer_is_ready+0x40>
 801e3d0:	f240 3321 	movw	r3, #801	@ 0x321
 801e3d4:	4298      	cmp	r0, r3
 801e3d6:	d102      	bne.n	801e3de <rcl_timer_is_ready+0x3a>
 801e3d8:	2300      	movs	r3, #0
 801e3da:	461e      	mov	r6, r3
 801e3dc:	702b      	strb	r3, [r5, #0]
 801e3de:	4630      	mov	r0, r6
 801e3e0:	b002      	add	sp, #8
 801e3e2:	bd70      	pop	{r4, r5, r6, pc}
 801e3e4:	6820      	ldr	r0, [r4, #0]
 801e3e6:	2105      	movs	r1, #5
 801e3e8:	3028      	adds	r0, #40	@ 0x28
 801e3ea:	f001 fc25 	bl	801fc38 <__atomic_load_8>
 801e3ee:	9b00      	ldr	r3, [sp, #0]
 801e3f0:	1ac0      	subs	r0, r0, r3
 801e3f2:	9b01      	ldr	r3, [sp, #4]
 801e3f4:	eb61 0103 	sbc.w	r1, r1, r3
 801e3f8:	2801      	cmp	r0, #1
 801e3fa:	4630      	mov	r0, r6
 801e3fc:	f171 0300 	sbcs.w	r3, r1, #0
 801e400:	bfb4      	ite	lt
 801e402:	2301      	movlt	r3, #1
 801e404:	2300      	movge	r3, #0
 801e406:	702b      	strb	r3, [r5, #0]
 801e408:	b002      	add	sp, #8
 801e40a:	bd70      	pop	{r4, r5, r6, pc}
 801e40c:	260b      	movs	r6, #11
 801e40e:	4630      	mov	r0, r6
 801e410:	b002      	add	sp, #8
 801e412:	bd70      	pop	{r4, r5, r6, pc}
 801e414:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801e418:	e7e1      	b.n	801e3de <rcl_timer_is_ready+0x3a>
 801e41a:	bf00      	nop

0801e41c <rcl_timer_get_time_until_next_call>:
 801e41c:	b570      	push	{r4, r5, r6, lr}
 801e41e:	b082      	sub	sp, #8
 801e420:	b330      	cbz	r0, 801e470 <rcl_timer_get_time_until_next_call+0x54>
 801e422:	6803      	ldr	r3, [r0, #0]
 801e424:	4604      	mov	r4, r0
 801e426:	b33b      	cbz	r3, 801e478 <rcl_timer_get_time_until_next_call+0x5c>
 801e428:	460d      	mov	r5, r1
 801e42a:	b309      	cbz	r1, 801e470 <rcl_timer_get_time_until_next_call+0x54>
 801e42c:	f3bf 8f5b 	dmb	ish
 801e430:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801e434:	f3bf 8f5b 	dmb	ish
 801e438:	b9ab      	cbnz	r3, 801e466 <rcl_timer_get_time_until_next_call+0x4a>
 801e43a:	6803      	ldr	r3, [r0, #0]
 801e43c:	4669      	mov	r1, sp
 801e43e:	6818      	ldr	r0, [r3, #0]
 801e440:	f7ff ff14 	bl	801e26c <rcl_clock_get_now>
 801e444:	4606      	mov	r6, r0
 801e446:	b958      	cbnz	r0, 801e460 <rcl_timer_get_time_until_next_call+0x44>
 801e448:	6820      	ldr	r0, [r4, #0]
 801e44a:	2105      	movs	r1, #5
 801e44c:	3028      	adds	r0, #40	@ 0x28
 801e44e:	f001 fbf3 	bl	801fc38 <__atomic_load_8>
 801e452:	9b00      	ldr	r3, [sp, #0]
 801e454:	1ac0      	subs	r0, r0, r3
 801e456:	9b01      	ldr	r3, [sp, #4]
 801e458:	eb61 0103 	sbc.w	r1, r1, r3
 801e45c:	6028      	str	r0, [r5, #0]
 801e45e:	6069      	str	r1, [r5, #4]
 801e460:	4630      	mov	r0, r6
 801e462:	b002      	add	sp, #8
 801e464:	bd70      	pop	{r4, r5, r6, pc}
 801e466:	f240 3621 	movw	r6, #801	@ 0x321
 801e46a:	4630      	mov	r0, r6
 801e46c:	b002      	add	sp, #8
 801e46e:	bd70      	pop	{r4, r5, r6, pc}
 801e470:	260b      	movs	r6, #11
 801e472:	4630      	mov	r0, r6
 801e474:	b002      	add	sp, #8
 801e476:	bd70      	pop	{r4, r5, r6, pc}
 801e478:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801e47c:	e7f0      	b.n	801e460 <rcl_timer_get_time_until_next_call+0x44>
 801e47e:	bf00      	nop

0801e480 <rcl_timer_get_guard_condition>:
 801e480:	b130      	cbz	r0, 801e490 <rcl_timer_get_guard_condition+0x10>
 801e482:	6800      	ldr	r0, [r0, #0]
 801e484:	b120      	cbz	r0, 801e490 <rcl_timer_get_guard_condition+0x10>
 801e486:	68c3      	ldr	r3, [r0, #12]
 801e488:	b10b      	cbz	r3, 801e48e <rcl_timer_get_guard_condition+0xe>
 801e48a:	3008      	adds	r0, #8
 801e48c:	4770      	bx	lr
 801e48e:	4618      	mov	r0, r3
 801e490:	4770      	bx	lr
 801e492:	bf00      	nop

0801e494 <rcl_validate_enclave_name_with_size>:
 801e494:	2800      	cmp	r0, #0
 801e496:	d049      	beq.n	801e52c <rcl_validate_enclave_name_with_size+0x98>
 801e498:	b570      	push	{r4, r5, r6, lr}
 801e49a:	4615      	mov	r5, r2
 801e49c:	b0c2      	sub	sp, #264	@ 0x108
 801e49e:	b19a      	cbz	r2, 801e4c8 <rcl_validate_enclave_name_with_size+0x34>
 801e4a0:	461e      	mov	r6, r3
 801e4a2:	466a      	mov	r2, sp
 801e4a4:	ab01      	add	r3, sp, #4
 801e4a6:	460c      	mov	r4, r1
 801e4a8:	f002 f80e 	bl	80204c8 <rmw_validate_namespace_with_size>
 801e4ac:	4684      	mov	ip, r0
 801e4ae:	b9b8      	cbnz	r0, 801e4e0 <rcl_validate_enclave_name_with_size+0x4c>
 801e4b0:	9900      	ldr	r1, [sp, #0]
 801e4b2:	b171      	cbz	r1, 801e4d2 <rcl_validate_enclave_name_with_size+0x3e>
 801e4b4:	2907      	cmp	r1, #7
 801e4b6:	d019      	beq.n	801e4ec <rcl_validate_enclave_name_with_size+0x58>
 801e4b8:	1e4b      	subs	r3, r1, #1
 801e4ba:	2b05      	cmp	r3, #5
 801e4bc:	d83a      	bhi.n	801e534 <rcl_validate_enclave_name_with_size+0xa0>
 801e4be:	e8df f003 	tbb	[pc, r3]
 801e4c2:	2926      	.short	0x2926
 801e4c4:	1d322f2c 	.word	0x1d322f2c
 801e4c8:	f04f 0c0b 	mov.w	ip, #11
 801e4cc:	4660      	mov	r0, ip
 801e4ce:	b042      	add	sp, #264	@ 0x108
 801e4d0:	bd70      	pop	{r4, r5, r6, pc}
 801e4d2:	2907      	cmp	r1, #7
 801e4d4:	d00a      	beq.n	801e4ec <rcl_validate_enclave_name_with_size+0x58>
 801e4d6:	2300      	movs	r3, #0
 801e4d8:	4660      	mov	r0, ip
 801e4da:	602b      	str	r3, [r5, #0]
 801e4dc:	b042      	add	sp, #264	@ 0x108
 801e4de:	bd70      	pop	{r4, r5, r6, pc}
 801e4e0:	f008 fa40 	bl	8026964 <rcl_convert_rmw_ret_to_rcl_ret>
 801e4e4:	4684      	mov	ip, r0
 801e4e6:	4660      	mov	r0, ip
 801e4e8:	b042      	add	sp, #264	@ 0x108
 801e4ea:	bd70      	pop	{r4, r5, r6, pc}
 801e4ec:	2cff      	cmp	r4, #255	@ 0xff
 801e4ee:	d9f2      	bls.n	801e4d6 <rcl_validate_enclave_name_with_size+0x42>
 801e4f0:	6029      	str	r1, [r5, #0]
 801e4f2:	2e00      	cmp	r6, #0
 801e4f4:	d0ea      	beq.n	801e4cc <rcl_validate_enclave_name_with_size+0x38>
 801e4f6:	23fe      	movs	r3, #254	@ 0xfe
 801e4f8:	6033      	str	r3, [r6, #0]
 801e4fa:	e7e7      	b.n	801e4cc <rcl_validate_enclave_name_with_size+0x38>
 801e4fc:	2306      	movs	r3, #6
 801e4fe:	602b      	str	r3, [r5, #0]
 801e500:	2e00      	cmp	r6, #0
 801e502:	d0e3      	beq.n	801e4cc <rcl_validate_enclave_name_with_size+0x38>
 801e504:	9b01      	ldr	r3, [sp, #4]
 801e506:	4660      	mov	r0, ip
 801e508:	6033      	str	r3, [r6, #0]
 801e50a:	b042      	add	sp, #264	@ 0x108
 801e50c:	bd70      	pop	{r4, r5, r6, pc}
 801e50e:	2301      	movs	r3, #1
 801e510:	602b      	str	r3, [r5, #0]
 801e512:	e7f5      	b.n	801e500 <rcl_validate_enclave_name_with_size+0x6c>
 801e514:	2302      	movs	r3, #2
 801e516:	602b      	str	r3, [r5, #0]
 801e518:	e7f2      	b.n	801e500 <rcl_validate_enclave_name_with_size+0x6c>
 801e51a:	2303      	movs	r3, #3
 801e51c:	602b      	str	r3, [r5, #0]
 801e51e:	e7ef      	b.n	801e500 <rcl_validate_enclave_name_with_size+0x6c>
 801e520:	2304      	movs	r3, #4
 801e522:	602b      	str	r3, [r5, #0]
 801e524:	e7ec      	b.n	801e500 <rcl_validate_enclave_name_with_size+0x6c>
 801e526:	2305      	movs	r3, #5
 801e528:	602b      	str	r3, [r5, #0]
 801e52a:	e7e9      	b.n	801e500 <rcl_validate_enclave_name_with_size+0x6c>
 801e52c:	f04f 0c0b 	mov.w	ip, #11
 801e530:	4660      	mov	r0, ip
 801e532:	4770      	bx	lr
 801e534:	460b      	mov	r3, r1
 801e536:	4a04      	ldr	r2, [pc, #16]	@ (801e548 <rcl_validate_enclave_name_with_size+0xb4>)
 801e538:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e53c:	a802      	add	r0, sp, #8
 801e53e:	f001 fd33 	bl	801ffa8 <rcutils_snprintf>
 801e542:	f04f 0c01 	mov.w	ip, #1
 801e546:	e7c1      	b.n	801e4cc <rcl_validate_enclave_name_with_size+0x38>
 801e548:	0802f8c0 	.word	0x0802f8c0

0801e54c <rcl_validate_enclave_name>:
 801e54c:	b168      	cbz	r0, 801e56a <rcl_validate_enclave_name+0x1e>
 801e54e:	b570      	push	{r4, r5, r6, lr}
 801e550:	460d      	mov	r5, r1
 801e552:	4616      	mov	r6, r2
 801e554:	4604      	mov	r4, r0
 801e556:	f7e1 febb 	bl	80002d0 <strlen>
 801e55a:	4633      	mov	r3, r6
 801e55c:	4601      	mov	r1, r0
 801e55e:	462a      	mov	r2, r5
 801e560:	4620      	mov	r0, r4
 801e562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e566:	f7ff bf95 	b.w	801e494 <rcl_validate_enclave_name_with_size>
 801e56a:	200b      	movs	r0, #11
 801e56c:	4770      	bx	lr
 801e56e:	bf00      	nop

0801e570 <rcl_get_zero_initialized_wait_set>:
 801e570:	b510      	push	{r4, lr}
 801e572:	4c08      	ldr	r4, [pc, #32]	@ (801e594 <rcl_get_zero_initialized_wait_set+0x24>)
 801e574:	4686      	mov	lr, r0
 801e576:	4684      	mov	ip, r0
 801e578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e57a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e57e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e580:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e586:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e58a:	6823      	ldr	r3, [r4, #0]
 801e58c:	4670      	mov	r0, lr
 801e58e:	f8cc 3000 	str.w	r3, [ip]
 801e592:	bd10      	pop	{r4, pc}
 801e594:	0802f920 	.word	0x0802f920

0801e598 <rcl_wait_set_is_valid>:
 801e598:	b118      	cbz	r0, 801e5a2 <rcl_wait_set_is_valid+0xa>
 801e59a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801e59c:	3800      	subs	r0, #0
 801e59e:	bf18      	it	ne
 801e5a0:	2001      	movne	r0, #1
 801e5a2:	4770      	bx	lr

0801e5a4 <rcl_wait_set_fini>:
 801e5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5a8:	b082      	sub	sp, #8
 801e5aa:	2800      	cmp	r0, #0
 801e5ac:	f000 8095 	beq.w	801e6da <rcl_wait_set_fini+0x136>
 801e5b0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801e5b2:	4604      	mov	r4, r0
 801e5b4:	2e00      	cmp	r6, #0
 801e5b6:	f000 808c 	beq.w	801e6d2 <rcl_wait_set_fini+0x12e>
 801e5ba:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801e5bc:	f003 f94a 	bl	8021854 <rmw_destroy_wait_set>
 801e5c0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801e5c2:	1e06      	subs	r6, r0, #0
 801e5c4:	bf18      	it	ne
 801e5c6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801e5ca:	2d00      	cmp	r5, #0
 801e5cc:	f000 8081 	beq.w	801e6d2 <rcl_wait_set_fini+0x12e>
 801e5d0:	2700      	movs	r7, #0
 801e5d2:	6820      	ldr	r0, [r4, #0]
 801e5d4:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801e5d8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801e5da:	6067      	str	r7, [r4, #4]
 801e5dc:	602f      	str	r7, [r5, #0]
 801e5de:	b120      	cbz	r0, 801e5ea <rcl_wait_set_fini+0x46>
 801e5e0:	9101      	str	r1, [sp, #4]
 801e5e2:	47c0      	blx	r8
 801e5e4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801e5e6:	9901      	ldr	r1, [sp, #4]
 801e5e8:	6027      	str	r7, [r4, #0]
 801e5ea:	68a8      	ldr	r0, [r5, #8]
 801e5ec:	b120      	cbz	r0, 801e5f8 <rcl_wait_set_fini+0x54>
 801e5ee:	47c0      	blx	r8
 801e5f0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801e5f2:	2300      	movs	r3, #0
 801e5f4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801e5f8:	f04f 0800 	mov.w	r8, #0
 801e5fc:	68a0      	ldr	r0, [r4, #8]
 801e5fe:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801e600:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801e602:	f8c4 800c 	str.w	r8, [r4, #12]
 801e606:	f8c5 800c 	str.w	r8, [r5, #12]
 801e60a:	b128      	cbz	r0, 801e618 <rcl_wait_set_fini+0x74>
 801e60c:	47b8      	blx	r7
 801e60e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801e610:	f8c4 8008 	str.w	r8, [r4, #8]
 801e614:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801e616:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801e618:	f04f 0800 	mov.w	r8, #0
 801e61c:	6968      	ldr	r0, [r5, #20]
 801e61e:	f8c5 8010 	str.w	r8, [r5, #16]
 801e622:	b128      	cbz	r0, 801e630 <rcl_wait_set_fini+0x8c>
 801e624:	47b8      	blx	r7
 801e626:	f8c5 8014 	str.w	r8, [r5, #20]
 801e62a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801e62c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801e62e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801e630:	f04f 0800 	mov.w	r8, #0
 801e634:	6920      	ldr	r0, [r4, #16]
 801e636:	f8c4 8014 	str.w	r8, [r4, #20]
 801e63a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801e63e:	b128      	cbz	r0, 801e64c <rcl_wait_set_fini+0xa8>
 801e640:	47b8      	blx	r7
 801e642:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801e644:	f8c4 8010 	str.w	r8, [r4, #16]
 801e648:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801e64a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801e64c:	f04f 0800 	mov.w	r8, #0
 801e650:	69a0      	ldr	r0, [r4, #24]
 801e652:	f8c4 801c 	str.w	r8, [r4, #28]
 801e656:	f8c5 8018 	str.w	r8, [r5, #24]
 801e65a:	b128      	cbz	r0, 801e668 <rcl_wait_set_fini+0xc4>
 801e65c:	9101      	str	r1, [sp, #4]
 801e65e:	47b8      	blx	r7
 801e660:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801e662:	9901      	ldr	r1, [sp, #4]
 801e664:	f8c4 8018 	str.w	r8, [r4, #24]
 801e668:	6a28      	ldr	r0, [r5, #32]
 801e66a:	b120      	cbz	r0, 801e676 <rcl_wait_set_fini+0xd2>
 801e66c:	47b8      	blx	r7
 801e66e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801e670:	2300      	movs	r3, #0
 801e672:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801e676:	2700      	movs	r7, #0
 801e678:	6a20      	ldr	r0, [r4, #32]
 801e67a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801e67e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801e680:	6267      	str	r7, [r4, #36]	@ 0x24
 801e682:	626f      	str	r7, [r5, #36]	@ 0x24
 801e684:	b120      	cbz	r0, 801e690 <rcl_wait_set_fini+0xec>
 801e686:	9101      	str	r1, [sp, #4]
 801e688:	47c0      	blx	r8
 801e68a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801e68c:	9901      	ldr	r1, [sp, #4]
 801e68e:	6227      	str	r7, [r4, #32]
 801e690:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801e692:	b120      	cbz	r0, 801e69e <rcl_wait_set_fini+0xfa>
 801e694:	47c0      	blx	r8
 801e696:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801e698:	2300      	movs	r3, #0
 801e69a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801e69e:	2700      	movs	r7, #0
 801e6a0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801e6a2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801e6a6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801e6a8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801e6aa:	632f      	str	r7, [r5, #48]	@ 0x30
 801e6ac:	b120      	cbz	r0, 801e6b8 <rcl_wait_set_fini+0x114>
 801e6ae:	9101      	str	r1, [sp, #4]
 801e6b0:	47c0      	blx	r8
 801e6b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801e6b4:	9901      	ldr	r1, [sp, #4]
 801e6b6:	62a7      	str	r7, [r4, #40]	@ 0x28
 801e6b8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801e6ba:	b120      	cbz	r0, 801e6c6 <rcl_wait_set_fini+0x122>
 801e6bc:	47c0      	blx	r8
 801e6be:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801e6c0:	2300      	movs	r3, #0
 801e6c2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801e6c6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801e6c8:	4628      	mov	r0, r5
 801e6ca:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801e6cc:	4798      	blx	r3
 801e6ce:	2300      	movs	r3, #0
 801e6d0:	6323      	str	r3, [r4, #48]	@ 0x30
 801e6d2:	4630      	mov	r0, r6
 801e6d4:	b002      	add	sp, #8
 801e6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6da:	260b      	movs	r6, #11
 801e6dc:	4630      	mov	r0, r6
 801e6de:	b002      	add	sp, #8
 801e6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e6e4 <rcl_wait_set_add_subscription>:
 801e6e4:	b318      	cbz	r0, 801e72e <rcl_wait_set_add_subscription+0x4a>
 801e6e6:	b538      	push	{r3, r4, r5, lr}
 801e6e8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801e6ea:	4604      	mov	r4, r0
 801e6ec:	b30b      	cbz	r3, 801e732 <rcl_wait_set_add_subscription+0x4e>
 801e6ee:	b319      	cbz	r1, 801e738 <rcl_wait_set_add_subscription+0x54>
 801e6f0:	681d      	ldr	r5, [r3, #0]
 801e6f2:	6840      	ldr	r0, [r0, #4]
 801e6f4:	4285      	cmp	r5, r0
 801e6f6:	d217      	bcs.n	801e728 <rcl_wait_set_add_subscription+0x44>
 801e6f8:	1c68      	adds	r0, r5, #1
 801e6fa:	6018      	str	r0, [r3, #0]
 801e6fc:	6823      	ldr	r3, [r4, #0]
 801e6fe:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801e702:	b102      	cbz	r2, 801e706 <rcl_wait_set_add_subscription+0x22>
 801e704:	6015      	str	r5, [r2, #0]
 801e706:	4608      	mov	r0, r1
 801e708:	f7ff fcfe 	bl	801e108 <rcl_subscription_get_rmw_handle>
 801e70c:	b150      	cbz	r0, 801e724 <rcl_wait_set_add_subscription+0x40>
 801e70e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e710:	6842      	ldr	r2, [r0, #4]
 801e712:	2000      	movs	r0, #0
 801e714:	689b      	ldr	r3, [r3, #8]
 801e716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e71a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801e71c:	6853      	ldr	r3, [r2, #4]
 801e71e:	3301      	adds	r3, #1
 801e720:	6053      	str	r3, [r2, #4]
 801e722:	bd38      	pop	{r3, r4, r5, pc}
 801e724:	2001      	movs	r0, #1
 801e726:	bd38      	pop	{r3, r4, r5, pc}
 801e728:	f240 3086 	movw	r0, #902	@ 0x386
 801e72c:	bd38      	pop	{r3, r4, r5, pc}
 801e72e:	200b      	movs	r0, #11
 801e730:	4770      	bx	lr
 801e732:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801e736:	bd38      	pop	{r3, r4, r5, pc}
 801e738:	200b      	movs	r0, #11
 801e73a:	bd38      	pop	{r3, r4, r5, pc}

0801e73c <rcl_wait_set_clear>:
 801e73c:	2800      	cmp	r0, #0
 801e73e:	d074      	beq.n	801e82a <rcl_wait_set_clear+0xee>
 801e740:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801e742:	b510      	push	{r4, lr}
 801e744:	4604      	mov	r4, r0
 801e746:	2b00      	cmp	r3, #0
 801e748:	d071      	beq.n	801e82e <rcl_wait_set_clear+0xf2>
 801e74a:	6800      	ldr	r0, [r0, #0]
 801e74c:	b138      	cbz	r0, 801e75e <rcl_wait_set_clear+0x22>
 801e74e:	6862      	ldr	r2, [r4, #4]
 801e750:	2100      	movs	r1, #0
 801e752:	0092      	lsls	r2, r2, #2
 801e754:	f00a ff66 	bl	8029624 <memset>
 801e758:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e75a:	2200      	movs	r2, #0
 801e75c:	601a      	str	r2, [r3, #0]
 801e75e:	68a0      	ldr	r0, [r4, #8]
 801e760:	b138      	cbz	r0, 801e772 <rcl_wait_set_clear+0x36>
 801e762:	68e2      	ldr	r2, [r4, #12]
 801e764:	2100      	movs	r1, #0
 801e766:	0092      	lsls	r2, r2, #2
 801e768:	f00a ff5c 	bl	8029624 <memset>
 801e76c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e76e:	2200      	movs	r2, #0
 801e770:	60da      	str	r2, [r3, #12]
 801e772:	69a0      	ldr	r0, [r4, #24]
 801e774:	b138      	cbz	r0, 801e786 <rcl_wait_set_clear+0x4a>
 801e776:	69e2      	ldr	r2, [r4, #28]
 801e778:	2100      	movs	r1, #0
 801e77a:	0092      	lsls	r2, r2, #2
 801e77c:	f00a ff52 	bl	8029624 <memset>
 801e780:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e782:	2200      	movs	r2, #0
 801e784:	619a      	str	r2, [r3, #24]
 801e786:	6a20      	ldr	r0, [r4, #32]
 801e788:	b138      	cbz	r0, 801e79a <rcl_wait_set_clear+0x5e>
 801e78a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801e78c:	2100      	movs	r1, #0
 801e78e:	0092      	lsls	r2, r2, #2
 801e790:	f00a ff48 	bl	8029624 <memset>
 801e794:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e796:	2200      	movs	r2, #0
 801e798:	625a      	str	r2, [r3, #36]	@ 0x24
 801e79a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801e79c:	b138      	cbz	r0, 801e7ae <rcl_wait_set_clear+0x72>
 801e79e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801e7a0:	2100      	movs	r1, #0
 801e7a2:	0092      	lsls	r2, r2, #2
 801e7a4:	f00a ff3e 	bl	8029624 <memset>
 801e7a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e7aa:	2200      	movs	r2, #0
 801e7ac:	631a      	str	r2, [r3, #48]	@ 0x30
 801e7ae:	6920      	ldr	r0, [r4, #16]
 801e7b0:	b138      	cbz	r0, 801e7c2 <rcl_wait_set_clear+0x86>
 801e7b2:	6962      	ldr	r2, [r4, #20]
 801e7b4:	2100      	movs	r1, #0
 801e7b6:	0092      	lsls	r2, r2, #2
 801e7b8:	f00a ff34 	bl	8029624 <memset>
 801e7bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e7be:	2200      	movs	r2, #0
 801e7c0:	641a      	str	r2, [r3, #64]	@ 0x40
 801e7c2:	6898      	ldr	r0, [r3, #8]
 801e7c4:	b138      	cbz	r0, 801e7d6 <rcl_wait_set_clear+0x9a>
 801e7c6:	685a      	ldr	r2, [r3, #4]
 801e7c8:	2100      	movs	r1, #0
 801e7ca:	0092      	lsls	r2, r2, #2
 801e7cc:	f00a ff2a 	bl	8029624 <memset>
 801e7d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e7d2:	2200      	movs	r2, #0
 801e7d4:	605a      	str	r2, [r3, #4]
 801e7d6:	6958      	ldr	r0, [r3, #20]
 801e7d8:	b138      	cbz	r0, 801e7ea <rcl_wait_set_clear+0xae>
 801e7da:	691a      	ldr	r2, [r3, #16]
 801e7dc:	2100      	movs	r1, #0
 801e7de:	0092      	lsls	r2, r2, #2
 801e7e0:	f00a ff20 	bl	8029624 <memset>
 801e7e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e7e6:	2200      	movs	r2, #0
 801e7e8:	611a      	str	r2, [r3, #16]
 801e7ea:	6a18      	ldr	r0, [r3, #32]
 801e7ec:	b138      	cbz	r0, 801e7fe <rcl_wait_set_clear+0xc2>
 801e7ee:	69da      	ldr	r2, [r3, #28]
 801e7f0:	2100      	movs	r1, #0
 801e7f2:	0092      	lsls	r2, r2, #2
 801e7f4:	f00a ff16 	bl	8029624 <memset>
 801e7f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e7fa:	2200      	movs	r2, #0
 801e7fc:	61da      	str	r2, [r3, #28]
 801e7fe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801e800:	b138      	cbz	r0, 801e812 <rcl_wait_set_clear+0xd6>
 801e802:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e804:	2100      	movs	r1, #0
 801e806:	0092      	lsls	r2, r2, #2
 801e808:	f00a ff0c 	bl	8029624 <memset>
 801e80c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e80e:	2200      	movs	r2, #0
 801e810:	629a      	str	r2, [r3, #40]	@ 0x28
 801e812:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801e814:	b140      	cbz	r0, 801e828 <rcl_wait_set_clear+0xec>
 801e816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e818:	2100      	movs	r1, #0
 801e81a:	0092      	lsls	r2, r2, #2
 801e81c:	f00a ff02 	bl	8029624 <memset>
 801e820:	2300      	movs	r3, #0
 801e822:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801e824:	4618      	mov	r0, r3
 801e826:	6353      	str	r3, [r2, #52]	@ 0x34
 801e828:	bd10      	pop	{r4, pc}
 801e82a:	200b      	movs	r0, #11
 801e82c:	4770      	bx	lr
 801e82e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801e832:	bd10      	pop	{r4, pc}

0801e834 <rcl_wait_set_resize>:
 801e834:	2800      	cmp	r0, #0
 801e836:	f000 8180 	beq.w	801eb3a <rcl_wait_set_resize+0x306>
 801e83a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e83e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801e840:	b083      	sub	sp, #12
 801e842:	4605      	mov	r5, r0
 801e844:	2c00      	cmp	r4, #0
 801e846:	f000 817a 	beq.w	801eb3e <rcl_wait_set_resize+0x30a>
 801e84a:	f04f 0900 	mov.w	r9, #0
 801e84e:	461f      	mov	r7, r3
 801e850:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801e854:	4688      	mov	r8, r1
 801e856:	4616      	mov	r6, r2
 801e858:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801e85c:	f8c0 9004 	str.w	r9, [r0, #4]
 801e860:	f8c4 9000 	str.w	r9, [r4]
 801e864:	2900      	cmp	r1, #0
 801e866:	f000 80bf 	beq.w	801e9e8 <rcl_wait_set_resize+0x1b4>
 801e86a:	008c      	lsls	r4, r1, #2
 801e86c:	4652      	mov	r2, sl
 801e86e:	6800      	ldr	r0, [r0, #0]
 801e870:	4621      	mov	r1, r4
 801e872:	9301      	str	r3, [sp, #4]
 801e874:	4798      	blx	r3
 801e876:	9b01      	ldr	r3, [sp, #4]
 801e878:	6028      	str	r0, [r5, #0]
 801e87a:	2800      	cmp	r0, #0
 801e87c:	f000 80f6 	beq.w	801ea6c <rcl_wait_set_resize+0x238>
 801e880:	4622      	mov	r2, r4
 801e882:	4649      	mov	r1, r9
 801e884:	9301      	str	r3, [sp, #4]
 801e886:	f00a fecd 	bl	8029624 <memset>
 801e88a:	f8c5 8004 	str.w	r8, [r5, #4]
 801e88e:	4652      	mov	r2, sl
 801e890:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801e894:	4621      	mov	r1, r4
 801e896:	9b01      	ldr	r3, [sp, #4]
 801e898:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801e89c:	f8c8 9004 	str.w	r9, [r8, #4]
 801e8a0:	4798      	blx	r3
 801e8a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801e8a4:	f8c8 0008 	str.w	r0, [r8, #8]
 801e8a8:	689b      	ldr	r3, [r3, #8]
 801e8aa:	2b00      	cmp	r3, #0
 801e8ac:	f000 814a 	beq.w	801eb44 <rcl_wait_set_resize+0x310>
 801e8b0:	4622      	mov	r2, r4
 801e8b2:	4649      	mov	r1, r9
 801e8b4:	4618      	mov	r0, r3
 801e8b6:	f00a feb5 	bl	8029624 <memset>
 801e8ba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801e8bc:	f04f 0800 	mov.w	r8, #0
 801e8c0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801e8c4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801e8c8:	f8c5 800c 	str.w	r8, [r5, #12]
 801e8cc:	f8c4 800c 	str.w	r8, [r4, #12]
 801e8d0:	2e00      	cmp	r6, #0
 801e8d2:	f040 809b 	bne.w	801ea0c <rcl_wait_set_resize+0x1d8>
 801e8d6:	68a8      	ldr	r0, [r5, #8]
 801e8d8:	b128      	cbz	r0, 801e8e6 <rcl_wait_set_resize+0xb2>
 801e8da:	4649      	mov	r1, r9
 801e8dc:	4790      	blx	r2
 801e8de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801e8e0:	60ae      	str	r6, [r5, #8]
 801e8e2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801e8e6:	f04f 0800 	mov.w	r8, #0
 801e8ea:	19f6      	adds	r6, r6, r7
 801e8ec:	f8c4 8010 	str.w	r8, [r4, #16]
 801e8f0:	f040 80a2 	bne.w	801ea38 <rcl_wait_set_resize+0x204>
 801e8f4:	6960      	ldr	r0, [r4, #20]
 801e8f6:	b130      	cbz	r0, 801e906 <rcl_wait_set_resize+0xd2>
 801e8f8:	4649      	mov	r1, r9
 801e8fa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801e8fc:	4798      	blx	r3
 801e8fe:	6166      	str	r6, [r4, #20]
 801e900:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801e902:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801e906:	2600      	movs	r6, #0
 801e908:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801e90c:	616e      	str	r6, [r5, #20]
 801e90e:	6426      	str	r6, [r4, #64]	@ 0x40
 801e910:	2f00      	cmp	r7, #0
 801e912:	f040 80af 	bne.w	801ea74 <rcl_wait_set_resize+0x240>
 801e916:	6928      	ldr	r0, [r5, #16]
 801e918:	b138      	cbz	r0, 801e92a <rcl_wait_set_resize+0xf6>
 801e91a:	4649      	mov	r1, r9
 801e91c:	47d0      	blx	sl
 801e91e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801e920:	612f      	str	r7, [r5, #16]
 801e922:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801e926:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801e92a:	2600      	movs	r6, #0
 801e92c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e92e:	61ee      	str	r6, [r5, #28]
 801e930:	61a6      	str	r6, [r4, #24]
 801e932:	2b00      	cmp	r3, #0
 801e934:	f040 8093 	bne.w	801ea5e <rcl_wait_set_resize+0x22a>
 801e938:	69a8      	ldr	r0, [r5, #24]
 801e93a:	b120      	cbz	r0, 801e946 <rcl_wait_set_resize+0x112>
 801e93c:	4649      	mov	r1, r9
 801e93e:	47d0      	blx	sl
 801e940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e942:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801e944:	61ab      	str	r3, [r5, #24]
 801e946:	6a20      	ldr	r0, [r4, #32]
 801e948:	b128      	cbz	r0, 801e956 <rcl_wait_set_resize+0x122>
 801e94a:	4649      	mov	r1, r9
 801e94c:	47d0      	blx	sl
 801e94e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801e950:	2300      	movs	r3, #0
 801e952:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801e956:	2600      	movs	r6, #0
 801e958:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e95a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801e95c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801e960:	626e      	str	r6, [r5, #36]	@ 0x24
 801e962:	6266      	str	r6, [r4, #36]	@ 0x24
 801e964:	2b00      	cmp	r3, #0
 801e966:	f000 8098 	beq.w	801ea9a <rcl_wait_set_resize+0x266>
 801e96a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801e96e:	463a      	mov	r2, r7
 801e970:	6a28      	ldr	r0, [r5, #32]
 801e972:	4651      	mov	r1, sl
 801e974:	47c8      	blx	r9
 801e976:	6228      	str	r0, [r5, #32]
 801e978:	2800      	cmp	r0, #0
 801e97a:	d077      	beq.n	801ea6c <rcl_wait_set_resize+0x238>
 801e97c:	4652      	mov	r2, sl
 801e97e:	4631      	mov	r1, r6
 801e980:	f00a fe50 	bl	8029624 <memset>
 801e984:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801e986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e988:	463a      	mov	r2, r7
 801e98a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801e98c:	4651      	mov	r1, sl
 801e98e:	626b      	str	r3, [r5, #36]	@ 0x24
 801e990:	62a6      	str	r6, [r4, #40]	@ 0x28
 801e992:	47c8      	blx	r9
 801e994:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801e996:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801e998:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801e99a:	2c00      	cmp	r4, #0
 801e99c:	f000 80f2 	beq.w	801eb84 <rcl_wait_set_resize+0x350>
 801e9a0:	4620      	mov	r0, r4
 801e9a2:	4652      	mov	r2, sl
 801e9a4:	4631      	mov	r1, r6
 801e9a6:	f00a fe3d 	bl	8029624 <memset>
 801e9aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801e9ac:	2600      	movs	r6, #0
 801e9ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9b0:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801e9b2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801e9b6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801e9b8:	6326      	str	r6, [r4, #48]	@ 0x30
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	f040 8097 	bne.w	801eaee <rcl_wait_set_resize+0x2ba>
 801e9c0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801e9c2:	b120      	cbz	r0, 801e9ce <rcl_wait_set_resize+0x19a>
 801e9c4:	4639      	mov	r1, r7
 801e9c6:	47c0      	blx	r8
 801e9c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9ca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801e9cc:	62ab      	str	r3, [r5, #40]	@ 0x28
 801e9ce:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801e9d0:	2800      	cmp	r0, #0
 801e9d2:	d04c      	beq.n	801ea6e <rcl_wait_set_resize+0x23a>
 801e9d4:	4639      	mov	r1, r7
 801e9d6:	47c0      	blx	r8
 801e9d8:	2300      	movs	r3, #0
 801e9da:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801e9dc:	4618      	mov	r0, r3
 801e9de:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 801e9e2:	b003      	add	sp, #12
 801e9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9e8:	6800      	ldr	r0, [r0, #0]
 801e9ea:	b120      	cbz	r0, 801e9f6 <rcl_wait_set_resize+0x1c2>
 801e9ec:	4651      	mov	r1, sl
 801e9ee:	47d8      	blx	fp
 801e9f0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801e9f2:	f8c5 8000 	str.w	r8, [r5]
 801e9f6:	68a0      	ldr	r0, [r4, #8]
 801e9f8:	2800      	cmp	r0, #0
 801e9fa:	f43f af5f 	beq.w	801e8bc <rcl_wait_set_resize+0x88>
 801e9fe:	4651      	mov	r1, sl
 801ea00:	47d8      	blx	fp
 801ea02:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ea04:	2300      	movs	r3, #0
 801ea06:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801ea0a:	e757      	b.n	801e8bc <rcl_wait_set_resize+0x88>
 801ea0c:	00b4      	lsls	r4, r6, #2
 801ea0e:	464a      	mov	r2, r9
 801ea10:	68a8      	ldr	r0, [r5, #8]
 801ea12:	4621      	mov	r1, r4
 801ea14:	4798      	blx	r3
 801ea16:	60a8      	str	r0, [r5, #8]
 801ea18:	b340      	cbz	r0, 801ea6c <rcl_wait_set_resize+0x238>
 801ea1a:	4622      	mov	r2, r4
 801ea1c:	4641      	mov	r1, r8
 801ea1e:	f00a fe01 	bl	8029624 <memset>
 801ea22:	f04f 0800 	mov.w	r8, #0
 801ea26:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ea28:	60ee      	str	r6, [r5, #12]
 801ea2a:	19f6      	adds	r6, r6, r7
 801ea2c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801ea30:	f8c4 8010 	str.w	r8, [r4, #16]
 801ea34:	f43f af5e 	beq.w	801e8f4 <rcl_wait_set_resize+0xc0>
 801ea38:	00b6      	lsls	r6, r6, #2
 801ea3a:	464a      	mov	r2, r9
 801ea3c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801ea3e:	6960      	ldr	r0, [r4, #20]
 801ea40:	4631      	mov	r1, r6
 801ea42:	4798      	blx	r3
 801ea44:	4681      	mov	r9, r0
 801ea46:	6160      	str	r0, [r4, #20]
 801ea48:	2800      	cmp	r0, #0
 801ea4a:	f000 8084 	beq.w	801eb56 <rcl_wait_set_resize+0x322>
 801ea4e:	4632      	mov	r2, r6
 801ea50:	4641      	mov	r1, r8
 801ea52:	f00a fde7 	bl	8029624 <memset>
 801ea56:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ea58:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801ea5c:	e753      	b.n	801e906 <rcl_wait_set_resize+0xd2>
 801ea5e:	009c      	lsls	r4, r3, #2
 801ea60:	464a      	mov	r2, r9
 801ea62:	69a8      	ldr	r0, [r5, #24]
 801ea64:	4621      	mov	r1, r4
 801ea66:	47c0      	blx	r8
 801ea68:	61a8      	str	r0, [r5, #24]
 801ea6a:	bb40      	cbnz	r0, 801eabe <rcl_wait_set_resize+0x28a>
 801ea6c:	200a      	movs	r0, #10
 801ea6e:	b003      	add	sp, #12
 801ea70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea74:	00bc      	lsls	r4, r7, #2
 801ea76:	464a      	mov	r2, r9
 801ea78:	6928      	ldr	r0, [r5, #16]
 801ea7a:	4621      	mov	r1, r4
 801ea7c:	47c0      	blx	r8
 801ea7e:	6128      	str	r0, [r5, #16]
 801ea80:	2800      	cmp	r0, #0
 801ea82:	d0f3      	beq.n	801ea6c <rcl_wait_set_resize+0x238>
 801ea84:	4622      	mov	r2, r4
 801ea86:	4631      	mov	r1, r6
 801ea88:	f00a fdcc 	bl	8029624 <memset>
 801ea8c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ea8e:	616f      	str	r7, [r5, #20]
 801ea90:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801ea94:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801ea98:	e747      	b.n	801e92a <rcl_wait_set_resize+0xf6>
 801ea9a:	6a28      	ldr	r0, [r5, #32]
 801ea9c:	b120      	cbz	r0, 801eaa8 <rcl_wait_set_resize+0x274>
 801ea9e:	4639      	mov	r1, r7
 801eaa0:	47c0      	blx	r8
 801eaa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eaa4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801eaa6:	622b      	str	r3, [r5, #32]
 801eaa8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801eaaa:	2800      	cmp	r0, #0
 801eaac:	f43f af7e 	beq.w	801e9ac <rcl_wait_set_resize+0x178>
 801eab0:	4639      	mov	r1, r7
 801eab2:	47c0      	blx	r8
 801eab4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801eab6:	2300      	movs	r3, #0
 801eab8:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801eabc:	e776      	b.n	801e9ac <rcl_wait_set_resize+0x178>
 801eabe:	4622      	mov	r2, r4
 801eac0:	4631      	mov	r1, r6
 801eac2:	f00a fdaf 	bl	8029624 <memset>
 801eac6:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801eac8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eaca:	464a      	mov	r2, r9
 801eacc:	6a38      	ldr	r0, [r7, #32]
 801eace:	4621      	mov	r1, r4
 801ead0:	61eb      	str	r3, [r5, #28]
 801ead2:	61fe      	str	r6, [r7, #28]
 801ead4:	47c0      	blx	r8
 801ead6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ead8:	6238      	str	r0, [r7, #32]
 801eada:	6a1f      	ldr	r7, [r3, #32]
 801eadc:	2f00      	cmp	r7, #0
 801eade:	d04a      	beq.n	801eb76 <rcl_wait_set_resize+0x342>
 801eae0:	4622      	mov	r2, r4
 801eae2:	4631      	mov	r1, r6
 801eae4:	4638      	mov	r0, r7
 801eae6:	f00a fd9d 	bl	8029624 <memset>
 801eaea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801eaec:	e733      	b.n	801e956 <rcl_wait_set_resize+0x122>
 801eaee:	009c      	lsls	r4, r3, #2
 801eaf0:	463a      	mov	r2, r7
 801eaf2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801eaf4:	4621      	mov	r1, r4
 801eaf6:	47c8      	blx	r9
 801eaf8:	62a8      	str	r0, [r5, #40]	@ 0x28
 801eafa:	2800      	cmp	r0, #0
 801eafc:	d0b6      	beq.n	801ea6c <rcl_wait_set_resize+0x238>
 801eafe:	4622      	mov	r2, r4
 801eb00:	4631      	mov	r1, r6
 801eb02:	f00a fd8f 	bl	8029624 <memset>
 801eb06:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801eb0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eb0c:	463a      	mov	r2, r7
 801eb0e:	4621      	mov	r1, r4
 801eb10:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801eb14:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801eb16:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801eb1a:	47c8      	blx	r9
 801eb1c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801eb1e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801eb22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb24:	2b00      	cmp	r3, #0
 801eb26:	d034      	beq.n	801eb92 <rcl_wait_set_resize+0x35e>
 801eb28:	4622      	mov	r2, r4
 801eb2a:	4631      	mov	r1, r6
 801eb2c:	4618      	mov	r0, r3
 801eb2e:	f00a fd79 	bl	8029624 <memset>
 801eb32:	4630      	mov	r0, r6
 801eb34:	b003      	add	sp, #12
 801eb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb3a:	200b      	movs	r0, #11
 801eb3c:	4770      	bx	lr
 801eb3e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801eb42:	e794      	b.n	801ea6e <rcl_wait_set_resize+0x23a>
 801eb44:	6828      	ldr	r0, [r5, #0]
 801eb46:	4651      	mov	r1, sl
 801eb48:	9301      	str	r3, [sp, #4]
 801eb4a:	47d8      	blx	fp
 801eb4c:	9b01      	ldr	r3, [sp, #4]
 801eb4e:	200a      	movs	r0, #10
 801eb50:	e9c5 3300 	strd	r3, r3, [r5]
 801eb54:	e78b      	b.n	801ea6e <rcl_wait_set_resize+0x23a>
 801eb56:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801eb58:	68a8      	ldr	r0, [r5, #8]
 801eb5a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801eb5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801eb5e:	4798      	blx	r3
 801eb60:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801eb62:	6928      	ldr	r0, [r5, #16]
 801eb64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801eb66:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801eb68:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801eb6c:	4790      	blx	r2
 801eb6e:	200a      	movs	r0, #10
 801eb70:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801eb74:	e77b      	b.n	801ea6e <rcl_wait_set_resize+0x23a>
 801eb76:	69a8      	ldr	r0, [r5, #24]
 801eb78:	4649      	mov	r1, r9
 801eb7a:	47d0      	blx	sl
 801eb7c:	200a      	movs	r0, #10
 801eb7e:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801eb82:	e774      	b.n	801ea6e <rcl_wait_set_resize+0x23a>
 801eb84:	6a28      	ldr	r0, [r5, #32]
 801eb86:	4639      	mov	r1, r7
 801eb88:	47c0      	blx	r8
 801eb8a:	200a      	movs	r0, #10
 801eb8c:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801eb90:	e76d      	b.n	801ea6e <rcl_wait_set_resize+0x23a>
 801eb92:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801eb94:	4639      	mov	r1, r7
 801eb96:	9301      	str	r3, [sp, #4]
 801eb98:	47c0      	blx	r8
 801eb9a:	9b01      	ldr	r3, [sp, #4]
 801eb9c:	200a      	movs	r0, #10
 801eb9e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801eba2:	e764      	b.n	801ea6e <rcl_wait_set_resize+0x23a>

0801eba4 <rcl_wait_set_init>:
 801eba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eba8:	b085      	sub	sp, #20
 801ebaa:	4605      	mov	r5, r0
 801ebac:	460e      	mov	r6, r1
 801ebae:	4617      	mov	r7, r2
 801ebb0:	a812      	add	r0, sp, #72	@ 0x48
 801ebb2:	4698      	mov	r8, r3
 801ebb4:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 801ebb8:	f7fd ff5e 	bl	801ca78 <rcutils_allocator_is_valid>
 801ebbc:	2d00      	cmp	r5, #0
 801ebbe:	d072      	beq.n	801eca6 <rcl_wait_set_init+0x102>
 801ebc0:	f080 0001 	eor.w	r0, r0, #1
 801ebc4:	b2c0      	uxtb	r0, r0
 801ebc6:	2800      	cmp	r0, #0
 801ebc8:	d16d      	bne.n	801eca6 <rcl_wait_set_init+0x102>
 801ebca:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801ebce:	f1ba 0f00 	cmp.w	sl, #0
 801ebd2:	d004      	beq.n	801ebde <rcl_wait_set_init+0x3a>
 801ebd4:	2464      	movs	r4, #100	@ 0x64
 801ebd6:	4620      	mov	r0, r4
 801ebd8:	b005      	add	sp, #20
 801ebda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebde:	f1b9 0f00 	cmp.w	r9, #0
 801ebe2:	d060      	beq.n	801eca6 <rcl_wait_set_init+0x102>
 801ebe4:	4648      	mov	r0, r9
 801ebe6:	f7fe fae3 	bl	801d1b0 <rcl_context_is_valid>
 801ebea:	2800      	cmp	r0, #0
 801ebec:	d068      	beq.n	801ecc0 <rcl_wait_set_init+0x11c>
 801ebee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ebf0:	205c      	movs	r0, #92	@ 0x5c
 801ebf2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801ebf4:	4798      	blx	r3
 801ebf6:	6328      	str	r0, [r5, #48]	@ 0x30
 801ebf8:	2800      	cmp	r0, #0
 801ebfa:	d063      	beq.n	801ecc4 <rcl_wait_set_init+0x120>
 801ebfc:	225c      	movs	r2, #92	@ 0x5c
 801ebfe:	4651      	mov	r1, sl
 801ec00:	f00a fd10 	bl	8029624 <memset>
 801ec04:	ac12      	add	r4, sp, #72	@ 0x48
 801ec06:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 801ec0a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801ec0e:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 801ec12:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801ec16:	eb03 0e02 	add.w	lr, r3, r2
 801ec1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ec1c:	f8d9 9000 	ldr.w	r9, [r9]
 801ec20:	449e      	add	lr, r3
 801ec22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ec24:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801ec28:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801ec2c:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801ec30:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801ec34:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 801ec38:	44be      	add	lr, r7
 801ec3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ec3e:	6823      	ldr	r3, [r4, #0]
 801ec40:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801ec44:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 801ec48:	f8cc 3000 	str.w	r3, [ip]
 801ec4c:	f002 fdf8 	bl	8021840 <rmw_create_wait_set>
 801ec50:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ec52:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 801ec56:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801ec58:	b350      	cbz	r0, 801ecb0 <rcl_wait_set_init+0x10c>
 801ec5a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ec5c:	4643      	mov	r3, r8
 801ec5e:	463a      	mov	r2, r7
 801ec60:	4631      	mov	r1, r6
 801ec62:	9402      	str	r4, [sp, #8]
 801ec64:	4628      	mov	r0, r5
 801ec66:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ec68:	9401      	str	r4, [sp, #4]
 801ec6a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ec6c:	9400      	str	r4, [sp, #0]
 801ec6e:	f7ff fde1 	bl	801e834 <rcl_wait_set_resize>
 801ec72:	4604      	mov	r4, r0
 801ec74:	2800      	cmp	r0, #0
 801ec76:	d0ae      	beq.n	801ebd6 <rcl_wait_set_init+0x32>
 801ec78:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ec7a:	bb2b      	cbnz	r3, 801ecc8 <rcl_wait_set_init+0x124>
 801ec7c:	2600      	movs	r6, #0
 801ec7e:	4628      	mov	r0, r5
 801ec80:	4633      	mov	r3, r6
 801ec82:	4632      	mov	r2, r6
 801ec84:	4631      	mov	r1, r6
 801ec86:	9600      	str	r6, [sp, #0]
 801ec88:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801ec8c:	f7ff fdd2 	bl	801e834 <rcl_wait_set_resize>
 801ec90:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801ec92:	2800      	cmp	r0, #0
 801ec94:	d09f      	beq.n	801ebd6 <rcl_wait_set_init+0x32>
 801ec96:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801ec98:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801ec9a:	4798      	blx	r3
 801ec9c:	4620      	mov	r0, r4
 801ec9e:	632e      	str	r6, [r5, #48]	@ 0x30
 801eca0:	b005      	add	sp, #20
 801eca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eca6:	240b      	movs	r4, #11
 801eca8:	4620      	mov	r0, r4
 801ecaa:	b005      	add	sp, #20
 801ecac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecb0:	2401      	movs	r4, #1
 801ecb2:	f002 fdcf 	bl	8021854 <rmw_destroy_wait_set>
 801ecb6:	2800      	cmp	r0, #0
 801ecb8:	bf18      	it	ne
 801ecba:	f44f 7461 	movne.w	r4, #900	@ 0x384
 801ecbe:	e7dd      	b.n	801ec7c <rcl_wait_set_init+0xd8>
 801ecc0:	2465      	movs	r4, #101	@ 0x65
 801ecc2:	e788      	b.n	801ebd6 <rcl_wait_set_init+0x32>
 801ecc4:	240a      	movs	r4, #10
 801ecc6:	e786      	b.n	801ebd6 <rcl_wait_set_init+0x32>
 801ecc8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801ecca:	e7f2      	b.n	801ecb2 <rcl_wait_set_init+0x10e>

0801eccc <rcl_wait_set_add_guard_condition>:
 801eccc:	b318      	cbz	r0, 801ed16 <rcl_wait_set_add_guard_condition+0x4a>
 801ecce:	b538      	push	{r3, r4, r5, lr}
 801ecd0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ecd2:	4604      	mov	r4, r0
 801ecd4:	b30b      	cbz	r3, 801ed1a <rcl_wait_set_add_guard_condition+0x4e>
 801ecd6:	b319      	cbz	r1, 801ed20 <rcl_wait_set_add_guard_condition+0x54>
 801ecd8:	68dd      	ldr	r5, [r3, #12]
 801ecda:	68c0      	ldr	r0, [r0, #12]
 801ecdc:	4285      	cmp	r5, r0
 801ecde:	d217      	bcs.n	801ed10 <rcl_wait_set_add_guard_condition+0x44>
 801ece0:	1c68      	adds	r0, r5, #1
 801ece2:	60d8      	str	r0, [r3, #12]
 801ece4:	68a3      	ldr	r3, [r4, #8]
 801ece6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801ecea:	b102      	cbz	r2, 801ecee <rcl_wait_set_add_guard_condition+0x22>
 801ecec:	6015      	str	r5, [r2, #0]
 801ecee:	4608      	mov	r0, r1
 801ecf0:	f008 f88e 	bl	8026e10 <rcl_guard_condition_get_rmw_handle>
 801ecf4:	b150      	cbz	r0, 801ed0c <rcl_wait_set_add_guard_condition+0x40>
 801ecf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ecf8:	6842      	ldr	r2, [r0, #4]
 801ecfa:	2000      	movs	r0, #0
 801ecfc:	695b      	ldr	r3, [r3, #20]
 801ecfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ed02:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801ed04:	6913      	ldr	r3, [r2, #16]
 801ed06:	3301      	adds	r3, #1
 801ed08:	6113      	str	r3, [r2, #16]
 801ed0a:	bd38      	pop	{r3, r4, r5, pc}
 801ed0c:	2001      	movs	r0, #1
 801ed0e:	bd38      	pop	{r3, r4, r5, pc}
 801ed10:	f240 3086 	movw	r0, #902	@ 0x386
 801ed14:	bd38      	pop	{r3, r4, r5, pc}
 801ed16:	200b      	movs	r0, #11
 801ed18:	4770      	bx	lr
 801ed1a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ed1e:	bd38      	pop	{r3, r4, r5, pc}
 801ed20:	200b      	movs	r0, #11
 801ed22:	bd38      	pop	{r3, r4, r5, pc}

0801ed24 <rcl_wait_set_add_timer>:
 801ed24:	b328      	cbz	r0, 801ed72 <rcl_wait_set_add_timer+0x4e>
 801ed26:	b538      	push	{r3, r4, r5, lr}
 801ed28:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ed2a:	4604      	mov	r4, r0
 801ed2c:	b31b      	cbz	r3, 801ed76 <rcl_wait_set_add_timer+0x52>
 801ed2e:	b329      	cbz	r1, 801ed7c <rcl_wait_set_add_timer+0x58>
 801ed30:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801ed32:	6965      	ldr	r5, [r4, #20]
 801ed34:	42a8      	cmp	r0, r5
 801ed36:	d219      	bcs.n	801ed6c <rcl_wait_set_add_timer+0x48>
 801ed38:	1c45      	adds	r5, r0, #1
 801ed3a:	641d      	str	r5, [r3, #64]	@ 0x40
 801ed3c:	6923      	ldr	r3, [r4, #16]
 801ed3e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801ed42:	b102      	cbz	r2, 801ed46 <rcl_wait_set_add_timer+0x22>
 801ed44:	6010      	str	r0, [r2, #0]
 801ed46:	4608      	mov	r0, r1
 801ed48:	f7ff fb9a 	bl	801e480 <rcl_timer_get_guard_condition>
 801ed4c:	b168      	cbz	r0, 801ed6a <rcl_wait_set_add_timer+0x46>
 801ed4e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801ed50:	68e3      	ldr	r3, [r4, #12]
 801ed52:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801ed54:	3b01      	subs	r3, #1
 801ed56:	441d      	add	r5, r3
 801ed58:	f008 f85a 	bl	8026e10 <rcl_guard_condition_get_rmw_handle>
 801ed5c:	b180      	cbz	r0, 801ed80 <rcl_wait_set_add_timer+0x5c>
 801ed5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ed60:	6842      	ldr	r2, [r0, #4]
 801ed62:	2000      	movs	r0, #0
 801ed64:	695b      	ldr	r3, [r3, #20]
 801ed66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ed6a:	bd38      	pop	{r3, r4, r5, pc}
 801ed6c:	f240 3086 	movw	r0, #902	@ 0x386
 801ed70:	bd38      	pop	{r3, r4, r5, pc}
 801ed72:	200b      	movs	r0, #11
 801ed74:	4770      	bx	lr
 801ed76:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ed7a:	bd38      	pop	{r3, r4, r5, pc}
 801ed7c:	200b      	movs	r0, #11
 801ed7e:	bd38      	pop	{r3, r4, r5, pc}
 801ed80:	2001      	movs	r0, #1
 801ed82:	bd38      	pop	{r3, r4, r5, pc}

0801ed84 <rcl_wait_set_add_client>:
 801ed84:	b318      	cbz	r0, 801edce <rcl_wait_set_add_client+0x4a>
 801ed86:	b538      	push	{r3, r4, r5, lr}
 801ed88:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ed8a:	4604      	mov	r4, r0
 801ed8c:	b30b      	cbz	r3, 801edd2 <rcl_wait_set_add_client+0x4e>
 801ed8e:	b319      	cbz	r1, 801edd8 <rcl_wait_set_add_client+0x54>
 801ed90:	699d      	ldr	r5, [r3, #24]
 801ed92:	69c0      	ldr	r0, [r0, #28]
 801ed94:	4285      	cmp	r5, r0
 801ed96:	d217      	bcs.n	801edc8 <rcl_wait_set_add_client+0x44>
 801ed98:	1c68      	adds	r0, r5, #1
 801ed9a:	6198      	str	r0, [r3, #24]
 801ed9c:	69a3      	ldr	r3, [r4, #24]
 801ed9e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801eda2:	b102      	cbz	r2, 801eda6 <rcl_wait_set_add_client+0x22>
 801eda4:	6015      	str	r5, [r2, #0]
 801eda6:	4608      	mov	r0, r1
 801eda8:	f7fe f968 	bl	801d07c <rcl_client_get_rmw_handle>
 801edac:	b150      	cbz	r0, 801edc4 <rcl_wait_set_add_client+0x40>
 801edae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801edb0:	6842      	ldr	r2, [r0, #4]
 801edb2:	2000      	movs	r0, #0
 801edb4:	6a1b      	ldr	r3, [r3, #32]
 801edb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801edba:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801edbc:	69d3      	ldr	r3, [r2, #28]
 801edbe:	3301      	adds	r3, #1
 801edc0:	61d3      	str	r3, [r2, #28]
 801edc2:	bd38      	pop	{r3, r4, r5, pc}
 801edc4:	2001      	movs	r0, #1
 801edc6:	bd38      	pop	{r3, r4, r5, pc}
 801edc8:	f240 3086 	movw	r0, #902	@ 0x386
 801edcc:	bd38      	pop	{r3, r4, r5, pc}
 801edce:	200b      	movs	r0, #11
 801edd0:	4770      	bx	lr
 801edd2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801edd6:	bd38      	pop	{r3, r4, r5, pc}
 801edd8:	200b      	movs	r0, #11
 801edda:	bd38      	pop	{r3, r4, r5, pc}

0801eddc <rcl_wait_set_add_service>:
 801eddc:	b318      	cbz	r0, 801ee26 <rcl_wait_set_add_service+0x4a>
 801edde:	b538      	push	{r3, r4, r5, lr}
 801ede0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ede2:	4604      	mov	r4, r0
 801ede4:	b30b      	cbz	r3, 801ee2a <rcl_wait_set_add_service+0x4e>
 801ede6:	b319      	cbz	r1, 801ee30 <rcl_wait_set_add_service+0x54>
 801ede8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801edea:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801edec:	4285      	cmp	r5, r0
 801edee:	d217      	bcs.n	801ee20 <rcl_wait_set_add_service+0x44>
 801edf0:	1c68      	adds	r0, r5, #1
 801edf2:	6258      	str	r0, [r3, #36]	@ 0x24
 801edf4:	6a23      	ldr	r3, [r4, #32]
 801edf6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801edfa:	b102      	cbz	r2, 801edfe <rcl_wait_set_add_service+0x22>
 801edfc:	6015      	str	r5, [r2, #0]
 801edfe:	4608      	mov	r0, r1
 801ee00:	f7fe ffe2 	bl	801ddc8 <rcl_service_get_rmw_handle>
 801ee04:	b150      	cbz	r0, 801ee1c <rcl_wait_set_add_service+0x40>
 801ee06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ee08:	6842      	ldr	r2, [r0, #4]
 801ee0a:	2000      	movs	r0, #0
 801ee0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ee12:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801ee14:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801ee16:	3301      	adds	r3, #1
 801ee18:	6293      	str	r3, [r2, #40]	@ 0x28
 801ee1a:	bd38      	pop	{r3, r4, r5, pc}
 801ee1c:	2001      	movs	r0, #1
 801ee1e:	bd38      	pop	{r3, r4, r5, pc}
 801ee20:	f240 3086 	movw	r0, #902	@ 0x386
 801ee24:	bd38      	pop	{r3, r4, r5, pc}
 801ee26:	200b      	movs	r0, #11
 801ee28:	4770      	bx	lr
 801ee2a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ee2e:	bd38      	pop	{r3, r4, r5, pc}
 801ee30:	200b      	movs	r0, #11
 801ee32:	bd38      	pop	{r3, r4, r5, pc}
 801ee34:	0000      	movs	r0, r0
	...

0801ee38 <rcl_wait>:
 801ee38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee3c:	ed2d 8b02 	vpush	{d8}
 801ee40:	b08d      	sub	sp, #52	@ 0x34
 801ee42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ee46:	2800      	cmp	r0, #0
 801ee48:	f000 814f 	beq.w	801f0ea <rcl_wait+0x2b2>
 801ee4c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801ee4e:	4605      	mov	r5, r0
 801ee50:	2e00      	cmp	r6, #0
 801ee52:	f000 811a 	beq.w	801f08a <rcl_wait+0x252>
 801ee56:	6843      	ldr	r3, [r0, #4]
 801ee58:	b983      	cbnz	r3, 801ee7c <rcl_wait+0x44>
 801ee5a:	68eb      	ldr	r3, [r5, #12]
 801ee5c:	b973      	cbnz	r3, 801ee7c <rcl_wait+0x44>
 801ee5e:	696b      	ldr	r3, [r5, #20]
 801ee60:	b963      	cbnz	r3, 801ee7c <rcl_wait+0x44>
 801ee62:	69eb      	ldr	r3, [r5, #28]
 801ee64:	b953      	cbnz	r3, 801ee7c <rcl_wait+0x44>
 801ee66:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801ee68:	b943      	cbnz	r3, 801ee7c <rcl_wait+0x44>
 801ee6a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801ee6c:	b933      	cbnz	r3, 801ee7c <rcl_wait+0x44>
 801ee6e:	f240 3085 	movw	r0, #901	@ 0x385
 801ee72:	b00d      	add	sp, #52	@ 0x34
 801ee74:	ecbd 8b02 	vpop	{d8}
 801ee78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee7c:	9b04      	ldr	r3, [sp, #16]
 801ee7e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801ee80:	2b01      	cmp	r3, #1
 801ee82:	9b05      	ldr	r3, [sp, #20]
 801ee84:	f173 0300 	sbcs.w	r3, r3, #0
 801ee88:	f2c0 80f8 	blt.w	801f07c <rcl_wait+0x244>
 801ee8c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801ee90:	2a00      	cmp	r2, #0
 801ee92:	f000 810f 	beq.w	801f0b4 <rcl_wait+0x27c>
 801ee96:	2400      	movs	r4, #0
 801ee98:	4613      	mov	r3, r2
 801ee9a:	f240 3921 	movw	r9, #801	@ 0x321
 801ee9e:	4632      	mov	r2, r6
 801eea0:	46a2      	mov	sl, r4
 801eea2:	46a3      	mov	fp, r4
 801eea4:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 801f108 <rcl_wait+0x2d0>
 801eea8:	e014      	b.n	801eed4 <rcl_wait+0x9c>
 801eeaa:	2800      	cmp	r0, #0
 801eeac:	d1e1      	bne.n	801ee72 <rcl_wait+0x3a>
 801eeae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801eeb2:	4542      	cmp	r2, r8
 801eeb4:	eb73 0107 	sbcs.w	r1, r3, r7
 801eeb8:	da03      	bge.n	801eec2 <rcl_wait+0x8a>
 801eeba:	4690      	mov	r8, r2
 801eebc:	461f      	mov	r7, r3
 801eebe:	f04f 0b01 	mov.w	fp, #1
 801eec2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801eec4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801eec6:	3401      	adds	r4, #1
 801eec8:	f14a 0a00 	adc.w	sl, sl, #0
 801eecc:	429c      	cmp	r4, r3
 801eece:	f17a 0100 	sbcs.w	r1, sl, #0
 801eed2:	d228      	bcs.n	801ef26 <rcl_wait+0xee>
 801eed4:	6928      	ldr	r0, [r5, #16]
 801eed6:	a908      	add	r1, sp, #32
 801eed8:	00a6      	lsls	r6, r4, #2
 801eeda:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801eede:	2800      	cmp	r0, #0
 801eee0:	d0f1      	beq.n	801eec6 <rcl_wait+0x8e>
 801eee2:	68eb      	ldr	r3, [r5, #12]
 801eee4:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801eee8:	4423      	add	r3, r4
 801eeea:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801eeee:	f1be 0f00 	cmp.w	lr, #0
 801eef2:	d006      	beq.n	801ef02 <rcl_wait+0xca>
 801eef4:	6913      	ldr	r3, [r2, #16]
 801eef6:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801eefa:	3301      	adds	r3, #1
 801eefc:	6113      	str	r3, [r2, #16]
 801eefe:	692b      	ldr	r3, [r5, #16]
 801ef00:	5998      	ldr	r0, [r3, r6]
 801ef02:	ed8d 8b08 	vstr	d8, [sp, #32]
 801ef06:	f7ff fa89 	bl	801e41c <rcl_timer_get_time_until_next_call>
 801ef0a:	4548      	cmp	r0, r9
 801ef0c:	d1cd      	bne.n	801eeaa <rcl_wait+0x72>
 801ef0e:	692b      	ldr	r3, [r5, #16]
 801ef10:	2200      	movs	r2, #0
 801ef12:	3401      	adds	r4, #1
 801ef14:	519a      	str	r2, [r3, r6]
 801ef16:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801ef18:	f14a 0a00 	adc.w	sl, sl, #0
 801ef1c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801ef1e:	429c      	cmp	r4, r3
 801ef20:	f17a 0100 	sbcs.w	r1, sl, #0
 801ef24:	d3d6      	bcc.n	801eed4 <rcl_wait+0x9c>
 801ef26:	4659      	mov	r1, fp
 801ef28:	4616      	mov	r6, r2
 801ef2a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801ef2e:	4313      	orrs	r3, r2
 801ef30:	f040 80b4 	bne.w	801f09c <rcl_wait+0x264>
 801ef34:	2300      	movs	r3, #0
 801ef36:	2200      	movs	r2, #0
 801ef38:	460c      	mov	r4, r1
 801ef3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ef3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801ef42:	ab08      	add	r3, sp, #32
 801ef44:	9302      	str	r3, [sp, #8]
 801ef46:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801ef4a:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 801ef4c:	f106 0110 	add.w	r1, r6, #16
 801ef50:	9300      	str	r3, [sp, #0]
 801ef52:	1d30      	adds	r0, r6, #4
 801ef54:	f106 031c 	add.w	r3, r6, #28
 801ef58:	9201      	str	r2, [sp, #4]
 801ef5a:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801ef5e:	f002 fb0b 	bl	8021578 <rmw_wait>
 801ef62:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ef64:	4680      	mov	r8, r0
 801ef66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ef68:	b1e2      	cbz	r2, 801efa4 <rcl_wait+0x16c>
 801ef6a:	f04f 0900 	mov.w	r9, #0
 801ef6e:	464f      	mov	r7, r9
 801ef70:	692a      	ldr	r2, [r5, #16]
 801ef72:	f10d 011f 	add.w	r1, sp, #31
 801ef76:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801ef7a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801ef7e:	b160      	cbz	r0, 801ef9a <rcl_wait+0x162>
 801ef80:	f88d 701f 	strb.w	r7, [sp, #31]
 801ef84:	f7ff fa0e 	bl	801e3a4 <rcl_timer_is_ready>
 801ef88:	2800      	cmp	r0, #0
 801ef8a:	f47f af72 	bne.w	801ee72 <rcl_wait+0x3a>
 801ef8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801ef92:	b90b      	cbnz	r3, 801ef98 <rcl_wait+0x160>
 801ef94:	692a      	ldr	r2, [r5, #16]
 801ef96:	5193      	str	r3, [r2, r6]
 801ef98:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ef9a:	f109 0901 	add.w	r9, r9, #1
 801ef9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801efa0:	454a      	cmp	r2, r9
 801efa2:	d8e5      	bhi.n	801ef70 <rcl_wait+0x138>
 801efa4:	f038 0002 	bics.w	r0, r8, #2
 801efa8:	d176      	bne.n	801f098 <rcl_wait+0x260>
 801efaa:	686f      	ldr	r7, [r5, #4]
 801efac:	b17f      	cbz	r7, 801efce <rcl_wait+0x196>
 801efae:	4602      	mov	r2, r0
 801efb0:	e002      	b.n	801efb8 <rcl_wait+0x180>
 801efb2:	3201      	adds	r2, #1
 801efb4:	42ba      	cmp	r2, r7
 801efb6:	d00a      	beq.n	801efce <rcl_wait+0x196>
 801efb8:	6899      	ldr	r1, [r3, #8]
 801efba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801efbe:	2900      	cmp	r1, #0
 801efc0:	d1f7      	bne.n	801efb2 <rcl_wait+0x17a>
 801efc2:	682e      	ldr	r6, [r5, #0]
 801efc4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801efc8:	3201      	adds	r2, #1
 801efca:	42ba      	cmp	r2, r7
 801efcc:	d1f4      	bne.n	801efb8 <rcl_wait+0x180>
 801efce:	68ef      	ldr	r7, [r5, #12]
 801efd0:	b17f      	cbz	r7, 801eff2 <rcl_wait+0x1ba>
 801efd2:	2200      	movs	r2, #0
 801efd4:	e002      	b.n	801efdc <rcl_wait+0x1a4>
 801efd6:	3201      	adds	r2, #1
 801efd8:	42ba      	cmp	r2, r7
 801efda:	d00a      	beq.n	801eff2 <rcl_wait+0x1ba>
 801efdc:	6959      	ldr	r1, [r3, #20]
 801efde:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801efe2:	2900      	cmp	r1, #0
 801efe4:	d1f7      	bne.n	801efd6 <rcl_wait+0x19e>
 801efe6:	68ae      	ldr	r6, [r5, #8]
 801efe8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801efec:	3201      	adds	r2, #1
 801efee:	42ba      	cmp	r2, r7
 801eff0:	d1f4      	bne.n	801efdc <rcl_wait+0x1a4>
 801eff2:	69ef      	ldr	r7, [r5, #28]
 801eff4:	b17f      	cbz	r7, 801f016 <rcl_wait+0x1de>
 801eff6:	2200      	movs	r2, #0
 801eff8:	e002      	b.n	801f000 <rcl_wait+0x1c8>
 801effa:	3201      	adds	r2, #1
 801effc:	42ba      	cmp	r2, r7
 801effe:	d00a      	beq.n	801f016 <rcl_wait+0x1de>
 801f000:	6a19      	ldr	r1, [r3, #32]
 801f002:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801f006:	2900      	cmp	r1, #0
 801f008:	d1f7      	bne.n	801effa <rcl_wait+0x1c2>
 801f00a:	69ae      	ldr	r6, [r5, #24]
 801f00c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801f010:	3201      	adds	r2, #1
 801f012:	42ba      	cmp	r2, r7
 801f014:	d1f4      	bne.n	801f000 <rcl_wait+0x1c8>
 801f016:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 801f018:	b17f      	cbz	r7, 801f03a <rcl_wait+0x202>
 801f01a:	2200      	movs	r2, #0
 801f01c:	e002      	b.n	801f024 <rcl_wait+0x1ec>
 801f01e:	3201      	adds	r2, #1
 801f020:	42ba      	cmp	r2, r7
 801f022:	d00a      	beq.n	801f03a <rcl_wait+0x202>
 801f024:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801f026:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801f02a:	2900      	cmp	r1, #0
 801f02c:	d1f7      	bne.n	801f01e <rcl_wait+0x1e6>
 801f02e:	6a2e      	ldr	r6, [r5, #32]
 801f030:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801f034:	3201      	adds	r2, #1
 801f036:	42ba      	cmp	r2, r7
 801f038:	d1f4      	bne.n	801f024 <rcl_wait+0x1ec>
 801f03a:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 801f03c:	b17f      	cbz	r7, 801f05e <rcl_wait+0x226>
 801f03e:	2200      	movs	r2, #0
 801f040:	e002      	b.n	801f048 <rcl_wait+0x210>
 801f042:	3201      	adds	r2, #1
 801f044:	42ba      	cmp	r2, r7
 801f046:	d00a      	beq.n	801f05e <rcl_wait+0x226>
 801f048:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801f04a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801f04e:	2900      	cmp	r1, #0
 801f050:	d1f7      	bne.n	801f042 <rcl_wait+0x20a>
 801f052:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 801f054:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801f058:	3201      	adds	r2, #1
 801f05a:	42ba      	cmp	r2, r7
 801f05c:	d1f4      	bne.n	801f048 <rcl_wait+0x210>
 801f05e:	f1b8 0f02 	cmp.w	r8, #2
 801f062:	f47f af06 	bne.w	801ee72 <rcl_wait+0x3a>
 801f066:	f084 0301 	eor.w	r3, r4, #1
 801f06a:	b2db      	uxtb	r3, r3
 801f06c:	2b00      	cmp	r3, #0
 801f06e:	bf18      	it	ne
 801f070:	2002      	movne	r0, #2
 801f072:	b00d      	add	sp, #52	@ 0x34
 801f074:	ecbd 8b02 	vpop	{d8}
 801f078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f07c:	2a00      	cmp	r2, #0
 801f07e:	d03a      	beq.n	801f0f6 <rcl_wait+0x2be>
 801f080:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801f084:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801f088:	e705      	b.n	801ee96 <rcl_wait+0x5e>
 801f08a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801f08e:	b00d      	add	sp, #52	@ 0x34
 801f090:	ecbd 8b02 	vpop	{d8}
 801f094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f098:	2001      	movs	r0, #1
 801f09a:	e6ea      	b.n	801ee72 <rcl_wait+0x3a>
 801f09c:	9b04      	ldr	r3, [sp, #16]
 801f09e:	460c      	mov	r4, r1
 801f0a0:	2b01      	cmp	r3, #1
 801f0a2:	9b05      	ldr	r3, [sp, #20]
 801f0a4:	f173 0300 	sbcs.w	r3, r3, #0
 801f0a8:	bfa8      	it	ge
 801f0aa:	f044 0401 	orrge.w	r4, r4, #1
 801f0ae:	b914      	cbnz	r4, 801f0b6 <rcl_wait+0x27e>
 801f0b0:	4623      	mov	r3, r4
 801f0b2:	e747      	b.n	801ef44 <rcl_wait+0x10c>
 801f0b4:	4611      	mov	r1, r2
 801f0b6:	2f00      	cmp	r7, #0
 801f0b8:	da02      	bge.n	801f0c0 <rcl_wait+0x288>
 801f0ba:	f04f 0800 	mov.w	r8, #0
 801f0be:	4647      	mov	r7, r8
 801f0c0:	460c      	mov	r4, r1
 801f0c2:	4640      	mov	r0, r8
 801f0c4:	4639      	mov	r1, r7
 801f0c6:	a312      	add	r3, pc, #72	@ (adr r3, 801f110 <rcl_wait+0x2d8>)
 801f0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0cc:	f7e1 fd9c 	bl	8000c08 <__aeabi_ldivmod>
 801f0d0:	a30f      	add	r3, pc, #60	@ (adr r3, 801f110 <rcl_wait+0x2d8>)
 801f0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f0da:	4640      	mov	r0, r8
 801f0dc:	4639      	mov	r1, r7
 801f0de:	f7e1 fd93 	bl	8000c08 <__aeabi_ldivmod>
 801f0e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801f0e6:	ab08      	add	r3, sp, #32
 801f0e8:	e72c      	b.n	801ef44 <rcl_wait+0x10c>
 801f0ea:	200b      	movs	r0, #11
 801f0ec:	b00d      	add	sp, #52	@ 0x34
 801f0ee:	ecbd 8b02 	vpop	{d8}
 801f0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0f6:	4611      	mov	r1, r2
 801f0f8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801f0fc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801f100:	e713      	b.n	801ef2a <rcl_wait+0xf2>
 801f102:	bf00      	nop
 801f104:	f3af 8000 	nop.w
 801f108:	ffffffff 	.word	0xffffffff
 801f10c:	7fffffff 	.word	0x7fffffff
 801f110:	3b9aca00 	.word	0x3b9aca00
 801f114:	00000000 	.word	0x00000000

0801f118 <rcl_action_take_goal_response>:
 801f118:	2800      	cmp	r0, #0
 801f11a:	d039      	beq.n	801f190 <rcl_action_take_goal_response+0x78>
 801f11c:	b570      	push	{r4, r5, r6, lr}
 801f11e:	4604      	mov	r4, r0
 801f120:	6800      	ldr	r0, [r0, #0]
 801f122:	b380      	cbz	r0, 801f186 <rcl_action_take_goal_response+0x6e>
 801f124:	460e      	mov	r6, r1
 801f126:	4615      	mov	r5, r2
 801f128:	f7fe f82e 	bl	801d188 <rcl_client_is_valid>
 801f12c:	b330      	cbz	r0, 801f17c <rcl_action_take_goal_response+0x64>
 801f12e:	6820      	ldr	r0, [r4, #0]
 801f130:	3004      	adds	r0, #4
 801f132:	f7fe f829 	bl	801d188 <rcl_client_is_valid>
 801f136:	b308      	cbz	r0, 801f17c <rcl_action_take_goal_response+0x64>
 801f138:	6820      	ldr	r0, [r4, #0]
 801f13a:	3008      	adds	r0, #8
 801f13c:	f7fe f824 	bl	801d188 <rcl_client_is_valid>
 801f140:	b1e0      	cbz	r0, 801f17c <rcl_action_take_goal_response+0x64>
 801f142:	6820      	ldr	r0, [r4, #0]
 801f144:	300c      	adds	r0, #12
 801f146:	f7fe ffe5 	bl	801e114 <rcl_subscription_is_valid>
 801f14a:	b1b8      	cbz	r0, 801f17c <rcl_action_take_goal_response+0x64>
 801f14c:	6820      	ldr	r0, [r4, #0]
 801f14e:	3010      	adds	r0, #16
 801f150:	f7fe ffe0 	bl	801e114 <rcl_subscription_is_valid>
 801f154:	b190      	cbz	r0, 801f17c <rcl_action_take_goal_response+0x64>
 801f156:	b1cd      	cbz	r5, 801f18c <rcl_action_take_goal_response+0x74>
 801f158:	b1c6      	cbz	r6, 801f18c <rcl_action_take_goal_response+0x74>
 801f15a:	462a      	mov	r2, r5
 801f15c:	4631      	mov	r1, r6
 801f15e:	6820      	ldr	r0, [r4, #0]
 801f160:	f7fd ffca 	bl	801d0f8 <rcl_take_response>
 801f164:	b148      	cbz	r0, 801f17a <rcl_action_take_goal_response+0x62>
 801f166:	280a      	cmp	r0, #10
 801f168:	d007      	beq.n	801f17a <rcl_action_take_goal_response+0x62>
 801f16a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801f16e:	f640 0337 	movw	r3, #2103	@ 0x837
 801f172:	4290      	cmp	r0, r2
 801f174:	bf0c      	ite	eq
 801f176:	4618      	moveq	r0, r3
 801f178:	2001      	movne	r0, #1
 801f17a:	bd70      	pop	{r4, r5, r6, pc}
 801f17c:	f7fd fca0 	bl	801cac0 <rcutils_reset_error>
 801f180:	f640 0036 	movw	r0, #2102	@ 0x836
 801f184:	bd70      	pop	{r4, r5, r6, pc}
 801f186:	f640 0036 	movw	r0, #2102	@ 0x836
 801f18a:	bd70      	pop	{r4, r5, r6, pc}
 801f18c:	200b      	movs	r0, #11
 801f18e:	bd70      	pop	{r4, r5, r6, pc}
 801f190:	f640 0036 	movw	r0, #2102	@ 0x836
 801f194:	4770      	bx	lr
 801f196:	bf00      	nop

0801f198 <rcl_action_send_result_request>:
 801f198:	b390      	cbz	r0, 801f200 <rcl_action_send_result_request+0x68>
 801f19a:	b570      	push	{r4, r5, r6, lr}
 801f19c:	4604      	mov	r4, r0
 801f19e:	6800      	ldr	r0, [r0, #0]
 801f1a0:	b348      	cbz	r0, 801f1f6 <rcl_action_send_result_request+0x5e>
 801f1a2:	460e      	mov	r6, r1
 801f1a4:	4615      	mov	r5, r2
 801f1a6:	f7fd ffef 	bl	801d188 <rcl_client_is_valid>
 801f1aa:	b1f8      	cbz	r0, 801f1ec <rcl_action_send_result_request+0x54>
 801f1ac:	6820      	ldr	r0, [r4, #0]
 801f1ae:	3004      	adds	r0, #4
 801f1b0:	f7fd ffea 	bl	801d188 <rcl_client_is_valid>
 801f1b4:	b1d0      	cbz	r0, 801f1ec <rcl_action_send_result_request+0x54>
 801f1b6:	6820      	ldr	r0, [r4, #0]
 801f1b8:	3008      	adds	r0, #8
 801f1ba:	f7fd ffe5 	bl	801d188 <rcl_client_is_valid>
 801f1be:	b1a8      	cbz	r0, 801f1ec <rcl_action_send_result_request+0x54>
 801f1c0:	6820      	ldr	r0, [r4, #0]
 801f1c2:	300c      	adds	r0, #12
 801f1c4:	f7fe ffa6 	bl	801e114 <rcl_subscription_is_valid>
 801f1c8:	b180      	cbz	r0, 801f1ec <rcl_action_send_result_request+0x54>
 801f1ca:	6820      	ldr	r0, [r4, #0]
 801f1cc:	3010      	adds	r0, #16
 801f1ce:	f7fe ffa1 	bl	801e114 <rcl_subscription_is_valid>
 801f1d2:	b158      	cbz	r0, 801f1ec <rcl_action_send_result_request+0x54>
 801f1d4:	b195      	cbz	r5, 801f1fc <rcl_action_send_result_request+0x64>
 801f1d6:	b18e      	cbz	r6, 801f1fc <rcl_action_send_result_request+0x64>
 801f1d8:	6820      	ldr	r0, [r4, #0]
 801f1da:	462a      	mov	r2, r5
 801f1dc:	4631      	mov	r1, r6
 801f1de:	3008      	adds	r0, #8
 801f1e0:	f7fd ff52 	bl	801d088 <rcl_send_request>
 801f1e4:	3800      	subs	r0, #0
 801f1e6:	bf18      	it	ne
 801f1e8:	2001      	movne	r0, #1
 801f1ea:	bd70      	pop	{r4, r5, r6, pc}
 801f1ec:	f7fd fc68 	bl	801cac0 <rcutils_reset_error>
 801f1f0:	f640 0036 	movw	r0, #2102	@ 0x836
 801f1f4:	bd70      	pop	{r4, r5, r6, pc}
 801f1f6:	f640 0036 	movw	r0, #2102	@ 0x836
 801f1fa:	bd70      	pop	{r4, r5, r6, pc}
 801f1fc:	200b      	movs	r0, #11
 801f1fe:	bd70      	pop	{r4, r5, r6, pc}
 801f200:	f640 0036 	movw	r0, #2102	@ 0x836
 801f204:	4770      	bx	lr
 801f206:	bf00      	nop

0801f208 <rcl_action_take_result_response>:
 801f208:	2800      	cmp	r0, #0
 801f20a:	d03a      	beq.n	801f282 <rcl_action_take_result_response+0x7a>
 801f20c:	b570      	push	{r4, r5, r6, lr}
 801f20e:	4604      	mov	r4, r0
 801f210:	6800      	ldr	r0, [r0, #0]
 801f212:	b388      	cbz	r0, 801f278 <rcl_action_take_result_response+0x70>
 801f214:	460e      	mov	r6, r1
 801f216:	4615      	mov	r5, r2
 801f218:	f7fd ffb6 	bl	801d188 <rcl_client_is_valid>
 801f21c:	b338      	cbz	r0, 801f26e <rcl_action_take_result_response+0x66>
 801f21e:	6820      	ldr	r0, [r4, #0]
 801f220:	3004      	adds	r0, #4
 801f222:	f7fd ffb1 	bl	801d188 <rcl_client_is_valid>
 801f226:	b310      	cbz	r0, 801f26e <rcl_action_take_result_response+0x66>
 801f228:	6820      	ldr	r0, [r4, #0]
 801f22a:	3008      	adds	r0, #8
 801f22c:	f7fd ffac 	bl	801d188 <rcl_client_is_valid>
 801f230:	b1e8      	cbz	r0, 801f26e <rcl_action_take_result_response+0x66>
 801f232:	6820      	ldr	r0, [r4, #0]
 801f234:	300c      	adds	r0, #12
 801f236:	f7fe ff6d 	bl	801e114 <rcl_subscription_is_valid>
 801f23a:	b1c0      	cbz	r0, 801f26e <rcl_action_take_result_response+0x66>
 801f23c:	6820      	ldr	r0, [r4, #0]
 801f23e:	3010      	adds	r0, #16
 801f240:	f7fe ff68 	bl	801e114 <rcl_subscription_is_valid>
 801f244:	b198      	cbz	r0, 801f26e <rcl_action_take_result_response+0x66>
 801f246:	b1d5      	cbz	r5, 801f27e <rcl_action_take_result_response+0x76>
 801f248:	b1ce      	cbz	r6, 801f27e <rcl_action_take_result_response+0x76>
 801f24a:	6820      	ldr	r0, [r4, #0]
 801f24c:	462a      	mov	r2, r5
 801f24e:	4631      	mov	r1, r6
 801f250:	3008      	adds	r0, #8
 801f252:	f7fd ff51 	bl	801d0f8 <rcl_take_response>
 801f256:	b148      	cbz	r0, 801f26c <rcl_action_take_result_response+0x64>
 801f258:	280a      	cmp	r0, #10
 801f25a:	d007      	beq.n	801f26c <rcl_action_take_result_response+0x64>
 801f25c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801f260:	f640 0337 	movw	r3, #2103	@ 0x837
 801f264:	4290      	cmp	r0, r2
 801f266:	bf0c      	ite	eq
 801f268:	4618      	moveq	r0, r3
 801f26a:	2001      	movne	r0, #1
 801f26c:	bd70      	pop	{r4, r5, r6, pc}
 801f26e:	f7fd fc27 	bl	801cac0 <rcutils_reset_error>
 801f272:	f640 0036 	movw	r0, #2102	@ 0x836
 801f276:	bd70      	pop	{r4, r5, r6, pc}
 801f278:	f640 0036 	movw	r0, #2102	@ 0x836
 801f27c:	bd70      	pop	{r4, r5, r6, pc}
 801f27e:	200b      	movs	r0, #11
 801f280:	bd70      	pop	{r4, r5, r6, pc}
 801f282:	f640 0036 	movw	r0, #2102	@ 0x836
 801f286:	4770      	bx	lr

0801f288 <rcl_action_take_cancel_response>:
 801f288:	2800      	cmp	r0, #0
 801f28a:	d03a      	beq.n	801f302 <rcl_action_take_cancel_response+0x7a>
 801f28c:	b570      	push	{r4, r5, r6, lr}
 801f28e:	4604      	mov	r4, r0
 801f290:	6800      	ldr	r0, [r0, #0]
 801f292:	b388      	cbz	r0, 801f2f8 <rcl_action_take_cancel_response+0x70>
 801f294:	460e      	mov	r6, r1
 801f296:	4615      	mov	r5, r2
 801f298:	f7fd ff76 	bl	801d188 <rcl_client_is_valid>
 801f29c:	b338      	cbz	r0, 801f2ee <rcl_action_take_cancel_response+0x66>
 801f29e:	6820      	ldr	r0, [r4, #0]
 801f2a0:	3004      	adds	r0, #4
 801f2a2:	f7fd ff71 	bl	801d188 <rcl_client_is_valid>
 801f2a6:	b310      	cbz	r0, 801f2ee <rcl_action_take_cancel_response+0x66>
 801f2a8:	6820      	ldr	r0, [r4, #0]
 801f2aa:	3008      	adds	r0, #8
 801f2ac:	f7fd ff6c 	bl	801d188 <rcl_client_is_valid>
 801f2b0:	b1e8      	cbz	r0, 801f2ee <rcl_action_take_cancel_response+0x66>
 801f2b2:	6820      	ldr	r0, [r4, #0]
 801f2b4:	300c      	adds	r0, #12
 801f2b6:	f7fe ff2d 	bl	801e114 <rcl_subscription_is_valid>
 801f2ba:	b1c0      	cbz	r0, 801f2ee <rcl_action_take_cancel_response+0x66>
 801f2bc:	6820      	ldr	r0, [r4, #0]
 801f2be:	3010      	adds	r0, #16
 801f2c0:	f7fe ff28 	bl	801e114 <rcl_subscription_is_valid>
 801f2c4:	b198      	cbz	r0, 801f2ee <rcl_action_take_cancel_response+0x66>
 801f2c6:	b1d5      	cbz	r5, 801f2fe <rcl_action_take_cancel_response+0x76>
 801f2c8:	b1ce      	cbz	r6, 801f2fe <rcl_action_take_cancel_response+0x76>
 801f2ca:	6820      	ldr	r0, [r4, #0]
 801f2cc:	462a      	mov	r2, r5
 801f2ce:	4631      	mov	r1, r6
 801f2d0:	3004      	adds	r0, #4
 801f2d2:	f7fd ff11 	bl	801d0f8 <rcl_take_response>
 801f2d6:	b148      	cbz	r0, 801f2ec <rcl_action_take_cancel_response+0x64>
 801f2d8:	280a      	cmp	r0, #10
 801f2da:	d007      	beq.n	801f2ec <rcl_action_take_cancel_response+0x64>
 801f2dc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801f2e0:	f640 0337 	movw	r3, #2103	@ 0x837
 801f2e4:	4290      	cmp	r0, r2
 801f2e6:	bf0c      	ite	eq
 801f2e8:	4618      	moveq	r0, r3
 801f2ea:	2001      	movne	r0, #1
 801f2ec:	bd70      	pop	{r4, r5, r6, pc}
 801f2ee:	f7fd fbe7 	bl	801cac0 <rcutils_reset_error>
 801f2f2:	f640 0036 	movw	r0, #2102	@ 0x836
 801f2f6:	bd70      	pop	{r4, r5, r6, pc}
 801f2f8:	f640 0036 	movw	r0, #2102	@ 0x836
 801f2fc:	bd70      	pop	{r4, r5, r6, pc}
 801f2fe:	200b      	movs	r0, #11
 801f300:	bd70      	pop	{r4, r5, r6, pc}
 801f302:	f640 0036 	movw	r0, #2102	@ 0x836
 801f306:	4770      	bx	lr

0801f308 <rcl_action_take_feedback>:
 801f308:	2800      	cmp	r0, #0
 801f30a:	d038      	beq.n	801f37e <rcl_action_take_feedback+0x76>
 801f30c:	b530      	push	{r4, r5, lr}
 801f30e:	4604      	mov	r4, r0
 801f310:	6800      	ldr	r0, [r0, #0]
 801f312:	b091      	sub	sp, #68	@ 0x44
 801f314:	b378      	cbz	r0, 801f376 <rcl_action_take_feedback+0x6e>
 801f316:	460d      	mov	r5, r1
 801f318:	f7fd ff36 	bl	801d188 <rcl_client_is_valid>
 801f31c:	b328      	cbz	r0, 801f36a <rcl_action_take_feedback+0x62>
 801f31e:	6820      	ldr	r0, [r4, #0]
 801f320:	3004      	adds	r0, #4
 801f322:	f7fd ff31 	bl	801d188 <rcl_client_is_valid>
 801f326:	b300      	cbz	r0, 801f36a <rcl_action_take_feedback+0x62>
 801f328:	6820      	ldr	r0, [r4, #0]
 801f32a:	3008      	adds	r0, #8
 801f32c:	f7fd ff2c 	bl	801d188 <rcl_client_is_valid>
 801f330:	b1d8      	cbz	r0, 801f36a <rcl_action_take_feedback+0x62>
 801f332:	6820      	ldr	r0, [r4, #0]
 801f334:	300c      	adds	r0, #12
 801f336:	f7fe feed 	bl	801e114 <rcl_subscription_is_valid>
 801f33a:	b1b0      	cbz	r0, 801f36a <rcl_action_take_feedback+0x62>
 801f33c:	6820      	ldr	r0, [r4, #0]
 801f33e:	3010      	adds	r0, #16
 801f340:	f7fe fee8 	bl	801e114 <rcl_subscription_is_valid>
 801f344:	b188      	cbz	r0, 801f36a <rcl_action_take_feedback+0x62>
 801f346:	b1ed      	cbz	r5, 801f384 <rcl_action_take_feedback+0x7c>
 801f348:	6820      	ldr	r0, [r4, #0]
 801f34a:	2300      	movs	r3, #0
 801f34c:	466a      	mov	r2, sp
 801f34e:	4629      	mov	r1, r5
 801f350:	300c      	adds	r0, #12
 801f352:	f7fe fe83 	bl	801e05c <rcl_take>
 801f356:	b160      	cbz	r0, 801f372 <rcl_action_take_feedback+0x6a>
 801f358:	f240 1391 	movw	r3, #401	@ 0x191
 801f35c:	4298      	cmp	r0, r3
 801f35e:	d014      	beq.n	801f38a <rcl_action_take_feedback+0x82>
 801f360:	280a      	cmp	r0, #10
 801f362:	bf18      	it	ne
 801f364:	2001      	movne	r0, #1
 801f366:	b011      	add	sp, #68	@ 0x44
 801f368:	bd30      	pop	{r4, r5, pc}
 801f36a:	f7fd fba9 	bl	801cac0 <rcutils_reset_error>
 801f36e:	f640 0036 	movw	r0, #2102	@ 0x836
 801f372:	b011      	add	sp, #68	@ 0x44
 801f374:	bd30      	pop	{r4, r5, pc}
 801f376:	f640 0036 	movw	r0, #2102	@ 0x836
 801f37a:	b011      	add	sp, #68	@ 0x44
 801f37c:	bd30      	pop	{r4, r5, pc}
 801f37e:	f640 0036 	movw	r0, #2102	@ 0x836
 801f382:	4770      	bx	lr
 801f384:	200b      	movs	r0, #11
 801f386:	b011      	add	sp, #68	@ 0x44
 801f388:	bd30      	pop	{r4, r5, pc}
 801f38a:	f640 0037 	movw	r0, #2103	@ 0x837
 801f38e:	e7f0      	b.n	801f372 <rcl_action_take_feedback+0x6a>

0801f390 <rcl_action_wait_set_add_action_client>:
 801f390:	2800      	cmp	r0, #0
 801f392:	d048      	beq.n	801f426 <rcl_action_wait_set_add_action_client+0x96>
 801f394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f396:	460c      	mov	r4, r1
 801f398:	2900      	cmp	r1, #0
 801f39a:	d03c      	beq.n	801f416 <rcl_action_wait_set_add_action_client+0x86>
 801f39c:	4605      	mov	r5, r0
 801f39e:	6808      	ldr	r0, [r1, #0]
 801f3a0:	2800      	cmp	r0, #0
 801f3a2:	d038      	beq.n	801f416 <rcl_action_wait_set_add_action_client+0x86>
 801f3a4:	4617      	mov	r7, r2
 801f3a6:	461e      	mov	r6, r3
 801f3a8:	f7fd feee 	bl	801d188 <rcl_client_is_valid>
 801f3ac:	b3b0      	cbz	r0, 801f41c <rcl_action_wait_set_add_action_client+0x8c>
 801f3ae:	6820      	ldr	r0, [r4, #0]
 801f3b0:	3004      	adds	r0, #4
 801f3b2:	f7fd fee9 	bl	801d188 <rcl_client_is_valid>
 801f3b6:	b388      	cbz	r0, 801f41c <rcl_action_wait_set_add_action_client+0x8c>
 801f3b8:	6820      	ldr	r0, [r4, #0]
 801f3ba:	3008      	adds	r0, #8
 801f3bc:	f7fd fee4 	bl	801d188 <rcl_client_is_valid>
 801f3c0:	b360      	cbz	r0, 801f41c <rcl_action_wait_set_add_action_client+0x8c>
 801f3c2:	6820      	ldr	r0, [r4, #0]
 801f3c4:	300c      	adds	r0, #12
 801f3c6:	f7fe fea5 	bl	801e114 <rcl_subscription_is_valid>
 801f3ca:	b338      	cbz	r0, 801f41c <rcl_action_wait_set_add_action_client+0x8c>
 801f3cc:	6820      	ldr	r0, [r4, #0]
 801f3ce:	3010      	adds	r0, #16
 801f3d0:	f7fe fea0 	bl	801e114 <rcl_subscription_is_valid>
 801f3d4:	b310      	cbz	r0, 801f41c <rcl_action_wait_set_add_action_client+0x8c>
 801f3d6:	6821      	ldr	r1, [r4, #0]
 801f3d8:	4628      	mov	r0, r5
 801f3da:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801f3de:	f7ff fcd1 	bl	801ed84 <rcl_wait_set_add_client>
 801f3e2:	b9b8      	cbnz	r0, 801f414 <rcl_action_wait_set_add_action_client+0x84>
 801f3e4:	6821      	ldr	r1, [r4, #0]
 801f3e6:	4628      	mov	r0, r5
 801f3e8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801f3ec:	3104      	adds	r1, #4
 801f3ee:	f7ff fcc9 	bl	801ed84 <rcl_wait_set_add_client>
 801f3f2:	b978      	cbnz	r0, 801f414 <rcl_action_wait_set_add_action_client+0x84>
 801f3f4:	6821      	ldr	r1, [r4, #0]
 801f3f6:	4628      	mov	r0, r5
 801f3f8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801f3fc:	3108      	adds	r1, #8
 801f3fe:	f7ff fcc1 	bl	801ed84 <rcl_wait_set_add_client>
 801f402:	b938      	cbnz	r0, 801f414 <rcl_action_wait_set_add_action_client+0x84>
 801f404:	6821      	ldr	r1, [r4, #0]
 801f406:	4628      	mov	r0, r5
 801f408:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801f40c:	310c      	adds	r1, #12
 801f40e:	f7ff f969 	bl	801e6e4 <rcl_wait_set_add_subscription>
 801f412:	b158      	cbz	r0, 801f42c <rcl_action_wait_set_add_action_client+0x9c>
 801f414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f416:	f640 0036 	movw	r0, #2102	@ 0x836
 801f41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f41c:	f7fd fb50 	bl	801cac0 <rcutils_reset_error>
 801f420:	f640 0036 	movw	r0, #2102	@ 0x836
 801f424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f426:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801f42a:	4770      	bx	lr
 801f42c:	6821      	ldr	r1, [r4, #0]
 801f42e:	4628      	mov	r0, r5
 801f430:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801f434:	3110      	adds	r1, #16
 801f436:	f7ff f955 	bl	801e6e4 <rcl_wait_set_add_subscription>
 801f43a:	2800      	cmp	r0, #0
 801f43c:	d1ea      	bne.n	801f414 <rcl_action_wait_set_add_action_client+0x84>
 801f43e:	b11f      	cbz	r7, 801f448 <rcl_action_wait_set_add_action_client+0xb8>
 801f440:	6823      	ldr	r3, [r4, #0]
 801f442:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801f446:	603b      	str	r3, [r7, #0]
 801f448:	2e00      	cmp	r6, #0
 801f44a:	d0e3      	beq.n	801f414 <rcl_action_wait_set_add_action_client+0x84>
 801f44c:	6823      	ldr	r3, [r4, #0]
 801f44e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801f452:	6033      	str	r3, [r6, #0]
 801f454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f456:	bf00      	nop

0801f458 <rcl_action_client_wait_set_get_entities_ready>:
 801f458:	2800      	cmp	r0, #0
 801f45a:	d050      	beq.n	801f4fe <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801f45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f460:	460c      	mov	r4, r1
 801f462:	2900      	cmp	r1, #0
 801f464:	d03e      	beq.n	801f4e4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801f466:	4605      	mov	r5, r0
 801f468:	6808      	ldr	r0, [r1, #0]
 801f46a:	2800      	cmp	r0, #0
 801f46c:	d03a      	beq.n	801f4e4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801f46e:	4616      	mov	r6, r2
 801f470:	461f      	mov	r7, r3
 801f472:	f7fd fe89 	bl	801d188 <rcl_client_is_valid>
 801f476:	2800      	cmp	r0, #0
 801f478:	d038      	beq.n	801f4ec <rcl_action_client_wait_set_get_entities_ready+0x94>
 801f47a:	6820      	ldr	r0, [r4, #0]
 801f47c:	3004      	adds	r0, #4
 801f47e:	f7fd fe83 	bl	801d188 <rcl_client_is_valid>
 801f482:	2800      	cmp	r0, #0
 801f484:	d032      	beq.n	801f4ec <rcl_action_client_wait_set_get_entities_ready+0x94>
 801f486:	6820      	ldr	r0, [r4, #0]
 801f488:	3008      	adds	r0, #8
 801f48a:	f7fd fe7d 	bl	801d188 <rcl_client_is_valid>
 801f48e:	b368      	cbz	r0, 801f4ec <rcl_action_client_wait_set_get_entities_ready+0x94>
 801f490:	6820      	ldr	r0, [r4, #0]
 801f492:	300c      	adds	r0, #12
 801f494:	f7fe fe3e 	bl	801e114 <rcl_subscription_is_valid>
 801f498:	b340      	cbz	r0, 801f4ec <rcl_action_client_wait_set_get_entities_ready+0x94>
 801f49a:	6820      	ldr	r0, [r4, #0]
 801f49c:	3010      	adds	r0, #16
 801f49e:	f7fe fe39 	bl	801e114 <rcl_subscription_is_valid>
 801f4a2:	b318      	cbz	r0, 801f4ec <rcl_action_client_wait_set_get_entities_ready+0x94>
 801f4a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 801f4a8:	2a00      	cmp	r2, #0
 801f4aa:	bf18      	it	ne
 801f4ac:	2b00      	cmpne	r3, #0
 801f4ae:	9b08      	ldr	r3, [sp, #32]
 801f4b0:	bf0c      	ite	eq
 801f4b2:	2101      	moveq	r1, #1
 801f4b4:	2100      	movne	r1, #0
 801f4b6:	2b00      	cmp	r3, #0
 801f4b8:	bf08      	it	eq
 801f4ba:	f041 0101 	orreq.w	r1, r1, #1
 801f4be:	2f00      	cmp	r7, #0
 801f4c0:	bf08      	it	eq
 801f4c2:	f041 0101 	orreq.w	r1, r1, #1
 801f4c6:	b9b9      	cbnz	r1, 801f4f8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801f4c8:	b1b6      	cbz	r6, 801f4f8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801f4ca:	6823      	ldr	r3, [r4, #0]
 801f4cc:	686c      	ldr	r4, [r5, #4]
 801f4ce:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 801f4d2:	428a      	cmp	r2, r1
 801f4d4:	4610      	mov	r0, r2
 801f4d6:	bf38      	it	cc
 801f4d8:	4608      	movcc	r0, r1
 801f4da:	4284      	cmp	r4, r0
 801f4dc:	d812      	bhi.n	801f504 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801f4de:	2001      	movs	r0, #1
 801f4e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f4e4:	f640 0036 	movw	r0, #2102	@ 0x836
 801f4e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f4ec:	f7fd fae8 	bl	801cac0 <rcutils_reset_error>
 801f4f0:	f640 0036 	movw	r0, #2102	@ 0x836
 801f4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f4f8:	200b      	movs	r0, #11
 801f4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f4fe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801f502:	4770      	bx	lr
 801f504:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 801f508:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 801f50c:	45f0      	cmp	r8, lr
 801f50e:	4640      	mov	r0, r8
 801f510:	69ec      	ldr	r4, [r5, #28]
 801f512:	bf38      	it	cc
 801f514:	4670      	movcc	r0, lr
 801f516:	4560      	cmp	r0, ip
 801f518:	bf38      	it	cc
 801f51a:	4660      	movcc	r0, ip
 801f51c:	4284      	cmp	r4, r0
 801f51e:	d9de      	bls.n	801f4de <rcl_action_client_wait_set_get_entities_ready+0x86>
 801f520:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801f524:	682d      	ldr	r5, [r5, #0]
 801f526:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801f52a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801f52e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f532:	1a18      	subs	r0, r3, r0
 801f534:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801f538:	f103 0c0c 	add.w	ip, r3, #12
 801f53c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801f540:	fab0 f080 	clz	r0, r0
 801f544:	eba5 050c 	sub.w	r5, r5, ip
 801f548:	0940      	lsrs	r0, r0, #5
 801f54a:	fab5 f585 	clz	r5, r5
 801f54e:	096d      	lsrs	r5, r5, #5
 801f550:	7035      	strb	r5, [r6, #0]
 801f552:	f103 0510 	add.w	r5, r3, #16
 801f556:	1b64      	subs	r4, r4, r5
 801f558:	9d08      	ldr	r5, [sp, #32]
 801f55a:	fab4 f484 	clz	r4, r4
 801f55e:	0964      	lsrs	r4, r4, #5
 801f560:	703c      	strb	r4, [r7, #0]
 801f562:	1d1c      	adds	r4, r3, #4
 801f564:	3308      	adds	r3, #8
 801f566:	7028      	strb	r0, [r5, #0]
 801f568:	1b09      	subs	r1, r1, r4
 801f56a:	2000      	movs	r0, #0
 801f56c:	1ad3      	subs	r3, r2, r3
 801f56e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f570:	fab1 f181 	clz	r1, r1
 801f574:	fab3 f383 	clz	r3, r3
 801f578:	0949      	lsrs	r1, r1, #5
 801f57a:	095b      	lsrs	r3, r3, #5
 801f57c:	7011      	strb	r1, [r2, #0]
 801f57e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f580:	7013      	strb	r3, [r2, #0]
 801f582:	e7b1      	b.n	801f4e8 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801f584 <rcl_action_take_goal_request>:
 801f584:	2800      	cmp	r0, #0
 801f586:	d039      	beq.n	801f5fc <rcl_action_take_goal_request+0x78>
 801f588:	b570      	push	{r4, r5, r6, lr}
 801f58a:	4604      	mov	r4, r0
 801f58c:	6800      	ldr	r0, [r0, #0]
 801f58e:	b380      	cbz	r0, 801f5f2 <rcl_action_take_goal_request+0x6e>
 801f590:	460e      	mov	r6, r1
 801f592:	4615      	mov	r5, r2
 801f594:	f7fe fc76 	bl	801de84 <rcl_service_is_valid>
 801f598:	b330      	cbz	r0, 801f5e8 <rcl_action_take_goal_request+0x64>
 801f59a:	6820      	ldr	r0, [r4, #0]
 801f59c:	3004      	adds	r0, #4
 801f59e:	f7fe fc71 	bl	801de84 <rcl_service_is_valid>
 801f5a2:	b308      	cbz	r0, 801f5e8 <rcl_action_take_goal_request+0x64>
 801f5a4:	6820      	ldr	r0, [r4, #0]
 801f5a6:	3008      	adds	r0, #8
 801f5a8:	f7fe fc6c 	bl	801de84 <rcl_service_is_valid>
 801f5ac:	b1e0      	cbz	r0, 801f5e8 <rcl_action_take_goal_request+0x64>
 801f5ae:	6820      	ldr	r0, [r4, #0]
 801f5b0:	300c      	adds	r0, #12
 801f5b2:	f007 fc33 	bl	8026e1c <rcl_publisher_is_valid>
 801f5b6:	b1b8      	cbz	r0, 801f5e8 <rcl_action_take_goal_request+0x64>
 801f5b8:	6820      	ldr	r0, [r4, #0]
 801f5ba:	3010      	adds	r0, #16
 801f5bc:	f007 fc2e 	bl	8026e1c <rcl_publisher_is_valid>
 801f5c0:	b190      	cbz	r0, 801f5e8 <rcl_action_take_goal_request+0x64>
 801f5c2:	b1cd      	cbz	r5, 801f5f8 <rcl_action_take_goal_request+0x74>
 801f5c4:	b1c6      	cbz	r6, 801f5f8 <rcl_action_take_goal_request+0x74>
 801f5c6:	462a      	mov	r2, r5
 801f5c8:	4631      	mov	r1, r6
 801f5ca:	6820      	ldr	r0, [r4, #0]
 801f5cc:	f7fe fc02 	bl	801ddd4 <rcl_take_request>
 801f5d0:	b148      	cbz	r0, 801f5e6 <rcl_action_take_goal_request+0x62>
 801f5d2:	280a      	cmp	r0, #10
 801f5d4:	d007      	beq.n	801f5e6 <rcl_action_take_goal_request+0x62>
 801f5d6:	f240 2259 	movw	r2, #601	@ 0x259
 801f5da:	f640 0399 	movw	r3, #2201	@ 0x899
 801f5de:	4290      	cmp	r0, r2
 801f5e0:	bf0c      	ite	eq
 801f5e2:	4618      	moveq	r0, r3
 801f5e4:	2001      	movne	r0, #1
 801f5e6:	bd70      	pop	{r4, r5, r6, pc}
 801f5e8:	f7fd fa6a 	bl	801cac0 <rcutils_reset_error>
 801f5ec:	f640 0098 	movw	r0, #2200	@ 0x898
 801f5f0:	bd70      	pop	{r4, r5, r6, pc}
 801f5f2:	f640 0098 	movw	r0, #2200	@ 0x898
 801f5f6:	bd70      	pop	{r4, r5, r6, pc}
 801f5f8:	200b      	movs	r0, #11
 801f5fa:	bd70      	pop	{r4, r5, r6, pc}
 801f5fc:	f640 0098 	movw	r0, #2200	@ 0x898
 801f600:	4770      	bx	lr
 801f602:	bf00      	nop

0801f604 <rcl_action_send_goal_response>:
 801f604:	b390      	cbz	r0, 801f66c <rcl_action_send_goal_response+0x68>
 801f606:	b570      	push	{r4, r5, r6, lr}
 801f608:	4604      	mov	r4, r0
 801f60a:	6800      	ldr	r0, [r0, #0]
 801f60c:	b348      	cbz	r0, 801f662 <rcl_action_send_goal_response+0x5e>
 801f60e:	460e      	mov	r6, r1
 801f610:	4615      	mov	r5, r2
 801f612:	f7fe fc37 	bl	801de84 <rcl_service_is_valid>
 801f616:	b1f8      	cbz	r0, 801f658 <rcl_action_send_goal_response+0x54>
 801f618:	6820      	ldr	r0, [r4, #0]
 801f61a:	3004      	adds	r0, #4
 801f61c:	f7fe fc32 	bl	801de84 <rcl_service_is_valid>
 801f620:	b1d0      	cbz	r0, 801f658 <rcl_action_send_goal_response+0x54>
 801f622:	6820      	ldr	r0, [r4, #0]
 801f624:	3008      	adds	r0, #8
 801f626:	f7fe fc2d 	bl	801de84 <rcl_service_is_valid>
 801f62a:	b1a8      	cbz	r0, 801f658 <rcl_action_send_goal_response+0x54>
 801f62c:	6820      	ldr	r0, [r4, #0]
 801f62e:	300c      	adds	r0, #12
 801f630:	f007 fbf4 	bl	8026e1c <rcl_publisher_is_valid>
 801f634:	b180      	cbz	r0, 801f658 <rcl_action_send_goal_response+0x54>
 801f636:	6820      	ldr	r0, [r4, #0]
 801f638:	3010      	adds	r0, #16
 801f63a:	f007 fbef 	bl	8026e1c <rcl_publisher_is_valid>
 801f63e:	b158      	cbz	r0, 801f658 <rcl_action_send_goal_response+0x54>
 801f640:	b195      	cbz	r5, 801f668 <rcl_action_send_goal_response+0x64>
 801f642:	b18e      	cbz	r6, 801f668 <rcl_action_send_goal_response+0x64>
 801f644:	462a      	mov	r2, r5
 801f646:	4631      	mov	r1, r6
 801f648:	6820      	ldr	r0, [r4, #0]
 801f64a:	f7fe fc03 	bl	801de54 <rcl_send_response>
 801f64e:	b110      	cbz	r0, 801f656 <rcl_action_send_goal_response+0x52>
 801f650:	2802      	cmp	r0, #2
 801f652:	bf18      	it	ne
 801f654:	2001      	movne	r0, #1
 801f656:	bd70      	pop	{r4, r5, r6, pc}
 801f658:	f7fd fa32 	bl	801cac0 <rcutils_reset_error>
 801f65c:	f640 0098 	movw	r0, #2200	@ 0x898
 801f660:	bd70      	pop	{r4, r5, r6, pc}
 801f662:	f640 0098 	movw	r0, #2200	@ 0x898
 801f666:	bd70      	pop	{r4, r5, r6, pc}
 801f668:	200b      	movs	r0, #11
 801f66a:	bd70      	pop	{r4, r5, r6, pc}
 801f66c:	f640 0098 	movw	r0, #2200	@ 0x898
 801f670:	4770      	bx	lr
 801f672:	bf00      	nop

0801f674 <rcl_action_take_result_request>:
 801f674:	2800      	cmp	r0, #0
 801f676:	d03a      	beq.n	801f6ee <rcl_action_take_result_request+0x7a>
 801f678:	b570      	push	{r4, r5, r6, lr}
 801f67a:	4604      	mov	r4, r0
 801f67c:	6800      	ldr	r0, [r0, #0]
 801f67e:	b388      	cbz	r0, 801f6e4 <rcl_action_take_result_request+0x70>
 801f680:	460e      	mov	r6, r1
 801f682:	4615      	mov	r5, r2
 801f684:	f7fe fbfe 	bl	801de84 <rcl_service_is_valid>
 801f688:	b338      	cbz	r0, 801f6da <rcl_action_take_result_request+0x66>
 801f68a:	6820      	ldr	r0, [r4, #0]
 801f68c:	3004      	adds	r0, #4
 801f68e:	f7fe fbf9 	bl	801de84 <rcl_service_is_valid>
 801f692:	b310      	cbz	r0, 801f6da <rcl_action_take_result_request+0x66>
 801f694:	6820      	ldr	r0, [r4, #0]
 801f696:	3008      	adds	r0, #8
 801f698:	f7fe fbf4 	bl	801de84 <rcl_service_is_valid>
 801f69c:	b1e8      	cbz	r0, 801f6da <rcl_action_take_result_request+0x66>
 801f69e:	6820      	ldr	r0, [r4, #0]
 801f6a0:	300c      	adds	r0, #12
 801f6a2:	f007 fbbb 	bl	8026e1c <rcl_publisher_is_valid>
 801f6a6:	b1c0      	cbz	r0, 801f6da <rcl_action_take_result_request+0x66>
 801f6a8:	6820      	ldr	r0, [r4, #0]
 801f6aa:	3010      	adds	r0, #16
 801f6ac:	f007 fbb6 	bl	8026e1c <rcl_publisher_is_valid>
 801f6b0:	b198      	cbz	r0, 801f6da <rcl_action_take_result_request+0x66>
 801f6b2:	b1d5      	cbz	r5, 801f6ea <rcl_action_take_result_request+0x76>
 801f6b4:	b1ce      	cbz	r6, 801f6ea <rcl_action_take_result_request+0x76>
 801f6b6:	6820      	ldr	r0, [r4, #0]
 801f6b8:	462a      	mov	r2, r5
 801f6ba:	4631      	mov	r1, r6
 801f6bc:	3008      	adds	r0, #8
 801f6be:	f7fe fb89 	bl	801ddd4 <rcl_take_request>
 801f6c2:	b148      	cbz	r0, 801f6d8 <rcl_action_take_result_request+0x64>
 801f6c4:	280a      	cmp	r0, #10
 801f6c6:	d007      	beq.n	801f6d8 <rcl_action_take_result_request+0x64>
 801f6c8:	f240 2259 	movw	r2, #601	@ 0x259
 801f6cc:	f640 0399 	movw	r3, #2201	@ 0x899
 801f6d0:	4290      	cmp	r0, r2
 801f6d2:	bf0c      	ite	eq
 801f6d4:	4618      	moveq	r0, r3
 801f6d6:	2001      	movne	r0, #1
 801f6d8:	bd70      	pop	{r4, r5, r6, pc}
 801f6da:	f7fd f9f1 	bl	801cac0 <rcutils_reset_error>
 801f6de:	f640 0098 	movw	r0, #2200	@ 0x898
 801f6e2:	bd70      	pop	{r4, r5, r6, pc}
 801f6e4:	f640 0098 	movw	r0, #2200	@ 0x898
 801f6e8:	bd70      	pop	{r4, r5, r6, pc}
 801f6ea:	200b      	movs	r0, #11
 801f6ec:	bd70      	pop	{r4, r5, r6, pc}
 801f6ee:	f640 0098 	movw	r0, #2200	@ 0x898
 801f6f2:	4770      	bx	lr

0801f6f4 <rcl_action_take_cancel_request>:
 801f6f4:	2800      	cmp	r0, #0
 801f6f6:	d03a      	beq.n	801f76e <rcl_action_take_cancel_request+0x7a>
 801f6f8:	b570      	push	{r4, r5, r6, lr}
 801f6fa:	4604      	mov	r4, r0
 801f6fc:	6800      	ldr	r0, [r0, #0]
 801f6fe:	b388      	cbz	r0, 801f764 <rcl_action_take_cancel_request+0x70>
 801f700:	460e      	mov	r6, r1
 801f702:	4615      	mov	r5, r2
 801f704:	f7fe fbbe 	bl	801de84 <rcl_service_is_valid>
 801f708:	b338      	cbz	r0, 801f75a <rcl_action_take_cancel_request+0x66>
 801f70a:	6820      	ldr	r0, [r4, #0]
 801f70c:	3004      	adds	r0, #4
 801f70e:	f7fe fbb9 	bl	801de84 <rcl_service_is_valid>
 801f712:	b310      	cbz	r0, 801f75a <rcl_action_take_cancel_request+0x66>
 801f714:	6820      	ldr	r0, [r4, #0]
 801f716:	3008      	adds	r0, #8
 801f718:	f7fe fbb4 	bl	801de84 <rcl_service_is_valid>
 801f71c:	b1e8      	cbz	r0, 801f75a <rcl_action_take_cancel_request+0x66>
 801f71e:	6820      	ldr	r0, [r4, #0]
 801f720:	300c      	adds	r0, #12
 801f722:	f007 fb7b 	bl	8026e1c <rcl_publisher_is_valid>
 801f726:	b1c0      	cbz	r0, 801f75a <rcl_action_take_cancel_request+0x66>
 801f728:	6820      	ldr	r0, [r4, #0]
 801f72a:	3010      	adds	r0, #16
 801f72c:	f007 fb76 	bl	8026e1c <rcl_publisher_is_valid>
 801f730:	b198      	cbz	r0, 801f75a <rcl_action_take_cancel_request+0x66>
 801f732:	b1d5      	cbz	r5, 801f76a <rcl_action_take_cancel_request+0x76>
 801f734:	b1ce      	cbz	r6, 801f76a <rcl_action_take_cancel_request+0x76>
 801f736:	6820      	ldr	r0, [r4, #0]
 801f738:	462a      	mov	r2, r5
 801f73a:	4631      	mov	r1, r6
 801f73c:	3004      	adds	r0, #4
 801f73e:	f7fe fb49 	bl	801ddd4 <rcl_take_request>
 801f742:	b148      	cbz	r0, 801f758 <rcl_action_take_cancel_request+0x64>
 801f744:	280a      	cmp	r0, #10
 801f746:	d007      	beq.n	801f758 <rcl_action_take_cancel_request+0x64>
 801f748:	f240 2259 	movw	r2, #601	@ 0x259
 801f74c:	f640 0399 	movw	r3, #2201	@ 0x899
 801f750:	4290      	cmp	r0, r2
 801f752:	bf0c      	ite	eq
 801f754:	4618      	moveq	r0, r3
 801f756:	2001      	movne	r0, #1
 801f758:	bd70      	pop	{r4, r5, r6, pc}
 801f75a:	f7fd f9b1 	bl	801cac0 <rcutils_reset_error>
 801f75e:	f640 0098 	movw	r0, #2200	@ 0x898
 801f762:	bd70      	pop	{r4, r5, r6, pc}
 801f764:	f640 0098 	movw	r0, #2200	@ 0x898
 801f768:	bd70      	pop	{r4, r5, r6, pc}
 801f76a:	200b      	movs	r0, #11
 801f76c:	bd70      	pop	{r4, r5, r6, pc}
 801f76e:	f640 0098 	movw	r0, #2200	@ 0x898
 801f772:	4770      	bx	lr

0801f774 <rcl_action_send_cancel_response>:
 801f774:	b398      	cbz	r0, 801f7de <rcl_action_send_cancel_response+0x6a>
 801f776:	b570      	push	{r4, r5, r6, lr}
 801f778:	4604      	mov	r4, r0
 801f77a:	6800      	ldr	r0, [r0, #0]
 801f77c:	b350      	cbz	r0, 801f7d4 <rcl_action_send_cancel_response+0x60>
 801f77e:	460e      	mov	r6, r1
 801f780:	4615      	mov	r5, r2
 801f782:	f7fe fb7f 	bl	801de84 <rcl_service_is_valid>
 801f786:	b300      	cbz	r0, 801f7ca <rcl_action_send_cancel_response+0x56>
 801f788:	6820      	ldr	r0, [r4, #0]
 801f78a:	3004      	adds	r0, #4
 801f78c:	f7fe fb7a 	bl	801de84 <rcl_service_is_valid>
 801f790:	b1d8      	cbz	r0, 801f7ca <rcl_action_send_cancel_response+0x56>
 801f792:	6820      	ldr	r0, [r4, #0]
 801f794:	3008      	adds	r0, #8
 801f796:	f7fe fb75 	bl	801de84 <rcl_service_is_valid>
 801f79a:	b1b0      	cbz	r0, 801f7ca <rcl_action_send_cancel_response+0x56>
 801f79c:	6820      	ldr	r0, [r4, #0]
 801f79e:	300c      	adds	r0, #12
 801f7a0:	f007 fb3c 	bl	8026e1c <rcl_publisher_is_valid>
 801f7a4:	b188      	cbz	r0, 801f7ca <rcl_action_send_cancel_response+0x56>
 801f7a6:	6820      	ldr	r0, [r4, #0]
 801f7a8:	3010      	adds	r0, #16
 801f7aa:	f007 fb37 	bl	8026e1c <rcl_publisher_is_valid>
 801f7ae:	b160      	cbz	r0, 801f7ca <rcl_action_send_cancel_response+0x56>
 801f7b0:	b19d      	cbz	r5, 801f7da <rcl_action_send_cancel_response+0x66>
 801f7b2:	b196      	cbz	r6, 801f7da <rcl_action_send_cancel_response+0x66>
 801f7b4:	6820      	ldr	r0, [r4, #0]
 801f7b6:	462a      	mov	r2, r5
 801f7b8:	4631      	mov	r1, r6
 801f7ba:	3004      	adds	r0, #4
 801f7bc:	f7fe fb4a 	bl	801de54 <rcl_send_response>
 801f7c0:	b110      	cbz	r0, 801f7c8 <rcl_action_send_cancel_response+0x54>
 801f7c2:	2802      	cmp	r0, #2
 801f7c4:	bf18      	it	ne
 801f7c6:	2001      	movne	r0, #1
 801f7c8:	bd70      	pop	{r4, r5, r6, pc}
 801f7ca:	f7fd f979 	bl	801cac0 <rcutils_reset_error>
 801f7ce:	f640 0098 	movw	r0, #2200	@ 0x898
 801f7d2:	bd70      	pop	{r4, r5, r6, pc}
 801f7d4:	f640 0098 	movw	r0, #2200	@ 0x898
 801f7d8:	bd70      	pop	{r4, r5, r6, pc}
 801f7da:	200b      	movs	r0, #11
 801f7dc:	bd70      	pop	{r4, r5, r6, pc}
 801f7de:	f640 0098 	movw	r0, #2200	@ 0x898
 801f7e2:	4770      	bx	lr

0801f7e4 <rcl_action_wait_set_add_action_server>:
 801f7e4:	2800      	cmp	r0, #0
 801f7e6:	d04d      	beq.n	801f884 <rcl_action_wait_set_add_action_server+0xa0>
 801f7e8:	b570      	push	{r4, r5, r6, lr}
 801f7ea:	460c      	mov	r4, r1
 801f7ec:	b159      	cbz	r1, 801f806 <rcl_action_wait_set_add_action_server+0x22>
 801f7ee:	4605      	mov	r5, r0
 801f7f0:	6808      	ldr	r0, [r1, #0]
 801f7f2:	b140      	cbz	r0, 801f806 <rcl_action_wait_set_add_action_server+0x22>
 801f7f4:	4616      	mov	r6, r2
 801f7f6:	f7fe fb45 	bl	801de84 <rcl_service_is_valid>
 801f7fa:	b120      	cbz	r0, 801f806 <rcl_action_wait_set_add_action_server+0x22>
 801f7fc:	6820      	ldr	r0, [r4, #0]
 801f7fe:	3004      	adds	r0, #4
 801f800:	f7fe fb40 	bl	801de84 <rcl_service_is_valid>
 801f804:	b910      	cbnz	r0, 801f80c <rcl_action_wait_set_add_action_server+0x28>
 801f806:	f640 0098 	movw	r0, #2200	@ 0x898
 801f80a:	bd70      	pop	{r4, r5, r6, pc}
 801f80c:	6820      	ldr	r0, [r4, #0]
 801f80e:	3008      	adds	r0, #8
 801f810:	f7fe fb38 	bl	801de84 <rcl_service_is_valid>
 801f814:	2800      	cmp	r0, #0
 801f816:	d0f6      	beq.n	801f806 <rcl_action_wait_set_add_action_server+0x22>
 801f818:	6820      	ldr	r0, [r4, #0]
 801f81a:	300c      	adds	r0, #12
 801f81c:	f007 fb16 	bl	8026e4c <rcl_publisher_is_valid_except_context>
 801f820:	2800      	cmp	r0, #0
 801f822:	d0f0      	beq.n	801f806 <rcl_action_wait_set_add_action_server+0x22>
 801f824:	6820      	ldr	r0, [r4, #0]
 801f826:	3010      	adds	r0, #16
 801f828:	f007 fb10 	bl	8026e4c <rcl_publisher_is_valid_except_context>
 801f82c:	2800      	cmp	r0, #0
 801f82e:	d0ea      	beq.n	801f806 <rcl_action_wait_set_add_action_server+0x22>
 801f830:	6821      	ldr	r1, [r4, #0]
 801f832:	4628      	mov	r0, r5
 801f834:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801f838:	f7ff fad0 	bl	801eddc <rcl_wait_set_add_service>
 801f83c:	2800      	cmp	r0, #0
 801f83e:	d1e4      	bne.n	801f80a <rcl_action_wait_set_add_action_server+0x26>
 801f840:	6821      	ldr	r1, [r4, #0]
 801f842:	4628      	mov	r0, r5
 801f844:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801f848:	3104      	adds	r1, #4
 801f84a:	f7ff fac7 	bl	801eddc <rcl_wait_set_add_service>
 801f84e:	2800      	cmp	r0, #0
 801f850:	d1db      	bne.n	801f80a <rcl_action_wait_set_add_action_server+0x26>
 801f852:	6821      	ldr	r1, [r4, #0]
 801f854:	4628      	mov	r0, r5
 801f856:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801f85a:	3108      	adds	r1, #8
 801f85c:	f7ff fabe 	bl	801eddc <rcl_wait_set_add_service>
 801f860:	2800      	cmp	r0, #0
 801f862:	d1d2      	bne.n	801f80a <rcl_action_wait_set_add_action_server+0x26>
 801f864:	6821      	ldr	r1, [r4, #0]
 801f866:	4628      	mov	r0, r5
 801f868:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801f86c:	3114      	adds	r1, #20
 801f86e:	f7ff fa59 	bl	801ed24 <rcl_wait_set_add_timer>
 801f872:	2800      	cmp	r0, #0
 801f874:	d1c9      	bne.n	801f80a <rcl_action_wait_set_add_action_server+0x26>
 801f876:	2e00      	cmp	r6, #0
 801f878:	d0c7      	beq.n	801f80a <rcl_action_wait_set_add_action_server+0x26>
 801f87a:	6823      	ldr	r3, [r4, #0]
 801f87c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801f880:	6033      	str	r3, [r6, #0]
 801f882:	bd70      	pop	{r4, r5, r6, pc}
 801f884:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801f888:	4770      	bx	lr
 801f88a:	bf00      	nop

0801f88c <rcl_action_server_wait_set_get_entities_ready>:
 801f88c:	2800      	cmp	r0, #0
 801f88e:	d067      	beq.n	801f960 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801f890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f894:	460c      	mov	r4, r1
 801f896:	b161      	cbz	r1, 801f8b2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801f898:	4605      	mov	r5, r0
 801f89a:	6808      	ldr	r0, [r1, #0]
 801f89c:	b148      	cbz	r0, 801f8b2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801f89e:	4616      	mov	r6, r2
 801f8a0:	4698      	mov	r8, r3
 801f8a2:	f7fe faef 	bl	801de84 <rcl_service_is_valid>
 801f8a6:	b120      	cbz	r0, 801f8b2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801f8a8:	6820      	ldr	r0, [r4, #0]
 801f8aa:	3004      	adds	r0, #4
 801f8ac:	f7fe faea 	bl	801de84 <rcl_service_is_valid>
 801f8b0:	b918      	cbnz	r0, 801f8ba <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801f8b2:	f640 0098 	movw	r0, #2200	@ 0x898
 801f8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8ba:	6820      	ldr	r0, [r4, #0]
 801f8bc:	3008      	adds	r0, #8
 801f8be:	f7fe fae1 	bl	801de84 <rcl_service_is_valid>
 801f8c2:	2800      	cmp	r0, #0
 801f8c4:	d0f5      	beq.n	801f8b2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801f8c6:	6820      	ldr	r0, [r4, #0]
 801f8c8:	300c      	adds	r0, #12
 801f8ca:	f007 fabf 	bl	8026e4c <rcl_publisher_is_valid_except_context>
 801f8ce:	2800      	cmp	r0, #0
 801f8d0:	d0ef      	beq.n	801f8b2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801f8d2:	6820      	ldr	r0, [r4, #0]
 801f8d4:	3010      	adds	r0, #16
 801f8d6:	f007 fab9 	bl	8026e4c <rcl_publisher_is_valid_except_context>
 801f8da:	2800      	cmp	r0, #0
 801f8dc:	d0e9      	beq.n	801f8b2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801f8de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f8e2:	2a00      	cmp	r2, #0
 801f8e4:	bf18      	it	ne
 801f8e6:	2b00      	cmpne	r3, #0
 801f8e8:	bf0c      	ite	eq
 801f8ea:	2101      	moveq	r1, #1
 801f8ec:	2100      	movne	r1, #0
 801f8ee:	f1b8 0f00 	cmp.w	r8, #0
 801f8f2:	bf08      	it	eq
 801f8f4:	f041 0101 	orreq.w	r1, r1, #1
 801f8f8:	bba9      	cbnz	r1, 801f966 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801f8fa:	b3a6      	cbz	r6, 801f966 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801f8fc:	6821      	ldr	r1, [r4, #0]
 801f8fe:	2000      	movs	r0, #0
 801f900:	692c      	ldr	r4, [r5, #16]
 801f902:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 801f906:	6a2f      	ldr	r7, [r5, #32]
 801f908:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f90c:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 801f910:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801f914:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801f918:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801f91c:	1a64      	subs	r4, r4, r1
 801f91e:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 801f922:	fab4 f484 	clz	r4, r4
 801f926:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801f92a:	0964      	lsrs	r4, r4, #5
 801f92c:	7034      	strb	r4, [r6, #0]
 801f92e:	1d0c      	adds	r4, r1, #4
 801f930:	1b2c      	subs	r4, r5, r4
 801f932:	fab4 f484 	clz	r4, r4
 801f936:	0964      	lsrs	r4, r4, #5
 801f938:	f888 4000 	strb.w	r4, [r8]
 801f93c:	f101 0408 	add.w	r4, r1, #8
 801f940:	1b1b      	subs	r3, r3, r4
 801f942:	9c06      	ldr	r4, [sp, #24]
 801f944:	fab3 f383 	clz	r3, r3
 801f948:	095b      	lsrs	r3, r3, #5
 801f94a:	7023      	strb	r3, [r4, #0]
 801f94c:	f101 0314 	add.w	r3, r1, #20
 801f950:	1ad3      	subs	r3, r2, r3
 801f952:	9a07      	ldr	r2, [sp, #28]
 801f954:	fab3 f383 	clz	r3, r3
 801f958:	095b      	lsrs	r3, r3, #5
 801f95a:	7013      	strb	r3, [r2, #0]
 801f95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f960:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801f964:	4770      	bx	lr
 801f966:	200b      	movs	r0, #11
 801f968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f96c <_execute_event_handler>:
 801f96c:	2002      	movs	r0, #2
 801f96e:	4770      	bx	lr

0801f970 <_cancel_goal_event_handler>:
 801f970:	2003      	movs	r0, #3
 801f972:	4770      	bx	lr

0801f974 <_succeed_event_handler>:
 801f974:	2004      	movs	r0, #4
 801f976:	4770      	bx	lr

0801f978 <_abort_event_handler>:
 801f978:	2006      	movs	r0, #6
 801f97a:	4770      	bx	lr

0801f97c <_canceled_event_handler>:
 801f97c:	2005      	movs	r0, #5
 801f97e:	4770      	bx	lr

0801f980 <rcl_action_transition_goal_state>:
 801f980:	b2c2      	uxtb	r2, r0
 801f982:	2a06      	cmp	r2, #6
 801f984:	d810      	bhi.n	801f9a8 <rcl_action_transition_goal_state+0x28>
 801f986:	2904      	cmp	r1, #4
 801f988:	d80e      	bhi.n	801f9a8 <rcl_action_transition_goal_state+0x28>
 801f98a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801f98e:	b410      	push	{r4}
 801f990:	1853      	adds	r3, r2, r1
 801f992:	4c06      	ldr	r4, [pc, #24]	@ (801f9ac <rcl_action_transition_goal_state+0x2c>)
 801f994:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f998:	b113      	cbz	r3, 801f9a0 <rcl_action_transition_goal_state+0x20>
 801f99a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f99e:	4718      	bx	r3
 801f9a0:	2000      	movs	r0, #0
 801f9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f9a6:	4770      	bx	lr
 801f9a8:	2000      	movs	r0, #0
 801f9aa:	4770      	bx	lr
 801f9ac:	0802f954 	.word	0x0802f954

0801f9b0 <rcl_action_get_zero_initialized_cancel_response>:
 801f9b0:	b510      	push	{r4, lr}
 801f9b2:	4c07      	ldr	r4, [pc, #28]	@ (801f9d0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801f9b4:	4686      	mov	lr, r0
 801f9b6:	4684      	mov	ip, r0
 801f9b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f9ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f9be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f9c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f9c4:	6823      	ldr	r3, [r4, #0]
 801f9c6:	4670      	mov	r0, lr
 801f9c8:	f8cc 3000 	str.w	r3, [ip]
 801f9cc:	bd10      	pop	{r4, pc}
 801f9ce:	bf00      	nop
 801f9d0:	0802f9e0 	.word	0x0802f9e0

0801f9d4 <rclc_action_send_result_request>:
 801f9d4:	b1d0      	cbz	r0, 801fa0c <rclc_action_send_result_request+0x38>
 801f9d6:	4684      	mov	ip, r0
 801f9d8:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801f9dc:	b500      	push	{lr}
 801f9de:	b087      	sub	sp, #28
 801f9e0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801f9e4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801f9e8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801f9ec:	f10d 0e08 	add.w	lr, sp, #8
 801f9f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801f9f4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801f9f8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801f9fc:	a902      	add	r1, sp, #8
 801f9fe:	3010      	adds	r0, #16
 801fa00:	f7ff fbca 	bl	801f198 <rcl_action_send_result_request>
 801fa04:	b920      	cbnz	r0, 801fa10 <rclc_action_send_result_request+0x3c>
 801fa06:	b007      	add	sp, #28
 801fa08:	f85d fb04 	ldr.w	pc, [sp], #4
 801fa0c:	200b      	movs	r0, #11
 801fa0e:	4770      	bx	lr
 801fa10:	9001      	str	r0, [sp, #4]
 801fa12:	f7fd f855 	bl	801cac0 <rcutils_reset_error>
 801fa16:	9801      	ldr	r0, [sp, #4]
 801fa18:	b007      	add	sp, #28
 801fa1a:	f85d fb04 	ldr.w	pc, [sp], #4
 801fa1e:	bf00      	nop

0801fa20 <rclc_action_take_goal_handle>:
 801fa20:	b160      	cbz	r0, 801fa3c <rclc_action_take_goal_handle+0x1c>
 801fa22:	6883      	ldr	r3, [r0, #8]
 801fa24:	b143      	cbz	r3, 801fa38 <rclc_action_take_goal_handle+0x18>
 801fa26:	6819      	ldr	r1, [r3, #0]
 801fa28:	2200      	movs	r2, #0
 801fa2a:	6081      	str	r1, [r0, #8]
 801fa2c:	721a      	strb	r2, [r3, #8]
 801fa2e:	68c1      	ldr	r1, [r0, #12]
 801fa30:	621a      	str	r2, [r3, #32]
 801fa32:	849a      	strh	r2, [r3, #36]	@ 0x24
 801fa34:	6019      	str	r1, [r3, #0]
 801fa36:	60c3      	str	r3, [r0, #12]
 801fa38:	4618      	mov	r0, r3
 801fa3a:	4770      	bx	lr
 801fa3c:	4603      	mov	r3, r0
 801fa3e:	e7fb      	b.n	801fa38 <rclc_action_take_goal_handle+0x18>

0801fa40 <rclc_action_remove_used_goal_handle>:
 801fa40:	b180      	cbz	r0, 801fa64 <rclc_action_remove_used_goal_handle+0x24>
 801fa42:	b179      	cbz	r1, 801fa64 <rclc_action_remove_used_goal_handle+0x24>
 801fa44:	68c3      	ldr	r3, [r0, #12]
 801fa46:	4299      	cmp	r1, r3
 801fa48:	d00d      	beq.n	801fa66 <rclc_action_remove_used_goal_handle+0x26>
 801fa4a:	b12b      	cbz	r3, 801fa58 <rclc_action_remove_used_goal_handle+0x18>
 801fa4c:	681a      	ldr	r2, [r3, #0]
 801fa4e:	4291      	cmp	r1, r2
 801fa50:	d003      	beq.n	801fa5a <rclc_action_remove_used_goal_handle+0x1a>
 801fa52:	4613      	mov	r3, r2
 801fa54:	2b00      	cmp	r3, #0
 801fa56:	d1f9      	bne.n	801fa4c <rclc_action_remove_used_goal_handle+0xc>
 801fa58:	4770      	bx	lr
 801fa5a:	680a      	ldr	r2, [r1, #0]
 801fa5c:	601a      	str	r2, [r3, #0]
 801fa5e:	6883      	ldr	r3, [r0, #8]
 801fa60:	600b      	str	r3, [r1, #0]
 801fa62:	6081      	str	r1, [r0, #8]
 801fa64:	4770      	bx	lr
 801fa66:	680b      	ldr	r3, [r1, #0]
 801fa68:	60c3      	str	r3, [r0, #12]
 801fa6a:	e7f8      	b.n	801fa5e <rclc_action_remove_used_goal_handle+0x1e>

0801fa6c <rclc_action_find_goal_handle_by_uuid>:
 801fa6c:	b538      	push	{r3, r4, r5, lr}
 801fa6e:	b181      	cbz	r1, 801fa92 <rclc_action_find_goal_handle_by_uuid+0x26>
 801fa70:	b178      	cbz	r0, 801fa92 <rclc_action_find_goal_handle_by_uuid+0x26>
 801fa72:	68c4      	ldr	r4, [r0, #12]
 801fa74:	460d      	mov	r5, r1
 801fa76:	b914      	cbnz	r4, 801fa7e <rclc_action_find_goal_handle_by_uuid+0x12>
 801fa78:	e009      	b.n	801fa8e <rclc_action_find_goal_handle_by_uuid+0x22>
 801fa7a:	6824      	ldr	r4, [r4, #0]
 801fa7c:	b13c      	cbz	r4, 801fa8e <rclc_action_find_goal_handle_by_uuid+0x22>
 801fa7e:	f104 0009 	add.w	r0, r4, #9
 801fa82:	2210      	movs	r2, #16
 801fa84:	4629      	mov	r1, r5
 801fa86:	f009 fda3 	bl	80295d0 <memcmp>
 801fa8a:	2800      	cmp	r0, #0
 801fa8c:	d1f5      	bne.n	801fa7a <rclc_action_find_goal_handle_by_uuid+0xe>
 801fa8e:	4620      	mov	r0, r4
 801fa90:	bd38      	pop	{r3, r4, r5, pc}
 801fa92:	2400      	movs	r4, #0
 801fa94:	4620      	mov	r0, r4
 801fa96:	bd38      	pop	{r3, r4, r5, pc}

0801fa98 <rclc_action_find_first_handle_by_status>:
 801fa98:	b140      	cbz	r0, 801faac <rclc_action_find_first_handle_by_status+0x14>
 801fa9a:	68c0      	ldr	r0, [r0, #12]
 801fa9c:	b910      	cbnz	r0, 801faa4 <rclc_action_find_first_handle_by_status+0xc>
 801fa9e:	e005      	b.n	801faac <rclc_action_find_first_handle_by_status+0x14>
 801faa0:	6800      	ldr	r0, [r0, #0]
 801faa2:	b118      	cbz	r0, 801faac <rclc_action_find_first_handle_by_status+0x14>
 801faa4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801faa8:	428b      	cmp	r3, r1
 801faaa:	d1f9      	bne.n	801faa0 <rclc_action_find_first_handle_by_status+0x8>
 801faac:	4770      	bx	lr
 801faae:	bf00      	nop

0801fab0 <rclc_action_find_first_terminated_handle>:
 801fab0:	b140      	cbz	r0, 801fac4 <rclc_action_find_first_terminated_handle+0x14>
 801fab2:	68c0      	ldr	r0, [r0, #12]
 801fab4:	b910      	cbnz	r0, 801fabc <rclc_action_find_first_terminated_handle+0xc>
 801fab6:	e005      	b.n	801fac4 <rclc_action_find_first_terminated_handle+0x14>
 801fab8:	6800      	ldr	r0, [r0, #0]
 801faba:	b118      	cbz	r0, 801fac4 <rclc_action_find_first_terminated_handle+0x14>
 801fabc:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801fac0:	2b03      	cmp	r3, #3
 801fac2:	ddf9      	ble.n	801fab8 <rclc_action_find_first_terminated_handle+0x8>
 801fac4:	4770      	bx	lr
 801fac6:	bf00      	nop

0801fac8 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801fac8:	b170      	cbz	r0, 801fae8 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801faca:	68c0      	ldr	r0, [r0, #12]
 801facc:	b160      	cbz	r0, 801fae8 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801face:	b410      	push	{r4}
 801fad0:	e001      	b.n	801fad6 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801fad2:	6800      	ldr	r0, [r0, #0]
 801fad4:	b128      	cbz	r0, 801fae2 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801fad6:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801fada:	4299      	cmp	r1, r3
 801fadc:	bf08      	it	eq
 801fade:	4294      	cmpeq	r4, r2
 801fae0:	d1f7      	bne.n	801fad2 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801fae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fae6:	4770      	bx	lr
 801fae8:	4770      	bx	lr
 801faea:	bf00      	nop

0801faec <rclc_action_find_handle_by_result_request_sequence_number>:
 801faec:	b170      	cbz	r0, 801fb0c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801faee:	68c0      	ldr	r0, [r0, #12]
 801faf0:	b160      	cbz	r0, 801fb0c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801faf2:	b410      	push	{r4}
 801faf4:	e001      	b.n	801fafa <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801faf6:	6800      	ldr	r0, [r0, #0]
 801faf8:	b128      	cbz	r0, 801fb06 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801fafa:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801fafe:	4299      	cmp	r1, r3
 801fb00:	bf08      	it	eq
 801fb02:	4294      	cmpeq	r4, r2
 801fb04:	d1f7      	bne.n	801faf6 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801fb06:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb0a:	4770      	bx	lr
 801fb0c:	4770      	bx	lr
 801fb0e:	bf00      	nop

0801fb10 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801fb10:	b170      	cbz	r0, 801fb30 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801fb12:	68c0      	ldr	r0, [r0, #12]
 801fb14:	b160      	cbz	r0, 801fb30 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801fb16:	b410      	push	{r4}
 801fb18:	e001      	b.n	801fb1e <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801fb1a:	6800      	ldr	r0, [r0, #0]
 801fb1c:	b128      	cbz	r0, 801fb2a <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801fb1e:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801fb22:	4299      	cmp	r1, r3
 801fb24:	bf08      	it	eq
 801fb26:	4294      	cmpeq	r4, r2
 801fb28:	d1f7      	bne.n	801fb1a <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801fb2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb2e:	4770      	bx	lr
 801fb30:	4770      	bx	lr
 801fb32:	bf00      	nop

0801fb34 <rclc_action_find_first_handle_with_goal_response>:
 801fb34:	b140      	cbz	r0, 801fb48 <rclc_action_find_first_handle_with_goal_response+0x14>
 801fb36:	68c0      	ldr	r0, [r0, #12]
 801fb38:	b910      	cbnz	r0, 801fb40 <rclc_action_find_first_handle_with_goal_response+0xc>
 801fb3a:	e005      	b.n	801fb48 <rclc_action_find_first_handle_with_goal_response+0x14>
 801fb3c:	6800      	ldr	r0, [r0, #0]
 801fb3e:	b118      	cbz	r0, 801fb48 <rclc_action_find_first_handle_with_goal_response+0x14>
 801fb40:	f890 3020 	ldrb.w	r3, [r0, #32]
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	d0f9      	beq.n	801fb3c <rclc_action_find_first_handle_with_goal_response+0x8>
 801fb48:	4770      	bx	lr
 801fb4a:	bf00      	nop

0801fb4c <rclc_action_find_first_handle_with_result_response>:
 801fb4c:	b140      	cbz	r0, 801fb60 <rclc_action_find_first_handle_with_result_response+0x14>
 801fb4e:	68c0      	ldr	r0, [r0, #12]
 801fb50:	b910      	cbnz	r0, 801fb58 <rclc_action_find_first_handle_with_result_response+0xc>
 801fb52:	e005      	b.n	801fb60 <rclc_action_find_first_handle_with_result_response+0x14>
 801fb54:	6800      	ldr	r0, [r0, #0]
 801fb56:	b118      	cbz	r0, 801fb60 <rclc_action_find_first_handle_with_result_response+0x14>
 801fb58:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801fb5c:	2b00      	cmp	r3, #0
 801fb5e:	d0f9      	beq.n	801fb54 <rclc_action_find_first_handle_with_result_response+0x8>
 801fb60:	4770      	bx	lr
 801fb62:	bf00      	nop

0801fb64 <rclc_action_server_response_goal_request>:
 801fb64:	b198      	cbz	r0, 801fb8e <rclc_action_server_response_goal_request+0x2a>
 801fb66:	2200      	movs	r2, #0
 801fb68:	460b      	mov	r3, r1
 801fb6a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801fb6e:	b510      	push	{r4, lr}
 801fb70:	6844      	ldr	r4, [r0, #4]
 801fb72:	b086      	sub	sp, #24
 801fb74:	f104 0010 	add.w	r0, r4, #16
 801fb78:	9205      	str	r2, [sp, #20]
 801fb7a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801fb7e:	aa03      	add	r2, sp, #12
 801fb80:	f88d 300c 	strb.w	r3, [sp, #12]
 801fb84:	f7ff fd3e 	bl	801f604 <rcl_action_send_goal_response>
 801fb88:	b918      	cbnz	r0, 801fb92 <rclc_action_server_response_goal_request+0x2e>
 801fb8a:	b006      	add	sp, #24
 801fb8c:	bd10      	pop	{r4, pc}
 801fb8e:	200b      	movs	r0, #11
 801fb90:	4770      	bx	lr
 801fb92:	9001      	str	r0, [sp, #4]
 801fb94:	f7fc ff94 	bl	801cac0 <rcutils_reset_error>
 801fb98:	9801      	ldr	r0, [sp, #4]
 801fb9a:	b006      	add	sp, #24
 801fb9c:	bd10      	pop	{r4, pc}
 801fb9e:	bf00      	nop

0801fba0 <rclc_action_server_goal_cancel_accept>:
 801fba0:	b310      	cbz	r0, 801fbe8 <rclc_action_server_goal_cancel_accept+0x48>
 801fba2:	b510      	push	{r4, lr}
 801fba4:	b090      	sub	sp, #64	@ 0x40
 801fba6:	4604      	mov	r4, r0
 801fba8:	a806      	add	r0, sp, #24
 801fbaa:	f7ff ff01 	bl	801f9b0 <rcl_action_get_zero_initialized_cancel_response>
 801fbae:	2300      	movs	r3, #0
 801fbb0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801fbb4:	46ec      	mov	ip, sp
 801fbb6:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801fbba:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801fbbe:	f88d 3018 	strb.w	r3, [sp, #24]
 801fbc2:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801fbc6:	f8cd d01c 	str.w	sp, [sp, #28]
 801fbca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801fbce:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801fbf0 <rclc_action_server_goal_cancel_accept+0x50>
 801fbd2:	6860      	ldr	r0, [r4, #4]
 801fbd4:	aa06      	add	r2, sp, #24
 801fbd6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801fbda:	3010      	adds	r0, #16
 801fbdc:	ed8d 7b08 	vstr	d7, [sp, #32]
 801fbe0:	f7ff fdc8 	bl	801f774 <rcl_action_send_cancel_response>
 801fbe4:	b010      	add	sp, #64	@ 0x40
 801fbe6:	bd10      	pop	{r4, pc}
 801fbe8:	200b      	movs	r0, #11
 801fbea:	4770      	bx	lr
 801fbec:	f3af 8000 	nop.w
 801fbf0:	00000001 	.word	0x00000001
 801fbf4:	00000001 	.word	0x00000001

0801fbf8 <rclc_action_server_goal_cancel_reject>:
 801fbf8:	b082      	sub	sp, #8
 801fbfa:	b530      	push	{r4, r5, lr}
 801fbfc:	b08b      	sub	sp, #44	@ 0x2c
 801fbfe:	ac0e      	add	r4, sp, #56	@ 0x38
 801fc00:	e884 000c 	stmia.w	r4, {r2, r3}
 801fc04:	b188      	cbz	r0, 801fc2a <rclc_action_server_goal_cancel_reject+0x32>
 801fc06:	4604      	mov	r4, r0
 801fc08:	a801      	add	r0, sp, #4
 801fc0a:	460d      	mov	r5, r1
 801fc0c:	f7ff fed0 	bl	801f9b0 <rcl_action_get_zero_initialized_cancel_response>
 801fc10:	aa01      	add	r2, sp, #4
 801fc12:	a90e      	add	r1, sp, #56	@ 0x38
 801fc14:	f104 0010 	add.w	r0, r4, #16
 801fc18:	f88d 5004 	strb.w	r5, [sp, #4]
 801fc1c:	f7ff fdaa 	bl	801f774 <rcl_action_send_cancel_response>
 801fc20:	b00b      	add	sp, #44	@ 0x2c
 801fc22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fc26:	b002      	add	sp, #8
 801fc28:	4770      	bx	lr
 801fc2a:	200b      	movs	r0, #11
 801fc2c:	b00b      	add	sp, #44	@ 0x2c
 801fc2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fc32:	b002      	add	sp, #8
 801fc34:	4770      	bx	lr
 801fc36:	bf00      	nop

0801fc38 <__atomic_load_8>:
 801fc38:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801fc3c:	4a16      	ldr	r2, [pc, #88]	@ (801fc98 <__atomic_load_8+0x60>)
 801fc3e:	4b17      	ldr	r3, [pc, #92]	@ (801fc9c <__atomic_load_8+0x64>)
 801fc40:	f04f 0c01 	mov.w	ip, #1
 801fc44:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801fc48:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801fc4c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801fc50:	fb02 f101 	mul.w	r1, r2, r1
 801fc54:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801fc58:	fba3 2301 	umull	r2, r3, r3, r1
 801fc5c:	091b      	lsrs	r3, r3, #4
 801fc5e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801fc62:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801fc66:	b4d0      	push	{r4, r6, r7}
 801fc68:	1ac9      	subs	r1, r1, r3
 801fc6a:	4c0d      	ldr	r4, [pc, #52]	@ (801fca0 <__atomic_load_8+0x68>)
 801fc6c:	1862      	adds	r2, r4, r1
 801fc6e:	e8d2 3f4f 	ldrexb	r3, [r2]
 801fc72:	e8c2 cf46 	strexb	r6, ip, [r2]
 801fc76:	2e00      	cmp	r6, #0
 801fc78:	d1f9      	bne.n	801fc6e <__atomic_load_8+0x36>
 801fc7a:	b2db      	uxtb	r3, r3
 801fc7c:	f3bf 8f5b 	dmb	ish
 801fc80:	2b00      	cmp	r3, #0
 801fc82:	d1f4      	bne.n	801fc6e <__atomic_load_8+0x36>
 801fc84:	e9d0 6700 	ldrd	r6, r7, [r0]
 801fc88:	f3bf 8f5b 	dmb	ish
 801fc8c:	5463      	strb	r3, [r4, r1]
 801fc8e:	4630      	mov	r0, r6
 801fc90:	4639      	mov	r1, r7
 801fc92:	bcd0      	pop	{r4, r6, r7}
 801fc94:	4770      	bx	lr
 801fc96:	bf00      	nop
 801fc98:	27d4eb2d 	.word	0x27d4eb2d
 801fc9c:	b21642c9 	.word	0xb21642c9
 801fca0:	200427d0 	.word	0x200427d0

0801fca4 <__atomic_store_8>:
 801fca4:	b570      	push	{r4, r5, r6, lr}
 801fca6:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801fcaa:	4916      	ldr	r1, [pc, #88]	@ (801fd04 <__atomic_store_8+0x60>)
 801fcac:	4c16      	ldr	r4, [pc, #88]	@ (801fd08 <__atomic_store_8+0x64>)
 801fcae:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801fcb2:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801fcb6:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801fcba:	fb01 fe0e 	mul.w	lr, r1, lr
 801fcbe:	4913      	ldr	r1, [pc, #76]	@ (801fd0c <__atomic_store_8+0x68>)
 801fcc0:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801fcc4:	fba1 510e 	umull	r5, r1, r1, lr
 801fcc8:	f04f 0501 	mov.w	r5, #1
 801fccc:	0909      	lsrs	r1, r1, #4
 801fcce:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801fcd2:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801fcd6:	ebae 0e01 	sub.w	lr, lr, r1
 801fcda:	eb04 0c0e 	add.w	ip, r4, lr
 801fcde:	e8dc 1f4f 	ldrexb	r1, [ip]
 801fce2:	e8cc 5f46 	strexb	r6, r5, [ip]
 801fce6:	2e00      	cmp	r6, #0
 801fce8:	d1f9      	bne.n	801fcde <__atomic_store_8+0x3a>
 801fcea:	b2c9      	uxtb	r1, r1
 801fcec:	f3bf 8f5b 	dmb	ish
 801fcf0:	2900      	cmp	r1, #0
 801fcf2:	d1f4      	bne.n	801fcde <__atomic_store_8+0x3a>
 801fcf4:	e9c0 2300 	strd	r2, r3, [r0]
 801fcf8:	f3bf 8f5b 	dmb	ish
 801fcfc:	f804 100e 	strb.w	r1, [r4, lr]
 801fd00:	bd70      	pop	{r4, r5, r6, pc}
 801fd02:	bf00      	nop
 801fd04:	27d4eb2d 	.word	0x27d4eb2d
 801fd08:	200427d0 	.word	0x200427d0
 801fd0c:	b21642c9 	.word	0xb21642c9

0801fd10 <__atomic_exchange_8>:
 801fd10:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801fd14:	4917      	ldr	r1, [pc, #92]	@ (801fd74 <__atomic_exchange_8+0x64>)
 801fd16:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 801fd1a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801fd1e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801fd22:	fb01 fc0c 	mul.w	ip, r1, ip
 801fd26:	4914      	ldr	r1, [pc, #80]	@ (801fd78 <__atomic_exchange_8+0x68>)
 801fd28:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801fd2c:	b570      	push	{r4, r5, r6, lr}
 801fd2e:	4686      	mov	lr, r0
 801fd30:	fba1 010c 	umull	r0, r1, r1, ip
 801fd34:	4d11      	ldr	r5, [pc, #68]	@ (801fd7c <__atomic_exchange_8+0x6c>)
 801fd36:	f04f 0001 	mov.w	r0, #1
 801fd3a:	0909      	lsrs	r1, r1, #4
 801fd3c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801fd40:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801fd44:	ebac 0c01 	sub.w	ip, ip, r1
 801fd48:	eb05 010c 	add.w	r1, r5, ip
 801fd4c:	e8d1 4f4f 	ldrexb	r4, [r1]
 801fd50:	e8c1 0f46 	strexb	r6, r0, [r1]
 801fd54:	2e00      	cmp	r6, #0
 801fd56:	d1f9      	bne.n	801fd4c <__atomic_exchange_8+0x3c>
 801fd58:	b2e4      	uxtb	r4, r4
 801fd5a:	f3bf 8f5b 	dmb	ish
 801fd5e:	2c00      	cmp	r4, #0
 801fd60:	d1f4      	bne.n	801fd4c <__atomic_exchange_8+0x3c>
 801fd62:	e9de 0100 	ldrd	r0, r1, [lr]
 801fd66:	e9ce 2300 	strd	r2, r3, [lr]
 801fd6a:	f3bf 8f5b 	dmb	ish
 801fd6e:	f805 400c 	strb.w	r4, [r5, ip]
 801fd72:	bd70      	pop	{r4, r5, r6, pc}
 801fd74:	27d4eb2d 	.word	0x27d4eb2d
 801fd78:	b21642c9 	.word	0xb21642c9
 801fd7c:	200427d0 	.word	0x200427d0

0801fd80 <rcutils_get_env>:
 801fd80:	b168      	cbz	r0, 801fd9e <rcutils_get_env+0x1e>
 801fd82:	b510      	push	{r4, lr}
 801fd84:	460c      	mov	r4, r1
 801fd86:	b129      	cbz	r1, 801fd94 <rcutils_get_env+0x14>
 801fd88:	f008 fab4 	bl	80282f4 <getenv>
 801fd8c:	b120      	cbz	r0, 801fd98 <rcutils_get_env+0x18>
 801fd8e:	6020      	str	r0, [r4, #0]
 801fd90:	2000      	movs	r0, #0
 801fd92:	bd10      	pop	{r4, pc}
 801fd94:	4803      	ldr	r0, [pc, #12]	@ (801fda4 <rcutils_get_env+0x24>)
 801fd96:	bd10      	pop	{r4, pc}
 801fd98:	4b03      	ldr	r3, [pc, #12]	@ (801fda8 <rcutils_get_env+0x28>)
 801fd9a:	6023      	str	r3, [r4, #0]
 801fd9c:	bd10      	pop	{r4, pc}
 801fd9e:	4803      	ldr	r0, [pc, #12]	@ (801fdac <rcutils_get_env+0x2c>)
 801fda0:	4770      	bx	lr
 801fda2:	bf00      	nop
 801fda4:	0802fa20 	.word	0x0802fa20
 801fda8:	080300b8 	.word	0x080300b8
 801fdac:	0802fa04 	.word	0x0802fa04

0801fdb0 <rcutils_is_directory>:
 801fdb0:	2000      	movs	r0, #0
 801fdb2:	4770      	bx	lr

0801fdb4 <rcutils_join_path>:
 801fdb4:	b082      	sub	sp, #8
 801fdb6:	2000      	movs	r0, #0
 801fdb8:	e88d 000c 	stmia.w	sp, {r2, r3}
 801fdbc:	b002      	add	sp, #8
 801fdbe:	4770      	bx	lr

0801fdc0 <rcutils_to_native_path>:
 801fdc0:	b084      	sub	sp, #16
 801fdc2:	2000      	movs	r0, #0
 801fdc4:	f10d 0c04 	add.w	ip, sp, #4
 801fdc8:	b004      	add	sp, #16
 801fdca:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801fdce:	4770      	bx	lr

0801fdd0 <rcutils_format_string_limit>:
 801fdd0:	b40f      	push	{r0, r1, r2, r3}
 801fdd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fdd4:	b083      	sub	sp, #12
 801fdd6:	ac08      	add	r4, sp, #32
 801fdd8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801fdda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801fdde:	b326      	cbz	r6, 801fe2a <rcutils_format_string_limit+0x5a>
 801fde0:	a808      	add	r0, sp, #32
 801fde2:	f7fc fe49 	bl	801ca78 <rcutils_allocator_is_valid>
 801fde6:	b300      	cbz	r0, 801fe2a <rcutils_format_string_limit+0x5a>
 801fde8:	2100      	movs	r1, #0
 801fdea:	ab0f      	add	r3, sp, #60	@ 0x3c
 801fdec:	4632      	mov	r2, r6
 801fdee:	4608      	mov	r0, r1
 801fdf0:	e9cd 3300 	strd	r3, r3, [sp]
 801fdf4:	f000 f906 	bl	8020004 <rcutils_vsnprintf>
 801fdf8:	1c43      	adds	r3, r0, #1
 801fdfa:	4605      	mov	r5, r0
 801fdfc:	d015      	beq.n	801fe2a <rcutils_format_string_limit+0x5a>
 801fdfe:	1c47      	adds	r7, r0, #1
 801fe00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fe02:	429f      	cmp	r7, r3
 801fe04:	d901      	bls.n	801fe0a <rcutils_format_string_limit+0x3a>
 801fe06:	1e5d      	subs	r5, r3, #1
 801fe08:	461f      	mov	r7, r3
 801fe0a:	9b08      	ldr	r3, [sp, #32]
 801fe0c:	4638      	mov	r0, r7
 801fe0e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801fe10:	4798      	blx	r3
 801fe12:	4604      	mov	r4, r0
 801fe14:	b148      	cbz	r0, 801fe2a <rcutils_format_string_limit+0x5a>
 801fe16:	4632      	mov	r2, r6
 801fe18:	4639      	mov	r1, r7
 801fe1a:	9b01      	ldr	r3, [sp, #4]
 801fe1c:	f000 f8f2 	bl	8020004 <rcutils_vsnprintf>
 801fe20:	2800      	cmp	r0, #0
 801fe22:	db09      	blt.n	801fe38 <rcutils_format_string_limit+0x68>
 801fe24:	2300      	movs	r3, #0
 801fe26:	5563      	strb	r3, [r4, r5]
 801fe28:	e000      	b.n	801fe2c <rcutils_format_string_limit+0x5c>
 801fe2a:	2400      	movs	r4, #0
 801fe2c:	4620      	mov	r0, r4
 801fe2e:	b003      	add	sp, #12
 801fe30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801fe34:	b004      	add	sp, #16
 801fe36:	4770      	bx	lr
 801fe38:	4620      	mov	r0, r4
 801fe3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe3c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801fe3e:	2400      	movs	r4, #0
 801fe40:	4798      	blx	r3
 801fe42:	e7f3      	b.n	801fe2c <rcutils_format_string_limit+0x5c>

0801fe44 <rcutils_repl_str>:
 801fe44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe48:	ed2d 8b02 	vpush	{d8}
 801fe4c:	b087      	sub	sp, #28
 801fe4e:	2600      	movs	r6, #0
 801fe50:	4680      	mov	r8, r0
 801fe52:	468a      	mov	sl, r1
 801fe54:	9000      	str	r0, [sp, #0]
 801fe56:	4608      	mov	r0, r1
 801fe58:	ee08 2a10 	vmov	s16, r2
 801fe5c:	4699      	mov	r9, r3
 801fe5e:	2510      	movs	r5, #16
 801fe60:	f7e0 fa36 	bl	80002d0 <strlen>
 801fe64:	4637      	mov	r7, r6
 801fe66:	46b3      	mov	fp, r6
 801fe68:	9001      	str	r0, [sp, #4]
 801fe6a:	e01e      	b.n	801feaa <rcutils_repl_str+0x66>
 801fe6c:	f10b 0b01 	add.w	fp, fp, #1
 801fe70:	9b01      	ldr	r3, [sp, #4]
 801fe72:	455e      	cmp	r6, fp
 801fe74:	eb04 0803 	add.w	r8, r4, r3
 801fe78:	d211      	bcs.n	801fe9e <rcutils_repl_str+0x5a>
 801fe7a:	442e      	add	r6, r5
 801fe7c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801fe80:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801fe84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fe88:	00b1      	lsls	r1, r6, #2
 801fe8a:	4798      	blx	r3
 801fe8c:	2800      	cmp	r0, #0
 801fe8e:	f000 8088 	beq.w	801ffa2 <rcutils_repl_str+0x15e>
 801fe92:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801fe96:	4607      	mov	r7, r0
 801fe98:	bf28      	it	cs
 801fe9a:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801fe9e:	9a00      	ldr	r2, [sp, #0]
 801fea0:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801fea4:	1aa4      	subs	r4, r4, r2
 801fea6:	f843 4c04 	str.w	r4, [r3, #-4]
 801feaa:	4651      	mov	r1, sl
 801feac:	4640      	mov	r0, r8
 801feae:	f009 fbe0 	bl	8029672 <strstr>
 801feb2:	4604      	mov	r4, r0
 801feb4:	4638      	mov	r0, r7
 801feb6:	2c00      	cmp	r4, #0
 801feb8:	d1d8      	bne.n	801fe6c <rcutils_repl_str+0x28>
 801feba:	4640      	mov	r0, r8
 801febc:	f7e0 fa08 	bl	80002d0 <strlen>
 801fec0:	9b00      	ldr	r3, [sp, #0]
 801fec2:	eba8 0803 	sub.w	r8, r8, r3
 801fec6:	eb08 0400 	add.w	r4, r8, r0
 801feca:	9402      	str	r4, [sp, #8]
 801fecc:	f1bb 0f00 	cmp.w	fp, #0
 801fed0:	d045      	beq.n	801ff5e <rcutils_repl_str+0x11a>
 801fed2:	ee18 0a10 	vmov	r0, s16
 801fed6:	f7e0 f9fb 	bl	80002d0 <strlen>
 801feda:	9a01      	ldr	r2, [sp, #4]
 801fedc:	4606      	mov	r6, r0
 801fede:	f8d9 3000 	ldr.w	r3, [r9]
 801fee2:	1a82      	subs	r2, r0, r2
 801fee4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801fee8:	fb0b 4202 	mla	r2, fp, r2, r4
 801feec:	1c50      	adds	r0, r2, #1
 801feee:	9205      	str	r2, [sp, #20]
 801fef0:	4798      	blx	r3
 801fef2:	4682      	mov	sl, r0
 801fef4:	2800      	cmp	r0, #0
 801fef6:	d054      	beq.n	801ffa2 <rcutils_repl_str+0x15e>
 801fef8:	683a      	ldr	r2, [r7, #0]
 801fefa:	463d      	mov	r5, r7
 801fefc:	9900      	ldr	r1, [sp, #0]
 801fefe:	2401      	movs	r4, #1
 801ff00:	f009 fcb3 	bl	802986a <memcpy>
 801ff04:	683b      	ldr	r3, [r7, #0]
 801ff06:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801ff0a:	eb0a 0803 	add.w	r8, sl, r3
 801ff0e:	ee18 7a10 	vmov	r7, s16
 801ff12:	f8dd a000 	ldr.w	sl, [sp]
 801ff16:	f8cd 9000 	str.w	r9, [sp]
 801ff1a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801ff1e:	4632      	mov	r2, r6
 801ff20:	4639      	mov	r1, r7
 801ff22:	4640      	mov	r0, r8
 801ff24:	44b0      	add	r8, r6
 801ff26:	f009 fca0 	bl	802986a <memcpy>
 801ff2a:	f855 2b04 	ldr.w	r2, [r5], #4
 801ff2e:	45a3      	cmp	fp, r4
 801ff30:	444a      	add	r2, r9
 801ff32:	eb0a 0102 	add.w	r1, sl, r2
 801ff36:	d02a      	beq.n	801ff8e <rcutils_repl_str+0x14a>
 801ff38:	6828      	ldr	r0, [r5, #0]
 801ff3a:	1a82      	subs	r2, r0, r2
 801ff3c:	4640      	mov	r0, r8
 801ff3e:	4490      	add	r8, r2
 801ff40:	f009 fc93 	bl	802986a <memcpy>
 801ff44:	1c62      	adds	r2, r4, #1
 801ff46:	45a3      	cmp	fp, r4
 801ff48:	4614      	mov	r4, r2
 801ff4a:	d8e8      	bhi.n	801ff1e <rcutils_repl_str+0xda>
 801ff4c:	f8dd 9000 	ldr.w	r9, [sp]
 801ff50:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801ff54:	2300      	movs	r3, #0
 801ff56:	9a05      	ldr	r2, [sp, #20]
 801ff58:	f80a 3002 	strb.w	r3, [sl, r2]
 801ff5c:	e00b      	b.n	801ff76 <rcutils_repl_str+0x132>
 801ff5e:	4620      	mov	r0, r4
 801ff60:	f8d9 3000 	ldr.w	r3, [r9]
 801ff64:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801ff68:	3001      	adds	r0, #1
 801ff6a:	4798      	blx	r3
 801ff6c:	4682      	mov	sl, r0
 801ff6e:	b110      	cbz	r0, 801ff76 <rcutils_repl_str+0x132>
 801ff70:	9900      	ldr	r1, [sp, #0]
 801ff72:	f009 fc72 	bl	802985a <strcpy>
 801ff76:	4638      	mov	r0, r7
 801ff78:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ff7c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801ff80:	4798      	blx	r3
 801ff82:	4650      	mov	r0, sl
 801ff84:	b007      	add	sp, #28
 801ff86:	ecbd 8b02 	vpop	{d8}
 801ff8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff8e:	9b02      	ldr	r3, [sp, #8]
 801ff90:	4640      	mov	r0, r8
 801ff92:	f8dd 9000 	ldr.w	r9, [sp]
 801ff96:	1a9a      	subs	r2, r3, r2
 801ff98:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801ff9c:	f009 fc65 	bl	802986a <memcpy>
 801ffa0:	e7d8      	b.n	801ff54 <rcutils_repl_str+0x110>
 801ffa2:	f04f 0a00 	mov.w	sl, #0
 801ffa6:	e7e6      	b.n	801ff76 <rcutils_repl_str+0x132>

0801ffa8 <rcutils_snprintf>:
 801ffa8:	b40c      	push	{r2, r3}
 801ffaa:	b530      	push	{r4, r5, lr}
 801ffac:	b083      	sub	sp, #12
 801ffae:	ab06      	add	r3, sp, #24
 801ffb0:	f853 2b04 	ldr.w	r2, [r3], #4
 801ffb4:	9301      	str	r3, [sp, #4]
 801ffb6:	b1e2      	cbz	r2, 801fff2 <rcutils_snprintf+0x4a>
 801ffb8:	fab0 f480 	clz	r4, r0
 801ffbc:	fab1 f581 	clz	r5, r1
 801ffc0:	ea50 0c01 	orrs.w	ip, r0, r1
 801ffc4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801ffc8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801ffcc:	d008      	beq.n	801ffe0 <rcutils_snprintf+0x38>
 801ffce:	b984      	cbnz	r4, 801fff2 <rcutils_snprintf+0x4a>
 801ffd0:	b97d      	cbnz	r5, 801fff2 <rcutils_snprintf+0x4a>
 801ffd2:	f009 fa5b 	bl	802948c <vsniprintf>
 801ffd6:	b003      	add	sp, #12
 801ffd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ffdc:	b002      	add	sp, #8
 801ffde:	4770      	bx	lr
 801ffe0:	4661      	mov	r1, ip
 801ffe2:	4660      	mov	r0, ip
 801ffe4:	f009 fa52 	bl	802948c <vsniprintf>
 801ffe8:	b003      	add	sp, #12
 801ffea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ffee:	b002      	add	sp, #8
 801fff0:	4770      	bx	lr
 801fff2:	4b03      	ldr	r3, [pc, #12]	@ (8020000 <rcutils_snprintf+0x58>)
 801fff4:	2216      	movs	r2, #22
 801fff6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fffa:	601a      	str	r2, [r3, #0]
 801fffc:	e7eb      	b.n	801ffd6 <rcutils_snprintf+0x2e>
 801fffe:	bf00      	nop
 8020000:	20047370 	.word	0x20047370

08020004 <rcutils_vsnprintf>:
 8020004:	b1f2      	cbz	r2, 8020044 <rcutils_vsnprintf+0x40>
 8020006:	ea50 0c01 	orrs.w	ip, r0, r1
 802000a:	b530      	push	{r4, r5, lr}
 802000c:	fab0 f480 	clz	r4, r0
 8020010:	fab1 f581 	clz	r5, r1
 8020014:	468e      	mov	lr, r1
 8020016:	ea4f 1454 	mov.w	r4, r4, lsr #5
 802001a:	ea4f 1555 	mov.w	r5, r5, lsr #5
 802001e:	d005      	beq.n	802002c <rcutils_vsnprintf+0x28>
 8020020:	b954      	cbnz	r4, 8020038 <rcutils_vsnprintf+0x34>
 8020022:	b94d      	cbnz	r5, 8020038 <rcutils_vsnprintf+0x34>
 8020024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020028:	f009 ba30 	b.w	802948c <vsniprintf>
 802002c:	4661      	mov	r1, ip
 802002e:	4660      	mov	r0, ip
 8020030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020034:	f009 ba2a 	b.w	802948c <vsniprintf>
 8020038:	4b05      	ldr	r3, [pc, #20]	@ (8020050 <rcutils_vsnprintf+0x4c>)
 802003a:	2216      	movs	r2, #22
 802003c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020040:	601a      	str	r2, [r3, #0]
 8020042:	bd30      	pop	{r4, r5, pc}
 8020044:	4b02      	ldr	r3, [pc, #8]	@ (8020050 <rcutils_vsnprintf+0x4c>)
 8020046:	2216      	movs	r2, #22
 8020048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802004c:	601a      	str	r2, [r3, #0]
 802004e:	4770      	bx	lr
 8020050:	20047370 	.word	0x20047370

08020054 <rcutils_strdup>:
 8020054:	b084      	sub	sp, #16
 8020056:	b570      	push	{r4, r5, r6, lr}
 8020058:	b082      	sub	sp, #8
 802005a:	4605      	mov	r5, r0
 802005c:	ac07      	add	r4, sp, #28
 802005e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8020062:	b1b0      	cbz	r0, 8020092 <rcutils_strdup+0x3e>
 8020064:	f7e0 f934 	bl	80002d0 <strlen>
 8020068:	1c42      	adds	r2, r0, #1
 802006a:	9b07      	ldr	r3, [sp, #28]
 802006c:	4606      	mov	r6, r0
 802006e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020070:	4610      	mov	r0, r2
 8020072:	9201      	str	r2, [sp, #4]
 8020074:	4798      	blx	r3
 8020076:	4604      	mov	r4, r0
 8020078:	b128      	cbz	r0, 8020086 <rcutils_strdup+0x32>
 802007a:	9a01      	ldr	r2, [sp, #4]
 802007c:	4629      	mov	r1, r5
 802007e:	f009 fbf4 	bl	802986a <memcpy>
 8020082:	2300      	movs	r3, #0
 8020084:	55a3      	strb	r3, [r4, r6]
 8020086:	4620      	mov	r0, r4
 8020088:	b002      	add	sp, #8
 802008a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802008e:	b004      	add	sp, #16
 8020090:	4770      	bx	lr
 8020092:	4604      	mov	r4, r0
 8020094:	e7f7      	b.n	8020086 <rcutils_strdup+0x32>
 8020096:	bf00      	nop

08020098 <rcutils_strndup>:
 8020098:	b082      	sub	sp, #8
 802009a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802009c:	ac06      	add	r4, sp, #24
 802009e:	4605      	mov	r5, r0
 80200a0:	e884 000c 	stmia.w	r4, {r2, r3}
 80200a4:	b188      	cbz	r0, 80200ca <rcutils_strndup+0x32>
 80200a6:	1c4f      	adds	r7, r1, #1
 80200a8:	460e      	mov	r6, r1
 80200aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80200ac:	4638      	mov	r0, r7
 80200ae:	4790      	blx	r2
 80200b0:	4604      	mov	r4, r0
 80200b2:	b128      	cbz	r0, 80200c0 <rcutils_strndup+0x28>
 80200b4:	463a      	mov	r2, r7
 80200b6:	4629      	mov	r1, r5
 80200b8:	f009 fbd7 	bl	802986a <memcpy>
 80200bc:	2300      	movs	r3, #0
 80200be:	55a3      	strb	r3, [r4, r6]
 80200c0:	4620      	mov	r0, r4
 80200c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80200c6:	b002      	add	sp, #8
 80200c8:	4770      	bx	lr
 80200ca:	4604      	mov	r4, r0
 80200cc:	e7f8      	b.n	80200c0 <rcutils_strndup+0x28>
 80200ce:	bf00      	nop

080200d0 <rcutils_get_zero_initialized_string_map>:
 80200d0:	2000      	movs	r0, #0
 80200d2:	4b01      	ldr	r3, [pc, #4]	@ (80200d8 <rcutils_get_zero_initialized_string_map+0x8>)
 80200d4:	6018      	str	r0, [r3, #0]
 80200d6:	4770      	bx	lr
 80200d8:	200427e8 	.word	0x200427e8

080200dc <rcutils_string_map_reserve>:
 80200dc:	2800      	cmp	r0, #0
 80200de:	d05e      	beq.n	802019e <rcutils_string_map_reserve+0xc2>
 80200e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200e4:	460c      	mov	r4, r1
 80200e6:	6801      	ldr	r1, [r0, #0]
 80200e8:	b082      	sub	sp, #8
 80200ea:	4605      	mov	r5, r0
 80200ec:	b129      	cbz	r1, 80200fa <rcutils_string_map_reserve+0x1e>
 80200ee:	68cb      	ldr	r3, [r1, #12]
 80200f0:	42a3      	cmp	r3, r4
 80200f2:	d906      	bls.n	8020102 <rcutils_string_map_reserve+0x26>
 80200f4:	461c      	mov	r4, r3
 80200f6:	2900      	cmp	r1, #0
 80200f8:	d1f9      	bne.n	80200ee <rcutils_string_map_reserve+0x12>
 80200fa:	201f      	movs	r0, #31
 80200fc:	b002      	add	sp, #8
 80200fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020102:	688b      	ldr	r3, [r1, #8]
 8020104:	42a3      	cmp	r3, r4
 8020106:	d046      	beq.n	8020196 <rcutils_string_map_reserve+0xba>
 8020108:	6a0e      	ldr	r6, [r1, #32]
 802010a:	2c00      	cmp	r4, #0
 802010c:	d033      	beq.n	8020176 <rcutils_string_map_reserve+0x9a>
 802010e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8020112:	d242      	bcs.n	802019a <rcutils_string_map_reserve+0xbe>
 8020114:	00a7      	lsls	r7, r4, #2
 8020116:	f8d1 8018 	ldr.w	r8, [r1, #24]
 802011a:	6808      	ldr	r0, [r1, #0]
 802011c:	4632      	mov	r2, r6
 802011e:	4639      	mov	r1, r7
 8020120:	47c0      	blx	r8
 8020122:	2800      	cmp	r0, #0
 8020124:	d039      	beq.n	802019a <rcutils_string_map_reserve+0xbe>
 8020126:	682b      	ldr	r3, [r5, #0]
 8020128:	4632      	mov	r2, r6
 802012a:	4639      	mov	r1, r7
 802012c:	6018      	str	r0, [r3, #0]
 802012e:	6858      	ldr	r0, [r3, #4]
 8020130:	47c0      	blx	r8
 8020132:	2800      	cmp	r0, #0
 8020134:	d031      	beq.n	802019a <rcutils_string_map_reserve+0xbe>
 8020136:	682d      	ldr	r5, [r5, #0]
 8020138:	68ab      	ldr	r3, [r5, #8]
 802013a:	6068      	str	r0, [r5, #4]
 802013c:	42a3      	cmp	r3, r4
 802013e:	d225      	bcs.n	802018c <rcutils_string_map_reserve+0xb0>
 8020140:	682a      	ldr	r2, [r5, #0]
 8020142:	eb00 0c07 	add.w	ip, r0, r7
 8020146:	0099      	lsls	r1, r3, #2
 8020148:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 802014c:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8020150:	45e6      	cmp	lr, ip
 8020152:	d203      	bcs.n	802015c <rcutils_string_map_reserve+0x80>
 8020154:	eb02 0c07 	add.w	ip, r2, r7
 8020158:	4566      	cmp	r6, ip
 802015a:	d322      	bcc.n	80201a2 <rcutils_string_map_reserve+0xc6>
 802015c:	1ae3      	subs	r3, r4, r3
 802015e:	4670      	mov	r0, lr
 8020160:	2100      	movs	r1, #0
 8020162:	009a      	lsls	r2, r3, #2
 8020164:	9201      	str	r2, [sp, #4]
 8020166:	f009 fa5d 	bl	8029624 <memset>
 802016a:	9a01      	ldr	r2, [sp, #4]
 802016c:	2100      	movs	r1, #0
 802016e:	4630      	mov	r0, r6
 8020170:	f009 fa58 	bl	8029624 <memset>
 8020174:	e00a      	b.n	802018c <rcutils_string_map_reserve+0xb0>
 8020176:	694f      	ldr	r7, [r1, #20]
 8020178:	6808      	ldr	r0, [r1, #0]
 802017a:	4631      	mov	r1, r6
 802017c:	47b8      	blx	r7
 802017e:	682b      	ldr	r3, [r5, #0]
 8020180:	4631      	mov	r1, r6
 8020182:	6858      	ldr	r0, [r3, #4]
 8020184:	601c      	str	r4, [r3, #0]
 8020186:	47b8      	blx	r7
 8020188:	682d      	ldr	r5, [r5, #0]
 802018a:	606c      	str	r4, [r5, #4]
 802018c:	2000      	movs	r0, #0
 802018e:	60ac      	str	r4, [r5, #8]
 8020190:	b002      	add	sp, #8
 8020192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020196:	2000      	movs	r0, #0
 8020198:	e7b0      	b.n	80200fc <rcutils_string_map_reserve+0x20>
 802019a:	200a      	movs	r0, #10
 802019c:	e7ae      	b.n	80200fc <rcutils_string_map_reserve+0x20>
 802019e:	200b      	movs	r0, #11
 80201a0:	4770      	bx	lr
 80201a2:	1f0b      	subs	r3, r1, #4
 80201a4:	4418      	add	r0, r3
 80201a6:	4413      	add	r3, r2
 80201a8:	3a04      	subs	r2, #4
 80201aa:	4417      	add	r7, r2
 80201ac:	2200      	movs	r2, #0
 80201ae:	f843 2f04 	str.w	r2, [r3, #4]!
 80201b2:	42bb      	cmp	r3, r7
 80201b4:	f840 2f04 	str.w	r2, [r0, #4]!
 80201b8:	d1f9      	bne.n	80201ae <rcutils_string_map_reserve+0xd2>
 80201ba:	e7e7      	b.n	802018c <rcutils_string_map_reserve+0xb0>

080201bc <rcutils_string_map_init>:
 80201bc:	b082      	sub	sp, #8
 80201be:	b570      	push	{r4, r5, r6, lr}
 80201c0:	ac04      	add	r4, sp, #16
 80201c2:	e884 000c 	stmia.w	r4, {r2, r3}
 80201c6:	b380      	cbz	r0, 802022a <rcutils_string_map_init+0x6e>
 80201c8:	6806      	ldr	r6, [r0, #0]
 80201ca:	4604      	mov	r4, r0
 80201cc:	b12e      	cbz	r6, 80201da <rcutils_string_map_init+0x1e>
 80201ce:	251e      	movs	r5, #30
 80201d0:	4628      	mov	r0, r5
 80201d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80201d6:	b002      	add	sp, #8
 80201d8:	4770      	bx	lr
 80201da:	a804      	add	r0, sp, #16
 80201dc:	460d      	mov	r5, r1
 80201de:	f7fc fc4b 	bl	801ca78 <rcutils_allocator_is_valid>
 80201e2:	b310      	cbz	r0, 802022a <rcutils_string_map_init+0x6e>
 80201e4:	9b04      	ldr	r3, [sp, #16]
 80201e6:	2024      	movs	r0, #36	@ 0x24
 80201e8:	9908      	ldr	r1, [sp, #32]
 80201ea:	4798      	blx	r3
 80201ec:	6020      	str	r0, [r4, #0]
 80201ee:	b310      	cbz	r0, 8020236 <rcutils_string_map_init+0x7a>
 80201f0:	f10d 0e10 	add.w	lr, sp, #16
 80201f4:	f100 0c10 	add.w	ip, r0, #16
 80201f8:	e9c0 6600 	strd	r6, r6, [r0]
 80201fc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8020200:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8020204:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020208:	f8de 3000 	ldr.w	r3, [lr]
 802020c:	4629      	mov	r1, r5
 802020e:	4620      	mov	r0, r4
 8020210:	f8cc 3000 	str.w	r3, [ip]
 8020214:	f7ff ff62 	bl	80200dc <rcutils_string_map_reserve>
 8020218:	4605      	mov	r5, r0
 802021a:	2800      	cmp	r0, #0
 802021c:	d0d8      	beq.n	80201d0 <rcutils_string_map_init+0x14>
 802021e:	9b05      	ldr	r3, [sp, #20]
 8020220:	9908      	ldr	r1, [sp, #32]
 8020222:	6820      	ldr	r0, [r4, #0]
 8020224:	4798      	blx	r3
 8020226:	6026      	str	r6, [r4, #0]
 8020228:	e7d2      	b.n	80201d0 <rcutils_string_map_init+0x14>
 802022a:	250b      	movs	r5, #11
 802022c:	4628      	mov	r0, r5
 802022e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020232:	b002      	add	sp, #8
 8020234:	4770      	bx	lr
 8020236:	250a      	movs	r5, #10
 8020238:	e7ca      	b.n	80201d0 <rcutils_string_map_init+0x14>
 802023a:	bf00      	nop

0802023c <rcutils_string_map_fini>:
 802023c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020240:	b082      	sub	sp, #8
 8020242:	2800      	cmp	r0, #0
 8020244:	d03a      	beq.n	80202bc <rcutils_string_map_fini+0x80>
 8020246:	6804      	ldr	r4, [r0, #0]
 8020248:	4606      	mov	r6, r0
 802024a:	2c00      	cmp	r4, #0
 802024c:	d032      	beq.n	80202b4 <rcutils_string_map_fini+0x78>
 802024e:	68a3      	ldr	r3, [r4, #8]
 8020250:	b32b      	cbz	r3, 802029e <rcutils_string_map_fini+0x62>
 8020252:	2500      	movs	r5, #0
 8020254:	6822      	ldr	r2, [r4, #0]
 8020256:	462f      	mov	r7, r5
 8020258:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 802025c:	b1e0      	cbz	r0, 8020298 <rcutils_string_map_fini+0x5c>
 802025e:	6a21      	ldr	r1, [r4, #32]
 8020260:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8020264:	9101      	str	r1, [sp, #4]
 8020266:	47c0      	blx	r8
 8020268:	9901      	ldr	r1, [sp, #4]
 802026a:	e9d4 3200 	ldrd	r3, r2, [r4]
 802026e:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8020272:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8020276:	47c0      	blx	r8
 8020278:	68e3      	ldr	r3, [r4, #12]
 802027a:	6862      	ldr	r2, [r4, #4]
 802027c:	3b01      	subs	r3, #1
 802027e:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8020282:	3501      	adds	r5, #1
 8020284:	60e3      	str	r3, [r4, #12]
 8020286:	6834      	ldr	r4, [r6, #0]
 8020288:	68a3      	ldr	r3, [r4, #8]
 802028a:	429d      	cmp	r5, r3
 802028c:	d207      	bcs.n	802029e <rcutils_string_map_fini+0x62>
 802028e:	6822      	ldr	r2, [r4, #0]
 8020290:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8020294:	2800      	cmp	r0, #0
 8020296:	d1e2      	bne.n	802025e <rcutils_string_map_fini+0x22>
 8020298:	3501      	adds	r5, #1
 802029a:	429d      	cmp	r5, r3
 802029c:	d3dc      	bcc.n	8020258 <rcutils_string_map_fini+0x1c>
 802029e:	2100      	movs	r1, #0
 80202a0:	4630      	mov	r0, r6
 80202a2:	f7ff ff1b 	bl	80200dc <rcutils_string_map_reserve>
 80202a6:	4604      	mov	r4, r0
 80202a8:	b920      	cbnz	r0, 80202b4 <rcutils_string_map_fini+0x78>
 80202aa:	6830      	ldr	r0, [r6, #0]
 80202ac:	6943      	ldr	r3, [r0, #20]
 80202ae:	6a01      	ldr	r1, [r0, #32]
 80202b0:	4798      	blx	r3
 80202b2:	6034      	str	r4, [r6, #0]
 80202b4:	4620      	mov	r0, r4
 80202b6:	b002      	add	sp, #8
 80202b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80202bc:	240b      	movs	r4, #11
 80202be:	4620      	mov	r0, r4
 80202c0:	b002      	add	sp, #8
 80202c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80202c6:	bf00      	nop

080202c8 <rcutils_string_map_getn>:
 80202c8:	b378      	cbz	r0, 802032a <rcutils_string_map_getn+0x62>
 80202ca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202ce:	f8d0 b000 	ldr.w	fp, [r0]
 80202d2:	f1bb 0f00 	cmp.w	fp, #0
 80202d6:	d01f      	beq.n	8020318 <rcutils_string_map_getn+0x50>
 80202d8:	fab1 f481 	clz	r4, r1
 80202dc:	4688      	mov	r8, r1
 80202de:	0964      	lsrs	r4, r4, #5
 80202e0:	b1d1      	cbz	r1, 8020318 <rcutils_string_map_getn+0x50>
 80202e2:	f8db 7008 	ldr.w	r7, [fp, #8]
 80202e6:	f8db 6000 	ldr.w	r6, [fp]
 80202ea:	b1af      	cbz	r7, 8020318 <rcutils_string_map_getn+0x50>
 80202ec:	4691      	mov	r9, r2
 80202ee:	3e04      	subs	r6, #4
 80202f0:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80202f4:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80202f8:	3401      	adds	r4, #1
 80202fa:	4628      	mov	r0, r5
 80202fc:	b155      	cbz	r5, 8020314 <rcutils_string_map_getn+0x4c>
 80202fe:	f7df ffe7 	bl	80002d0 <strlen>
 8020302:	4602      	mov	r2, r0
 8020304:	4629      	mov	r1, r5
 8020306:	4640      	mov	r0, r8
 8020308:	454a      	cmp	r2, r9
 802030a:	bf38      	it	cc
 802030c:	464a      	movcc	r2, r9
 802030e:	f009 f99e 	bl	802964e <strncmp>
 8020312:	b120      	cbz	r0, 802031e <rcutils_string_map_getn+0x56>
 8020314:	42a7      	cmp	r7, r4
 8020316:	d1eb      	bne.n	80202f0 <rcutils_string_map_getn+0x28>
 8020318:	2000      	movs	r0, #0
 802031a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802031e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8020322:	f853 000a 	ldr.w	r0, [r3, sl]
 8020326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802032a:	4770      	bx	lr
 802032c:	0000      	movs	r0, r0
	...

08020330 <rmw_get_zero_initialized_context>:
 8020330:	b510      	push	{r4, lr}
 8020332:	4604      	mov	r4, r0
 8020334:	3010      	adds	r0, #16
 8020336:	f000 f80f 	bl	8020358 <rmw_get_zero_initialized_init_options>
 802033a:	2300      	movs	r3, #0
 802033c:	4620      	mov	r0, r4
 802033e:	60a3      	str	r3, [r4, #8]
 8020340:	64a3      	str	r3, [r4, #72]	@ 0x48
 8020342:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8020344:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8020350 <rmw_get_zero_initialized_context+0x20>
 8020348:	ed84 7b00 	vstr	d7, [r4]
 802034c:	bd10      	pop	{r4, pc}
 802034e:	bf00      	nop
	...

08020358 <rmw_get_zero_initialized_init_options>:
 8020358:	b510      	push	{r4, lr}
 802035a:	4604      	mov	r4, r0
 802035c:	2238      	movs	r2, #56	@ 0x38
 802035e:	2100      	movs	r1, #0
 8020360:	f009 f960 	bl	8029624 <memset>
 8020364:	f104 0010 	add.w	r0, r4, #16
 8020368:	f000 f806 	bl	8020378 <rmw_get_default_security_options>
 802036c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020370:	4620      	mov	r0, r4
 8020372:	60e3      	str	r3, [r4, #12]
 8020374:	bd10      	pop	{r4, pc}
 8020376:	bf00      	nop

08020378 <rmw_get_default_security_options>:
 8020378:	2200      	movs	r2, #0
 802037a:	7002      	strb	r2, [r0, #0]
 802037c:	6042      	str	r2, [r0, #4]
 802037e:	4770      	bx	lr

08020380 <rmw_subscription_content_filter_options_fini>:
 8020380:	b1b0      	cbz	r0, 80203b0 <rmw_subscription_content_filter_options_fini+0x30>
 8020382:	b538      	push	{r3, r4, r5, lr}
 8020384:	4604      	mov	r4, r0
 8020386:	4608      	mov	r0, r1
 8020388:	460d      	mov	r5, r1
 802038a:	f7fc fb75 	bl	801ca78 <rcutils_allocator_is_valid>
 802038e:	b168      	cbz	r0, 80203ac <rmw_subscription_content_filter_options_fini+0x2c>
 8020390:	6820      	ldr	r0, [r4, #0]
 8020392:	b120      	cbz	r0, 802039e <rmw_subscription_content_filter_options_fini+0x1e>
 8020394:	686b      	ldr	r3, [r5, #4]
 8020396:	6929      	ldr	r1, [r5, #16]
 8020398:	4798      	blx	r3
 802039a:	2300      	movs	r3, #0
 802039c:	6023      	str	r3, [r4, #0]
 802039e:	1d20      	adds	r0, r4, #4
 80203a0:	f006 fe22 	bl	8026fe8 <rcutils_string_array_fini>
 80203a4:	3800      	subs	r0, #0
 80203a6:	bf18      	it	ne
 80203a8:	2001      	movne	r0, #1
 80203aa:	bd38      	pop	{r3, r4, r5, pc}
 80203ac:	200b      	movs	r0, #11
 80203ae:	bd38      	pop	{r3, r4, r5, pc}
 80203b0:	200b      	movs	r0, #11
 80203b2:	4770      	bx	lr

080203b4 <rmw_get_default_subscription_options>:
 80203b4:	2200      	movs	r2, #0
 80203b6:	e9c0 2200 	strd	r2, r2, [r0]
 80203ba:	6082      	str	r2, [r0, #8]
 80203bc:	4770      	bx	lr
 80203be:	bf00      	nop

080203c0 <rmw_get_zero_initialized_message_info>:
 80203c0:	b510      	push	{r4, lr}
 80203c2:	4604      	mov	r4, r0
 80203c4:	2240      	movs	r2, #64	@ 0x40
 80203c6:	2100      	movs	r1, #0
 80203c8:	f009 f92c 	bl	8029624 <memset>
 80203cc:	4620      	mov	r0, r4
 80203ce:	bd10      	pop	{r4, pc}

080203d0 <rmw_validate_full_topic_name>:
 80203d0:	2800      	cmp	r0, #0
 80203d2:	d05d      	beq.n	8020490 <rmw_validate_full_topic_name+0xc0>
 80203d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203d8:	460d      	mov	r5, r1
 80203da:	2900      	cmp	r1, #0
 80203dc:	d05a      	beq.n	8020494 <rmw_validate_full_topic_name+0xc4>
 80203de:	4604      	mov	r4, r0
 80203e0:	4616      	mov	r6, r2
 80203e2:	f7df ff75 	bl	80002d0 <strlen>
 80203e6:	b150      	cbz	r0, 80203fe <rmw_validate_full_topic_name+0x2e>
 80203e8:	7823      	ldrb	r3, [r4, #0]
 80203ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80203ec:	d00e      	beq.n	802040c <rmw_validate_full_topic_name+0x3c>
 80203ee:	2302      	movs	r3, #2
 80203f0:	602b      	str	r3, [r5, #0]
 80203f2:	b146      	cbz	r6, 8020406 <rmw_validate_full_topic_name+0x36>
 80203f4:	2300      	movs	r3, #0
 80203f6:	4618      	mov	r0, r3
 80203f8:	6033      	str	r3, [r6, #0]
 80203fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203fe:	2301      	movs	r3, #1
 8020400:	602b      	str	r3, [r5, #0]
 8020402:	2e00      	cmp	r6, #0
 8020404:	d1f6      	bne.n	80203f4 <rmw_validate_full_topic_name+0x24>
 8020406:	2000      	movs	r0, #0
 8020408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802040c:	1e43      	subs	r3, r0, #1
 802040e:	5ce2      	ldrb	r2, [r4, r3]
 8020410:	2a2f      	cmp	r2, #47	@ 0x2f
 8020412:	d041      	beq.n	8020498 <rmw_validate_full_topic_name+0xc8>
 8020414:	1e62      	subs	r2, r4, #1
 8020416:	f1c4 0e01 	rsb	lr, r4, #1
 802041a:	eb02 0800 	add.w	r8, r2, r0
 802041e:	eb0e 0702 	add.w	r7, lr, r2
 8020422:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8020426:	f023 0120 	bic.w	r1, r3, #32
 802042a:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 802042e:	3941      	subs	r1, #65	@ 0x41
 8020430:	2919      	cmp	r1, #25
 8020432:	d90f      	bls.n	8020454 <rmw_validate_full_topic_name+0x84>
 8020434:	f1bc 0f0a 	cmp.w	ip, #10
 8020438:	d90c      	bls.n	8020454 <rmw_validate_full_topic_name+0x84>
 802043a:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 802043e:	fab3 f383 	clz	r3, r3
 8020442:	095b      	lsrs	r3, r3, #5
 8020444:	b933      	cbnz	r3, 8020454 <rmw_validate_full_topic_name+0x84>
 8020446:	2204      	movs	r2, #4
 8020448:	602a      	str	r2, [r5, #0]
 802044a:	2e00      	cmp	r6, #0
 802044c:	d0db      	beq.n	8020406 <rmw_validate_full_topic_name+0x36>
 802044e:	4618      	mov	r0, r3
 8020450:	6037      	str	r7, [r6, #0]
 8020452:	e7d2      	b.n	80203fa <rmw_validate_full_topic_name+0x2a>
 8020454:	4542      	cmp	r2, r8
 8020456:	d1e2      	bne.n	802041e <rmw_validate_full_topic_name+0x4e>
 8020458:	2301      	movs	r3, #1
 802045a:	4f1a      	ldr	r7, [pc, #104]	@ (80204c4 <rmw_validate_full_topic_name+0xf4>)
 802045c:	e004      	b.n	8020468 <rmw_validate_full_topic_name+0x98>
 802045e:	4298      	cmp	r0, r3
 8020460:	f104 0401 	add.w	r4, r4, #1
 8020464:	4613      	mov	r3, r2
 8020466:	d91c      	bls.n	80204a2 <rmw_validate_full_topic_name+0xd2>
 8020468:	4298      	cmp	r0, r3
 802046a:	f103 0201 	add.w	r2, r3, #1
 802046e:	d0f6      	beq.n	802045e <rmw_validate_full_topic_name+0x8e>
 8020470:	7821      	ldrb	r1, [r4, #0]
 8020472:	292f      	cmp	r1, #47	@ 0x2f
 8020474:	d1f3      	bne.n	802045e <rmw_validate_full_topic_name+0x8e>
 8020476:	7861      	ldrb	r1, [r4, #1]
 8020478:	292f      	cmp	r1, #47	@ 0x2f
 802047a:	d01e      	beq.n	80204ba <rmw_validate_full_topic_name+0xea>
 802047c:	5dc9      	ldrb	r1, [r1, r7]
 802047e:	0749      	lsls	r1, r1, #29
 8020480:	d5ed      	bpl.n	802045e <rmw_validate_full_topic_name+0x8e>
 8020482:	2206      	movs	r2, #6
 8020484:	602a      	str	r2, [r5, #0]
 8020486:	2e00      	cmp	r6, #0
 8020488:	d0bd      	beq.n	8020406 <rmw_validate_full_topic_name+0x36>
 802048a:	2000      	movs	r0, #0
 802048c:	6033      	str	r3, [r6, #0]
 802048e:	e7b4      	b.n	80203fa <rmw_validate_full_topic_name+0x2a>
 8020490:	200b      	movs	r0, #11
 8020492:	4770      	bx	lr
 8020494:	200b      	movs	r0, #11
 8020496:	e7b0      	b.n	80203fa <rmw_validate_full_topic_name+0x2a>
 8020498:	2203      	movs	r2, #3
 802049a:	602a      	str	r2, [r5, #0]
 802049c:	2e00      	cmp	r6, #0
 802049e:	d1f4      	bne.n	802048a <rmw_validate_full_topic_name+0xba>
 80204a0:	e7b1      	b.n	8020406 <rmw_validate_full_topic_name+0x36>
 80204a2:	28f7      	cmp	r0, #247	@ 0xf7
 80204a4:	d803      	bhi.n	80204ae <rmw_validate_full_topic_name+0xde>
 80204a6:	2300      	movs	r3, #0
 80204a8:	4618      	mov	r0, r3
 80204aa:	602b      	str	r3, [r5, #0]
 80204ac:	e7a5      	b.n	80203fa <rmw_validate_full_topic_name+0x2a>
 80204ae:	2307      	movs	r3, #7
 80204b0:	602b      	str	r3, [r5, #0]
 80204b2:	2e00      	cmp	r6, #0
 80204b4:	d0a7      	beq.n	8020406 <rmw_validate_full_topic_name+0x36>
 80204b6:	23f6      	movs	r3, #246	@ 0xf6
 80204b8:	e7e7      	b.n	802048a <rmw_validate_full_topic_name+0xba>
 80204ba:	2205      	movs	r2, #5
 80204bc:	602a      	str	r2, [r5, #0]
 80204be:	2e00      	cmp	r6, #0
 80204c0:	d1e3      	bne.n	802048a <rmw_validate_full_topic_name+0xba>
 80204c2:	e7a0      	b.n	8020406 <rmw_validate_full_topic_name+0x36>
 80204c4:	080301ce 	.word	0x080301ce

080204c8 <rmw_validate_namespace_with_size>:
 80204c8:	2800      	cmp	r0, #0
 80204ca:	d043      	beq.n	8020554 <rmw_validate_namespace_with_size+0x8c>
 80204cc:	b570      	push	{r4, r5, r6, lr}
 80204ce:	4614      	mov	r4, r2
 80204d0:	b0c2      	sub	sp, #264	@ 0x108
 80204d2:	b32a      	cbz	r2, 8020520 <rmw_validate_namespace_with_size+0x58>
 80204d4:	2901      	cmp	r1, #1
 80204d6:	460d      	mov	r5, r1
 80204d8:	461e      	mov	r6, r3
 80204da:	d102      	bne.n	80204e2 <rmw_validate_namespace_with_size+0x1a>
 80204dc:	7803      	ldrb	r3, [r0, #0]
 80204de:	2b2f      	cmp	r3, #47	@ 0x2f
 80204e0:	d012      	beq.n	8020508 <rmw_validate_namespace_with_size+0x40>
 80204e2:	aa01      	add	r2, sp, #4
 80204e4:	4669      	mov	r1, sp
 80204e6:	f7ff ff73 	bl	80203d0 <rmw_validate_full_topic_name>
 80204ea:	b980      	cbnz	r0, 802050e <rmw_validate_namespace_with_size+0x46>
 80204ec:	9a00      	ldr	r2, [sp, #0]
 80204ee:	b14a      	cbz	r2, 8020504 <rmw_validate_namespace_with_size+0x3c>
 80204f0:	2a07      	cmp	r2, #7
 80204f2:	d007      	beq.n	8020504 <rmw_validate_namespace_with_size+0x3c>
 80204f4:	1e53      	subs	r3, r2, #1
 80204f6:	2b05      	cmp	r3, #5
 80204f8:	d82e      	bhi.n	8020558 <rmw_validate_namespace_with_size+0x90>
 80204fa:	e8df f003 	tbb	[pc, r3]
 80204fe:	1f1c      	.short	0x1f1c
 8020500:	14282522 	.word	0x14282522
 8020504:	2df5      	cmp	r5, #245	@ 0xf5
 8020506:	d804      	bhi.n	8020512 <rmw_validate_namespace_with_size+0x4a>
 8020508:	2300      	movs	r3, #0
 802050a:	4618      	mov	r0, r3
 802050c:	6023      	str	r3, [r4, #0]
 802050e:	b042      	add	sp, #264	@ 0x108
 8020510:	bd70      	pop	{r4, r5, r6, pc}
 8020512:	2307      	movs	r3, #7
 8020514:	6023      	str	r3, [r4, #0]
 8020516:	2e00      	cmp	r6, #0
 8020518:	d0f9      	beq.n	802050e <rmw_validate_namespace_with_size+0x46>
 802051a:	23f4      	movs	r3, #244	@ 0xf4
 802051c:	6033      	str	r3, [r6, #0]
 802051e:	e7f6      	b.n	802050e <rmw_validate_namespace_with_size+0x46>
 8020520:	200b      	movs	r0, #11
 8020522:	b042      	add	sp, #264	@ 0x108
 8020524:	bd70      	pop	{r4, r5, r6, pc}
 8020526:	2306      	movs	r3, #6
 8020528:	6023      	str	r3, [r4, #0]
 802052a:	2e00      	cmp	r6, #0
 802052c:	d0ef      	beq.n	802050e <rmw_validate_namespace_with_size+0x46>
 802052e:	9b01      	ldr	r3, [sp, #4]
 8020530:	6033      	str	r3, [r6, #0]
 8020532:	b042      	add	sp, #264	@ 0x108
 8020534:	bd70      	pop	{r4, r5, r6, pc}
 8020536:	2301      	movs	r3, #1
 8020538:	6023      	str	r3, [r4, #0]
 802053a:	e7f6      	b.n	802052a <rmw_validate_namespace_with_size+0x62>
 802053c:	2302      	movs	r3, #2
 802053e:	6023      	str	r3, [r4, #0]
 8020540:	e7f3      	b.n	802052a <rmw_validate_namespace_with_size+0x62>
 8020542:	2303      	movs	r3, #3
 8020544:	6023      	str	r3, [r4, #0]
 8020546:	e7f0      	b.n	802052a <rmw_validate_namespace_with_size+0x62>
 8020548:	2304      	movs	r3, #4
 802054a:	6023      	str	r3, [r4, #0]
 802054c:	e7ed      	b.n	802052a <rmw_validate_namespace_with_size+0x62>
 802054e:	2305      	movs	r3, #5
 8020550:	6023      	str	r3, [r4, #0]
 8020552:	e7ea      	b.n	802052a <rmw_validate_namespace_with_size+0x62>
 8020554:	200b      	movs	r0, #11
 8020556:	4770      	bx	lr
 8020558:	4613      	mov	r3, r2
 802055a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 802055e:	4a03      	ldr	r2, [pc, #12]	@ (802056c <rmw_validate_namespace_with_size+0xa4>)
 8020560:	a802      	add	r0, sp, #8
 8020562:	f7ff fd21 	bl	801ffa8 <rcutils_snprintf>
 8020566:	2001      	movs	r0, #1
 8020568:	e7d1      	b.n	802050e <rmw_validate_namespace_with_size+0x46>
 802056a:	bf00      	nop
 802056c:	0802fa3c 	.word	0x0802fa3c

08020570 <rmw_validate_namespace>:
 8020570:	b168      	cbz	r0, 802058e <rmw_validate_namespace+0x1e>
 8020572:	b570      	push	{r4, r5, r6, lr}
 8020574:	460d      	mov	r5, r1
 8020576:	4616      	mov	r6, r2
 8020578:	4604      	mov	r4, r0
 802057a:	f7df fea9 	bl	80002d0 <strlen>
 802057e:	4633      	mov	r3, r6
 8020580:	4601      	mov	r1, r0
 8020582:	462a      	mov	r2, r5
 8020584:	4620      	mov	r0, r4
 8020586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802058a:	f7ff bf9d 	b.w	80204c8 <rmw_validate_namespace_with_size>
 802058e:	200b      	movs	r0, #11
 8020590:	4770      	bx	lr
 8020592:	bf00      	nop

08020594 <rmw_namespace_validation_result_string>:
 8020594:	2807      	cmp	r0, #7
 8020596:	d803      	bhi.n	80205a0 <rmw_namespace_validation_result_string+0xc>
 8020598:	4b02      	ldr	r3, [pc, #8]	@ (80205a4 <rmw_namespace_validation_result_string+0x10>)
 802059a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 802059e:	4770      	bx	lr
 80205a0:	4801      	ldr	r0, [pc, #4]	@ (80205a8 <rmw_namespace_validation_result_string+0x14>)
 80205a2:	4770      	bx	lr
 80205a4:	0802fc34 	.word	0x0802fc34
 80205a8:	0802fa8c 	.word	0x0802fa8c

080205ac <rmw_validate_node_name>:
 80205ac:	2800      	cmp	r0, #0
 80205ae:	d042      	beq.n	8020636 <rmw_validate_node_name+0x8a>
 80205b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80205b4:	460d      	mov	r5, r1
 80205b6:	2900      	cmp	r1, #0
 80205b8:	d03f      	beq.n	802063a <rmw_validate_node_name+0x8e>
 80205ba:	4604      	mov	r4, r0
 80205bc:	4616      	mov	r6, r2
 80205be:	f7df fe87 	bl	80002d0 <strlen>
 80205c2:	b310      	cbz	r0, 802060a <rmw_validate_node_name+0x5e>
 80205c4:	1e63      	subs	r3, r4, #1
 80205c6:	f1c4 0101 	rsb	r1, r4, #1
 80205ca:	eb03 0800 	add.w	r8, r3, r0
 80205ce:	18cf      	adds	r7, r1, r3
 80205d0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80205d4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80205d8:	f02e 0c20 	bic.w	ip, lr, #32
 80205dc:	2a09      	cmp	r2, #9
 80205de:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80205e2:	d905      	bls.n	80205f0 <rmw_validate_node_name+0x44>
 80205e4:	f1bc 0f19 	cmp.w	ip, #25
 80205e8:	d902      	bls.n	80205f0 <rmw_validate_node_name+0x44>
 80205ea:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80205ee:	d114      	bne.n	802061a <rmw_validate_node_name+0x6e>
 80205f0:	4598      	cmp	r8, r3
 80205f2:	d1ec      	bne.n	80205ce <rmw_validate_node_name+0x22>
 80205f4:	7822      	ldrb	r2, [r4, #0]
 80205f6:	4b16      	ldr	r3, [pc, #88]	@ (8020650 <rmw_validate_node_name+0xa4>)
 80205f8:	5cd3      	ldrb	r3, [r2, r3]
 80205fa:	f013 0304 	ands.w	r3, r3, #4
 80205fe:	d113      	bne.n	8020628 <rmw_validate_node_name+0x7c>
 8020600:	28ff      	cmp	r0, #255	@ 0xff
 8020602:	d81c      	bhi.n	802063e <rmw_validate_node_name+0x92>
 8020604:	4618      	mov	r0, r3
 8020606:	602b      	str	r3, [r5, #0]
 8020608:	e00c      	b.n	8020624 <rmw_validate_node_name+0x78>
 802060a:	2301      	movs	r3, #1
 802060c:	602b      	str	r3, [r5, #0]
 802060e:	b17e      	cbz	r6, 8020630 <rmw_validate_node_name+0x84>
 8020610:	2300      	movs	r3, #0
 8020612:	4618      	mov	r0, r3
 8020614:	6033      	str	r3, [r6, #0]
 8020616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802061a:	2302      	movs	r3, #2
 802061c:	602b      	str	r3, [r5, #0]
 802061e:	b13e      	cbz	r6, 8020630 <rmw_validate_node_name+0x84>
 8020620:	2000      	movs	r0, #0
 8020622:	6037      	str	r7, [r6, #0]
 8020624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020628:	2303      	movs	r3, #3
 802062a:	602b      	str	r3, [r5, #0]
 802062c:	2e00      	cmp	r6, #0
 802062e:	d1ef      	bne.n	8020610 <rmw_validate_node_name+0x64>
 8020630:	2000      	movs	r0, #0
 8020632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020636:	200b      	movs	r0, #11
 8020638:	4770      	bx	lr
 802063a:	200b      	movs	r0, #11
 802063c:	e7f2      	b.n	8020624 <rmw_validate_node_name+0x78>
 802063e:	2204      	movs	r2, #4
 8020640:	602a      	str	r2, [r5, #0]
 8020642:	2e00      	cmp	r6, #0
 8020644:	d0f4      	beq.n	8020630 <rmw_validate_node_name+0x84>
 8020646:	22fe      	movs	r2, #254	@ 0xfe
 8020648:	4618      	mov	r0, r3
 802064a:	6032      	str	r2, [r6, #0]
 802064c:	e7ea      	b.n	8020624 <rmw_validate_node_name+0x78>
 802064e:	bf00      	nop
 8020650:	080301ce 	.word	0x080301ce

08020654 <rmw_node_name_validation_result_string>:
 8020654:	2804      	cmp	r0, #4
 8020656:	d803      	bhi.n	8020660 <rmw_node_name_validation_result_string+0xc>
 8020658:	4b02      	ldr	r3, [pc, #8]	@ (8020664 <rmw_node_name_validation_result_string+0x10>)
 802065a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 802065e:	4770      	bx	lr
 8020660:	4801      	ldr	r0, [pc, #4]	@ (8020668 <rmw_node_name_validation_result_string+0x14>)
 8020662:	4770      	bx	lr
 8020664:	0802fd40 	.word	0x0802fd40
 8020668:	0802fc54 	.word	0x0802fc54

0802066c <rmw_destroy_client>:
 802066c:	b570      	push	{r4, r5, r6, lr}
 802066e:	b128      	cbz	r0, 802067c <rmw_destroy_client+0x10>
 8020670:	4604      	mov	r4, r0
 8020672:	6800      	ldr	r0, [r0, #0]
 8020674:	460d      	mov	r5, r1
 8020676:	f001 fc5f 	bl	8021f38 <is_uxrce_rmw_identifier_valid>
 802067a:	b910      	cbnz	r0, 8020682 <rmw_destroy_client+0x16>
 802067c:	2401      	movs	r4, #1
 802067e:	4620      	mov	r0, r4
 8020680:	bd70      	pop	{r4, r5, r6, pc}
 8020682:	6863      	ldr	r3, [r4, #4]
 8020684:	2b00      	cmp	r3, #0
 8020686:	d0f9      	beq.n	802067c <rmw_destroy_client+0x10>
 8020688:	2d00      	cmp	r5, #0
 802068a:	d0f7      	beq.n	802067c <rmw_destroy_client+0x10>
 802068c:	6828      	ldr	r0, [r5, #0]
 802068e:	f001 fc53 	bl	8021f38 <is_uxrce_rmw_identifier_valid>
 8020692:	2800      	cmp	r0, #0
 8020694:	d0f2      	beq.n	802067c <rmw_destroy_client+0x10>
 8020696:	686e      	ldr	r6, [r5, #4]
 8020698:	2e00      	cmp	r6, #0
 802069a:	d0ef      	beq.n	802067c <rmw_destroy_client+0x10>
 802069c:	6864      	ldr	r4, [r4, #4]
 802069e:	6932      	ldr	r2, [r6, #16]
 80206a0:	6920      	ldr	r0, [r4, #16]
 80206a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80206a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80206aa:	6819      	ldr	r1, [r3, #0]
 80206ac:	f003 f9b6 	bl	8023a1c <uxr_buffer_cancel_data>
 80206b0:	4602      	mov	r2, r0
 80206b2:	6920      	ldr	r0, [r4, #16]
 80206b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80206b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80206bc:	f001 fbc2 	bl	8021e44 <run_xrce_session>
 80206c0:	6920      	ldr	r0, [r4, #16]
 80206c2:	6932      	ldr	r2, [r6, #16]
 80206c4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80206c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80206cc:	6819      	ldr	r1, [r3, #0]
 80206ce:	f002 ff21 	bl	8023514 <uxr_buffer_delete_entity>
 80206d2:	4602      	mov	r2, r0
 80206d4:	6920      	ldr	r0, [r4, #16]
 80206d6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80206da:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80206de:	f001 fbb1 	bl	8021e44 <run_xrce_session>
 80206e2:	4603      	mov	r3, r0
 80206e4:	4628      	mov	r0, r5
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	bf14      	ite	ne
 80206ea:	2400      	movne	r4, #0
 80206ec:	2402      	moveq	r4, #2
 80206ee:	f001 fa85 	bl	8021bfc <rmw_uxrce_fini_client_memory>
 80206f2:	e7c4      	b.n	802067e <rmw_destroy_client+0x12>

080206f4 <rmw_get_implementation_identifier>:
 80206f4:	4b01      	ldr	r3, [pc, #4]	@ (80206fc <rmw_get_implementation_identifier+0x8>)
 80206f6:	6818      	ldr	r0, [r3, #0]
 80206f8:	4770      	bx	lr
 80206fa:	bf00      	nop
 80206fc:	08030020 	.word	0x08030020

08020700 <rmw_init_options_init>:
 8020700:	b084      	sub	sp, #16
 8020702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020704:	b083      	sub	sp, #12
 8020706:	ad09      	add	r5, sp, #36	@ 0x24
 8020708:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 802070c:	b130      	cbz	r0, 802071c <rmw_init_options_init+0x1c>
 802070e:	4604      	mov	r4, r0
 8020710:	4628      	mov	r0, r5
 8020712:	f7fc f9b1 	bl	801ca78 <rcutils_allocator_is_valid>
 8020716:	b108      	cbz	r0, 802071c <rmw_init_options_init+0x1c>
 8020718:	68a6      	ldr	r6, [r4, #8]
 802071a:	b12e      	cbz	r6, 8020728 <rmw_init_options_init+0x28>
 802071c:	200b      	movs	r0, #11
 802071e:	b003      	add	sp, #12
 8020720:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020724:	b004      	add	sp, #16
 8020726:	4770      	bx	lr
 8020728:	2200      	movs	r2, #0
 802072a:	2300      	movs	r3, #0
 802072c:	f104 0c20 	add.w	ip, r4, #32
 8020730:	f8df e098 	ldr.w	lr, [pc, #152]	@ 80207cc <rmw_init_options_init+0xcc>
 8020734:	466f      	mov	r7, sp
 8020736:	e9c4 2300 	strd	r2, r3, [r4]
 802073a:	4b20      	ldr	r3, [pc, #128]	@ (80207bc <rmw_init_options_init+0xbc>)
 802073c:	681b      	ldr	r3, [r3, #0]
 802073e:	60a3      	str	r3, [r4, #8]
 8020740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020742:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020746:	682b      	ldr	r3, [r5, #0]
 8020748:	4638      	mov	r0, r7
 802074a:	f8cc 3000 	str.w	r3, [ip]
 802074e:	f8c4 e01c 	str.w	lr, [r4, #28]
 8020752:	60e6      	str	r6, [r4, #12]
 8020754:	f7ff fe10 	bl	8020378 <rmw_get_default_security_options>
 8020758:	f104 0310 	add.w	r3, r4, #16
 802075c:	2203      	movs	r2, #3
 802075e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8020762:	e883 0003 	stmia.w	r3, {r0, r1}
 8020766:	4816      	ldr	r0, [pc, #88]	@ (80207c0 <rmw_init_options_init+0xc0>)
 8020768:	4916      	ldr	r1, [pc, #88]	@ (80207c4 <rmw_init_options_init+0xc4>)
 802076a:	7626      	strb	r6, [r4, #24]
 802076c:	f001 f986 	bl	8021a7c <rmw_uxrce_init_init_options_impl_memory>
 8020770:	4813      	ldr	r0, [pc, #76]	@ (80207c0 <rmw_init_options_init+0xc0>)
 8020772:	f006 fdd3 	bl	802731c <get_memory>
 8020776:	b1f0      	cbz	r0, 80207b6 <rmw_init_options_init+0xb6>
 8020778:	4a13      	ldr	r2, [pc, #76]	@ (80207c8 <rmw_init_options_init+0xc8>)
 802077a:	6883      	ldr	r3, [r0, #8]
 802077c:	6851      	ldr	r1, [r2, #4]
 802077e:	6363      	str	r3, [r4, #52]	@ 0x34
 8020780:	7810      	ldrb	r0, [r2, #0]
 8020782:	6159      	str	r1, [r3, #20]
 8020784:	68d1      	ldr	r1, [r2, #12]
 8020786:	7418      	strb	r0, [r3, #16]
 8020788:	61d9      	str	r1, [r3, #28]
 802078a:	6911      	ldr	r1, [r2, #16]
 802078c:	6219      	str	r1, [r3, #32]
 802078e:	6951      	ldr	r1, [r2, #20]
 8020790:	6892      	ldr	r2, [r2, #8]
 8020792:	6259      	str	r1, [r3, #36]	@ 0x24
 8020794:	619a      	str	r2, [r3, #24]
 8020796:	f005 f8ed 	bl	8025974 <uxr_nanos>
 802079a:	f007 feb1 	bl	8028500 <srand>
 802079e:	f007 fedd 	bl	802855c <rand>
 80207a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80207a4:	6298      	str	r0, [r3, #40]	@ 0x28
 80207a6:	2800      	cmp	r0, #0
 80207a8:	d0f9      	beq.n	802079e <rmw_init_options_init+0x9e>
 80207aa:	2000      	movs	r0, #0
 80207ac:	b003      	add	sp, #12
 80207ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80207b2:	b004      	add	sp, #16
 80207b4:	4770      	bx	lr
 80207b6:	2001      	movs	r0, #1
 80207b8:	e7b1      	b.n	802071e <rmw_init_options_init+0x1e>
 80207ba:	bf00      	nop
 80207bc:	08030020 	.word	0x08030020
 80207c0:	200470e4 	.word	0x200470e4
 80207c4:	20042980 	.word	0x20042980
 80207c8:	2004273c 	.word	0x2004273c
 80207cc:	0802f7c8 	.word	0x0802f7c8

080207d0 <rmw_init_options_copy>:
 80207d0:	2800      	cmp	r0, #0
 80207d2:	d047      	beq.n	8020864 <rmw_init_options_copy+0x94>
 80207d4:	b570      	push	{r4, r5, r6, lr}
 80207d6:	460d      	mov	r5, r1
 80207d8:	b149      	cbz	r1, 80207ee <rmw_init_options_copy+0x1e>
 80207da:	4604      	mov	r4, r0
 80207dc:	6880      	ldr	r0, [r0, #8]
 80207de:	b120      	cbz	r0, 80207ea <rmw_init_options_copy+0x1a>
 80207e0:	4b22      	ldr	r3, [pc, #136]	@ (802086c <rmw_init_options_copy+0x9c>)
 80207e2:	6819      	ldr	r1, [r3, #0]
 80207e4:	f7df fd14 	bl	8000210 <strcmp>
 80207e8:	bba8      	cbnz	r0, 8020856 <rmw_init_options_copy+0x86>
 80207ea:	68ab      	ldr	r3, [r5, #8]
 80207ec:	b11b      	cbz	r3, 80207f6 <rmw_init_options_copy+0x26>
 80207ee:	f04f 0c0b 	mov.w	ip, #11
 80207f2:	4660      	mov	r0, ip
 80207f4:	bd70      	pop	{r4, r5, r6, pc}
 80207f6:	4623      	mov	r3, r4
 80207f8:	462a      	mov	r2, r5
 80207fa:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80207fe:	f8d3 e000 	ldr.w	lr, [r3]
 8020802:	3310      	adds	r3, #16
 8020804:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8020808:	3210      	adds	r2, #16
 802080a:	f853 0c08 	ldr.w	r0, [r3, #-8]
 802080e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8020812:	42b3      	cmp	r3, r6
 8020814:	f842 ec10 	str.w	lr, [r2, #-16]
 8020818:	f842 cc0c 	str.w	ip, [r2, #-12]
 802081c:	f842 0c08 	str.w	r0, [r2, #-8]
 8020820:	f842 1c04 	str.w	r1, [r2, #-4]
 8020824:	d1eb      	bne.n	80207fe <rmw_init_options_copy+0x2e>
 8020826:	6819      	ldr	r1, [r3, #0]
 8020828:	685b      	ldr	r3, [r3, #4]
 802082a:	4811      	ldr	r0, [pc, #68]	@ (8020870 <rmw_init_options_copy+0xa0>)
 802082c:	6011      	str	r1, [r2, #0]
 802082e:	6053      	str	r3, [r2, #4]
 8020830:	f006 fd74 	bl	802731c <get_memory>
 8020834:	b198      	cbz	r0, 802085e <rmw_init_options_copy+0x8e>
 8020836:	6883      	ldr	r3, [r0, #8]
 8020838:	f04f 0c00 	mov.w	ip, #0
 802083c:	636b      	str	r3, [r5, #52]	@ 0x34
 802083e:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8020840:	f103 0410 	add.w	r4, r3, #16
 8020844:	3510      	adds	r5, #16
 8020846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802084a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802084e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8020852:	4660      	mov	r0, ip
 8020854:	bd70      	pop	{r4, r5, r6, pc}
 8020856:	f04f 0c0c 	mov.w	ip, #12
 802085a:	4660      	mov	r0, ip
 802085c:	bd70      	pop	{r4, r5, r6, pc}
 802085e:	f04f 0c01 	mov.w	ip, #1
 8020862:	e7c6      	b.n	80207f2 <rmw_init_options_copy+0x22>
 8020864:	f04f 0c0b 	mov.w	ip, #11
 8020868:	4660      	mov	r0, ip
 802086a:	4770      	bx	lr
 802086c:	08030020 	.word	0x08030020
 8020870:	200470e4 	.word	0x200470e4

08020874 <rmw_init_options_fini>:
 8020874:	b510      	push	{r4, lr}
 8020876:	b08e      	sub	sp, #56	@ 0x38
 8020878:	b388      	cbz	r0, 80208de <rmw_init_options_fini+0x6a>
 802087a:	4604      	mov	r4, r0
 802087c:	3020      	adds	r0, #32
 802087e:	f7fc f8fb 	bl	801ca78 <rcutils_allocator_is_valid>
 8020882:	b360      	cbz	r0, 80208de <rmw_init_options_fini+0x6a>
 8020884:	68a0      	ldr	r0, [r4, #8]
 8020886:	b120      	cbz	r0, 8020892 <rmw_init_options_fini+0x1e>
 8020888:	4b1a      	ldr	r3, [pc, #104]	@ (80208f4 <rmw_init_options_fini+0x80>)
 802088a:	6819      	ldr	r1, [r3, #0]
 802088c:	f7df fcc0 	bl	8000210 <strcmp>
 8020890:	bb68      	cbnz	r0, 80208ee <rmw_init_options_fini+0x7a>
 8020892:	4b19      	ldr	r3, [pc, #100]	@ (80208f8 <rmw_init_options_fini+0x84>)
 8020894:	6819      	ldr	r1, [r3, #0]
 8020896:	b331      	cbz	r1, 80208e6 <rmw_init_options_fini+0x72>
 8020898:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802089a:	e001      	b.n	80208a0 <rmw_init_options_fini+0x2c>
 802089c:	6849      	ldr	r1, [r1, #4]
 802089e:	b311      	cbz	r1, 80208e6 <rmw_init_options_fini+0x72>
 80208a0:	688b      	ldr	r3, [r1, #8]
 80208a2:	429a      	cmp	r2, r3
 80208a4:	d1fa      	bne.n	802089c <rmw_init_options_fini+0x28>
 80208a6:	4814      	ldr	r0, [pc, #80]	@ (80208f8 <rmw_init_options_fini+0x84>)
 80208a8:	f006 fd48 	bl	802733c <put_memory>
 80208ac:	4668      	mov	r0, sp
 80208ae:	f7ff fd53 	bl	8020358 <rmw_get_zero_initialized_init_options>
 80208b2:	46ee      	mov	lr, sp
 80208b4:	46a4      	mov	ip, r4
 80208b6:	2400      	movs	r4, #0
 80208b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80208bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80208c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80208c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80208c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80208cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80208d0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80208d4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80208d8:	4620      	mov	r0, r4
 80208da:	b00e      	add	sp, #56	@ 0x38
 80208dc:	bd10      	pop	{r4, pc}
 80208de:	240b      	movs	r4, #11
 80208e0:	4620      	mov	r0, r4
 80208e2:	b00e      	add	sp, #56	@ 0x38
 80208e4:	bd10      	pop	{r4, pc}
 80208e6:	2401      	movs	r4, #1
 80208e8:	4620      	mov	r0, r4
 80208ea:	b00e      	add	sp, #56	@ 0x38
 80208ec:	bd10      	pop	{r4, pc}
 80208ee:	240c      	movs	r4, #12
 80208f0:	e7f2      	b.n	80208d8 <rmw_init_options_fini+0x64>
 80208f2:	bf00      	nop
 80208f4:	08030020 	.word	0x08030020
 80208f8:	200470e4 	.word	0x200470e4

080208fc <rmw_init>:
 80208fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020900:	b083      	sub	sp, #12
 8020902:	2800      	cmp	r0, #0
 8020904:	f000 80d3 	beq.w	8020aae <rmw_init+0x1b2>
 8020908:	460e      	mov	r6, r1
 802090a:	2900      	cmp	r1, #0
 802090c:	f000 80cf 	beq.w	8020aae <rmw_init+0x1b2>
 8020910:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8020912:	4605      	mov	r5, r0
 8020914:	2b00      	cmp	r3, #0
 8020916:	f000 80ca 	beq.w	8020aae <rmw_init+0x1b2>
 802091a:	4b78      	ldr	r3, [pc, #480]	@ (8020afc <rmw_init+0x200>)
 802091c:	6880      	ldr	r0, [r0, #8]
 802091e:	681f      	ldr	r7, [r3, #0]
 8020920:	b128      	cbz	r0, 802092e <rmw_init+0x32>
 8020922:	4639      	mov	r1, r7
 8020924:	f7df fc74 	bl	8000210 <strcmp>
 8020928:	2800      	cmp	r0, #0
 802092a:	f040 80ca 	bne.w	8020ac2 <rmw_init+0x1c6>
 802092e:	4c74      	ldr	r4, [pc, #464]	@ (8020b00 <rmw_init+0x204>)
 8020930:	f04f 0800 	mov.w	r8, #0
 8020934:	4973      	ldr	r1, [pc, #460]	@ (8020b04 <rmw_init+0x208>)
 8020936:	4874      	ldr	r0, [pc, #464]	@ (8020b08 <rmw_init+0x20c>)
 8020938:	e9d5 2300 	ldrd	r2, r3, [r5]
 802093c:	60b7      	str	r7, [r6, #8]
 802093e:	e9c6 2300 	strd	r2, r3, [r6]
 8020942:	68eb      	ldr	r3, [r5, #12]
 8020944:	2201      	movs	r2, #1
 8020946:	64b3      	str	r3, [r6, #72]	@ 0x48
 8020948:	f001 f838 	bl	80219bc <rmw_uxrce_init_session_memory>
 802094c:	4620      	mov	r0, r4
 802094e:	2204      	movs	r2, #4
 8020950:	496e      	ldr	r1, [pc, #440]	@ (8020b0c <rmw_init+0x210>)
 8020952:	f001 f873 	bl	8021a3c <rmw_uxrce_init_static_input_buffer_memory>
 8020956:	486c      	ldr	r0, [pc, #432]	@ (8020b08 <rmw_init+0x20c>)
 8020958:	f884 800d 	strb.w	r8, [r4, #13]
 802095c:	f006 fcde 	bl	802731c <get_memory>
 8020960:	2800      	cmp	r0, #0
 8020962:	f000 80a9 	beq.w	8020ab8 <rmw_init+0x1bc>
 8020966:	6884      	ldr	r4, [r0, #8]
 8020968:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 802096a:	f104 0910 	add.w	r9, r4, #16
 802096e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8020970:	f890 c010 	ldrb.w	ip, [r0, #16]
 8020974:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8020978:	9101      	str	r1, [sp, #4]
 802097a:	4661      	mov	r1, ip
 802097c:	6a00      	ldr	r0, [r0, #32]
 802097e:	9000      	str	r0, [sp, #0]
 8020980:	4648      	mov	r0, r9
 8020982:	f002 ff9f 	bl	80238c4 <uxr_set_custom_transport_callbacks>
 8020986:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802098a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 802098e:	4960      	ldr	r1, [pc, #384]	@ (8020b10 <rmw_init+0x214>)
 8020990:	4860      	ldr	r0, [pc, #384]	@ (8020b14 <rmw_init+0x218>)
 8020992:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8020996:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 802099a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 802099e:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80209a2:	2201      	movs	r2, #1
 80209a4:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80209a8:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80209ac:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80209b0:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80209b4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80209b6:	f000 ffe1 	bl	802197c <rmw_uxrce_init_node_memory>
 80209ba:	2205      	movs	r2, #5
 80209bc:	4956      	ldr	r1, [pc, #344]	@ (8020b18 <rmw_init+0x21c>)
 80209be:	4857      	ldr	r0, [pc, #348]	@ (8020b1c <rmw_init+0x220>)
 80209c0:	f000 ffbc 	bl	802193c <rmw_uxrce_init_subscription_memory>
 80209c4:	220a      	movs	r2, #10
 80209c6:	4956      	ldr	r1, [pc, #344]	@ (8020b20 <rmw_init+0x224>)
 80209c8:	4856      	ldr	r0, [pc, #344]	@ (8020b24 <rmw_init+0x228>)
 80209ca:	f000 ff97 	bl	80218fc <rmw_uxrce_init_publisher_memory>
 80209ce:	2201      	movs	r2, #1
 80209d0:	4955      	ldr	r1, [pc, #340]	@ (8020b28 <rmw_init+0x22c>)
 80209d2:	4856      	ldr	r0, [pc, #344]	@ (8020b2c <rmw_init+0x230>)
 80209d4:	f000 ff52 	bl	802187c <rmw_uxrce_init_service_memory>
 80209d8:	2201      	movs	r2, #1
 80209da:	4955      	ldr	r1, [pc, #340]	@ (8020b30 <rmw_init+0x234>)
 80209dc:	4855      	ldr	r0, [pc, #340]	@ (8020b34 <rmw_init+0x238>)
 80209de:	f000 ff6d 	bl	80218bc <rmw_uxrce_init_client_memory>
 80209e2:	220f      	movs	r2, #15
 80209e4:	4954      	ldr	r1, [pc, #336]	@ (8020b38 <rmw_init+0x23c>)
 80209e6:	4855      	ldr	r0, [pc, #340]	@ (8020b3c <rmw_init+0x240>)
 80209e8:	f001 f808 	bl	80219fc <rmw_uxrce_init_topic_memory>
 80209ec:	2203      	movs	r2, #3
 80209ee:	4954      	ldr	r1, [pc, #336]	@ (8020b40 <rmw_init+0x244>)
 80209f0:	4854      	ldr	r0, [pc, #336]	@ (8020b44 <rmw_init+0x248>)
 80209f2:	f001 f843 	bl	8021a7c <rmw_uxrce_init_init_options_impl_memory>
 80209f6:	2204      	movs	r2, #4
 80209f8:	4953      	ldr	r1, [pc, #332]	@ (8020b48 <rmw_init+0x24c>)
 80209fa:	4854      	ldr	r0, [pc, #336]	@ (8020b4c <rmw_init+0x250>)
 80209fc:	f001 f85e 	bl	8021abc <rmw_uxrce_init_wait_set_memory>
 8020a00:	4953      	ldr	r1, [pc, #332]	@ (8020b50 <rmw_init+0x254>)
 8020a02:	4854      	ldr	r0, [pc, #336]	@ (8020b54 <rmw_init+0x258>)
 8020a04:	2204      	movs	r2, #4
 8020a06:	f001 f879 	bl	8021afc <rmw_uxrce_init_guard_condition_memory>
 8020a0a:	4642      	mov	r2, r8
 8020a0c:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8020a0e:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8020a10:	f000 fd9a 	bl	8021548 <rmw_uxrce_transport_init>
 8020a14:	4607      	mov	r7, r0
 8020a16:	2800      	cmp	r0, #0
 8020a18:	d158      	bne.n	8020acc <rmw_init+0x1d0>
 8020a1a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8020a1c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8020a20:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8020a24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8020a26:	4628      	mov	r0, r5
 8020a28:	f003 f97e 	bl	8023d28 <uxr_init_session>
 8020a2c:	4622      	mov	r2, r4
 8020a2e:	494a      	ldr	r1, [pc, #296]	@ (8020b58 <rmw_init+0x25c>)
 8020a30:	4628      	mov	r0, r5
 8020a32:	f003 f99d 	bl	8023d70 <uxr_set_topic_callback>
 8020a36:	463a      	mov	r2, r7
 8020a38:	4948      	ldr	r1, [pc, #288]	@ (8020b5c <rmw_init+0x260>)
 8020a3a:	4628      	mov	r0, r5
 8020a3c:	f003 f994 	bl	8023d68 <uxr_set_status_callback>
 8020a40:	463a      	mov	r2, r7
 8020a42:	4947      	ldr	r1, [pc, #284]	@ (8020b60 <rmw_init+0x264>)
 8020a44:	4628      	mov	r0, r5
 8020a46:	f003 f997 	bl	8023d78 <uxr_set_request_callback>
 8020a4a:	463a      	mov	r2, r7
 8020a4c:	4945      	ldr	r1, [pc, #276]	@ (8020b64 <rmw_init+0x268>)
 8020a4e:	4628      	mov	r0, r5
 8020a50:	f003 f996 	bl	8023d80 <uxr_set_reply_callback>
 8020a54:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8020a58:	2304      	movs	r3, #4
 8020a5a:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8020a5e:	0092      	lsls	r2, r2, #2
 8020a60:	4628      	mov	r0, r5
 8020a62:	f003 f9cd 	bl	8023e00 <uxr_create_input_reliable_stream>
 8020a66:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8020a6a:	2304      	movs	r3, #4
 8020a6c:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8020a70:	0092      	lsls	r2, r2, #2
 8020a72:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8020a76:	4628      	mov	r0, r5
 8020a78:	f003 f998 	bl	8023dac <uxr_create_output_reliable_stream>
 8020a7c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8020a80:	4628      	mov	r0, r5
 8020a82:	f003 f9b7 	bl	8023df4 <uxr_create_input_best_effort_stream>
 8020a86:	f241 3194 	movw	r1, #5012	@ 0x1394
 8020a8a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8020a8e:	4628      	mov	r0, r5
 8020a90:	4421      	add	r1, r4
 8020a92:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8020a96:	f003 f977 	bl	8023d88 <uxr_create_output_best_effort_stream>
 8020a9a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8020a9e:	4628      	mov	r0, r5
 8020aa0:	f003 ff00 	bl	80248a4 <uxr_create_session>
 8020aa4:	b1f8      	cbz	r0, 8020ae6 <rmw_init+0x1ea>
 8020aa6:	4638      	mov	r0, r7
 8020aa8:	b003      	add	sp, #12
 8020aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020aae:	270b      	movs	r7, #11
 8020ab0:	4638      	mov	r0, r7
 8020ab2:	b003      	add	sp, #12
 8020ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020ab8:	2701      	movs	r7, #1
 8020aba:	4638      	mov	r0, r7
 8020abc:	b003      	add	sp, #12
 8020abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020ac2:	270c      	movs	r7, #12
 8020ac4:	4638      	mov	r0, r7
 8020ac6:	b003      	add	sp, #12
 8020ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020acc:	4648      	mov	r0, r9
 8020ace:	f002 ff37 	bl	8023940 <uxr_close_custom_transport>
 8020ad2:	4621      	mov	r1, r4
 8020ad4:	480c      	ldr	r0, [pc, #48]	@ (8020b08 <rmw_init+0x20c>)
 8020ad6:	f006 fc31 	bl	802733c <put_memory>
 8020ada:	4638      	mov	r0, r7
 8020adc:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8020ae0:	b003      	add	sp, #12
 8020ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020ae6:	4648      	mov	r0, r9
 8020ae8:	f002 ff2a 	bl	8023940 <uxr_close_custom_transport>
 8020aec:	4621      	mov	r1, r4
 8020aee:	4806      	ldr	r0, [pc, #24]	@ (8020b08 <rmw_init+0x20c>)
 8020af0:	f006 fc24 	bl	802733c <put_memory>
 8020af4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8020af6:	2701      	movs	r7, #1
 8020af8:	e7d5      	b.n	8020aa6 <rmw_init+0x1aa>
 8020afa:	bf00      	nop
 8020afc:	08030020 	.word	0x08030020
 8020b00:	20047134 	.word	0x20047134
 8020b04:	200433e0 	.word	0x200433e0
 8020b08:	20047124 	.word	0x20047124
 8020b0c:	20044988 	.word	0x20044988
 8020b10:	20042a04 	.word	0x20042a04
 8020b14:	200470f4 	.word	0x200470f4
 8020b18:	20046a88 	.word	0x20046a88
 8020b1c:	20047144 	.word	0x20047144
 8020b20:	20042aa8 	.word	0x20042aa8
 8020b24:	20047104 	.word	0x20047104
 8020b28:	20043318 	.word	0x20043318
 8020b2c:	20047114 	.word	0x20047114
 8020b30:	20042838 	.word	0x20042838
 8020b34:	20042828 	.word	0x20042828
 8020b38:	20046ec0 	.word	0x20046ec0
 8020b3c:	20047154 	.word	0x20047154
 8020b40:	20042980 	.word	0x20042980
 8020b44:	200470e4 	.word	0x200470e4
 8020b48:	20047064 	.word	0x20047064
 8020b4c:	20047164 	.word	0x20047164
 8020b50:	20042900 	.word	0x20042900
 8020b54:	200470d4 	.word	0x200470d4
 8020b58:	08027155 	.word	0x08027155
 8020b5c:	0802714d 	.word	0x0802714d
 8020b60:	080271ed 	.word	0x080271ed
 8020b64:	08027289 	.word	0x08027289

08020b68 <rmw_context_fini>:
 8020b68:	4b17      	ldr	r3, [pc, #92]	@ (8020bc8 <rmw_context_fini+0x60>)
 8020b6a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8020b6c:	b570      	push	{r4, r5, r6, lr}
 8020b6e:	681c      	ldr	r4, [r3, #0]
 8020b70:	4605      	mov	r5, r0
 8020b72:	b334      	cbz	r4, 8020bc2 <rmw_context_fini+0x5a>
 8020b74:	2600      	movs	r6, #0
 8020b76:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8020b7a:	6902      	ldr	r2, [r0, #16]
 8020b7c:	428a      	cmp	r2, r1
 8020b7e:	d018      	beq.n	8020bb2 <rmw_context_fini+0x4a>
 8020b80:	2c00      	cmp	r4, #0
 8020b82:	d1f8      	bne.n	8020b76 <rmw_context_fini+0xe>
 8020b84:	b189      	cbz	r1, 8020baa <rmw_context_fini+0x42>
 8020b86:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8020b8a:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8020b8e:	789b      	ldrb	r3, [r3, #2]
 8020b90:	2b01      	cmp	r3, #1
 8020b92:	bf14      	ite	ne
 8020b94:	210a      	movne	r1, #10
 8020b96:	2100      	moveq	r1, #0
 8020b98:	f003 fe5c 	bl	8024854 <uxr_delete_session_retries>
 8020b9c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8020b9e:	f000 ffcd 	bl	8021b3c <rmw_uxrce_fini_session_memory>
 8020ba2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8020ba4:	3010      	adds	r0, #16
 8020ba6:	f002 fecb 	bl	8023940 <uxr_close_custom_transport>
 8020baa:	2300      	movs	r3, #0
 8020bac:	4630      	mov	r0, r6
 8020bae:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8020bb0:	bd70      	pop	{r4, r5, r6, pc}
 8020bb2:	3018      	adds	r0, #24
 8020bb4:	f000 f89c 	bl	8020cf0 <rmw_destroy_node>
 8020bb8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8020bba:	4606      	mov	r6, r0
 8020bbc:	2c00      	cmp	r4, #0
 8020bbe:	d1da      	bne.n	8020b76 <rmw_context_fini+0xe>
 8020bc0:	e7e0      	b.n	8020b84 <rmw_context_fini+0x1c>
 8020bc2:	4626      	mov	r6, r4
 8020bc4:	e7de      	b.n	8020b84 <rmw_context_fini+0x1c>
 8020bc6:	bf00      	nop
 8020bc8:	200470f4 	.word	0x200470f4

08020bcc <create_node>:
 8020bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020bd0:	b083      	sub	sp, #12
 8020bd2:	2b00      	cmp	r3, #0
 8020bd4:	d064      	beq.n	8020ca0 <create_node+0xd4>
 8020bd6:	4606      	mov	r6, r0
 8020bd8:	4838      	ldr	r0, [pc, #224]	@ (8020cbc <create_node+0xf0>)
 8020bda:	460f      	mov	r7, r1
 8020bdc:	4690      	mov	r8, r2
 8020bde:	461d      	mov	r5, r3
 8020be0:	f006 fb9c 	bl	802731c <get_memory>
 8020be4:	2800      	cmp	r0, #0
 8020be6:	d05b      	beq.n	8020ca0 <create_node+0xd4>
 8020be8:	6884      	ldr	r4, [r0, #8]
 8020bea:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8020bec:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8020bf0:	f104 0518 	add.w	r5, r4, #24
 8020bf4:	6123      	str	r3, [r4, #16]
 8020bf6:	f7ff fd7d 	bl	80206f4 <rmw_get_implementation_identifier>
 8020bfa:	f8c4 9020 	str.w	r9, [r4, #32]
 8020bfe:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8020c02:	4630      	mov	r0, r6
 8020c04:	f7df fb64 	bl	80002d0 <strlen>
 8020c08:	1c42      	adds	r2, r0, #1
 8020c0a:	2a3c      	cmp	r2, #60	@ 0x3c
 8020c0c:	d840      	bhi.n	8020c90 <create_node+0xc4>
 8020c0e:	4648      	mov	r0, r9
 8020c10:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8020c14:	4631      	mov	r1, r6
 8020c16:	f008 fe28 	bl	802986a <memcpy>
 8020c1a:	4638      	mov	r0, r7
 8020c1c:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8020c20:	f7df fb56 	bl	80002d0 <strlen>
 8020c24:	1c42      	adds	r2, r0, #1
 8020c26:	2a3c      	cmp	r2, #60	@ 0x3c
 8020c28:	d832      	bhi.n	8020c90 <create_node+0xc4>
 8020c2a:	4639      	mov	r1, r7
 8020c2c:	4648      	mov	r0, r9
 8020c2e:	f008 fe1c 	bl	802986a <memcpy>
 8020c32:	6923      	ldr	r3, [r4, #16]
 8020c34:	2101      	movs	r1, #1
 8020c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8020c3a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8020c3e:	1842      	adds	r2, r0, r1
 8020c40:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8020c44:	f002 fe80 	bl	8023948 <uxr_object_id>
 8020c48:	6160      	str	r0, [r4, #20]
 8020c4a:	783b      	ldrb	r3, [r7, #0]
 8020c4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8020c4e:	d12c      	bne.n	8020caa <create_node+0xde>
 8020c50:	787b      	ldrb	r3, [r7, #1]
 8020c52:	bb53      	cbnz	r3, 8020caa <create_node+0xde>
 8020c54:	4633      	mov	r3, r6
 8020c56:	4a1a      	ldr	r2, [pc, #104]	@ (8020cc0 <create_node+0xf4>)
 8020c58:	213c      	movs	r1, #60	@ 0x3c
 8020c5a:	481a      	ldr	r0, [pc, #104]	@ (8020cc4 <create_node+0xf8>)
 8020c5c:	f008 fb74 	bl	8029348 <sniprintf>
 8020c60:	6920      	ldr	r0, [r4, #16]
 8020c62:	2106      	movs	r1, #6
 8020c64:	fa1f f388 	uxth.w	r3, r8
 8020c68:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8020c6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8020c70:	9101      	str	r1, [sp, #4]
 8020c72:	4914      	ldr	r1, [pc, #80]	@ (8020cc4 <create_node+0xf8>)
 8020c74:	9100      	str	r1, [sp, #0]
 8020c76:	6811      	ldr	r1, [r2, #0]
 8020c78:	6962      	ldr	r2, [r4, #20]
 8020c7a:	f002 fc97 	bl	80235ac <uxr_buffer_create_participant_bin>
 8020c7e:	4602      	mov	r2, r0
 8020c80:	6920      	ldr	r0, [r4, #16]
 8020c82:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8020c86:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8020c8a:	f001 f8db 	bl	8021e44 <run_xrce_session>
 8020c8e:	b918      	cbnz	r0, 8020c98 <create_node+0xcc>
 8020c90:	4628      	mov	r0, r5
 8020c92:	2500      	movs	r5, #0
 8020c94:	f000 ff58 	bl	8021b48 <rmw_uxrce_fini_node_memory>
 8020c98:	4628      	mov	r0, r5
 8020c9a:	b003      	add	sp, #12
 8020c9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020ca0:	2500      	movs	r5, #0
 8020ca2:	4628      	mov	r0, r5
 8020ca4:	b003      	add	sp, #12
 8020ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020caa:	463b      	mov	r3, r7
 8020cac:	4a06      	ldr	r2, [pc, #24]	@ (8020cc8 <create_node+0xfc>)
 8020cae:	213c      	movs	r1, #60	@ 0x3c
 8020cb0:	9600      	str	r6, [sp, #0]
 8020cb2:	4804      	ldr	r0, [pc, #16]	@ (8020cc4 <create_node+0xf8>)
 8020cb4:	f008 fb48 	bl	8029348 <sniprintf>
 8020cb8:	e7d2      	b.n	8020c60 <create_node+0x94>
 8020cba:	bf00      	nop
 8020cbc:	200470f4 	.word	0x200470f4
 8020cc0:	0802fd64 	.word	0x0802fd64
 8020cc4:	200427ec 	.word	0x200427ec
 8020cc8:	0802f7d8 	.word	0x0802f7d8

08020ccc <rmw_create_node>:
 8020ccc:	468c      	mov	ip, r1
 8020cce:	4611      	mov	r1, r2
 8020cd0:	f1bc 0f00 	cmp.w	ip, #0
 8020cd4:	d00a      	beq.n	8020cec <rmw_create_node+0x20>
 8020cd6:	f89c 3000 	ldrb.w	r3, [ip]
 8020cda:	b13b      	cbz	r3, 8020cec <rmw_create_node+0x20>
 8020cdc:	b132      	cbz	r2, 8020cec <rmw_create_node+0x20>
 8020cde:	7813      	ldrb	r3, [r2, #0]
 8020ce0:	b123      	cbz	r3, 8020cec <rmw_create_node+0x20>
 8020ce2:	4603      	mov	r3, r0
 8020ce4:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8020ce6:	4660      	mov	r0, ip
 8020ce8:	f7ff bf70 	b.w	8020bcc <create_node>
 8020cec:	2000      	movs	r0, #0
 8020cee:	4770      	bx	lr

08020cf0 <rmw_destroy_node>:
 8020cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020cf2:	b328      	cbz	r0, 8020d40 <rmw_destroy_node+0x50>
 8020cf4:	4607      	mov	r7, r0
 8020cf6:	6800      	ldr	r0, [r0, #0]
 8020cf8:	b120      	cbz	r0, 8020d04 <rmw_destroy_node+0x14>
 8020cfa:	4b37      	ldr	r3, [pc, #220]	@ (8020dd8 <rmw_destroy_node+0xe8>)
 8020cfc:	6819      	ldr	r1, [r3, #0]
 8020cfe:	f7df fa87 	bl	8000210 <strcmp>
 8020d02:	b9e8      	cbnz	r0, 8020d40 <rmw_destroy_node+0x50>
 8020d04:	687d      	ldr	r5, [r7, #4]
 8020d06:	b1dd      	cbz	r5, 8020d40 <rmw_destroy_node+0x50>
 8020d08:	4b34      	ldr	r3, [pc, #208]	@ (8020ddc <rmw_destroy_node+0xec>)
 8020d0a:	681c      	ldr	r4, [r3, #0]
 8020d0c:	2c00      	cmp	r4, #0
 8020d0e:	d060      	beq.n	8020dd2 <rmw_destroy_node+0xe2>
 8020d10:	2600      	movs	r6, #0
 8020d12:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8020d16:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8020d1a:	429d      	cmp	r5, r3
 8020d1c:	d013      	beq.n	8020d46 <rmw_destroy_node+0x56>
 8020d1e:	2c00      	cmp	r4, #0
 8020d20:	d1f7      	bne.n	8020d12 <rmw_destroy_node+0x22>
 8020d22:	4b2f      	ldr	r3, [pc, #188]	@ (8020de0 <rmw_destroy_node+0xf0>)
 8020d24:	681c      	ldr	r4, [r3, #0]
 8020d26:	b1c4      	cbz	r4, 8020d5a <rmw_destroy_node+0x6a>
 8020d28:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8020d2c:	6a0b      	ldr	r3, [r1, #32]
 8020d2e:	429d      	cmp	r5, r3
 8020d30:	d1f9      	bne.n	8020d26 <rmw_destroy_node+0x36>
 8020d32:	317c      	adds	r1, #124	@ 0x7c
 8020d34:	4638      	mov	r0, r7
 8020d36:	f000 fb51 	bl	80213dc <rmw_destroy_subscription>
 8020d3a:	2801      	cmp	r0, #1
 8020d3c:	4606      	mov	r6, r0
 8020d3e:	d1f2      	bne.n	8020d26 <rmw_destroy_node+0x36>
 8020d40:	2601      	movs	r6, #1
 8020d42:	4630      	mov	r0, r6
 8020d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020d46:	3184      	adds	r1, #132	@ 0x84
 8020d48:	4638      	mov	r0, r7
 8020d4a:	f000 f855 	bl	8020df8 <rmw_destroy_publisher>
 8020d4e:	2801      	cmp	r0, #1
 8020d50:	4606      	mov	r6, r0
 8020d52:	d0f5      	beq.n	8020d40 <rmw_destroy_node+0x50>
 8020d54:	2c00      	cmp	r4, #0
 8020d56:	d1dc      	bne.n	8020d12 <rmw_destroy_node+0x22>
 8020d58:	e7e3      	b.n	8020d22 <rmw_destroy_node+0x32>
 8020d5a:	4b22      	ldr	r3, [pc, #136]	@ (8020de4 <rmw_destroy_node+0xf4>)
 8020d5c:	681c      	ldr	r4, [r3, #0]
 8020d5e:	b16c      	cbz	r4, 8020d7c <rmw_destroy_node+0x8c>
 8020d60:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8020d64:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8020d66:	429d      	cmp	r5, r3
 8020d68:	d1f9      	bne.n	8020d5e <rmw_destroy_node+0x6e>
 8020d6a:	317c      	adds	r1, #124	@ 0x7c
 8020d6c:	4638      	mov	r0, r7
 8020d6e:	f000 f9e7 	bl	8021140 <rmw_destroy_service>
 8020d72:	2801      	cmp	r0, #1
 8020d74:	4606      	mov	r6, r0
 8020d76:	d0e3      	beq.n	8020d40 <rmw_destroy_node+0x50>
 8020d78:	2c00      	cmp	r4, #0
 8020d7a:	d1f1      	bne.n	8020d60 <rmw_destroy_node+0x70>
 8020d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8020de8 <rmw_destroy_node+0xf8>)
 8020d7e:	681c      	ldr	r4, [r3, #0]
 8020d80:	b16c      	cbz	r4, 8020d9e <rmw_destroy_node+0xae>
 8020d82:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8020d86:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8020d88:	429d      	cmp	r5, r3
 8020d8a:	d1f9      	bne.n	8020d80 <rmw_destroy_node+0x90>
 8020d8c:	317c      	adds	r1, #124	@ 0x7c
 8020d8e:	4638      	mov	r0, r7
 8020d90:	f7ff fc6c 	bl	802066c <rmw_destroy_client>
 8020d94:	2801      	cmp	r0, #1
 8020d96:	4606      	mov	r6, r0
 8020d98:	d0d2      	beq.n	8020d40 <rmw_destroy_node+0x50>
 8020d9a:	2c00      	cmp	r4, #0
 8020d9c:	d1f1      	bne.n	8020d82 <rmw_destroy_node+0x92>
 8020d9e:	6928      	ldr	r0, [r5, #16]
 8020da0:	696a      	ldr	r2, [r5, #20]
 8020da2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8020da6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8020daa:	6819      	ldr	r1, [r3, #0]
 8020dac:	f002 fbb2 	bl	8023514 <uxr_buffer_delete_entity>
 8020db0:	4602      	mov	r2, r0
 8020db2:	6928      	ldr	r0, [r5, #16]
 8020db4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8020db8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8020dbc:	f001 f842 	bl	8021e44 <run_xrce_session>
 8020dc0:	4603      	mov	r3, r0
 8020dc2:	4638      	mov	r0, r7
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	bf08      	it	eq
 8020dc8:	2602      	moveq	r6, #2
 8020dca:	f000 febd 	bl	8021b48 <rmw_uxrce_fini_node_memory>
 8020dce:	4630      	mov	r0, r6
 8020dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020dd2:	4626      	mov	r6, r4
 8020dd4:	e7a5      	b.n	8020d22 <rmw_destroy_node+0x32>
 8020dd6:	bf00      	nop
 8020dd8:	08030020 	.word	0x08030020
 8020ddc:	20047104 	.word	0x20047104
 8020de0:	20047144 	.word	0x20047144
 8020de4:	20047114 	.word	0x20047114
 8020de8:	20042828 	.word	0x20042828

08020dec <rmw_node_get_graph_guard_condition>:
 8020dec:	6843      	ldr	r3, [r0, #4]
 8020dee:	6918      	ldr	r0, [r3, #16]
 8020df0:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8020df4:	4770      	bx	lr
 8020df6:	bf00      	nop

08020df8 <rmw_destroy_publisher>:
 8020df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020dfc:	b128      	cbz	r0, 8020e0a <rmw_destroy_publisher+0x12>
 8020dfe:	4604      	mov	r4, r0
 8020e00:	6800      	ldr	r0, [r0, #0]
 8020e02:	460d      	mov	r5, r1
 8020e04:	f001 f898 	bl	8021f38 <is_uxrce_rmw_identifier_valid>
 8020e08:	b918      	cbnz	r0, 8020e12 <rmw_destroy_publisher+0x1a>
 8020e0a:	2401      	movs	r4, #1
 8020e0c:	4620      	mov	r0, r4
 8020e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e12:	6863      	ldr	r3, [r4, #4]
 8020e14:	2b00      	cmp	r3, #0
 8020e16:	d0f8      	beq.n	8020e0a <rmw_destroy_publisher+0x12>
 8020e18:	fab5 f485 	clz	r4, r5
 8020e1c:	0964      	lsrs	r4, r4, #5
 8020e1e:	2d00      	cmp	r5, #0
 8020e20:	d0f3      	beq.n	8020e0a <rmw_destroy_publisher+0x12>
 8020e22:	6828      	ldr	r0, [r5, #0]
 8020e24:	f001 f888 	bl	8021f38 <is_uxrce_rmw_identifier_valid>
 8020e28:	2800      	cmp	r0, #0
 8020e2a:	d0ee      	beq.n	8020e0a <rmw_destroy_publisher+0x12>
 8020e2c:	686e      	ldr	r6, [r5, #4]
 8020e2e:	2e00      	cmp	r6, #0
 8020e30:	d0eb      	beq.n	8020e0a <rmw_destroy_publisher+0x12>
 8020e32:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8020e34:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8020e38:	f006 fb0e 	bl	8027458 <destroy_topic>
 8020e3c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8020e40:	6972      	ldr	r2, [r6, #20]
 8020e42:	6918      	ldr	r0, [r3, #16]
 8020e44:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8020e48:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8020e4c:	6819      	ldr	r1, [r3, #0]
 8020e4e:	f002 fb61 	bl	8023514 <uxr_buffer_delete_entity>
 8020e52:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8020e56:	4680      	mov	r8, r0
 8020e58:	6932      	ldr	r2, [r6, #16]
 8020e5a:	6918      	ldr	r0, [r3, #16]
 8020e5c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8020e60:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8020e64:	6819      	ldr	r1, [r3, #0]
 8020e66:	f002 fb55 	bl	8023514 <uxr_buffer_delete_entity>
 8020e6a:	4606      	mov	r6, r0
 8020e6c:	6938      	ldr	r0, [r7, #16]
 8020e6e:	4642      	mov	r2, r8
 8020e70:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8020e74:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8020e78:	f000 ffe4 	bl	8021e44 <run_xrce_session>
 8020e7c:	693f      	ldr	r7, [r7, #16]
 8020e7e:	4632      	mov	r2, r6
 8020e80:	4606      	mov	r6, r0
 8020e82:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8020e86:	4638      	mov	r0, r7
 8020e88:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8020e8c:	f000 ffda 	bl	8021e44 <run_xrce_session>
 8020e90:	b126      	cbz	r6, 8020e9c <rmw_destroy_publisher+0xa4>
 8020e92:	b118      	cbz	r0, 8020e9c <rmw_destroy_publisher+0xa4>
 8020e94:	4628      	mov	r0, r5
 8020e96:	f000 fe6f 	bl	8021b78 <rmw_uxrce_fini_publisher_memory>
 8020e9a:	e7b7      	b.n	8020e0c <rmw_destroy_publisher+0x14>
 8020e9c:	2402      	movs	r4, #2
 8020e9e:	e7f9      	b.n	8020e94 <rmw_destroy_publisher+0x9c>

08020ea0 <rmw_send_request>:
 8020ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020ea4:	4604      	mov	r4, r0
 8020ea6:	6800      	ldr	r0, [r0, #0]
 8020ea8:	b08b      	sub	sp, #44	@ 0x2c
 8020eaa:	460e      	mov	r6, r1
 8020eac:	4615      	mov	r5, r2
 8020eae:	b128      	cbz	r0, 8020ebc <rmw_send_request+0x1c>
 8020eb0:	4b21      	ldr	r3, [pc, #132]	@ (8020f38 <rmw_send_request+0x98>)
 8020eb2:	6819      	ldr	r1, [r3, #0]
 8020eb4:	f7df f9ac 	bl	8000210 <strcmp>
 8020eb8:	2800      	cmp	r0, #0
 8020eba:	d139      	bne.n	8020f30 <rmw_send_request+0x90>
 8020ebc:	6864      	ldr	r4, [r4, #4]
 8020ebe:	2700      	movs	r7, #0
 8020ec0:	6963      	ldr	r3, [r4, #20]
 8020ec2:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8020ec6:	689b      	ldr	r3, [r3, #8]
 8020ec8:	4798      	blx	r3
 8020eca:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8020ece:	4630      	mov	r0, r6
 8020ed0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020ed4:	4798      	blx	r3
 8020ed6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8020eda:	9000      	str	r0, [sp, #0]
 8020edc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8020ee0:	6922      	ldr	r2, [r4, #16]
 8020ee2:	ab02      	add	r3, sp, #8
 8020ee4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8020ee6:	f004 fd5b 	bl	80259a0 <uxr_prepare_output_stream>
 8020eea:	e9c5 0700 	strd	r0, r7, [r5]
 8020eee:	b198      	cbz	r0, 8020f18 <rmw_send_request+0x78>
 8020ef0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8020ef4:	a902      	add	r1, sp, #8
 8020ef6:	4630      	mov	r0, r6
 8020ef8:	4798      	blx	r3
 8020efa:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8020efe:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8020f02:	2b01      	cmp	r3, #1
 8020f04:	d00c      	beq.n	8020f20 <rmw_send_request+0x80>
 8020f06:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8020f08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8020f0c:	f003 fb58 	bl	80245c0 <uxr_run_session_until_confirm_delivery>
 8020f10:	4638      	mov	r0, r7
 8020f12:	b00b      	add	sp, #44	@ 0x2c
 8020f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020f18:	2001      	movs	r0, #1
 8020f1a:	b00b      	add	sp, #44	@ 0x2c
 8020f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020f20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8020f24:	f002 ff92 	bl	8023e4c <uxr_flash_output_streams>
 8020f28:	4638      	mov	r0, r7
 8020f2a:	b00b      	add	sp, #44	@ 0x2c
 8020f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020f30:	200c      	movs	r0, #12
 8020f32:	b00b      	add	sp, #44	@ 0x2c
 8020f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020f38:	08030020 	.word	0x08030020

08020f3c <rmw_take_request>:
 8020f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020f40:	4605      	mov	r5, r0
 8020f42:	6800      	ldr	r0, [r0, #0]
 8020f44:	b089      	sub	sp, #36	@ 0x24
 8020f46:	460c      	mov	r4, r1
 8020f48:	4690      	mov	r8, r2
 8020f4a:	461e      	mov	r6, r3
 8020f4c:	b128      	cbz	r0, 8020f5a <rmw_take_request+0x1e>
 8020f4e:	4b28      	ldr	r3, [pc, #160]	@ (8020ff0 <rmw_take_request+0xb4>)
 8020f50:	6819      	ldr	r1, [r3, #0]
 8020f52:	f7df f95d 	bl	8000210 <strcmp>
 8020f56:	2800      	cmp	r0, #0
 8020f58:	d146      	bne.n	8020fe8 <rmw_take_request+0xac>
 8020f5a:	b10e      	cbz	r6, 8020f60 <rmw_take_request+0x24>
 8020f5c:	2300      	movs	r3, #0
 8020f5e:	7033      	strb	r3, [r6, #0]
 8020f60:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8020f64:	f000 fef0 	bl	8021d48 <rmw_uxrce_clean_expired_static_input_buffer>
 8020f68:	4648      	mov	r0, r9
 8020f6a:	f000 fec3 	bl	8021cf4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8020f6e:	4607      	mov	r7, r0
 8020f70:	b3b0      	cbz	r0, 8020fe0 <rmw_take_request+0xa4>
 8020f72:	6885      	ldr	r5, [r0, #8]
 8020f74:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8020f78:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8020f7c:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8020f80:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8020f84:	7423      	strb	r3, [r4, #16]
 8020f86:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 8020f8a:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 8020f8e:	f8a4 2011 	strh.w	r2, [r4, #17]
 8020f92:	74e3      	strb	r3, [r4, #19]
 8020f94:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 8020f98:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8020f9c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 8020fa0:	6161      	str	r1, [r4, #20]
 8020fa2:	61a2      	str	r2, [r4, #24]
 8020fa4:	61e3      	str	r3, [r4, #28]
 8020fa6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8020faa:	689b      	ldr	r3, [r3, #8]
 8020fac:	4798      	blx	r3
 8020fae:	6844      	ldr	r4, [r0, #4]
 8020fb0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8020fb4:	f105 0110 	add.w	r1, r5, #16
 8020fb8:	4668      	mov	r0, sp
 8020fba:	f7fb ff67 	bl	801ce8c <ucdr_init_buffer>
 8020fbe:	4641      	mov	r1, r8
 8020fc0:	68e3      	ldr	r3, [r4, #12]
 8020fc2:	4668      	mov	r0, sp
 8020fc4:	4798      	blx	r3
 8020fc6:	4639      	mov	r1, r7
 8020fc8:	4604      	mov	r4, r0
 8020fca:	480a      	ldr	r0, [pc, #40]	@ (8020ff4 <rmw_take_request+0xb8>)
 8020fcc:	f006 f9b6 	bl	802733c <put_memory>
 8020fd0:	b106      	cbz	r6, 8020fd4 <rmw_take_request+0x98>
 8020fd2:	7034      	strb	r4, [r6, #0]
 8020fd4:	f084 0001 	eor.w	r0, r4, #1
 8020fd8:	b2c0      	uxtb	r0, r0
 8020fda:	b009      	add	sp, #36	@ 0x24
 8020fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020fe0:	2001      	movs	r0, #1
 8020fe2:	b009      	add	sp, #36	@ 0x24
 8020fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020fe8:	200c      	movs	r0, #12
 8020fea:	b009      	add	sp, #36	@ 0x24
 8020fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020ff0:	08030020 	.word	0x08030020
 8020ff4:	20047134 	.word	0x20047134

08020ff8 <rmw_send_response>:
 8020ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020ffa:	4605      	mov	r5, r0
 8020ffc:	6800      	ldr	r0, [r0, #0]
 8020ffe:	b091      	sub	sp, #68	@ 0x44
 8021000:	460c      	mov	r4, r1
 8021002:	4616      	mov	r6, r2
 8021004:	b128      	cbz	r0, 8021012 <rmw_send_response+0x1a>
 8021006:	4b29      	ldr	r3, [pc, #164]	@ (80210ac <rmw_send_response+0xb4>)
 8021008:	6819      	ldr	r1, [r3, #0]
 802100a:	f7df f901 	bl	8000210 <strcmp>
 802100e:	2800      	cmp	r0, #0
 8021010:	d141      	bne.n	8021096 <rmw_send_response+0x9e>
 8021012:	686d      	ldr	r5, [r5, #4]
 8021014:	68a1      	ldr	r1, [r4, #8]
 8021016:	6860      	ldr	r0, [r4, #4]
 8021018:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 802101a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 802101e:	9307      	str	r3, [sp, #28]
 8021020:	4623      	mov	r3, r4
 8021022:	9206      	str	r2, [sp, #24]
 8021024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021028:	789b      	ldrb	r3, [r3, #2]
 802102a:	f88d 2017 	strb.w	r2, [sp, #23]
 802102e:	f88d 3016 	strb.w	r3, [sp, #22]
 8021032:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8021036:	68e2      	ldr	r2, [r4, #12]
 8021038:	f8ad 3014 	strh.w	r3, [sp, #20]
 802103c:	ab02      	add	r3, sp, #8
 802103e:	696c      	ldr	r4, [r5, #20]
 8021040:	c307      	stmia	r3!, {r0, r1, r2}
 8021042:	68e3      	ldr	r3, [r4, #12]
 8021044:	4798      	blx	r3
 8021046:	6844      	ldr	r4, [r0, #4]
 8021048:	4630      	mov	r0, r6
 802104a:	6923      	ldr	r3, [r4, #16]
 802104c:	4798      	blx	r3
 802104e:	f100 0318 	add.w	r3, r0, #24
 8021052:	6938      	ldr	r0, [r7, #16]
 8021054:	9300      	str	r3, [sp, #0]
 8021056:	ab08      	add	r3, sp, #32
 8021058:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802105c:	692a      	ldr	r2, [r5, #16]
 802105e:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8021060:	f004 fc9e 	bl	80259a0 <uxr_prepare_output_stream>
 8021064:	b910      	cbnz	r0, 802106c <rmw_send_response+0x74>
 8021066:	2001      	movs	r0, #1
 8021068:	b011      	add	sp, #68	@ 0x44
 802106a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802106c:	a902      	add	r1, sp, #8
 802106e:	a808      	add	r0, sp, #32
 8021070:	f005 fc28 	bl	80268c4 <uxr_serialize_SampleIdentity>
 8021074:	68a3      	ldr	r3, [r4, #8]
 8021076:	a908      	add	r1, sp, #32
 8021078:	4630      	mov	r0, r6
 802107a:	4798      	blx	r3
 802107c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8021080:	6938      	ldr	r0, [r7, #16]
 8021082:	2b01      	cmp	r3, #1
 8021084:	d00a      	beq.n	802109c <rmw_send_response+0xa4>
 8021086:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8021088:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802108c:	f003 fa98 	bl	80245c0 <uxr_run_session_until_confirm_delivery>
 8021090:	2000      	movs	r0, #0
 8021092:	b011      	add	sp, #68	@ 0x44
 8021094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021096:	200c      	movs	r0, #12
 8021098:	b011      	add	sp, #68	@ 0x44
 802109a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802109c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80210a0:	f002 fed4 	bl	8023e4c <uxr_flash_output_streams>
 80210a4:	2000      	movs	r0, #0
 80210a6:	b011      	add	sp, #68	@ 0x44
 80210a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80210aa:	bf00      	nop
 80210ac:	08030020 	.word	0x08030020

080210b0 <rmw_take_response>:
 80210b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80210b4:	4604      	mov	r4, r0
 80210b6:	6800      	ldr	r0, [r0, #0]
 80210b8:	b088      	sub	sp, #32
 80210ba:	460f      	mov	r7, r1
 80210bc:	4690      	mov	r8, r2
 80210be:	461d      	mov	r5, r3
 80210c0:	b120      	cbz	r0, 80210cc <rmw_take_response+0x1c>
 80210c2:	4b1d      	ldr	r3, [pc, #116]	@ (8021138 <rmw_take_response+0x88>)
 80210c4:	6819      	ldr	r1, [r3, #0]
 80210c6:	f7df f8a3 	bl	8000210 <strcmp>
 80210ca:	bb68      	cbnz	r0, 8021128 <rmw_take_response+0x78>
 80210cc:	b10d      	cbz	r5, 80210d2 <rmw_take_response+0x22>
 80210ce:	2300      	movs	r3, #0
 80210d0:	702b      	strb	r3, [r5, #0]
 80210d2:	6864      	ldr	r4, [r4, #4]
 80210d4:	f000 fe38 	bl	8021d48 <rmw_uxrce_clean_expired_static_input_buffer>
 80210d8:	4620      	mov	r0, r4
 80210da:	f000 fe0b 	bl	8021cf4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80210de:	4606      	mov	r6, r0
 80210e0:	b330      	cbz	r0, 8021130 <rmw_take_response+0x80>
 80210e2:	6963      	ldr	r3, [r4, #20]
 80210e4:	6884      	ldr	r4, [r0, #8]
 80210e6:	68db      	ldr	r3, [r3, #12]
 80210e8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80210ec:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80210f0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80210f4:	4798      	blx	r3
 80210f6:	6847      	ldr	r7, [r0, #4]
 80210f8:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80210fc:	f104 0110 	add.w	r1, r4, #16
 8021100:	4668      	mov	r0, sp
 8021102:	f7fb fec3 	bl	801ce8c <ucdr_init_buffer>
 8021106:	4641      	mov	r1, r8
 8021108:	68fb      	ldr	r3, [r7, #12]
 802110a:	4668      	mov	r0, sp
 802110c:	4798      	blx	r3
 802110e:	4631      	mov	r1, r6
 8021110:	4604      	mov	r4, r0
 8021112:	480a      	ldr	r0, [pc, #40]	@ (802113c <rmw_take_response+0x8c>)
 8021114:	f006 f912 	bl	802733c <put_memory>
 8021118:	b105      	cbz	r5, 802111c <rmw_take_response+0x6c>
 802111a:	702c      	strb	r4, [r5, #0]
 802111c:	f084 0001 	eor.w	r0, r4, #1
 8021120:	b2c0      	uxtb	r0, r0
 8021122:	b008      	add	sp, #32
 8021124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021128:	200c      	movs	r0, #12
 802112a:	b008      	add	sp, #32
 802112c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021130:	2001      	movs	r0, #1
 8021132:	b008      	add	sp, #32
 8021134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021138:	08030020 	.word	0x08030020
 802113c:	20047134 	.word	0x20047134

08021140 <rmw_destroy_service>:
 8021140:	b570      	push	{r4, r5, r6, lr}
 8021142:	b128      	cbz	r0, 8021150 <rmw_destroy_service+0x10>
 8021144:	4604      	mov	r4, r0
 8021146:	6800      	ldr	r0, [r0, #0]
 8021148:	460d      	mov	r5, r1
 802114a:	f000 fef5 	bl	8021f38 <is_uxrce_rmw_identifier_valid>
 802114e:	b910      	cbnz	r0, 8021156 <rmw_destroy_service+0x16>
 8021150:	2401      	movs	r4, #1
 8021152:	4620      	mov	r0, r4
 8021154:	bd70      	pop	{r4, r5, r6, pc}
 8021156:	6863      	ldr	r3, [r4, #4]
 8021158:	2b00      	cmp	r3, #0
 802115a:	d0f9      	beq.n	8021150 <rmw_destroy_service+0x10>
 802115c:	2d00      	cmp	r5, #0
 802115e:	d0f7      	beq.n	8021150 <rmw_destroy_service+0x10>
 8021160:	6828      	ldr	r0, [r5, #0]
 8021162:	f000 fee9 	bl	8021f38 <is_uxrce_rmw_identifier_valid>
 8021166:	2800      	cmp	r0, #0
 8021168:	d0f2      	beq.n	8021150 <rmw_destroy_service+0x10>
 802116a:	686e      	ldr	r6, [r5, #4]
 802116c:	2e00      	cmp	r6, #0
 802116e:	d0ef      	beq.n	8021150 <rmw_destroy_service+0x10>
 8021170:	6864      	ldr	r4, [r4, #4]
 8021172:	6932      	ldr	r2, [r6, #16]
 8021174:	6920      	ldr	r0, [r4, #16]
 8021176:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 802117a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802117e:	6819      	ldr	r1, [r3, #0]
 8021180:	f002 fc4c 	bl	8023a1c <uxr_buffer_cancel_data>
 8021184:	4602      	mov	r2, r0
 8021186:	6920      	ldr	r0, [r4, #16]
 8021188:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 802118c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8021190:	f000 fe58 	bl	8021e44 <run_xrce_session>
 8021194:	6920      	ldr	r0, [r4, #16]
 8021196:	6932      	ldr	r2, [r6, #16]
 8021198:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 802119c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80211a0:	6819      	ldr	r1, [r3, #0]
 80211a2:	f002 f9b7 	bl	8023514 <uxr_buffer_delete_entity>
 80211a6:	4602      	mov	r2, r0
 80211a8:	6920      	ldr	r0, [r4, #16]
 80211aa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80211ae:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80211b2:	f000 fe47 	bl	8021e44 <run_xrce_session>
 80211b6:	4603      	mov	r3, r0
 80211b8:	4628      	mov	r0, r5
 80211ba:	2b00      	cmp	r3, #0
 80211bc:	bf14      	ite	ne
 80211be:	2400      	movne	r4, #0
 80211c0:	2402      	moveq	r4, #2
 80211c2:	f000 fd05 	bl	8021bd0 <rmw_uxrce_fini_service_memory>
 80211c6:	e7c4      	b.n	8021152 <rmw_destroy_service+0x12>

080211c8 <rmw_create_subscription>:
 80211c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211cc:	b08d      	sub	sp, #52	@ 0x34
 80211ce:	2900      	cmp	r1, #0
 80211d0:	f000 80d8 	beq.w	8021384 <rmw_create_subscription+0x1bc>
 80211d4:	4604      	mov	r4, r0
 80211d6:	2800      	cmp	r0, #0
 80211d8:	f000 80d4 	beq.w	8021384 <rmw_create_subscription+0x1bc>
 80211dc:	6800      	ldr	r0, [r0, #0]
 80211de:	460e      	mov	r6, r1
 80211e0:	4615      	mov	r5, r2
 80211e2:	461f      	mov	r7, r3
 80211e4:	f000 fea8 	bl	8021f38 <is_uxrce_rmw_identifier_valid>
 80211e8:	f080 0001 	eor.w	r0, r0, #1
 80211ec:	b2c0      	uxtb	r0, r0
 80211ee:	2800      	cmp	r0, #0
 80211f0:	f040 80c8 	bne.w	8021384 <rmw_create_subscription+0x1bc>
 80211f4:	2d00      	cmp	r5, #0
 80211f6:	f000 80c5 	beq.w	8021384 <rmw_create_subscription+0x1bc>
 80211fa:	782b      	ldrb	r3, [r5, #0]
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	f000 80c1 	beq.w	8021384 <rmw_create_subscription+0x1bc>
 8021202:	2f00      	cmp	r7, #0
 8021204:	f000 80be 	beq.w	8021384 <rmw_create_subscription+0x1bc>
 8021208:	4867      	ldr	r0, [pc, #412]	@ (80213a8 <rmw_create_subscription+0x1e0>)
 802120a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 802120e:	f006 f885 	bl	802731c <get_memory>
 8021212:	4604      	mov	r4, r0
 8021214:	2800      	cmp	r0, #0
 8021216:	f000 80b6 	beq.w	8021386 <rmw_create_subscription+0x1be>
 802121a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 802121e:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 8021222:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 8021226:	f7ff fa65 	bl	80206f4 <rmw_get_implementation_identifier>
 802122a:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 802122e:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 8021232:	4628      	mov	r0, r5
 8021234:	f7df f84c 	bl	80002d0 <strlen>
 8021238:	3001      	adds	r0, #1
 802123a:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 802123e:	283c      	cmp	r0, #60	@ 0x3c
 8021240:	f200 80a5 	bhi.w	802138e <rmw_create_subscription+0x1c6>
 8021244:	462b      	mov	r3, r5
 8021246:	4a59      	ldr	r2, [pc, #356]	@ (80213ac <rmw_create_subscription+0x1e4>)
 8021248:	213c      	movs	r1, #60	@ 0x3c
 802124a:	4650      	mov	r0, sl
 802124c:	f008 f87c 	bl	8029348 <sniprintf>
 8021250:	4639      	mov	r1, r7
 8021252:	2250      	movs	r2, #80	@ 0x50
 8021254:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8021258:	f8c8 9020 	str.w	r9, [r8, #32]
 802125c:	f008 fb05 	bl	802986a <memcpy>
 8021260:	4630      	mov	r0, r6
 8021262:	4953      	ldr	r1, [pc, #332]	@ (80213b0 <rmw_create_subscription+0x1e8>)
 8021264:	f000 fe76 	bl	8021f54 <get_message_typesupport_handle>
 8021268:	2800      	cmp	r0, #0
 802126a:	f000 8090 	beq.w	802138e <rmw_create_subscription+0x1c6>
 802126e:	6842      	ldr	r2, [r0, #4]
 8021270:	f8c8 2018 	str.w	r2, [r8, #24]
 8021274:	2a00      	cmp	r2, #0
 8021276:	f000 808a 	beq.w	802138e <rmw_create_subscription+0x1c6>
 802127a:	4629      	mov	r1, r5
 802127c:	463b      	mov	r3, r7
 802127e:	4648      	mov	r0, r9
 8021280:	f006 f89a 	bl	80273b8 <create_topic>
 8021284:	f8c8 001c 	str.w	r0, [r8, #28]
 8021288:	2800      	cmp	r0, #0
 802128a:	f000 8085 	beq.w	8021398 <rmw_create_subscription+0x1d0>
 802128e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021292:	2104      	movs	r1, #4
 8021294:	2506      	movs	r5, #6
 8021296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802129a:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 802129e:	1c42      	adds	r2, r0, #1
 80212a0:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80212a4:	f002 fb50 	bl	8023948 <uxr_object_id>
 80212a8:	f8c8 0010 	str.w	r0, [r8, #16]
 80212ac:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80212b0:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80212b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80212b8:	9500      	str	r5, [sp, #0]
 80212ba:	6819      	ldr	r1, [r3, #0]
 80212bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80212c0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80212c4:	f002 f9da 	bl	802367c <uxr_buffer_create_subscriber_bin>
 80212c8:	4602      	mov	r2, r0
 80212ca:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80212ce:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80212d2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80212d6:	f000 fdb5 	bl	8021e44 <run_xrce_session>
 80212da:	2800      	cmp	r0, #0
 80212dc:	d057      	beq.n	802138e <rmw_create_subscription+0x1c6>
 80212de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80212e2:	4629      	mov	r1, r5
 80212e4:	ae08      	add	r6, sp, #32
 80212e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80212ea:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 80212ee:	1c42      	adds	r2, r0, #1
 80212f0:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 80212f4:	f002 fb28 	bl	8023948 <uxr_object_id>
 80212f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80212fc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8021300:	4639      	mov	r1, r7
 8021302:	f8c8 0014 	str.w	r0, [r8, #20]
 8021306:	4630      	mov	r0, r6
 8021308:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 802130c:	9305      	str	r3, [sp, #20]
 802130e:	f000 fdb5 	bl	8021e7c <convert_qos_profile>
 8021312:	9503      	str	r5, [sp, #12]
 8021314:	9b05      	ldr	r3, [sp, #20]
 8021316:	e896 0003 	ldmia.w	r6, {r0, r1}
 802131a:	9001      	str	r0, [sp, #4]
 802131c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8021320:	f8ad 1008 	strh.w	r1, [sp, #8]
 8021324:	691b      	ldr	r3, [r3, #16]
 8021326:	9300      	str	r3, [sp, #0]
 8021328:	f8db 1000 	ldr.w	r1, [fp]
 802132c:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8021330:	f002 f9d4 	bl	80236dc <uxr_buffer_create_datareader_bin>
 8021334:	4602      	mov	r2, r0
 8021336:	f8d9 0010 	ldr.w	r0, [r9, #16]
 802133a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 802133e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8021342:	f000 fd7f 	bl	8021e44 <run_xrce_session>
 8021346:	b310      	cbz	r0, 802138e <rmw_create_subscription+0x1c6>
 8021348:	7a3b      	ldrb	r3, [r7, #8]
 802134a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802134e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8021352:	2b02      	cmp	r3, #2
 8021354:	920a      	str	r2, [sp, #40]	@ 0x28
 8021356:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 802135a:	f04f 0200 	mov.w	r2, #0
 802135e:	bf08      	it	eq
 8021360:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8021364:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8021368:	bf18      	it	ne
 802136a:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 802136e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021370:	9307      	str	r3, [sp, #28]
 8021372:	ab0a      	add	r3, sp, #40	@ 0x28
 8021374:	9300      	str	r3, [sp, #0]
 8021376:	9b07      	ldr	r3, [sp, #28]
 8021378:	f8d8 2014 	ldr.w	r2, [r8, #20]
 802137c:	6809      	ldr	r1, [r1, #0]
 802137e:	f002 fb13 	bl	80239a8 <uxr_buffer_request_data>
 8021382:	e000      	b.n	8021386 <rmw_create_subscription+0x1be>
 8021384:	2400      	movs	r4, #0
 8021386:	4620      	mov	r0, r4
 8021388:	b00d      	add	sp, #52	@ 0x34
 802138a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802138e:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8021392:	b108      	cbz	r0, 8021398 <rmw_create_subscription+0x1d0>
 8021394:	f000 fc48 	bl	8021c28 <rmw_uxrce_fini_topic_memory>
 8021398:	4620      	mov	r0, r4
 802139a:	2400      	movs	r4, #0
 802139c:	f000 fc02 	bl	8021ba4 <rmw_uxrce_fini_subscription_memory>
 80213a0:	4620      	mov	r0, r4
 80213a2:	b00d      	add	sp, #52	@ 0x34
 80213a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213a8:	20047144 	.word	0x20047144
 80213ac:	0802fd64 	.word	0x0802fd64
 80213b0:	0802f714 	.word	0x0802f714

080213b4 <rmw_subscription_get_actual_qos>:
 80213b4:	b178      	cbz	r0, 80213d6 <rmw_subscription_get_actual_qos+0x22>
 80213b6:	b510      	push	{r4, lr}
 80213b8:	fab1 f481 	clz	r4, r1
 80213bc:	0964      	lsrs	r4, r4, #5
 80213be:	b141      	cbz	r1, 80213d2 <rmw_subscription_get_actual_qos+0x1e>
 80213c0:	6843      	ldr	r3, [r0, #4]
 80213c2:	2250      	movs	r2, #80	@ 0x50
 80213c4:	4608      	mov	r0, r1
 80213c6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80213ca:	f008 fa4e 	bl	802986a <memcpy>
 80213ce:	4620      	mov	r0, r4
 80213d0:	bd10      	pop	{r4, pc}
 80213d2:	200b      	movs	r0, #11
 80213d4:	bd10      	pop	{r4, pc}
 80213d6:	200b      	movs	r0, #11
 80213d8:	4770      	bx	lr
 80213da:	bf00      	nop

080213dc <rmw_destroy_subscription>:
 80213dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80213e0:	b128      	cbz	r0, 80213ee <rmw_destroy_subscription+0x12>
 80213e2:	4604      	mov	r4, r0
 80213e4:	6800      	ldr	r0, [r0, #0]
 80213e6:	460d      	mov	r5, r1
 80213e8:	f000 fda6 	bl	8021f38 <is_uxrce_rmw_identifier_valid>
 80213ec:	b918      	cbnz	r0, 80213f6 <rmw_destroy_subscription+0x1a>
 80213ee:	2401      	movs	r4, #1
 80213f0:	4620      	mov	r0, r4
 80213f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80213f6:	6863      	ldr	r3, [r4, #4]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d0f8      	beq.n	80213ee <rmw_destroy_subscription+0x12>
 80213fc:	fab5 f485 	clz	r4, r5
 8021400:	0964      	lsrs	r4, r4, #5
 8021402:	2d00      	cmp	r5, #0
 8021404:	d0f3      	beq.n	80213ee <rmw_destroy_subscription+0x12>
 8021406:	6828      	ldr	r0, [r5, #0]
 8021408:	f000 fd96 	bl	8021f38 <is_uxrce_rmw_identifier_valid>
 802140c:	2800      	cmp	r0, #0
 802140e:	d0ee      	beq.n	80213ee <rmw_destroy_subscription+0x12>
 8021410:	686e      	ldr	r6, [r5, #4]
 8021412:	2e00      	cmp	r6, #0
 8021414:	d0eb      	beq.n	80213ee <rmw_destroy_subscription+0x12>
 8021416:	6a37      	ldr	r7, [r6, #32]
 8021418:	6972      	ldr	r2, [r6, #20]
 802141a:	6938      	ldr	r0, [r7, #16]
 802141c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8021420:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8021424:	6819      	ldr	r1, [r3, #0]
 8021426:	f002 faf9 	bl	8023a1c <uxr_buffer_cancel_data>
 802142a:	4602      	mov	r2, r0
 802142c:	6938      	ldr	r0, [r7, #16]
 802142e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8021432:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8021436:	f000 fd05 	bl	8021e44 <run_xrce_session>
 802143a:	69f0      	ldr	r0, [r6, #28]
 802143c:	f006 f80c 	bl	8027458 <destroy_topic>
 8021440:	6a33      	ldr	r3, [r6, #32]
 8021442:	6972      	ldr	r2, [r6, #20]
 8021444:	6918      	ldr	r0, [r3, #16]
 8021446:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 802144a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802144e:	6819      	ldr	r1, [r3, #0]
 8021450:	f002 f860 	bl	8023514 <uxr_buffer_delete_entity>
 8021454:	6a33      	ldr	r3, [r6, #32]
 8021456:	4680      	mov	r8, r0
 8021458:	6932      	ldr	r2, [r6, #16]
 802145a:	6918      	ldr	r0, [r3, #16]
 802145c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8021460:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8021464:	6819      	ldr	r1, [r3, #0]
 8021466:	f002 f855 	bl	8023514 <uxr_buffer_delete_entity>
 802146a:	4606      	mov	r6, r0
 802146c:	6938      	ldr	r0, [r7, #16]
 802146e:	4642      	mov	r2, r8
 8021470:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8021474:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8021478:	f000 fce4 	bl	8021e44 <run_xrce_session>
 802147c:	693f      	ldr	r7, [r7, #16]
 802147e:	4632      	mov	r2, r6
 8021480:	4606      	mov	r6, r0
 8021482:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8021486:	4638      	mov	r0, r7
 8021488:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 802148c:	f000 fcda 	bl	8021e44 <run_xrce_session>
 8021490:	b126      	cbz	r6, 802149c <rmw_destroy_subscription+0xc0>
 8021492:	b118      	cbz	r0, 802149c <rmw_destroy_subscription+0xc0>
 8021494:	4628      	mov	r0, r5
 8021496:	f000 fb85 	bl	8021ba4 <rmw_uxrce_fini_subscription_memory>
 802149a:	e7a9      	b.n	80213f0 <rmw_destroy_subscription+0x14>
 802149c:	2402      	movs	r4, #2
 802149e:	e7f9      	b.n	8021494 <rmw_destroy_subscription+0xb8>

080214a0 <rmw_take_with_info>:
 80214a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214a2:	4604      	mov	r4, r0
 80214a4:	6800      	ldr	r0, [r0, #0]
 80214a6:	b089      	sub	sp, #36	@ 0x24
 80214a8:	460f      	mov	r7, r1
 80214aa:	4615      	mov	r5, r2
 80214ac:	b128      	cbz	r0, 80214ba <rmw_take_with_info+0x1a>
 80214ae:	4b24      	ldr	r3, [pc, #144]	@ (8021540 <rmw_take_with_info+0xa0>)
 80214b0:	6819      	ldr	r1, [r3, #0]
 80214b2:	f7de fead 	bl	8000210 <strcmp>
 80214b6:	2800      	cmp	r0, #0
 80214b8:	d13e      	bne.n	8021538 <rmw_take_with_info+0x98>
 80214ba:	b305      	cbz	r5, 80214fe <rmw_take_with_info+0x5e>
 80214bc:	2300      	movs	r3, #0
 80214be:	6864      	ldr	r4, [r4, #4]
 80214c0:	702b      	strb	r3, [r5, #0]
 80214c2:	f000 fc41 	bl	8021d48 <rmw_uxrce_clean_expired_static_input_buffer>
 80214c6:	4620      	mov	r0, r4
 80214c8:	f000 fc14 	bl	8021cf4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80214cc:	4606      	mov	r6, r0
 80214ce:	b1f0      	cbz	r0, 802150e <rmw_take_with_info+0x6e>
 80214d0:	6881      	ldr	r1, [r0, #8]
 80214d2:	4668      	mov	r0, sp
 80214d4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80214d8:	3110      	adds	r1, #16
 80214da:	f7fb fcd7 	bl	801ce8c <ucdr_init_buffer>
 80214de:	69a3      	ldr	r3, [r4, #24]
 80214e0:	4639      	mov	r1, r7
 80214e2:	4668      	mov	r0, sp
 80214e4:	68db      	ldr	r3, [r3, #12]
 80214e6:	4798      	blx	r3
 80214e8:	4604      	mov	r4, r0
 80214ea:	4631      	mov	r1, r6
 80214ec:	4815      	ldr	r0, [pc, #84]	@ (8021544 <rmw_take_with_info+0xa4>)
 80214ee:	f005 ff25 	bl	802733c <put_memory>
 80214f2:	702c      	strb	r4, [r5, #0]
 80214f4:	f084 0001 	eor.w	r0, r4, #1
 80214f8:	b2c0      	uxtb	r0, r0
 80214fa:	b009      	add	sp, #36	@ 0x24
 80214fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214fe:	6864      	ldr	r4, [r4, #4]
 8021500:	f000 fc22 	bl	8021d48 <rmw_uxrce_clean_expired_static_input_buffer>
 8021504:	4620      	mov	r0, r4
 8021506:	f000 fbf5 	bl	8021cf4 <rmw_uxrce_find_static_input_buffer_by_owner>
 802150a:	4605      	mov	r5, r0
 802150c:	b910      	cbnz	r0, 8021514 <rmw_take_with_info+0x74>
 802150e:	2001      	movs	r0, #1
 8021510:	b009      	add	sp, #36	@ 0x24
 8021512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021514:	68a9      	ldr	r1, [r5, #8]
 8021516:	4668      	mov	r0, sp
 8021518:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 802151c:	3110      	adds	r1, #16
 802151e:	f7fb fcb5 	bl	801ce8c <ucdr_init_buffer>
 8021522:	69a3      	ldr	r3, [r4, #24]
 8021524:	4639      	mov	r1, r7
 8021526:	4668      	mov	r0, sp
 8021528:	68db      	ldr	r3, [r3, #12]
 802152a:	4798      	blx	r3
 802152c:	4629      	mov	r1, r5
 802152e:	4604      	mov	r4, r0
 8021530:	4804      	ldr	r0, [pc, #16]	@ (8021544 <rmw_take_with_info+0xa4>)
 8021532:	f005 ff03 	bl	802733c <put_memory>
 8021536:	e7dd      	b.n	80214f4 <rmw_take_with_info+0x54>
 8021538:	200c      	movs	r0, #12
 802153a:	b009      	add	sp, #36	@ 0x24
 802153c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802153e:	bf00      	nop
 8021540:	08030020 	.word	0x08030020
 8021544:	20047134 	.word	0x20047134

08021548 <rmw_uxrce_transport_init>:
 8021548:	b508      	push	{r3, lr}
 802154a:	b108      	cbz	r0, 8021550 <rmw_uxrce_transport_init+0x8>
 802154c:	f100 0210 	add.w	r2, r0, #16
 8021550:	b139      	cbz	r1, 8021562 <rmw_uxrce_transport_init+0x1a>
 8021552:	6949      	ldr	r1, [r1, #20]
 8021554:	4610      	mov	r0, r2
 8021556:	f002 f9bf 	bl	80238d8 <uxr_init_custom_transport>
 802155a:	f080 0001 	eor.w	r0, r0, #1
 802155e:	b2c0      	uxtb	r0, r0
 8021560:	bd08      	pop	{r3, pc}
 8021562:	4b04      	ldr	r3, [pc, #16]	@ (8021574 <rmw_uxrce_transport_init+0x2c>)
 8021564:	4610      	mov	r0, r2
 8021566:	6859      	ldr	r1, [r3, #4]
 8021568:	f002 f9b6 	bl	80238d8 <uxr_init_custom_transport>
 802156c:	f080 0001 	eor.w	r0, r0, #1
 8021570:	b2c0      	uxtb	r0, r0
 8021572:	bd08      	pop	{r3, pc}
 8021574:	2004273c 	.word	0x2004273c

08021578 <rmw_wait>:
 8021578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802157c:	4698      	mov	r8, r3
 802157e:	ea40 0301 	orr.w	r3, r0, r1
 8021582:	b089      	sub	sp, #36	@ 0x24
 8021584:	ea48 0303 	orr.w	r3, r8, r3
 8021588:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802158a:	4313      	orrs	r3, r2
 802158c:	f000 8106 	beq.w	802179c <rmw_wait+0x224>
 8021590:	4605      	mov	r5, r0
 8021592:	460e      	mov	r6, r1
 8021594:	4691      	mov	r9, r2
 8021596:	b16c      	cbz	r4, 80215b4 <rmw_wait+0x3c>
 8021598:	4ba6      	ldr	r3, [pc, #664]	@ (8021834 <rmw_wait+0x2bc>)
 802159a:	af04      	add	r7, sp, #16
 802159c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802159e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80215a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80215a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80215aa:	f005 fd47 	bl	802703c <rmw_time_equal>
 80215ae:	2800      	cmp	r0, #0
 80215b0:	f000 810b 	beq.w	80217ca <rmw_wait+0x252>
 80215b4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80215b8:	f000 fbc6 	bl	8021d48 <rmw_uxrce_clean_expired_static_input_buffer>
 80215bc:	4b9e      	ldr	r3, [pc, #632]	@ (8021838 <rmw_wait+0x2c0>)
 80215be:	681c      	ldr	r4, [r3, #0]
 80215c0:	b14c      	cbz	r4, 80215d6 <rmw_wait+0x5e>
 80215c2:	4623      	mov	r3, r4
 80215c4:	2100      	movs	r1, #0
 80215c6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80215ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80215ce:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	d1f7      	bne.n	80215c6 <rmw_wait+0x4e>
 80215d6:	f1b9 0f00 	cmp.w	r9, #0
 80215da:	d011      	beq.n	8021600 <rmw_wait+0x88>
 80215dc:	f8d9 1000 	ldr.w	r1, [r9]
 80215e0:	b171      	cbz	r1, 8021600 <rmw_wait+0x88>
 80215e2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80215e6:	2300      	movs	r3, #0
 80215e8:	2001      	movs	r0, #1
 80215ea:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80215ee:	3301      	adds	r3, #1
 80215f0:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80215f2:	4299      	cmp	r1, r3
 80215f4:	6912      	ldr	r2, [r2, #16]
 80215f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80215fa:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80215fe:	d1f4      	bne.n	80215ea <rmw_wait+0x72>
 8021600:	f1b8 0f00 	cmp.w	r8, #0
 8021604:	d011      	beq.n	802162a <rmw_wait+0xb2>
 8021606:	f8d8 1000 	ldr.w	r1, [r8]
 802160a:	b171      	cbz	r1, 802162a <rmw_wait+0xb2>
 802160c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8021610:	2300      	movs	r3, #0
 8021612:	2001      	movs	r0, #1
 8021614:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021618:	3301      	adds	r3, #1
 802161a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 802161c:	4299      	cmp	r1, r3
 802161e:	6912      	ldr	r2, [r2, #16]
 8021620:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8021624:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8021628:	d1f4      	bne.n	8021614 <rmw_wait+0x9c>
 802162a:	b185      	cbz	r5, 802164e <rmw_wait+0xd6>
 802162c:	6829      	ldr	r1, [r5, #0]
 802162e:	b171      	cbz	r1, 802164e <rmw_wait+0xd6>
 8021630:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8021634:	2300      	movs	r3, #0
 8021636:	2001      	movs	r0, #1
 8021638:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802163c:	3301      	adds	r3, #1
 802163e:	6a12      	ldr	r2, [r2, #32]
 8021640:	4299      	cmp	r1, r3
 8021642:	6912      	ldr	r2, [r2, #16]
 8021644:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8021648:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 802164c:	d1f4      	bne.n	8021638 <rmw_wait+0xc0>
 802164e:	b344      	cbz	r4, 80216a2 <rmw_wait+0x12a>
 8021650:	4622      	mov	r2, r4
 8021652:	2300      	movs	r3, #0
 8021654:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8021658:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 802165c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8021660:	440b      	add	r3, r1
 8021662:	b2db      	uxtb	r3, r3
 8021664:	2a00      	cmp	r2, #0
 8021666:	d1f5      	bne.n	8021654 <rmw_wait+0xdc>
 8021668:	2b00      	cmp	r3, #0
 802166a:	d05f      	beq.n	802172c <rmw_wait+0x1b4>
 802166c:	1c7a      	adds	r2, r7, #1
 802166e:	d00d      	beq.n	802168c <rmw_wait+0x114>
 8021670:	ee07 7a90 	vmov	s15, r7
 8021674:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8021678:	ee07 3a90 	vmov	s15, r3
 802167c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021684:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8021688:	ee17 7a90 	vmov	r7, s15
 802168c:	68a0      	ldr	r0, [r4, #8]
 802168e:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8021692:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8021696:	2b00      	cmp	r3, #0
 8021698:	f040 808d 	bne.w	80217b6 <rmw_wait+0x23e>
 802169c:	6864      	ldr	r4, [r4, #4]
 802169e:	2c00      	cmp	r4, #0
 80216a0:	d1f4      	bne.n	802168c <rmw_wait+0x114>
 80216a2:	f1b9 0f00 	cmp.w	r9, #0
 80216a6:	f000 80a1 	beq.w	80217ec <rmw_wait+0x274>
 80216aa:	f8d9 7000 	ldr.w	r7, [r9]
 80216ae:	2f00      	cmp	r7, #0
 80216b0:	f000 80a4 	beq.w	80217fc <rmw_wait+0x284>
 80216b4:	2400      	movs	r4, #0
 80216b6:	4627      	mov	r7, r4
 80216b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80216bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80216c0:	f000 fb18 	bl	8021cf4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80216c4:	2800      	cmp	r0, #0
 80216c6:	d03b      	beq.n	8021740 <rmw_wait+0x1c8>
 80216c8:	3401      	adds	r4, #1
 80216ca:	f8d9 3000 	ldr.w	r3, [r9]
 80216ce:	2701      	movs	r7, #1
 80216d0:	42a3      	cmp	r3, r4
 80216d2:	d8f1      	bhi.n	80216b8 <rmw_wait+0x140>
 80216d4:	2701      	movs	r7, #1
 80216d6:	f1b8 0f00 	cmp.w	r8, #0
 80216da:	d010      	beq.n	80216fe <rmw_wait+0x186>
 80216dc:	f8d8 3000 	ldr.w	r3, [r8]
 80216e0:	b16b      	cbz	r3, 80216fe <rmw_wait+0x186>
 80216e2:	2400      	movs	r4, #0
 80216e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80216e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80216ec:	f000 fb02 	bl	8021cf4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80216f0:	b370      	cbz	r0, 8021750 <rmw_wait+0x1d8>
 80216f2:	3401      	adds	r4, #1
 80216f4:	f8d8 3000 	ldr.w	r3, [r8]
 80216f8:	2701      	movs	r7, #1
 80216fa:	42a3      	cmp	r3, r4
 80216fc:	d8f2      	bhi.n	80216e4 <rmw_wait+0x16c>
 80216fe:	2d00      	cmp	r5, #0
 8021700:	d035      	beq.n	802176e <rmw_wait+0x1f6>
 8021702:	682b      	ldr	r3, [r5, #0]
 8021704:	b39b      	cbz	r3, 802176e <rmw_wait+0x1f6>
 8021706:	2400      	movs	r4, #0
 8021708:	686b      	ldr	r3, [r5, #4]
 802170a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802170e:	f000 faf1 	bl	8021cf4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8021712:	b328      	cbz	r0, 8021760 <rmw_wait+0x1e8>
 8021714:	3401      	adds	r4, #1
 8021716:	682b      	ldr	r3, [r5, #0]
 8021718:	2701      	movs	r7, #1
 802171a:	42a3      	cmp	r3, r4
 802171c:	d8f4      	bhi.n	8021708 <rmw_wait+0x190>
 802171e:	2e00      	cmp	r6, #0
 8021720:	d03c      	beq.n	802179c <rmw_wait+0x224>
 8021722:	6834      	ldr	r4, [r6, #0]
 8021724:	2c00      	cmp	r4, #0
 8021726:	d039      	beq.n	802179c <rmw_wait+0x224>
 8021728:	2701      	movs	r7, #1
 802172a:	e023      	b.n	8021774 <rmw_wait+0x1fc>
 802172c:	68a0      	ldr	r0, [r4, #8]
 802172e:	2100      	movs	r1, #0
 8021730:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8021734:	f002 ff0a 	bl	802454c <uxr_run_session_timeout>
 8021738:	6864      	ldr	r4, [r4, #4]
 802173a:	2c00      	cmp	r4, #0
 802173c:	d1f6      	bne.n	802172c <rmw_wait+0x1b4>
 802173e:	e7b0      	b.n	80216a2 <rmw_wait+0x12a>
 8021740:	e9d9 3200 	ldrd	r3, r2, [r9]
 8021744:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8021748:	3401      	adds	r4, #1
 802174a:	42a3      	cmp	r3, r4
 802174c:	d8b4      	bhi.n	80216b8 <rmw_wait+0x140>
 802174e:	e7c2      	b.n	80216d6 <rmw_wait+0x15e>
 8021750:	e9d8 3200 	ldrd	r3, r2, [r8]
 8021754:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8021758:	3401      	adds	r4, #1
 802175a:	429c      	cmp	r4, r3
 802175c:	d3c2      	bcc.n	80216e4 <rmw_wait+0x16c>
 802175e:	e7ce      	b.n	80216fe <rmw_wait+0x186>
 8021760:	e9d5 3200 	ldrd	r3, r2, [r5]
 8021764:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8021768:	3401      	adds	r4, #1
 802176a:	42a3      	cmp	r3, r4
 802176c:	d8cc      	bhi.n	8021708 <rmw_wait+0x190>
 802176e:	b1a6      	cbz	r6, 802179a <rmw_wait+0x222>
 8021770:	6834      	ldr	r4, [r6, #0]
 8021772:	b194      	cbz	r4, 802179a <rmw_wait+0x222>
 8021774:	2300      	movs	r3, #0
 8021776:	461d      	mov	r5, r3
 8021778:	e004      	b.n	8021784 <rmw_wait+0x20c>
 802177a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 802177e:	3301      	adds	r3, #1
 8021780:	42a3      	cmp	r3, r4
 8021782:	d00a      	beq.n	802179a <rmw_wait+0x222>
 8021784:	6870      	ldr	r0, [r6, #4]
 8021786:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 802178a:	7c0a      	ldrb	r2, [r1, #16]
 802178c:	2a00      	cmp	r2, #0
 802178e:	d0f4      	beq.n	802177a <rmw_wait+0x202>
 8021790:	3301      	adds	r3, #1
 8021792:	4617      	mov	r7, r2
 8021794:	740d      	strb	r5, [r1, #16]
 8021796:	42a3      	cmp	r3, r4
 8021798:	d1f4      	bne.n	8021784 <rmw_wait+0x20c>
 802179a:	b147      	cbz	r7, 80217ae <rmw_wait+0x236>
 802179c:	2000      	movs	r0, #0
 802179e:	b009      	add	sp, #36	@ 0x24
 80217a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80217a4:	b11e      	cbz	r6, 80217ae <rmw_wait+0x236>
 80217a6:	6834      	ldr	r4, [r6, #0]
 80217a8:	462f      	mov	r7, r5
 80217aa:	2c00      	cmp	r4, #0
 80217ac:	d1e2      	bne.n	8021774 <rmw_wait+0x1fc>
 80217ae:	2002      	movs	r0, #2
 80217b0:	b009      	add	sp, #36	@ 0x24
 80217b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80217b6:	4639      	mov	r1, r7
 80217b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80217bc:	f002 fee0 	bl	8024580 <uxr_run_session_until_data>
 80217c0:	6864      	ldr	r4, [r4, #4]
 80217c2:	2c00      	cmp	r4, #0
 80217c4:	f47f af62 	bne.w	802168c <rmw_wait+0x114>
 80217c8:	e76b      	b.n	80216a2 <rmw_wait+0x12a>
 80217ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80217ce:	f005 fc8b 	bl	80270e8 <rmw_time_total_nsec>
 80217d2:	2300      	movs	r3, #0
 80217d4:	4a19      	ldr	r2, [pc, #100]	@ (802183c <rmw_wait+0x2c4>)
 80217d6:	f7df fa67 	bl	8000ca8 <__aeabi_uldivmod>
 80217da:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80217de:	4607      	mov	r7, r0
 80217e0:	f171 0300 	sbcs.w	r3, r1, #0
 80217e4:	bfa8      	it	ge
 80217e6:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80217ea:	e6e5      	b.n	80215b8 <rmw_wait+0x40>
 80217ec:	f1b8 0f00 	cmp.w	r8, #0
 80217f0:	d00f      	beq.n	8021812 <rmw_wait+0x29a>
 80217f2:	f8d8 3000 	ldr.w	r3, [r8]
 80217f6:	b193      	cbz	r3, 802181e <rmw_wait+0x2a6>
 80217f8:	464f      	mov	r7, r9
 80217fa:	e772      	b.n	80216e2 <rmw_wait+0x16a>
 80217fc:	f1b8 0f00 	cmp.w	r8, #0
 8021800:	d007      	beq.n	8021812 <rmw_wait+0x29a>
 8021802:	f8d8 3000 	ldr.w	r3, [r8]
 8021806:	2b00      	cmp	r3, #0
 8021808:	f47f af6b 	bne.w	80216e2 <rmw_wait+0x16a>
 802180c:	b155      	cbz	r5, 8021824 <rmw_wait+0x2ac>
 802180e:	461f      	mov	r7, r3
 8021810:	e777      	b.n	8021702 <rmw_wait+0x18a>
 8021812:	2d00      	cmp	r5, #0
 8021814:	d0c6      	beq.n	80217a4 <rmw_wait+0x22c>
 8021816:	682b      	ldr	r3, [r5, #0]
 8021818:	b143      	cbz	r3, 802182c <rmw_wait+0x2b4>
 802181a:	4647      	mov	r7, r8
 802181c:	e773      	b.n	8021706 <rmw_wait+0x18e>
 802181e:	b10d      	cbz	r5, 8021824 <rmw_wait+0x2ac>
 8021820:	464f      	mov	r7, r9
 8021822:	e76e      	b.n	8021702 <rmw_wait+0x18a>
 8021824:	462f      	mov	r7, r5
 8021826:	2e00      	cmp	r6, #0
 8021828:	d1a2      	bne.n	8021770 <rmw_wait+0x1f8>
 802182a:	e7c0      	b.n	80217ae <rmw_wait+0x236>
 802182c:	4647      	mov	r7, r8
 802182e:	2e00      	cmp	r6, #0
 8021830:	d19e      	bne.n	8021770 <rmw_wait+0x1f8>
 8021832:	e7bc      	b.n	80217ae <rmw_wait+0x236>
 8021834:	0802f330 	.word	0x0802f330
 8021838:	20047124 	.word	0x20047124
 802183c:	000f4240 	.word	0x000f4240

08021840 <rmw_create_wait_set>:
 8021840:	b508      	push	{r3, lr}
 8021842:	4803      	ldr	r0, [pc, #12]	@ (8021850 <rmw_create_wait_set+0x10>)
 8021844:	f005 fd6a 	bl	802731c <get_memory>
 8021848:	b108      	cbz	r0, 802184e <rmw_create_wait_set+0xe>
 802184a:	6880      	ldr	r0, [r0, #8]
 802184c:	3010      	adds	r0, #16
 802184e:	bd08      	pop	{r3, pc}
 8021850:	20047164 	.word	0x20047164

08021854 <rmw_destroy_wait_set>:
 8021854:	b508      	push	{r3, lr}
 8021856:	4b08      	ldr	r3, [pc, #32]	@ (8021878 <rmw_destroy_wait_set+0x24>)
 8021858:	6819      	ldr	r1, [r3, #0]
 802185a:	b911      	cbnz	r1, 8021862 <rmw_destroy_wait_set+0xe>
 802185c:	e00a      	b.n	8021874 <rmw_destroy_wait_set+0x20>
 802185e:	6849      	ldr	r1, [r1, #4]
 8021860:	b141      	cbz	r1, 8021874 <rmw_destroy_wait_set+0x20>
 8021862:	688b      	ldr	r3, [r1, #8]
 8021864:	3310      	adds	r3, #16
 8021866:	4298      	cmp	r0, r3
 8021868:	d1f9      	bne.n	802185e <rmw_destroy_wait_set+0xa>
 802186a:	4803      	ldr	r0, [pc, #12]	@ (8021878 <rmw_destroy_wait_set+0x24>)
 802186c:	f005 fd66 	bl	802733c <put_memory>
 8021870:	2000      	movs	r0, #0
 8021872:	bd08      	pop	{r3, pc}
 8021874:	2001      	movs	r0, #1
 8021876:	bd08      	pop	{r3, pc}
 8021878:	20047164 	.word	0x20047164

0802187c <rmw_uxrce_init_service_memory>:
 802187c:	b1e2      	cbz	r2, 80218b8 <rmw_uxrce_init_service_memory+0x3c>
 802187e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021882:	7b05      	ldrb	r5, [r0, #12]
 8021884:	4606      	mov	r6, r0
 8021886:	b9ad      	cbnz	r5, 80218b4 <rmw_uxrce_init_service_memory+0x38>
 8021888:	23c8      	movs	r3, #200	@ 0xc8
 802188a:	4617      	mov	r7, r2
 802188c:	460c      	mov	r4, r1
 802188e:	46a8      	mov	r8, r5
 8021890:	6083      	str	r3, [r0, #8]
 8021892:	f240 1301 	movw	r3, #257	@ 0x101
 8021896:	e9c0 5500 	strd	r5, r5, [r0]
 802189a:	8183      	strh	r3, [r0, #12]
 802189c:	3501      	adds	r5, #1
 802189e:	4621      	mov	r1, r4
 80218a0:	4630      	mov	r0, r6
 80218a2:	f005 fd4b 	bl	802733c <put_memory>
 80218a6:	42af      	cmp	r7, r5
 80218a8:	60a4      	str	r4, [r4, #8]
 80218aa:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80218ae:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80218b2:	d1f3      	bne.n	802189c <rmw_uxrce_init_service_memory+0x20>
 80218b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80218b8:	4770      	bx	lr
 80218ba:	bf00      	nop

080218bc <rmw_uxrce_init_client_memory>:
 80218bc:	b1e2      	cbz	r2, 80218f8 <rmw_uxrce_init_client_memory+0x3c>
 80218be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80218c2:	7b05      	ldrb	r5, [r0, #12]
 80218c4:	4606      	mov	r6, r0
 80218c6:	b9ad      	cbnz	r5, 80218f4 <rmw_uxrce_init_client_memory+0x38>
 80218c8:	23c8      	movs	r3, #200	@ 0xc8
 80218ca:	4617      	mov	r7, r2
 80218cc:	460c      	mov	r4, r1
 80218ce:	46a8      	mov	r8, r5
 80218d0:	6083      	str	r3, [r0, #8]
 80218d2:	f240 1301 	movw	r3, #257	@ 0x101
 80218d6:	e9c0 5500 	strd	r5, r5, [r0]
 80218da:	8183      	strh	r3, [r0, #12]
 80218dc:	3501      	adds	r5, #1
 80218de:	4621      	mov	r1, r4
 80218e0:	4630      	mov	r0, r6
 80218e2:	f005 fd2b 	bl	802733c <put_memory>
 80218e6:	42af      	cmp	r7, r5
 80218e8:	60a4      	str	r4, [r4, #8]
 80218ea:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80218ee:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80218f2:	d1f3      	bne.n	80218dc <rmw_uxrce_init_client_memory+0x20>
 80218f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80218f8:	4770      	bx	lr
 80218fa:	bf00      	nop

080218fc <rmw_uxrce_init_publisher_memory>:
 80218fc:	b1e2      	cbz	r2, 8021938 <rmw_uxrce_init_publisher_memory+0x3c>
 80218fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021902:	7b05      	ldrb	r5, [r0, #12]
 8021904:	4606      	mov	r6, r0
 8021906:	b9ad      	cbnz	r5, 8021934 <rmw_uxrce_init_publisher_memory+0x38>
 8021908:	23d8      	movs	r3, #216	@ 0xd8
 802190a:	4617      	mov	r7, r2
 802190c:	460c      	mov	r4, r1
 802190e:	46a8      	mov	r8, r5
 8021910:	6083      	str	r3, [r0, #8]
 8021912:	f240 1301 	movw	r3, #257	@ 0x101
 8021916:	e9c0 5500 	strd	r5, r5, [r0]
 802191a:	8183      	strh	r3, [r0, #12]
 802191c:	3501      	adds	r5, #1
 802191e:	4621      	mov	r1, r4
 8021920:	4630      	mov	r0, r6
 8021922:	f005 fd0b 	bl	802733c <put_memory>
 8021926:	42af      	cmp	r7, r5
 8021928:	60a4      	str	r4, [r4, #8]
 802192a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 802192e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8021932:	d1f3      	bne.n	802191c <rmw_uxrce_init_publisher_memory+0x20>
 8021934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021938:	4770      	bx	lr
 802193a:	bf00      	nop

0802193c <rmw_uxrce_init_subscription_memory>:
 802193c:	b1e2      	cbz	r2, 8021978 <rmw_uxrce_init_subscription_memory+0x3c>
 802193e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021942:	7b05      	ldrb	r5, [r0, #12]
 8021944:	4606      	mov	r6, r0
 8021946:	b9ad      	cbnz	r5, 8021974 <rmw_uxrce_init_subscription_memory+0x38>
 8021948:	23d8      	movs	r3, #216	@ 0xd8
 802194a:	4617      	mov	r7, r2
 802194c:	460c      	mov	r4, r1
 802194e:	46a8      	mov	r8, r5
 8021950:	6083      	str	r3, [r0, #8]
 8021952:	f240 1301 	movw	r3, #257	@ 0x101
 8021956:	e9c0 5500 	strd	r5, r5, [r0]
 802195a:	8183      	strh	r3, [r0, #12]
 802195c:	3501      	adds	r5, #1
 802195e:	4621      	mov	r1, r4
 8021960:	4630      	mov	r0, r6
 8021962:	f005 fceb 	bl	802733c <put_memory>
 8021966:	42af      	cmp	r7, r5
 8021968:	60a4      	str	r4, [r4, #8]
 802196a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 802196e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8021972:	d1f3      	bne.n	802195c <rmw_uxrce_init_subscription_memory+0x20>
 8021974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021978:	4770      	bx	lr
 802197a:	bf00      	nop

0802197c <rmw_uxrce_init_node_memory>:
 802197c:	b1e2      	cbz	r2, 80219b8 <rmw_uxrce_init_node_memory+0x3c>
 802197e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021982:	7b05      	ldrb	r5, [r0, #12]
 8021984:	4606      	mov	r6, r0
 8021986:	b9ad      	cbnz	r5, 80219b4 <rmw_uxrce_init_node_memory+0x38>
 8021988:	23a4      	movs	r3, #164	@ 0xa4
 802198a:	4617      	mov	r7, r2
 802198c:	460c      	mov	r4, r1
 802198e:	46a8      	mov	r8, r5
 8021990:	6083      	str	r3, [r0, #8]
 8021992:	f240 1301 	movw	r3, #257	@ 0x101
 8021996:	e9c0 5500 	strd	r5, r5, [r0]
 802199a:	8183      	strh	r3, [r0, #12]
 802199c:	3501      	adds	r5, #1
 802199e:	4621      	mov	r1, r4
 80219a0:	4630      	mov	r0, r6
 80219a2:	f005 fccb 	bl	802733c <put_memory>
 80219a6:	42af      	cmp	r7, r5
 80219a8:	60a4      	str	r4, [r4, #8]
 80219aa:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 80219ae:	f804 8c98 	strb.w	r8, [r4, #-152]
 80219b2:	d1f3      	bne.n	802199c <rmw_uxrce_init_node_memory+0x20>
 80219b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80219b8:	4770      	bx	lr
 80219ba:	bf00      	nop

080219bc <rmw_uxrce_init_session_memory>:
 80219bc:	b1ea      	cbz	r2, 80219fa <rmw_uxrce_init_session_memory+0x3e>
 80219be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80219c2:	7b05      	ldrb	r5, [r0, #12]
 80219c4:	4606      	mov	r6, r0
 80219c6:	b9b5      	cbnz	r5, 80219f6 <rmw_uxrce_init_session_memory+0x3a>
 80219c8:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 80219cc:	f240 1301 	movw	r3, #257	@ 0x101
 80219d0:	4617      	mov	r7, r2
 80219d2:	460c      	mov	r4, r1
 80219d4:	46a9      	mov	r9, r5
 80219d6:	f8c0 8008 	str.w	r8, [r0, #8]
 80219da:	8183      	strh	r3, [r0, #12]
 80219dc:	e9c0 5500 	strd	r5, r5, [r0]
 80219e0:	3501      	adds	r5, #1
 80219e2:	4621      	mov	r1, r4
 80219e4:	4630      	mov	r0, r6
 80219e6:	f005 fca9 	bl	802733c <put_memory>
 80219ea:	42af      	cmp	r7, r5
 80219ec:	60a4      	str	r4, [r4, #8]
 80219ee:	f884 900c 	strb.w	r9, [r4, #12]
 80219f2:	4444      	add	r4, r8
 80219f4:	d1f4      	bne.n	80219e0 <rmw_uxrce_init_session_memory+0x24>
 80219f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80219fa:	4770      	bx	lr

080219fc <rmw_uxrce_init_topic_memory>:
 80219fc:	b1e2      	cbz	r2, 8021a38 <rmw_uxrce_init_topic_memory+0x3c>
 80219fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a02:	7b05      	ldrb	r5, [r0, #12]
 8021a04:	4606      	mov	r6, r0
 8021a06:	b9ad      	cbnz	r5, 8021a34 <rmw_uxrce_init_topic_memory+0x38>
 8021a08:	231c      	movs	r3, #28
 8021a0a:	4617      	mov	r7, r2
 8021a0c:	460c      	mov	r4, r1
 8021a0e:	46a8      	mov	r8, r5
 8021a10:	6083      	str	r3, [r0, #8]
 8021a12:	f240 1301 	movw	r3, #257	@ 0x101
 8021a16:	e9c0 5500 	strd	r5, r5, [r0]
 8021a1a:	8183      	strh	r3, [r0, #12]
 8021a1c:	3501      	adds	r5, #1
 8021a1e:	4621      	mov	r1, r4
 8021a20:	4630      	mov	r0, r6
 8021a22:	f005 fc8b 	bl	802733c <put_memory>
 8021a26:	42af      	cmp	r7, r5
 8021a28:	60a4      	str	r4, [r4, #8]
 8021a2a:	f104 041c 	add.w	r4, r4, #28
 8021a2e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8021a32:	d1f3      	bne.n	8021a1c <rmw_uxrce_init_topic_memory+0x20>
 8021a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a38:	4770      	bx	lr
 8021a3a:	bf00      	nop

08021a3c <rmw_uxrce_init_static_input_buffer_memory>:
 8021a3c:	b1ea      	cbz	r2, 8021a7a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8021a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a42:	7b05      	ldrb	r5, [r0, #12]
 8021a44:	4606      	mov	r6, r0
 8021a46:	b9b5      	cbnz	r5, 8021a76 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8021a48:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8021a4c:	4617      	mov	r7, r2
 8021a4e:	460c      	mov	r4, r1
 8021a50:	46a8      	mov	r8, r5
 8021a52:	6083      	str	r3, [r0, #8]
 8021a54:	f240 1301 	movw	r3, #257	@ 0x101
 8021a58:	e9c0 5500 	strd	r5, r5, [r0]
 8021a5c:	8183      	strh	r3, [r0, #12]
 8021a5e:	3501      	adds	r5, #1
 8021a60:	4621      	mov	r1, r4
 8021a62:	4630      	mov	r0, r6
 8021a64:	f005 fc6a 	bl	802733c <put_memory>
 8021a68:	42af      	cmp	r7, r5
 8021a6a:	60a4      	str	r4, [r4, #8]
 8021a6c:	f884 800c 	strb.w	r8, [r4, #12]
 8021a70:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8021a74:	d1f3      	bne.n	8021a5e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8021a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a7a:	4770      	bx	lr

08021a7c <rmw_uxrce_init_init_options_impl_memory>:
 8021a7c:	b1e2      	cbz	r2, 8021ab8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8021a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a82:	7b05      	ldrb	r5, [r0, #12]
 8021a84:	4606      	mov	r6, r0
 8021a86:	b9ad      	cbnz	r5, 8021ab4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8021a88:	232c      	movs	r3, #44	@ 0x2c
 8021a8a:	4617      	mov	r7, r2
 8021a8c:	460c      	mov	r4, r1
 8021a8e:	46a8      	mov	r8, r5
 8021a90:	6083      	str	r3, [r0, #8]
 8021a92:	f240 1301 	movw	r3, #257	@ 0x101
 8021a96:	e9c0 5500 	strd	r5, r5, [r0]
 8021a9a:	8183      	strh	r3, [r0, #12]
 8021a9c:	3501      	adds	r5, #1
 8021a9e:	4621      	mov	r1, r4
 8021aa0:	4630      	mov	r0, r6
 8021aa2:	f005 fc4b 	bl	802733c <put_memory>
 8021aa6:	42af      	cmp	r7, r5
 8021aa8:	60a4      	str	r4, [r4, #8]
 8021aaa:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8021aae:	f804 8c20 	strb.w	r8, [r4, #-32]
 8021ab2:	d1f3      	bne.n	8021a9c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8021ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021ab8:	4770      	bx	lr
 8021aba:	bf00      	nop

08021abc <rmw_uxrce_init_wait_set_memory>:
 8021abc:	b1e2      	cbz	r2, 8021af8 <rmw_uxrce_init_wait_set_memory+0x3c>
 8021abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ac2:	7b05      	ldrb	r5, [r0, #12]
 8021ac4:	4606      	mov	r6, r0
 8021ac6:	b9ad      	cbnz	r5, 8021af4 <rmw_uxrce_init_wait_set_memory+0x38>
 8021ac8:	231c      	movs	r3, #28
 8021aca:	4617      	mov	r7, r2
 8021acc:	460c      	mov	r4, r1
 8021ace:	46a8      	mov	r8, r5
 8021ad0:	6083      	str	r3, [r0, #8]
 8021ad2:	f240 1301 	movw	r3, #257	@ 0x101
 8021ad6:	e9c0 5500 	strd	r5, r5, [r0]
 8021ada:	8183      	strh	r3, [r0, #12]
 8021adc:	3501      	adds	r5, #1
 8021ade:	4621      	mov	r1, r4
 8021ae0:	4630      	mov	r0, r6
 8021ae2:	f005 fc2b 	bl	802733c <put_memory>
 8021ae6:	42af      	cmp	r7, r5
 8021ae8:	60a4      	str	r4, [r4, #8]
 8021aea:	f104 041c 	add.w	r4, r4, #28
 8021aee:	f804 8c10 	strb.w	r8, [r4, #-16]
 8021af2:	d1f3      	bne.n	8021adc <rmw_uxrce_init_wait_set_memory+0x20>
 8021af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021af8:	4770      	bx	lr
 8021afa:	bf00      	nop

08021afc <rmw_uxrce_init_guard_condition_memory>:
 8021afc:	b1e2      	cbz	r2, 8021b38 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8021afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b02:	7b05      	ldrb	r5, [r0, #12]
 8021b04:	4606      	mov	r6, r0
 8021b06:	b9ad      	cbnz	r5, 8021b34 <rmw_uxrce_init_guard_condition_memory+0x38>
 8021b08:	2320      	movs	r3, #32
 8021b0a:	4617      	mov	r7, r2
 8021b0c:	460c      	mov	r4, r1
 8021b0e:	46a8      	mov	r8, r5
 8021b10:	6083      	str	r3, [r0, #8]
 8021b12:	f240 1301 	movw	r3, #257	@ 0x101
 8021b16:	e9c0 5500 	strd	r5, r5, [r0]
 8021b1a:	8183      	strh	r3, [r0, #12]
 8021b1c:	3501      	adds	r5, #1
 8021b1e:	4621      	mov	r1, r4
 8021b20:	4630      	mov	r0, r6
 8021b22:	f005 fc0b 	bl	802733c <put_memory>
 8021b26:	42af      	cmp	r7, r5
 8021b28:	60a4      	str	r4, [r4, #8]
 8021b2a:	f104 0420 	add.w	r4, r4, #32
 8021b2e:	f804 8c14 	strb.w	r8, [r4, #-20]
 8021b32:	d1f3      	bne.n	8021b1c <rmw_uxrce_init_guard_condition_memory+0x20>
 8021b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b38:	4770      	bx	lr
 8021b3a:	bf00      	nop

08021b3c <rmw_uxrce_fini_session_memory>:
 8021b3c:	4601      	mov	r1, r0
 8021b3e:	4801      	ldr	r0, [pc, #4]	@ (8021b44 <rmw_uxrce_fini_session_memory+0x8>)
 8021b40:	f005 bbfc 	b.w	802733c <put_memory>
 8021b44:	20047124 	.word	0x20047124

08021b48 <rmw_uxrce_fini_node_memory>:
 8021b48:	b538      	push	{r3, r4, r5, lr}
 8021b4a:	4604      	mov	r4, r0
 8021b4c:	6800      	ldr	r0, [r0, #0]
 8021b4e:	b128      	cbz	r0, 8021b5c <rmw_uxrce_fini_node_memory+0x14>
 8021b50:	4b07      	ldr	r3, [pc, #28]	@ (8021b70 <rmw_uxrce_fini_node_memory+0x28>)
 8021b52:	6819      	ldr	r1, [r3, #0]
 8021b54:	f7de fb5c 	bl	8000210 <strcmp>
 8021b58:	b940      	cbnz	r0, 8021b6c <rmw_uxrce_fini_node_memory+0x24>
 8021b5a:	6020      	str	r0, [r4, #0]
 8021b5c:	6861      	ldr	r1, [r4, #4]
 8021b5e:	b129      	cbz	r1, 8021b6c <rmw_uxrce_fini_node_memory+0x24>
 8021b60:	2500      	movs	r5, #0
 8021b62:	4804      	ldr	r0, [pc, #16]	@ (8021b74 <rmw_uxrce_fini_node_memory+0x2c>)
 8021b64:	610d      	str	r5, [r1, #16]
 8021b66:	f005 fbe9 	bl	802733c <put_memory>
 8021b6a:	6065      	str	r5, [r4, #4]
 8021b6c:	bd38      	pop	{r3, r4, r5, pc}
 8021b6e:	bf00      	nop
 8021b70:	08030020 	.word	0x08030020
 8021b74:	200470f4 	.word	0x200470f4

08021b78 <rmw_uxrce_fini_publisher_memory>:
 8021b78:	b510      	push	{r4, lr}
 8021b7a:	4604      	mov	r4, r0
 8021b7c:	6800      	ldr	r0, [r0, #0]
 8021b7e:	b128      	cbz	r0, 8021b8c <rmw_uxrce_fini_publisher_memory+0x14>
 8021b80:	4b06      	ldr	r3, [pc, #24]	@ (8021b9c <rmw_uxrce_fini_publisher_memory+0x24>)
 8021b82:	6819      	ldr	r1, [r3, #0]
 8021b84:	f7de fb44 	bl	8000210 <strcmp>
 8021b88:	b938      	cbnz	r0, 8021b9a <rmw_uxrce_fini_publisher_memory+0x22>
 8021b8a:	6020      	str	r0, [r4, #0]
 8021b8c:	6861      	ldr	r1, [r4, #4]
 8021b8e:	b121      	cbz	r1, 8021b9a <rmw_uxrce_fini_publisher_memory+0x22>
 8021b90:	4803      	ldr	r0, [pc, #12]	@ (8021ba0 <rmw_uxrce_fini_publisher_memory+0x28>)
 8021b92:	f005 fbd3 	bl	802733c <put_memory>
 8021b96:	2300      	movs	r3, #0
 8021b98:	6063      	str	r3, [r4, #4]
 8021b9a:	bd10      	pop	{r4, pc}
 8021b9c:	08030020 	.word	0x08030020
 8021ba0:	20047104 	.word	0x20047104

08021ba4 <rmw_uxrce_fini_subscription_memory>:
 8021ba4:	b510      	push	{r4, lr}
 8021ba6:	4604      	mov	r4, r0
 8021ba8:	6800      	ldr	r0, [r0, #0]
 8021baa:	b128      	cbz	r0, 8021bb8 <rmw_uxrce_fini_subscription_memory+0x14>
 8021bac:	4b06      	ldr	r3, [pc, #24]	@ (8021bc8 <rmw_uxrce_fini_subscription_memory+0x24>)
 8021bae:	6819      	ldr	r1, [r3, #0]
 8021bb0:	f7de fb2e 	bl	8000210 <strcmp>
 8021bb4:	b938      	cbnz	r0, 8021bc6 <rmw_uxrce_fini_subscription_memory+0x22>
 8021bb6:	6020      	str	r0, [r4, #0]
 8021bb8:	6861      	ldr	r1, [r4, #4]
 8021bba:	b121      	cbz	r1, 8021bc6 <rmw_uxrce_fini_subscription_memory+0x22>
 8021bbc:	4803      	ldr	r0, [pc, #12]	@ (8021bcc <rmw_uxrce_fini_subscription_memory+0x28>)
 8021bbe:	f005 fbbd 	bl	802733c <put_memory>
 8021bc2:	2300      	movs	r3, #0
 8021bc4:	6063      	str	r3, [r4, #4]
 8021bc6:	bd10      	pop	{r4, pc}
 8021bc8:	08030020 	.word	0x08030020
 8021bcc:	20047144 	.word	0x20047144

08021bd0 <rmw_uxrce_fini_service_memory>:
 8021bd0:	b510      	push	{r4, lr}
 8021bd2:	4604      	mov	r4, r0
 8021bd4:	6800      	ldr	r0, [r0, #0]
 8021bd6:	b128      	cbz	r0, 8021be4 <rmw_uxrce_fini_service_memory+0x14>
 8021bd8:	4b06      	ldr	r3, [pc, #24]	@ (8021bf4 <rmw_uxrce_fini_service_memory+0x24>)
 8021bda:	6819      	ldr	r1, [r3, #0]
 8021bdc:	f7de fb18 	bl	8000210 <strcmp>
 8021be0:	b938      	cbnz	r0, 8021bf2 <rmw_uxrce_fini_service_memory+0x22>
 8021be2:	6020      	str	r0, [r4, #0]
 8021be4:	6861      	ldr	r1, [r4, #4]
 8021be6:	b121      	cbz	r1, 8021bf2 <rmw_uxrce_fini_service_memory+0x22>
 8021be8:	4803      	ldr	r0, [pc, #12]	@ (8021bf8 <rmw_uxrce_fini_service_memory+0x28>)
 8021bea:	f005 fba7 	bl	802733c <put_memory>
 8021bee:	2300      	movs	r3, #0
 8021bf0:	6063      	str	r3, [r4, #4]
 8021bf2:	bd10      	pop	{r4, pc}
 8021bf4:	08030020 	.word	0x08030020
 8021bf8:	20047114 	.word	0x20047114

08021bfc <rmw_uxrce_fini_client_memory>:
 8021bfc:	b510      	push	{r4, lr}
 8021bfe:	4604      	mov	r4, r0
 8021c00:	6800      	ldr	r0, [r0, #0]
 8021c02:	b128      	cbz	r0, 8021c10 <rmw_uxrce_fini_client_memory+0x14>
 8021c04:	4b06      	ldr	r3, [pc, #24]	@ (8021c20 <rmw_uxrce_fini_client_memory+0x24>)
 8021c06:	6819      	ldr	r1, [r3, #0]
 8021c08:	f7de fb02 	bl	8000210 <strcmp>
 8021c0c:	b938      	cbnz	r0, 8021c1e <rmw_uxrce_fini_client_memory+0x22>
 8021c0e:	6020      	str	r0, [r4, #0]
 8021c10:	6861      	ldr	r1, [r4, #4]
 8021c12:	b121      	cbz	r1, 8021c1e <rmw_uxrce_fini_client_memory+0x22>
 8021c14:	4803      	ldr	r0, [pc, #12]	@ (8021c24 <rmw_uxrce_fini_client_memory+0x28>)
 8021c16:	f005 fb91 	bl	802733c <put_memory>
 8021c1a:	2300      	movs	r3, #0
 8021c1c:	6063      	str	r3, [r4, #4]
 8021c1e:	bd10      	pop	{r4, pc}
 8021c20:	08030020 	.word	0x08030020
 8021c24:	20042828 	.word	0x20042828

08021c28 <rmw_uxrce_fini_topic_memory>:
 8021c28:	b510      	push	{r4, lr}
 8021c2a:	4604      	mov	r4, r0
 8021c2c:	4803      	ldr	r0, [pc, #12]	@ (8021c3c <rmw_uxrce_fini_topic_memory+0x14>)
 8021c2e:	4621      	mov	r1, r4
 8021c30:	f005 fb84 	bl	802733c <put_memory>
 8021c34:	2300      	movs	r3, #0
 8021c36:	61a3      	str	r3, [r4, #24]
 8021c38:	bd10      	pop	{r4, pc}
 8021c3a:	bf00      	nop
 8021c3c:	20047154 	.word	0x20047154

08021c40 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8021c40:	b082      	sub	sp, #8
 8021c42:	492b      	ldr	r1, [pc, #172]	@ (8021cf0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8021c44:	b530      	push	{r4, r5, lr}
 8021c46:	680d      	ldr	r5, [r1, #0]
 8021c48:	ac03      	add	r4, sp, #12
 8021c4a:	e884 000c 	stmia.w	r4, {r2, r3}
 8021c4e:	461c      	mov	r4, r3
 8021c50:	2d00      	cmp	r5, #0
 8021c52:	d04b      	beq.n	8021cec <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8021c54:	462b      	mov	r3, r5
 8021c56:	2100      	movs	r1, #0
 8021c58:	689a      	ldr	r2, [r3, #8]
 8021c5a:	685b      	ldr	r3, [r3, #4]
 8021c5c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8021c60:	4290      	cmp	r0, r2
 8021c62:	bf08      	it	eq
 8021c64:	3101      	addeq	r1, #1
 8021c66:	2b00      	cmp	r3, #0
 8021c68:	d1f6      	bne.n	8021c58 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8021c6a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8021c6e:	2b02      	cmp	r3, #2
 8021c70:	d029      	beq.n	8021cc6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8021c72:	d820      	bhi.n	8021cb6 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8021c74:	428c      	cmp	r4, r1
 8021c76:	d828      	bhi.n	8021cca <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8021c78:	fab4 f284 	clz	r2, r4
 8021c7c:	0952      	lsrs	r2, r2, #5
 8021c7e:	b324      	cbz	r4, 8021cca <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8021c80:	b1dd      	cbz	r5, 8021cba <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8021c82:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8021c86:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8021c8a:	e001      	b.n	8021c90 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8021c8c:	686d      	ldr	r5, [r5, #4]
 8021c8e:	b1ad      	cbz	r5, 8021cbc <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8021c90:	68ab      	ldr	r3, [r5, #8]
 8021c92:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8021c96:	4288      	cmp	r0, r1
 8021c98:	d1f8      	bne.n	8021c8c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8021c9a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8021c9e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8021ca2:	4561      	cmp	r1, ip
 8021ca4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8021ca8:	eb73 0e04 	sbcs.w	lr, r3, r4
 8021cac:	daee      	bge.n	8021c8c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8021cae:	468c      	mov	ip, r1
 8021cb0:	461c      	mov	r4, r3
 8021cb2:	462a      	mov	r2, r5
 8021cb4:	e7ea      	b.n	8021c8c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8021cb6:	2b03      	cmp	r3, #3
 8021cb8:	d0dc      	beq.n	8021c74 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8021cba:	2200      	movs	r2, #0
 8021cbc:	4610      	mov	r0, r2
 8021cbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021cc2:	b002      	add	sp, #8
 8021cc4:	4770      	bx	lr
 8021cc6:	428c      	cmp	r4, r1
 8021cc8:	d905      	bls.n	8021cd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8021cca:	4809      	ldr	r0, [pc, #36]	@ (8021cf0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8021ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021cd0:	b002      	add	sp, #8
 8021cd2:	f005 bb23 	b.w	802731c <get_memory>
 8021cd6:	fab4 f284 	clz	r2, r4
 8021cda:	0952      	lsrs	r2, r2, #5
 8021cdc:	2c00      	cmp	r4, #0
 8021cde:	d1ed      	bne.n	8021cbc <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8021ce0:	4803      	ldr	r0, [pc, #12]	@ (8021cf0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8021ce2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021ce6:	b002      	add	sp, #8
 8021ce8:	f005 bb18 	b.w	802731c <get_memory>
 8021cec:	4629      	mov	r1, r5
 8021cee:	e7bc      	b.n	8021c6a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8021cf0:	20047134 	.word	0x20047134

08021cf4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8021cf4:	4b12      	ldr	r3, [pc, #72]	@ (8021d40 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8021cf6:	681b      	ldr	r3, [r3, #0]
 8021cf8:	b530      	push	{r4, r5, lr}
 8021cfa:	b1f3      	cbz	r3, 8021d3a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8021cfc:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8021d00:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8021d04:	2400      	movs	r4, #0
 8021d06:	e001      	b.n	8021d0c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8021d08:	685b      	ldr	r3, [r3, #4]
 8021d0a:	b1a3      	cbz	r3, 8021d36 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8021d0c:	689a      	ldr	r2, [r3, #8]
 8021d0e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8021d12:	4288      	cmp	r0, r1
 8021d14:	d1f8      	bne.n	8021d08 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8021d16:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8021d1a:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8021d1e:	4571      	cmp	r1, lr
 8021d20:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8021d24:	eb72 050c 	sbcs.w	r5, r2, ip
 8021d28:	daee      	bge.n	8021d08 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8021d2a:	461c      	mov	r4, r3
 8021d2c:	685b      	ldr	r3, [r3, #4]
 8021d2e:	468e      	mov	lr, r1
 8021d30:	4694      	mov	ip, r2
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	d1ea      	bne.n	8021d0c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8021d36:	4620      	mov	r0, r4
 8021d38:	bd30      	pop	{r4, r5, pc}
 8021d3a:	461c      	mov	r4, r3
 8021d3c:	4620      	mov	r0, r4
 8021d3e:	bd30      	pop	{r4, r5, pc}
 8021d40:	20047134 	.word	0x20047134
 8021d44:	00000000 	.word	0x00000000

08021d48 <rmw_uxrce_clean_expired_static_input_buffer>:
 8021d48:	4b3d      	ldr	r3, [pc, #244]	@ (8021e40 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8021d4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d4e:	681f      	ldr	r7, [r3, #0]
 8021d50:	ed2d 8b06 	vpush	{d8-d10}
 8021d54:	b08d      	sub	sp, #52	@ 0x34
 8021d56:	f005 fba1 	bl	802749c <rmw_uros_epoch_nanos>
 8021d5a:	2f00      	cmp	r7, #0
 8021d5c:	d05d      	beq.n	8021e1a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8021d5e:	46b8      	mov	r8, r7
 8021d60:	4681      	mov	r9, r0
 8021d62:	468a      	mov	sl, r1
 8021d64:	ac04      	add	r4, sp, #16
 8021d66:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8021d6a:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8021d6e:	2b04      	cmp	r3, #4
 8021d70:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8021e28 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8021d74:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8021e30 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8021d78:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8021e38 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8021d7c:	d03f      	beq.n	8021dfe <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8021d7e:	2b05      	cmp	r3, #5
 8021d80:	d044      	beq.n	8021e0c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8021d82:	2b03      	cmp	r3, #3
 8021d84:	d03b      	beq.n	8021dfe <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8021d86:	ed8d 8b04 	vstr	d8, [sp, #16]
 8021d8a:	ed8d ab06 	vstr	d10, [sp, #24]
 8021d8e:	ab08      	add	r3, sp, #32
 8021d90:	ed8d 8b08 	vstr	d8, [sp, #32]
 8021d94:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8021d98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021d9a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8021d9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8021da2:	f005 f94b 	bl	802703c <rmw_time_equal>
 8021da6:	b118      	cbz	r0, 8021db0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8021da8:	ed8d 9b04 	vstr	d9, [sp, #16]
 8021dac:	ed8d 8b06 	vstr	d8, [sp, #24]
 8021db0:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8021db4:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8021db8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8021dbc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8021dc0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8021dc4:	f005 f990 	bl	80270e8 <rmw_time_total_nsec>
 8021dc8:	1830      	adds	r0, r6, r0
 8021dca:	eb47 0101 	adc.w	r1, r7, r1
 8021dce:	4548      	cmp	r0, r9
 8021dd0:	eb71 030a 	sbcs.w	r3, r1, sl
 8021dd4:	db05      	blt.n	8021de2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8021dd6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8021dda:	4591      	cmp	r9, r2
 8021ddc:	eb7a 0303 	sbcs.w	r3, sl, r3
 8021de0:	da03      	bge.n	8021dea <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8021de2:	4641      	mov	r1, r8
 8021de4:	4816      	ldr	r0, [pc, #88]	@ (8021e40 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8021de6:	f005 faa9 	bl	802733c <put_memory>
 8021dea:	f1bb 0f00 	cmp.w	fp, #0
 8021dee:	d014      	beq.n	8021e1a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8021df0:	46d8      	mov	r8, fp
 8021df2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8021df6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8021dfa:	2b04      	cmp	r3, #4
 8021dfc:	d1bf      	bne.n	8021d7e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8021dfe:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8021e02:	3340      	adds	r3, #64	@ 0x40
 8021e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8021e0a:	e7c0      	b.n	8021d8e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8021e0c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8021e10:	3348      	adds	r3, #72	@ 0x48
 8021e12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021e14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8021e18:	e7b9      	b.n	8021d8e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8021e1a:	b00d      	add	sp, #52	@ 0x34
 8021e1c:	ecbd 8b06 	vpop	{d8-d10}
 8021e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e24:	f3af 8000 	nop.w
	...
 8021e30:	00000001 	.word	0x00000001
 8021e34:	00000000 	.word	0x00000000
 8021e38:	0000001e 	.word	0x0000001e
 8021e3c:	00000000 	.word	0x00000000
 8021e40:	20047134 	.word	0x20047134

08021e44 <run_xrce_session>:
 8021e44:	b510      	push	{r4, lr}
 8021e46:	788c      	ldrb	r4, [r1, #2]
 8021e48:	b086      	sub	sp, #24
 8021e4a:	2c01      	cmp	r4, #1
 8021e4c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8021e50:	d00c      	beq.n	8021e6c <run_xrce_session+0x28>
 8021e52:	2401      	movs	r4, #1
 8021e54:	4619      	mov	r1, r3
 8021e56:	f10d 020e 	add.w	r2, sp, #14
 8021e5a:	f10d 0317 	add.w	r3, sp, #23
 8021e5e:	9400      	str	r4, [sp, #0]
 8021e60:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8021e64:	f002 fbd0 	bl	8024608 <uxr_run_session_until_all_status>
 8021e68:	b006      	add	sp, #24
 8021e6a:	bd10      	pop	{r4, pc}
 8021e6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8021e70:	f001 ffec 	bl	8023e4c <uxr_flash_output_streams>
 8021e74:	4620      	mov	r0, r4
 8021e76:	b006      	add	sp, #24
 8021e78:	bd10      	pop	{r4, pc}
 8021e7a:	bf00      	nop

08021e7c <convert_qos_profile>:
 8021e7c:	7a4a      	ldrb	r2, [r1, #9]
 8021e7e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8021e82:	2a02      	cmp	r2, #2
 8021e84:	bf18      	it	ne
 8021e86:	2200      	movne	r2, #0
 8021e88:	7002      	strb	r2, [r0, #0]
 8021e8a:	f1ac 0202 	sub.w	r2, ip, #2
 8021e8e:	fab2 f282 	clz	r2, r2
 8021e92:	0952      	lsrs	r2, r2, #5
 8021e94:	7042      	strb	r2, [r0, #1]
 8021e96:	780a      	ldrb	r2, [r1, #0]
 8021e98:	8889      	ldrh	r1, [r1, #4]
 8021e9a:	f1a2 0202 	sub.w	r2, r2, #2
 8021e9e:	8081      	strh	r1, [r0, #4]
 8021ea0:	fab2 f282 	clz	r2, r2
 8021ea4:	0952      	lsrs	r2, r2, #5
 8021ea6:	7082      	strb	r2, [r0, #2]
 8021ea8:	4770      	bx	lr
 8021eaa:	bf00      	nop

08021eac <generate_type_name>:
 8021eac:	2300      	movs	r3, #0
 8021eae:	b530      	push	{r4, r5, lr}
 8021eb0:	700b      	strb	r3, [r1, #0]
 8021eb2:	b087      	sub	sp, #28
 8021eb4:	6803      	ldr	r3, [r0, #0]
 8021eb6:	4614      	mov	r4, r2
 8021eb8:	b1bb      	cbz	r3, 8021eea <generate_type_name+0x3e>
 8021eba:	4a0e      	ldr	r2, [pc, #56]	@ (8021ef4 <generate_type_name+0x48>)
 8021ebc:	4615      	mov	r5, r2
 8021ebe:	9500      	str	r5, [sp, #0]
 8021ec0:	9203      	str	r2, [sp, #12]
 8021ec2:	4d0d      	ldr	r5, [pc, #52]	@ (8021ef8 <generate_type_name+0x4c>)
 8021ec4:	6842      	ldr	r2, [r0, #4]
 8021ec6:	4608      	mov	r0, r1
 8021ec8:	490c      	ldr	r1, [pc, #48]	@ (8021efc <generate_type_name+0x50>)
 8021eca:	9204      	str	r2, [sp, #16]
 8021ecc:	9105      	str	r1, [sp, #20]
 8021ece:	9102      	str	r1, [sp, #8]
 8021ed0:	4621      	mov	r1, r4
 8021ed2:	4a0b      	ldr	r2, [pc, #44]	@ (8021f00 <generate_type_name+0x54>)
 8021ed4:	9501      	str	r5, [sp, #4]
 8021ed6:	f007 fa37 	bl	8029348 <sniprintf>
 8021eda:	2800      	cmp	r0, #0
 8021edc:	bfa8      	it	ge
 8021ede:	4284      	cmpge	r4, r0
 8021ee0:	bfcc      	ite	gt
 8021ee2:	2001      	movgt	r0, #1
 8021ee4:	2000      	movle	r0, #0
 8021ee6:	b007      	add	sp, #28
 8021ee8:	bd30      	pop	{r4, r5, pc}
 8021eea:	4b06      	ldr	r3, [pc, #24]	@ (8021f04 <generate_type_name+0x58>)
 8021eec:	4a01      	ldr	r2, [pc, #4]	@ (8021ef4 <generate_type_name+0x48>)
 8021eee:	461d      	mov	r5, r3
 8021ef0:	e7e5      	b.n	8021ebe <generate_type_name+0x12>
 8021ef2:	bf00      	nop
 8021ef4:	0802fd54 	.word	0x0802fd54
 8021ef8:	0802fd6c 	.word	0x0802fd6c
 8021efc:	0802fd68 	.word	0x0802fd68
 8021f00:	0802fd58 	.word	0x0802fd58
 8021f04:	080300b8 	.word	0x080300b8

08021f08 <generate_topic_name>:
 8021f08:	b530      	push	{r4, r5, lr}
 8021f0a:	4614      	mov	r4, r2
 8021f0c:	b083      	sub	sp, #12
 8021f0e:	4605      	mov	r5, r0
 8021f10:	4b07      	ldr	r3, [pc, #28]	@ (8021f30 <generate_topic_name+0x28>)
 8021f12:	4a08      	ldr	r2, [pc, #32]	@ (8021f34 <generate_topic_name+0x2c>)
 8021f14:	4608      	mov	r0, r1
 8021f16:	9500      	str	r5, [sp, #0]
 8021f18:	4621      	mov	r1, r4
 8021f1a:	f007 fa15 	bl	8029348 <sniprintf>
 8021f1e:	2800      	cmp	r0, #0
 8021f20:	bfa8      	it	ge
 8021f22:	4284      	cmpge	r4, r0
 8021f24:	bfcc      	ite	gt
 8021f26:	2001      	movgt	r0, #1
 8021f28:	2000      	movle	r0, #0
 8021f2a:	b003      	add	sp, #12
 8021f2c:	bd30      	pop	{r4, r5, pc}
 8021f2e:	bf00      	nop
 8021f30:	0802fd70 	.word	0x0802fd70
 8021f34:	0802f7d0 	.word	0x0802f7d0

08021f38 <is_uxrce_rmw_identifier_valid>:
 8021f38:	b510      	push	{r4, lr}
 8021f3a:	4604      	mov	r4, r0
 8021f3c:	b140      	cbz	r0, 8021f50 <is_uxrce_rmw_identifier_valid+0x18>
 8021f3e:	f7fe fbd9 	bl	80206f4 <rmw_get_implementation_identifier>
 8021f42:	4601      	mov	r1, r0
 8021f44:	4620      	mov	r0, r4
 8021f46:	f7de f963 	bl	8000210 <strcmp>
 8021f4a:	fab0 f080 	clz	r0, r0
 8021f4e:	0940      	lsrs	r0, r0, #5
 8021f50:	bd10      	pop	{r4, pc}
 8021f52:	bf00      	nop

08021f54 <get_message_typesupport_handle>:
 8021f54:	6883      	ldr	r3, [r0, #8]
 8021f56:	4718      	bx	r3

08021f58 <get_message_typesupport_handle_function>:
 8021f58:	b510      	push	{r4, lr}
 8021f5a:	4604      	mov	r4, r0
 8021f5c:	6800      	ldr	r0, [r0, #0]
 8021f5e:	f7de f957 	bl	8000210 <strcmp>
 8021f62:	2800      	cmp	r0, #0
 8021f64:	bf0c      	ite	eq
 8021f66:	4620      	moveq	r0, r4
 8021f68:	2000      	movne	r0, #0
 8021f6a:	bd10      	pop	{r4, pc}

08021f6c <rosidl_runtime_c__uint16__Sequence__init>:
 8021f6c:	b530      	push	{r4, r5, lr}
 8021f6e:	4604      	mov	r4, r0
 8021f70:	b087      	sub	sp, #28
 8021f72:	b130      	cbz	r0, 8021f82 <rosidl_runtime_c__uint16__Sequence__init+0x16>
 8021f74:	460d      	mov	r5, r1
 8021f76:	b931      	cbnz	r1, 8021f86 <rosidl_runtime_c__uint16__Sequence__init+0x1a>
 8021f78:	460b      	mov	r3, r1
 8021f7a:	2001      	movs	r0, #1
 8021f7c:	60a5      	str	r5, [r4, #8]
 8021f7e:	e9c4 3500 	strd	r3, r5, [r4]
 8021f82:	b007      	add	sp, #28
 8021f84:	bd30      	pop	{r4, r5, pc}
 8021f86:	a801      	add	r0, sp, #4
 8021f88:	f7fa fd68 	bl	801ca5c <rcutils_get_default_allocator>
 8021f8c:	9b01      	ldr	r3, [sp, #4]
 8021f8e:	9905      	ldr	r1, [sp, #20]
 8021f90:	0068      	lsls	r0, r5, #1
 8021f92:	4798      	blx	r3
 8021f94:	4603      	mov	r3, r0
 8021f96:	2800      	cmp	r0, #0
 8021f98:	d1ef      	bne.n	8021f7a <rosidl_runtime_c__uint16__Sequence__init+0xe>
 8021f9a:	e7f2      	b.n	8021f82 <rosidl_runtime_c__uint16__Sequence__init+0x16>

08021f9c <rosidl_runtime_c__uint16__Sequence__fini>:
 8021f9c:	b188      	cbz	r0, 8021fc2 <rosidl_runtime_c__uint16__Sequence__fini+0x26>
 8021f9e:	6803      	ldr	r3, [r0, #0]
 8021fa0:	b510      	push	{r4, lr}
 8021fa2:	4604      	mov	r4, r0
 8021fa4:	b086      	sub	sp, #24
 8021fa6:	b153      	cbz	r3, 8021fbe <rosidl_runtime_c__uint16__Sequence__fini+0x22>
 8021fa8:	a801      	add	r0, sp, #4
 8021faa:	f7fa fd57 	bl	801ca5c <rcutils_get_default_allocator>
 8021fae:	9b02      	ldr	r3, [sp, #8]
 8021fb0:	9905      	ldr	r1, [sp, #20]
 8021fb2:	6820      	ldr	r0, [r4, #0]
 8021fb4:	4798      	blx	r3
 8021fb6:	2300      	movs	r3, #0
 8021fb8:	e9c4 3300 	strd	r3, r3, [r4]
 8021fbc:	60a3      	str	r3, [r4, #8]
 8021fbe:	b006      	add	sp, #24
 8021fc0:	bd10      	pop	{r4, pc}
 8021fc2:	4770      	bx	lr

08021fc4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8021fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021fc8:	6805      	ldr	r5, [r0, #0]
 8021fca:	4604      	mov	r4, r0
 8021fcc:	460e      	mov	r6, r1
 8021fce:	4628      	mov	r0, r5
 8021fd0:	f7de f91e 	bl	8000210 <strcmp>
 8021fd4:	b1c8      	cbz	r0, 802200a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8021fd6:	4b11      	ldr	r3, [pc, #68]	@ (802201c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8021fd8:	681b      	ldr	r3, [r3, #0]
 8021fda:	429d      	cmp	r5, r3
 8021fdc:	d112      	bne.n	8022004 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8021fde:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8021fe2:	f8d8 4000 	ldr.w	r4, [r8]
 8021fe6:	b16c      	cbz	r4, 8022004 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8021fe8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8021fec:	2700      	movs	r7, #0
 8021fee:	3d04      	subs	r5, #4
 8021ff0:	4631      	mov	r1, r6
 8021ff2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8021ff6:	f7de f90b 	bl	8000210 <strcmp>
 8021ffa:	00bb      	lsls	r3, r7, #2
 8021ffc:	b140      	cbz	r0, 8022010 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8021ffe:	3701      	adds	r7, #1
 8022000:	42bc      	cmp	r4, r7
 8022002:	d1f5      	bne.n	8021ff0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8022004:	2000      	movs	r0, #0
 8022006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802200a:	4620      	mov	r0, r4
 802200c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022010:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8022014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022018:	58d3      	ldr	r3, [r2, r3]
 802201a:	4718      	bx	r3
 802201c:	2000010c 	.word	0x2000010c

08022020 <std_msgs__msg__MultiArrayLayout__init>:
 8022020:	b538      	push	{r3, r4, r5, lr}
 8022022:	4604      	mov	r4, r0
 8022024:	b130      	cbz	r0, 8022034 <std_msgs__msg__MultiArrayLayout__init+0x14>
 8022026:	2100      	movs	r1, #0
 8022028:	f005 faa2 	bl	8027570 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 802202c:	4605      	mov	r5, r0
 802202e:	b120      	cbz	r0, 802203a <std_msgs__msg__MultiArrayLayout__init+0x1a>
 8022030:	4628      	mov	r0, r5
 8022032:	bd38      	pop	{r3, r4, r5, pc}
 8022034:	4605      	mov	r5, r0
 8022036:	4628      	mov	r0, r5
 8022038:	bd38      	pop	{r3, r4, r5, pc}
 802203a:	4620      	mov	r0, r4
 802203c:	f005 fa9c 	bl	8027578 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8022040:	4628      	mov	r0, r5
 8022042:	bd38      	pop	{r3, r4, r5, pc}

08022044 <std_msgs__msg__MultiArrayLayout__fini>:
 8022044:	b108      	cbz	r0, 802204a <std_msgs__msg__MultiArrayLayout__fini+0x6>
 8022046:	f005 ba97 	b.w	8027578 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 802204a:	4770      	bx	lr

0802204c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 802204c:	6840      	ldr	r0, [r0, #4]
 802204e:	4770      	bx	lr

08022050 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 8022050:	6800      	ldr	r0, [r0, #0]
 8022052:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8022056:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 802205a:	4770      	bx	lr

0802205c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 802205c:	6803      	ldr	r3, [r0, #0]
 802205e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8022062:	4694      	mov	ip, r2
 8022064:	b500      	push	{lr}
 8022066:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 802206a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 802206e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8022072:	f8de 3000 	ldr.w	r3, [lr]
 8022076:	f8cc 3000 	str.w	r3, [ip]
 802207a:	f85d fb04 	ldr.w	pc, [sp], #4
 802207e:	bf00      	nop

08022080 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 8022080:	6803      	ldr	r3, [r0, #0]
 8022082:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8022086:	b500      	push	{lr}
 8022088:	4696      	mov	lr, r2
 802208a:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 802208e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8022092:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8022096:	f8de 3000 	ldr.w	r3, [lr]
 802209a:	f8cc 3000 	str.w	r3, [ip]
 802209e:	f85d fb04 	ldr.w	pc, [sp], #4
 80220a2:	bf00      	nop

080220a4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 80220a4:	f7ff bfbc 	b.w	8022020 <std_msgs__msg__MultiArrayLayout__init>

080220a8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 80220a8:	f7ff bfcc 	b.w	8022044 <std_msgs__msg__MultiArrayLayout__fini>

080220ac <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 80220ac:	b510      	push	{r4, lr}
 80220ae:	4604      	mov	r4, r0
 80220b0:	b082      	sub	sp, #8
 80220b2:	9101      	str	r1, [sp, #4]
 80220b4:	f005 fa60 	bl	8027578 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 80220b8:	9901      	ldr	r1, [sp, #4]
 80220ba:	4620      	mov	r0, r4
 80220bc:	b002      	add	sp, #8
 80220be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80220c2:	f005 ba55 	b.w	8027570 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 80220c6:	bf00      	nop

080220c8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 80220c8:	6800      	ldr	r0, [r0, #0]
 80220ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80220ce:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80220d2:	4770      	bx	lr

080220d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 80220d4:	b508      	push	{r3, lr}
 80220d6:	f005 fa7b 	bl	80275d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 80220da:	4b06      	ldr	r3, [pc, #24]	@ (80220f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80220dc:	4906      	ldr	r1, [pc, #24]	@ (80220f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 80220de:	681a      	ldr	r2, [r3, #0]
 80220e0:	60c8      	str	r0, [r1, #12]
 80220e2:	b10a      	cbz	r2, 80220e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 80220e4:	4803      	ldr	r0, [pc, #12]	@ (80220f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80220e6:	bd08      	pop	{r3, pc}
 80220e8:	4a04      	ldr	r2, [pc, #16]	@ (80220fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 80220ea:	4802      	ldr	r0, [pc, #8]	@ (80220f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80220ec:	6812      	ldr	r2, [r2, #0]
 80220ee:	601a      	str	r2, [r3, #0]
 80220f0:	bd08      	pop	{r3, pc}
 80220f2:	bf00      	nop
 80220f4:	2000018c 	.word	0x2000018c
 80220f8:	20000114 	.word	0x20000114
 80220fc:	20000110 	.word	0x20000110

08022100 <_MultiArrayLayout__max_serialized_size>:
 8022100:	2104      	movs	r1, #4
 8022102:	2000      	movs	r0, #0
 8022104:	b508      	push	{r3, lr}
 8022106:	f7fa fec5 	bl	801ce94 <ucdr_alignment>
 802210a:	3004      	adds	r0, #4
 802210c:	bd08      	pop	{r3, pc}
 802210e:	bf00      	nop

08022110 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 8022110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022114:	4689      	mov	r9, r1
 8022116:	4607      	mov	r7, r0
 8022118:	2104      	movs	r1, #4
 802211a:	4648      	mov	r0, r9
 802211c:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8022120:	f7fa feb8 	bl	801ce94 <ucdr_alignment>
 8022124:	f109 0304 	add.w	r3, r9, #4
 8022128:	18c6      	adds	r6, r0, r3
 802212a:	f1b8 0f00 	cmp.w	r8, #0
 802212e:	d018      	beq.n	8022162 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 8022130:	2500      	movs	r5, #0
 8022132:	f005 faeb 	bl	802770c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8022136:	683a      	ldr	r2, [r7, #0]
 8022138:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 802213c:	6843      	ldr	r3, [r0, #4]
 802213e:	4631      	mov	r1, r6
 8022140:	3501      	adds	r5, #1
 8022142:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 8022146:	695b      	ldr	r3, [r3, #20]
 8022148:	4798      	blx	r3
 802214a:	4604      	mov	r4, r0
 802214c:	4630      	mov	r0, r6
 802214e:	2c04      	cmp	r4, #4
 8022150:	4621      	mov	r1, r4
 8022152:	bf28      	it	cs
 8022154:	2104      	movcs	r1, #4
 8022156:	f7fa fe9d 	bl	801ce94 <ucdr_alignment>
 802215a:	45a8      	cmp	r8, r5
 802215c:	4404      	add	r4, r0
 802215e:	4426      	add	r6, r4
 8022160:	d1e7      	bne.n	8022132 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 8022162:	f1c9 0904 	rsb	r9, r9, #4
 8022166:	4630      	mov	r0, r6
 8022168:	2104      	movs	r1, #4
 802216a:	444e      	add	r6, r9
 802216c:	f7fa fe92 	bl	801ce94 <ucdr_alignment>
 8022170:	4430      	add	r0, r6
 8022172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022176:	bf00      	nop

08022178 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8022178:	b108      	cbz	r0, 802217e <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 802217a:	f7ff bfc9 	b.w	8022110 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 802217e:	4770      	bx	lr

08022180 <_MultiArrayLayout__get_serialized_size>:
 8022180:	b110      	cbz	r0, 8022188 <_MultiArrayLayout__get_serialized_size+0x8>
 8022182:	2100      	movs	r1, #0
 8022184:	f7ff bfc4 	b.w	8022110 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8022188:	4770      	bx	lr
 802218a:	bf00      	nop

0802218c <_MultiArrayLayout__cdr_deserialize>:
 802218c:	b349      	cbz	r1, 80221e2 <_MultiArrayLayout__cdr_deserialize+0x56>
 802218e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022190:	b083      	sub	sp, #12
 8022192:	460e      	mov	r6, r1
 8022194:	4607      	mov	r7, r0
 8022196:	a901      	add	r1, sp, #4
 8022198:	f000 fdaa 	bl	8022cf0 <ucdr_deserialize_uint32_t>
 802219c:	9b01      	ldr	r3, [sp, #4]
 802219e:	68b2      	ldr	r2, [r6, #8]
 80221a0:	429a      	cmp	r2, r3
 80221a2:	d31b      	bcc.n	80221dc <_MultiArrayLayout__cdr_deserialize+0x50>
 80221a4:	6073      	str	r3, [r6, #4]
 80221a6:	b18b      	cbz	r3, 80221cc <_MultiArrayLayout__cdr_deserialize+0x40>
 80221a8:	2400      	movs	r4, #0
 80221aa:	4625      	mov	r5, r4
 80221ac:	e002      	b.n	80221b4 <_MultiArrayLayout__cdr_deserialize+0x28>
 80221ae:	9b01      	ldr	r3, [sp, #4]
 80221b0:	429d      	cmp	r5, r3
 80221b2:	d20b      	bcs.n	80221cc <_MultiArrayLayout__cdr_deserialize+0x40>
 80221b4:	f005 faaa 	bl	802770c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 80221b8:	6831      	ldr	r1, [r6, #0]
 80221ba:	6843      	ldr	r3, [r0, #4]
 80221bc:	4638      	mov	r0, r7
 80221be:	4421      	add	r1, r4
 80221c0:	3501      	adds	r5, #1
 80221c2:	68db      	ldr	r3, [r3, #12]
 80221c4:	3414      	adds	r4, #20
 80221c6:	4798      	blx	r3
 80221c8:	2800      	cmp	r0, #0
 80221ca:	d1f0      	bne.n	80221ae <_MultiArrayLayout__cdr_deserialize+0x22>
 80221cc:	f106 010c 	add.w	r1, r6, #12
 80221d0:	4638      	mov	r0, r7
 80221d2:	b003      	add	sp, #12
 80221d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80221d8:	f000 bd8a 	b.w	8022cf0 <ucdr_deserialize_uint32_t>
 80221dc:	2000      	movs	r0, #0
 80221de:	b003      	add	sp, #12
 80221e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80221e2:	2000      	movs	r0, #0
 80221e4:	4770      	bx	lr
 80221e6:	bf00      	nop

080221e8 <_MultiArrayLayout__cdr_serialize>:
 80221e8:	b308      	cbz	r0, 802222e <_MultiArrayLayout__cdr_serialize+0x46>
 80221ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80221ec:	6847      	ldr	r7, [r0, #4]
 80221ee:	4605      	mov	r5, r0
 80221f0:	460e      	mov	r6, r1
 80221f2:	4608      	mov	r0, r1
 80221f4:	4639      	mov	r1, r7
 80221f6:	f000 fc4b 	bl	8022a90 <ucdr_serialize_uint32_t>
 80221fa:	b190      	cbz	r0, 8022222 <_MultiArrayLayout__cdr_serialize+0x3a>
 80221fc:	b18f      	cbz	r7, 8022222 <_MultiArrayLayout__cdr_serialize+0x3a>
 80221fe:	2400      	movs	r4, #0
 8022200:	e001      	b.n	8022206 <_MultiArrayLayout__cdr_serialize+0x1e>
 8022202:	42a7      	cmp	r7, r4
 8022204:	d00d      	beq.n	8022222 <_MultiArrayLayout__cdr_serialize+0x3a>
 8022206:	f005 fa81 	bl	802770c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 802220a:	682a      	ldr	r2, [r5, #0]
 802220c:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8022210:	6843      	ldr	r3, [r0, #4]
 8022212:	4631      	mov	r1, r6
 8022214:	3401      	adds	r4, #1
 8022216:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 802221a:	689b      	ldr	r3, [r3, #8]
 802221c:	4798      	blx	r3
 802221e:	2800      	cmp	r0, #0
 8022220:	d1ef      	bne.n	8022202 <_MultiArrayLayout__cdr_serialize+0x1a>
 8022222:	68e9      	ldr	r1, [r5, #12]
 8022224:	4630      	mov	r0, r6
 8022226:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802222a:	f000 bc31 	b.w	8022a90 <ucdr_serialize_uint32_t>
 802222e:	4770      	bx	lr

08022230 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8022230:	b508      	push	{r3, lr}
 8022232:	2200      	movs	r2, #0
 8022234:	4603      	mov	r3, r0
 8022236:	4608      	mov	r0, r1
 8022238:	2104      	movs	r1, #4
 802223a:	701a      	strb	r2, [r3, #0]
 802223c:	f7fa fe2a 	bl	801ce94 <ucdr_alignment>
 8022240:	3004      	adds	r0, #4
 8022242:	bd08      	pop	{r3, pc}

08022244 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8022244:	4800      	ldr	r0, [pc, #0]	@ (8022248 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 8022246:	4770      	bx	lr
 8022248:	20000198 	.word	0x20000198

0802224c <ucdr_serialize_endian_array_char>:
 802224c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022250:	4619      	mov	r1, r3
 8022252:	461f      	mov	r7, r3
 8022254:	4605      	mov	r5, r0
 8022256:	4690      	mov	r8, r2
 8022258:	f7fa fdc4 	bl	801cde4 <ucdr_check_buffer_available_for>
 802225c:	b9e0      	cbnz	r0, 8022298 <ucdr_serialize_endian_array_char+0x4c>
 802225e:	463e      	mov	r6, r7
 8022260:	e00b      	b.n	802227a <ucdr_serialize_endian_array_char+0x2e>
 8022262:	4441      	add	r1, r8
 8022264:	68a8      	ldr	r0, [r5, #8]
 8022266:	4622      	mov	r2, r4
 8022268:	1b36      	subs	r6, r6, r4
 802226a:	f007 fafe 	bl	802986a <memcpy>
 802226e:	68ab      	ldr	r3, [r5, #8]
 8022270:	6928      	ldr	r0, [r5, #16]
 8022272:	4423      	add	r3, r4
 8022274:	4420      	add	r0, r4
 8022276:	60ab      	str	r3, [r5, #8]
 8022278:	6128      	str	r0, [r5, #16]
 802227a:	4631      	mov	r1, r6
 802227c:	2201      	movs	r2, #1
 802227e:	4628      	mov	r0, r5
 8022280:	f7fa fe3a 	bl	801cef8 <ucdr_check_final_buffer_behavior_array>
 8022284:	1bb9      	subs	r1, r7, r6
 8022286:	4604      	mov	r4, r0
 8022288:	2800      	cmp	r0, #0
 802228a:	d1ea      	bne.n	8022262 <ucdr_serialize_endian_array_char+0x16>
 802228c:	2301      	movs	r3, #1
 802228e:	7da8      	ldrb	r0, [r5, #22]
 8022290:	756b      	strb	r3, [r5, #21]
 8022292:	4058      	eors	r0, r3
 8022294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022298:	463a      	mov	r2, r7
 802229a:	4641      	mov	r1, r8
 802229c:	68a8      	ldr	r0, [r5, #8]
 802229e:	f007 fae4 	bl	802986a <memcpy>
 80222a2:	68aa      	ldr	r2, [r5, #8]
 80222a4:	692b      	ldr	r3, [r5, #16]
 80222a6:	443a      	add	r2, r7
 80222a8:	443b      	add	r3, r7
 80222aa:	60aa      	str	r2, [r5, #8]
 80222ac:	612b      	str	r3, [r5, #16]
 80222ae:	e7ed      	b.n	802228c <ucdr_serialize_endian_array_char+0x40>

080222b0 <ucdr_deserialize_endian_array_char>:
 80222b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222b4:	4619      	mov	r1, r3
 80222b6:	461f      	mov	r7, r3
 80222b8:	4605      	mov	r5, r0
 80222ba:	4690      	mov	r8, r2
 80222bc:	f7fa fd92 	bl	801cde4 <ucdr_check_buffer_available_for>
 80222c0:	b9e8      	cbnz	r0, 80222fe <ucdr_deserialize_endian_array_char+0x4e>
 80222c2:	463e      	mov	r6, r7
 80222c4:	e00c      	b.n	80222e0 <ucdr_deserialize_endian_array_char+0x30>
 80222c6:	eb08 0003 	add.w	r0, r8, r3
 80222ca:	68a9      	ldr	r1, [r5, #8]
 80222cc:	4622      	mov	r2, r4
 80222ce:	1b36      	subs	r6, r6, r4
 80222d0:	f007 facb 	bl	802986a <memcpy>
 80222d4:	68ab      	ldr	r3, [r5, #8]
 80222d6:	6928      	ldr	r0, [r5, #16]
 80222d8:	4423      	add	r3, r4
 80222da:	4420      	add	r0, r4
 80222dc:	60ab      	str	r3, [r5, #8]
 80222de:	6128      	str	r0, [r5, #16]
 80222e0:	4631      	mov	r1, r6
 80222e2:	2201      	movs	r2, #1
 80222e4:	4628      	mov	r0, r5
 80222e6:	f7fa fe07 	bl	801cef8 <ucdr_check_final_buffer_behavior_array>
 80222ea:	1bbb      	subs	r3, r7, r6
 80222ec:	4604      	mov	r4, r0
 80222ee:	2800      	cmp	r0, #0
 80222f0:	d1e9      	bne.n	80222c6 <ucdr_deserialize_endian_array_char+0x16>
 80222f2:	2301      	movs	r3, #1
 80222f4:	7da8      	ldrb	r0, [r5, #22]
 80222f6:	756b      	strb	r3, [r5, #21]
 80222f8:	4058      	eors	r0, r3
 80222fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80222fe:	463a      	mov	r2, r7
 8022300:	68a9      	ldr	r1, [r5, #8]
 8022302:	4640      	mov	r0, r8
 8022304:	f007 fab1 	bl	802986a <memcpy>
 8022308:	68aa      	ldr	r2, [r5, #8]
 802230a:	692b      	ldr	r3, [r5, #16]
 802230c:	443a      	add	r2, r7
 802230e:	443b      	add	r3, r7
 8022310:	60aa      	str	r2, [r5, #8]
 8022312:	612b      	str	r3, [r5, #16]
 8022314:	e7ed      	b.n	80222f2 <ucdr_deserialize_endian_array_char+0x42>
 8022316:	bf00      	nop

08022318 <ucdr_serialize_array_uint8_t>:
 8022318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802231c:	4688      	mov	r8, r1
 802231e:	4611      	mov	r1, r2
 8022320:	4617      	mov	r7, r2
 8022322:	4605      	mov	r5, r0
 8022324:	f7fa fd5e 	bl	801cde4 <ucdr_check_buffer_available_for>
 8022328:	b9e0      	cbnz	r0, 8022364 <ucdr_serialize_array_uint8_t+0x4c>
 802232a:	463e      	mov	r6, r7
 802232c:	e00b      	b.n	8022346 <ucdr_serialize_array_uint8_t+0x2e>
 802232e:	4441      	add	r1, r8
 8022330:	68a8      	ldr	r0, [r5, #8]
 8022332:	4622      	mov	r2, r4
 8022334:	1b36      	subs	r6, r6, r4
 8022336:	f007 fa98 	bl	802986a <memcpy>
 802233a:	68ab      	ldr	r3, [r5, #8]
 802233c:	6928      	ldr	r0, [r5, #16]
 802233e:	4423      	add	r3, r4
 8022340:	4420      	add	r0, r4
 8022342:	60ab      	str	r3, [r5, #8]
 8022344:	6128      	str	r0, [r5, #16]
 8022346:	4631      	mov	r1, r6
 8022348:	2201      	movs	r2, #1
 802234a:	4628      	mov	r0, r5
 802234c:	f7fa fdd4 	bl	801cef8 <ucdr_check_final_buffer_behavior_array>
 8022350:	1bb9      	subs	r1, r7, r6
 8022352:	4604      	mov	r4, r0
 8022354:	2800      	cmp	r0, #0
 8022356:	d1ea      	bne.n	802232e <ucdr_serialize_array_uint8_t+0x16>
 8022358:	2301      	movs	r3, #1
 802235a:	7da8      	ldrb	r0, [r5, #22]
 802235c:	756b      	strb	r3, [r5, #21]
 802235e:	4058      	eors	r0, r3
 8022360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022364:	463a      	mov	r2, r7
 8022366:	4641      	mov	r1, r8
 8022368:	68a8      	ldr	r0, [r5, #8]
 802236a:	f007 fa7e 	bl	802986a <memcpy>
 802236e:	68aa      	ldr	r2, [r5, #8]
 8022370:	692b      	ldr	r3, [r5, #16]
 8022372:	443a      	add	r2, r7
 8022374:	443b      	add	r3, r7
 8022376:	60aa      	str	r2, [r5, #8]
 8022378:	612b      	str	r3, [r5, #16]
 802237a:	e7ed      	b.n	8022358 <ucdr_serialize_array_uint8_t+0x40>

0802237c <ucdr_serialize_endian_array_uint8_t>:
 802237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022380:	4619      	mov	r1, r3
 8022382:	461f      	mov	r7, r3
 8022384:	4605      	mov	r5, r0
 8022386:	4690      	mov	r8, r2
 8022388:	f7fa fd2c 	bl	801cde4 <ucdr_check_buffer_available_for>
 802238c:	b9e0      	cbnz	r0, 80223c8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 802238e:	463e      	mov	r6, r7
 8022390:	e00b      	b.n	80223aa <ucdr_serialize_endian_array_uint8_t+0x2e>
 8022392:	4441      	add	r1, r8
 8022394:	68a8      	ldr	r0, [r5, #8]
 8022396:	4622      	mov	r2, r4
 8022398:	1b36      	subs	r6, r6, r4
 802239a:	f007 fa66 	bl	802986a <memcpy>
 802239e:	68ab      	ldr	r3, [r5, #8]
 80223a0:	6928      	ldr	r0, [r5, #16]
 80223a2:	4423      	add	r3, r4
 80223a4:	4420      	add	r0, r4
 80223a6:	60ab      	str	r3, [r5, #8]
 80223a8:	6128      	str	r0, [r5, #16]
 80223aa:	4631      	mov	r1, r6
 80223ac:	2201      	movs	r2, #1
 80223ae:	4628      	mov	r0, r5
 80223b0:	f7fa fda2 	bl	801cef8 <ucdr_check_final_buffer_behavior_array>
 80223b4:	1bb9      	subs	r1, r7, r6
 80223b6:	4604      	mov	r4, r0
 80223b8:	2800      	cmp	r0, #0
 80223ba:	d1ea      	bne.n	8022392 <ucdr_serialize_endian_array_uint8_t+0x16>
 80223bc:	2301      	movs	r3, #1
 80223be:	7da8      	ldrb	r0, [r5, #22]
 80223c0:	756b      	strb	r3, [r5, #21]
 80223c2:	4058      	eors	r0, r3
 80223c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80223c8:	463a      	mov	r2, r7
 80223ca:	4641      	mov	r1, r8
 80223cc:	68a8      	ldr	r0, [r5, #8]
 80223ce:	f007 fa4c 	bl	802986a <memcpy>
 80223d2:	68aa      	ldr	r2, [r5, #8]
 80223d4:	692b      	ldr	r3, [r5, #16]
 80223d6:	443a      	add	r2, r7
 80223d8:	443b      	add	r3, r7
 80223da:	60aa      	str	r2, [r5, #8]
 80223dc:	612b      	str	r3, [r5, #16]
 80223de:	e7ed      	b.n	80223bc <ucdr_serialize_endian_array_uint8_t+0x40>

080223e0 <ucdr_deserialize_array_uint8_t>:
 80223e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80223e4:	4688      	mov	r8, r1
 80223e6:	4611      	mov	r1, r2
 80223e8:	4617      	mov	r7, r2
 80223ea:	4605      	mov	r5, r0
 80223ec:	f7fa fcfa 	bl	801cde4 <ucdr_check_buffer_available_for>
 80223f0:	b9e8      	cbnz	r0, 802242e <ucdr_deserialize_array_uint8_t+0x4e>
 80223f2:	463e      	mov	r6, r7
 80223f4:	e00c      	b.n	8022410 <ucdr_deserialize_array_uint8_t+0x30>
 80223f6:	eb08 0003 	add.w	r0, r8, r3
 80223fa:	68a9      	ldr	r1, [r5, #8]
 80223fc:	4622      	mov	r2, r4
 80223fe:	1b36      	subs	r6, r6, r4
 8022400:	f007 fa33 	bl	802986a <memcpy>
 8022404:	68ab      	ldr	r3, [r5, #8]
 8022406:	6928      	ldr	r0, [r5, #16]
 8022408:	4423      	add	r3, r4
 802240a:	4420      	add	r0, r4
 802240c:	60ab      	str	r3, [r5, #8]
 802240e:	6128      	str	r0, [r5, #16]
 8022410:	4631      	mov	r1, r6
 8022412:	2201      	movs	r2, #1
 8022414:	4628      	mov	r0, r5
 8022416:	f7fa fd6f 	bl	801cef8 <ucdr_check_final_buffer_behavior_array>
 802241a:	1bbb      	subs	r3, r7, r6
 802241c:	4604      	mov	r4, r0
 802241e:	2800      	cmp	r0, #0
 8022420:	d1e9      	bne.n	80223f6 <ucdr_deserialize_array_uint8_t+0x16>
 8022422:	2301      	movs	r3, #1
 8022424:	7da8      	ldrb	r0, [r5, #22]
 8022426:	756b      	strb	r3, [r5, #21]
 8022428:	4058      	eors	r0, r3
 802242a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802242e:	463a      	mov	r2, r7
 8022430:	68a9      	ldr	r1, [r5, #8]
 8022432:	4640      	mov	r0, r8
 8022434:	f007 fa19 	bl	802986a <memcpy>
 8022438:	68aa      	ldr	r2, [r5, #8]
 802243a:	692b      	ldr	r3, [r5, #16]
 802243c:	443a      	add	r2, r7
 802243e:	443b      	add	r3, r7
 8022440:	60aa      	str	r2, [r5, #8]
 8022442:	612b      	str	r3, [r5, #16]
 8022444:	e7ed      	b.n	8022422 <ucdr_deserialize_array_uint8_t+0x42>
 8022446:	bf00      	nop

08022448 <ucdr_deserialize_endian_array_uint8_t>:
 8022448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802244c:	4619      	mov	r1, r3
 802244e:	461f      	mov	r7, r3
 8022450:	4605      	mov	r5, r0
 8022452:	4690      	mov	r8, r2
 8022454:	f7fa fcc6 	bl	801cde4 <ucdr_check_buffer_available_for>
 8022458:	b9e8      	cbnz	r0, 8022496 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 802245a:	463e      	mov	r6, r7
 802245c:	e00c      	b.n	8022478 <ucdr_deserialize_endian_array_uint8_t+0x30>
 802245e:	eb08 0003 	add.w	r0, r8, r3
 8022462:	68a9      	ldr	r1, [r5, #8]
 8022464:	4622      	mov	r2, r4
 8022466:	1b36      	subs	r6, r6, r4
 8022468:	f007 f9ff 	bl	802986a <memcpy>
 802246c:	68ab      	ldr	r3, [r5, #8]
 802246e:	6928      	ldr	r0, [r5, #16]
 8022470:	4423      	add	r3, r4
 8022472:	4420      	add	r0, r4
 8022474:	60ab      	str	r3, [r5, #8]
 8022476:	6128      	str	r0, [r5, #16]
 8022478:	4631      	mov	r1, r6
 802247a:	2201      	movs	r2, #1
 802247c:	4628      	mov	r0, r5
 802247e:	f7fa fd3b 	bl	801cef8 <ucdr_check_final_buffer_behavior_array>
 8022482:	1bbb      	subs	r3, r7, r6
 8022484:	4604      	mov	r4, r0
 8022486:	2800      	cmp	r0, #0
 8022488:	d1e9      	bne.n	802245e <ucdr_deserialize_endian_array_uint8_t+0x16>
 802248a:	2301      	movs	r3, #1
 802248c:	7da8      	ldrb	r0, [r5, #22]
 802248e:	756b      	strb	r3, [r5, #21]
 8022490:	4058      	eors	r0, r3
 8022492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022496:	463a      	mov	r2, r7
 8022498:	68a9      	ldr	r1, [r5, #8]
 802249a:	4640      	mov	r0, r8
 802249c:	f007 f9e5 	bl	802986a <memcpy>
 80224a0:	68aa      	ldr	r2, [r5, #8]
 80224a2:	692b      	ldr	r3, [r5, #16]
 80224a4:	443a      	add	r2, r7
 80224a6:	443b      	add	r3, r7
 80224a8:	60aa      	str	r2, [r5, #8]
 80224aa:	612b      	str	r3, [r5, #16]
 80224ac:	e7ed      	b.n	802248a <ucdr_deserialize_endian_array_uint8_t+0x42>
 80224ae:	bf00      	nop

080224b0 <ucdr_serialize_endian_array_uint16_t>:
 80224b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80224b4:	4604      	mov	r4, r0
 80224b6:	4688      	mov	r8, r1
 80224b8:	2102      	movs	r1, #2
 80224ba:	4616      	mov	r6, r2
 80224bc:	461f      	mov	r7, r3
 80224be:	f7fa fcf1 	bl	801cea4 <ucdr_buffer_alignment>
 80224c2:	4601      	mov	r1, r0
 80224c4:	4620      	mov	r0, r4
 80224c6:	7d65      	ldrb	r5, [r4, #21]
 80224c8:	f7fa fd34 	bl	801cf34 <ucdr_advance_buffer>
 80224cc:	f1b8 0f01 	cmp.w	r8, #1
 80224d0:	7565      	strb	r5, [r4, #21]
 80224d2:	d010      	beq.n	80224f6 <ucdr_serialize_endian_array_uint16_t+0x46>
 80224d4:	b157      	cbz	r7, 80224ec <ucdr_serialize_endian_array_uint16_t+0x3c>
 80224d6:	3e02      	subs	r6, #2
 80224d8:	2500      	movs	r5, #0
 80224da:	3501      	adds	r5, #1
 80224dc:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 80224e0:	4641      	mov	r1, r8
 80224e2:	4620      	mov	r0, r4
 80224e4:	f000 f96a 	bl	80227bc <ucdr_serialize_endian_uint16_t>
 80224e8:	42af      	cmp	r7, r5
 80224ea:	d1f6      	bne.n	80224da <ucdr_serialize_endian_array_uint16_t+0x2a>
 80224ec:	7da0      	ldrb	r0, [r4, #22]
 80224ee:	f080 0001 	eor.w	r0, r0, #1
 80224f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224f6:	007f      	lsls	r7, r7, #1
 80224f8:	4620      	mov	r0, r4
 80224fa:	4639      	mov	r1, r7
 80224fc:	f7fa fc72 	bl	801cde4 <ucdr_check_buffer_available_for>
 8022500:	b9f8      	cbnz	r0, 8022542 <ucdr_serialize_endian_array_uint16_t+0x92>
 8022502:	46b8      	mov	r8, r7
 8022504:	e00c      	b.n	8022520 <ucdr_serialize_endian_array_uint16_t+0x70>
 8022506:	462a      	mov	r2, r5
 8022508:	4431      	add	r1, r6
 802250a:	68a0      	ldr	r0, [r4, #8]
 802250c:	eba8 0805 	sub.w	r8, r8, r5
 8022510:	f007 f9ab 	bl	802986a <memcpy>
 8022514:	68a2      	ldr	r2, [r4, #8]
 8022516:	6923      	ldr	r3, [r4, #16]
 8022518:	442a      	add	r2, r5
 802251a:	442b      	add	r3, r5
 802251c:	60a2      	str	r2, [r4, #8]
 802251e:	6123      	str	r3, [r4, #16]
 8022520:	4641      	mov	r1, r8
 8022522:	2202      	movs	r2, #2
 8022524:	4620      	mov	r0, r4
 8022526:	f7fa fce7 	bl	801cef8 <ucdr_check_final_buffer_behavior_array>
 802252a:	eba7 0108 	sub.w	r1, r7, r8
 802252e:	4605      	mov	r5, r0
 8022530:	2800      	cmp	r0, #0
 8022532:	d1e8      	bne.n	8022506 <ucdr_serialize_endian_array_uint16_t+0x56>
 8022534:	2302      	movs	r3, #2
 8022536:	7da0      	ldrb	r0, [r4, #22]
 8022538:	7563      	strb	r3, [r4, #21]
 802253a:	f080 0001 	eor.w	r0, r0, #1
 802253e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022542:	463a      	mov	r2, r7
 8022544:	4631      	mov	r1, r6
 8022546:	68a0      	ldr	r0, [r4, #8]
 8022548:	f007 f98f 	bl	802986a <memcpy>
 802254c:	68a2      	ldr	r2, [r4, #8]
 802254e:	6923      	ldr	r3, [r4, #16]
 8022550:	443a      	add	r2, r7
 8022552:	441f      	add	r7, r3
 8022554:	60a2      	str	r2, [r4, #8]
 8022556:	6127      	str	r7, [r4, #16]
 8022558:	e7ec      	b.n	8022534 <ucdr_serialize_endian_array_uint16_t+0x84>
 802255a:	bf00      	nop

0802255c <ucdr_deserialize_endian_array_uint16_t>:
 802255c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022560:	4605      	mov	r5, r0
 8022562:	4688      	mov	r8, r1
 8022564:	2102      	movs	r1, #2
 8022566:	4614      	mov	r4, r2
 8022568:	461f      	mov	r7, r3
 802256a:	f7fa fc9b 	bl	801cea4 <ucdr_buffer_alignment>
 802256e:	4601      	mov	r1, r0
 8022570:	4628      	mov	r0, r5
 8022572:	7d6e      	ldrb	r6, [r5, #21]
 8022574:	f7fa fcde 	bl	801cf34 <ucdr_advance_buffer>
 8022578:	f1b8 0f01 	cmp.w	r8, #1
 802257c:	756e      	strb	r6, [r5, #21]
 802257e:	d010      	beq.n	80225a2 <ucdr_deserialize_endian_array_uint16_t+0x46>
 8022580:	b157      	cbz	r7, 8022598 <ucdr_deserialize_endian_array_uint16_t+0x3c>
 8022582:	2600      	movs	r6, #0
 8022584:	3601      	adds	r6, #1
 8022586:	4622      	mov	r2, r4
 8022588:	4641      	mov	r1, r8
 802258a:	4628      	mov	r0, r5
 802258c:	f000 fa0a 	bl	80229a4 <ucdr_deserialize_endian_uint16_t>
 8022590:	42b7      	cmp	r7, r6
 8022592:	f104 0402 	add.w	r4, r4, #2
 8022596:	d1f5      	bne.n	8022584 <ucdr_deserialize_endian_array_uint16_t+0x28>
 8022598:	7da8      	ldrb	r0, [r5, #22]
 802259a:	f080 0001 	eor.w	r0, r0, #1
 802259e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80225a2:	007f      	lsls	r7, r7, #1
 80225a4:	4628      	mov	r0, r5
 80225a6:	4639      	mov	r1, r7
 80225a8:	f7fa fc1c 	bl	801cde4 <ucdr_check_buffer_available_for>
 80225ac:	b9f8      	cbnz	r0, 80225ee <ucdr_deserialize_endian_array_uint16_t+0x92>
 80225ae:	46b8      	mov	r8, r7
 80225b0:	e00c      	b.n	80225cc <ucdr_deserialize_endian_array_uint16_t+0x70>
 80225b2:	18e0      	adds	r0, r4, r3
 80225b4:	4632      	mov	r2, r6
 80225b6:	68a9      	ldr	r1, [r5, #8]
 80225b8:	eba8 0806 	sub.w	r8, r8, r6
 80225bc:	f007 f955 	bl	802986a <memcpy>
 80225c0:	68aa      	ldr	r2, [r5, #8]
 80225c2:	692b      	ldr	r3, [r5, #16]
 80225c4:	4432      	add	r2, r6
 80225c6:	4433      	add	r3, r6
 80225c8:	60aa      	str	r2, [r5, #8]
 80225ca:	612b      	str	r3, [r5, #16]
 80225cc:	4641      	mov	r1, r8
 80225ce:	2202      	movs	r2, #2
 80225d0:	4628      	mov	r0, r5
 80225d2:	f7fa fc91 	bl	801cef8 <ucdr_check_final_buffer_behavior_array>
 80225d6:	eba7 0308 	sub.w	r3, r7, r8
 80225da:	4606      	mov	r6, r0
 80225dc:	2800      	cmp	r0, #0
 80225de:	d1e8      	bne.n	80225b2 <ucdr_deserialize_endian_array_uint16_t+0x56>
 80225e0:	2302      	movs	r3, #2
 80225e2:	7da8      	ldrb	r0, [r5, #22]
 80225e4:	756b      	strb	r3, [r5, #21]
 80225e6:	f080 0001 	eor.w	r0, r0, #1
 80225ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80225ee:	463a      	mov	r2, r7
 80225f0:	68a9      	ldr	r1, [r5, #8]
 80225f2:	4620      	mov	r0, r4
 80225f4:	f007 f939 	bl	802986a <memcpy>
 80225f8:	68aa      	ldr	r2, [r5, #8]
 80225fa:	692b      	ldr	r3, [r5, #16]
 80225fc:	443a      	add	r2, r7
 80225fe:	441f      	add	r7, r3
 8022600:	60aa      	str	r2, [r5, #8]
 8022602:	612f      	str	r7, [r5, #16]
 8022604:	e7ec      	b.n	80225e0 <ucdr_deserialize_endian_array_uint16_t+0x84>
 8022606:	bf00      	nop

08022608 <ucdr_serialize_bool>:
 8022608:	b538      	push	{r3, r4, r5, lr}
 802260a:	460d      	mov	r5, r1
 802260c:	2101      	movs	r1, #1
 802260e:	4604      	mov	r4, r0
 8022610:	f7fa fbf4 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022614:	b148      	cbz	r0, 802262a <ucdr_serialize_bool+0x22>
 8022616:	68a3      	ldr	r3, [r4, #8]
 8022618:	2101      	movs	r1, #1
 802261a:	701d      	strb	r5, [r3, #0]
 802261c:	68a2      	ldr	r2, [r4, #8]
 802261e:	6923      	ldr	r3, [r4, #16]
 8022620:	440a      	add	r2, r1
 8022622:	7561      	strb	r1, [r4, #21]
 8022624:	440b      	add	r3, r1
 8022626:	60a2      	str	r2, [r4, #8]
 8022628:	6123      	str	r3, [r4, #16]
 802262a:	7da0      	ldrb	r0, [r4, #22]
 802262c:	f080 0001 	eor.w	r0, r0, #1
 8022630:	bd38      	pop	{r3, r4, r5, pc}
 8022632:	bf00      	nop

08022634 <ucdr_deserialize_bool>:
 8022634:	b538      	push	{r3, r4, r5, lr}
 8022636:	460d      	mov	r5, r1
 8022638:	2101      	movs	r1, #1
 802263a:	4604      	mov	r4, r0
 802263c:	f7fa fbde 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022640:	b160      	cbz	r0, 802265c <ucdr_deserialize_bool+0x28>
 8022642:	68a2      	ldr	r2, [r4, #8]
 8022644:	2101      	movs	r1, #1
 8022646:	6923      	ldr	r3, [r4, #16]
 8022648:	f812 0b01 	ldrb.w	r0, [r2], #1
 802264c:	440b      	add	r3, r1
 802264e:	3800      	subs	r0, #0
 8022650:	bf18      	it	ne
 8022652:	2001      	movne	r0, #1
 8022654:	7028      	strb	r0, [r5, #0]
 8022656:	60a2      	str	r2, [r4, #8]
 8022658:	6123      	str	r3, [r4, #16]
 802265a:	7561      	strb	r1, [r4, #21]
 802265c:	7da0      	ldrb	r0, [r4, #22]
 802265e:	f080 0001 	eor.w	r0, r0, #1
 8022662:	bd38      	pop	{r3, r4, r5, pc}

08022664 <ucdr_serialize_uint8_t>:
 8022664:	b538      	push	{r3, r4, r5, lr}
 8022666:	460d      	mov	r5, r1
 8022668:	2101      	movs	r1, #1
 802266a:	4604      	mov	r4, r0
 802266c:	f7fa fbc6 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022670:	b148      	cbz	r0, 8022686 <ucdr_serialize_uint8_t+0x22>
 8022672:	68a3      	ldr	r3, [r4, #8]
 8022674:	2101      	movs	r1, #1
 8022676:	701d      	strb	r5, [r3, #0]
 8022678:	68a2      	ldr	r2, [r4, #8]
 802267a:	6923      	ldr	r3, [r4, #16]
 802267c:	440a      	add	r2, r1
 802267e:	7561      	strb	r1, [r4, #21]
 8022680:	440b      	add	r3, r1
 8022682:	60a2      	str	r2, [r4, #8]
 8022684:	6123      	str	r3, [r4, #16]
 8022686:	7da0      	ldrb	r0, [r4, #22]
 8022688:	f080 0001 	eor.w	r0, r0, #1
 802268c:	bd38      	pop	{r3, r4, r5, pc}
 802268e:	bf00      	nop

08022690 <ucdr_deserialize_uint8_t>:
 8022690:	b538      	push	{r3, r4, r5, lr}
 8022692:	460d      	mov	r5, r1
 8022694:	2101      	movs	r1, #1
 8022696:	4604      	mov	r4, r0
 8022698:	f7fa fbb0 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 802269c:	b150      	cbz	r0, 80226b4 <ucdr_deserialize_uint8_t+0x24>
 802269e:	68a3      	ldr	r3, [r4, #8]
 80226a0:	2101      	movs	r1, #1
 80226a2:	781b      	ldrb	r3, [r3, #0]
 80226a4:	702b      	strb	r3, [r5, #0]
 80226a6:	68a2      	ldr	r2, [r4, #8]
 80226a8:	6923      	ldr	r3, [r4, #16]
 80226aa:	440a      	add	r2, r1
 80226ac:	7561      	strb	r1, [r4, #21]
 80226ae:	440b      	add	r3, r1
 80226b0:	60a2      	str	r2, [r4, #8]
 80226b2:	6123      	str	r3, [r4, #16]
 80226b4:	7da0      	ldrb	r0, [r4, #22]
 80226b6:	f080 0001 	eor.w	r0, r0, #1
 80226ba:	bd38      	pop	{r3, r4, r5, pc}

080226bc <ucdr_serialize_uint16_t>:
 80226bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80226c0:	460b      	mov	r3, r1
 80226c2:	b082      	sub	sp, #8
 80226c4:	4604      	mov	r4, r0
 80226c6:	2102      	movs	r1, #2
 80226c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80226cc:	f7fa fbea 	bl	801cea4 <ucdr_buffer_alignment>
 80226d0:	4601      	mov	r1, r0
 80226d2:	4620      	mov	r0, r4
 80226d4:	7d67      	ldrb	r7, [r4, #21]
 80226d6:	f7fa fc2d 	bl	801cf34 <ucdr_advance_buffer>
 80226da:	2102      	movs	r1, #2
 80226dc:	4620      	mov	r0, r4
 80226de:	f7fa fb81 	bl	801cde4 <ucdr_check_buffer_available_for>
 80226e2:	bb78      	cbnz	r0, 8022744 <ucdr_serialize_uint16_t+0x88>
 80226e4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80226e8:	42ab      	cmp	r3, r5
 80226ea:	d926      	bls.n	802273a <ucdr_serialize_uint16_t+0x7e>
 80226ec:	1b5e      	subs	r6, r3, r5
 80226ee:	60a3      	str	r3, [r4, #8]
 80226f0:	6923      	ldr	r3, [r4, #16]
 80226f2:	4620      	mov	r0, r4
 80226f4:	f1c6 0802 	rsb	r8, r6, #2
 80226f8:	4433      	add	r3, r6
 80226fa:	4641      	mov	r1, r8
 80226fc:	6123      	str	r3, [r4, #16]
 80226fe:	f7fa fb7d 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022702:	2800      	cmp	r0, #0
 8022704:	d03b      	beq.n	802277e <ucdr_serialize_uint16_t+0xc2>
 8022706:	7d23      	ldrb	r3, [r4, #20]
 8022708:	2b01      	cmp	r3, #1
 802270a:	d04a      	beq.n	80227a2 <ucdr_serialize_uint16_t+0xe6>
 802270c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8022710:	702b      	strb	r3, [r5, #0]
 8022712:	2e00      	cmp	r6, #0
 8022714:	d040      	beq.n	8022798 <ucdr_serialize_uint16_t+0xdc>
 8022716:	f89d 3006 	ldrb.w	r3, [sp, #6]
 802271a:	706b      	strb	r3, [r5, #1]
 802271c:	6923      	ldr	r3, [r4, #16]
 802271e:	2102      	movs	r1, #2
 8022720:	68a2      	ldr	r2, [r4, #8]
 8022722:	3302      	adds	r3, #2
 8022724:	7da0      	ldrb	r0, [r4, #22]
 8022726:	4442      	add	r2, r8
 8022728:	7561      	strb	r1, [r4, #21]
 802272a:	1b9e      	subs	r6, r3, r6
 802272c:	f080 0001 	eor.w	r0, r0, #1
 8022730:	60a2      	str	r2, [r4, #8]
 8022732:	6126      	str	r6, [r4, #16]
 8022734:	b002      	add	sp, #8
 8022736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802273a:	2102      	movs	r1, #2
 802273c:	4620      	mov	r0, r4
 802273e:	f7fa fb5d 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022742:	b190      	cbz	r0, 802276a <ucdr_serialize_uint16_t+0xae>
 8022744:	7d23      	ldrb	r3, [r4, #20]
 8022746:	2b01      	cmp	r3, #1
 8022748:	68a3      	ldr	r3, [r4, #8]
 802274a:	d014      	beq.n	8022776 <ucdr_serialize_uint16_t+0xba>
 802274c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8022750:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8022754:	7019      	strb	r1, [r3, #0]
 8022756:	68a3      	ldr	r3, [r4, #8]
 8022758:	705a      	strb	r2, [r3, #1]
 802275a:	2102      	movs	r1, #2
 802275c:	68a2      	ldr	r2, [r4, #8]
 802275e:	6923      	ldr	r3, [r4, #16]
 8022760:	440a      	add	r2, r1
 8022762:	7561      	strb	r1, [r4, #21]
 8022764:	440b      	add	r3, r1
 8022766:	60a2      	str	r2, [r4, #8]
 8022768:	6123      	str	r3, [r4, #16]
 802276a:	7da0      	ldrb	r0, [r4, #22]
 802276c:	f080 0001 	eor.w	r0, r0, #1
 8022770:	b002      	add	sp, #8
 8022772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022776:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 802277a:	801a      	strh	r2, [r3, #0]
 802277c:	e7ed      	b.n	802275a <ucdr_serialize_uint16_t+0x9e>
 802277e:	68a2      	ldr	r2, [r4, #8]
 8022780:	6923      	ldr	r3, [r4, #16]
 8022782:	7da0      	ldrb	r0, [r4, #22]
 8022784:	1b92      	subs	r2, r2, r6
 8022786:	1b9b      	subs	r3, r3, r6
 8022788:	7567      	strb	r7, [r4, #21]
 802278a:	f080 0001 	eor.w	r0, r0, #1
 802278e:	60a2      	str	r2, [r4, #8]
 8022790:	6123      	str	r3, [r4, #16]
 8022792:	b002      	add	sp, #8
 8022794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022798:	68a3      	ldr	r3, [r4, #8]
 802279a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 802279e:	701a      	strb	r2, [r3, #0]
 80227a0:	e7bc      	b.n	802271c <ucdr_serialize_uint16_t+0x60>
 80227a2:	4628      	mov	r0, r5
 80227a4:	f10d 0506 	add.w	r5, sp, #6
 80227a8:	4632      	mov	r2, r6
 80227aa:	4629      	mov	r1, r5
 80227ac:	f007 f85d 	bl	802986a <memcpy>
 80227b0:	4642      	mov	r2, r8
 80227b2:	19a9      	adds	r1, r5, r6
 80227b4:	68a0      	ldr	r0, [r4, #8]
 80227b6:	f007 f858 	bl	802986a <memcpy>
 80227ba:	e7af      	b.n	802271c <ucdr_serialize_uint16_t+0x60>

080227bc <ucdr_serialize_endian_uint16_t>:
 80227bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80227c0:	4604      	mov	r4, r0
 80227c2:	b083      	sub	sp, #12
 80227c4:	460d      	mov	r5, r1
 80227c6:	2102      	movs	r1, #2
 80227c8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80227cc:	f7fa fb6a 	bl	801cea4 <ucdr_buffer_alignment>
 80227d0:	4601      	mov	r1, r0
 80227d2:	4620      	mov	r0, r4
 80227d4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80227d8:	f7fa fbac 	bl	801cf34 <ucdr_advance_buffer>
 80227dc:	2102      	movs	r1, #2
 80227de:	4620      	mov	r0, r4
 80227e0:	f7fa fb00 	bl	801cde4 <ucdr_check_buffer_available_for>
 80227e4:	bb70      	cbnz	r0, 8022844 <ucdr_serialize_endian_uint16_t+0x88>
 80227e6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80227ea:	42be      	cmp	r6, r7
 80227ec:	d925      	bls.n	802283a <ucdr_serialize_endian_uint16_t+0x7e>
 80227ee:	6923      	ldr	r3, [r4, #16]
 80227f0:	4620      	mov	r0, r4
 80227f2:	60a6      	str	r6, [r4, #8]
 80227f4:	1bf6      	subs	r6, r6, r7
 80227f6:	4433      	add	r3, r6
 80227f8:	f1c6 0902 	rsb	r9, r6, #2
 80227fc:	6123      	str	r3, [r4, #16]
 80227fe:	4649      	mov	r1, r9
 8022800:	f7fa fafc 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022804:	2800      	cmp	r0, #0
 8022806:	d039      	beq.n	802287c <ucdr_serialize_endian_uint16_t+0xc0>
 8022808:	2d01      	cmp	r5, #1
 802280a:	d04a      	beq.n	80228a2 <ucdr_serialize_endian_uint16_t+0xe6>
 802280c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8022810:	703b      	strb	r3, [r7, #0]
 8022812:	2e00      	cmp	r6, #0
 8022814:	d040      	beq.n	8022898 <ucdr_serialize_endian_uint16_t+0xdc>
 8022816:	f89d 3006 	ldrb.w	r3, [sp, #6]
 802281a:	707b      	strb	r3, [r7, #1]
 802281c:	6923      	ldr	r3, [r4, #16]
 802281e:	2102      	movs	r1, #2
 8022820:	68a2      	ldr	r2, [r4, #8]
 8022822:	7da0      	ldrb	r0, [r4, #22]
 8022824:	3302      	adds	r3, #2
 8022826:	444a      	add	r2, r9
 8022828:	7561      	strb	r1, [r4, #21]
 802282a:	1b9b      	subs	r3, r3, r6
 802282c:	f080 0001 	eor.w	r0, r0, #1
 8022830:	60a2      	str	r2, [r4, #8]
 8022832:	6123      	str	r3, [r4, #16]
 8022834:	b003      	add	sp, #12
 8022836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802283a:	2102      	movs	r1, #2
 802283c:	4620      	mov	r0, r4
 802283e:	f7fa fadd 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022842:	b188      	cbz	r0, 8022868 <ucdr_serialize_endian_uint16_t+0xac>
 8022844:	2d01      	cmp	r5, #1
 8022846:	68a3      	ldr	r3, [r4, #8]
 8022848:	d014      	beq.n	8022874 <ucdr_serialize_endian_uint16_t+0xb8>
 802284a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 802284e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8022852:	7019      	strb	r1, [r3, #0]
 8022854:	68a3      	ldr	r3, [r4, #8]
 8022856:	705a      	strb	r2, [r3, #1]
 8022858:	2102      	movs	r1, #2
 802285a:	68a2      	ldr	r2, [r4, #8]
 802285c:	6923      	ldr	r3, [r4, #16]
 802285e:	440a      	add	r2, r1
 8022860:	7561      	strb	r1, [r4, #21]
 8022862:	440b      	add	r3, r1
 8022864:	60a2      	str	r2, [r4, #8]
 8022866:	6123      	str	r3, [r4, #16]
 8022868:	7da0      	ldrb	r0, [r4, #22]
 802286a:	f080 0001 	eor.w	r0, r0, #1
 802286e:	b003      	add	sp, #12
 8022870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022874:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8022878:	801a      	strh	r2, [r3, #0]
 802287a:	e7ed      	b.n	8022858 <ucdr_serialize_endian_uint16_t+0x9c>
 802287c:	68a2      	ldr	r2, [r4, #8]
 802287e:	6923      	ldr	r3, [r4, #16]
 8022880:	7da0      	ldrb	r0, [r4, #22]
 8022882:	1b92      	subs	r2, r2, r6
 8022884:	1b9b      	subs	r3, r3, r6
 8022886:	f884 8015 	strb.w	r8, [r4, #21]
 802288a:	f080 0001 	eor.w	r0, r0, #1
 802288e:	60a2      	str	r2, [r4, #8]
 8022890:	6123      	str	r3, [r4, #16]
 8022892:	b003      	add	sp, #12
 8022894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022898:	68a3      	ldr	r3, [r4, #8]
 802289a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 802289e:	701a      	strb	r2, [r3, #0]
 80228a0:	e7bc      	b.n	802281c <ucdr_serialize_endian_uint16_t+0x60>
 80228a2:	f10d 0506 	add.w	r5, sp, #6
 80228a6:	4632      	mov	r2, r6
 80228a8:	4638      	mov	r0, r7
 80228aa:	4629      	mov	r1, r5
 80228ac:	f006 ffdd 	bl	802986a <memcpy>
 80228b0:	464a      	mov	r2, r9
 80228b2:	19a9      	adds	r1, r5, r6
 80228b4:	68a0      	ldr	r0, [r4, #8]
 80228b6:	f006 ffd8 	bl	802986a <memcpy>
 80228ba:	e7af      	b.n	802281c <ucdr_serialize_endian_uint16_t+0x60>

080228bc <ucdr_deserialize_uint16_t>:
 80228bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80228c0:	4604      	mov	r4, r0
 80228c2:	460d      	mov	r5, r1
 80228c4:	2102      	movs	r1, #2
 80228c6:	f7fa faed 	bl	801cea4 <ucdr_buffer_alignment>
 80228ca:	4601      	mov	r1, r0
 80228cc:	4620      	mov	r0, r4
 80228ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 80228d2:	f7fa fb2f 	bl	801cf34 <ucdr_advance_buffer>
 80228d6:	2102      	movs	r1, #2
 80228d8:	4620      	mov	r0, r4
 80228da:	f7fa fa83 	bl	801cde4 <ucdr_check_buffer_available_for>
 80228de:	bb60      	cbnz	r0, 802293a <ucdr_deserialize_uint16_t+0x7e>
 80228e0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80228e4:	42be      	cmp	r6, r7
 80228e6:	d923      	bls.n	8022930 <ucdr_deserialize_uint16_t+0x74>
 80228e8:	6923      	ldr	r3, [r4, #16]
 80228ea:	4620      	mov	r0, r4
 80228ec:	60a6      	str	r6, [r4, #8]
 80228ee:	1bf6      	subs	r6, r6, r7
 80228f0:	4433      	add	r3, r6
 80228f2:	f1c6 0902 	rsb	r9, r6, #2
 80228f6:	6123      	str	r3, [r4, #16]
 80228f8:	4649      	mov	r1, r9
 80228fa:	f7fa fa7f 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 80228fe:	2800      	cmp	r0, #0
 8022900:	d034      	beq.n	802296c <ucdr_deserialize_uint16_t+0xb0>
 8022902:	7d23      	ldrb	r3, [r4, #20]
 8022904:	2b01      	cmp	r3, #1
 8022906:	d042      	beq.n	802298e <ucdr_deserialize_uint16_t+0xd2>
 8022908:	787b      	ldrb	r3, [r7, #1]
 802290a:	702b      	strb	r3, [r5, #0]
 802290c:	2e00      	cmp	r6, #0
 802290e:	d03a      	beq.n	8022986 <ucdr_deserialize_uint16_t+0xca>
 8022910:	783b      	ldrb	r3, [r7, #0]
 8022912:	706b      	strb	r3, [r5, #1]
 8022914:	6923      	ldr	r3, [r4, #16]
 8022916:	2102      	movs	r1, #2
 8022918:	68a2      	ldr	r2, [r4, #8]
 802291a:	3302      	adds	r3, #2
 802291c:	7da0      	ldrb	r0, [r4, #22]
 802291e:	444a      	add	r2, r9
 8022920:	7561      	strb	r1, [r4, #21]
 8022922:	1b9b      	subs	r3, r3, r6
 8022924:	f080 0001 	eor.w	r0, r0, #1
 8022928:	60a2      	str	r2, [r4, #8]
 802292a:	6123      	str	r3, [r4, #16]
 802292c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022930:	2102      	movs	r1, #2
 8022932:	4620      	mov	r0, r4
 8022934:	f7fa fa62 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022938:	b180      	cbz	r0, 802295c <ucdr_deserialize_uint16_t+0xa0>
 802293a:	7d23      	ldrb	r3, [r4, #20]
 802293c:	2b01      	cmp	r3, #1
 802293e:	68a3      	ldr	r3, [r4, #8]
 8022940:	d011      	beq.n	8022966 <ucdr_deserialize_uint16_t+0xaa>
 8022942:	785b      	ldrb	r3, [r3, #1]
 8022944:	702b      	strb	r3, [r5, #0]
 8022946:	68a3      	ldr	r3, [r4, #8]
 8022948:	781b      	ldrb	r3, [r3, #0]
 802294a:	706b      	strb	r3, [r5, #1]
 802294c:	2102      	movs	r1, #2
 802294e:	68a2      	ldr	r2, [r4, #8]
 8022950:	6923      	ldr	r3, [r4, #16]
 8022952:	440a      	add	r2, r1
 8022954:	7561      	strb	r1, [r4, #21]
 8022956:	440b      	add	r3, r1
 8022958:	60a2      	str	r2, [r4, #8]
 802295a:	6123      	str	r3, [r4, #16]
 802295c:	7da0      	ldrb	r0, [r4, #22]
 802295e:	f080 0001 	eor.w	r0, r0, #1
 8022962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022966:	881b      	ldrh	r3, [r3, #0]
 8022968:	802b      	strh	r3, [r5, #0]
 802296a:	e7ef      	b.n	802294c <ucdr_deserialize_uint16_t+0x90>
 802296c:	68a2      	ldr	r2, [r4, #8]
 802296e:	6923      	ldr	r3, [r4, #16]
 8022970:	1b92      	subs	r2, r2, r6
 8022972:	7da0      	ldrb	r0, [r4, #22]
 8022974:	1b9b      	subs	r3, r3, r6
 8022976:	f884 8015 	strb.w	r8, [r4, #21]
 802297a:	f080 0001 	eor.w	r0, r0, #1
 802297e:	60a2      	str	r2, [r4, #8]
 8022980:	6123      	str	r3, [r4, #16]
 8022982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022986:	68a3      	ldr	r3, [r4, #8]
 8022988:	781b      	ldrb	r3, [r3, #0]
 802298a:	706b      	strb	r3, [r5, #1]
 802298c:	e7c2      	b.n	8022914 <ucdr_deserialize_uint16_t+0x58>
 802298e:	4639      	mov	r1, r7
 8022990:	4632      	mov	r2, r6
 8022992:	4628      	mov	r0, r5
 8022994:	f006 ff69 	bl	802986a <memcpy>
 8022998:	464a      	mov	r2, r9
 802299a:	19a8      	adds	r0, r5, r6
 802299c:	68a1      	ldr	r1, [r4, #8]
 802299e:	f006 ff64 	bl	802986a <memcpy>
 80229a2:	e7b7      	b.n	8022914 <ucdr_deserialize_uint16_t+0x58>

080229a4 <ucdr_deserialize_endian_uint16_t>:
 80229a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80229a8:	4604      	mov	r4, r0
 80229aa:	460e      	mov	r6, r1
 80229ac:	2102      	movs	r1, #2
 80229ae:	4615      	mov	r5, r2
 80229b0:	f7fa fa78 	bl	801cea4 <ucdr_buffer_alignment>
 80229b4:	4601      	mov	r1, r0
 80229b6:	4620      	mov	r0, r4
 80229b8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80229bc:	f7fa faba 	bl	801cf34 <ucdr_advance_buffer>
 80229c0:	2102      	movs	r1, #2
 80229c2:	4620      	mov	r0, r4
 80229c4:	f7fa fa0e 	bl	801cde4 <ucdr_check_buffer_available_for>
 80229c8:	bb70      	cbnz	r0, 8022a28 <ucdr_deserialize_endian_uint16_t+0x84>
 80229ca:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 80229ce:	454f      	cmp	r7, r9
 80229d0:	d925      	bls.n	8022a1e <ucdr_deserialize_endian_uint16_t+0x7a>
 80229d2:	6923      	ldr	r3, [r4, #16]
 80229d4:	4620      	mov	r0, r4
 80229d6:	60a7      	str	r7, [r4, #8]
 80229d8:	eba7 0709 	sub.w	r7, r7, r9
 80229dc:	443b      	add	r3, r7
 80229de:	f1c7 0a02 	rsb	sl, r7, #2
 80229e2:	6123      	str	r3, [r4, #16]
 80229e4:	4651      	mov	r1, sl
 80229e6:	f7fa fa09 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 80229ea:	2800      	cmp	r0, #0
 80229ec:	d034      	beq.n	8022a58 <ucdr_deserialize_endian_uint16_t+0xb4>
 80229ee:	2e01      	cmp	r6, #1
 80229f0:	d043      	beq.n	8022a7a <ucdr_deserialize_endian_uint16_t+0xd6>
 80229f2:	f899 3001 	ldrb.w	r3, [r9, #1]
 80229f6:	702b      	strb	r3, [r5, #0]
 80229f8:	2f00      	cmp	r7, #0
 80229fa:	d03a      	beq.n	8022a72 <ucdr_deserialize_endian_uint16_t+0xce>
 80229fc:	f899 3000 	ldrb.w	r3, [r9]
 8022a00:	706b      	strb	r3, [r5, #1]
 8022a02:	6923      	ldr	r3, [r4, #16]
 8022a04:	2102      	movs	r1, #2
 8022a06:	68a2      	ldr	r2, [r4, #8]
 8022a08:	3302      	adds	r3, #2
 8022a0a:	7da0      	ldrb	r0, [r4, #22]
 8022a0c:	4452      	add	r2, sl
 8022a0e:	7561      	strb	r1, [r4, #21]
 8022a10:	1bdb      	subs	r3, r3, r7
 8022a12:	f080 0001 	eor.w	r0, r0, #1
 8022a16:	60a2      	str	r2, [r4, #8]
 8022a18:	6123      	str	r3, [r4, #16]
 8022a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022a1e:	2102      	movs	r1, #2
 8022a20:	4620      	mov	r0, r4
 8022a22:	f7fa f9eb 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022a26:	b178      	cbz	r0, 8022a48 <ucdr_deserialize_endian_uint16_t+0xa4>
 8022a28:	2e01      	cmp	r6, #1
 8022a2a:	68a3      	ldr	r3, [r4, #8]
 8022a2c:	d011      	beq.n	8022a52 <ucdr_deserialize_endian_uint16_t+0xae>
 8022a2e:	785b      	ldrb	r3, [r3, #1]
 8022a30:	702b      	strb	r3, [r5, #0]
 8022a32:	68a3      	ldr	r3, [r4, #8]
 8022a34:	781b      	ldrb	r3, [r3, #0]
 8022a36:	706b      	strb	r3, [r5, #1]
 8022a38:	2102      	movs	r1, #2
 8022a3a:	68a2      	ldr	r2, [r4, #8]
 8022a3c:	6923      	ldr	r3, [r4, #16]
 8022a3e:	440a      	add	r2, r1
 8022a40:	7561      	strb	r1, [r4, #21]
 8022a42:	440b      	add	r3, r1
 8022a44:	60a2      	str	r2, [r4, #8]
 8022a46:	6123      	str	r3, [r4, #16]
 8022a48:	7da0      	ldrb	r0, [r4, #22]
 8022a4a:	f080 0001 	eor.w	r0, r0, #1
 8022a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022a52:	881b      	ldrh	r3, [r3, #0]
 8022a54:	802b      	strh	r3, [r5, #0]
 8022a56:	e7ef      	b.n	8022a38 <ucdr_deserialize_endian_uint16_t+0x94>
 8022a58:	68a2      	ldr	r2, [r4, #8]
 8022a5a:	6923      	ldr	r3, [r4, #16]
 8022a5c:	1bd2      	subs	r2, r2, r7
 8022a5e:	7da0      	ldrb	r0, [r4, #22]
 8022a60:	1bdb      	subs	r3, r3, r7
 8022a62:	f884 8015 	strb.w	r8, [r4, #21]
 8022a66:	f080 0001 	eor.w	r0, r0, #1
 8022a6a:	60a2      	str	r2, [r4, #8]
 8022a6c:	6123      	str	r3, [r4, #16]
 8022a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022a72:	68a3      	ldr	r3, [r4, #8]
 8022a74:	781b      	ldrb	r3, [r3, #0]
 8022a76:	706b      	strb	r3, [r5, #1]
 8022a78:	e7c3      	b.n	8022a02 <ucdr_deserialize_endian_uint16_t+0x5e>
 8022a7a:	4649      	mov	r1, r9
 8022a7c:	463a      	mov	r2, r7
 8022a7e:	4628      	mov	r0, r5
 8022a80:	f006 fef3 	bl	802986a <memcpy>
 8022a84:	4652      	mov	r2, sl
 8022a86:	19e8      	adds	r0, r5, r7
 8022a88:	68a1      	ldr	r1, [r4, #8]
 8022a8a:	f006 feee 	bl	802986a <memcpy>
 8022a8e:	e7b8      	b.n	8022a02 <ucdr_deserialize_endian_uint16_t+0x5e>

08022a90 <ucdr_serialize_uint32_t>:
 8022a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a94:	b082      	sub	sp, #8
 8022a96:	4604      	mov	r4, r0
 8022a98:	9101      	str	r1, [sp, #4]
 8022a9a:	2104      	movs	r1, #4
 8022a9c:	f7fa fa02 	bl	801cea4 <ucdr_buffer_alignment>
 8022aa0:	4601      	mov	r1, r0
 8022aa2:	4620      	mov	r0, r4
 8022aa4:	7d67      	ldrb	r7, [r4, #21]
 8022aa6:	f7fa fa45 	bl	801cf34 <ucdr_advance_buffer>
 8022aaa:	2104      	movs	r1, #4
 8022aac:	4620      	mov	r0, r4
 8022aae:	f7fa f999 	bl	801cde4 <ucdr_check_buffer_available_for>
 8022ab2:	2800      	cmp	r0, #0
 8022ab4:	d139      	bne.n	8022b2a <ucdr_serialize_uint32_t+0x9a>
 8022ab6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8022aba:	42ab      	cmp	r3, r5
 8022abc:	d930      	bls.n	8022b20 <ucdr_serialize_uint32_t+0x90>
 8022abe:	1b5e      	subs	r6, r3, r5
 8022ac0:	60a3      	str	r3, [r4, #8]
 8022ac2:	6923      	ldr	r3, [r4, #16]
 8022ac4:	4620      	mov	r0, r4
 8022ac6:	f1c6 0804 	rsb	r8, r6, #4
 8022aca:	4433      	add	r3, r6
 8022acc:	4641      	mov	r1, r8
 8022ace:	6123      	str	r3, [r4, #16]
 8022ad0:	f7fa f994 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022ad4:	2800      	cmp	r0, #0
 8022ad6:	d04c      	beq.n	8022b72 <ucdr_serialize_uint32_t+0xe2>
 8022ad8:	7d23      	ldrb	r3, [r4, #20]
 8022ada:	2b01      	cmp	r3, #1
 8022adc:	d063      	beq.n	8022ba6 <ucdr_serialize_uint32_t+0x116>
 8022ade:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8022ae2:	702b      	strb	r3, [r5, #0]
 8022ae4:	2e00      	cmp	r6, #0
 8022ae6:	d051      	beq.n	8022b8c <ucdr_serialize_uint32_t+0xfc>
 8022ae8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8022aec:	2e01      	cmp	r6, #1
 8022aee:	706b      	strb	r3, [r5, #1]
 8022af0:	d050      	beq.n	8022b94 <ucdr_serialize_uint32_t+0x104>
 8022af2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8022af6:	2e02      	cmp	r6, #2
 8022af8:	70ab      	strb	r3, [r5, #2]
 8022afa:	d04f      	beq.n	8022b9c <ucdr_serialize_uint32_t+0x10c>
 8022afc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8022b00:	70eb      	strb	r3, [r5, #3]
 8022b02:	6923      	ldr	r3, [r4, #16]
 8022b04:	2104      	movs	r1, #4
 8022b06:	68a2      	ldr	r2, [r4, #8]
 8022b08:	3304      	adds	r3, #4
 8022b0a:	7da0      	ldrb	r0, [r4, #22]
 8022b0c:	4442      	add	r2, r8
 8022b0e:	7561      	strb	r1, [r4, #21]
 8022b10:	1b9e      	subs	r6, r3, r6
 8022b12:	f080 0001 	eor.w	r0, r0, #1
 8022b16:	60a2      	str	r2, [r4, #8]
 8022b18:	6126      	str	r6, [r4, #16]
 8022b1a:	b002      	add	sp, #8
 8022b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b20:	2104      	movs	r1, #4
 8022b22:	4620      	mov	r0, r4
 8022b24:	f7fa f96a 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022b28:	b1d0      	cbz	r0, 8022b60 <ucdr_serialize_uint32_t+0xd0>
 8022b2a:	7d23      	ldrb	r3, [r4, #20]
 8022b2c:	2b01      	cmp	r3, #1
 8022b2e:	68a3      	ldr	r3, [r4, #8]
 8022b30:	d01c      	beq.n	8022b6c <ucdr_serialize_uint32_t+0xdc>
 8022b32:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8022b36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8022b3a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8022b3e:	7018      	strb	r0, [r3, #0]
 8022b40:	68a3      	ldr	r3, [r4, #8]
 8022b42:	705a      	strb	r2, [r3, #1]
 8022b44:	68a3      	ldr	r3, [r4, #8]
 8022b46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8022b4a:	7099      	strb	r1, [r3, #2]
 8022b4c:	68a3      	ldr	r3, [r4, #8]
 8022b4e:	70da      	strb	r2, [r3, #3]
 8022b50:	2104      	movs	r1, #4
 8022b52:	68a2      	ldr	r2, [r4, #8]
 8022b54:	6923      	ldr	r3, [r4, #16]
 8022b56:	440a      	add	r2, r1
 8022b58:	7561      	strb	r1, [r4, #21]
 8022b5a:	440b      	add	r3, r1
 8022b5c:	60a2      	str	r2, [r4, #8]
 8022b5e:	6123      	str	r3, [r4, #16]
 8022b60:	7da0      	ldrb	r0, [r4, #22]
 8022b62:	f080 0001 	eor.w	r0, r0, #1
 8022b66:	b002      	add	sp, #8
 8022b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b6c:	9a01      	ldr	r2, [sp, #4]
 8022b6e:	601a      	str	r2, [r3, #0]
 8022b70:	e7ee      	b.n	8022b50 <ucdr_serialize_uint32_t+0xc0>
 8022b72:	68a2      	ldr	r2, [r4, #8]
 8022b74:	6923      	ldr	r3, [r4, #16]
 8022b76:	7da0      	ldrb	r0, [r4, #22]
 8022b78:	1b92      	subs	r2, r2, r6
 8022b7a:	1b9b      	subs	r3, r3, r6
 8022b7c:	7567      	strb	r7, [r4, #21]
 8022b7e:	f080 0001 	eor.w	r0, r0, #1
 8022b82:	60a2      	str	r2, [r4, #8]
 8022b84:	6123      	str	r3, [r4, #16]
 8022b86:	b002      	add	sp, #8
 8022b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b8c:	68a3      	ldr	r3, [r4, #8]
 8022b8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8022b92:	701a      	strb	r2, [r3, #0]
 8022b94:	68a3      	ldr	r3, [r4, #8]
 8022b96:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8022b9a:	701a      	strb	r2, [r3, #0]
 8022b9c:	68a3      	ldr	r3, [r4, #8]
 8022b9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8022ba2:	701a      	strb	r2, [r3, #0]
 8022ba4:	e7ad      	b.n	8022b02 <ucdr_serialize_uint32_t+0x72>
 8022ba6:	4628      	mov	r0, r5
 8022ba8:	ad01      	add	r5, sp, #4
 8022baa:	4632      	mov	r2, r6
 8022bac:	4629      	mov	r1, r5
 8022bae:	f006 fe5c 	bl	802986a <memcpy>
 8022bb2:	4642      	mov	r2, r8
 8022bb4:	19a9      	adds	r1, r5, r6
 8022bb6:	68a0      	ldr	r0, [r4, #8]
 8022bb8:	f006 fe57 	bl	802986a <memcpy>
 8022bbc:	e7a1      	b.n	8022b02 <ucdr_serialize_uint32_t+0x72>
 8022bbe:	bf00      	nop

08022bc0 <ucdr_serialize_endian_uint32_t>:
 8022bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022bc4:	4604      	mov	r4, r0
 8022bc6:	b083      	sub	sp, #12
 8022bc8:	460d      	mov	r5, r1
 8022bca:	2104      	movs	r1, #4
 8022bcc:	9201      	str	r2, [sp, #4]
 8022bce:	f7fa f969 	bl	801cea4 <ucdr_buffer_alignment>
 8022bd2:	4601      	mov	r1, r0
 8022bd4:	4620      	mov	r0, r4
 8022bd6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8022bda:	f7fa f9ab 	bl	801cf34 <ucdr_advance_buffer>
 8022bde:	2104      	movs	r1, #4
 8022be0:	4620      	mov	r0, r4
 8022be2:	f7fa f8ff 	bl	801cde4 <ucdr_check_buffer_available_for>
 8022be6:	2800      	cmp	r0, #0
 8022be8:	d138      	bne.n	8022c5c <ucdr_serialize_endian_uint32_t+0x9c>
 8022bea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8022bee:	42b7      	cmp	r7, r6
 8022bf0:	d92f      	bls.n	8022c52 <ucdr_serialize_endian_uint32_t+0x92>
 8022bf2:	6923      	ldr	r3, [r4, #16]
 8022bf4:	4620      	mov	r0, r4
 8022bf6:	60a7      	str	r7, [r4, #8]
 8022bf8:	1bbf      	subs	r7, r7, r6
 8022bfa:	443b      	add	r3, r7
 8022bfc:	f1c7 0904 	rsb	r9, r7, #4
 8022c00:	6123      	str	r3, [r4, #16]
 8022c02:	4649      	mov	r1, r9
 8022c04:	f7fa f8fa 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022c08:	2800      	cmp	r0, #0
 8022c0a:	d04a      	beq.n	8022ca2 <ucdr_serialize_endian_uint32_t+0xe2>
 8022c0c:	2d01      	cmp	r5, #1
 8022c0e:	d063      	beq.n	8022cd8 <ucdr_serialize_endian_uint32_t+0x118>
 8022c10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8022c14:	7033      	strb	r3, [r6, #0]
 8022c16:	2f00      	cmp	r7, #0
 8022c18:	d051      	beq.n	8022cbe <ucdr_serialize_endian_uint32_t+0xfe>
 8022c1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8022c1e:	2f01      	cmp	r7, #1
 8022c20:	7073      	strb	r3, [r6, #1]
 8022c22:	d050      	beq.n	8022cc6 <ucdr_serialize_endian_uint32_t+0x106>
 8022c24:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8022c28:	2f02      	cmp	r7, #2
 8022c2a:	70b3      	strb	r3, [r6, #2]
 8022c2c:	d04f      	beq.n	8022cce <ucdr_serialize_endian_uint32_t+0x10e>
 8022c2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8022c32:	70f3      	strb	r3, [r6, #3]
 8022c34:	6923      	ldr	r3, [r4, #16]
 8022c36:	2104      	movs	r1, #4
 8022c38:	68a2      	ldr	r2, [r4, #8]
 8022c3a:	7da0      	ldrb	r0, [r4, #22]
 8022c3c:	3304      	adds	r3, #4
 8022c3e:	444a      	add	r2, r9
 8022c40:	7561      	strb	r1, [r4, #21]
 8022c42:	1bdb      	subs	r3, r3, r7
 8022c44:	f080 0001 	eor.w	r0, r0, #1
 8022c48:	60a2      	str	r2, [r4, #8]
 8022c4a:	6123      	str	r3, [r4, #16]
 8022c4c:	b003      	add	sp, #12
 8022c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022c52:	2104      	movs	r1, #4
 8022c54:	4620      	mov	r0, r4
 8022c56:	f7fa f8d1 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022c5a:	b1c8      	cbz	r0, 8022c90 <ucdr_serialize_endian_uint32_t+0xd0>
 8022c5c:	2d01      	cmp	r5, #1
 8022c5e:	68a3      	ldr	r3, [r4, #8]
 8022c60:	d01c      	beq.n	8022c9c <ucdr_serialize_endian_uint32_t+0xdc>
 8022c62:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8022c66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8022c6a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8022c6e:	7018      	strb	r0, [r3, #0]
 8022c70:	68a3      	ldr	r3, [r4, #8]
 8022c72:	705a      	strb	r2, [r3, #1]
 8022c74:	68a3      	ldr	r3, [r4, #8]
 8022c76:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8022c7a:	7099      	strb	r1, [r3, #2]
 8022c7c:	68a3      	ldr	r3, [r4, #8]
 8022c7e:	70da      	strb	r2, [r3, #3]
 8022c80:	2104      	movs	r1, #4
 8022c82:	68a2      	ldr	r2, [r4, #8]
 8022c84:	6923      	ldr	r3, [r4, #16]
 8022c86:	440a      	add	r2, r1
 8022c88:	7561      	strb	r1, [r4, #21]
 8022c8a:	440b      	add	r3, r1
 8022c8c:	60a2      	str	r2, [r4, #8]
 8022c8e:	6123      	str	r3, [r4, #16]
 8022c90:	7da0      	ldrb	r0, [r4, #22]
 8022c92:	f080 0001 	eor.w	r0, r0, #1
 8022c96:	b003      	add	sp, #12
 8022c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022c9c:	9a01      	ldr	r2, [sp, #4]
 8022c9e:	601a      	str	r2, [r3, #0]
 8022ca0:	e7ee      	b.n	8022c80 <ucdr_serialize_endian_uint32_t+0xc0>
 8022ca2:	68a2      	ldr	r2, [r4, #8]
 8022ca4:	6923      	ldr	r3, [r4, #16]
 8022ca6:	7da0      	ldrb	r0, [r4, #22]
 8022ca8:	1bd2      	subs	r2, r2, r7
 8022caa:	1bdb      	subs	r3, r3, r7
 8022cac:	f884 8015 	strb.w	r8, [r4, #21]
 8022cb0:	f080 0001 	eor.w	r0, r0, #1
 8022cb4:	60a2      	str	r2, [r4, #8]
 8022cb6:	6123      	str	r3, [r4, #16]
 8022cb8:	b003      	add	sp, #12
 8022cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022cbe:	68a3      	ldr	r3, [r4, #8]
 8022cc0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8022cc4:	701a      	strb	r2, [r3, #0]
 8022cc6:	68a3      	ldr	r3, [r4, #8]
 8022cc8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8022ccc:	701a      	strb	r2, [r3, #0]
 8022cce:	68a3      	ldr	r3, [r4, #8]
 8022cd0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8022cd4:	701a      	strb	r2, [r3, #0]
 8022cd6:	e7ad      	b.n	8022c34 <ucdr_serialize_endian_uint32_t+0x74>
 8022cd8:	ad01      	add	r5, sp, #4
 8022cda:	463a      	mov	r2, r7
 8022cdc:	4630      	mov	r0, r6
 8022cde:	4629      	mov	r1, r5
 8022ce0:	f006 fdc3 	bl	802986a <memcpy>
 8022ce4:	464a      	mov	r2, r9
 8022ce6:	19e9      	adds	r1, r5, r7
 8022ce8:	68a0      	ldr	r0, [r4, #8]
 8022cea:	f006 fdbe 	bl	802986a <memcpy>
 8022cee:	e7a1      	b.n	8022c34 <ucdr_serialize_endian_uint32_t+0x74>

08022cf0 <ucdr_deserialize_uint32_t>:
 8022cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022cf4:	4604      	mov	r4, r0
 8022cf6:	460d      	mov	r5, r1
 8022cf8:	2104      	movs	r1, #4
 8022cfa:	f7fa f8d3 	bl	801cea4 <ucdr_buffer_alignment>
 8022cfe:	4601      	mov	r1, r0
 8022d00:	4620      	mov	r0, r4
 8022d02:	f894 8015 	ldrb.w	r8, [r4, #21]
 8022d06:	f7fa f915 	bl	801cf34 <ucdr_advance_buffer>
 8022d0a:	2104      	movs	r1, #4
 8022d0c:	4620      	mov	r0, r4
 8022d0e:	f7fa f869 	bl	801cde4 <ucdr_check_buffer_available_for>
 8022d12:	2800      	cmp	r0, #0
 8022d14:	d138      	bne.n	8022d88 <ucdr_deserialize_uint32_t+0x98>
 8022d16:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8022d1a:	42b7      	cmp	r7, r6
 8022d1c:	d92f      	bls.n	8022d7e <ucdr_deserialize_uint32_t+0x8e>
 8022d1e:	6923      	ldr	r3, [r4, #16]
 8022d20:	4620      	mov	r0, r4
 8022d22:	60a7      	str	r7, [r4, #8]
 8022d24:	1bbf      	subs	r7, r7, r6
 8022d26:	443b      	add	r3, r7
 8022d28:	f1c7 0904 	rsb	r9, r7, #4
 8022d2c:	6123      	str	r3, [r4, #16]
 8022d2e:	4649      	mov	r1, r9
 8022d30:	f7fa f864 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022d34:	2800      	cmp	r0, #0
 8022d36:	d046      	beq.n	8022dc6 <ucdr_deserialize_uint32_t+0xd6>
 8022d38:	7d23      	ldrb	r3, [r4, #20]
 8022d3a:	2b01      	cmp	r3, #1
 8022d3c:	d05c      	beq.n	8022df8 <ucdr_deserialize_uint32_t+0x108>
 8022d3e:	78f3      	ldrb	r3, [r6, #3]
 8022d40:	702b      	strb	r3, [r5, #0]
 8022d42:	2f00      	cmp	r7, #0
 8022d44:	d04c      	beq.n	8022de0 <ucdr_deserialize_uint32_t+0xf0>
 8022d46:	78b3      	ldrb	r3, [r6, #2]
 8022d48:	2f01      	cmp	r7, #1
 8022d4a:	706b      	strb	r3, [r5, #1]
 8022d4c:	f105 0302 	add.w	r3, r5, #2
 8022d50:	d04a      	beq.n	8022de8 <ucdr_deserialize_uint32_t+0xf8>
 8022d52:	7873      	ldrb	r3, [r6, #1]
 8022d54:	2f02      	cmp	r7, #2
 8022d56:	70ab      	strb	r3, [r5, #2]
 8022d58:	f105 0303 	add.w	r3, r5, #3
 8022d5c:	d048      	beq.n	8022df0 <ucdr_deserialize_uint32_t+0x100>
 8022d5e:	7833      	ldrb	r3, [r6, #0]
 8022d60:	70eb      	strb	r3, [r5, #3]
 8022d62:	6923      	ldr	r3, [r4, #16]
 8022d64:	2104      	movs	r1, #4
 8022d66:	68a2      	ldr	r2, [r4, #8]
 8022d68:	3304      	adds	r3, #4
 8022d6a:	7da0      	ldrb	r0, [r4, #22]
 8022d6c:	444a      	add	r2, r9
 8022d6e:	7561      	strb	r1, [r4, #21]
 8022d70:	1bdb      	subs	r3, r3, r7
 8022d72:	f080 0001 	eor.w	r0, r0, #1
 8022d76:	60a2      	str	r2, [r4, #8]
 8022d78:	6123      	str	r3, [r4, #16]
 8022d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022d7e:	2104      	movs	r1, #4
 8022d80:	4620      	mov	r0, r4
 8022d82:	f7fa f83b 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022d86:	b1b0      	cbz	r0, 8022db6 <ucdr_deserialize_uint32_t+0xc6>
 8022d88:	7d23      	ldrb	r3, [r4, #20]
 8022d8a:	2b01      	cmp	r3, #1
 8022d8c:	68a3      	ldr	r3, [r4, #8]
 8022d8e:	d017      	beq.n	8022dc0 <ucdr_deserialize_uint32_t+0xd0>
 8022d90:	78db      	ldrb	r3, [r3, #3]
 8022d92:	702b      	strb	r3, [r5, #0]
 8022d94:	68a3      	ldr	r3, [r4, #8]
 8022d96:	789b      	ldrb	r3, [r3, #2]
 8022d98:	706b      	strb	r3, [r5, #1]
 8022d9a:	68a3      	ldr	r3, [r4, #8]
 8022d9c:	785b      	ldrb	r3, [r3, #1]
 8022d9e:	70ab      	strb	r3, [r5, #2]
 8022da0:	68a3      	ldr	r3, [r4, #8]
 8022da2:	781b      	ldrb	r3, [r3, #0]
 8022da4:	70eb      	strb	r3, [r5, #3]
 8022da6:	2104      	movs	r1, #4
 8022da8:	68a2      	ldr	r2, [r4, #8]
 8022daa:	6923      	ldr	r3, [r4, #16]
 8022dac:	440a      	add	r2, r1
 8022dae:	7561      	strb	r1, [r4, #21]
 8022db0:	440b      	add	r3, r1
 8022db2:	60a2      	str	r2, [r4, #8]
 8022db4:	6123      	str	r3, [r4, #16]
 8022db6:	7da0      	ldrb	r0, [r4, #22]
 8022db8:	f080 0001 	eor.w	r0, r0, #1
 8022dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022dc0:	681b      	ldr	r3, [r3, #0]
 8022dc2:	602b      	str	r3, [r5, #0]
 8022dc4:	e7ef      	b.n	8022da6 <ucdr_deserialize_uint32_t+0xb6>
 8022dc6:	68a2      	ldr	r2, [r4, #8]
 8022dc8:	6923      	ldr	r3, [r4, #16]
 8022dca:	1bd2      	subs	r2, r2, r7
 8022dcc:	7da0      	ldrb	r0, [r4, #22]
 8022dce:	1bdb      	subs	r3, r3, r7
 8022dd0:	f884 8015 	strb.w	r8, [r4, #21]
 8022dd4:	f080 0001 	eor.w	r0, r0, #1
 8022dd8:	60a2      	str	r2, [r4, #8]
 8022dda:	6123      	str	r3, [r4, #16]
 8022ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022de0:	68a3      	ldr	r3, [r4, #8]
 8022de2:	789b      	ldrb	r3, [r3, #2]
 8022de4:	706b      	strb	r3, [r5, #1]
 8022de6:	1cab      	adds	r3, r5, #2
 8022de8:	68a2      	ldr	r2, [r4, #8]
 8022dea:	7852      	ldrb	r2, [r2, #1]
 8022dec:	f803 2b01 	strb.w	r2, [r3], #1
 8022df0:	68a2      	ldr	r2, [r4, #8]
 8022df2:	7812      	ldrb	r2, [r2, #0]
 8022df4:	701a      	strb	r2, [r3, #0]
 8022df6:	e7b4      	b.n	8022d62 <ucdr_deserialize_uint32_t+0x72>
 8022df8:	4631      	mov	r1, r6
 8022dfa:	463a      	mov	r2, r7
 8022dfc:	4628      	mov	r0, r5
 8022dfe:	f006 fd34 	bl	802986a <memcpy>
 8022e02:	464a      	mov	r2, r9
 8022e04:	19e8      	adds	r0, r5, r7
 8022e06:	68a1      	ldr	r1, [r4, #8]
 8022e08:	f006 fd2f 	bl	802986a <memcpy>
 8022e0c:	e7a9      	b.n	8022d62 <ucdr_deserialize_uint32_t+0x72>
 8022e0e:	bf00      	nop

08022e10 <ucdr_deserialize_endian_uint32_t>:
 8022e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e14:	4604      	mov	r4, r0
 8022e16:	460e      	mov	r6, r1
 8022e18:	2104      	movs	r1, #4
 8022e1a:	4615      	mov	r5, r2
 8022e1c:	f7fa f842 	bl	801cea4 <ucdr_buffer_alignment>
 8022e20:	4601      	mov	r1, r0
 8022e22:	4620      	mov	r0, r4
 8022e24:	f894 8015 	ldrb.w	r8, [r4, #21]
 8022e28:	f7fa f884 	bl	801cf34 <ucdr_advance_buffer>
 8022e2c:	2104      	movs	r1, #4
 8022e2e:	4620      	mov	r0, r4
 8022e30:	f7f9 ffd8 	bl	801cde4 <ucdr_check_buffer_available_for>
 8022e34:	2800      	cmp	r0, #0
 8022e36:	d13c      	bne.n	8022eb2 <ucdr_deserialize_endian_uint32_t+0xa2>
 8022e38:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8022e3c:	42bb      	cmp	r3, r7
 8022e3e:	d933      	bls.n	8022ea8 <ucdr_deserialize_endian_uint32_t+0x98>
 8022e40:	eba3 0907 	sub.w	r9, r3, r7
 8022e44:	60a3      	str	r3, [r4, #8]
 8022e46:	6923      	ldr	r3, [r4, #16]
 8022e48:	4620      	mov	r0, r4
 8022e4a:	f1c9 0a04 	rsb	sl, r9, #4
 8022e4e:	444b      	add	r3, r9
 8022e50:	4651      	mov	r1, sl
 8022e52:	6123      	str	r3, [r4, #16]
 8022e54:	f7f9 ffd2 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022e58:	2800      	cmp	r0, #0
 8022e5a:	d048      	beq.n	8022eee <ucdr_deserialize_endian_uint32_t+0xde>
 8022e5c:	2e01      	cmp	r6, #1
 8022e5e:	d061      	beq.n	8022f24 <ucdr_deserialize_endian_uint32_t+0x114>
 8022e60:	78fb      	ldrb	r3, [r7, #3]
 8022e62:	702b      	strb	r3, [r5, #0]
 8022e64:	f1b9 0f00 	cmp.w	r9, #0
 8022e68:	d050      	beq.n	8022f0c <ucdr_deserialize_endian_uint32_t+0xfc>
 8022e6a:	78bb      	ldrb	r3, [r7, #2]
 8022e6c:	f1b9 0f01 	cmp.w	r9, #1
 8022e70:	706b      	strb	r3, [r5, #1]
 8022e72:	f105 0302 	add.w	r3, r5, #2
 8022e76:	d04d      	beq.n	8022f14 <ucdr_deserialize_endian_uint32_t+0x104>
 8022e78:	787b      	ldrb	r3, [r7, #1]
 8022e7a:	f1b9 0f02 	cmp.w	r9, #2
 8022e7e:	70ab      	strb	r3, [r5, #2]
 8022e80:	f105 0303 	add.w	r3, r5, #3
 8022e84:	d04a      	beq.n	8022f1c <ucdr_deserialize_endian_uint32_t+0x10c>
 8022e86:	783b      	ldrb	r3, [r7, #0]
 8022e88:	70eb      	strb	r3, [r5, #3]
 8022e8a:	6923      	ldr	r3, [r4, #16]
 8022e8c:	2104      	movs	r1, #4
 8022e8e:	68a2      	ldr	r2, [r4, #8]
 8022e90:	3304      	adds	r3, #4
 8022e92:	7da0      	ldrb	r0, [r4, #22]
 8022e94:	4452      	add	r2, sl
 8022e96:	7561      	strb	r1, [r4, #21]
 8022e98:	eba3 0309 	sub.w	r3, r3, r9
 8022e9c:	f080 0001 	eor.w	r0, r0, #1
 8022ea0:	60a2      	str	r2, [r4, #8]
 8022ea2:	6123      	str	r3, [r4, #16]
 8022ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ea8:	2104      	movs	r1, #4
 8022eaa:	4620      	mov	r0, r4
 8022eac:	f7f9 ffa6 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022eb0:	b1a8      	cbz	r0, 8022ede <ucdr_deserialize_endian_uint32_t+0xce>
 8022eb2:	2e01      	cmp	r6, #1
 8022eb4:	68a3      	ldr	r3, [r4, #8]
 8022eb6:	d017      	beq.n	8022ee8 <ucdr_deserialize_endian_uint32_t+0xd8>
 8022eb8:	78db      	ldrb	r3, [r3, #3]
 8022eba:	702b      	strb	r3, [r5, #0]
 8022ebc:	68a3      	ldr	r3, [r4, #8]
 8022ebe:	789b      	ldrb	r3, [r3, #2]
 8022ec0:	706b      	strb	r3, [r5, #1]
 8022ec2:	68a3      	ldr	r3, [r4, #8]
 8022ec4:	785b      	ldrb	r3, [r3, #1]
 8022ec6:	70ab      	strb	r3, [r5, #2]
 8022ec8:	68a3      	ldr	r3, [r4, #8]
 8022eca:	781b      	ldrb	r3, [r3, #0]
 8022ecc:	70eb      	strb	r3, [r5, #3]
 8022ece:	2104      	movs	r1, #4
 8022ed0:	68a2      	ldr	r2, [r4, #8]
 8022ed2:	6923      	ldr	r3, [r4, #16]
 8022ed4:	440a      	add	r2, r1
 8022ed6:	7561      	strb	r1, [r4, #21]
 8022ed8:	440b      	add	r3, r1
 8022eda:	60a2      	str	r2, [r4, #8]
 8022edc:	6123      	str	r3, [r4, #16]
 8022ede:	7da0      	ldrb	r0, [r4, #22]
 8022ee0:	f080 0001 	eor.w	r0, r0, #1
 8022ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ee8:	681b      	ldr	r3, [r3, #0]
 8022eea:	602b      	str	r3, [r5, #0]
 8022eec:	e7ef      	b.n	8022ece <ucdr_deserialize_endian_uint32_t+0xbe>
 8022eee:	68a2      	ldr	r2, [r4, #8]
 8022ef0:	6923      	ldr	r3, [r4, #16]
 8022ef2:	eba2 0209 	sub.w	r2, r2, r9
 8022ef6:	7da0      	ldrb	r0, [r4, #22]
 8022ef8:	eba3 0309 	sub.w	r3, r3, r9
 8022efc:	f884 8015 	strb.w	r8, [r4, #21]
 8022f00:	f080 0001 	eor.w	r0, r0, #1
 8022f04:	60a2      	str	r2, [r4, #8]
 8022f06:	6123      	str	r3, [r4, #16]
 8022f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022f0c:	68a3      	ldr	r3, [r4, #8]
 8022f0e:	789b      	ldrb	r3, [r3, #2]
 8022f10:	706b      	strb	r3, [r5, #1]
 8022f12:	1cab      	adds	r3, r5, #2
 8022f14:	68a2      	ldr	r2, [r4, #8]
 8022f16:	7852      	ldrb	r2, [r2, #1]
 8022f18:	f803 2b01 	strb.w	r2, [r3], #1
 8022f1c:	68a2      	ldr	r2, [r4, #8]
 8022f1e:	7812      	ldrb	r2, [r2, #0]
 8022f20:	701a      	strb	r2, [r3, #0]
 8022f22:	e7b2      	b.n	8022e8a <ucdr_deserialize_endian_uint32_t+0x7a>
 8022f24:	4639      	mov	r1, r7
 8022f26:	464a      	mov	r2, r9
 8022f28:	4628      	mov	r0, r5
 8022f2a:	f006 fc9e 	bl	802986a <memcpy>
 8022f2e:	4652      	mov	r2, sl
 8022f30:	eb05 0009 	add.w	r0, r5, r9
 8022f34:	68a1      	ldr	r1, [r4, #8]
 8022f36:	f006 fc98 	bl	802986a <memcpy>
 8022f3a:	e7a6      	b.n	8022e8a <ucdr_deserialize_endian_uint32_t+0x7a>

08022f3c <ucdr_serialize_uint64_t>:
 8022f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f40:	4604      	mov	r4, r0
 8022f42:	b082      	sub	sp, #8
 8022f44:	2108      	movs	r1, #8
 8022f46:	e9cd 2300 	strd	r2, r3, [sp]
 8022f4a:	f7f9 ffab 	bl	801cea4 <ucdr_buffer_alignment>
 8022f4e:	4601      	mov	r1, r0
 8022f50:	4620      	mov	r0, r4
 8022f52:	7d67      	ldrb	r7, [r4, #21]
 8022f54:	f7f9 ffee 	bl	801cf34 <ucdr_advance_buffer>
 8022f58:	2108      	movs	r1, #8
 8022f5a:	4620      	mov	r0, r4
 8022f5c:	f7f9 ff42 	bl	801cde4 <ucdr_check_buffer_available_for>
 8022f60:	2800      	cmp	r0, #0
 8022f62:	d14e      	bne.n	8023002 <ucdr_serialize_uint64_t+0xc6>
 8022f64:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8022f68:	42ab      	cmp	r3, r5
 8022f6a:	d945      	bls.n	8022ff8 <ucdr_serialize_uint64_t+0xbc>
 8022f6c:	1b5e      	subs	r6, r3, r5
 8022f6e:	60a3      	str	r3, [r4, #8]
 8022f70:	6923      	ldr	r3, [r4, #16]
 8022f72:	4620      	mov	r0, r4
 8022f74:	f1c6 0808 	rsb	r8, r6, #8
 8022f78:	4433      	add	r3, r6
 8022f7a:	4641      	mov	r1, r8
 8022f7c:	6123      	str	r3, [r4, #16]
 8022f7e:	f7f9 ff3d 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8022f82:	2800      	cmp	r0, #0
 8022f84:	d074      	beq.n	8023070 <ucdr_serialize_uint64_t+0x134>
 8022f86:	7d23      	ldrb	r3, [r4, #20]
 8022f88:	2b01      	cmp	r3, #1
 8022f8a:	f000 809b 	beq.w	80230c4 <ucdr_serialize_uint64_t+0x188>
 8022f8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8022f92:	702b      	strb	r3, [r5, #0]
 8022f94:	2e00      	cmp	r6, #0
 8022f96:	d078      	beq.n	802308a <ucdr_serialize_uint64_t+0x14e>
 8022f98:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8022f9c:	2e01      	cmp	r6, #1
 8022f9e:	706b      	strb	r3, [r5, #1]
 8022fa0:	d077      	beq.n	8023092 <ucdr_serialize_uint64_t+0x156>
 8022fa2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8022fa6:	2e02      	cmp	r6, #2
 8022fa8:	70ab      	strb	r3, [r5, #2]
 8022faa:	d076      	beq.n	802309a <ucdr_serialize_uint64_t+0x15e>
 8022fac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8022fb0:	2e03      	cmp	r6, #3
 8022fb2:	70eb      	strb	r3, [r5, #3]
 8022fb4:	d075      	beq.n	80230a2 <ucdr_serialize_uint64_t+0x166>
 8022fb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8022fba:	2e04      	cmp	r6, #4
 8022fbc:	712b      	strb	r3, [r5, #4]
 8022fbe:	d074      	beq.n	80230aa <ucdr_serialize_uint64_t+0x16e>
 8022fc0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8022fc4:	2e05      	cmp	r6, #5
 8022fc6:	716b      	strb	r3, [r5, #5]
 8022fc8:	d073      	beq.n	80230b2 <ucdr_serialize_uint64_t+0x176>
 8022fca:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8022fce:	2e06      	cmp	r6, #6
 8022fd0:	71ab      	strb	r3, [r5, #6]
 8022fd2:	d072      	beq.n	80230ba <ucdr_serialize_uint64_t+0x17e>
 8022fd4:	f89d 3000 	ldrb.w	r3, [sp]
 8022fd8:	71eb      	strb	r3, [r5, #7]
 8022fda:	6923      	ldr	r3, [r4, #16]
 8022fdc:	2108      	movs	r1, #8
 8022fde:	68a2      	ldr	r2, [r4, #8]
 8022fe0:	3308      	adds	r3, #8
 8022fe2:	7da0      	ldrb	r0, [r4, #22]
 8022fe4:	4442      	add	r2, r8
 8022fe6:	7561      	strb	r1, [r4, #21]
 8022fe8:	1b9e      	subs	r6, r3, r6
 8022fea:	f080 0001 	eor.w	r0, r0, #1
 8022fee:	60a2      	str	r2, [r4, #8]
 8022ff0:	6126      	str	r6, [r4, #16]
 8022ff2:	b002      	add	sp, #8
 8022ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022ff8:	2108      	movs	r1, #8
 8022ffa:	4620      	mov	r0, r4
 8022ffc:	f7f9 fefe 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8023000:	b350      	cbz	r0, 8023058 <ucdr_serialize_uint64_t+0x11c>
 8023002:	7d23      	ldrb	r3, [r4, #20]
 8023004:	2b01      	cmp	r3, #1
 8023006:	d02d      	beq.n	8023064 <ucdr_serialize_uint64_t+0x128>
 8023008:	68a3      	ldr	r3, [r4, #8]
 802300a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 802300e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8023012:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8023016:	7018      	strb	r0, [r3, #0]
 8023018:	68a3      	ldr	r3, [r4, #8]
 802301a:	705a      	strb	r2, [r3, #1]
 802301c:	68a3      	ldr	r3, [r4, #8]
 802301e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8023022:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8023026:	7099      	strb	r1, [r3, #2]
 8023028:	68a3      	ldr	r3, [r4, #8]
 802302a:	70da      	strb	r2, [r3, #3]
 802302c:	68a3      	ldr	r3, [r4, #8]
 802302e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8023032:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8023036:	7118      	strb	r0, [r3, #4]
 8023038:	68a3      	ldr	r3, [r4, #8]
 802303a:	715a      	strb	r2, [r3, #5]
 802303c:	68a3      	ldr	r3, [r4, #8]
 802303e:	f89d 2000 	ldrb.w	r2, [sp]
 8023042:	7199      	strb	r1, [r3, #6]
 8023044:	68a3      	ldr	r3, [r4, #8]
 8023046:	71da      	strb	r2, [r3, #7]
 8023048:	2108      	movs	r1, #8
 802304a:	68a2      	ldr	r2, [r4, #8]
 802304c:	6923      	ldr	r3, [r4, #16]
 802304e:	440a      	add	r2, r1
 8023050:	7561      	strb	r1, [r4, #21]
 8023052:	440b      	add	r3, r1
 8023054:	60a2      	str	r2, [r4, #8]
 8023056:	6123      	str	r3, [r4, #16]
 8023058:	7da0      	ldrb	r0, [r4, #22]
 802305a:	f080 0001 	eor.w	r0, r0, #1
 802305e:	b002      	add	sp, #8
 8023060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023064:	466b      	mov	r3, sp
 8023066:	68a2      	ldr	r2, [r4, #8]
 8023068:	cb03      	ldmia	r3!, {r0, r1}
 802306a:	6010      	str	r0, [r2, #0]
 802306c:	6051      	str	r1, [r2, #4]
 802306e:	e7eb      	b.n	8023048 <ucdr_serialize_uint64_t+0x10c>
 8023070:	68a2      	ldr	r2, [r4, #8]
 8023072:	6923      	ldr	r3, [r4, #16]
 8023074:	7da0      	ldrb	r0, [r4, #22]
 8023076:	1b92      	subs	r2, r2, r6
 8023078:	1b9b      	subs	r3, r3, r6
 802307a:	7567      	strb	r7, [r4, #21]
 802307c:	f080 0001 	eor.w	r0, r0, #1
 8023080:	60a2      	str	r2, [r4, #8]
 8023082:	6123      	str	r3, [r4, #16]
 8023084:	b002      	add	sp, #8
 8023086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802308a:	68a3      	ldr	r3, [r4, #8]
 802308c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8023090:	701a      	strb	r2, [r3, #0]
 8023092:	68a3      	ldr	r3, [r4, #8]
 8023094:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8023098:	701a      	strb	r2, [r3, #0]
 802309a:	68a3      	ldr	r3, [r4, #8]
 802309c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80230a0:	701a      	strb	r2, [r3, #0]
 80230a2:	68a3      	ldr	r3, [r4, #8]
 80230a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80230a8:	701a      	strb	r2, [r3, #0]
 80230aa:	68a3      	ldr	r3, [r4, #8]
 80230ac:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80230b0:	701a      	strb	r2, [r3, #0]
 80230b2:	68a3      	ldr	r3, [r4, #8]
 80230b4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80230b8:	701a      	strb	r2, [r3, #0]
 80230ba:	68a3      	ldr	r3, [r4, #8]
 80230bc:	f89d 2000 	ldrb.w	r2, [sp]
 80230c0:	701a      	strb	r2, [r3, #0]
 80230c2:	e78a      	b.n	8022fda <ucdr_serialize_uint64_t+0x9e>
 80230c4:	4628      	mov	r0, r5
 80230c6:	466d      	mov	r5, sp
 80230c8:	4632      	mov	r2, r6
 80230ca:	4629      	mov	r1, r5
 80230cc:	f006 fbcd 	bl	802986a <memcpy>
 80230d0:	4642      	mov	r2, r8
 80230d2:	19a9      	adds	r1, r5, r6
 80230d4:	68a0      	ldr	r0, [r4, #8]
 80230d6:	f006 fbc8 	bl	802986a <memcpy>
 80230da:	e77e      	b.n	8022fda <ucdr_serialize_uint64_t+0x9e>

080230dc <ucdr_serialize_int16_t>:
 80230dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80230e0:	460b      	mov	r3, r1
 80230e2:	b082      	sub	sp, #8
 80230e4:	4604      	mov	r4, r0
 80230e6:	2102      	movs	r1, #2
 80230e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80230ec:	f7f9 feda 	bl	801cea4 <ucdr_buffer_alignment>
 80230f0:	4601      	mov	r1, r0
 80230f2:	4620      	mov	r0, r4
 80230f4:	7d67      	ldrb	r7, [r4, #21]
 80230f6:	f7f9 ff1d 	bl	801cf34 <ucdr_advance_buffer>
 80230fa:	2102      	movs	r1, #2
 80230fc:	4620      	mov	r0, r4
 80230fe:	f7f9 fe71 	bl	801cde4 <ucdr_check_buffer_available_for>
 8023102:	bb78      	cbnz	r0, 8023164 <ucdr_serialize_int16_t+0x88>
 8023104:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8023108:	42ab      	cmp	r3, r5
 802310a:	d926      	bls.n	802315a <ucdr_serialize_int16_t+0x7e>
 802310c:	1b5e      	subs	r6, r3, r5
 802310e:	60a3      	str	r3, [r4, #8]
 8023110:	6923      	ldr	r3, [r4, #16]
 8023112:	4620      	mov	r0, r4
 8023114:	f1c6 0802 	rsb	r8, r6, #2
 8023118:	4433      	add	r3, r6
 802311a:	4641      	mov	r1, r8
 802311c:	6123      	str	r3, [r4, #16]
 802311e:	f7f9 fe6d 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8023122:	2800      	cmp	r0, #0
 8023124:	d03b      	beq.n	802319e <ucdr_serialize_int16_t+0xc2>
 8023126:	7d23      	ldrb	r3, [r4, #20]
 8023128:	2b01      	cmp	r3, #1
 802312a:	d04a      	beq.n	80231c2 <ucdr_serialize_int16_t+0xe6>
 802312c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8023130:	702b      	strb	r3, [r5, #0]
 8023132:	2e00      	cmp	r6, #0
 8023134:	d040      	beq.n	80231b8 <ucdr_serialize_int16_t+0xdc>
 8023136:	f89d 3006 	ldrb.w	r3, [sp, #6]
 802313a:	706b      	strb	r3, [r5, #1]
 802313c:	6923      	ldr	r3, [r4, #16]
 802313e:	2102      	movs	r1, #2
 8023140:	68a2      	ldr	r2, [r4, #8]
 8023142:	3302      	adds	r3, #2
 8023144:	7da0      	ldrb	r0, [r4, #22]
 8023146:	4442      	add	r2, r8
 8023148:	7561      	strb	r1, [r4, #21]
 802314a:	1b9e      	subs	r6, r3, r6
 802314c:	f080 0001 	eor.w	r0, r0, #1
 8023150:	60a2      	str	r2, [r4, #8]
 8023152:	6126      	str	r6, [r4, #16]
 8023154:	b002      	add	sp, #8
 8023156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802315a:	2102      	movs	r1, #2
 802315c:	4620      	mov	r0, r4
 802315e:	f7f9 fe4d 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8023162:	b190      	cbz	r0, 802318a <ucdr_serialize_int16_t+0xae>
 8023164:	7d23      	ldrb	r3, [r4, #20]
 8023166:	2b01      	cmp	r3, #1
 8023168:	68a3      	ldr	r3, [r4, #8]
 802316a:	d014      	beq.n	8023196 <ucdr_serialize_int16_t+0xba>
 802316c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8023170:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8023174:	7019      	strb	r1, [r3, #0]
 8023176:	68a3      	ldr	r3, [r4, #8]
 8023178:	705a      	strb	r2, [r3, #1]
 802317a:	2102      	movs	r1, #2
 802317c:	68a2      	ldr	r2, [r4, #8]
 802317e:	6923      	ldr	r3, [r4, #16]
 8023180:	440a      	add	r2, r1
 8023182:	7561      	strb	r1, [r4, #21]
 8023184:	440b      	add	r3, r1
 8023186:	60a2      	str	r2, [r4, #8]
 8023188:	6123      	str	r3, [r4, #16]
 802318a:	7da0      	ldrb	r0, [r4, #22]
 802318c:	f080 0001 	eor.w	r0, r0, #1
 8023190:	b002      	add	sp, #8
 8023192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023196:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 802319a:	801a      	strh	r2, [r3, #0]
 802319c:	e7ed      	b.n	802317a <ucdr_serialize_int16_t+0x9e>
 802319e:	68a2      	ldr	r2, [r4, #8]
 80231a0:	6923      	ldr	r3, [r4, #16]
 80231a2:	7da0      	ldrb	r0, [r4, #22]
 80231a4:	1b92      	subs	r2, r2, r6
 80231a6:	1b9b      	subs	r3, r3, r6
 80231a8:	7567      	strb	r7, [r4, #21]
 80231aa:	f080 0001 	eor.w	r0, r0, #1
 80231ae:	60a2      	str	r2, [r4, #8]
 80231b0:	6123      	str	r3, [r4, #16]
 80231b2:	b002      	add	sp, #8
 80231b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80231b8:	68a3      	ldr	r3, [r4, #8]
 80231ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80231be:	701a      	strb	r2, [r3, #0]
 80231c0:	e7bc      	b.n	802313c <ucdr_serialize_int16_t+0x60>
 80231c2:	4628      	mov	r0, r5
 80231c4:	f10d 0506 	add.w	r5, sp, #6
 80231c8:	4632      	mov	r2, r6
 80231ca:	4629      	mov	r1, r5
 80231cc:	f006 fb4d 	bl	802986a <memcpy>
 80231d0:	4642      	mov	r2, r8
 80231d2:	19a9      	adds	r1, r5, r6
 80231d4:	68a0      	ldr	r0, [r4, #8]
 80231d6:	f006 fb48 	bl	802986a <memcpy>
 80231da:	e7af      	b.n	802313c <ucdr_serialize_int16_t+0x60>

080231dc <ucdr_deserialize_int16_t>:
 80231dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231e0:	4604      	mov	r4, r0
 80231e2:	460d      	mov	r5, r1
 80231e4:	2102      	movs	r1, #2
 80231e6:	f7f9 fe5d 	bl	801cea4 <ucdr_buffer_alignment>
 80231ea:	4601      	mov	r1, r0
 80231ec:	4620      	mov	r0, r4
 80231ee:	f894 8015 	ldrb.w	r8, [r4, #21]
 80231f2:	f7f9 fe9f 	bl	801cf34 <ucdr_advance_buffer>
 80231f6:	2102      	movs	r1, #2
 80231f8:	4620      	mov	r0, r4
 80231fa:	f7f9 fdf3 	bl	801cde4 <ucdr_check_buffer_available_for>
 80231fe:	bb60      	cbnz	r0, 802325a <ucdr_deserialize_int16_t+0x7e>
 8023200:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8023204:	42be      	cmp	r6, r7
 8023206:	d923      	bls.n	8023250 <ucdr_deserialize_int16_t+0x74>
 8023208:	6923      	ldr	r3, [r4, #16]
 802320a:	4620      	mov	r0, r4
 802320c:	60a6      	str	r6, [r4, #8]
 802320e:	1bf6      	subs	r6, r6, r7
 8023210:	4433      	add	r3, r6
 8023212:	f1c6 0902 	rsb	r9, r6, #2
 8023216:	6123      	str	r3, [r4, #16]
 8023218:	4649      	mov	r1, r9
 802321a:	f7f9 fdef 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 802321e:	2800      	cmp	r0, #0
 8023220:	d034      	beq.n	802328c <ucdr_deserialize_int16_t+0xb0>
 8023222:	7d23      	ldrb	r3, [r4, #20]
 8023224:	2b01      	cmp	r3, #1
 8023226:	d042      	beq.n	80232ae <ucdr_deserialize_int16_t+0xd2>
 8023228:	787b      	ldrb	r3, [r7, #1]
 802322a:	702b      	strb	r3, [r5, #0]
 802322c:	2e00      	cmp	r6, #0
 802322e:	d03a      	beq.n	80232a6 <ucdr_deserialize_int16_t+0xca>
 8023230:	783b      	ldrb	r3, [r7, #0]
 8023232:	706b      	strb	r3, [r5, #1]
 8023234:	6923      	ldr	r3, [r4, #16]
 8023236:	2102      	movs	r1, #2
 8023238:	68a2      	ldr	r2, [r4, #8]
 802323a:	3302      	adds	r3, #2
 802323c:	7da0      	ldrb	r0, [r4, #22]
 802323e:	444a      	add	r2, r9
 8023240:	7561      	strb	r1, [r4, #21]
 8023242:	1b9b      	subs	r3, r3, r6
 8023244:	f080 0001 	eor.w	r0, r0, #1
 8023248:	60a2      	str	r2, [r4, #8]
 802324a:	6123      	str	r3, [r4, #16]
 802324c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023250:	2102      	movs	r1, #2
 8023252:	4620      	mov	r0, r4
 8023254:	f7f9 fdd2 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8023258:	b180      	cbz	r0, 802327c <ucdr_deserialize_int16_t+0xa0>
 802325a:	7d23      	ldrb	r3, [r4, #20]
 802325c:	2b01      	cmp	r3, #1
 802325e:	68a3      	ldr	r3, [r4, #8]
 8023260:	d011      	beq.n	8023286 <ucdr_deserialize_int16_t+0xaa>
 8023262:	785b      	ldrb	r3, [r3, #1]
 8023264:	702b      	strb	r3, [r5, #0]
 8023266:	68a3      	ldr	r3, [r4, #8]
 8023268:	781b      	ldrb	r3, [r3, #0]
 802326a:	706b      	strb	r3, [r5, #1]
 802326c:	2102      	movs	r1, #2
 802326e:	68a2      	ldr	r2, [r4, #8]
 8023270:	6923      	ldr	r3, [r4, #16]
 8023272:	440a      	add	r2, r1
 8023274:	7561      	strb	r1, [r4, #21]
 8023276:	440b      	add	r3, r1
 8023278:	60a2      	str	r2, [r4, #8]
 802327a:	6123      	str	r3, [r4, #16]
 802327c:	7da0      	ldrb	r0, [r4, #22]
 802327e:	f080 0001 	eor.w	r0, r0, #1
 8023282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023286:	881b      	ldrh	r3, [r3, #0]
 8023288:	802b      	strh	r3, [r5, #0]
 802328a:	e7ef      	b.n	802326c <ucdr_deserialize_int16_t+0x90>
 802328c:	68a2      	ldr	r2, [r4, #8]
 802328e:	6923      	ldr	r3, [r4, #16]
 8023290:	1b92      	subs	r2, r2, r6
 8023292:	7da0      	ldrb	r0, [r4, #22]
 8023294:	1b9b      	subs	r3, r3, r6
 8023296:	f884 8015 	strb.w	r8, [r4, #21]
 802329a:	f080 0001 	eor.w	r0, r0, #1
 802329e:	60a2      	str	r2, [r4, #8]
 80232a0:	6123      	str	r3, [r4, #16]
 80232a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80232a6:	68a3      	ldr	r3, [r4, #8]
 80232a8:	781b      	ldrb	r3, [r3, #0]
 80232aa:	706b      	strb	r3, [r5, #1]
 80232ac:	e7c2      	b.n	8023234 <ucdr_deserialize_int16_t+0x58>
 80232ae:	4639      	mov	r1, r7
 80232b0:	4632      	mov	r2, r6
 80232b2:	4628      	mov	r0, r5
 80232b4:	f006 fad9 	bl	802986a <memcpy>
 80232b8:	464a      	mov	r2, r9
 80232ba:	19a8      	adds	r0, r5, r6
 80232bc:	68a1      	ldr	r1, [r4, #8]
 80232be:	f006 fad4 	bl	802986a <memcpy>
 80232c2:	e7b7      	b.n	8023234 <ucdr_deserialize_int16_t+0x58>

080232c4 <ucdr_serialize_int32_t>:
 80232c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80232c8:	b082      	sub	sp, #8
 80232ca:	4604      	mov	r4, r0
 80232cc:	9101      	str	r1, [sp, #4]
 80232ce:	2104      	movs	r1, #4
 80232d0:	f7f9 fde8 	bl	801cea4 <ucdr_buffer_alignment>
 80232d4:	4601      	mov	r1, r0
 80232d6:	4620      	mov	r0, r4
 80232d8:	7d67      	ldrb	r7, [r4, #21]
 80232da:	f7f9 fe2b 	bl	801cf34 <ucdr_advance_buffer>
 80232de:	2104      	movs	r1, #4
 80232e0:	4620      	mov	r0, r4
 80232e2:	f7f9 fd7f 	bl	801cde4 <ucdr_check_buffer_available_for>
 80232e6:	2800      	cmp	r0, #0
 80232e8:	d139      	bne.n	802335e <ucdr_serialize_int32_t+0x9a>
 80232ea:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80232ee:	42ab      	cmp	r3, r5
 80232f0:	d930      	bls.n	8023354 <ucdr_serialize_int32_t+0x90>
 80232f2:	1b5e      	subs	r6, r3, r5
 80232f4:	60a3      	str	r3, [r4, #8]
 80232f6:	6923      	ldr	r3, [r4, #16]
 80232f8:	4620      	mov	r0, r4
 80232fa:	f1c6 0804 	rsb	r8, r6, #4
 80232fe:	4433      	add	r3, r6
 8023300:	4641      	mov	r1, r8
 8023302:	6123      	str	r3, [r4, #16]
 8023304:	f7f9 fd7a 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8023308:	2800      	cmp	r0, #0
 802330a:	d04c      	beq.n	80233a6 <ucdr_serialize_int32_t+0xe2>
 802330c:	7d23      	ldrb	r3, [r4, #20]
 802330e:	2b01      	cmp	r3, #1
 8023310:	d063      	beq.n	80233da <ucdr_serialize_int32_t+0x116>
 8023312:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8023316:	702b      	strb	r3, [r5, #0]
 8023318:	2e00      	cmp	r6, #0
 802331a:	d051      	beq.n	80233c0 <ucdr_serialize_int32_t+0xfc>
 802331c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8023320:	2e01      	cmp	r6, #1
 8023322:	706b      	strb	r3, [r5, #1]
 8023324:	d050      	beq.n	80233c8 <ucdr_serialize_int32_t+0x104>
 8023326:	f89d 3005 	ldrb.w	r3, [sp, #5]
 802332a:	2e02      	cmp	r6, #2
 802332c:	70ab      	strb	r3, [r5, #2]
 802332e:	d04f      	beq.n	80233d0 <ucdr_serialize_int32_t+0x10c>
 8023330:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8023334:	70eb      	strb	r3, [r5, #3]
 8023336:	6923      	ldr	r3, [r4, #16]
 8023338:	2104      	movs	r1, #4
 802333a:	68a2      	ldr	r2, [r4, #8]
 802333c:	3304      	adds	r3, #4
 802333e:	7da0      	ldrb	r0, [r4, #22]
 8023340:	4442      	add	r2, r8
 8023342:	7561      	strb	r1, [r4, #21]
 8023344:	1b9e      	subs	r6, r3, r6
 8023346:	f080 0001 	eor.w	r0, r0, #1
 802334a:	60a2      	str	r2, [r4, #8]
 802334c:	6126      	str	r6, [r4, #16]
 802334e:	b002      	add	sp, #8
 8023350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023354:	2104      	movs	r1, #4
 8023356:	4620      	mov	r0, r4
 8023358:	f7f9 fd50 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 802335c:	b1d0      	cbz	r0, 8023394 <ucdr_serialize_int32_t+0xd0>
 802335e:	7d23      	ldrb	r3, [r4, #20]
 8023360:	2b01      	cmp	r3, #1
 8023362:	68a3      	ldr	r3, [r4, #8]
 8023364:	d01c      	beq.n	80233a0 <ucdr_serialize_int32_t+0xdc>
 8023366:	f89d 0007 	ldrb.w	r0, [sp, #7]
 802336a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 802336e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8023372:	7018      	strb	r0, [r3, #0]
 8023374:	68a3      	ldr	r3, [r4, #8]
 8023376:	705a      	strb	r2, [r3, #1]
 8023378:	68a3      	ldr	r3, [r4, #8]
 802337a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 802337e:	7099      	strb	r1, [r3, #2]
 8023380:	68a3      	ldr	r3, [r4, #8]
 8023382:	70da      	strb	r2, [r3, #3]
 8023384:	2104      	movs	r1, #4
 8023386:	68a2      	ldr	r2, [r4, #8]
 8023388:	6923      	ldr	r3, [r4, #16]
 802338a:	440a      	add	r2, r1
 802338c:	7561      	strb	r1, [r4, #21]
 802338e:	440b      	add	r3, r1
 8023390:	60a2      	str	r2, [r4, #8]
 8023392:	6123      	str	r3, [r4, #16]
 8023394:	7da0      	ldrb	r0, [r4, #22]
 8023396:	f080 0001 	eor.w	r0, r0, #1
 802339a:	b002      	add	sp, #8
 802339c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80233a0:	9a01      	ldr	r2, [sp, #4]
 80233a2:	601a      	str	r2, [r3, #0]
 80233a4:	e7ee      	b.n	8023384 <ucdr_serialize_int32_t+0xc0>
 80233a6:	68a2      	ldr	r2, [r4, #8]
 80233a8:	6923      	ldr	r3, [r4, #16]
 80233aa:	7da0      	ldrb	r0, [r4, #22]
 80233ac:	1b92      	subs	r2, r2, r6
 80233ae:	1b9b      	subs	r3, r3, r6
 80233b0:	7567      	strb	r7, [r4, #21]
 80233b2:	f080 0001 	eor.w	r0, r0, #1
 80233b6:	60a2      	str	r2, [r4, #8]
 80233b8:	6123      	str	r3, [r4, #16]
 80233ba:	b002      	add	sp, #8
 80233bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80233c0:	68a3      	ldr	r3, [r4, #8]
 80233c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80233c6:	701a      	strb	r2, [r3, #0]
 80233c8:	68a3      	ldr	r3, [r4, #8]
 80233ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80233ce:	701a      	strb	r2, [r3, #0]
 80233d0:	68a3      	ldr	r3, [r4, #8]
 80233d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80233d6:	701a      	strb	r2, [r3, #0]
 80233d8:	e7ad      	b.n	8023336 <ucdr_serialize_int32_t+0x72>
 80233da:	4628      	mov	r0, r5
 80233dc:	ad01      	add	r5, sp, #4
 80233de:	4632      	mov	r2, r6
 80233e0:	4629      	mov	r1, r5
 80233e2:	f006 fa42 	bl	802986a <memcpy>
 80233e6:	4642      	mov	r2, r8
 80233e8:	19a9      	adds	r1, r5, r6
 80233ea:	68a0      	ldr	r0, [r4, #8]
 80233ec:	f006 fa3d 	bl	802986a <memcpy>
 80233f0:	e7a1      	b.n	8023336 <ucdr_serialize_int32_t+0x72>
 80233f2:	bf00      	nop

080233f4 <ucdr_deserialize_int32_t>:
 80233f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80233f8:	4604      	mov	r4, r0
 80233fa:	460d      	mov	r5, r1
 80233fc:	2104      	movs	r1, #4
 80233fe:	f7f9 fd51 	bl	801cea4 <ucdr_buffer_alignment>
 8023402:	4601      	mov	r1, r0
 8023404:	4620      	mov	r0, r4
 8023406:	f894 8015 	ldrb.w	r8, [r4, #21]
 802340a:	f7f9 fd93 	bl	801cf34 <ucdr_advance_buffer>
 802340e:	2104      	movs	r1, #4
 8023410:	4620      	mov	r0, r4
 8023412:	f7f9 fce7 	bl	801cde4 <ucdr_check_buffer_available_for>
 8023416:	2800      	cmp	r0, #0
 8023418:	d138      	bne.n	802348c <ucdr_deserialize_int32_t+0x98>
 802341a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 802341e:	42b7      	cmp	r7, r6
 8023420:	d92f      	bls.n	8023482 <ucdr_deserialize_int32_t+0x8e>
 8023422:	6923      	ldr	r3, [r4, #16]
 8023424:	4620      	mov	r0, r4
 8023426:	60a7      	str	r7, [r4, #8]
 8023428:	1bbf      	subs	r7, r7, r6
 802342a:	443b      	add	r3, r7
 802342c:	f1c7 0904 	rsb	r9, r7, #4
 8023430:	6123      	str	r3, [r4, #16]
 8023432:	4649      	mov	r1, r9
 8023434:	f7f9 fce2 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 8023438:	2800      	cmp	r0, #0
 802343a:	d046      	beq.n	80234ca <ucdr_deserialize_int32_t+0xd6>
 802343c:	7d23      	ldrb	r3, [r4, #20]
 802343e:	2b01      	cmp	r3, #1
 8023440:	d05c      	beq.n	80234fc <ucdr_deserialize_int32_t+0x108>
 8023442:	78f3      	ldrb	r3, [r6, #3]
 8023444:	702b      	strb	r3, [r5, #0]
 8023446:	2f00      	cmp	r7, #0
 8023448:	d04c      	beq.n	80234e4 <ucdr_deserialize_int32_t+0xf0>
 802344a:	78b3      	ldrb	r3, [r6, #2]
 802344c:	2f01      	cmp	r7, #1
 802344e:	706b      	strb	r3, [r5, #1]
 8023450:	f105 0302 	add.w	r3, r5, #2
 8023454:	d04a      	beq.n	80234ec <ucdr_deserialize_int32_t+0xf8>
 8023456:	7873      	ldrb	r3, [r6, #1]
 8023458:	2f02      	cmp	r7, #2
 802345a:	70ab      	strb	r3, [r5, #2]
 802345c:	f105 0303 	add.w	r3, r5, #3
 8023460:	d048      	beq.n	80234f4 <ucdr_deserialize_int32_t+0x100>
 8023462:	7833      	ldrb	r3, [r6, #0]
 8023464:	70eb      	strb	r3, [r5, #3]
 8023466:	6923      	ldr	r3, [r4, #16]
 8023468:	2104      	movs	r1, #4
 802346a:	68a2      	ldr	r2, [r4, #8]
 802346c:	3304      	adds	r3, #4
 802346e:	7da0      	ldrb	r0, [r4, #22]
 8023470:	444a      	add	r2, r9
 8023472:	7561      	strb	r1, [r4, #21]
 8023474:	1bdb      	subs	r3, r3, r7
 8023476:	f080 0001 	eor.w	r0, r0, #1
 802347a:	60a2      	str	r2, [r4, #8]
 802347c:	6123      	str	r3, [r4, #16]
 802347e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023482:	2104      	movs	r1, #4
 8023484:	4620      	mov	r0, r4
 8023486:	f7f9 fcb9 	bl	801cdfc <ucdr_check_final_buffer_behavior>
 802348a:	b1b0      	cbz	r0, 80234ba <ucdr_deserialize_int32_t+0xc6>
 802348c:	7d23      	ldrb	r3, [r4, #20]
 802348e:	2b01      	cmp	r3, #1
 8023490:	68a3      	ldr	r3, [r4, #8]
 8023492:	d017      	beq.n	80234c4 <ucdr_deserialize_int32_t+0xd0>
 8023494:	78db      	ldrb	r3, [r3, #3]
 8023496:	702b      	strb	r3, [r5, #0]
 8023498:	68a3      	ldr	r3, [r4, #8]
 802349a:	789b      	ldrb	r3, [r3, #2]
 802349c:	706b      	strb	r3, [r5, #1]
 802349e:	68a3      	ldr	r3, [r4, #8]
 80234a0:	785b      	ldrb	r3, [r3, #1]
 80234a2:	70ab      	strb	r3, [r5, #2]
 80234a4:	68a3      	ldr	r3, [r4, #8]
 80234a6:	781b      	ldrb	r3, [r3, #0]
 80234a8:	70eb      	strb	r3, [r5, #3]
 80234aa:	2104      	movs	r1, #4
 80234ac:	68a2      	ldr	r2, [r4, #8]
 80234ae:	6923      	ldr	r3, [r4, #16]
 80234b0:	440a      	add	r2, r1
 80234b2:	7561      	strb	r1, [r4, #21]
 80234b4:	440b      	add	r3, r1
 80234b6:	60a2      	str	r2, [r4, #8]
 80234b8:	6123      	str	r3, [r4, #16]
 80234ba:	7da0      	ldrb	r0, [r4, #22]
 80234bc:	f080 0001 	eor.w	r0, r0, #1
 80234c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80234c4:	681b      	ldr	r3, [r3, #0]
 80234c6:	602b      	str	r3, [r5, #0]
 80234c8:	e7ef      	b.n	80234aa <ucdr_deserialize_int32_t+0xb6>
 80234ca:	68a2      	ldr	r2, [r4, #8]
 80234cc:	6923      	ldr	r3, [r4, #16]
 80234ce:	1bd2      	subs	r2, r2, r7
 80234d0:	7da0      	ldrb	r0, [r4, #22]
 80234d2:	1bdb      	subs	r3, r3, r7
 80234d4:	f884 8015 	strb.w	r8, [r4, #21]
 80234d8:	f080 0001 	eor.w	r0, r0, #1
 80234dc:	60a2      	str	r2, [r4, #8]
 80234de:	6123      	str	r3, [r4, #16]
 80234e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80234e4:	68a3      	ldr	r3, [r4, #8]
 80234e6:	789b      	ldrb	r3, [r3, #2]
 80234e8:	706b      	strb	r3, [r5, #1]
 80234ea:	1cab      	adds	r3, r5, #2
 80234ec:	68a2      	ldr	r2, [r4, #8]
 80234ee:	7852      	ldrb	r2, [r2, #1]
 80234f0:	f803 2b01 	strb.w	r2, [r3], #1
 80234f4:	68a2      	ldr	r2, [r4, #8]
 80234f6:	7812      	ldrb	r2, [r2, #0]
 80234f8:	701a      	strb	r2, [r3, #0]
 80234fa:	e7b4      	b.n	8023466 <ucdr_deserialize_int32_t+0x72>
 80234fc:	4631      	mov	r1, r6
 80234fe:	463a      	mov	r2, r7
 8023500:	4628      	mov	r0, r5
 8023502:	f006 f9b2 	bl	802986a <memcpy>
 8023506:	464a      	mov	r2, r9
 8023508:	19e8      	adds	r0, r5, r7
 802350a:	68a1      	ldr	r1, [r4, #8]
 802350c:	f006 f9ad 	bl	802986a <memcpy>
 8023510:	e7a9      	b.n	8023466 <ucdr_deserialize_int32_t+0x72>
 8023512:	bf00      	nop

08023514 <uxr_buffer_delete_entity>:
 8023514:	b510      	push	{r4, lr}
 8023516:	2300      	movs	r3, #0
 8023518:	b08e      	sub	sp, #56	@ 0x38
 802351a:	4604      	mov	r4, r0
 802351c:	9103      	str	r1, [sp, #12]
 802351e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8023522:	2303      	movs	r3, #3
 8023524:	2204      	movs	r2, #4
 8023526:	9300      	str	r3, [sp, #0]
 8023528:	ab06      	add	r3, sp, #24
 802352a:	f001 fa99 	bl	8024a60 <uxr_prepare_stream_to_write_submessage>
 802352e:	b918      	cbnz	r0, 8023538 <uxr_buffer_delete_entity+0x24>
 8023530:	4604      	mov	r4, r0
 8023532:	4620      	mov	r0, r4
 8023534:	b00e      	add	sp, #56	@ 0x38
 8023536:	bd10      	pop	{r4, pc}
 8023538:	9902      	ldr	r1, [sp, #8]
 802353a:	aa05      	add	r2, sp, #20
 802353c:	4620      	mov	r0, r4
 802353e:	f001 fbcb 	bl	8024cd8 <uxr_init_base_object_request>
 8023542:	4604      	mov	r4, r0
 8023544:	a905      	add	r1, sp, #20
 8023546:	a806      	add	r0, sp, #24
 8023548:	f003 f86c 	bl	8026624 <uxr_serialize_DELETE_Payload>
 802354c:	4620      	mov	r0, r4
 802354e:	b00e      	add	sp, #56	@ 0x38
 8023550:	bd10      	pop	{r4, pc}
 8023552:	bf00      	nop

08023554 <uxr_common_create_entity>:
 8023554:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8023558:	b510      	push	{r4, lr}
 802355a:	f1bc 0f01 	cmp.w	ip, #1
 802355e:	b08c      	sub	sp, #48	@ 0x30
 8023560:	4604      	mov	r4, r0
 8023562:	9202      	str	r2, [sp, #8]
 8023564:	bf0c      	ite	eq
 8023566:	f003 0201 	andeq.w	r2, r3, #1
 802356a:	2200      	movne	r2, #0
 802356c:	330e      	adds	r3, #14
 802356e:	9103      	str	r1, [sp, #12]
 8023570:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8023574:	441a      	add	r2, r3
 8023576:	ab04      	add	r3, sp, #16
 8023578:	9101      	str	r1, [sp, #4]
 802357a:	2101      	movs	r1, #1
 802357c:	b292      	uxth	r2, r2
 802357e:	9100      	str	r1, [sp, #0]
 8023580:	9903      	ldr	r1, [sp, #12]
 8023582:	f001 fa6d 	bl	8024a60 <uxr_prepare_stream_to_write_submessage>
 8023586:	b918      	cbnz	r0, 8023590 <uxr_common_create_entity+0x3c>
 8023588:	4604      	mov	r4, r0
 802358a:	4620      	mov	r0, r4
 802358c:	b00c      	add	sp, #48	@ 0x30
 802358e:	bd10      	pop	{r4, pc}
 8023590:	9902      	ldr	r1, [sp, #8]
 8023592:	4620      	mov	r0, r4
 8023594:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023596:	f001 fb9f 	bl	8024cd8 <uxr_init_base_object_request>
 802359a:	4604      	mov	r4, r0
 802359c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802359e:	a804      	add	r0, sp, #16
 80235a0:	f002 ff9a 	bl	80264d8 <uxr_serialize_CREATE_Payload>
 80235a4:	4620      	mov	r0, r4
 80235a6:	b00c      	add	sp, #48	@ 0x30
 80235a8:	bd10      	pop	{r4, pc}
 80235aa:	bf00      	nop

080235ac <uxr_buffer_create_participant_bin>:
 80235ac:	b570      	push	{r4, r5, r6, lr}
 80235ae:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80235b2:	4605      	mov	r5, r0
 80235b4:	ac11      	add	r4, sp, #68	@ 0x44
 80235b6:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80235ba:	2303      	movs	r3, #3
 80235bc:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80235c0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80235c4:	7223      	strb	r3, [r4, #8]
 80235c6:	2300      	movs	r3, #0
 80235c8:	2201      	movs	r2, #1
 80235ca:	f88d 3014 	strb.w	r3, [sp, #20]
 80235ce:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80235d0:	7122      	strb	r2, [r4, #4]
 80235d2:	b1cb      	cbz	r3, 8023608 <uxr_buffer_create_participant_bin+0x5c>
 80235d4:	f88d 201c 	strb.w	r2, [sp, #28]
 80235d8:	9308      	str	r3, [sp, #32]
 80235da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80235de:	a915      	add	r1, sp, #84	@ 0x54
 80235e0:	a809      	add	r0, sp, #36	@ 0x24
 80235e2:	f7f9 fc53 	bl	801ce8c <ucdr_init_buffer>
 80235e6:	a905      	add	r1, sp, #20
 80235e8:	a809      	add	r0, sp, #36	@ 0x24
 80235ea:	f002 fc3b 	bl	8025e64 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80235ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80235f0:	9600      	str	r6, [sp, #0]
 80235f2:	4628      	mov	r0, r5
 80235f4:	9401      	str	r4, [sp, #4]
 80235f6:	60e3      	str	r3, [r4, #12]
 80235f8:	b29b      	uxth	r3, r3
 80235fa:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80235fe:	f7ff ffa9 	bl	8023554 <uxr_common_create_entity>
 8023602:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8023606:	bd70      	pop	{r4, r5, r6, pc}
 8023608:	f88d 301c 	strb.w	r3, [sp, #28]
 802360c:	e7e5      	b.n	80235da <uxr_buffer_create_participant_bin+0x2e>
 802360e:	bf00      	nop

08023610 <uxr_buffer_create_topic_bin>:
 8023610:	b570      	push	{r4, r5, r6, lr}
 8023612:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8023616:	4605      	mov	r5, r0
 8023618:	4618      	mov	r0, r3
 802361a:	9105      	str	r1, [sp, #20]
 802361c:	a997      	add	r1, sp, #604	@ 0x25c
 802361e:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8023622:	ac13      	add	r4, sp, #76	@ 0x4c
 8023624:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023628:	2302      	movs	r3, #2
 802362a:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 802362e:	f000 f9ad 	bl	802398c <uxr_object_id_to_raw>
 8023632:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8023634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8023638:	a917      	add	r1, sp, #92	@ 0x5c
 802363a:	a80b      	add	r0, sp, #44	@ 0x2c
 802363c:	9306      	str	r3, [sp, #24]
 802363e:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8023640:	930a      	str	r3, [sp, #40]	@ 0x28
 8023642:	2303      	movs	r3, #3
 8023644:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8023648:	2301      	movs	r3, #1
 802364a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 802364e:	2300      	movs	r3, #0
 8023650:	f88d 301c 	strb.w	r3, [sp, #28]
 8023654:	f7f9 fc1a 	bl	801ce8c <ucdr_init_buffer>
 8023658:	a906      	add	r1, sp, #24
 802365a:	a80b      	add	r0, sp, #44	@ 0x2c
 802365c:	f002 fc24 	bl	8025ea8 <uxr_serialize_OBJK_Topic_Binary>
 8023660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023662:	4628      	mov	r0, r5
 8023664:	9600      	str	r6, [sp, #0]
 8023666:	9316      	str	r3, [sp, #88]	@ 0x58
 8023668:	b29b      	uxth	r3, r3
 802366a:	9401      	str	r4, [sp, #4]
 802366c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8023670:	f7ff ff70 	bl	8023554 <uxr_common_create_entity>
 8023674:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8023678:	bd70      	pop	{r4, r5, r6, pc}
 802367a:	bf00      	nop

0802367c <uxr_buffer_create_subscriber_bin>:
 802367c:	b570      	push	{r4, r5, r6, lr}
 802367e:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8023682:	4605      	mov	r5, r0
 8023684:	4618      	mov	r0, r3
 8023686:	9105      	str	r1, [sp, #20]
 8023688:	a992      	add	r1, sp, #584	@ 0x248
 802368a:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 802368e:	ac0e      	add	r4, sp, #56	@ 0x38
 8023690:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023694:	2304      	movs	r3, #4
 8023696:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 802369a:	f000 f977 	bl	802398c <uxr_object_id_to_raw>
 802369e:	2300      	movs	r3, #0
 80236a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80236a4:	a912      	add	r1, sp, #72	@ 0x48
 80236a6:	a806      	add	r0, sp, #24
 80236a8:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80236ac:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80236b0:	2303      	movs	r3, #3
 80236b2:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80236b6:	f7f9 fbe9 	bl	801ce8c <ucdr_init_buffer>
 80236ba:	a993      	add	r1, sp, #588	@ 0x24c
 80236bc:	a806      	add	r0, sp, #24
 80236be:	f002 fca7 	bl	8026010 <uxr_serialize_OBJK_Subscriber_Binary>
 80236c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80236c4:	4628      	mov	r0, r5
 80236c6:	9600      	str	r6, [sp, #0]
 80236c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80236ca:	b29b      	uxth	r3, r3
 80236cc:	9401      	str	r4, [sp, #4]
 80236ce:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80236d2:	f7ff ff3f 	bl	8023554 <uxr_common_create_entity>
 80236d6:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 80236da:	bd70      	pop	{r4, r5, r6, pc}

080236dc <uxr_buffer_create_datareader_bin>:
 80236dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80236e0:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80236e4:	4606      	mov	r6, r0
 80236e6:	4618      	mov	r0, r3
 80236e8:	2703      	movs	r7, #3
 80236ea:	ac1f      	add	r4, sp, #124	@ 0x7c
 80236ec:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 80236f0:	9105      	str	r1, [sp, #20]
 80236f2:	a9a3      	add	r1, sp, #652	@ 0x28c
 80236f4:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 80236f8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80236fc:	2306      	movs	r3, #6
 80236fe:	7123      	strb	r3, [r4, #4]
 8023700:	f000 f944 	bl	802398c <uxr_object_id_to_raw>
 8023704:	a90e      	add	r1, sp, #56	@ 0x38
 8023706:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8023708:	7227      	strb	r7, [r4, #8]
 802370a:	f000 f93f 	bl	802398c <uxr_object_id_to_raw>
 802370e:	2300      	movs	r3, #0
 8023710:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8023714:	3d00      	subs	r5, #0
 8023716:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 802371a:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 802371e:	bf18      	it	ne
 8023720:	2501      	movne	r5, #1
 8023722:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8023726:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 802372a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 802372e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8023732:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8023736:	2301      	movs	r3, #1
 8023738:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 802373c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8023740:	bb8a      	cbnz	r2, 80237a6 <uxr_buffer_create_datareader_bin+0xca>
 8023742:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8023746:	f04f 0c13 	mov.w	ip, #19
 802374a:	250b      	movs	r5, #11
 802374c:	2221      	movs	r2, #33	@ 0x21
 802374e:	2111      	movs	r1, #17
 8023750:	2009      	movs	r0, #9
 8023752:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8023756:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 802375a:	b923      	cbnz	r3, 8023766 <uxr_buffer_create_datareader_bin+0x8a>
 802375c:	4672      	mov	r2, lr
 802375e:	4661      	mov	r1, ip
 8023760:	4628      	mov	r0, r5
 8023762:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8023766:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 802376a:	2b01      	cmp	r3, #1
 802376c:	d025      	beq.n	80237ba <uxr_buffer_create_datareader_bin+0xde>
 802376e:	2b03      	cmp	r3, #3
 8023770:	d029      	beq.n	80237c6 <uxr_buffer_create_datareader_bin+0xea>
 8023772:	b32b      	cbz	r3, 80237c0 <uxr_buffer_create_datareader_bin+0xe4>
 8023774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8023778:	a923      	add	r1, sp, #140	@ 0x8c
 802377a:	a806      	add	r0, sp, #24
 802377c:	f7f9 fb86 	bl	801ce8c <ucdr_init_buffer>
 8023780:	a90e      	add	r1, sp, #56	@ 0x38
 8023782:	a806      	add	r0, sp, #24
 8023784:	f002 fcba 	bl	80260fc <uxr_serialize_OBJK_DataReader_Binary>
 8023788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802378a:	f8cd 8000 	str.w	r8, [sp]
 802378e:	4630      	mov	r0, r6
 8023790:	9401      	str	r4, [sp, #4]
 8023792:	60e3      	str	r3, [r4, #12]
 8023794:	b29b      	uxth	r3, r3
 8023796:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802379a:	f7ff fedb 	bl	8023554 <uxr_common_create_entity>
 802379e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80237a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80237a6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80237aa:	f04f 0c12 	mov.w	ip, #18
 80237ae:	250a      	movs	r5, #10
 80237b0:	2220      	movs	r2, #32
 80237b2:	2110      	movs	r1, #16
 80237b4:	2008      	movs	r0, #8
 80237b6:	2702      	movs	r7, #2
 80237b8:	e7cd      	b.n	8023756 <uxr_buffer_create_datareader_bin+0x7a>
 80237ba:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80237be:	e7d9      	b.n	8023774 <uxr_buffer_create_datareader_bin+0x98>
 80237c0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80237c4:	e7d6      	b.n	8023774 <uxr_buffer_create_datareader_bin+0x98>
 80237c6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80237ca:	e7d3      	b.n	8023774 <uxr_buffer_create_datareader_bin+0x98>

080237cc <get_custom_error>:
 80237cc:	4b01      	ldr	r3, [pc, #4]	@ (80237d4 <get_custom_error+0x8>)
 80237ce:	7818      	ldrb	r0, [r3, #0]
 80237d0:	4770      	bx	lr
 80237d2:	bf00      	nop
 80237d4:	20047174 	.word	0x20047174

080237d8 <recv_custom_msg>:
 80237d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237dc:	4693      	mov	fp, r2
 80237de:	b089      	sub	sp, #36	@ 0x24
 80237e0:	2200      	movs	r2, #0
 80237e2:	4604      	mov	r4, r0
 80237e4:	468a      	mov	sl, r1
 80237e6:	9305      	str	r3, [sp, #20]
 80237e8:	f88d 201e 	strb.w	r2, [sp, #30]
 80237ec:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80237f0:	b322      	cbz	r2, 802383c <recv_custom_msg+0x64>
 80237f2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80237f6:	f10d 081f 	add.w	r8, sp, #31
 80237fa:	af05      	add	r7, sp, #20
 80237fc:	f10d 061e 	add.w	r6, sp, #30
 8023800:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8023804:	e002      	b.n	802380c <recv_custom_msg+0x34>
 8023806:	9b05      	ldr	r3, [sp, #20]
 8023808:	2b00      	cmp	r3, #0
 802380a:	dd0f      	ble.n	802382c <recv_custom_msg+0x54>
 802380c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8023810:	4623      	mov	r3, r4
 8023812:	4622      	mov	r2, r4
 8023814:	4648      	mov	r0, r9
 8023816:	e9cd 7802 	strd	r7, r8, [sp, #8]
 802381a:	e9cd 5600 	strd	r5, r6, [sp]
 802381e:	f001 fc71 	bl	8025104 <uxr_read_framed_msg>
 8023822:	2800      	cmp	r0, #0
 8023824:	d0ef      	beq.n	8023806 <recv_custom_msg+0x2e>
 8023826:	f89d 301e 	ldrb.w	r3, [sp, #30]
 802382a:	b1b3      	cbz	r3, 802385a <recv_custom_msg+0x82>
 802382c:	4b0f      	ldr	r3, [pc, #60]	@ (802386c <recv_custom_msg+0x94>)
 802382e:	2000      	movs	r0, #0
 8023830:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8023834:	701a      	strb	r2, [r3, #0]
 8023836:	b009      	add	sp, #36	@ 0x24
 8023838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802383c:	f10d 021f 	add.w	r2, sp, #31
 8023840:	4601      	mov	r1, r0
 8023842:	9200      	str	r2, [sp, #0]
 8023844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8023848:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 802384c:	47a8      	blx	r5
 802384e:	2800      	cmp	r0, #0
 8023850:	d0ec      	beq.n	802382c <recv_custom_msg+0x54>
 8023852:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8023856:	2b00      	cmp	r3, #0
 8023858:	d1e8      	bne.n	802382c <recv_custom_msg+0x54>
 802385a:	f8cb 0000 	str.w	r0, [fp]
 802385e:	2001      	movs	r0, #1
 8023860:	f8ca 4000 	str.w	r4, [sl]
 8023864:	b009      	add	sp, #36	@ 0x24
 8023866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802386a:	bf00      	nop
 802386c:	20047174 	.word	0x20047174

08023870 <send_custom_msg>:
 8023870:	b530      	push	{r4, r5, lr}
 8023872:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8023876:	b087      	sub	sp, #28
 8023878:	4614      	mov	r4, r2
 802387a:	b995      	cbnz	r5, 80238a2 <send_custom_msg+0x32>
 802387c:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8023880:	f10d 0317 	add.w	r3, sp, #23
 8023884:	47a8      	blx	r5
 8023886:	1e03      	subs	r3, r0, #0
 8023888:	bf18      	it	ne
 802388a:	2301      	movne	r3, #1
 802388c:	42a0      	cmp	r0, r4
 802388e:	bf18      	it	ne
 8023890:	2300      	movne	r3, #0
 8023892:	b91b      	cbnz	r3, 802389c <send_custom_msg+0x2c>
 8023894:	4a0a      	ldr	r2, [pc, #40]	@ (80238c0 <send_custom_msg+0x50>)
 8023896:	f89d 1017 	ldrb.w	r1, [sp, #23]
 802389a:	7011      	strb	r1, [r2, #0]
 802389c:	4618      	mov	r0, r3
 802389e:	b007      	add	sp, #28
 80238a0:	bd30      	pop	{r4, r5, pc}
 80238a2:	460b      	mov	r3, r1
 80238a4:	2200      	movs	r2, #0
 80238a6:	f10d 0117 	add.w	r1, sp, #23
 80238aa:	9400      	str	r4, [sp, #0]
 80238ac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80238b0:	4602      	mov	r2, r0
 80238b2:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80238b6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80238ba:	f001 fa45 	bl	8024d48 <uxr_write_framed_msg>
 80238be:	e7e2      	b.n	8023886 <send_custom_msg+0x16>
 80238c0:	20047174 	.word	0x20047174

080238c4 <uxr_set_custom_transport_callbacks>:
 80238c4:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80238c8:	9901      	ldr	r1, [sp, #4]
 80238ca:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80238ce:	9b00      	ldr	r3, [sp, #0]
 80238d0:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 80238d4:	4770      	bx	lr
 80238d6:	bf00      	nop

080238d8 <uxr_init_custom_transport>:
 80238d8:	b538      	push	{r3, r4, r5, lr}
 80238da:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80238de:	b303      	cbz	r3, 8023922 <uxr_init_custom_transport+0x4a>
 80238e0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80238e4:	4604      	mov	r4, r0
 80238e6:	b1e2      	cbz	r2, 8023922 <uxr_init_custom_transport+0x4a>
 80238e8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80238ec:	b1ca      	cbz	r2, 8023922 <uxr_init_custom_transport+0x4a>
 80238ee:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80238f2:	b1b2      	cbz	r2, 8023922 <uxr_init_custom_transport+0x4a>
 80238f4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80238f8:	4798      	blx	r3
 80238fa:	4605      	mov	r5, r0
 80238fc:	b188      	cbz	r0, 8023922 <uxr_init_custom_transport+0x4a>
 80238fe:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8023902:	b98b      	cbnz	r3, 8023928 <uxr_init_custom_transport+0x50>
 8023904:	4b0b      	ldr	r3, [pc, #44]	@ (8023934 <uxr_init_custom_transport+0x5c>)
 8023906:	4628      	mov	r0, r5
 8023908:	490b      	ldr	r1, [pc, #44]	@ (8023938 <uxr_init_custom_transport+0x60>)
 802390a:	4a0c      	ldr	r2, [pc, #48]	@ (802393c <uxr_init_custom_transport+0x64>)
 802390c:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8023910:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8023914:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8023918:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 802391c:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8023920:	bd38      	pop	{r3, r4, r5, pc}
 8023922:	2500      	movs	r5, #0
 8023924:	4628      	mov	r0, r5
 8023926:	bd38      	pop	{r3, r4, r5, pc}
 8023928:	2100      	movs	r1, #0
 802392a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 802392e:	f001 fa05 	bl	8024d3c <uxr_init_framing_io>
 8023932:	e7e7      	b.n	8023904 <uxr_init_custom_transport+0x2c>
 8023934:	080237d9 	.word	0x080237d9
 8023938:	08023871 	.word	0x08023871
 802393c:	080237cd 	.word	0x080237cd

08023940 <uxr_close_custom_transport>:
 8023940:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8023944:	4718      	bx	r3
 8023946:	bf00      	nop

08023948 <uxr_object_id>:
 8023948:	b082      	sub	sp, #8
 802394a:	2300      	movs	r3, #0
 802394c:	f88d 1006 	strb.w	r1, [sp, #6]
 8023950:	f360 030f 	bfi	r3, r0, #0, #16
 8023954:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8023958:	f362 431f 	bfi	r3, r2, #16, #16
 802395c:	4618      	mov	r0, r3
 802395e:	b002      	add	sp, #8
 8023960:	4770      	bx	lr
 8023962:	bf00      	nop

08023964 <uxr_object_id_from_raw>:
 8023964:	7843      	ldrb	r3, [r0, #1]
 8023966:	b082      	sub	sp, #8
 8023968:	7801      	ldrb	r1, [r0, #0]
 802396a:	2000      	movs	r0, #0
 802396c:	091a      	lsrs	r2, r3, #4
 802396e:	f003 030f 	and.w	r3, r3, #15
 8023972:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8023976:	f88d 3006 	strb.w	r3, [sp, #6]
 802397a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 802397e:	f362 000f 	bfi	r0, r2, #0, #16
 8023982:	f363 401f 	bfi	r0, r3, #16, #16
 8023986:	b002      	add	sp, #8
 8023988:	4770      	bx	lr
 802398a:	bf00      	nop

0802398c <uxr_object_id_to_raw>:
 802398c:	4602      	mov	r2, r0
 802398e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8023992:	b082      	sub	sp, #8
 8023994:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8023998:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 802399c:	f881 c000 	strb.w	ip, [r1]
 80239a0:	7048      	strb	r0, [r1, #1]
 80239a2:	b002      	add	sp, #8
 80239a4:	4770      	bx	lr
 80239a6:	bf00      	nop

080239a8 <uxr_buffer_request_data>:
 80239a8:	b530      	push	{r4, r5, lr}
 80239aa:	b095      	sub	sp, #84	@ 0x54
 80239ac:	4604      	mov	r4, r0
 80239ae:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80239b0:	9303      	str	r3, [sp, #12]
 80239b2:	2d00      	cmp	r5, #0
 80239b4:	f88d 301c 	strb.w	r3, [sp, #28]
 80239b8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80239bc:	f04f 0200 	mov.w	r2, #0
 80239c0:	bf14      	ite	ne
 80239c2:	2101      	movne	r1, #1
 80239c4:	4611      	moveq	r1, r2
 80239c6:	f88d 201d 	strb.w	r2, [sp, #29]
 80239ca:	f88d 201e 	strb.w	r2, [sp, #30]
 80239ce:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80239d2:	d021      	beq.n	8023a18 <uxr_buffer_request_data+0x70>
 80239d4:	686b      	ldr	r3, [r5, #4]
 80239d6:	2210      	movs	r2, #16
 80239d8:	6829      	ldr	r1, [r5, #0]
 80239da:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80239de:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 80239e2:	2308      	movs	r3, #8
 80239e4:	2100      	movs	r1, #0
 80239e6:	4620      	mov	r0, r4
 80239e8:	e9cd 3100 	strd	r3, r1, [sp]
 80239ec:	ab0c      	add	r3, sp, #48	@ 0x30
 80239ee:	9905      	ldr	r1, [sp, #20]
 80239f0:	f001 f836 	bl	8024a60 <uxr_prepare_stream_to_write_submessage>
 80239f4:	b918      	cbnz	r0, 80239fe <uxr_buffer_request_data+0x56>
 80239f6:	4604      	mov	r4, r0
 80239f8:	4620      	mov	r0, r4
 80239fa:	b015      	add	sp, #84	@ 0x54
 80239fc:	bd30      	pop	{r4, r5, pc}
 80239fe:	9904      	ldr	r1, [sp, #16]
 8023a00:	aa06      	add	r2, sp, #24
 8023a02:	4620      	mov	r0, r4
 8023a04:	f001 f968 	bl	8024cd8 <uxr_init_base_object_request>
 8023a08:	4604      	mov	r4, r0
 8023a0a:	a906      	add	r1, sp, #24
 8023a0c:	a80c      	add	r0, sp, #48	@ 0x30
 8023a0e:	f002 feb3 	bl	8026778 <uxr_serialize_READ_DATA_Payload>
 8023a12:	4620      	mov	r0, r4
 8023a14:	b015      	add	sp, #84	@ 0x54
 8023a16:	bd30      	pop	{r4, r5, pc}
 8023a18:	2208      	movs	r2, #8
 8023a1a:	e7e2      	b.n	80239e2 <uxr_buffer_request_data+0x3a>

08023a1c <uxr_buffer_cancel_data>:
 8023a1c:	b510      	push	{r4, lr}
 8023a1e:	2300      	movs	r3, #0
 8023a20:	b094      	sub	sp, #80	@ 0x50
 8023a22:	4604      	mov	r4, r0
 8023a24:	9205      	str	r2, [sp, #20]
 8023a26:	9301      	str	r3, [sp, #4]
 8023a28:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023a2c:	f88d 301e 	strb.w	r3, [sp, #30]
 8023a30:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8023a34:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8023a38:	2308      	movs	r3, #8
 8023a3a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023a3e:	2201      	movs	r2, #1
 8023a40:	9300      	str	r3, [sp, #0]
 8023a42:	ab0c      	add	r3, sp, #48	@ 0x30
 8023a44:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8023a48:	2210      	movs	r2, #16
 8023a4a:	f001 f809 	bl	8024a60 <uxr_prepare_stream_to_write_submessage>
 8023a4e:	b918      	cbnz	r0, 8023a58 <uxr_buffer_cancel_data+0x3c>
 8023a50:	4604      	mov	r4, r0
 8023a52:	4620      	mov	r0, r4
 8023a54:	b014      	add	sp, #80	@ 0x50
 8023a56:	bd10      	pop	{r4, pc}
 8023a58:	9905      	ldr	r1, [sp, #20]
 8023a5a:	aa06      	add	r2, sp, #24
 8023a5c:	4620      	mov	r0, r4
 8023a5e:	f001 f93b 	bl	8024cd8 <uxr_init_base_object_request>
 8023a62:	4604      	mov	r4, r0
 8023a64:	a906      	add	r1, sp, #24
 8023a66:	a80c      	add	r0, sp, #48	@ 0x30
 8023a68:	f002 fe86 	bl	8026778 <uxr_serialize_READ_DATA_Payload>
 8023a6c:	4620      	mov	r0, r4
 8023a6e:	b014      	add	sp, #80	@ 0x50
 8023a70:	bd10      	pop	{r4, pc}
 8023a72:	bf00      	nop

08023a74 <read_submessage_format>:
 8023a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023a78:	b095      	sub	sp, #84	@ 0x54
 8023a7a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8023a7e:	b113      	cbz	r3, 8023a86 <read_submessage_format+0x12>
 8023a80:	b015      	add	sp, #84	@ 0x54
 8023a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023a86:	4606      	mov	r6, r0
 8023a88:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8023a8a:	460c      	mov	r4, r1
 8023a8c:	4615      	mov	r5, r2
 8023a8e:	9004      	str	r0, [sp, #16]
 8023a90:	4699      	mov	r9, r3
 8023a92:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8023a94:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8023a98:	9005      	str	r0, [sp, #20]
 8023a9a:	a80c      	add	r0, sp, #48	@ 0x30
 8023a9c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8023aa0:	1a52      	subs	r2, r2, r1
 8023aa2:	f7f9 f9f3 	bl	801ce8c <ucdr_init_buffer>
 8023aa6:	a80c      	add	r0, sp, #48	@ 0x30
 8023aa8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8023aac:	f7f9 f9c2 	bl	801ce34 <ucdr_set_on_full_buffer_callback>
 8023ab0:	69e2      	ldr	r2, [r4, #28]
 8023ab2:	b19a      	cbz	r2, 8023adc <read_submessage_format+0x68>
 8023ab4:	f1b8 0f07 	cmp.w	r8, #7
 8023ab8:	f882 9014 	strb.w	r9, [r2, #20]
 8023abc:	d040      	beq.n	8023b40 <read_submessage_format+0xcc>
 8023abe:	f1b8 0f08 	cmp.w	r8, #8
 8023ac2:	d02e      	beq.n	8023b22 <read_submessage_format+0xae>
 8023ac4:	f1b8 0f06 	cmp.w	r8, #6
 8023ac8:	d011      	beq.n	8023aee <read_submessage_format+0x7a>
 8023aca:	2301      	movs	r3, #1
 8023acc:	7513      	strb	r3, [r2, #20]
 8023ace:	4629      	mov	r1, r5
 8023ad0:	4620      	mov	r0, r4
 8023ad2:	f7f9 fa2f 	bl	801cf34 <ucdr_advance_buffer>
 8023ad6:	b015      	add	sp, #84	@ 0x54
 8023ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023adc:	f1b8 0f07 	cmp.w	r8, #7
 8023ae0:	d02e      	beq.n	8023b40 <read_submessage_format+0xcc>
 8023ae2:	f1b8 0f08 	cmp.w	r8, #8
 8023ae6:	d01c      	beq.n	8023b22 <read_submessage_format+0xae>
 8023ae8:	f1b8 0f06 	cmp.w	r8, #6
 8023aec:	d1ef      	bne.n	8023ace <read_submessage_format+0x5a>
 8023aee:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8023af2:	f1b8 0f00 	cmp.w	r8, #0
 8023af6:	d011      	beq.n	8023b1c <read_submessage_format+0xa8>
 8023af8:	ab0c      	add	r3, sp, #48	@ 0x30
 8023afa:	9501      	str	r5, [sp, #4]
 8023afc:	463a      	mov	r2, r7
 8023afe:	4630      	mov	r0, r6
 8023b00:	9300      	str	r3, [sp, #0]
 8023b02:	2306      	movs	r3, #6
 8023b04:	f88d 3016 	strb.w	r3, [sp, #22]
 8023b08:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8023b0c:	9302      	str	r3, [sp, #8]
 8023b0e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8023b12:	47c0      	blx	r8
 8023b14:	2301      	movs	r3, #1
 8023b16:	69e2      	ldr	r2, [r4, #28]
 8023b18:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8023b1c:	2a00      	cmp	r2, #0
 8023b1e:	d1d4      	bne.n	8023aca <read_submessage_format+0x56>
 8023b20:	e7d5      	b.n	8023ace <read_submessage_format+0x5a>
 8023b22:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8023b26:	2b00      	cmp	r3, #0
 8023b28:	d0f8      	beq.n	8023b1c <read_submessage_format+0xa8>
 8023b2a:	a80c      	add	r0, sp, #48	@ 0x30
 8023b2c:	a906      	add	r1, sp, #24
 8023b2e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8023b32:	f002 feed 	bl	8026910 <uxr_deserialize_SampleIdentity>
 8023b36:	b9a0      	cbnz	r0, 8023b62 <read_submessage_format+0xee>
 8023b38:	69e2      	ldr	r2, [r4, #28]
 8023b3a:	2a00      	cmp	r2, #0
 8023b3c:	d1c5      	bne.n	8023aca <read_submessage_format+0x56>
 8023b3e:	e7c6      	b.n	8023ace <read_submessage_format+0x5a>
 8023b40:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8023b44:	b13b      	cbz	r3, 8023b56 <read_submessage_format+0xe2>
 8023b46:	a906      	add	r1, sp, #24
 8023b48:	a80c      	add	r0, sp, #48	@ 0x30
 8023b4a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8023b4e:	f002 fbb3 	bl	80262b8 <uxr_deserialize_BaseObjectRequest>
 8023b52:	bb60      	cbnz	r0, 8023bae <read_submessage_format+0x13a>
 8023b54:	69e2      	ldr	r2, [r4, #28]
 8023b56:	68a3      	ldr	r3, [r4, #8]
 8023b58:	442b      	add	r3, r5
 8023b5a:	60a3      	str	r3, [r4, #8]
 8023b5c:	2a00      	cmp	r2, #0
 8023b5e:	d1b4      	bne.n	8023aca <read_submessage_format+0x56>
 8023b60:	e7b5      	b.n	8023ace <read_submessage_format+0x5a>
 8023b62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023b64:	a80c      	add	r0, sp, #48	@ 0x30
 8023b66:	eba8 0803 	sub.w	r8, r8, r3
 8023b6a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8023b6e:	44a8      	add	r8, r5
 8023b70:	1a52      	subs	r2, r2, r1
 8023b72:	f7f9 f98b 	bl	801ce8c <ucdr_init_buffer>
 8023b76:	a80c      	add	r0, sp, #48	@ 0x30
 8023b78:	fa1f f888 	uxth.w	r8, r8
 8023b7c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8023b80:	f7f9 f958 	bl	801ce34 <ucdr_set_on_full_buffer_callback>
 8023b84:	ab0c      	add	r3, sp, #48	@ 0x30
 8023b86:	2108      	movs	r1, #8
 8023b88:	f8cd 8004 	str.w	r8, [sp, #4]
 8023b8c:	9300      	str	r3, [sp, #0]
 8023b8e:	463a      	mov	r2, r7
 8023b90:	f88d 1016 	strb.w	r1, [sp, #22]
 8023b94:	ab06      	add	r3, sp, #24
 8023b96:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8023b9a:	4630      	mov	r0, r6
 8023b9c:	9102      	str	r1, [sp, #8]
 8023b9e:	9905      	ldr	r1, [sp, #20]
 8023ba0:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8023ba4:	47b8      	blx	r7
 8023ba6:	2301      	movs	r3, #1
 8023ba8:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8023bac:	e7c4      	b.n	8023b38 <read_submessage_format+0xc4>
 8023bae:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8023bb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023bb4:	a80c      	add	r0, sp, #48	@ 0x30
 8023bb6:	1a52      	subs	r2, r2, r1
 8023bb8:	eba8 0803 	sub.w	r8, r8, r3
 8023bbc:	f7f9 f966 	bl	801ce8c <ucdr_init_buffer>
 8023bc0:	a80c      	add	r0, sp, #48	@ 0x30
 8023bc2:	44a8      	add	r8, r5
 8023bc4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8023bc8:	f7f9 f934 	bl	801ce34 <ucdr_set_on_full_buffer_callback>
 8023bcc:	ab0c      	add	r3, sp, #48	@ 0x30
 8023bce:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8023bd2:	fa1f f888 	uxth.w	r8, r8
 8023bd6:	9300      	str	r3, [sp, #0]
 8023bd8:	463a      	mov	r2, r7
 8023bda:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8023bde:	4630      	mov	r0, r6
 8023be0:	f8cd 8004 	str.w	r8, [sp, #4]
 8023be4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8023be8:	2107      	movs	r1, #7
 8023bea:	f88d 1016 	strb.w	r1, [sp, #22]
 8023bee:	b29b      	uxth	r3, r3
 8023bf0:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8023bf4:	9102      	str	r1, [sp, #8]
 8023bf6:	9905      	ldr	r1, [sp, #20]
 8023bf8:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8023bfc:	47b8      	blx	r7
 8023bfe:	2301      	movs	r3, #1
 8023c00:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8023c04:	e7a6      	b.n	8023b54 <read_submessage_format+0xe0>
 8023c06:	bf00      	nop

08023c08 <on_get_fragmentation_info>:
 8023c08:	b500      	push	{lr}
 8023c0a:	b08b      	sub	sp, #44	@ 0x2c
 8023c0c:	4601      	mov	r1, r0
 8023c0e:	2204      	movs	r2, #4
 8023c10:	a802      	add	r0, sp, #8
 8023c12:	f7f9 f93b 	bl	801ce8c <ucdr_init_buffer>
 8023c16:	f10d 0305 	add.w	r3, sp, #5
 8023c1a:	f10d 0206 	add.w	r2, sp, #6
 8023c1e:	a901      	add	r1, sp, #4
 8023c20:	a802      	add	r0, sp, #8
 8023c22:	f001 fe5f 	bl	80258e4 <uxr_read_submessage_header>
 8023c26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8023c2a:	2b0d      	cmp	r3, #13
 8023c2c:	d003      	beq.n	8023c36 <on_get_fragmentation_info+0x2e>
 8023c2e:	2000      	movs	r0, #0
 8023c30:	b00b      	add	sp, #44	@ 0x2c
 8023c32:	f85d fb04 	ldr.w	pc, [sp], #4
 8023c36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8023c3a:	f013 0f02 	tst.w	r3, #2
 8023c3e:	bf14      	ite	ne
 8023c40:	2002      	movne	r0, #2
 8023c42:	2001      	moveq	r0, #1
 8023c44:	b00b      	add	sp, #44	@ 0x2c
 8023c46:	f85d fb04 	ldr.w	pc, [sp], #4
 8023c4a:	bf00      	nop

08023c4c <read_submessage_get_info>:
 8023c4c:	b570      	push	{r4, r5, r6, lr}
 8023c4e:	2500      	movs	r5, #0
 8023c50:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8023c54:	460e      	mov	r6, r1
 8023c56:	4604      	mov	r4, r0
 8023c58:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8023c5c:	4629      	mov	r1, r5
 8023c5e:	a810      	add	r0, sp, #64	@ 0x40
 8023c60:	9503      	str	r5, [sp, #12]
 8023c62:	9504      	str	r5, [sp, #16]
 8023c64:	f005 fcde 	bl	8029624 <memset>
 8023c68:	a903      	add	r1, sp, #12
 8023c6a:	4630      	mov	r0, r6
 8023c6c:	f002 fcc4 	bl	80265f8 <uxr_deserialize_GET_INFO_Payload>
 8023c70:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8023c74:	4620      	mov	r0, r4
 8023c76:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8023c7a:	f001 f825 	bl	8024cc8 <uxr_session_header_offset>
 8023c7e:	462b      	mov	r3, r5
 8023c80:	220c      	movs	r2, #12
 8023c82:	a905      	add	r1, sp, #20
 8023c84:	9000      	str	r0, [sp, #0]
 8023c86:	a808      	add	r0, sp, #32
 8023c88:	f7f9 f8ee 	bl	801ce68 <ucdr_init_buffer_origin_offset>
 8023c8c:	a910      	add	r1, sp, #64	@ 0x40
 8023c8e:	a808      	add	r0, sp, #32
 8023c90:	f002 fd26 	bl	80266e0 <uxr_serialize_INFO_Payload>
 8023c94:	9b08      	ldr	r3, [sp, #32]
 8023c96:	462a      	mov	r2, r5
 8023c98:	4629      	mov	r1, r5
 8023c9a:	4620      	mov	r0, r4
 8023c9c:	f000 ffc0 	bl	8024c20 <uxr_stamp_session_header>
 8023ca0:	a808      	add	r0, sp, #32
 8023ca2:	f7f9 f921 	bl	801cee8 <ucdr_buffer_length>
 8023ca6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8023ca8:	4602      	mov	r2, r0
 8023caa:	a905      	add	r1, sp, #20
 8023cac:	e9d3 0400 	ldrd	r0, r4, [r3]
 8023cb0:	47a0      	blx	r4
 8023cb2:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8023cb6:	bd70      	pop	{r4, r5, r6, pc}

08023cb8 <write_submessage_acknack.isra.0>:
 8023cb8:	b570      	push	{r4, r5, r6, lr}
 8023cba:	b092      	sub	sp, #72	@ 0x48
 8023cbc:	4605      	mov	r5, r0
 8023cbe:	460e      	mov	r6, r1
 8023cc0:	4614      	mov	r4, r2
 8023cc2:	f001 f801 	bl	8024cc8 <uxr_session_header_offset>
 8023cc6:	a905      	add	r1, sp, #20
 8023cc8:	9000      	str	r0, [sp, #0]
 8023cca:	2300      	movs	r3, #0
 8023ccc:	a80a      	add	r0, sp, #40	@ 0x28
 8023cce:	2211      	movs	r2, #17
 8023cd0:	f7f9 f8ca 	bl	801ce68 <ucdr_init_buffer_origin_offset>
 8023cd4:	2218      	movs	r2, #24
 8023cd6:	2300      	movs	r3, #0
 8023cd8:	210a      	movs	r1, #10
 8023cda:	fb02 5404 	mla	r4, r2, r4, r5
 8023cde:	a80a      	add	r0, sp, #40	@ 0x28
 8023ce0:	2205      	movs	r2, #5
 8023ce2:	3450      	adds	r4, #80	@ 0x50
 8023ce4:	f001 fde4 	bl	80258b0 <uxr_buffer_submessage_header>
 8023ce8:	a903      	add	r1, sp, #12
 8023cea:	4620      	mov	r0, r4
 8023cec:	f003 fec4 	bl	8027a78 <uxr_compute_acknack>
 8023cf0:	ba40      	rev16	r0, r0
 8023cf2:	a903      	add	r1, sp, #12
 8023cf4:	f88d 6010 	strb.w	r6, [sp, #16]
 8023cf8:	f8ad 000e 	strh.w	r0, [sp, #14]
 8023cfc:	a80a      	add	r0, sp, #40	@ 0x28
 8023cfe:	f002 fd61 	bl	80267c4 <uxr_serialize_ACKNACK_Payload>
 8023d02:	2200      	movs	r2, #0
 8023d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023d06:	4628      	mov	r0, r5
 8023d08:	4611      	mov	r1, r2
 8023d0a:	f000 ff89 	bl	8024c20 <uxr_stamp_session_header>
 8023d0e:	a80a      	add	r0, sp, #40	@ 0x28
 8023d10:	f7f9 f8ea 	bl	801cee8 <ucdr_buffer_length>
 8023d14:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8023d16:	4602      	mov	r2, r0
 8023d18:	a905      	add	r1, sp, #20
 8023d1a:	e9d3 0400 	ldrd	r0, r4, [r3]
 8023d1e:	47a0      	blx	r4
 8023d20:	b012      	add	sp, #72	@ 0x48
 8023d22:	bd70      	pop	{r4, r5, r6, pc}
 8023d24:	0000      	movs	r0, r0
	...

08023d28 <uxr_init_session>:
 8023d28:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8023d60 <uxr_init_session+0x38>
 8023d2c:	2300      	movs	r3, #0
 8023d2e:	b510      	push	{r4, lr}
 8023d30:	4604      	mov	r4, r0
 8023d32:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8023d36:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8023d3a:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8023d3e:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8023d42:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8023d46:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8023d4a:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8023d4e:	2181      	movs	r1, #129	@ 0x81
 8023d50:	f000 feca 	bl	8024ae8 <uxr_init_session_info>
 8023d54:	f104 0008 	add.w	r0, r4, #8
 8023d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023d5c:	f001 bcc4 	b.w	80256e8 <uxr_init_stream_storage>
	...

08023d68 <uxr_set_status_callback>:
 8023d68:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8023d6c:	4770      	bx	lr
 8023d6e:	bf00      	nop

08023d70 <uxr_set_topic_callback>:
 8023d70:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8023d74:	4770      	bx	lr
 8023d76:	bf00      	nop

08023d78 <uxr_set_request_callback>:
 8023d78:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8023d7c:	4770      	bx	lr
 8023d7e:	bf00      	nop

08023d80 <uxr_set_reply_callback>:
 8023d80:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8023d84:	4770      	bx	lr
 8023d86:	bf00      	nop

08023d88 <uxr_create_output_best_effort_stream>:
 8023d88:	b510      	push	{r4, lr}
 8023d8a:	4604      	mov	r4, r0
 8023d8c:	b084      	sub	sp, #16
 8023d8e:	e9cd 2100 	strd	r2, r1, [sp]
 8023d92:	f000 ff99 	bl	8024cc8 <uxr_session_header_offset>
 8023d96:	4603      	mov	r3, r0
 8023d98:	f104 0008 	add.w	r0, r4, #8
 8023d9c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8023da0:	b004      	add	sp, #16
 8023da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023da6:	f001 bce5 	b.w	8025774 <uxr_add_output_best_effort_buffer>
 8023daa:	bf00      	nop

08023dac <uxr_create_output_reliable_stream>:
 8023dac:	b530      	push	{r4, r5, lr}
 8023dae:	b089      	sub	sp, #36	@ 0x24
 8023db0:	4604      	mov	r4, r0
 8023db2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8023db6:	9303      	str	r3, [sp, #12]
 8023db8:	f000 ff86 	bl	8024cc8 <uxr_session_header_offset>
 8023dbc:	4605      	mov	r5, r0
 8023dbe:	9905      	ldr	r1, [sp, #20]
 8023dc0:	f104 0008 	add.w	r0, r4, #8
 8023dc4:	9500      	str	r5, [sp, #0]
 8023dc6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8023dca:	f001 fce7 	bl	802579c <uxr_add_output_reliable_buffer>
 8023dce:	2200      	movs	r2, #0
 8023dd0:	fa5f fc80 	uxtb.w	ip, r0
 8023dd4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8023dd8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8023ddc:	0e03      	lsrs	r3, r0, #24
 8023dde:	f36c 0207 	bfi	r2, ip, #0, #8
 8023de2:	f364 220f 	bfi	r2, r4, #8, #8
 8023de6:	f361 4217 	bfi	r2, r1, #16, #8
 8023dea:	f363 621f 	bfi	r2, r3, #24, #8
 8023dee:	4610      	mov	r0, r2
 8023df0:	b009      	add	sp, #36	@ 0x24
 8023df2:	bd30      	pop	{r4, r5, pc}

08023df4 <uxr_create_input_best_effort_stream>:
 8023df4:	b082      	sub	sp, #8
 8023df6:	3008      	adds	r0, #8
 8023df8:	b002      	add	sp, #8
 8023dfa:	f001 bce9 	b.w	80257d0 <uxr_add_input_best_effort_buffer>
 8023dfe:	bf00      	nop

08023e00 <uxr_create_input_reliable_stream>:
 8023e00:	b510      	push	{r4, lr}
 8023e02:	4c0c      	ldr	r4, [pc, #48]	@ (8023e34 <uxr_create_input_reliable_stream+0x34>)
 8023e04:	b084      	sub	sp, #16
 8023e06:	3008      	adds	r0, #8
 8023e08:	9400      	str	r4, [sp, #0]
 8023e0a:	f001 fcf7 	bl	80257fc <uxr_add_input_reliable_buffer>
 8023e0e:	2200      	movs	r2, #0
 8023e10:	fa5f fe80 	uxtb.w	lr, r0
 8023e14:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8023e18:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8023e1c:	0e03      	lsrs	r3, r0, #24
 8023e1e:	f36e 0207 	bfi	r2, lr, #0, #8
 8023e22:	f36c 220f 	bfi	r2, ip, #8, #8
 8023e26:	f361 4217 	bfi	r2, r1, #16, #8
 8023e2a:	f363 621f 	bfi	r2, r3, #24, #8
 8023e2e:	4610      	mov	r0, r2
 8023e30:	b004      	add	sp, #16
 8023e32:	bd10      	pop	{r4, pc}
 8023e34:	08023c09 	.word	0x08023c09

08023e38 <uxr_epoch_nanos>:
 8023e38:	b510      	push	{r4, lr}
 8023e3a:	4604      	mov	r4, r0
 8023e3c:	f001 fd9a 	bl	8025974 <uxr_nanos>
 8023e40:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8023e44:	1ac0      	subs	r0, r0, r3
 8023e46:	eb61 0102 	sbc.w	r1, r1, r2
 8023e4a:	bd10      	pop	{r4, pc}

08023e4c <uxr_flash_output_streams>:
 8023e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023e50:	7e03      	ldrb	r3, [r0, #24]
 8023e52:	b084      	sub	sp, #16
 8023e54:	4604      	mov	r4, r0
 8023e56:	b1fb      	cbz	r3, 8023e98 <uxr_flash_output_streams+0x4c>
 8023e58:	f04f 0900 	mov.w	r9, #0
 8023e5c:	f10d 0802 	add.w	r8, sp, #2
 8023e60:	af03      	add	r7, sp, #12
 8023e62:	ae02      	add	r6, sp, #8
 8023e64:	4648      	mov	r0, r9
 8023e66:	2201      	movs	r2, #1
 8023e68:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8023e6c:	4611      	mov	r1, r2
 8023e6e:	3508      	adds	r5, #8
 8023e70:	f001 fbe0 	bl	8025634 <uxr_stream_id>
 8023e74:	4684      	mov	ip, r0
 8023e76:	4643      	mov	r3, r8
 8023e78:	463a      	mov	r2, r7
 8023e7a:	4631      	mov	r1, r6
 8023e7c:	4628      	mov	r0, r5
 8023e7e:	f8cd c004 	str.w	ip, [sp, #4]
 8023e82:	f003 fe83 	bl	8027b8c <uxr_prepare_best_effort_buffer_to_send>
 8023e86:	2800      	cmp	r0, #0
 8023e88:	d13d      	bne.n	8023f06 <uxr_flash_output_streams+0xba>
 8023e8a:	f109 0901 	add.w	r9, r9, #1
 8023e8e:	7e23      	ldrb	r3, [r4, #24]
 8023e90:	fa5f f089 	uxtb.w	r0, r9
 8023e94:	4283      	cmp	r3, r0
 8023e96:	d8e6      	bhi.n	8023e66 <uxr_flash_output_streams+0x1a>
 8023e98:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8023e9c:	b383      	cbz	r3, 8023f00 <uxr_flash_output_streams+0xb4>
 8023e9e:	f04f 0900 	mov.w	r9, #0
 8023ea2:	f10d 0802 	add.w	r8, sp, #2
 8023ea6:	af03      	add	r7, sp, #12
 8023ea8:	ae02      	add	r6, sp, #8
 8023eaa:	4648      	mov	r0, r9
 8023eac:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8023eb0:	2201      	movs	r2, #1
 8023eb2:	2102      	movs	r1, #2
 8023eb4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8023eb8:	f001 fbbc 	bl	8025634 <uxr_stream_id>
 8023ebc:	9001      	str	r0, [sp, #4]
 8023ebe:	3520      	adds	r5, #32
 8023ec0:	e00c      	b.n	8023edc <uxr_flash_output_streams+0x90>
 8023ec2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8023ec6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8023eca:	9b02      	ldr	r3, [sp, #8]
 8023ecc:	f000 fea8 	bl	8024c20 <uxr_stamp_session_header>
 8023ed0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8023ed2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8023ed6:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8023eda:	47d0      	blx	sl
 8023edc:	4643      	mov	r3, r8
 8023ede:	463a      	mov	r2, r7
 8023ee0:	4631      	mov	r1, r6
 8023ee2:	4628      	mov	r0, r5
 8023ee4:	f004 f874 	bl	8027fd0 <uxr_prepare_next_reliable_buffer_to_send>
 8023ee8:	4603      	mov	r3, r0
 8023eea:	4620      	mov	r0, r4
 8023eec:	2b00      	cmp	r3, #0
 8023eee:	d1e8      	bne.n	8023ec2 <uxr_flash_output_streams+0x76>
 8023ef0:	f109 0901 	add.w	r9, r9, #1
 8023ef4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8023ef8:	fa5f f089 	uxtb.w	r0, r9
 8023efc:	4283      	cmp	r3, r0
 8023efe:	d8d5      	bhi.n	8023eac <uxr_flash_output_streams+0x60>
 8023f00:	b004      	add	sp, #16
 8023f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023f06:	9b02      	ldr	r3, [sp, #8]
 8023f08:	4620      	mov	r0, r4
 8023f0a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8023f0e:	f109 0901 	add.w	r9, r9, #1
 8023f12:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8023f16:	f000 fe83 	bl	8024c20 <uxr_stamp_session_header>
 8023f1a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8023f1c:	9a03      	ldr	r2, [sp, #12]
 8023f1e:	685d      	ldr	r5, [r3, #4]
 8023f20:	6818      	ldr	r0, [r3, #0]
 8023f22:	9902      	ldr	r1, [sp, #8]
 8023f24:	47a8      	blx	r5
 8023f26:	7e23      	ldrb	r3, [r4, #24]
 8023f28:	fa5f f089 	uxtb.w	r0, r9
 8023f2c:	4283      	cmp	r3, r0
 8023f2e:	d89a      	bhi.n	8023e66 <uxr_flash_output_streams+0x1a>
 8023f30:	e7b2      	b.n	8023e98 <uxr_flash_output_streams+0x4c>
 8023f32:	bf00      	nop

08023f34 <read_submessage_info>:
 8023f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f38:	460d      	mov	r5, r1
 8023f3a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8023f3e:	4606      	mov	r6, r0
 8023f40:	4669      	mov	r1, sp
 8023f42:	4628      	mov	r0, r5
 8023f44:	f002 fa6a 	bl	802641c <uxr_deserialize_BaseObjectReply>
 8023f48:	4604      	mov	r4, r0
 8023f4a:	a902      	add	r1, sp, #8
 8023f4c:	4628      	mov	r0, r5
 8023f4e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8023f52:	f7fe fb6f 	bl	8022634 <ucdr_deserialize_bool>
 8023f56:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8023f5a:	4004      	ands	r4, r0
 8023f5c:	b2e4      	uxtb	r4, r4
 8023f5e:	b95b      	cbnz	r3, 8023f78 <read_submessage_info+0x44>
 8023f60:	a987      	add	r1, sp, #540	@ 0x21c
 8023f62:	4628      	mov	r0, r5
 8023f64:	f7fe fb66 	bl	8022634 <ucdr_deserialize_bool>
 8023f68:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8023f6c:	4680      	mov	r8, r0
 8023f6e:	b94b      	cbnz	r3, 8023f84 <read_submessage_info+0x50>
 8023f70:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8023f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f78:	a903      	add	r1, sp, #12
 8023f7a:	4628      	mov	r0, r5
 8023f7c:	f002 f8fa 	bl	8026174 <uxr_deserialize_ObjectVariant>
 8023f80:	4004      	ands	r4, r0
 8023f82:	e7ed      	b.n	8023f60 <read_submessage_info+0x2c>
 8023f84:	a988      	add	r1, sp, #544	@ 0x220
 8023f86:	4628      	mov	r0, r5
 8023f88:	f7fe fb82 	bl	8022690 <ucdr_deserialize_uint8_t>
 8023f8c:	ea14 0f08 	tst.w	r4, r8
 8023f90:	d0ee      	beq.n	8023f70 <read_submessage_info+0x3c>
 8023f92:	2800      	cmp	r0, #0
 8023f94:	d0ec      	beq.n	8023f70 <read_submessage_info+0x3c>
 8023f96:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8023f9a:	2b0d      	cmp	r3, #13
 8023f9c:	d1e8      	bne.n	8023f70 <read_submessage_info+0x3c>
 8023f9e:	a98a      	add	r1, sp, #552	@ 0x228
 8023fa0:	4628      	mov	r0, r5
 8023fa2:	f7ff f91b 	bl	80231dc <ucdr_deserialize_int16_t>
 8023fa6:	b138      	cbz	r0, 8023fb8 <read_submessage_info+0x84>
 8023fa8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8023fac:	2b00      	cmp	r3, #0
 8023fae:	dd06      	ble.n	8023fbe <read_submessage_info+0x8a>
 8023fb0:	2f00      	cmp	r7, #0
 8023fb2:	bf14      	ite	ne
 8023fb4:	2001      	movne	r0, #1
 8023fb6:	2002      	moveq	r0, #2
 8023fb8:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8023fbc:	e7d8      	b.n	8023f70 <read_submessage_info+0x3c>
 8023fbe:	2000      	movs	r0, #0
 8023fc0:	e7fa      	b.n	8023fb8 <read_submessage_info+0x84>
 8023fc2:	bf00      	nop

08023fc4 <read_submessage_list>:
 8023fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fc8:	4604      	mov	r4, r0
 8023fca:	b097      	sub	sp, #92	@ 0x5c
 8023fcc:	460d      	mov	r5, r1
 8023fce:	4ec1      	ldr	r6, [pc, #772]	@ (80242d4 <read_submessage_list+0x310>)
 8023fd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8023fd2:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8023fd6:	aa0c      	add	r2, sp, #48	@ 0x30
 8023fd8:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8023fdc:	4628      	mov	r0, r5
 8023fde:	f001 fc81 	bl	80258e4 <uxr_read_submessage_header>
 8023fe2:	2800      	cmp	r0, #0
 8023fe4:	f000 8142 	beq.w	802426c <read_submessage_list+0x2a8>
 8023fe8:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8023fec:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8023ff0:	3b02      	subs	r3, #2
 8023ff2:	2b0d      	cmp	r3, #13
 8023ff4:	d8ed      	bhi.n	8023fd2 <read_submessage_list+0xe>
 8023ff6:	a101      	add	r1, pc, #4	@ (adr r1, 8023ffc <read_submessage_list+0x38>)
 8023ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023ffc:	08024263 	.word	0x08024263
 8024000:	08023fd3 	.word	0x08023fd3
 8024004:	08024253 	.word	0x08024253
 8024008:	080241f1 	.word	0x080241f1
 802400c:	080241e7 	.word	0x080241e7
 8024010:	08023fd3 	.word	0x08023fd3
 8024014:	08023fd3 	.word	0x08023fd3
 8024018:	0802413d 	.word	0x0802413d
 802401c:	080240cf 	.word	0x080240cf
 8024020:	0802408f 	.word	0x0802408f
 8024024:	08023fd3 	.word	0x08023fd3
 8024028:	08023fd3 	.word	0x08023fd3
 802402c:	08023fd3 	.word	0x08023fd3
 8024030:	08024035 	.word	0x08024035
 8024034:	a910      	add	r1, sp, #64	@ 0x40
 8024036:	4628      	mov	r0, r5
 8024038:	f002 fc18 	bl	802686c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 802403c:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8024040:	f1b8 0f00 	cmp.w	r8, #0
 8024044:	f000 811a 	beq.w	802427c <read_submessage_list+0x2b8>
 8024048:	f001 fc94 	bl	8025974 <uxr_nanos>
 802404c:	4602      	mov	r2, r0
 802404e:	460b      	mov	r3, r1
 8024050:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8024054:	2100      	movs	r1, #0
 8024056:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8024058:	9006      	str	r0, [sp, #24]
 802405a:	468c      	mov	ip, r1
 802405c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802405e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8024062:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8024064:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8024068:	468c      	mov	ip, r1
 802406a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802406c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8024070:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8024074:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8024078:	fbc7 0106 	smlal	r0, r1, r7, r6
 802407c:	e9cd 0100 	strd	r0, r1, [sp]
 8024080:	4620      	mov	r0, r4
 8024082:	47c0      	blx	r8
 8024084:	f04f 0301 	mov.w	r3, #1
 8024088:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 802408c:	e7a1      	b.n	8023fd2 <read_submessage_list+0xe>
 802408e:	a910      	add	r1, sp, #64	@ 0x40
 8024090:	4628      	mov	r0, r5
 8024092:	f002 fbd7 	bl	8026844 <uxr_deserialize_HEARTBEAT_Payload>
 8024096:	2100      	movs	r1, #0
 8024098:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 802409c:	f001 faf8 	bl	8025690 <uxr_stream_id_from_raw>
 80240a0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80240a4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80240a6:	f104 0008 	add.w	r0, r4, #8
 80240aa:	4641      	mov	r1, r8
 80240ac:	f001 fbde 	bl	802586c <uxr_get_input_reliable_stream>
 80240b0:	2800      	cmp	r0, #0
 80240b2:	d08e      	beq.n	8023fd2 <read_submessage_list+0xe>
 80240b4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80240b8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80240bc:	f003 fcd0 	bl	8027a60 <uxr_process_heartbeat>
 80240c0:	4642      	mov	r2, r8
 80240c2:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80240c6:	4620      	mov	r0, r4
 80240c8:	f7ff fdf6 	bl	8023cb8 <write_submessage_acknack.isra.0>
 80240cc:	e781      	b.n	8023fd2 <read_submessage_list+0xe>
 80240ce:	a910      	add	r1, sp, #64	@ 0x40
 80240d0:	4628      	mov	r0, r5
 80240d2:	f002 fb8f 	bl	80267f4 <uxr_deserialize_ACKNACK_Payload>
 80240d6:	2100      	movs	r1, #0
 80240d8:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80240dc:	f001 fad8 	bl	8025690 <uxr_stream_id_from_raw>
 80240e0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80240e4:	900d      	str	r0, [sp, #52]	@ 0x34
 80240e6:	f104 0008 	add.w	r0, r4, #8
 80240ea:	f001 fba9 	bl	8025840 <uxr_get_output_reliable_stream>
 80240ee:	4680      	mov	r8, r0
 80240f0:	2800      	cmp	r0, #0
 80240f2:	f43f af6e 	beq.w	8023fd2 <read_submessage_list+0xe>
 80240f6:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80240fa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80240fe:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8024102:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8024106:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 802410a:	b289      	uxth	r1, r1
 802410c:	f004 f808 	bl	8028120 <uxr_process_acknack>
 8024110:	4640      	mov	r0, r8
 8024112:	f003 ffc9 	bl	80280a8 <uxr_begin_output_nack_buffer_it>
 8024116:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 802411a:	e005      	b.n	8024128 <read_submessage_list+0x164>
 802411c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 802411e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8024122:	e9d3 0900 	ldrd	r0, r9, [r3]
 8024126:	47c8      	blx	r9
 8024128:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 802412c:	aa0f      	add	r2, sp, #60	@ 0x3c
 802412e:	4651      	mov	r1, sl
 8024130:	4640      	mov	r0, r8
 8024132:	f003 ffbb 	bl	80280ac <uxr_next_reliable_nack_buffer_to_send>
 8024136:	2800      	cmp	r0, #0
 8024138:	d1f0      	bne.n	802411c <read_submessage_list+0x158>
 802413a:	e74a      	b.n	8023fd2 <read_submessage_list+0xe>
 802413c:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8024140:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8024144:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8024148:	4628      	mov	r0, r5
 802414a:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 802414e:	4651      	mov	r1, sl
 8024150:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8024154:	f1a8 0804 	sub.w	r8, r8, #4
 8024158:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 802415c:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8024160:	fa1f f888 	uxth.w	r8, r8
 8024164:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8024168:	f009 090e 	and.w	r9, r9, #14
 802416c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8024170:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8024174:	f002 f8a0 	bl	80262b8 <uxr_deserialize_BaseObjectRequest>
 8024178:	4650      	mov	r0, sl
 802417a:	a90f      	add	r1, sp, #60	@ 0x3c
 802417c:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8024180:	f000 fdca 	bl	8024d18 <uxr_parse_base_object_request>
 8024184:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8024186:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 802418a:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 802418e:	9110      	str	r1, [sp, #64]	@ 0x40
 8024190:	f1bb 0f00 	cmp.w	fp, #0
 8024194:	d006      	beq.n	80241a4 <read_submessage_list+0x1e0>
 8024196:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 802419a:	4652      	mov	r2, sl
 802419c:	4620      	mov	r0, r4
 802419e:	9300      	str	r3, [sp, #0]
 80241a0:	2300      	movs	r3, #0
 80241a2:	47d8      	blx	fp
 80241a4:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80241a6:	b182      	cbz	r2, 80241ca <read_submessage_list+0x206>
 80241a8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80241aa:	f04f 0c00 	mov.w	ip, #0
 80241ae:	3902      	subs	r1, #2
 80241b0:	e003      	b.n	80241ba <read_submessage_list+0x1f6>
 80241b2:	f10c 0c01 	add.w	ip, ip, #1
 80241b6:	4594      	cmp	ip, r2
 80241b8:	d007      	beq.n	80241ca <read_submessage_list+0x206>
 80241ba:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80241be:	4553      	cmp	r3, sl
 80241c0:	d1f7      	bne.n	80241b2 <read_submessage_list+0x1ee>
 80241c2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80241c4:	2200      	movs	r2, #0
 80241c6:	f803 200c 	strb.w	r2, [r3, ip]
 80241ca:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80241ce:	464b      	mov	r3, r9
 80241d0:	4642      	mov	r2, r8
 80241d2:	4620      	mov	r0, r4
 80241d4:	9102      	str	r1, [sp, #8]
 80241d6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80241d8:	9101      	str	r1, [sp, #4]
 80241da:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80241dc:	9100      	str	r1, [sp, #0]
 80241de:	4629      	mov	r1, r5
 80241e0:	f7ff fc48 	bl	8023a74 <read_submessage_format>
 80241e4:	e6f5      	b.n	8023fd2 <read_submessage_list+0xe>
 80241e6:	4629      	mov	r1, r5
 80241e8:	4620      	mov	r0, r4
 80241ea:	f7ff fea3 	bl	8023f34 <read_submessage_info>
 80241ee:	e6f0      	b.n	8023fd2 <read_submessage_list+0xe>
 80241f0:	2a00      	cmp	r2, #0
 80241f2:	d03e      	beq.n	8024272 <read_submessage_list+0x2ae>
 80241f4:	a910      	add	r1, sp, #64	@ 0x40
 80241f6:	4628      	mov	r0, r5
 80241f8:	f002 fa54 	bl	80266a4 <uxr_deserialize_STATUS_Payload>
 80241fc:	a90e      	add	r1, sp, #56	@ 0x38
 80241fe:	aa0d      	add	r2, sp, #52	@ 0x34
 8024200:	a810      	add	r0, sp, #64	@ 0x40
 8024202:	f000 fd89 	bl	8024d18 <uxr_parse_base_object_request>
 8024206:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8024208:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 802420c:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8024210:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8024214:	910f      	str	r1, [sp, #60]	@ 0x3c
 8024216:	f1ba 0f00 	cmp.w	sl, #0
 802421a:	d006      	beq.n	802422a <read_submessage_list+0x266>
 802421c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8024220:	4642      	mov	r2, r8
 8024222:	4620      	mov	r0, r4
 8024224:	9300      	str	r3, [sp, #0]
 8024226:	464b      	mov	r3, r9
 8024228:	47d0      	blx	sl
 802422a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 802422c:	2a00      	cmp	r2, #0
 802422e:	f43f aed0 	beq.w	8023fd2 <read_submessage_list+0xe>
 8024232:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8024234:	2100      	movs	r1, #0
 8024236:	3802      	subs	r0, #2
 8024238:	e003      	b.n	8024242 <read_submessage_list+0x27e>
 802423a:	3101      	adds	r1, #1
 802423c:	4291      	cmp	r1, r2
 802423e:	f43f aec8 	beq.w	8023fd2 <read_submessage_list+0xe>
 8024242:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8024246:	4543      	cmp	r3, r8
 8024248:	d1f7      	bne.n	802423a <read_submessage_list+0x276>
 802424a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 802424c:	f803 9001 	strb.w	r9, [r3, r1]
 8024250:	e6bf      	b.n	8023fd2 <read_submessage_list+0xe>
 8024252:	2a00      	cmp	r2, #0
 8024254:	f47f aebd 	bne.w	8023fd2 <read_submessage_list+0xe>
 8024258:	4629      	mov	r1, r5
 802425a:	4620      	mov	r0, r4
 802425c:	f000 fca0 	bl	8024ba0 <uxr_read_create_session_status>
 8024260:	e6b7      	b.n	8023fd2 <read_submessage_list+0xe>
 8024262:	4629      	mov	r1, r5
 8024264:	4620      	mov	r0, r4
 8024266:	f7ff fcf1 	bl	8023c4c <read_submessage_get_info>
 802426a:	e6b2      	b.n	8023fd2 <read_submessage_list+0xe>
 802426c:	b017      	add	sp, #92	@ 0x5c
 802426e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024272:	4629      	mov	r1, r5
 8024274:	4620      	mov	r0, r4
 8024276:	f000 fca1 	bl	8024bbc <uxr_read_delete_session_status>
 802427a:	e6aa      	b.n	8023fd2 <read_submessage_list+0xe>
 802427c:	f001 fb7a 	bl	8025974 <uxr_nanos>
 8024280:	4642      	mov	r2, r8
 8024282:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8024284:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024286:	fbc7 3206 	smlal	r3, r2, r7, r6
 802428a:	1818      	adds	r0, r3, r0
 802428c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 802428e:	eb42 0101 	adc.w	r1, r2, r1
 8024292:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024294:	4642      	mov	r2, r8
 8024296:	fbc7 3206 	smlal	r3, r2, r7, r6
 802429a:	469c      	mov	ip, r3
 802429c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 80242a0:	fbc3 7806 	smlal	r7, r8, r3, r6
 80242a4:	4643      	mov	r3, r8
 80242a6:	eb1c 0c07 	adds.w	ip, ip, r7
 80242aa:	eb42 0203 	adc.w	r2, r2, r3
 80242ae:	ebb0 030c 	subs.w	r3, r0, ip
 80242b2:	eb61 0202 	sbc.w	r2, r1, r2
 80242b6:	2a00      	cmp	r2, #0
 80242b8:	db08      	blt.n	80242cc <read_submessage_list+0x308>
 80242ba:	085b      	lsrs	r3, r3, #1
 80242bc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80242c0:	1052      	asrs	r2, r2, #1
 80242c2:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80242c6:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 80242ca:	e6db      	b.n	8024084 <read_submessage_list+0xc0>
 80242cc:	3301      	adds	r3, #1
 80242ce:	f142 0200 	adc.w	r2, r2, #0
 80242d2:	e7f2      	b.n	80242ba <read_submessage_list+0x2f6>
 80242d4:	3b9aca00 	.word	0x3b9aca00

080242d8 <listen_message_reliably>:
 80242d8:	1e0b      	subs	r3, r1, #0
 80242da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242de:	bfb8      	it	lt
 80242e0:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80242e4:	b09d      	sub	sp, #116	@ 0x74
 80242e6:	4680      	mov	r8, r0
 80242e8:	9305      	str	r3, [sp, #20]
 80242ea:	f001 fb27 	bl	802593c <uxr_millis>
 80242ee:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80242f2:	4681      	mov	r9, r0
 80242f4:	2a00      	cmp	r2, #0
 80242f6:	f000 809a 	beq.w	802442e <listen_message_reliably+0x156>
 80242fa:	2600      	movs	r6, #0
 80242fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8024300:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8024304:	460f      	mov	r7, r1
 8024306:	4630      	mov	r0, r6
 8024308:	9303      	str	r3, [sp, #12]
 802430a:	e00e      	b.n	802432a <listen_message_reliably+0x52>
 802430c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802430e:	3601      	adds	r6, #1
 8024310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8024312:	455a      	cmp	r2, fp
 8024314:	9903      	ldr	r1, [sp, #12]
 8024316:	b2f0      	uxtb	r0, r6
 8024318:	eb73 0101 	sbcs.w	r1, r3, r1
 802431c:	da01      	bge.n	8024322 <listen_message_reliably+0x4a>
 802431e:	4693      	mov	fp, r2
 8024320:	9303      	str	r3, [sp, #12]
 8024322:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8024326:	4283      	cmp	r3, r0
 8024328:	d95f      	bls.n	80243ea <listen_message_reliably+0x112>
 802432a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 802432e:	2102      	movs	r1, #2
 8024330:	2201      	movs	r2, #1
 8024332:	00e4      	lsls	r4, r4, #3
 8024334:	f001 f97e 	bl	8025634 <uxr_stream_id>
 8024338:	4601      	mov	r1, r0
 802433a:	f104 0520 	add.w	r5, r4, #32
 802433e:	463b      	mov	r3, r7
 8024340:	464a      	mov	r2, r9
 8024342:	9109      	str	r1, [sp, #36]	@ 0x24
 8024344:	4445      	add	r5, r8
 8024346:	4628      	mov	r0, r5
 8024348:	f003 fe82 	bl	8028050 <uxr_update_output_stream_heartbeat_timestamp>
 802434c:	eb08 0304 	add.w	r3, r8, r4
 8024350:	2800      	cmp	r0, #0
 8024352:	d0db      	beq.n	802430c <listen_message_reliably+0x34>
 8024354:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8024358:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 802435c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8024360:	4640      	mov	r0, r8
 8024362:	3501      	adds	r5, #1
 8024364:	4444      	add	r4, r8
 8024366:	9304      	str	r3, [sp, #16]
 8024368:	f000 fcae 	bl	8024cc8 <uxr_session_header_offset>
 802436c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8024370:	2300      	movs	r3, #0
 8024372:	2211      	movs	r2, #17
 8024374:	a90c      	add	r1, sp, #48	@ 0x30
 8024376:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 802437a:	9000      	str	r0, [sp, #0]
 802437c:	4650      	mov	r0, sl
 802437e:	3601      	adds	r6, #1
 8024380:	f7f8 fd72 	bl	801ce68 <ucdr_init_buffer_origin_offset>
 8024384:	2300      	movs	r3, #0
 8024386:	2205      	movs	r2, #5
 8024388:	210b      	movs	r1, #11
 802438a:	4650      	mov	r0, sl
 802438c:	f001 fa90 	bl	80258b0 <uxr_buffer_submessage_header>
 8024390:	2101      	movs	r1, #1
 8024392:	8968      	ldrh	r0, [r5, #10]
 8024394:	f003 fefe 	bl	8028194 <uxr_seq_num_add>
 8024398:	892b      	ldrh	r3, [r5, #8]
 802439a:	4602      	mov	r2, r0
 802439c:	a90a      	add	r1, sp, #40	@ 0x28
 802439e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80243a2:	4650      	mov	r0, sl
 80243a4:	9b04      	ldr	r3, [sp, #16]
 80243a6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80243aa:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80243ae:	f002 fa35 	bl	802681c <uxr_serialize_HEARTBEAT_Payload>
 80243b2:	2200      	movs	r2, #0
 80243b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80243b6:	4640      	mov	r0, r8
 80243b8:	4611      	mov	r1, r2
 80243ba:	f000 fc31 	bl	8024c20 <uxr_stamp_session_header>
 80243be:	4650      	mov	r0, sl
 80243c0:	f7f8 fd92 	bl	801cee8 <ucdr_buffer_length>
 80243c4:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80243c8:	4602      	mov	r2, r0
 80243ca:	a90c      	add	r1, sp, #48	@ 0x30
 80243cc:	e9d3 0500 	ldrd	r0, r5, [r3]
 80243d0:	47a8      	blx	r5
 80243d2:	9903      	ldr	r1, [sp, #12]
 80243d4:	b2f0      	uxtb	r0, r6
 80243d6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80243da:	455a      	cmp	r2, fp
 80243dc:	eb73 0101 	sbcs.w	r1, r3, r1
 80243e0:	db9d      	blt.n	802431e <listen_message_reliably+0x46>
 80243e2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80243e6:	4283      	cmp	r3, r0
 80243e8:	d89f      	bhi.n	802432a <listen_message_reliably+0x52>
 80243ea:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80243ee:	9a03      	ldr	r2, [sp, #12]
 80243f0:	429a      	cmp	r2, r3
 80243f2:	bf08      	it	eq
 80243f4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80243f8:	d019      	beq.n	802442e <listen_message_reliably+0x156>
 80243fa:	ebab 0309 	sub.w	r3, fp, r9
 80243fe:	2b00      	cmp	r3, #0
 8024400:	9d05      	ldr	r5, [sp, #20]
 8024402:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8024406:	aa08      	add	r2, sp, #32
 8024408:	bf08      	it	eq
 802440a:	2301      	moveq	r3, #1
 802440c:	a907      	add	r1, sp, #28
 802440e:	6884      	ldr	r4, [r0, #8]
 8024410:	429d      	cmp	r5, r3
 8024412:	6800      	ldr	r0, [r0, #0]
 8024414:	bfa8      	it	ge
 8024416:	461d      	movge	r5, r3
 8024418:	462b      	mov	r3, r5
 802441a:	47a0      	blx	r4
 802441c:	b948      	cbnz	r0, 8024432 <listen_message_reliably+0x15a>
 802441e:	9b05      	ldr	r3, [sp, #20]
 8024420:	1b5b      	subs	r3, r3, r5
 8024422:	2b00      	cmp	r3, #0
 8024424:	9305      	str	r3, [sp, #20]
 8024426:	f73f af60 	bgt.w	80242ea <listen_message_reliably+0x12>
 802442a:	4604      	mov	r4, r0
 802442c:	e012      	b.n	8024454 <listen_message_reliably+0x17c>
 802442e:	9b05      	ldr	r3, [sp, #20]
 8024430:	e7e5      	b.n	80243fe <listen_message_reliably+0x126>
 8024432:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8024436:	4604      	mov	r4, r0
 8024438:	2500      	movs	r5, #0
 802443a:	a80c      	add	r0, sp, #48	@ 0x30
 802443c:	f7f8 fd26 	bl	801ce8c <ucdr_init_buffer>
 8024440:	f10d 031a 	add.w	r3, sp, #26
 8024444:	aa06      	add	r2, sp, #24
 8024446:	a90c      	add	r1, sp, #48	@ 0x30
 8024448:	4640      	mov	r0, r8
 802444a:	f88d 5018 	strb.w	r5, [sp, #24]
 802444e:	f000 fbfb 	bl	8024c48 <uxr_read_session_header>
 8024452:	b918      	cbnz	r0, 802445c <listen_message_reliably+0x184>
 8024454:	4620      	mov	r0, r4
 8024456:	b01d      	add	sp, #116	@ 0x74
 8024458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802445c:	4629      	mov	r1, r5
 802445e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8024462:	f001 f915 	bl	8025690 <uxr_stream_id_from_raw>
 8024466:	f3c0 4607 	ubfx	r6, r0, #16, #8
 802446a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 802446e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8024472:	2e01      	cmp	r6, #1
 8024474:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8024478:	d04b      	beq.n	8024512 <listen_message_reliably+0x23a>
 802447a:	2e02      	cmp	r6, #2
 802447c:	d00f      	beq.n	802449e <listen_message_reliably+0x1c6>
 802447e:	2e00      	cmp	r6, #0
 8024480:	d1e8      	bne.n	8024454 <listen_message_reliably+0x17c>
 8024482:	4631      	mov	r1, r6
 8024484:	4630      	mov	r0, r6
 8024486:	f001 f903 	bl	8025690 <uxr_stream_id_from_raw>
 802448a:	4602      	mov	r2, r0
 802448c:	a90c      	add	r1, sp, #48	@ 0x30
 802448e:	4640      	mov	r0, r8
 8024490:	920a      	str	r2, [sp, #40]	@ 0x28
 8024492:	f7ff fd97 	bl	8023fc4 <read_submessage_list>
 8024496:	4620      	mov	r0, r4
 8024498:	b01d      	add	sp, #116	@ 0x74
 802449a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802449e:	4629      	mov	r1, r5
 80244a0:	f108 0008 	add.w	r0, r8, #8
 80244a4:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80244a8:	f001 f9e0 	bl	802586c <uxr_get_input_reliable_stream>
 80244ac:	4607      	mov	r7, r0
 80244ae:	b338      	cbz	r0, 8024500 <listen_message_reliably+0x228>
 80244b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80244b2:	a80c      	add	r0, sp, #48	@ 0x30
 80244b4:	9203      	str	r2, [sp, #12]
 80244b6:	f7f8 fd1b 	bl	801cef0 <ucdr_buffer_remaining>
 80244ba:	4603      	mov	r3, r0
 80244bc:	f10d 0019 	add.w	r0, sp, #25
 80244c0:	9a03      	ldr	r2, [sp, #12]
 80244c2:	4651      	mov	r1, sl
 80244c4:	9000      	str	r0, [sp, #0]
 80244c6:	4638      	mov	r0, r7
 80244c8:	f003 f9ce 	bl	8027868 <uxr_receive_reliable_message>
 80244cc:	b1c0      	cbz	r0, 8024500 <listen_message_reliably+0x228>
 80244ce:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80244d2:	b393      	cbz	r3, 802453a <listen_message_reliably+0x262>
 80244d4:	ae14      	add	r6, sp, #80	@ 0x50
 80244d6:	f04f 0a02 	mov.w	sl, #2
 80244da:	e00a      	b.n	80244f2 <listen_message_reliably+0x21a>
 80244dc:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80244e0:	4631      	mov	r1, r6
 80244e2:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 80244e6:	4640      	mov	r0, r8
 80244e8:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 80244ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80244ee:	f7ff fd69 	bl	8023fc4 <read_submessage_list>
 80244f2:	2204      	movs	r2, #4
 80244f4:	4631      	mov	r1, r6
 80244f6:	4638      	mov	r0, r7
 80244f8:	f003 fa38 	bl	802796c <uxr_next_input_reliable_buffer_available>
 80244fc:	2800      	cmp	r0, #0
 80244fe:	d1ed      	bne.n	80244dc <listen_message_reliably+0x204>
 8024500:	4640      	mov	r0, r8
 8024502:	462a      	mov	r2, r5
 8024504:	4649      	mov	r1, r9
 8024506:	f7ff fbd7 	bl	8023cb8 <write_submessage_acknack.isra.0>
 802450a:	4620      	mov	r0, r4
 802450c:	b01d      	add	sp, #116	@ 0x74
 802450e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024512:	4629      	mov	r1, r5
 8024514:	f108 0008 	add.w	r0, r8, #8
 8024518:	f001 f99e 	bl	8025858 <uxr_get_input_best_effort_stream>
 802451c:	2800      	cmp	r0, #0
 802451e:	d099      	beq.n	8024454 <listen_message_reliably+0x17c>
 8024520:	4651      	mov	r1, sl
 8024522:	f003 f917 	bl	8027754 <uxr_receive_best_effort_message>
 8024526:	2800      	cmp	r0, #0
 8024528:	d094      	beq.n	8024454 <listen_message_reliably+0x17c>
 802452a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 802452e:	a90c      	add	r1, sp, #48	@ 0x30
 8024530:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024532:	4640      	mov	r0, r8
 8024534:	f7ff fd46 	bl	8023fc4 <read_submessage_list>
 8024538:	e78c      	b.n	8024454 <listen_message_reliably+0x17c>
 802453a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 802453e:	a90c      	add	r1, sp, #48	@ 0x30
 8024540:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024542:	4640      	mov	r0, r8
 8024544:	f7ff fd3e 	bl	8023fc4 <read_submessage_list>
 8024548:	e7c4      	b.n	80244d4 <listen_message_reliably+0x1fc>
 802454a:	bf00      	nop

0802454c <uxr_run_session_timeout>:
 802454c:	b570      	push	{r4, r5, r6, lr}
 802454e:	4604      	mov	r4, r0
 8024550:	460d      	mov	r5, r1
 8024552:	f001 f9f3 	bl	802593c <uxr_millis>
 8024556:	4606      	mov	r6, r0
 8024558:	4620      	mov	r0, r4
 802455a:	f7ff fc77 	bl	8023e4c <uxr_flash_output_streams>
 802455e:	4629      	mov	r1, r5
 8024560:	4620      	mov	r0, r4
 8024562:	f7ff feb9 	bl	80242d8 <listen_message_reliably>
 8024566:	f001 f9e9 	bl	802593c <uxr_millis>
 802456a:	1b83      	subs	r3, r0, r6
 802456c:	1ae9      	subs	r1, r5, r3
 802456e:	2900      	cmp	r1, #0
 8024570:	dcf6      	bgt.n	8024560 <uxr_run_session_timeout+0x14>
 8024572:	f104 0008 	add.w	r0, r4, #8
 8024576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802457a:	f001 b983 	b.w	8025884 <uxr_output_streams_confirmed>
 802457e:	bf00      	nop

08024580 <uxr_run_session_until_data>:
 8024580:	b570      	push	{r4, r5, r6, lr}
 8024582:	4604      	mov	r4, r0
 8024584:	460d      	mov	r5, r1
 8024586:	f001 f9d9 	bl	802593c <uxr_millis>
 802458a:	4606      	mov	r6, r0
 802458c:	4620      	mov	r0, r4
 802458e:	f7ff fc5d 	bl	8023e4c <uxr_flash_output_streams>
 8024592:	2300      	movs	r3, #0
 8024594:	4629      	mov	r1, r5
 8024596:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 802459a:	e005      	b.n	80245a8 <uxr_run_session_until_data+0x28>
 802459c:	f001 f9ce 	bl	802593c <uxr_millis>
 80245a0:	1b83      	subs	r3, r0, r6
 80245a2:	1ae9      	subs	r1, r5, r3
 80245a4:	2900      	cmp	r1, #0
 80245a6:	dd07      	ble.n	80245b8 <uxr_run_session_until_data+0x38>
 80245a8:	4620      	mov	r0, r4
 80245aa:	f7ff fe95 	bl	80242d8 <listen_message_reliably>
 80245ae:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80245b2:	2800      	cmp	r0, #0
 80245b4:	d0f2      	beq.n	802459c <uxr_run_session_until_data+0x1c>
 80245b6:	bd70      	pop	{r4, r5, r6, pc}
 80245b8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80245bc:	bd70      	pop	{r4, r5, r6, pc}
 80245be:	bf00      	nop

080245c0 <uxr_run_session_until_confirm_delivery>:
 80245c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80245c4:	4606      	mov	r6, r0
 80245c6:	460d      	mov	r5, r1
 80245c8:	f001 f9b8 	bl	802593c <uxr_millis>
 80245cc:	4607      	mov	r7, r0
 80245ce:	4630      	mov	r0, r6
 80245d0:	f106 0808 	add.w	r8, r6, #8
 80245d4:	f7ff fc3a 	bl	8023e4c <uxr_flash_output_streams>
 80245d8:	2d00      	cmp	r5, #0
 80245da:	db10      	blt.n	80245fe <uxr_run_session_until_confirm_delivery+0x3e>
 80245dc:	462c      	mov	r4, r5
 80245de:	e006      	b.n	80245ee <uxr_run_session_until_confirm_delivery+0x2e>
 80245e0:	f7ff fe7a 	bl	80242d8 <listen_message_reliably>
 80245e4:	f001 f9aa 	bl	802593c <uxr_millis>
 80245e8:	1bc3      	subs	r3, r0, r7
 80245ea:	1aec      	subs	r4, r5, r3
 80245ec:	d407      	bmi.n	80245fe <uxr_run_session_until_confirm_delivery+0x3e>
 80245ee:	4640      	mov	r0, r8
 80245f0:	f001 f948 	bl	8025884 <uxr_output_streams_confirmed>
 80245f4:	4603      	mov	r3, r0
 80245f6:	4621      	mov	r1, r4
 80245f8:	4630      	mov	r0, r6
 80245fa:	2b00      	cmp	r3, #0
 80245fc:	d0f0      	beq.n	80245e0 <uxr_run_session_until_confirm_delivery+0x20>
 80245fe:	4640      	mov	r0, r8
 8024600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024604:	f001 b93e 	b.w	8025884 <uxr_output_streams_confirmed>

08024608 <uxr_run_session_until_all_status>:
 8024608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802460c:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8024610:	4606      	mov	r6, r0
 8024612:	4688      	mov	r8, r1
 8024614:	4692      	mov	sl, r2
 8024616:	461f      	mov	r7, r3
 8024618:	f7ff fc18 	bl	8023e4c <uxr_flash_output_streams>
 802461c:	f1bb 0f00 	cmp.w	fp, #0
 8024620:	d004      	beq.n	802462c <uxr_run_session_until_all_status+0x24>
 8024622:	465a      	mov	r2, fp
 8024624:	21ff      	movs	r1, #255	@ 0xff
 8024626:	4638      	mov	r0, r7
 8024628:	f004 fffc 	bl	8029624 <memset>
 802462c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8024630:	1e7d      	subs	r5, r7, #1
 8024632:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 8024636:	f001 f981 	bl	802593c <uxr_millis>
 802463a:	4641      	mov	r1, r8
 802463c:	4681      	mov	r9, r0
 802463e:	4630      	mov	r0, r6
 8024640:	f7ff fe4a 	bl	80242d8 <listen_message_reliably>
 8024644:	f001 f97a 	bl	802593c <uxr_millis>
 8024648:	eba0 0009 	sub.w	r0, r0, r9
 802464c:	eba8 0100 	sub.w	r1, r8, r0
 8024650:	f1bb 0f00 	cmp.w	fp, #0
 8024654:	d029      	beq.n	80246aa <uxr_run_session_until_all_status+0xa2>
 8024656:	46ae      	mov	lr, r5
 8024658:	f04f 0c00 	mov.w	ip, #0
 802465c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8024660:	2cff      	cmp	r4, #255	@ 0xff
 8024662:	d015      	beq.n	8024690 <uxr_run_session_until_all_status+0x88>
 8024664:	f10c 0c01 	add.w	ip, ip, #1
 8024668:	45e3      	cmp	fp, ip
 802466a:	d8f7      	bhi.n	802465c <uxr_run_session_until_all_status+0x54>
 802466c:	2300      	movs	r3, #0
 802466e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8024670:	e000      	b.n	8024674 <uxr_run_session_until_all_status+0x6c>
 8024672:	b158      	cbz	r0, 802468c <uxr_run_session_until_all_status+0x84>
 8024674:	462b      	mov	r3, r5
 8024676:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 802467a:	3302      	adds	r3, #2
 802467c:	2801      	cmp	r0, #1
 802467e:	eba3 0307 	sub.w	r3, r3, r7
 8024682:	bf8c      	ite	hi
 8024684:	2000      	movhi	r0, #0
 8024686:	2001      	movls	r0, #1
 8024688:	459b      	cmp	fp, r3
 802468a:	d8f2      	bhi.n	8024672 <uxr_run_session_until_all_status+0x6a>
 802468c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024690:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8024694:	f10c 0c01 	add.w	ip, ip, #1
 8024698:	45dc      	cmp	ip, fp
 802469a:	d201      	bcs.n	80246a0 <uxr_run_session_until_all_status+0x98>
 802469c:	2b00      	cmp	r3, #0
 802469e:	d0dd      	beq.n	802465c <uxr_run_session_until_all_status+0x54>
 80246a0:	2900      	cmp	r1, #0
 80246a2:	dde3      	ble.n	802466c <uxr_run_session_until_all_status+0x64>
 80246a4:	2b00      	cmp	r3, #0
 80246a6:	d1ca      	bne.n	802463e <uxr_run_session_until_all_status+0x36>
 80246a8:	e7e0      	b.n	802466c <uxr_run_session_until_all_status+0x64>
 80246aa:	2001      	movs	r0, #1
 80246ac:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80246b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080246b4 <wait_session_status>:
 80246b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246b8:	4604      	mov	r4, r0
 80246ba:	b09d      	sub	sp, #116	@ 0x74
 80246bc:	20ff      	movs	r0, #255	@ 0xff
 80246be:	9303      	str	r3, [sp, #12]
 80246c0:	7160      	strb	r0, [r4, #5]
 80246c2:	2b00      	cmp	r3, #0
 80246c4:	f000 80b6 	beq.w	8024834 <wait_session_status+0x180>
 80246c8:	4689      	mov	r9, r1
 80246ca:	4692      	mov	sl, r2
 80246cc:	f04f 0b00 	mov.w	fp, #0
 80246d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80246d2:	4652      	mov	r2, sl
 80246d4:	4649      	mov	r1, r9
 80246d6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80246da:	47a8      	blx	r5
 80246dc:	f001 f92e 	bl	802593c <uxr_millis>
 80246e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80246e4:	4605      	mov	r5, r0
 80246e6:	e009      	b.n	80246fc <wait_session_status+0x48>
 80246e8:	f001 f928 	bl	802593c <uxr_millis>
 80246ec:	1b40      	subs	r0, r0, r5
 80246ee:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80246f2:	2b00      	cmp	r3, #0
 80246f4:	dd40      	ble.n	8024778 <wait_session_status+0xc4>
 80246f6:	7960      	ldrb	r0, [r4, #5]
 80246f8:	28ff      	cmp	r0, #255	@ 0xff
 80246fa:	d145      	bne.n	8024788 <wait_session_status+0xd4>
 80246fc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80246fe:	a908      	add	r1, sp, #32
 8024700:	6896      	ldr	r6, [r2, #8]
 8024702:	6810      	ldr	r0, [r2, #0]
 8024704:	aa09      	add	r2, sp, #36	@ 0x24
 8024706:	47b0      	blx	r6
 8024708:	2800      	cmp	r0, #0
 802470a:	d0ed      	beq.n	80246e8 <wait_session_status+0x34>
 802470c:	a80c      	add	r0, sp, #48	@ 0x30
 802470e:	2600      	movs	r6, #0
 8024710:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8024714:	f7f8 fbba 	bl	801ce8c <ucdr_init_buffer>
 8024718:	f10d 031e 	add.w	r3, sp, #30
 802471c:	aa07      	add	r2, sp, #28
 802471e:	a90c      	add	r1, sp, #48	@ 0x30
 8024720:	4620      	mov	r0, r4
 8024722:	f88d 601c 	strb.w	r6, [sp, #28]
 8024726:	f000 fa8f 	bl	8024c48 <uxr_read_session_header>
 802472a:	2800      	cmp	r0, #0
 802472c:	d0dc      	beq.n	80246e8 <wait_session_status+0x34>
 802472e:	4631      	mov	r1, r6
 8024730:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8024734:	f000 ffac 	bl	8025690 <uxr_stream_id_from_raw>
 8024738:	f3c0 4707 	ubfx	r7, r0, #16, #8
 802473c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024740:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8024744:	2f01      	cmp	r7, #1
 8024746:	9302      	str	r3, [sp, #8]
 8024748:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 802474c:	d05c      	beq.n	8024808 <wait_session_status+0x154>
 802474e:	2f02      	cmp	r7, #2
 8024750:	d020      	beq.n	8024794 <wait_session_status+0xe0>
 8024752:	2f00      	cmp	r7, #0
 8024754:	d1c8      	bne.n	80246e8 <wait_session_status+0x34>
 8024756:	4639      	mov	r1, r7
 8024758:	4638      	mov	r0, r7
 802475a:	f000 ff99 	bl	8025690 <uxr_stream_id_from_raw>
 802475e:	a90c      	add	r1, sp, #48	@ 0x30
 8024760:	4602      	mov	r2, r0
 8024762:	900b      	str	r0, [sp, #44]	@ 0x2c
 8024764:	4620      	mov	r0, r4
 8024766:	f7ff fc2d 	bl	8023fc4 <read_submessage_list>
 802476a:	f001 f8e7 	bl	802593c <uxr_millis>
 802476e:	1b40      	subs	r0, r0, r5
 8024770:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8024774:	2b00      	cmp	r3, #0
 8024776:	dcbe      	bgt.n	80246f6 <wait_session_status+0x42>
 8024778:	f10b 0b01 	add.w	fp, fp, #1
 802477c:	9b03      	ldr	r3, [sp, #12]
 802477e:	7960      	ldrb	r0, [r4, #5]
 8024780:	455b      	cmp	r3, fp
 8024782:	d001      	beq.n	8024788 <wait_session_status+0xd4>
 8024784:	28ff      	cmp	r0, #255	@ 0xff
 8024786:	d0a3      	beq.n	80246d0 <wait_session_status+0x1c>
 8024788:	38ff      	subs	r0, #255	@ 0xff
 802478a:	bf18      	it	ne
 802478c:	2001      	movne	r0, #1
 802478e:	b01d      	add	sp, #116	@ 0x74
 8024790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024794:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8024798:	4631      	mov	r1, r6
 802479a:	f104 0008 	add.w	r0, r4, #8
 802479e:	9304      	str	r3, [sp, #16]
 80247a0:	f001 f864 	bl	802586c <uxr_get_input_reliable_stream>
 80247a4:	4680      	mov	r8, r0
 80247a6:	b348      	cbz	r0, 80247fc <wait_session_status+0x148>
 80247a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80247aa:	a80c      	add	r0, sp, #48	@ 0x30
 80247ac:	9205      	str	r2, [sp, #20]
 80247ae:	f7f8 fb9f 	bl	801cef0 <ucdr_buffer_remaining>
 80247b2:	4603      	mov	r3, r0
 80247b4:	f10d 001d 	add.w	r0, sp, #29
 80247b8:	9a05      	ldr	r2, [sp, #20]
 80247ba:	9000      	str	r0, [sp, #0]
 80247bc:	4640      	mov	r0, r8
 80247be:	9902      	ldr	r1, [sp, #8]
 80247c0:	f003 f852 	bl	8027868 <uxr_receive_reliable_message>
 80247c4:	b1d0      	cbz	r0, 80247fc <wait_session_status+0x148>
 80247c6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80247ca:	2b00      	cmp	r3, #0
 80247cc:	d03a      	beq.n	8024844 <wait_session_status+0x190>
 80247ce:	9f04      	ldr	r7, [sp, #16]
 80247d0:	e00a      	b.n	80247e8 <wait_session_status+0x134>
 80247d2:	f04f 0302 	mov.w	r3, #2
 80247d6:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80247da:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80247de:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80247e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80247e4:	f7ff fbee 	bl	8023fc4 <read_submessage_list>
 80247e8:	a914      	add	r1, sp, #80	@ 0x50
 80247ea:	2204      	movs	r2, #4
 80247ec:	4640      	mov	r0, r8
 80247ee:	f003 f8bd 	bl	802796c <uxr_next_input_reliable_buffer_available>
 80247f2:	4603      	mov	r3, r0
 80247f4:	a914      	add	r1, sp, #80	@ 0x50
 80247f6:	4620      	mov	r0, r4
 80247f8:	2b00      	cmp	r3, #0
 80247fa:	d1ea      	bne.n	80247d2 <wait_session_status+0x11e>
 80247fc:	4632      	mov	r2, r6
 80247fe:	9904      	ldr	r1, [sp, #16]
 8024800:	4620      	mov	r0, r4
 8024802:	f7ff fa59 	bl	8023cb8 <write_submessage_acknack.isra.0>
 8024806:	e76f      	b.n	80246e8 <wait_session_status+0x34>
 8024808:	4631      	mov	r1, r6
 802480a:	f104 0008 	add.w	r0, r4, #8
 802480e:	f001 f823 	bl	8025858 <uxr_get_input_best_effort_stream>
 8024812:	2800      	cmp	r0, #0
 8024814:	f43f af68 	beq.w	80246e8 <wait_session_status+0x34>
 8024818:	9902      	ldr	r1, [sp, #8]
 802481a:	f002 ff9b 	bl	8027754 <uxr_receive_best_effort_message>
 802481e:	2800      	cmp	r0, #0
 8024820:	f43f af62 	beq.w	80246e8 <wait_session_status+0x34>
 8024824:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8024828:	a90c      	add	r1, sp, #48	@ 0x30
 802482a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802482c:	4620      	mov	r0, r4
 802482e:	f7ff fbc9 	bl	8023fc4 <read_submessage_list>
 8024832:	e759      	b.n	80246e8 <wait_session_status+0x34>
 8024834:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8024836:	e9d3 0400 	ldrd	r0, r4, [r3]
 802483a:	47a0      	blx	r4
 802483c:	2001      	movs	r0, #1
 802483e:	b01d      	add	sp, #116	@ 0x74
 8024840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024844:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8024848:	a90c      	add	r1, sp, #48	@ 0x30
 802484a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802484c:	4620      	mov	r0, r4
 802484e:	f7ff fbb9 	bl	8023fc4 <read_submessage_list>
 8024852:	e7bc      	b.n	80247ce <wait_session_status+0x11a>

08024854 <uxr_delete_session_retries>:
 8024854:	b530      	push	{r4, r5, lr}
 8024856:	b08f      	sub	sp, #60	@ 0x3c
 8024858:	4604      	mov	r4, r0
 802485a:	460d      	mov	r5, r1
 802485c:	f000 fa34 	bl	8024cc8 <uxr_session_header_offset>
 8024860:	2300      	movs	r3, #0
 8024862:	2210      	movs	r2, #16
 8024864:	a902      	add	r1, sp, #8
 8024866:	9000      	str	r0, [sp, #0]
 8024868:	a806      	add	r0, sp, #24
 802486a:	f7f8 fafd 	bl	801ce68 <ucdr_init_buffer_origin_offset>
 802486e:	a906      	add	r1, sp, #24
 8024870:	4620      	mov	r0, r4
 8024872:	f000 f979 	bl	8024b68 <uxr_buffer_delete_session>
 8024876:	2200      	movs	r2, #0
 8024878:	9b06      	ldr	r3, [sp, #24]
 802487a:	4620      	mov	r0, r4
 802487c:	4611      	mov	r1, r2
 802487e:	f000 f9cf 	bl	8024c20 <uxr_stamp_session_header>
 8024882:	a806      	add	r0, sp, #24
 8024884:	f7f8 fb30 	bl	801cee8 <ucdr_buffer_length>
 8024888:	462b      	mov	r3, r5
 802488a:	4602      	mov	r2, r0
 802488c:	a902      	add	r1, sp, #8
 802488e:	4620      	mov	r0, r4
 8024890:	f7ff ff10 	bl	80246b4 <wait_session_status>
 8024894:	b118      	cbz	r0, 802489e <uxr_delete_session_retries+0x4a>
 8024896:	7960      	ldrb	r0, [r4, #5]
 8024898:	fab0 f080 	clz	r0, r0
 802489c:	0940      	lsrs	r0, r0, #5
 802489e:	b00f      	add	sp, #60	@ 0x3c
 80248a0:	bd30      	pop	{r4, r5, pc}
 80248a2:	bf00      	nop

080248a4 <uxr_create_session>:
 80248a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248a8:	f100 0b08 	add.w	fp, r0, #8
 80248ac:	4604      	mov	r4, r0
 80248ae:	b0ab      	sub	sp, #172	@ 0xac
 80248b0:	4658      	mov	r0, fp
 80248b2:	465e      	mov	r6, fp
 80248b4:	f000 ff22 	bl	80256fc <uxr_reset_stream_storage>
 80248b8:	4620      	mov	r0, r4
 80248ba:	f000 fa05 	bl	8024cc8 <uxr_session_header_offset>
 80248be:	2300      	movs	r3, #0
 80248c0:	221c      	movs	r2, #28
 80248c2:	a90b      	add	r1, sp, #44	@ 0x2c
 80248c4:	9000      	str	r0, [sp, #0]
 80248c6:	a812      	add	r0, sp, #72	@ 0x48
 80248c8:	f7f8 face 	bl	801ce68 <ucdr_init_buffer_origin_offset>
 80248cc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80248ce:	a912      	add	r1, sp, #72	@ 0x48
 80248d0:	4620      	mov	r0, r4
 80248d2:	8a1a      	ldrh	r2, [r3, #16]
 80248d4:	3a04      	subs	r2, #4
 80248d6:	b292      	uxth	r2, r2
 80248d8:	f000 f91c 	bl	8024b14 <uxr_buffer_create_session>
 80248dc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80248de:	4620      	mov	r0, r4
 80248e0:	f000 f98a 	bl	8024bf8 <uxr_stamp_create_session_header>
 80248e4:	a812      	add	r0, sp, #72	@ 0x48
 80248e6:	f7f8 faff 	bl	801cee8 <ucdr_buffer_length>
 80248ea:	23ff      	movs	r3, #255	@ 0xff
 80248ec:	4681      	mov	r9, r0
 80248ee:	7163      	strb	r3, [r4, #5]
 80248f0:	230a      	movs	r3, #10
 80248f2:	9303      	str	r3, [sp, #12]
 80248f4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80248f6:	464a      	mov	r2, r9
 80248f8:	a90b      	add	r1, sp, #44	@ 0x2c
 80248fa:	e9d3 0500 	ldrd	r0, r5, [r3]
 80248fe:	47a8      	blx	r5
 8024900:	f001 f81c 	bl	802593c <uxr_millis>
 8024904:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8024908:	4605      	mov	r5, r0
 802490a:	e009      	b.n	8024920 <uxr_create_session+0x7c>
 802490c:	f001 f816 	bl	802593c <uxr_millis>
 8024910:	1b40      	subs	r0, r0, r5
 8024912:	7962      	ldrb	r2, [r4, #5]
 8024914:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8024918:	2b00      	cmp	r3, #0
 802491a:	dd38      	ble.n	802498e <uxr_create_session+0xea>
 802491c:	2aff      	cmp	r2, #255	@ 0xff
 802491e:	d13c      	bne.n	802499a <uxr_create_session+0xf6>
 8024920:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8024922:	a907      	add	r1, sp, #28
 8024924:	6897      	ldr	r7, [r2, #8]
 8024926:	6810      	ldr	r0, [r2, #0]
 8024928:	aa08      	add	r2, sp, #32
 802492a:	47b8      	blx	r7
 802492c:	2800      	cmp	r0, #0
 802492e:	d0ed      	beq.n	802490c <uxr_create_session+0x68>
 8024930:	a81a      	add	r0, sp, #104	@ 0x68
 8024932:	2700      	movs	r7, #0
 8024934:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8024938:	f7f8 faa8 	bl	801ce8c <ucdr_init_buffer>
 802493c:	f10d 031a 	add.w	r3, sp, #26
 8024940:	aa06      	add	r2, sp, #24
 8024942:	a91a      	add	r1, sp, #104	@ 0x68
 8024944:	4620      	mov	r0, r4
 8024946:	f88d 7018 	strb.w	r7, [sp, #24]
 802494a:	f000 f97d 	bl	8024c48 <uxr_read_session_header>
 802494e:	2800      	cmp	r0, #0
 8024950:	d0dc      	beq.n	802490c <uxr_create_session+0x68>
 8024952:	4639      	mov	r1, r7
 8024954:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8024958:	f000 fe9a 	bl	8025690 <uxr_stream_id_from_raw>
 802495c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8024960:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8024964:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8024968:	2f01      	cmp	r7, #1
 802496a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 802496e:	d053      	beq.n	8024a18 <uxr_create_session+0x174>
 8024970:	2f02      	cmp	r7, #2
 8024972:	d018      	beq.n	80249a6 <uxr_create_session+0x102>
 8024974:	2f00      	cmp	r7, #0
 8024976:	d1c9      	bne.n	802490c <uxr_create_session+0x68>
 8024978:	4639      	mov	r1, r7
 802497a:	4638      	mov	r0, r7
 802497c:	f000 fe88 	bl	8025690 <uxr_stream_id_from_raw>
 8024980:	a91a      	add	r1, sp, #104	@ 0x68
 8024982:	4602      	mov	r2, r0
 8024984:	900a      	str	r0, [sp, #40]	@ 0x28
 8024986:	4620      	mov	r0, r4
 8024988:	f7ff fb1c 	bl	8023fc4 <read_submessage_list>
 802498c:	e7be      	b.n	802490c <uxr_create_session+0x68>
 802498e:	9b03      	ldr	r3, [sp, #12]
 8024990:	3b01      	subs	r3, #1
 8024992:	9303      	str	r3, [sp, #12]
 8024994:	d001      	beq.n	802499a <uxr_create_session+0xf6>
 8024996:	2aff      	cmp	r2, #255	@ 0xff
 8024998:	d0ac      	beq.n	80248f4 <uxr_create_session+0x50>
 802499a:	2a00      	cmp	r2, #0
 802499c:	d051      	beq.n	8024a42 <uxr_create_session+0x19e>
 802499e:	2000      	movs	r0, #0
 80249a0:	b02b      	add	sp, #172	@ 0xac
 80249a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249a6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80249aa:	4641      	mov	r1, r8
 80249ac:	4630      	mov	r0, r6
 80249ae:	9304      	str	r3, [sp, #16]
 80249b0:	f000 ff5c 	bl	802586c <uxr_get_input_reliable_stream>
 80249b4:	4682      	mov	sl, r0
 80249b6:	b348      	cbz	r0, 8024a0c <uxr_create_session+0x168>
 80249b8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80249ba:	a81a      	add	r0, sp, #104	@ 0x68
 80249bc:	9205      	str	r2, [sp, #20]
 80249be:	f7f8 fa97 	bl	801cef0 <ucdr_buffer_remaining>
 80249c2:	4603      	mov	r3, r0
 80249c4:	f10d 0019 	add.w	r0, sp, #25
 80249c8:	9a05      	ldr	r2, [sp, #20]
 80249ca:	4659      	mov	r1, fp
 80249cc:	9000      	str	r0, [sp, #0]
 80249ce:	4650      	mov	r0, sl
 80249d0:	f002 ff4a 	bl	8027868 <uxr_receive_reliable_message>
 80249d4:	b1d0      	cbz	r0, 8024a0c <uxr_create_session+0x168>
 80249d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80249da:	2b00      	cmp	r3, #0
 80249dc:	d038      	beq.n	8024a50 <uxr_create_session+0x1ac>
 80249de:	9f04      	ldr	r7, [sp, #16]
 80249e0:	e00a      	b.n	80249f8 <uxr_create_session+0x154>
 80249e2:	f04f 0302 	mov.w	r3, #2
 80249e6:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 80249ea:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 80249ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80249f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80249f4:	f7ff fae6 	bl	8023fc4 <read_submessage_list>
 80249f8:	a922      	add	r1, sp, #136	@ 0x88
 80249fa:	2204      	movs	r2, #4
 80249fc:	4650      	mov	r0, sl
 80249fe:	f002 ffb5 	bl	802796c <uxr_next_input_reliable_buffer_available>
 8024a02:	4603      	mov	r3, r0
 8024a04:	a922      	add	r1, sp, #136	@ 0x88
 8024a06:	4620      	mov	r0, r4
 8024a08:	2b00      	cmp	r3, #0
 8024a0a:	d1ea      	bne.n	80249e2 <uxr_create_session+0x13e>
 8024a0c:	4642      	mov	r2, r8
 8024a0e:	9904      	ldr	r1, [sp, #16]
 8024a10:	4620      	mov	r0, r4
 8024a12:	f7ff f951 	bl	8023cb8 <write_submessage_acknack.isra.0>
 8024a16:	e779      	b.n	802490c <uxr_create_session+0x68>
 8024a18:	4641      	mov	r1, r8
 8024a1a:	4630      	mov	r0, r6
 8024a1c:	f000 ff1c 	bl	8025858 <uxr_get_input_best_effort_stream>
 8024a20:	2800      	cmp	r0, #0
 8024a22:	f43f af73 	beq.w	802490c <uxr_create_session+0x68>
 8024a26:	4659      	mov	r1, fp
 8024a28:	f002 fe94 	bl	8027754 <uxr_receive_best_effort_message>
 8024a2c:	2800      	cmp	r0, #0
 8024a2e:	f43f af6d 	beq.w	802490c <uxr_create_session+0x68>
 8024a32:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8024a36:	a91a      	add	r1, sp, #104	@ 0x68
 8024a38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024a3a:	4620      	mov	r0, r4
 8024a3c:	f7ff fac2 	bl	8023fc4 <read_submessage_list>
 8024a40:	e764      	b.n	802490c <uxr_create_session+0x68>
 8024a42:	4630      	mov	r0, r6
 8024a44:	f000 fe5a 	bl	80256fc <uxr_reset_stream_storage>
 8024a48:	2001      	movs	r0, #1
 8024a4a:	b02b      	add	sp, #172	@ 0xac
 8024a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a50:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8024a54:	a91a      	add	r1, sp, #104	@ 0x68
 8024a56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024a58:	4620      	mov	r0, r4
 8024a5a:	f7ff fab3 	bl	8023fc4 <read_submessage_list>
 8024a5e:	e7be      	b.n	80249de <uxr_create_session+0x13a>

08024a60 <uxr_prepare_stream_to_write_submessage>:
 8024a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024a64:	b082      	sub	sp, #8
 8024a66:	4604      	mov	r4, r0
 8024a68:	4610      	mov	r0, r2
 8024a6a:	4615      	mov	r5, r2
 8024a6c:	461e      	mov	r6, r3
 8024a6e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8024a72:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8024a76:	f105 0904 	add.w	r9, r5, #4
 8024a7a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8024a7e:	9101      	str	r1, [sp, #4]
 8024a80:	f000 ff56 	bl	8025930 <uxr_submessage_padding>
 8024a84:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8024a88:	4481      	add	r9, r0
 8024a8a:	2b01      	cmp	r3, #1
 8024a8c:	d01d      	beq.n	8024aca <uxr_prepare_stream_to_write_submessage+0x6a>
 8024a8e:	2b02      	cmp	r3, #2
 8024a90:	d116      	bne.n	8024ac0 <uxr_prepare_stream_to_write_submessage+0x60>
 8024a92:	f104 0008 	add.w	r0, r4, #8
 8024a96:	4651      	mov	r1, sl
 8024a98:	f000 fed2 	bl	8025840 <uxr_get_output_reliable_stream>
 8024a9c:	4604      	mov	r4, r0
 8024a9e:	b158      	cbz	r0, 8024ab8 <uxr_prepare_stream_to_write_submessage+0x58>
 8024aa0:	4649      	mov	r1, r9
 8024aa2:	4632      	mov	r2, r6
 8024aa4:	f003 f926 	bl	8027cf4 <uxr_prepare_reliable_buffer_to_write>
 8024aa8:	4604      	mov	r4, r0
 8024aaa:	b12c      	cbz	r4, 8024ab8 <uxr_prepare_stream_to_write_submessage+0x58>
 8024aac:	4643      	mov	r3, r8
 8024aae:	b2aa      	uxth	r2, r5
 8024ab0:	4639      	mov	r1, r7
 8024ab2:	4630      	mov	r0, r6
 8024ab4:	f000 fefc 	bl	80258b0 <uxr_buffer_submessage_header>
 8024ab8:	4620      	mov	r0, r4
 8024aba:	b002      	add	sp, #8
 8024abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024ac0:	2400      	movs	r4, #0
 8024ac2:	4620      	mov	r0, r4
 8024ac4:	b002      	add	sp, #8
 8024ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024aca:	f104 0008 	add.w	r0, r4, #8
 8024ace:	4651      	mov	r1, sl
 8024ad0:	f000 feae 	bl	8025830 <uxr_get_output_best_effort_stream>
 8024ad4:	4604      	mov	r4, r0
 8024ad6:	2800      	cmp	r0, #0
 8024ad8:	d0ee      	beq.n	8024ab8 <uxr_prepare_stream_to_write_submessage+0x58>
 8024ada:	4649      	mov	r1, r9
 8024adc:	4632      	mov	r2, r6
 8024ade:	f003 f835 	bl	8027b4c <uxr_prepare_best_effort_buffer_to_write>
 8024ae2:	4604      	mov	r4, r0
 8024ae4:	e7e1      	b.n	8024aaa <uxr_prepare_stream_to_write_submessage+0x4a>
 8024ae6:	bf00      	nop

08024ae8 <uxr_init_session_info>:
 8024ae8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8024aec:	23ff      	movs	r3, #255	@ 0xff
 8024aee:	7102      	strb	r2, [r0, #4]
 8024af0:	f880 c001 	strb.w	ip, [r0, #1]
 8024af4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8024af8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024afc:	7001      	strb	r1, [r0, #0]
 8024afe:	f880 c002 	strb.w	ip, [r0, #2]
 8024b02:	7143      	strb	r3, [r0, #5]
 8024b04:	70c2      	strb	r2, [r0, #3]
 8024b06:	b500      	push	{lr}
 8024b08:	f04f 0e09 	mov.w	lr, #9
 8024b0c:	f8a0 e006 	strh.w	lr, [r0, #6]
 8024b10:	f85d fb04 	ldr.w	pc, [sp], #4

08024b14 <uxr_buffer_create_session>:
 8024b14:	b530      	push	{r4, r5, lr}
 8024b16:	2300      	movs	r3, #0
 8024b18:	b089      	sub	sp, #36	@ 0x24
 8024b1a:	4d12      	ldr	r5, [pc, #72]	@ (8024b64 <uxr_buffer_create_session+0x50>)
 8024b1c:	460c      	mov	r4, r1
 8024b1e:	9307      	str	r3, [sp, #28]
 8024b20:	4619      	mov	r1, r3
 8024b22:	f8ad 201c 	strh.w	r2, [sp, #28]
 8024b26:	2201      	movs	r2, #1
 8024b28:	9301      	str	r3, [sp, #4]
 8024b2a:	80c2      	strh	r2, [r0, #6]
 8024b2c:	f88d 2004 	strb.w	r2, [sp, #4]
 8024b30:	682a      	ldr	r2, [r5, #0]
 8024b32:	9303      	str	r3, [sp, #12]
 8024b34:	9200      	str	r2, [sp, #0]
 8024b36:	88aa      	ldrh	r2, [r5, #4]
 8024b38:	9306      	str	r3, [sp, #24]
 8024b3a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8024b3e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8024b42:	9202      	str	r2, [sp, #8]
 8024b44:	7802      	ldrb	r2, [r0, #0]
 8024b46:	4620      	mov	r0, r4
 8024b48:	f88d 200c 	strb.w	r2, [sp, #12]
 8024b4c:	2210      	movs	r2, #16
 8024b4e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8024b52:	f000 fead 	bl	80258b0 <uxr_buffer_submessage_header>
 8024b56:	4669      	mov	r1, sp
 8024b58:	4620      	mov	r0, r4
 8024b5a:	f001 fcbb 	bl	80264d4 <uxr_serialize_CREATE_CLIENT_Payload>
 8024b5e:	b009      	add	sp, #36	@ 0x24
 8024b60:	bd30      	pop	{r4, r5, pc}
 8024b62:	bf00      	nop
 8024b64:	0802f340 	.word	0x0802f340

08024b68 <uxr_buffer_delete_session>:
 8024b68:	4a0c      	ldr	r2, [pc, #48]	@ (8024b9c <uxr_buffer_delete_session+0x34>)
 8024b6a:	2302      	movs	r3, #2
 8024b6c:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8024b70:	b510      	push	{r4, lr}
 8024b72:	460c      	mov	r4, r1
 8024b74:	b082      	sub	sp, #8
 8024b76:	8911      	ldrh	r1, [r2, #8]
 8024b78:	2204      	movs	r2, #4
 8024b7a:	80c3      	strh	r3, [r0, #6]
 8024b7c:	2300      	movs	r3, #0
 8024b7e:	f8ad 1006 	strh.w	r1, [sp, #6]
 8024b82:	4620      	mov	r0, r4
 8024b84:	2103      	movs	r1, #3
 8024b86:	f8ad c004 	strh.w	ip, [sp, #4]
 8024b8a:	f000 fe91 	bl	80258b0 <uxr_buffer_submessage_header>
 8024b8e:	a901      	add	r1, sp, #4
 8024b90:	4620      	mov	r0, r4
 8024b92:	f001 fd47 	bl	8026624 <uxr_serialize_DELETE_Payload>
 8024b96:	b002      	add	sp, #8
 8024b98:	bd10      	pop	{r4, pc}
 8024b9a:	bf00      	nop
 8024b9c:	0802f340 	.word	0x0802f340

08024ba0 <uxr_read_create_session_status>:
 8024ba0:	b510      	push	{r4, lr}
 8024ba2:	460b      	mov	r3, r1
 8024ba4:	b088      	sub	sp, #32
 8024ba6:	4604      	mov	r4, r0
 8024ba8:	a901      	add	r1, sp, #4
 8024baa:	4618      	mov	r0, r3
 8024bac:	f001 fd4a 	bl	8026644 <uxr_deserialize_STATUS_AGENT_Payload>
 8024bb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8024bb4:	7163      	strb	r3, [r4, #5]
 8024bb6:	b008      	add	sp, #32
 8024bb8:	bd10      	pop	{r4, pc}
 8024bba:	bf00      	nop

08024bbc <uxr_read_delete_session_status>:
 8024bbc:	b510      	push	{r4, lr}
 8024bbe:	b084      	sub	sp, #16
 8024bc0:	4604      	mov	r4, r0
 8024bc2:	4608      	mov	r0, r1
 8024bc4:	a902      	add	r1, sp, #8
 8024bc6:	f001 fd6d 	bl	80266a4 <uxr_deserialize_STATUS_Payload>
 8024bca:	88e3      	ldrh	r3, [r4, #6]
 8024bcc:	2b02      	cmp	r3, #2
 8024bce:	d001      	beq.n	8024bd4 <uxr_read_delete_session_status+0x18>
 8024bd0:	b004      	add	sp, #16
 8024bd2:	bd10      	pop	{r4, pc}
 8024bd4:	f10d 000a 	add.w	r0, sp, #10
 8024bd8:	f7fe fec4 	bl	8023964 <uxr_object_id_from_raw>
 8024bdc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8024be0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8024be4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8024be8:	b29b      	uxth	r3, r3
 8024bea:	2b02      	cmp	r3, #2
 8024bec:	d1f0      	bne.n	8024bd0 <uxr_read_delete_session_status+0x14>
 8024bee:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8024bf2:	7163      	strb	r3, [r4, #5]
 8024bf4:	e7ec      	b.n	8024bd0 <uxr_read_delete_session_status+0x14>
 8024bf6:	bf00      	nop

08024bf8 <uxr_stamp_create_session_header>:
 8024bf8:	b510      	push	{r4, lr}
 8024bfa:	2208      	movs	r2, #8
 8024bfc:	b08a      	sub	sp, #40	@ 0x28
 8024bfe:	4604      	mov	r4, r0
 8024c00:	eb0d 0002 	add.w	r0, sp, r2
 8024c04:	f7f8 f942 	bl	801ce8c <ucdr_init_buffer>
 8024c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024c0c:	2300      	movs	r3, #0
 8024c0e:	a802      	add	r0, sp, #8
 8024c10:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8024c14:	9400      	str	r4, [sp, #0]
 8024c16:	461a      	mov	r2, r3
 8024c18:	f000 fef2 	bl	8025a00 <uxr_serialize_message_header>
 8024c1c:	b00a      	add	sp, #40	@ 0x28
 8024c1e:	bd10      	pop	{r4, pc}

08024c20 <uxr_stamp_session_header>:
 8024c20:	b530      	push	{r4, r5, lr}
 8024c22:	b08d      	sub	sp, #52	@ 0x34
 8024c24:	4604      	mov	r4, r0
 8024c26:	460d      	mov	r5, r1
 8024c28:	4619      	mov	r1, r3
 8024c2a:	a804      	add	r0, sp, #16
 8024c2c:	9203      	str	r2, [sp, #12]
 8024c2e:	2208      	movs	r2, #8
 8024c30:	f7f8 f92c 	bl	801ce8c <ucdr_init_buffer>
 8024c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024c38:	9b03      	ldr	r3, [sp, #12]
 8024c3a:	462a      	mov	r2, r5
 8024c3c:	a804      	add	r0, sp, #16
 8024c3e:	9400      	str	r4, [sp, #0]
 8024c40:	f000 fede 	bl	8025a00 <uxr_serialize_message_header>
 8024c44:	b00d      	add	sp, #52	@ 0x34
 8024c46:	bd30      	pop	{r4, r5, pc}

08024c48 <uxr_read_session_header>:
 8024c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c4c:	4607      	mov	r7, r0
 8024c4e:	b084      	sub	sp, #16
 8024c50:	4608      	mov	r0, r1
 8024c52:	460c      	mov	r4, r1
 8024c54:	4615      	mov	r5, r2
 8024c56:	461e      	mov	r6, r3
 8024c58:	f7f8 f94a 	bl	801cef0 <ucdr_buffer_remaining>
 8024c5c:	2808      	cmp	r0, #8
 8024c5e:	d803      	bhi.n	8024c68 <uxr_read_session_header+0x20>
 8024c60:	2000      	movs	r0, #0
 8024c62:	b004      	add	sp, #16
 8024c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024c68:	f10d 080c 	add.w	r8, sp, #12
 8024c6c:	4633      	mov	r3, r6
 8024c6e:	462a      	mov	r2, r5
 8024c70:	4620      	mov	r0, r4
 8024c72:	f10d 010b 	add.w	r1, sp, #11
 8024c76:	f8cd 8000 	str.w	r8, [sp]
 8024c7a:	f000 fedf 	bl	8025a3c <uxr_deserialize_message_header>
 8024c7e:	783a      	ldrb	r2, [r7, #0]
 8024c80:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8024c84:	4293      	cmp	r3, r2
 8024c86:	d1eb      	bne.n	8024c60 <uxr_read_session_header+0x18>
 8024c88:	061b      	lsls	r3, r3, #24
 8024c8a:	d41b      	bmi.n	8024cc4 <uxr_read_session_header+0x7c>
 8024c8c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8024c90:	787b      	ldrb	r3, [r7, #1]
 8024c92:	429a      	cmp	r2, r3
 8024c94:	d003      	beq.n	8024c9e <uxr_read_session_header+0x56>
 8024c96:	2001      	movs	r0, #1
 8024c98:	f080 0001 	eor.w	r0, r0, #1
 8024c9c:	e7e1      	b.n	8024c62 <uxr_read_session_header+0x1a>
 8024c9e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8024ca2:	1cb8      	adds	r0, r7, #2
 8024ca4:	78bb      	ldrb	r3, [r7, #2]
 8024ca6:	429a      	cmp	r2, r3
 8024ca8:	d1f5      	bne.n	8024c96 <uxr_read_session_header+0x4e>
 8024caa:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8024cae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8024cb2:	429a      	cmp	r2, r3
 8024cb4:	d1ef      	bne.n	8024c96 <uxr_read_session_header+0x4e>
 8024cb6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8024cba:	7843      	ldrb	r3, [r0, #1]
 8024cbc:	429a      	cmp	r2, r3
 8024cbe:	d1ea      	bne.n	8024c96 <uxr_read_session_header+0x4e>
 8024cc0:	2000      	movs	r0, #0
 8024cc2:	e7e9      	b.n	8024c98 <uxr_read_session_header+0x50>
 8024cc4:	2001      	movs	r0, #1
 8024cc6:	e7cc      	b.n	8024c62 <uxr_read_session_header+0x1a>

08024cc8 <uxr_session_header_offset>:
 8024cc8:	f990 3000 	ldrsb.w	r3, [r0]
 8024ccc:	2b00      	cmp	r3, #0
 8024cce:	bfac      	ite	ge
 8024cd0:	2008      	movge	r0, #8
 8024cd2:	2004      	movlt	r0, #4
 8024cd4:	4770      	bx	lr
 8024cd6:	bf00      	nop

08024cd8 <uxr_init_base_object_request>:
 8024cd8:	b510      	push	{r4, lr}
 8024cda:	b082      	sub	sp, #8
 8024cdc:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8024ce0:	9101      	str	r1, [sp, #4]
 8024ce2:	88c3      	ldrh	r3, [r0, #6]
 8024ce4:	f1a3 010a 	sub.w	r1, r3, #10
 8024ce8:	b289      	uxth	r1, r1
 8024cea:	42a1      	cmp	r1, r4
 8024cec:	d80f      	bhi.n	8024d0e <uxr_init_base_object_request+0x36>
 8024cee:	3301      	adds	r3, #1
 8024cf0:	b29c      	uxth	r4, r3
 8024cf2:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8024cf6:	b2db      	uxtb	r3, r3
 8024cf8:	80c4      	strh	r4, [r0, #6]
 8024cfa:	1c91      	adds	r1, r2, #2
 8024cfc:	9801      	ldr	r0, [sp, #4]
 8024cfe:	f882 c000 	strb.w	ip, [r2]
 8024d02:	7053      	strb	r3, [r2, #1]
 8024d04:	f7fe fe42 	bl	802398c <uxr_object_id_to_raw>
 8024d08:	4620      	mov	r0, r4
 8024d0a:	b002      	add	sp, #8
 8024d0c:	bd10      	pop	{r4, pc}
 8024d0e:	230a      	movs	r3, #10
 8024d10:	f04f 0c00 	mov.w	ip, #0
 8024d14:	461c      	mov	r4, r3
 8024d16:	e7ef      	b.n	8024cf8 <uxr_init_base_object_request+0x20>

08024d18 <uxr_parse_base_object_request>:
 8024d18:	b570      	push	{r4, r5, r6, lr}
 8024d1a:	4604      	mov	r4, r0
 8024d1c:	3002      	adds	r0, #2
 8024d1e:	460d      	mov	r5, r1
 8024d20:	4616      	mov	r6, r2
 8024d22:	f7fe fe1f 	bl	8023964 <uxr_object_id_from_raw>
 8024d26:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8024d2a:	8028      	strh	r0, [r5, #0]
 8024d2c:	806b      	strh	r3, [r5, #2]
 8024d2e:	7822      	ldrb	r2, [r4, #0]
 8024d30:	7863      	ldrb	r3, [r4, #1]
 8024d32:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8024d36:	8033      	strh	r3, [r6, #0]
 8024d38:	bd70      	pop	{r4, r5, r6, pc}
 8024d3a:	bf00      	nop

08024d3c <uxr_init_framing_io>:
 8024d3c:	2300      	movs	r3, #0
 8024d3e:	7041      	strb	r1, [r0, #1]
 8024d40:	7003      	strb	r3, [r0, #0]
 8024d42:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8024d44:	4770      	bx	lr
 8024d46:	bf00      	nop

08024d48 <uxr_write_framed_msg>:
 8024d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d4c:	4617      	mov	r7, r2
 8024d4e:	7842      	ldrb	r2, [r0, #1]
 8024d50:	460e      	mov	r6, r1
 8024d52:	b083      	sub	sp, #12
 8024d54:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8024d58:	469b      	mov	fp, r3
 8024d5a:	237e      	movs	r3, #126	@ 0x7e
 8024d5c:	4604      	mov	r4, r0
 8024d5e:	2901      	cmp	r1, #1
 8024d60:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8024d64:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8024d68:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8024d6c:	f240 8115 	bls.w	8024f9a <uxr_write_framed_msg+0x252>
 8024d70:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8024d74:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8024d78:	2202      	movs	r2, #2
 8024d7a:	2901      	cmp	r1, #1
 8024d7c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8024d80:	d952      	bls.n	8024e28 <uxr_write_framed_msg+0xe0>
 8024d82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024d84:	2103      	movs	r1, #3
 8024d86:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8024d8a:	b2dd      	uxtb	r5, r3
 8024d8c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8024d90:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8024d94:	2a01      	cmp	r2, #1
 8024d96:	d95c      	bls.n	8024e52 <uxr_write_framed_msg+0x10a>
 8024d98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024d9a:	1862      	adds	r2, r4, r1
 8024d9c:	3101      	adds	r1, #1
 8024d9e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8024da2:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8024da6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8024daa:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8024dae:	2a01      	cmp	r2, #1
 8024db0:	d961      	bls.n	8024e76 <uxr_write_framed_msg+0x12e>
 8024db2:	1c4a      	adds	r2, r1, #1
 8024db4:	4421      	add	r1, r4
 8024db6:	b2d2      	uxtb	r2, r2
 8024db8:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8024dbc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8024dc0:	2b00      	cmp	r3, #0
 8024dc2:	d06a      	beq.n	8024e9a <uxr_write_framed_msg+0x152>
 8024dc4:	f04f 0800 	mov.w	r8, #0
 8024dc8:	46c1      	mov	r9, r8
 8024dca:	e016      	b.n	8024dfa <uxr_write_framed_msg+0xb2>
 8024dcc:	2a29      	cmp	r2, #41	@ 0x29
 8024dce:	d868      	bhi.n	8024ea2 <uxr_write_framed_msg+0x15a>
 8024dd0:	18a0      	adds	r0, r4, r2
 8024dd2:	3201      	adds	r2, #1
 8024dd4:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8024dd8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8024ddc:	ea88 0101 	eor.w	r1, r8, r1
 8024de0:	4b7d      	ldr	r3, [pc, #500]	@ (8024fd8 <uxr_write_framed_msg+0x290>)
 8024de2:	f109 0901 	add.w	r9, r9, #1
 8024de6:	b2c9      	uxtb	r1, r1
 8024de8:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8024dec:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8024df0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024df2:	454b      	cmp	r3, r9
 8024df4:	d969      	bls.n	8024eca <uxr_write_framed_msg+0x182>
 8024df6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8024dfa:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8024dfe:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8024e02:	2801      	cmp	r0, #1
 8024e04:	d8e2      	bhi.n	8024dcc <uxr_write_framed_msg+0x84>
 8024e06:	1c50      	adds	r0, r2, #1
 8024e08:	b2c0      	uxtb	r0, r0
 8024e0a:	2829      	cmp	r0, #41	@ 0x29
 8024e0c:	d849      	bhi.n	8024ea2 <uxr_write_framed_msg+0x15a>
 8024e0e:	18a0      	adds	r0, r4, r2
 8024e10:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8024e14:	3202      	adds	r2, #2
 8024e16:	f081 0520 	eor.w	r5, r1, #32
 8024e1a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8024e1e:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8024e22:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8024e26:	e7d9      	b.n	8024ddc <uxr_write_framed_msg+0x94>
 8024e28:	2104      	movs	r1, #4
 8024e2a:	f04f 0c03 	mov.w	ip, #3
 8024e2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e30:	4422      	add	r2, r4
 8024e32:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8024e36:	44a4      	add	ip, r4
 8024e38:	b2dd      	uxtb	r5, r3
 8024e3a:	f080 0020 	eor.w	r0, r0, #32
 8024e3e:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8024e42:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8024e46:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8024e4a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8024e4e:	2a01      	cmp	r2, #1
 8024e50:	d8a2      	bhi.n	8024d98 <uxr_write_framed_msg+0x50>
 8024e52:	1862      	adds	r2, r4, r1
 8024e54:	207d      	movs	r0, #125	@ 0x7d
 8024e56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e58:	f085 0520 	eor.w	r5, r5, #32
 8024e5c:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8024e60:	3102      	adds	r1, #2
 8024e62:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8024e66:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 8024e6a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8024e6e:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8024e72:	2a01      	cmp	r2, #1
 8024e74:	d89d      	bhi.n	8024db2 <uxr_write_framed_msg+0x6a>
 8024e76:	1c4d      	adds	r5, r1, #1
 8024e78:	1c8a      	adds	r2, r1, #2
 8024e7a:	f080 0020 	eor.w	r0, r0, #32
 8024e7e:	4421      	add	r1, r4
 8024e80:	fa54 f585 	uxtab	r5, r4, r5
 8024e84:	b2d2      	uxtb	r2, r2
 8024e86:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8024e8a:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8024e8e:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8024e92:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8024e96:	2b00      	cmp	r3, #0
 8024e98:	d194      	bne.n	8024dc4 <uxr_write_framed_msg+0x7c>
 8024e9a:	4619      	mov	r1, r3
 8024e9c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8024ea0:	e019      	b.n	8024ed6 <uxr_write_framed_msg+0x18e>
 8024ea2:	2500      	movs	r5, #0
 8024ea4:	e000      	b.n	8024ea8 <uxr_write_framed_msg+0x160>
 8024ea6:	b160      	cbz	r0, 8024ec2 <uxr_write_framed_msg+0x17a>
 8024ea8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8024eac:	1b52      	subs	r2, r2, r5
 8024eae:	4653      	mov	r3, sl
 8024eb0:	4638      	mov	r0, r7
 8024eb2:	4421      	add	r1, r4
 8024eb4:	47b0      	blx	r6
 8024eb6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8024eba:	4405      	add	r5, r0
 8024ebc:	4295      	cmp	r5, r2
 8024ebe:	d3f2      	bcc.n	8024ea6 <uxr_write_framed_msg+0x15e>
 8024ec0:	d066      	beq.n	8024f90 <uxr_write_framed_msg+0x248>
 8024ec2:	2000      	movs	r0, #0
 8024ec4:	b003      	add	sp, #12
 8024ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024eca:	fa5f f188 	uxtb.w	r1, r8
 8024ece:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8024ed2:	f8ad 8004 	strh.w	r8, [sp, #4]
 8024ed6:	f04f 0900 	mov.w	r9, #0
 8024eda:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8024ede:	46c8      	mov	r8, r9
 8024ee0:	e013      	b.n	8024f0a <uxr_write_framed_msg+0x1c2>
 8024ee2:	2a29      	cmp	r2, #41	@ 0x29
 8024ee4:	d824      	bhi.n	8024f30 <uxr_write_framed_msg+0x1e8>
 8024ee6:	18a3      	adds	r3, r4, r2
 8024ee8:	3201      	adds	r2, #1
 8024eea:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8024eee:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8024ef2:	f109 0901 	add.w	r9, r9, #1
 8024ef6:	f1b9 0f02 	cmp.w	r9, #2
 8024efa:	d02d      	beq.n	8024f58 <uxr_write_framed_msg+0x210>
 8024efc:	f109 0308 	add.w	r3, r9, #8
 8024f00:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8024f04:	446b      	add	r3, sp
 8024f06:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8024f0a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8024f0e:	2b01      	cmp	r3, #1
 8024f10:	d8e7      	bhi.n	8024ee2 <uxr_write_framed_msg+0x19a>
 8024f12:	1c53      	adds	r3, r2, #1
 8024f14:	b2db      	uxtb	r3, r3
 8024f16:	2b29      	cmp	r3, #41	@ 0x29
 8024f18:	d80a      	bhi.n	8024f30 <uxr_write_framed_msg+0x1e8>
 8024f1a:	18a3      	adds	r3, r4, r2
 8024f1c:	f081 0120 	eor.w	r1, r1, #32
 8024f20:	3202      	adds	r2, #2
 8024f22:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8024f26:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8024f2a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8024f2e:	e7e0      	b.n	8024ef2 <uxr_write_framed_msg+0x1aa>
 8024f30:	2500      	movs	r5, #0
 8024f32:	e001      	b.n	8024f38 <uxr_write_framed_msg+0x1f0>
 8024f34:	2800      	cmp	r0, #0
 8024f36:	d0c4      	beq.n	8024ec2 <uxr_write_framed_msg+0x17a>
 8024f38:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8024f3c:	1b52      	subs	r2, r2, r5
 8024f3e:	4653      	mov	r3, sl
 8024f40:	4638      	mov	r0, r7
 8024f42:	4421      	add	r1, r4
 8024f44:	47b0      	blx	r6
 8024f46:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8024f4a:	4405      	add	r5, r0
 8024f4c:	4295      	cmp	r5, r2
 8024f4e:	d3f1      	bcc.n	8024f34 <uxr_write_framed_msg+0x1ec>
 8024f50:	d1b7      	bne.n	8024ec2 <uxr_write_framed_msg+0x17a>
 8024f52:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8024f56:	e7d1      	b.n	8024efc <uxr_write_framed_msg+0x1b4>
 8024f58:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8024f5c:	b19a      	cbz	r2, 8024f86 <uxr_write_framed_msg+0x23e>
 8024f5e:	2500      	movs	r5, #0
 8024f60:	e001      	b.n	8024f66 <uxr_write_framed_msg+0x21e>
 8024f62:	2800      	cmp	r0, #0
 8024f64:	d0ad      	beq.n	8024ec2 <uxr_write_framed_msg+0x17a>
 8024f66:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8024f6a:	1b52      	subs	r2, r2, r5
 8024f6c:	4653      	mov	r3, sl
 8024f6e:	4638      	mov	r0, r7
 8024f70:	4421      	add	r1, r4
 8024f72:	47b0      	blx	r6
 8024f74:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8024f78:	4405      	add	r5, r0
 8024f7a:	4295      	cmp	r5, r2
 8024f7c:	d3f1      	bcc.n	8024f62 <uxr_write_framed_msg+0x21a>
 8024f7e:	d1a0      	bne.n	8024ec2 <uxr_write_framed_msg+0x17a>
 8024f80:	2300      	movs	r3, #0
 8024f82:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8024f86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024f88:	b298      	uxth	r0, r3
 8024f8a:	b003      	add	sp, #12
 8024f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f90:	f04f 0300 	mov.w	r3, #0
 8024f94:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8024f98:	e72a      	b.n	8024df0 <uxr_write_framed_msg+0xa8>
 8024f9a:	217d      	movs	r1, #125	@ 0x7d
 8024f9c:	f082 0220 	eor.w	r2, r2, #32
 8024fa0:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8024fa4:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8024fa8:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8024fac:	2203      	movs	r2, #3
 8024fae:	2901      	cmp	r1, #1
 8024fb0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8024fb4:	d803      	bhi.n	8024fbe <uxr_write_framed_msg+0x276>
 8024fb6:	2105      	movs	r1, #5
 8024fb8:	f04f 0c04 	mov.w	ip, #4
 8024fbc:	e737      	b.n	8024e2e <uxr_write_framed_msg+0xe6>
 8024fbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024fc0:	2104      	movs	r1, #4
 8024fc2:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8024fc6:	b2dd      	uxtb	r5, r3
 8024fc8:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8024fcc:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8024fd0:	2a01      	cmp	r2, #1
 8024fd2:	f63f aee1 	bhi.w	8024d98 <uxr_write_framed_msg+0x50>
 8024fd6:	e73c      	b.n	8024e52 <uxr_write_framed_msg+0x10a>
 8024fd8:	0802fdcc 	.word	0x0802fdcc

08024fdc <uxr_framing_read_transport>:
 8024fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fe0:	4604      	mov	r4, r0
 8024fe2:	b085      	sub	sp, #20
 8024fe4:	4692      	mov	sl, r2
 8024fe6:	4689      	mov	r9, r1
 8024fe8:	461d      	mov	r5, r3
 8024fea:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8024fec:	f000 fca6 	bl	802593c <uxr_millis>
 8024ff0:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8024ff4:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8024ff8:	4680      	mov	r8, r0
 8024ffa:	42ba      	cmp	r2, r7
 8024ffc:	d05f      	beq.n	80250be <uxr_framing_read_transport+0xe2>
 8024ffe:	d817      	bhi.n	8025030 <uxr_framing_read_transport+0x54>
 8025000:	3f01      	subs	r7, #1
 8025002:	1aba      	subs	r2, r7, r2
 8025004:	2700      	movs	r7, #0
 8025006:	b2d2      	uxtb	r2, r2
 8025008:	42b2      	cmp	r2, r6
 802500a:	d81a      	bhi.n	8025042 <uxr_framing_read_transport+0x66>
 802500c:	19d3      	adds	r3, r2, r7
 802500e:	42b3      	cmp	r3, r6
 8025010:	d852      	bhi.n	80250b8 <uxr_framing_read_transport+0xdc>
 8025012:	b9d2      	cbnz	r2, 802504a <uxr_framing_read_transport+0x6e>
 8025014:	2600      	movs	r6, #0
 8025016:	f000 fc91 	bl	802593c <uxr_millis>
 802501a:	682b      	ldr	r3, [r5, #0]
 802501c:	eba0 0008 	sub.w	r0, r0, r8
 8025020:	1a1b      	subs	r3, r3, r0
 8025022:	4630      	mov	r0, r6
 8025024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025028:	602b      	str	r3, [r5, #0]
 802502a:	b005      	add	sp, #20
 802502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025030:	2f00      	cmp	r7, #0
 8025032:	d060      	beq.n	80250f6 <uxr_framing_read_transport+0x11a>
 8025034:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8025038:	3f01      	subs	r7, #1
 802503a:	b2d2      	uxtb	r2, r2
 802503c:	b2ff      	uxtb	r7, r7
 802503e:	42b2      	cmp	r2, r6
 8025040:	d9e4      	bls.n	802500c <uxr_framing_read_transport+0x30>
 8025042:	b2f2      	uxtb	r2, r6
 8025044:	2700      	movs	r7, #0
 8025046:	2a00      	cmp	r2, #0
 8025048:	d0e4      	beq.n	8025014 <uxr_framing_read_transport+0x38>
 802504a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802504c:	4650      	mov	r0, sl
 802504e:	9203      	str	r2, [sp, #12]
 8025050:	9300      	str	r3, [sp, #0]
 8025052:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8025056:	682b      	ldr	r3, [r5, #0]
 8025058:	3102      	adds	r1, #2
 802505a:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8025100 <uxr_framing_read_transport+0x124>
 802505e:	4421      	add	r1, r4
 8025060:	47c8      	blx	r9
 8025062:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8025066:	4606      	mov	r6, r0
 8025068:	4403      	add	r3, r0
 802506a:	0859      	lsrs	r1, r3, #1
 802506c:	fbab 2101 	umull	r2, r1, fp, r1
 8025070:	222a      	movs	r2, #42	@ 0x2a
 8025072:	0889      	lsrs	r1, r1, #2
 8025074:	fb02 3111 	mls	r1, r2, r1, r3
 8025078:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 802507c:	2800      	cmp	r0, #0
 802507e:	d0c9      	beq.n	8025014 <uxr_framing_read_transport+0x38>
 8025080:	9a03      	ldr	r2, [sp, #12]
 8025082:	4290      	cmp	r0, r2
 8025084:	d1c7      	bne.n	8025016 <uxr_framing_read_transport+0x3a>
 8025086:	2f00      	cmp	r7, #0
 8025088:	d0c5      	beq.n	8025016 <uxr_framing_read_transport+0x3a>
 802508a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802508c:	3102      	adds	r1, #2
 802508e:	463a      	mov	r2, r7
 8025090:	4650      	mov	r0, sl
 8025092:	4421      	add	r1, r4
 8025094:	9300      	str	r3, [sp, #0]
 8025096:	2300      	movs	r3, #0
 8025098:	47c8      	blx	r9
 802509a:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 802509e:	4406      	add	r6, r0
 80250a0:	1813      	adds	r3, r2, r0
 80250a2:	085a      	lsrs	r2, r3, #1
 80250a4:	fbab 1b02 	umull	r1, fp, fp, r2
 80250a8:	222a      	movs	r2, #42	@ 0x2a
 80250aa:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80250ae:	fb02 331b 	mls	r3, r2, fp, r3
 80250b2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80250b6:	e7ae      	b.n	8025016 <uxr_framing_read_transport+0x3a>
 80250b8:	1ab6      	subs	r6, r6, r2
 80250ba:	b2f7      	uxtb	r7, r6
 80250bc:	e7a9      	b.n	8025012 <uxr_framing_read_transport+0x36>
 80250be:	2300      	movs	r3, #0
 80250c0:	2e28      	cmp	r6, #40	@ 0x28
 80250c2:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 80250c4:	d9bd      	bls.n	8025042 <uxr_framing_read_transport+0x66>
 80250c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80250c8:	2229      	movs	r2, #41	@ 0x29
 80250ca:	1ca1      	adds	r1, r4, #2
 80250cc:	4650      	mov	r0, sl
 80250ce:	9300      	str	r3, [sp, #0]
 80250d0:	682b      	ldr	r3, [r5, #0]
 80250d2:	47c8      	blx	r9
 80250d4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80250d8:	4606      	mov	r6, r0
 80250da:	212a      	movs	r1, #42	@ 0x2a
 80250dc:	4403      	add	r3, r0
 80250de:	4808      	ldr	r0, [pc, #32]	@ (8025100 <uxr_framing_read_transport+0x124>)
 80250e0:	085a      	lsrs	r2, r3, #1
 80250e2:	fba0 0202 	umull	r0, r2, r0, r2
 80250e6:	0892      	lsrs	r2, r2, #2
 80250e8:	fb01 3312 	mls	r3, r1, r2, r3
 80250ec:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80250f0:	2e00      	cmp	r6, #0
 80250f2:	d08f      	beq.n	8025014 <uxr_framing_read_transport+0x38>
 80250f4:	e78f      	b.n	8025016 <uxr_framing_read_transport+0x3a>
 80250f6:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 80250fa:	b2d2      	uxtb	r2, r2
 80250fc:	e784      	b.n	8025008 <uxr_framing_read_transport+0x2c>
 80250fe:	bf00      	nop
 8025100:	30c30c31 	.word	0x30c30c31

08025104 <uxr_read_framed_msg>:
 8025104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025108:	461e      	mov	r6, r3
 802510a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 802510e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8025112:	b083      	sub	sp, #12
 8025114:	4604      	mov	r4, r0
 8025116:	4688      	mov	r8, r1
 8025118:	429d      	cmp	r5, r3
 802511a:	4691      	mov	r9, r2
 802511c:	f000 818c 	beq.w	8025438 <uxr_read_framed_msg+0x334>
 8025120:	7823      	ldrb	r3, [r4, #0]
 8025122:	4dc3      	ldr	r5, [pc, #780]	@ (8025430 <uxr_read_framed_msg+0x32c>)
 8025124:	4fc3      	ldr	r7, [pc, #780]	@ (8025434 <uxr_read_framed_msg+0x330>)
 8025126:	2b07      	cmp	r3, #7
 8025128:	d8fd      	bhi.n	8025126 <uxr_read_framed_msg+0x22>
 802512a:	e8df f013 	tbh	[pc, r3, lsl #1]
 802512e:	011c      	.short	0x011c
 8025130:	00d900fb 	.word	0x00d900fb
 8025134:	008f00ba 	.word	0x008f00ba
 8025138:	00320051 	.word	0x00320051
 802513c:	0008      	.short	0x0008
 802513e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8025142:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8025146:	4299      	cmp	r1, r3
 8025148:	f000 814d 	beq.w	80253e6 <uxr_read_framed_msg+0x2e2>
 802514c:	18e2      	adds	r2, r4, r3
 802514e:	7892      	ldrb	r2, [r2, #2]
 8025150:	2a7d      	cmp	r2, #125	@ 0x7d
 8025152:	f000 81b8 	beq.w	80254c6 <uxr_read_framed_msg+0x3c2>
 8025156:	3301      	adds	r3, #1
 8025158:	212a      	movs	r1, #42	@ 0x2a
 802515a:	2a7e      	cmp	r2, #126	@ 0x7e
 802515c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8025160:	fba5 c000 	umull	ip, r0, r5, r0
 8025164:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8025168:	fb01 3310 	mls	r3, r1, r0, r3
 802516c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8025170:	f000 8257 	beq.w	8025622 <uxr_read_framed_msg+0x51e>
 8025174:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8025176:	2000      	movs	r0, #0
 8025178:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 802517a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 802517e:	7020      	strb	r0, [r4, #0]
 8025180:	b29b      	uxth	r3, r3
 8025182:	4299      	cmp	r1, r3
 8025184:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8025186:	f000 8178 	beq.w	802547a <uxr_read_framed_msg+0x376>
 802518a:	2000      	movs	r0, #0
 802518c:	b003      	add	sp, #12
 802518e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025192:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8025196:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 802519a:	4298      	cmp	r0, r3
 802519c:	f000 8132 	beq.w	8025404 <uxr_read_framed_msg+0x300>
 80251a0:	18e2      	adds	r2, r4, r3
 80251a2:	7891      	ldrb	r1, [r2, #2]
 80251a4:	297d      	cmp	r1, #125	@ 0x7d
 80251a6:	f000 8170 	beq.w	802548a <uxr_read_framed_msg+0x386>
 80251aa:	3301      	adds	r3, #1
 80251ac:	202a      	movs	r0, #42	@ 0x2a
 80251ae:	297e      	cmp	r1, #126	@ 0x7e
 80251b0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80251b4:	fba5 c202 	umull	ip, r2, r5, r2
 80251b8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80251bc:	fb00 3312 	mls	r3, r0, r2, r3
 80251c0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80251c4:	f000 821d 	beq.w	8025602 <uxr_read_framed_msg+0x4fe>
 80251c8:	2307      	movs	r3, #7
 80251ca:	86a1      	strh	r1, [r4, #52]	@ 0x34
 80251cc:	7023      	strb	r3, [r4, #0]
 80251ce:	e7aa      	b.n	8025126 <uxr_read_framed_msg+0x22>
 80251d0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80251d2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80251d6:	459e      	cmp	lr, r3
 80251d8:	d827      	bhi.n	802522a <uxr_read_framed_msg+0x126>
 80251da:	e032      	b.n	8025242 <uxr_read_framed_msg+0x13e>
 80251dc:	fba5 b101 	umull	fp, r1, r5, r1
 80251e0:	f89c c002 	ldrb.w	ip, [ip, #2]
 80251e4:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 80251e8:	0889      	lsrs	r1, r1, #2
 80251ea:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80251ee:	fb0b 0111 	mls	r1, fp, r1, r0
 80251f2:	f000 80d4 	beq.w	802539e <uxr_read_framed_msg+0x29a>
 80251f6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80251fa:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 80251fe:	f000 80cb 	beq.w	8025398 <uxr_read_framed_msg+0x294>
 8025202:	f806 c003 	strb.w	ip, [r6, r3]
 8025206:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8025208:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 802520a:	ea80 010c 	eor.w	r1, r0, ip
 802520e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8025212:	3301      	adds	r3, #1
 8025214:	b2c9      	uxtb	r1, r1
 8025216:	b29b      	uxth	r3, r3
 8025218:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 802521c:	4573      	cmp	r3, lr
 802521e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8025220:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8025224:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8025226:	f080 811d 	bcs.w	8025464 <uxr_read_framed_msg+0x360>
 802522a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 802522e:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8025232:	1c50      	adds	r0, r2, #1
 8025234:	eb04 0c02 	add.w	ip, r4, r2
 8025238:	4592      	cmp	sl, r2
 802523a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 802523e:	d1cd      	bne.n	80251dc <uxr_read_framed_msg+0xd8>
 8025240:	459e      	cmp	lr, r3
 8025242:	f040 8114 	bne.w	802546e <uxr_read_framed_msg+0x36a>
 8025246:	2306      	movs	r3, #6
 8025248:	7023      	strb	r3, [r4, #0]
 802524a:	e76c      	b.n	8025126 <uxr_read_framed_msg+0x22>
 802524c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8025250:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8025254:	4298      	cmp	r0, r3
 8025256:	f000 80c6 	beq.w	80253e6 <uxr_read_framed_msg+0x2e2>
 802525a:	18e2      	adds	r2, r4, r3
 802525c:	7891      	ldrb	r1, [r2, #2]
 802525e:	297d      	cmp	r1, #125	@ 0x7d
 8025260:	f000 8193 	beq.w	802558a <uxr_read_framed_msg+0x486>
 8025264:	3301      	adds	r3, #1
 8025266:	202a      	movs	r0, #42	@ 0x2a
 8025268:	297e      	cmp	r1, #126	@ 0x7e
 802526a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 802526e:	fba5 c202 	umull	ip, r2, r5, r2
 8025272:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8025276:	fb00 3312 	mls	r3, r0, r2, r3
 802527a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 802527e:	f000 81d0 	beq.w	8025622 <uxr_read_framed_msg+0x51e>
 8025282:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8025284:	2000      	movs	r0, #0
 8025286:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 802528a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802528c:	8660      	strh	r0, [r4, #50]	@ 0x32
 802528e:	b29b      	uxth	r3, r3
 8025290:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8025292:	428b      	cmp	r3, r1
 8025294:	8623      	strh	r3, [r4, #48]	@ 0x30
 8025296:	f240 80e2 	bls.w	802545e <uxr_read_framed_msg+0x35a>
 802529a:	7020      	strb	r0, [r4, #0]
 802529c:	b003      	add	sp, #12
 802529e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80252a2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80252a6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80252aa:	4298      	cmp	r0, r3
 80252ac:	f000 80aa 	beq.w	8025404 <uxr_read_framed_msg+0x300>
 80252b0:	18e2      	adds	r2, r4, r3
 80252b2:	7891      	ldrb	r1, [r2, #2]
 80252b4:	297d      	cmp	r1, #125	@ 0x7d
 80252b6:	f000 8186 	beq.w	80255c6 <uxr_read_framed_msg+0x4c2>
 80252ba:	3301      	adds	r3, #1
 80252bc:	202a      	movs	r0, #42	@ 0x2a
 80252be:	297e      	cmp	r1, #126	@ 0x7e
 80252c0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80252c4:	fba5 c202 	umull	ip, r2, r5, r2
 80252c8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80252cc:	fb00 3312 	mls	r3, r0, r2, r3
 80252d0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80252d4:	f000 8195 	beq.w	8025602 <uxr_read_framed_msg+0x4fe>
 80252d8:	2304      	movs	r3, #4
 80252da:	8621      	strh	r1, [r4, #48]	@ 0x30
 80252dc:	7023      	strb	r3, [r4, #0]
 80252de:	e722      	b.n	8025126 <uxr_read_framed_msg+0x22>
 80252e0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80252e4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80252e8:	4290      	cmp	r0, r2
 80252ea:	f000 80b4 	beq.w	8025456 <uxr_read_framed_msg+0x352>
 80252ee:	18a3      	adds	r3, r4, r2
 80252f0:	7899      	ldrb	r1, [r3, #2]
 80252f2:	297d      	cmp	r1, #125	@ 0x7d
 80252f4:	f000 8107 	beq.w	8025506 <uxr_read_framed_msg+0x402>
 80252f8:	3201      	adds	r2, #1
 80252fa:	232a      	movs	r3, #42	@ 0x2a
 80252fc:	297e      	cmp	r1, #126	@ 0x7e
 80252fe:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8025302:	fba5 c000 	umull	ip, r0, r5, r0
 8025306:	ea4f 0090 	mov.w	r0, r0, lsr #2
 802530a:	fb03 2210 	mls	r2, r3, r0, r2
 802530e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8025312:	f000 818a 	beq.w	802562a <uxr_read_framed_msg+0x526>
 8025316:	7863      	ldrb	r3, [r4, #1]
 8025318:	428b      	cmp	r3, r1
 802531a:	bf0c      	ite	eq
 802531c:	2303      	moveq	r3, #3
 802531e:	2300      	movne	r3, #0
 8025320:	7023      	strb	r3, [r4, #0]
 8025322:	e700      	b.n	8025126 <uxr_read_framed_msg+0x22>
 8025324:	2300      	movs	r3, #0
 8025326:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 802532a:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 802532e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8025332:	4299      	cmp	r1, r3
 8025334:	d06a      	beq.n	802540c <uxr_read_framed_msg+0x308>
 8025336:	18e2      	adds	r2, r4, r3
 8025338:	7890      	ldrb	r0, [r2, #2]
 802533a:	287d      	cmp	r0, #125	@ 0x7d
 802533c:	f000 8100 	beq.w	8025540 <uxr_read_framed_msg+0x43c>
 8025340:	3301      	adds	r3, #1
 8025342:	212a      	movs	r1, #42	@ 0x2a
 8025344:	287e      	cmp	r0, #126	@ 0x7e
 8025346:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 802534a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 802534e:	fba5 c202 	umull	ip, r2, r5, r2
 8025352:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8025356:	fb01 3312 	mls	r3, r1, r2, r3
 802535a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 802535e:	d055      	beq.n	802540c <uxr_read_framed_msg+0x308>
 8025360:	2302      	movs	r3, #2
 8025362:	7023      	strb	r3, [r4, #0]
 8025364:	e6df      	b.n	8025126 <uxr_read_framed_msg+0x22>
 8025366:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 802536a:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 802536e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8025372:	1c5a      	adds	r2, r3, #1
 8025374:	459c      	cmp	ip, r3
 8025376:	eb04 0103 	add.w	r1, r4, r3
 802537a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 802537e:	f43f af04 	beq.w	802518a <uxr_read_framed_msg+0x86>
 8025382:	fba5 0303 	umull	r0, r3, r5, r3
 8025386:	7889      	ldrb	r1, [r1, #2]
 8025388:	089b      	lsrs	r3, r3, #2
 802538a:	297e      	cmp	r1, #126	@ 0x7e
 802538c:	fb0e 2313 	mls	r3, lr, r3, r2
 8025390:	b2db      	uxtb	r3, r3
 8025392:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8025396:	d1ec      	bne.n	8025372 <uxr_read_framed_msg+0x26e>
 8025398:	2301      	movs	r3, #1
 802539a:	7023      	strb	r3, [r4, #0]
 802539c:	e6c3      	b.n	8025126 <uxr_read_framed_msg+0x22>
 802539e:	1c50      	adds	r0, r2, #1
 80253a0:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 80253a4:	3202      	adds	r2, #2
 80253a6:	0841      	lsrs	r1, r0, #1
 80253a8:	fba5 c101 	umull	ip, r1, r5, r1
 80253ac:	0889      	lsrs	r1, r1, #2
 80253ae:	fb0b 0111 	mls	r1, fp, r1, r0
 80253b2:	1860      	adds	r0, r4, r1
 80253b4:	b2c9      	uxtb	r1, r1
 80253b6:	458a      	cmp	sl, r1
 80253b8:	f43f af42 	beq.w	8025240 <uxr_read_framed_msg+0x13c>
 80253bc:	0851      	lsrs	r1, r2, #1
 80253be:	7880      	ldrb	r0, [r0, #2]
 80253c0:	fba5 a101 	umull	sl, r1, r5, r1
 80253c4:	287e      	cmp	r0, #126	@ 0x7e
 80253c6:	f080 0c20 	eor.w	ip, r0, #32
 80253ca:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80253ce:	fb0b 2211 	mls	r2, fp, r1, r2
 80253d2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80253d6:	f47f af14 	bne.w	8025202 <uxr_read_framed_msg+0xfe>
 80253da:	459e      	cmp	lr, r3
 80253dc:	f43f af33 	beq.w	8025246 <uxr_read_framed_msg+0x142>
 80253e0:	2301      	movs	r3, #1
 80253e2:	7023      	strb	r3, [r4, #0]
 80253e4:	e69f      	b.n	8025126 <uxr_read_framed_msg+0x22>
 80253e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80253e8:	9300      	str	r3, [sp, #0]
 80253ea:	2301      	movs	r3, #1
 80253ec:	9301      	str	r3, [sp, #4]
 80253ee:	464a      	mov	r2, r9
 80253f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80253f2:	4641      	mov	r1, r8
 80253f4:	4620      	mov	r0, r4
 80253f6:	f7ff fdf1 	bl	8024fdc <uxr_framing_read_transport>
 80253fa:	2800      	cmp	r0, #0
 80253fc:	f43f aec5 	beq.w	802518a <uxr_read_framed_msg+0x86>
 8025400:	7823      	ldrb	r3, [r4, #0]
 8025402:	e690      	b.n	8025126 <uxr_read_framed_msg+0x22>
 8025404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025406:	9300      	str	r3, [sp, #0]
 8025408:	2302      	movs	r3, #2
 802540a:	e7ef      	b.n	80253ec <uxr_read_framed_msg+0x2e8>
 802540c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802540e:	464a      	mov	r2, r9
 8025410:	4641      	mov	r1, r8
 8025412:	4620      	mov	r0, r4
 8025414:	9300      	str	r3, [sp, #0]
 8025416:	2304      	movs	r3, #4
 8025418:	9301      	str	r3, [sp, #4]
 802541a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802541c:	f7ff fdde 	bl	8024fdc <uxr_framing_read_transport>
 8025420:	2800      	cmp	r0, #0
 8025422:	d1ed      	bne.n	8025400 <uxr_read_framed_msg+0x2fc>
 8025424:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8025428:	2b7e      	cmp	r3, #126	@ 0x7e
 802542a:	d0e9      	beq.n	8025400 <uxr_read_framed_msg+0x2fc>
 802542c:	e6ad      	b.n	802518a <uxr_read_framed_msg+0x86>
 802542e:	bf00      	nop
 8025430:	30c30c31 	.word	0x30c30c31
 8025434:	0802fdcc 	.word	0x0802fdcc
 8025438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802543a:	9300      	str	r3, [sp, #0]
 802543c:	2305      	movs	r3, #5
 802543e:	9301      	str	r3, [sp, #4]
 8025440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025442:	f7ff fdcb 	bl	8024fdc <uxr_framing_read_transport>
 8025446:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 802544a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 802544e:	429a      	cmp	r2, r3
 8025450:	f43f ae9b 	beq.w	802518a <uxr_read_framed_msg+0x86>
 8025454:	e664      	b.n	8025120 <uxr_read_framed_msg+0x1c>
 8025456:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025458:	9300      	str	r3, [sp, #0]
 802545a:	2303      	movs	r3, #3
 802545c:	e7c6      	b.n	80253ec <uxr_read_framed_msg+0x2e8>
 802545e:	2305      	movs	r3, #5
 8025460:	7023      	strb	r3, [r4, #0]
 8025462:	e660      	b.n	8025126 <uxr_read_framed_msg+0x22>
 8025464:	f43f aeef 	beq.w	8025246 <uxr_read_framed_msg+0x142>
 8025468:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 802546c:	d094      	beq.n	8025398 <uxr_read_framed_msg+0x294>
 802546e:	ebae 0303 	sub.w	r3, lr, r3
 8025472:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025474:	3302      	adds	r3, #2
 8025476:	9200      	str	r2, [sp, #0]
 8025478:	e7b8      	b.n	80253ec <uxr_read_framed_msg+0x2e8>
 802547a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 802547e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025480:	7013      	strb	r3, [r2, #0]
 8025482:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8025484:	b003      	add	sp, #12
 8025486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802548a:	1c59      	adds	r1, r3, #1
 802548c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8025490:	084a      	lsrs	r2, r1, #1
 8025492:	fba5 e202 	umull	lr, r2, r5, r2
 8025496:	0892      	lsrs	r2, r2, #2
 8025498:	fb0c 1212 	mls	r2, ip, r2, r1
 802549c:	b2d1      	uxtb	r1, r2
 802549e:	4288      	cmp	r0, r1
 80254a0:	d0b0      	beq.n	8025404 <uxr_read_framed_msg+0x300>
 80254a2:	3302      	adds	r3, #2
 80254a4:	4422      	add	r2, r4
 80254a6:	7891      	ldrb	r1, [r2, #2]
 80254a8:	085a      	lsrs	r2, r3, #1
 80254aa:	fba5 0202 	umull	r0, r2, r5, r2
 80254ae:	297e      	cmp	r1, #126	@ 0x7e
 80254b0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80254b4:	fb0c 3312 	mls	r3, ip, r2, r3
 80254b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80254bc:	f000 80a1 	beq.w	8025602 <uxr_read_framed_msg+0x4fe>
 80254c0:	f081 0120 	eor.w	r1, r1, #32
 80254c4:	e680      	b.n	80251c8 <uxr_read_framed_msg+0xc4>
 80254c6:	f103 0c01 	add.w	ip, r3, #1
 80254ca:	202a      	movs	r0, #42	@ 0x2a
 80254cc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80254d0:	fba5 e202 	umull	lr, r2, r5, r2
 80254d4:	0892      	lsrs	r2, r2, #2
 80254d6:	fb00 c212 	mls	r2, r0, r2, ip
 80254da:	fa5f fc82 	uxtb.w	ip, r2
 80254de:	4561      	cmp	r1, ip
 80254e0:	d081      	beq.n	80253e6 <uxr_read_framed_msg+0x2e2>
 80254e2:	3302      	adds	r3, #2
 80254e4:	4422      	add	r2, r4
 80254e6:	0859      	lsrs	r1, r3, #1
 80254e8:	7892      	ldrb	r2, [r2, #2]
 80254ea:	fba5 c101 	umull	ip, r1, r5, r1
 80254ee:	2a7e      	cmp	r2, #126	@ 0x7e
 80254f0:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80254f4:	fb00 3311 	mls	r3, r0, r1, r3
 80254f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80254fc:	f000 8091 	beq.w	8025622 <uxr_read_framed_msg+0x51e>
 8025500:	f082 0220 	eor.w	r2, r2, #32
 8025504:	e636      	b.n	8025174 <uxr_read_framed_msg+0x70>
 8025506:	1c51      	adds	r1, r2, #1
 8025508:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 802550c:	084b      	lsrs	r3, r1, #1
 802550e:	fba5 e303 	umull	lr, r3, r5, r3
 8025512:	089b      	lsrs	r3, r3, #2
 8025514:	fb0c 1313 	mls	r3, ip, r3, r1
 8025518:	b2d9      	uxtb	r1, r3
 802551a:	4288      	cmp	r0, r1
 802551c:	d09b      	beq.n	8025456 <uxr_read_framed_msg+0x352>
 802551e:	3202      	adds	r2, #2
 8025520:	4423      	add	r3, r4
 8025522:	0850      	lsrs	r0, r2, #1
 8025524:	789b      	ldrb	r3, [r3, #2]
 8025526:	fba5 1000 	umull	r1, r0, r5, r0
 802552a:	2b7e      	cmp	r3, #126	@ 0x7e
 802552c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8025530:	fb0c 2210 	mls	r2, ip, r0, r2
 8025534:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8025538:	d077      	beq.n	802562a <uxr_read_framed_msg+0x526>
 802553a:	f083 0120 	eor.w	r1, r3, #32
 802553e:	e6ea      	b.n	8025316 <uxr_read_framed_msg+0x212>
 8025540:	f103 0c01 	add.w	ip, r3, #1
 8025544:	202a      	movs	r0, #42	@ 0x2a
 8025546:	ea4f 025c 	mov.w	r2, ip, lsr #1
 802554a:	fba5 e202 	umull	lr, r2, r5, r2
 802554e:	0892      	lsrs	r2, r2, #2
 8025550:	fb00 c212 	mls	r2, r0, r2, ip
 8025554:	fa5f fc82 	uxtb.w	ip, r2
 8025558:	4561      	cmp	r1, ip
 802555a:	f43f af57 	beq.w	802540c <uxr_read_framed_msg+0x308>
 802555e:	3302      	adds	r3, #2
 8025560:	4422      	add	r2, r4
 8025562:	7891      	ldrb	r1, [r2, #2]
 8025564:	085a      	lsrs	r2, r3, #1
 8025566:	fba5 c202 	umull	ip, r2, r5, r2
 802556a:	297e      	cmp	r1, #126	@ 0x7e
 802556c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8025570:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8025574:	fb00 3312 	mls	r3, r0, r2, r3
 8025578:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 802557c:	f43f af46 	beq.w	802540c <uxr_read_framed_msg+0x308>
 8025580:	f081 0120 	eor.w	r1, r1, #32
 8025584:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8025588:	e6ea      	b.n	8025360 <uxr_read_framed_msg+0x25c>
 802558a:	1c59      	adds	r1, r3, #1
 802558c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8025590:	084a      	lsrs	r2, r1, #1
 8025592:	fba5 e202 	umull	lr, r2, r5, r2
 8025596:	0892      	lsrs	r2, r2, #2
 8025598:	fb0c 1212 	mls	r2, ip, r2, r1
 802559c:	b2d1      	uxtb	r1, r2
 802559e:	4288      	cmp	r0, r1
 80255a0:	f43f af21 	beq.w	80253e6 <uxr_read_framed_msg+0x2e2>
 80255a4:	3302      	adds	r3, #2
 80255a6:	4422      	add	r2, r4
 80255a8:	7891      	ldrb	r1, [r2, #2]
 80255aa:	085a      	lsrs	r2, r3, #1
 80255ac:	fba5 0202 	umull	r0, r2, r5, r2
 80255b0:	297e      	cmp	r1, #126	@ 0x7e
 80255b2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80255b6:	fb0c 3312 	mls	r3, ip, r2, r3
 80255ba:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80255be:	d030      	beq.n	8025622 <uxr_read_framed_msg+0x51e>
 80255c0:	f081 0120 	eor.w	r1, r1, #32
 80255c4:	e65d      	b.n	8025282 <uxr_read_framed_msg+0x17e>
 80255c6:	1c59      	adds	r1, r3, #1
 80255c8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80255cc:	084a      	lsrs	r2, r1, #1
 80255ce:	fba5 e202 	umull	lr, r2, r5, r2
 80255d2:	0892      	lsrs	r2, r2, #2
 80255d4:	fb0c 1212 	mls	r2, ip, r2, r1
 80255d8:	b2d1      	uxtb	r1, r2
 80255da:	4288      	cmp	r0, r1
 80255dc:	f43f af12 	beq.w	8025404 <uxr_read_framed_msg+0x300>
 80255e0:	3302      	adds	r3, #2
 80255e2:	4422      	add	r2, r4
 80255e4:	7891      	ldrb	r1, [r2, #2]
 80255e6:	085a      	lsrs	r2, r3, #1
 80255e8:	fba5 0202 	umull	r0, r2, r5, r2
 80255ec:	297e      	cmp	r1, #126	@ 0x7e
 80255ee:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80255f2:	fb0c 3312 	mls	r3, ip, r2, r3
 80255f6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80255fa:	d002      	beq.n	8025602 <uxr_read_framed_msg+0x4fe>
 80255fc:	f081 0120 	eor.w	r1, r1, #32
 8025600:	e66a      	b.n	80252d8 <uxr_read_framed_msg+0x1d4>
 8025602:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025604:	9300      	str	r3, [sp, #0]
 8025606:	2302      	movs	r3, #2
 8025608:	9301      	str	r3, [sp, #4]
 802560a:	464a      	mov	r2, r9
 802560c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802560e:	4641      	mov	r1, r8
 8025610:	4620      	mov	r0, r4
 8025612:	f7ff fce3 	bl	8024fdc <uxr_framing_read_transport>
 8025616:	2800      	cmp	r0, #0
 8025618:	f47f aef2 	bne.w	8025400 <uxr_read_framed_msg+0x2fc>
 802561c:	2301      	movs	r3, #1
 802561e:	7023      	strb	r3, [r4, #0]
 8025620:	e581      	b.n	8025126 <uxr_read_framed_msg+0x22>
 8025622:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025624:	9300      	str	r3, [sp, #0]
 8025626:	2301      	movs	r3, #1
 8025628:	e7ee      	b.n	8025608 <uxr_read_framed_msg+0x504>
 802562a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802562c:	9300      	str	r3, [sp, #0]
 802562e:	2303      	movs	r3, #3
 8025630:	e7ea      	b.n	8025608 <uxr_read_framed_msg+0x504>
 8025632:	bf00      	nop

08025634 <uxr_stream_id>:
 8025634:	2901      	cmp	r1, #1
 8025636:	4684      	mov	ip, r0
 8025638:	b500      	push	{lr}
 802563a:	b083      	sub	sp, #12
 802563c:	d01f      	beq.n	802567e <uxr_stream_id+0x4a>
 802563e:	2902      	cmp	r1, #2
 8025640:	f04f 0e00 	mov.w	lr, #0
 8025644:	d020      	beq.n	8025688 <uxr_stream_id+0x54>
 8025646:	2300      	movs	r3, #0
 8025648:	2000      	movs	r0, #0
 802564a:	f36e 0307 	bfi	r3, lr, #0, #8
 802564e:	f36c 230f 	bfi	r3, ip, #8, #8
 8025652:	f361 4317 	bfi	r3, r1, #16, #8
 8025656:	f362 631f 	bfi	r3, r2, #24, #8
 802565a:	fa5f fc83 	uxtb.w	ip, r3
 802565e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8025662:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8025666:	0e1b      	lsrs	r3, r3, #24
 8025668:	f36c 0007 	bfi	r0, ip, #0, #8
 802566c:	f361 200f 	bfi	r0, r1, #8, #8
 8025670:	f362 4017 	bfi	r0, r2, #16, #8
 8025674:	f363 601f 	bfi	r0, r3, #24, #8
 8025678:	b003      	add	sp, #12
 802567a:	f85d fb04 	ldr.w	pc, [sp], #4
 802567e:	f100 0e01 	add.w	lr, r0, #1
 8025682:	fa5f fe8e 	uxtb.w	lr, lr
 8025686:	e7de      	b.n	8025646 <uxr_stream_id+0x12>
 8025688:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 802568c:	e7db      	b.n	8025646 <uxr_stream_id+0x12>
 802568e:	bf00      	nop

08025690 <uxr_stream_id_from_raw>:
 8025690:	b082      	sub	sp, #8
 8025692:	b130      	cbz	r0, 80256a2 <uxr_stream_id_from_raw+0x12>
 8025694:	0603      	lsls	r3, r0, #24
 8025696:	d421      	bmi.n	80256dc <uxr_stream_id_from_raw+0x4c>
 8025698:	1e42      	subs	r2, r0, #1
 802569a:	f04f 0c01 	mov.w	ip, #1
 802569e:	b2d2      	uxtb	r2, r2
 80256a0:	e001      	b.n	80256a6 <uxr_stream_id_from_raw+0x16>
 80256a2:	4684      	mov	ip, r0
 80256a4:	4602      	mov	r2, r0
 80256a6:	2300      	movs	r3, #0
 80256a8:	f360 0307 	bfi	r3, r0, #0, #8
 80256ac:	2000      	movs	r0, #0
 80256ae:	f362 230f 	bfi	r3, r2, #8, #8
 80256b2:	f36c 4317 	bfi	r3, ip, #16, #8
 80256b6:	f361 631f 	bfi	r3, r1, #24, #8
 80256ba:	fa5f fc83 	uxtb.w	ip, r3
 80256be:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80256c2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80256c6:	0e1b      	lsrs	r3, r3, #24
 80256c8:	f36c 0007 	bfi	r0, ip, #0, #8
 80256cc:	f361 200f 	bfi	r0, r1, #8, #8
 80256d0:	f362 4017 	bfi	r0, r2, #16, #8
 80256d4:	f363 601f 	bfi	r0, r3, #24, #8
 80256d8:	b002      	add	sp, #8
 80256da:	4770      	bx	lr
 80256dc:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80256e0:	f04f 0c02 	mov.w	ip, #2
 80256e4:	e7df      	b.n	80256a6 <uxr_stream_id_from_raw+0x16>
 80256e6:	bf00      	nop

080256e8 <uxr_init_stream_storage>:
 80256e8:	2300      	movs	r3, #0
 80256ea:	7403      	strb	r3, [r0, #16]
 80256ec:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80256f0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80256f4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80256f8:	4770      	bx	lr
 80256fa:	bf00      	nop

080256fc <uxr_reset_stream_storage>:
 80256fc:	b570      	push	{r4, r5, r6, lr}
 80256fe:	7c03      	ldrb	r3, [r0, #16]
 8025700:	4604      	mov	r4, r0
 8025702:	b14b      	cbz	r3, 8025718 <uxr_reset_stream_storage+0x1c>
 8025704:	4606      	mov	r6, r0
 8025706:	2500      	movs	r5, #0
 8025708:	4630      	mov	r0, r6
 802570a:	3501      	adds	r5, #1
 802570c:	f002 fa18 	bl	8027b40 <uxr_reset_output_best_effort_stream>
 8025710:	7c23      	ldrb	r3, [r4, #16]
 8025712:	3610      	adds	r6, #16
 8025714:	42ab      	cmp	r3, r5
 8025716:	d8f7      	bhi.n	8025708 <uxr_reset_stream_storage+0xc>
 8025718:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 802571c:	b15b      	cbz	r3, 8025736 <uxr_reset_stream_storage+0x3a>
 802571e:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025722:	2500      	movs	r5, #0
 8025724:	4630      	mov	r0, r6
 8025726:	3501      	adds	r5, #1
 8025728:	f002 f810 	bl	802774c <uxr_reset_input_best_effort_stream>
 802572c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8025730:	3602      	adds	r6, #2
 8025732:	42ab      	cmp	r3, r5
 8025734:	d8f6      	bhi.n	8025724 <uxr_reset_stream_storage+0x28>
 8025736:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 802573a:	b15b      	cbz	r3, 8025754 <uxr_reset_stream_storage+0x58>
 802573c:	f104 0618 	add.w	r6, r4, #24
 8025740:	2500      	movs	r5, #0
 8025742:	4630      	mov	r0, r6
 8025744:	3501      	adds	r5, #1
 8025746:	f002 faa7 	bl	8027c98 <uxr_reset_output_reliable_stream>
 802574a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 802574e:	3628      	adds	r6, #40	@ 0x28
 8025750:	42ab      	cmp	r3, r5
 8025752:	d8f6      	bhi.n	8025742 <uxr_reset_stream_storage+0x46>
 8025754:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8025758:	b15b      	cbz	r3, 8025772 <uxr_reset_stream_storage+0x76>
 802575a:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 802575e:	2500      	movs	r5, #0
 8025760:	4630      	mov	r0, r6
 8025762:	3501      	adds	r5, #1
 8025764:	f002 f85e 	bl	8027824 <uxr_reset_input_reliable_stream>
 8025768:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 802576c:	3618      	adds	r6, #24
 802576e:	42ab      	cmp	r3, r5
 8025770:	d8f6      	bhi.n	8025760 <uxr_reset_stream_storage+0x64>
 8025772:	bd70      	pop	{r4, r5, r6, pc}

08025774 <uxr_add_output_best_effort_buffer>:
 8025774:	b510      	push	{r4, lr}
 8025776:	7c04      	ldrb	r4, [r0, #16]
 8025778:	b082      	sub	sp, #8
 802577a:	f104 0c01 	add.w	ip, r4, #1
 802577e:	f880 c010 	strb.w	ip, [r0, #16]
 8025782:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8025786:	f002 f9d1 	bl	8027b2c <uxr_init_output_best_effort_stream>
 802578a:	2201      	movs	r2, #1
 802578c:	4620      	mov	r0, r4
 802578e:	4611      	mov	r1, r2
 8025790:	b002      	add	sp, #8
 8025792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025796:	f7ff bf4d 	b.w	8025634 <uxr_stream_id>
 802579a:	bf00      	nop

0802579c <uxr_add_output_reliable_buffer>:
 802579c:	b510      	push	{r4, lr}
 802579e:	b084      	sub	sp, #16
 80257a0:	4684      	mov	ip, r0
 80257a2:	2028      	movs	r0, #40	@ 0x28
 80257a4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80257a8:	9400      	str	r4, [sp, #0]
 80257aa:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80257ae:	fb00 c004 	mla	r0, r0, r4, ip
 80257b2:	f104 0e01 	add.w	lr, r4, #1
 80257b6:	3018      	adds	r0, #24
 80257b8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80257bc:	f002 fa36 	bl	8027c2c <uxr_init_output_reliable_stream>
 80257c0:	2201      	movs	r2, #1
 80257c2:	2102      	movs	r1, #2
 80257c4:	4620      	mov	r0, r4
 80257c6:	b004      	add	sp, #16
 80257c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80257cc:	f7ff bf32 	b.w	8025634 <uxr_stream_id>

080257d0 <uxr_add_input_best_effort_buffer>:
 80257d0:	b510      	push	{r4, lr}
 80257d2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80257d6:	b082      	sub	sp, #8
 80257d8:	1c62      	adds	r2, r4, #1
 80257da:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80257de:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 80257e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80257e6:	f001 ffad 	bl	8027744 <uxr_init_input_best_effort_stream>
 80257ea:	2200      	movs	r2, #0
 80257ec:	2101      	movs	r1, #1
 80257ee:	4620      	mov	r0, r4
 80257f0:	b002      	add	sp, #8
 80257f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80257f6:	f7ff bf1d 	b.w	8025634 <uxr_stream_id>
 80257fa:	bf00      	nop

080257fc <uxr_add_input_reliable_buffer>:
 80257fc:	b510      	push	{r4, lr}
 80257fe:	b084      	sub	sp, #16
 8025800:	4684      	mov	ip, r0
 8025802:	2018      	movs	r0, #24
 8025804:	9c06      	ldr	r4, [sp, #24]
 8025806:	9400      	str	r4, [sp, #0]
 8025808:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 802580c:	fb00 c004 	mla	r0, r0, r4, ip
 8025810:	f104 0e01 	add.w	lr, r4, #1
 8025814:	3048      	adds	r0, #72	@ 0x48
 8025816:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 802581a:	f001 ffdd 	bl	80277d8 <uxr_init_input_reliable_stream>
 802581e:	2200      	movs	r2, #0
 8025820:	2102      	movs	r1, #2
 8025822:	4620      	mov	r0, r4
 8025824:	b004      	add	sp, #16
 8025826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802582a:	f7ff bf03 	b.w	8025634 <uxr_stream_id>
 802582e:	bf00      	nop

08025830 <uxr_get_output_best_effort_stream>:
 8025830:	7c03      	ldrb	r3, [r0, #16]
 8025832:	428b      	cmp	r3, r1
 8025834:	bf8c      	ite	hi
 8025836:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 802583a:	2000      	movls	r0, #0
 802583c:	4770      	bx	lr
 802583e:	bf00      	nop

08025840 <uxr_get_output_reliable_stream>:
 8025840:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8025844:	428b      	cmp	r3, r1
 8025846:	d904      	bls.n	8025852 <uxr_get_output_reliable_stream+0x12>
 8025848:	2328      	movs	r3, #40	@ 0x28
 802584a:	fb03 0001 	mla	r0, r3, r1, r0
 802584e:	3018      	adds	r0, #24
 8025850:	4770      	bx	lr
 8025852:	2000      	movs	r0, #0
 8025854:	4770      	bx	lr
 8025856:	bf00      	nop

08025858 <uxr_get_input_best_effort_stream>:
 8025858:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 802585c:	428b      	cmp	r3, r1
 802585e:	d903      	bls.n	8025868 <uxr_get_input_best_effort_stream+0x10>
 8025860:	3121      	adds	r1, #33	@ 0x21
 8025862:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8025866:	4770      	bx	lr
 8025868:	2000      	movs	r0, #0
 802586a:	4770      	bx	lr

0802586c <uxr_get_input_reliable_stream>:
 802586c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8025870:	428b      	cmp	r3, r1
 8025872:	d904      	bls.n	802587e <uxr_get_input_reliable_stream+0x12>
 8025874:	2318      	movs	r3, #24
 8025876:	fb03 0001 	mla	r0, r3, r1, r0
 802587a:	3048      	adds	r0, #72	@ 0x48
 802587c:	4770      	bx	lr
 802587e:	2000      	movs	r0, #0
 8025880:	4770      	bx	lr
 8025882:	bf00      	nop

08025884 <uxr_output_streams_confirmed>:
 8025884:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8025888:	b183      	cbz	r3, 80258ac <uxr_output_streams_confirmed+0x28>
 802588a:	b570      	push	{r4, r5, r6, lr}
 802588c:	4606      	mov	r6, r0
 802588e:	f100 0518 	add.w	r5, r0, #24
 8025892:	2400      	movs	r4, #0
 8025894:	e000      	b.n	8025898 <uxr_output_streams_confirmed+0x14>
 8025896:	b140      	cbz	r0, 80258aa <uxr_output_streams_confirmed+0x26>
 8025898:	4628      	mov	r0, r5
 802589a:	3401      	adds	r4, #1
 802589c:	f002 fc70 	bl	8028180 <uxr_is_output_up_to_date>
 80258a0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80258a4:	3528      	adds	r5, #40	@ 0x28
 80258a6:	42a3      	cmp	r3, r4
 80258a8:	d8f5      	bhi.n	8025896 <uxr_output_streams_confirmed+0x12>
 80258aa:	bd70      	pop	{r4, r5, r6, pc}
 80258ac:	2001      	movs	r0, #1
 80258ae:	4770      	bx	lr

080258b0 <uxr_buffer_submessage_header>:
 80258b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80258b2:	460e      	mov	r6, r1
 80258b4:	2104      	movs	r1, #4
 80258b6:	4604      	mov	r4, r0
 80258b8:	4615      	mov	r5, r2
 80258ba:	461f      	mov	r7, r3
 80258bc:	f7f7 fb02 	bl	801cec4 <ucdr_align_to>
 80258c0:	2301      	movs	r3, #1
 80258c2:	4631      	mov	r1, r6
 80258c4:	4620      	mov	r0, r4
 80258c6:	ea47 0203 	orr.w	r2, r7, r3
 80258ca:	7523      	strb	r3, [r4, #20]
 80258cc:	462b      	mov	r3, r5
 80258ce:	f000 f8d5 	bl	8025a7c <uxr_serialize_submessage_header>
 80258d2:	4620      	mov	r0, r4
 80258d4:	f7f7 fb0c 	bl	801cef0 <ucdr_buffer_remaining>
 80258d8:	42a8      	cmp	r0, r5
 80258da:	bf34      	ite	cc
 80258dc:	2000      	movcc	r0, #0
 80258de:	2001      	movcs	r0, #1
 80258e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80258e2:	bf00      	nop

080258e4 <uxr_read_submessage_header>:
 80258e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80258e8:	4604      	mov	r4, r0
 80258ea:	460d      	mov	r5, r1
 80258ec:	2104      	movs	r1, #4
 80258ee:	4616      	mov	r6, r2
 80258f0:	4698      	mov	r8, r3
 80258f2:	f7f7 fae7 	bl	801cec4 <ucdr_align_to>
 80258f6:	4620      	mov	r0, r4
 80258f8:	f7f7 fafa 	bl	801cef0 <ucdr_buffer_remaining>
 80258fc:	2803      	cmp	r0, #3
 80258fe:	bf8c      	ite	hi
 8025900:	2701      	movhi	r7, #1
 8025902:	2700      	movls	r7, #0
 8025904:	d802      	bhi.n	802590c <uxr_read_submessage_header+0x28>
 8025906:	4638      	mov	r0, r7
 8025908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802590c:	4633      	mov	r3, r6
 802590e:	4642      	mov	r2, r8
 8025910:	4620      	mov	r0, r4
 8025912:	4629      	mov	r1, r5
 8025914:	f000 f8c6 	bl	8025aa4 <uxr_deserialize_submessage_header>
 8025918:	f898 3000 	ldrb.w	r3, [r8]
 802591c:	4638      	mov	r0, r7
 802591e:	f003 0201 	and.w	r2, r3, #1
 8025922:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8025926:	f888 3000 	strb.w	r3, [r8]
 802592a:	7522      	strb	r2, [r4, #20]
 802592c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08025930 <uxr_submessage_padding>:
 8025930:	f010 0003 	ands.w	r0, r0, #3
 8025934:	bf18      	it	ne
 8025936:	f1c0 0004 	rsbne	r0, r0, #4
 802593a:	4770      	bx	lr

0802593c <uxr_millis>:
 802593c:	b510      	push	{r4, lr}
 802593e:	b084      	sub	sp, #16
 8025940:	2001      	movs	r0, #1
 8025942:	4669      	mov	r1, sp
 8025944:	f7dc f910 	bl	8001b68 <clock_gettime>
 8025948:	4908      	ldr	r1, [pc, #32]	@ (802596c <uxr_millis+0x30>)
 802594a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 802594e:	fba0 0301 	umull	r0, r3, r0, r1
 8025952:	1900      	adds	r0, r0, r4
 8025954:	fb01 3102 	mla	r1, r1, r2, r3
 8025958:	4a05      	ldr	r2, [pc, #20]	@ (8025970 <uxr_millis+0x34>)
 802595a:	f04f 0300 	mov.w	r3, #0
 802595e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8025962:	f7db f951 	bl	8000c08 <__aeabi_ldivmod>
 8025966:	b004      	add	sp, #16
 8025968:	bd10      	pop	{r4, pc}
 802596a:	bf00      	nop
 802596c:	3b9aca00 	.word	0x3b9aca00
 8025970:	000f4240 	.word	0x000f4240

08025974 <uxr_nanos>:
 8025974:	b510      	push	{r4, lr}
 8025976:	b084      	sub	sp, #16
 8025978:	2001      	movs	r0, #1
 802597a:	4669      	mov	r1, sp
 802597c:	f7dc f8f4 	bl	8001b68 <clock_gettime>
 8025980:	4a06      	ldr	r2, [pc, #24]	@ (802599c <uxr_nanos+0x28>)
 8025982:	9800      	ldr	r0, [sp, #0]
 8025984:	9902      	ldr	r1, [sp, #8]
 8025986:	fba0 0302 	umull	r0, r3, r0, r2
 802598a:	9c01      	ldr	r4, [sp, #4]
 802598c:	1840      	adds	r0, r0, r1
 802598e:	fb02 3304 	mla	r3, r2, r4, r3
 8025992:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8025996:	b004      	add	sp, #16
 8025998:	bd10      	pop	{r4, pc}
 802599a:	bf00      	nop
 802599c:	3b9aca00 	.word	0x3b9aca00

080259a0 <uxr_prepare_output_stream>:
 80259a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80259a2:	b087      	sub	sp, #28
 80259a4:	2707      	movs	r7, #7
 80259a6:	2500      	movs	r5, #0
 80259a8:	461c      	mov	r4, r3
 80259aa:	4606      	mov	r6, r0
 80259ac:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80259b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80259b2:	e9cd 7500 	strd	r7, r5, [sp]
 80259b6:	3204      	adds	r2, #4
 80259b8:	f7ff f852 	bl	8024a60 <uxr_prepare_stream_to_write_submessage>
 80259bc:	f080 0201 	eor.w	r2, r0, #1
 80259c0:	b2d2      	uxtb	r2, r2
 80259c2:	75a2      	strb	r2, [r4, #22]
 80259c4:	b112      	cbz	r2, 80259cc <uxr_prepare_output_stream+0x2c>
 80259c6:	4628      	mov	r0, r5
 80259c8:	b007      	add	sp, #28
 80259ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80259cc:	aa05      	add	r2, sp, #20
 80259ce:	9902      	ldr	r1, [sp, #8]
 80259d0:	4630      	mov	r0, r6
 80259d2:	f7ff f981 	bl	8024cd8 <uxr_init_base_object_request>
 80259d6:	a905      	add	r1, sp, #20
 80259d8:	4605      	mov	r5, r0
 80259da:	4620      	mov	r0, r4
 80259dc:	f000 fee2 	bl	80267a4 <uxr_serialize_WRITE_DATA_Payload_Data>
 80259e0:	69a6      	ldr	r6, [r4, #24]
 80259e2:	69e7      	ldr	r7, [r4, #28]
 80259e4:	4620      	mov	r0, r4
 80259e6:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80259ea:	1a52      	subs	r2, r2, r1
 80259ec:	f7f7 fa4e 	bl	801ce8c <ucdr_init_buffer>
 80259f0:	4620      	mov	r0, r4
 80259f2:	463a      	mov	r2, r7
 80259f4:	4631      	mov	r1, r6
 80259f6:	f7f7 fa1d 	bl	801ce34 <ucdr_set_on_full_buffer_callback>
 80259fa:	4628      	mov	r0, r5
 80259fc:	b007      	add	sp, #28
 80259fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08025a00 <uxr_serialize_message_header>:
 8025a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a02:	4616      	mov	r6, r2
 8025a04:	b083      	sub	sp, #12
 8025a06:	4604      	mov	r4, r0
 8025a08:	460d      	mov	r5, r1
 8025a0a:	9301      	str	r3, [sp, #4]
 8025a0c:	9f08      	ldr	r7, [sp, #32]
 8025a0e:	f7fc fe29 	bl	8022664 <ucdr_serialize_uint8_t>
 8025a12:	4631      	mov	r1, r6
 8025a14:	4620      	mov	r0, r4
 8025a16:	f7fc fe25 	bl	8022664 <ucdr_serialize_uint8_t>
 8025a1a:	9a01      	ldr	r2, [sp, #4]
 8025a1c:	2101      	movs	r1, #1
 8025a1e:	4620      	mov	r0, r4
 8025a20:	f7fc fecc 	bl	80227bc <ucdr_serialize_endian_uint16_t>
 8025a24:	062b      	lsls	r3, r5, #24
 8025a26:	d501      	bpl.n	8025a2c <uxr_serialize_message_header+0x2c>
 8025a28:	b003      	add	sp, #12
 8025a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a2c:	2204      	movs	r2, #4
 8025a2e:	4639      	mov	r1, r7
 8025a30:	4620      	mov	r0, r4
 8025a32:	b003      	add	sp, #12
 8025a34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8025a38:	f7fc bc6e 	b.w	8022318 <ucdr_serialize_array_uint8_t>

08025a3c <uxr_deserialize_message_header>:
 8025a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a3e:	4616      	mov	r6, r2
 8025a40:	b083      	sub	sp, #12
 8025a42:	4604      	mov	r4, r0
 8025a44:	460d      	mov	r5, r1
 8025a46:	9301      	str	r3, [sp, #4]
 8025a48:	9f08      	ldr	r7, [sp, #32]
 8025a4a:	f7fc fe21 	bl	8022690 <ucdr_deserialize_uint8_t>
 8025a4e:	4631      	mov	r1, r6
 8025a50:	4620      	mov	r0, r4
 8025a52:	f7fc fe1d 	bl	8022690 <ucdr_deserialize_uint8_t>
 8025a56:	9a01      	ldr	r2, [sp, #4]
 8025a58:	2101      	movs	r1, #1
 8025a5a:	4620      	mov	r0, r4
 8025a5c:	f7fc ffa2 	bl	80229a4 <ucdr_deserialize_endian_uint16_t>
 8025a60:	f995 3000 	ldrsb.w	r3, [r5]
 8025a64:	2b00      	cmp	r3, #0
 8025a66:	da01      	bge.n	8025a6c <uxr_deserialize_message_header+0x30>
 8025a68:	b003      	add	sp, #12
 8025a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a6c:	2204      	movs	r2, #4
 8025a6e:	4639      	mov	r1, r7
 8025a70:	4620      	mov	r0, r4
 8025a72:	b003      	add	sp, #12
 8025a74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8025a78:	f7fc bcb2 	b.w	80223e0 <ucdr_deserialize_array_uint8_t>

08025a7c <uxr_serialize_submessage_header>:
 8025a7c:	b530      	push	{r4, r5, lr}
 8025a7e:	4615      	mov	r5, r2
 8025a80:	b083      	sub	sp, #12
 8025a82:	4604      	mov	r4, r0
 8025a84:	9301      	str	r3, [sp, #4]
 8025a86:	f7fc fded 	bl	8022664 <ucdr_serialize_uint8_t>
 8025a8a:	4629      	mov	r1, r5
 8025a8c:	4620      	mov	r0, r4
 8025a8e:	f7fc fde9 	bl	8022664 <ucdr_serialize_uint8_t>
 8025a92:	9a01      	ldr	r2, [sp, #4]
 8025a94:	2101      	movs	r1, #1
 8025a96:	4620      	mov	r0, r4
 8025a98:	b003      	add	sp, #12
 8025a9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025a9e:	f7fc be8d 	b.w	80227bc <ucdr_serialize_endian_uint16_t>
 8025aa2:	bf00      	nop

08025aa4 <uxr_deserialize_submessage_header>:
 8025aa4:	b530      	push	{r4, r5, lr}
 8025aa6:	4615      	mov	r5, r2
 8025aa8:	b083      	sub	sp, #12
 8025aaa:	4604      	mov	r4, r0
 8025aac:	9301      	str	r3, [sp, #4]
 8025aae:	f7fc fdef 	bl	8022690 <ucdr_deserialize_uint8_t>
 8025ab2:	4629      	mov	r1, r5
 8025ab4:	4620      	mov	r0, r4
 8025ab6:	f7fc fdeb 	bl	8022690 <ucdr_deserialize_uint8_t>
 8025aba:	9a01      	ldr	r2, [sp, #4]
 8025abc:	2101      	movs	r1, #1
 8025abe:	4620      	mov	r0, r4
 8025ac0:	b003      	add	sp, #12
 8025ac2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025ac6:	f7fc bf6d 	b.w	80229a4 <ucdr_deserialize_endian_uint16_t>
 8025aca:	bf00      	nop

08025acc <uxr_serialize_CLIENT_Representation>:
 8025acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025ad0:	2204      	movs	r2, #4
 8025ad2:	460e      	mov	r6, r1
 8025ad4:	4605      	mov	r5, r0
 8025ad6:	f7fc fc1f 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8025ada:	4607      	mov	r7, r0
 8025adc:	2202      	movs	r2, #2
 8025ade:	1d31      	adds	r1, r6, #4
 8025ae0:	4628      	mov	r0, r5
 8025ae2:	f7fc fc19 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8025ae6:	4038      	ands	r0, r7
 8025ae8:	2202      	movs	r2, #2
 8025aea:	1db1      	adds	r1, r6, #6
 8025aec:	b2c7      	uxtb	r7, r0
 8025aee:	4628      	mov	r0, r5
 8025af0:	f7fc fc12 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8025af4:	2204      	movs	r2, #4
 8025af6:	4007      	ands	r7, r0
 8025af8:	f106 0108 	add.w	r1, r6, #8
 8025afc:	4628      	mov	r0, r5
 8025afe:	f7fc fc0b 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8025b02:	4007      	ands	r7, r0
 8025b04:	7b31      	ldrb	r1, [r6, #12]
 8025b06:	4628      	mov	r0, r5
 8025b08:	f7fc fdac 	bl	8022664 <ucdr_serialize_uint8_t>
 8025b0c:	7b71      	ldrb	r1, [r6, #13]
 8025b0e:	4007      	ands	r7, r0
 8025b10:	4628      	mov	r0, r5
 8025b12:	f7fc fd79 	bl	8022608 <ucdr_serialize_bool>
 8025b16:	7b73      	ldrb	r3, [r6, #13]
 8025b18:	ea07 0800 	and.w	r8, r7, r0
 8025b1c:	b93b      	cbnz	r3, 8025b2e <uxr_serialize_CLIENT_Representation+0x62>
 8025b1e:	8bb1      	ldrh	r1, [r6, #28]
 8025b20:	4628      	mov	r0, r5
 8025b22:	f7fc fdcb 	bl	80226bc <ucdr_serialize_uint16_t>
 8025b26:	ea08 0000 	and.w	r0, r8, r0
 8025b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025b2e:	6931      	ldr	r1, [r6, #16]
 8025b30:	4628      	mov	r0, r5
 8025b32:	f7fc ffad 	bl	8022a90 <ucdr_serialize_uint32_t>
 8025b36:	6933      	ldr	r3, [r6, #16]
 8025b38:	b1e3      	cbz	r3, 8025b74 <uxr_serialize_CLIENT_Representation+0xa8>
 8025b3a:	b1c0      	cbz	r0, 8025b6e <uxr_serialize_CLIENT_Representation+0xa2>
 8025b3c:	4637      	mov	r7, r6
 8025b3e:	f04f 0900 	mov.w	r9, #0
 8025b42:	e000      	b.n	8025b46 <uxr_serialize_CLIENT_Representation+0x7a>
 8025b44:	b19c      	cbz	r4, 8025b6e <uxr_serialize_CLIENT_Representation+0xa2>
 8025b46:	6979      	ldr	r1, [r7, #20]
 8025b48:	4628      	mov	r0, r5
 8025b4a:	f001 fde3 	bl	8027714 <ucdr_serialize_string>
 8025b4e:	69b9      	ldr	r1, [r7, #24]
 8025b50:	4604      	mov	r4, r0
 8025b52:	4628      	mov	r0, r5
 8025b54:	f001 fdde 	bl	8027714 <ucdr_serialize_string>
 8025b58:	f109 0901 	add.w	r9, r9, #1
 8025b5c:	6933      	ldr	r3, [r6, #16]
 8025b5e:	4004      	ands	r4, r0
 8025b60:	3708      	adds	r7, #8
 8025b62:	4599      	cmp	r9, r3
 8025b64:	b2e4      	uxtb	r4, r4
 8025b66:	d3ed      	bcc.n	8025b44 <uxr_serialize_CLIENT_Representation+0x78>
 8025b68:	ea08 0804 	and.w	r8, r8, r4
 8025b6c:	e7d7      	b.n	8025b1e <uxr_serialize_CLIENT_Representation+0x52>
 8025b6e:	f04f 0800 	mov.w	r8, #0
 8025b72:	e7d4      	b.n	8025b1e <uxr_serialize_CLIENT_Representation+0x52>
 8025b74:	ea08 0800 	and.w	r8, r8, r0
 8025b78:	e7d1      	b.n	8025b1e <uxr_serialize_CLIENT_Representation+0x52>
 8025b7a:	bf00      	nop

08025b7c <uxr_deserialize_CLIENT_Representation>:
 8025b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025b80:	2204      	movs	r2, #4
 8025b82:	460c      	mov	r4, r1
 8025b84:	4605      	mov	r5, r0
 8025b86:	f7fc fc2b 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 8025b8a:	4607      	mov	r7, r0
 8025b8c:	2202      	movs	r2, #2
 8025b8e:	1d21      	adds	r1, r4, #4
 8025b90:	4628      	mov	r0, r5
 8025b92:	f7fc fc25 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 8025b96:	4038      	ands	r0, r7
 8025b98:	2202      	movs	r2, #2
 8025b9a:	1da1      	adds	r1, r4, #6
 8025b9c:	b2c6      	uxtb	r6, r0
 8025b9e:	4628      	mov	r0, r5
 8025ba0:	f7fc fc1e 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 8025ba4:	2204      	movs	r2, #4
 8025ba6:	4006      	ands	r6, r0
 8025ba8:	f104 0108 	add.w	r1, r4, #8
 8025bac:	4628      	mov	r0, r5
 8025bae:	f7fc fc17 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 8025bb2:	4006      	ands	r6, r0
 8025bb4:	f104 010c 	add.w	r1, r4, #12
 8025bb8:	4628      	mov	r0, r5
 8025bba:	f7fc fd69 	bl	8022690 <ucdr_deserialize_uint8_t>
 8025bbe:	f104 010d 	add.w	r1, r4, #13
 8025bc2:	ea06 0700 	and.w	r7, r6, r0
 8025bc6:	4628      	mov	r0, r5
 8025bc8:	f7fc fd34 	bl	8022634 <ucdr_deserialize_bool>
 8025bcc:	7b63      	ldrb	r3, [r4, #13]
 8025bce:	4007      	ands	r7, r0
 8025bd0:	b93b      	cbnz	r3, 8025be2 <uxr_deserialize_CLIENT_Representation+0x66>
 8025bd2:	f104 011c 	add.w	r1, r4, #28
 8025bd6:	4628      	mov	r0, r5
 8025bd8:	f7fc fe70 	bl	80228bc <ucdr_deserialize_uint16_t>
 8025bdc:	4038      	ands	r0, r7
 8025bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025be2:	f104 0110 	add.w	r1, r4, #16
 8025be6:	4628      	mov	r0, r5
 8025be8:	f7fd f882 	bl	8022cf0 <ucdr_deserialize_uint32_t>
 8025bec:	6923      	ldr	r3, [r4, #16]
 8025bee:	2b01      	cmp	r3, #1
 8025bf0:	d903      	bls.n	8025bfa <uxr_deserialize_CLIENT_Representation+0x7e>
 8025bf2:	2301      	movs	r3, #1
 8025bf4:	2700      	movs	r7, #0
 8025bf6:	75ab      	strb	r3, [r5, #22]
 8025bf8:	e7eb      	b.n	8025bd2 <uxr_deserialize_CLIENT_Representation+0x56>
 8025bfa:	b30b      	cbz	r3, 8025c40 <uxr_deserialize_CLIENT_Representation+0xc4>
 8025bfc:	b1f0      	cbz	r0, 8025c3c <uxr_deserialize_CLIENT_Representation+0xc0>
 8025bfe:	46a0      	mov	r8, r4
 8025c00:	f04f 0900 	mov.w	r9, #0
 8025c04:	e000      	b.n	8025c08 <uxr_deserialize_CLIENT_Representation+0x8c>
 8025c06:	b1ce      	cbz	r6, 8025c3c <uxr_deserialize_CLIENT_Representation+0xc0>
 8025c08:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8025c0c:	f108 0808 	add.w	r8, r8, #8
 8025c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8025c14:	4628      	mov	r0, r5
 8025c16:	f001 fd8d 	bl	8027734 <ucdr_deserialize_string>
 8025c1a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8025c1e:	4606      	mov	r6, r0
 8025c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8025c24:	4628      	mov	r0, r5
 8025c26:	f109 0901 	add.w	r9, r9, #1
 8025c2a:	f001 fd83 	bl	8027734 <ucdr_deserialize_string>
 8025c2e:	6923      	ldr	r3, [r4, #16]
 8025c30:	4006      	ands	r6, r0
 8025c32:	4599      	cmp	r9, r3
 8025c34:	b2f6      	uxtb	r6, r6
 8025c36:	d3e6      	bcc.n	8025c06 <uxr_deserialize_CLIENT_Representation+0x8a>
 8025c38:	4037      	ands	r7, r6
 8025c3a:	e7ca      	b.n	8025bd2 <uxr_deserialize_CLIENT_Representation+0x56>
 8025c3c:	2700      	movs	r7, #0
 8025c3e:	e7c8      	b.n	8025bd2 <uxr_deserialize_CLIENT_Representation+0x56>
 8025c40:	4007      	ands	r7, r0
 8025c42:	e7c6      	b.n	8025bd2 <uxr_deserialize_CLIENT_Representation+0x56>

08025c44 <uxr_serialize_AGENT_Representation>:
 8025c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025c48:	2204      	movs	r2, #4
 8025c4a:	460f      	mov	r7, r1
 8025c4c:	4605      	mov	r5, r0
 8025c4e:	f7fc fb63 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8025c52:	4604      	mov	r4, r0
 8025c54:	2202      	movs	r2, #2
 8025c56:	1d39      	adds	r1, r7, #4
 8025c58:	4628      	mov	r0, r5
 8025c5a:	f7fc fb5d 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8025c5e:	4020      	ands	r0, r4
 8025c60:	2202      	movs	r2, #2
 8025c62:	1db9      	adds	r1, r7, #6
 8025c64:	b2c4      	uxtb	r4, r0
 8025c66:	4628      	mov	r0, r5
 8025c68:	f7fc fb56 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8025c6c:	7a39      	ldrb	r1, [r7, #8]
 8025c6e:	4004      	ands	r4, r0
 8025c70:	4628      	mov	r0, r5
 8025c72:	f7fc fcc9 	bl	8022608 <ucdr_serialize_bool>
 8025c76:	7a3b      	ldrb	r3, [r7, #8]
 8025c78:	ea00 0804 	and.w	r8, r0, r4
 8025c7c:	b913      	cbnz	r3, 8025c84 <uxr_serialize_AGENT_Representation+0x40>
 8025c7e:	4640      	mov	r0, r8
 8025c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025c84:	68f9      	ldr	r1, [r7, #12]
 8025c86:	4628      	mov	r0, r5
 8025c88:	f7fc ff02 	bl	8022a90 <ucdr_serialize_uint32_t>
 8025c8c:	68fb      	ldr	r3, [r7, #12]
 8025c8e:	b303      	cbz	r3, 8025cd2 <uxr_serialize_AGENT_Representation+0x8e>
 8025c90:	b1d0      	cbz	r0, 8025cc8 <uxr_serialize_AGENT_Representation+0x84>
 8025c92:	463e      	mov	r6, r7
 8025c94:	f04f 0900 	mov.w	r9, #0
 8025c98:	e000      	b.n	8025c9c <uxr_serialize_AGENT_Representation+0x58>
 8025c9a:	b1ac      	cbz	r4, 8025cc8 <uxr_serialize_AGENT_Representation+0x84>
 8025c9c:	6931      	ldr	r1, [r6, #16]
 8025c9e:	4628      	mov	r0, r5
 8025ca0:	f001 fd38 	bl	8027714 <ucdr_serialize_string>
 8025ca4:	6971      	ldr	r1, [r6, #20]
 8025ca6:	4604      	mov	r4, r0
 8025ca8:	4628      	mov	r0, r5
 8025caa:	f001 fd33 	bl	8027714 <ucdr_serialize_string>
 8025cae:	f109 0901 	add.w	r9, r9, #1
 8025cb2:	68fb      	ldr	r3, [r7, #12]
 8025cb4:	4004      	ands	r4, r0
 8025cb6:	3608      	adds	r6, #8
 8025cb8:	4599      	cmp	r9, r3
 8025cba:	b2e4      	uxtb	r4, r4
 8025cbc:	d3ed      	bcc.n	8025c9a <uxr_serialize_AGENT_Representation+0x56>
 8025cbe:	ea08 0804 	and.w	r8, r8, r4
 8025cc2:	4640      	mov	r0, r8
 8025cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025cc8:	f04f 0800 	mov.w	r8, #0
 8025ccc:	4640      	mov	r0, r8
 8025cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025cd2:	ea08 0800 	and.w	r8, r8, r0
 8025cd6:	e7d2      	b.n	8025c7e <uxr_serialize_AGENT_Representation+0x3a>

08025cd8 <uxr_serialize_DATAWRITER_Representation>:
 8025cd8:	b570      	push	{r4, r5, r6, lr}
 8025cda:	460d      	mov	r5, r1
 8025cdc:	7809      	ldrb	r1, [r1, #0]
 8025cde:	4606      	mov	r6, r0
 8025ce0:	f7fc fcc0 	bl	8022664 <ucdr_serialize_uint8_t>
 8025ce4:	4604      	mov	r4, r0
 8025ce6:	b130      	cbz	r0, 8025cf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8025ce8:	782b      	ldrb	r3, [r5, #0]
 8025cea:	2b02      	cmp	r3, #2
 8025cec:	d00c      	beq.n	8025d08 <uxr_serialize_DATAWRITER_Representation+0x30>
 8025cee:	2b03      	cmp	r3, #3
 8025cf0:	d010      	beq.n	8025d14 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8025cf2:	2b01      	cmp	r3, #1
 8025cf4:	d008      	beq.n	8025d08 <uxr_serialize_DATAWRITER_Representation+0x30>
 8025cf6:	2202      	movs	r2, #2
 8025cf8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8025cfc:	4630      	mov	r0, r6
 8025cfe:	f7fc fb0b 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8025d02:	4020      	ands	r0, r4
 8025d04:	b2c0      	uxtb	r0, r0
 8025d06:	bd70      	pop	{r4, r5, r6, pc}
 8025d08:	6869      	ldr	r1, [r5, #4]
 8025d0a:	4630      	mov	r0, r6
 8025d0c:	f001 fd02 	bl	8027714 <ucdr_serialize_string>
 8025d10:	4604      	mov	r4, r0
 8025d12:	e7f0      	b.n	8025cf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8025d14:	4629      	mov	r1, r5
 8025d16:	4630      	mov	r0, r6
 8025d18:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8025d1c:	3104      	adds	r1, #4
 8025d1e:	f7f7 f955 	bl	801cfcc <ucdr_serialize_sequence_uint8_t>
 8025d22:	4604      	mov	r4, r0
 8025d24:	e7e7      	b.n	8025cf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8025d26:	bf00      	nop

08025d28 <uxr_serialize_ObjectVariant.part.0>:
 8025d28:	b570      	push	{r4, r5, r6, lr}
 8025d2a:	780b      	ldrb	r3, [r1, #0]
 8025d2c:	460c      	mov	r4, r1
 8025d2e:	4605      	mov	r5, r0
 8025d30:	3b01      	subs	r3, #1
 8025d32:	2b0d      	cmp	r3, #13
 8025d34:	d854      	bhi.n	8025de0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8025d36:	e8df f003 	tbb	[pc, r3]
 8025d3a:	0730      	.short	0x0730
 8025d3c:	07071b1b 	.word	0x07071b1b
 8025d40:	0c530707 	.word	0x0c530707
 8025d44:	494e0c0c 	.word	0x494e0c0c
 8025d48:	3104      	adds	r1, #4
 8025d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025d4e:	f7ff bfc3 	b.w	8025cd8 <uxr_serialize_DATAWRITER_Representation>
 8025d52:	7909      	ldrb	r1, [r1, #4]
 8025d54:	f7fc fc86 	bl	8022664 <ucdr_serialize_uint8_t>
 8025d58:	b1e8      	cbz	r0, 8025d96 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8025d5a:	7923      	ldrb	r3, [r4, #4]
 8025d5c:	2b01      	cmp	r3, #1
 8025d5e:	d001      	beq.n	8025d64 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8025d60:	2b02      	cmp	r3, #2
 8025d62:	d13d      	bne.n	8025de0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8025d64:	68a1      	ldr	r1, [r4, #8]
 8025d66:	4628      	mov	r0, r5
 8025d68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025d6c:	f001 bcd2 	b.w	8027714 <ucdr_serialize_string>
 8025d70:	7909      	ldrb	r1, [r1, #4]
 8025d72:	f7fc fc77 	bl	8022664 <ucdr_serialize_uint8_t>
 8025d76:	4606      	mov	r6, r0
 8025d78:	b120      	cbz	r0, 8025d84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8025d7a:	7923      	ldrb	r3, [r4, #4]
 8025d7c:	2b02      	cmp	r3, #2
 8025d7e:	d039      	beq.n	8025df4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8025d80:	2b03      	cmp	r3, #3
 8025d82:	d02f      	beq.n	8025de4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8025d84:	2202      	movs	r2, #2
 8025d86:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8025d8a:	4628      	mov	r0, r5
 8025d8c:	f7fc fac4 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8025d90:	4030      	ands	r0, r6
 8025d92:	b2c0      	uxtb	r0, r0
 8025d94:	bd70      	pop	{r4, r5, r6, pc}
 8025d96:	2000      	movs	r0, #0
 8025d98:	bd70      	pop	{r4, r5, r6, pc}
 8025d9a:	7909      	ldrb	r1, [r1, #4]
 8025d9c:	f7fc fc62 	bl	8022664 <ucdr_serialize_uint8_t>
 8025da0:	4606      	mov	r6, r0
 8025da2:	b158      	cbz	r0, 8025dbc <uxr_serialize_ObjectVariant.part.0+0x94>
 8025da4:	7923      	ldrb	r3, [r4, #4]
 8025da6:	2b02      	cmp	r3, #2
 8025da8:	d003      	beq.n	8025db2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8025daa:	2b03      	cmp	r3, #3
 8025dac:	d028      	beq.n	8025e00 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8025dae:	2b01      	cmp	r3, #1
 8025db0:	d104      	bne.n	8025dbc <uxr_serialize_ObjectVariant.part.0+0x94>
 8025db2:	68a1      	ldr	r1, [r4, #8]
 8025db4:	4628      	mov	r0, r5
 8025db6:	f001 fcad 	bl	8027714 <ucdr_serialize_string>
 8025dba:	4606      	mov	r6, r0
 8025dbc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8025dc0:	4628      	mov	r0, r5
 8025dc2:	f7fd f98b 	bl	80230dc <ucdr_serialize_int16_t>
 8025dc6:	4030      	ands	r0, r6
 8025dc8:	b2c0      	uxtb	r0, r0
 8025dca:	bd70      	pop	{r4, r5, r6, pc}
 8025dcc:	3104      	adds	r1, #4
 8025dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025dd2:	f7ff be7b 	b.w	8025acc <uxr_serialize_CLIENT_Representation>
 8025dd6:	3104      	adds	r1, #4
 8025dd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025ddc:	f7ff bf32 	b.w	8025c44 <uxr_serialize_AGENT_Representation>
 8025de0:	2001      	movs	r0, #1
 8025de2:	bd70      	pop	{r4, r5, r6, pc}
 8025de4:	68a2      	ldr	r2, [r4, #8]
 8025de6:	f104 010c 	add.w	r1, r4, #12
 8025dea:	4628      	mov	r0, r5
 8025dec:	f7f7 f8ee 	bl	801cfcc <ucdr_serialize_sequence_uint8_t>
 8025df0:	4606      	mov	r6, r0
 8025df2:	e7c7      	b.n	8025d84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8025df4:	68a1      	ldr	r1, [r4, #8]
 8025df6:	4628      	mov	r0, r5
 8025df8:	f001 fc8c 	bl	8027714 <ucdr_serialize_string>
 8025dfc:	4606      	mov	r6, r0
 8025dfe:	e7c1      	b.n	8025d84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8025e00:	68a2      	ldr	r2, [r4, #8]
 8025e02:	f104 010c 	add.w	r1, r4, #12
 8025e06:	4628      	mov	r0, r5
 8025e08:	f7f7 f8e0 	bl	801cfcc <ucdr_serialize_sequence_uint8_t>
 8025e0c:	4606      	mov	r6, r0
 8025e0e:	e7d5      	b.n	8025dbc <uxr_serialize_ObjectVariant.part.0+0x94>

08025e10 <uxr_deserialize_DATAWRITER_Representation>:
 8025e10:	b570      	push	{r4, r5, r6, lr}
 8025e12:	4606      	mov	r6, r0
 8025e14:	460d      	mov	r5, r1
 8025e16:	f7fc fc3b 	bl	8022690 <ucdr_deserialize_uint8_t>
 8025e1a:	4604      	mov	r4, r0
 8025e1c:	b130      	cbz	r0, 8025e2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8025e1e:	782b      	ldrb	r3, [r5, #0]
 8025e20:	2b02      	cmp	r3, #2
 8025e22:	d00c      	beq.n	8025e3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8025e24:	2b03      	cmp	r3, #3
 8025e26:	d012      	beq.n	8025e4e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8025e28:	2b01      	cmp	r3, #1
 8025e2a:	d008      	beq.n	8025e3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8025e2c:	2202      	movs	r2, #2
 8025e2e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8025e32:	4630      	mov	r0, r6
 8025e34:	f7fc fad4 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 8025e38:	4020      	ands	r0, r4
 8025e3a:	b2c0      	uxtb	r0, r0
 8025e3c:	bd70      	pop	{r4, r5, r6, pc}
 8025e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8025e42:	6869      	ldr	r1, [r5, #4]
 8025e44:	4630      	mov	r0, r6
 8025e46:	f001 fc75 	bl	8027734 <ucdr_deserialize_string>
 8025e4a:	4604      	mov	r4, r0
 8025e4c:	e7ee      	b.n	8025e2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8025e4e:	1d2b      	adds	r3, r5, #4
 8025e50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8025e54:	f105 0108 	add.w	r1, r5, #8
 8025e58:	4630      	mov	r0, r6
 8025e5a:	f7f7 f8c9 	bl	801cff0 <ucdr_deserialize_sequence_uint8_t>
 8025e5e:	4604      	mov	r4, r0
 8025e60:	e7e4      	b.n	8025e2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8025e62:	bf00      	nop

08025e64 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8025e64:	b570      	push	{r4, r5, r6, lr}
 8025e66:	460d      	mov	r5, r1
 8025e68:	7809      	ldrb	r1, [r1, #0]
 8025e6a:	4606      	mov	r6, r0
 8025e6c:	f7fc fbcc 	bl	8022608 <ucdr_serialize_bool>
 8025e70:	782b      	ldrb	r3, [r5, #0]
 8025e72:	4604      	mov	r4, r0
 8025e74:	b94b      	cbnz	r3, 8025e8a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8025e76:	7a29      	ldrb	r1, [r5, #8]
 8025e78:	4630      	mov	r0, r6
 8025e7a:	f7fc fbc5 	bl	8022608 <ucdr_serialize_bool>
 8025e7e:	7a2b      	ldrb	r3, [r5, #8]
 8025e80:	4004      	ands	r4, r0
 8025e82:	b2e4      	uxtb	r4, r4
 8025e84:	b943      	cbnz	r3, 8025e98 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8025e86:	4620      	mov	r0, r4
 8025e88:	bd70      	pop	{r4, r5, r6, pc}
 8025e8a:	6869      	ldr	r1, [r5, #4]
 8025e8c:	4630      	mov	r0, r6
 8025e8e:	f001 fc41 	bl	8027714 <ucdr_serialize_string>
 8025e92:	4004      	ands	r4, r0
 8025e94:	b2e4      	uxtb	r4, r4
 8025e96:	e7ee      	b.n	8025e76 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8025e98:	68e9      	ldr	r1, [r5, #12]
 8025e9a:	4630      	mov	r0, r6
 8025e9c:	f001 fc3a 	bl	8027714 <ucdr_serialize_string>
 8025ea0:	4004      	ands	r4, r0
 8025ea2:	4620      	mov	r0, r4
 8025ea4:	bd70      	pop	{r4, r5, r6, pc}
 8025ea6:	bf00      	nop

08025ea8 <uxr_serialize_OBJK_Topic_Binary>:
 8025ea8:	b570      	push	{r4, r5, r6, lr}
 8025eaa:	460d      	mov	r5, r1
 8025eac:	4606      	mov	r6, r0
 8025eae:	6809      	ldr	r1, [r1, #0]
 8025eb0:	f001 fc30 	bl	8027714 <ucdr_serialize_string>
 8025eb4:	4604      	mov	r4, r0
 8025eb6:	7929      	ldrb	r1, [r5, #4]
 8025eb8:	4630      	mov	r0, r6
 8025eba:	f7fc fba5 	bl	8022608 <ucdr_serialize_bool>
 8025ebe:	792b      	ldrb	r3, [r5, #4]
 8025ec0:	4004      	ands	r4, r0
 8025ec2:	b2e4      	uxtb	r4, r4
 8025ec4:	b943      	cbnz	r3, 8025ed8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8025ec6:	7b29      	ldrb	r1, [r5, #12]
 8025ec8:	4630      	mov	r0, r6
 8025eca:	f7fc fb9d 	bl	8022608 <ucdr_serialize_bool>
 8025ece:	7b2b      	ldrb	r3, [r5, #12]
 8025ed0:	4004      	ands	r4, r0
 8025ed2:	b93b      	cbnz	r3, 8025ee4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8025ed4:	4620      	mov	r0, r4
 8025ed6:	bd70      	pop	{r4, r5, r6, pc}
 8025ed8:	68a9      	ldr	r1, [r5, #8]
 8025eda:	4630      	mov	r0, r6
 8025edc:	f001 fc1a 	bl	8027714 <ucdr_serialize_string>
 8025ee0:	4004      	ands	r4, r0
 8025ee2:	e7f0      	b.n	8025ec6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8025ee4:	6929      	ldr	r1, [r5, #16]
 8025ee6:	4630      	mov	r0, r6
 8025ee8:	f001 fc14 	bl	8027714 <ucdr_serialize_string>
 8025eec:	4004      	ands	r4, r0
 8025eee:	b2e4      	uxtb	r4, r4
 8025ef0:	4620      	mov	r0, r4
 8025ef2:	bd70      	pop	{r4, r5, r6, pc}

08025ef4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8025ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025ef8:	460c      	mov	r4, r1
 8025efa:	7809      	ldrb	r1, [r1, #0]
 8025efc:	4606      	mov	r6, r0
 8025efe:	f7fc fb83 	bl	8022608 <ucdr_serialize_bool>
 8025f02:	7823      	ldrb	r3, [r4, #0]
 8025f04:	4605      	mov	r5, r0
 8025f06:	b96b      	cbnz	r3, 8025f24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8025f08:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8025f0c:	4630      	mov	r0, r6
 8025f0e:	f7fc fb7b 	bl	8022608 <ucdr_serialize_bool>
 8025f12:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8025f16:	4005      	ands	r5, r0
 8025f18:	b2ed      	uxtb	r5, r5
 8025f1a:	2b00      	cmp	r3, #0
 8025f1c:	d169      	bne.n	8025ff2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8025f1e:	4628      	mov	r0, r5
 8025f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025f24:	6861      	ldr	r1, [r4, #4]
 8025f26:	4630      	mov	r0, r6
 8025f28:	f7fc fdb2 	bl	8022a90 <ucdr_serialize_uint32_t>
 8025f2c:	6863      	ldr	r3, [r4, #4]
 8025f2e:	2b00      	cmp	r3, #0
 8025f30:	d06b      	beq.n	802600a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8025f32:	2800      	cmp	r0, #0
 8025f34:	d067      	beq.n	8026006 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8025f36:	68a1      	ldr	r1, [r4, #8]
 8025f38:	4630      	mov	r0, r6
 8025f3a:	f001 fbeb 	bl	8027714 <ucdr_serialize_string>
 8025f3e:	6863      	ldr	r3, [r4, #4]
 8025f40:	2b01      	cmp	r3, #1
 8025f42:	d953      	bls.n	8025fec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8025f44:	2800      	cmp	r0, #0
 8025f46:	d05e      	beq.n	8026006 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8025f48:	68e1      	ldr	r1, [r4, #12]
 8025f4a:	4630      	mov	r0, r6
 8025f4c:	f001 fbe2 	bl	8027714 <ucdr_serialize_string>
 8025f50:	6863      	ldr	r3, [r4, #4]
 8025f52:	2b02      	cmp	r3, #2
 8025f54:	d94a      	bls.n	8025fec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8025f56:	2800      	cmp	r0, #0
 8025f58:	d055      	beq.n	8026006 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8025f5a:	6921      	ldr	r1, [r4, #16]
 8025f5c:	4630      	mov	r0, r6
 8025f5e:	f001 fbd9 	bl	8027714 <ucdr_serialize_string>
 8025f62:	6863      	ldr	r3, [r4, #4]
 8025f64:	2b03      	cmp	r3, #3
 8025f66:	d941      	bls.n	8025fec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8025f68:	2800      	cmp	r0, #0
 8025f6a:	d04c      	beq.n	8026006 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8025f6c:	6961      	ldr	r1, [r4, #20]
 8025f6e:	4630      	mov	r0, r6
 8025f70:	f001 fbd0 	bl	8027714 <ucdr_serialize_string>
 8025f74:	6863      	ldr	r3, [r4, #4]
 8025f76:	2b04      	cmp	r3, #4
 8025f78:	d938      	bls.n	8025fec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8025f7a:	2800      	cmp	r0, #0
 8025f7c:	d043      	beq.n	8026006 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8025f7e:	69a1      	ldr	r1, [r4, #24]
 8025f80:	4630      	mov	r0, r6
 8025f82:	f001 fbc7 	bl	8027714 <ucdr_serialize_string>
 8025f86:	6863      	ldr	r3, [r4, #4]
 8025f88:	2b05      	cmp	r3, #5
 8025f8a:	d92f      	bls.n	8025fec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8025f8c:	2800      	cmp	r0, #0
 8025f8e:	d03a      	beq.n	8026006 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8025f90:	69e1      	ldr	r1, [r4, #28]
 8025f92:	4630      	mov	r0, r6
 8025f94:	f001 fbbe 	bl	8027714 <ucdr_serialize_string>
 8025f98:	6863      	ldr	r3, [r4, #4]
 8025f9a:	2b06      	cmp	r3, #6
 8025f9c:	d926      	bls.n	8025fec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8025f9e:	b390      	cbz	r0, 8026006 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8025fa0:	6a21      	ldr	r1, [r4, #32]
 8025fa2:	4630      	mov	r0, r6
 8025fa4:	f001 fbb6 	bl	8027714 <ucdr_serialize_string>
 8025fa8:	6863      	ldr	r3, [r4, #4]
 8025faa:	2b07      	cmp	r3, #7
 8025fac:	d91e      	bls.n	8025fec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8025fae:	b350      	cbz	r0, 8026006 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8025fb0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8025fb2:	4630      	mov	r0, r6
 8025fb4:	f001 fbae 	bl	8027714 <ucdr_serialize_string>
 8025fb8:	6863      	ldr	r3, [r4, #4]
 8025fba:	2b08      	cmp	r3, #8
 8025fbc:	d916      	bls.n	8025fec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8025fbe:	b310      	cbz	r0, 8026006 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8025fc0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8025fc2:	4630      	mov	r0, r6
 8025fc4:	f001 fba6 	bl	8027714 <ucdr_serialize_string>
 8025fc8:	6863      	ldr	r3, [r4, #4]
 8025fca:	2b09      	cmp	r3, #9
 8025fcc:	d90e      	bls.n	8025fec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8025fce:	b1d0      	cbz	r0, 8026006 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8025fd0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8025fd4:	2709      	movs	r7, #9
 8025fd6:	e000      	b.n	8025fda <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8025fd8:	b1a8      	cbz	r0, 8026006 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8025fda:	f858 1b04 	ldr.w	r1, [r8], #4
 8025fde:	4630      	mov	r0, r6
 8025fe0:	f001 fb98 	bl	8027714 <ucdr_serialize_string>
 8025fe4:	3701      	adds	r7, #1
 8025fe6:	6862      	ldr	r2, [r4, #4]
 8025fe8:	4297      	cmp	r7, r2
 8025fea:	d3f5      	bcc.n	8025fd8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8025fec:	4005      	ands	r5, r0
 8025fee:	b2ed      	uxtb	r5, r5
 8025ff0:	e78a      	b.n	8025f08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8025ff2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8025ff4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8025ff8:	4630      	mov	r0, r6
 8025ffa:	f7f6 ffe7 	bl	801cfcc <ucdr_serialize_sequence_uint8_t>
 8025ffe:	4005      	ands	r5, r0
 8026000:	4628      	mov	r0, r5
 8026002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026006:	2500      	movs	r5, #0
 8026008:	e77e      	b.n	8025f08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 802600a:	4028      	ands	r0, r5
 802600c:	b2c5      	uxtb	r5, r0
 802600e:	e77b      	b.n	8025f08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08026010 <uxr_serialize_OBJK_Subscriber_Binary>:
 8026010:	b570      	push	{r4, r5, r6, lr}
 8026012:	460d      	mov	r5, r1
 8026014:	7809      	ldrb	r1, [r1, #0]
 8026016:	4606      	mov	r6, r0
 8026018:	f7fc faf6 	bl	8022608 <ucdr_serialize_bool>
 802601c:	782b      	ldrb	r3, [r5, #0]
 802601e:	4604      	mov	r4, r0
 8026020:	b94b      	cbnz	r3, 8026036 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8026022:	7a29      	ldrb	r1, [r5, #8]
 8026024:	4630      	mov	r0, r6
 8026026:	f7fc faef 	bl	8022608 <ucdr_serialize_bool>
 802602a:	7a2b      	ldrb	r3, [r5, #8]
 802602c:	4004      	ands	r4, r0
 802602e:	b2e4      	uxtb	r4, r4
 8026030:	b943      	cbnz	r3, 8026044 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8026032:	4620      	mov	r0, r4
 8026034:	bd70      	pop	{r4, r5, r6, pc}
 8026036:	6869      	ldr	r1, [r5, #4]
 8026038:	4630      	mov	r0, r6
 802603a:	f001 fb6b 	bl	8027714 <ucdr_serialize_string>
 802603e:	4004      	ands	r4, r0
 8026040:	b2e4      	uxtb	r4, r4
 8026042:	e7ee      	b.n	8026022 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8026044:	f105 010c 	add.w	r1, r5, #12
 8026048:	4630      	mov	r0, r6
 802604a:	f7ff ff53 	bl	8025ef4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 802604e:	4004      	ands	r4, r0
 8026050:	4620      	mov	r0, r4
 8026052:	bd70      	pop	{r4, r5, r6, pc}

08026054 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8026054:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8026058:	4688      	mov	r8, r1
 802605a:	4681      	mov	r9, r0
 802605c:	8809      	ldrh	r1, [r1, #0]
 802605e:	f7fc fb2d 	bl	80226bc <ucdr_serialize_uint16_t>
 8026062:	4606      	mov	r6, r0
 8026064:	f898 1002 	ldrb.w	r1, [r8, #2]
 8026068:	4648      	mov	r0, r9
 802606a:	f7fc facd 	bl	8022608 <ucdr_serialize_bool>
 802606e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8026072:	4006      	ands	r6, r0
 8026074:	b2f5      	uxtb	r5, r6
 8026076:	b9eb      	cbnz	r3, 80260b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8026078:	f898 1006 	ldrb.w	r1, [r8, #6]
 802607c:	4648      	mov	r0, r9
 802607e:	f7fc fac3 	bl	8022608 <ucdr_serialize_bool>
 8026082:	f898 3006 	ldrb.w	r3, [r8, #6]
 8026086:	4005      	ands	r5, r0
 8026088:	bb7b      	cbnz	r3, 80260ea <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 802608a:	f898 100c 	ldrb.w	r1, [r8, #12]
 802608e:	4648      	mov	r0, r9
 8026090:	f7fc faba 	bl	8022608 <ucdr_serialize_bool>
 8026094:	f898 300c 	ldrb.w	r3, [r8, #12]
 8026098:	4005      	ands	r5, r0
 802609a:	b9f3      	cbnz	r3, 80260da <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 802609c:	f898 1014 	ldrb.w	r1, [r8, #20]
 80260a0:	4648      	mov	r0, r9
 80260a2:	f7fc fab1 	bl	8022608 <ucdr_serialize_bool>
 80260a6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80260aa:	4005      	ands	r5, r0
 80260ac:	b94b      	cbnz	r3, 80260c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80260ae:	4628      	mov	r0, r5
 80260b0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80260b4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80260b8:	4648      	mov	r0, r9
 80260ba:	f7fc faff 	bl	80226bc <ucdr_serialize_uint16_t>
 80260be:	4005      	ands	r5, r0
 80260c0:	e7da      	b.n	8026078 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80260c2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80260c6:	f108 011c 	add.w	r1, r8, #28
 80260ca:	4648      	mov	r0, r9
 80260cc:	f7f6 ff7e 	bl	801cfcc <ucdr_serialize_sequence_uint8_t>
 80260d0:	4028      	ands	r0, r5
 80260d2:	b2c5      	uxtb	r5, r0
 80260d4:	4628      	mov	r0, r5
 80260d6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80260da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80260de:	4648      	mov	r0, r9
 80260e0:	f7fc fcd6 	bl	8022a90 <ucdr_serialize_uint32_t>
 80260e4:	4028      	ands	r0, r5
 80260e6:	b2c5      	uxtb	r5, r0
 80260e8:	e7d8      	b.n	802609c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80260ea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80260ee:	4648      	mov	r0, r9
 80260f0:	f7fc fcce 	bl	8022a90 <ucdr_serialize_uint32_t>
 80260f4:	4028      	ands	r0, r5
 80260f6:	b2c5      	uxtb	r5, r0
 80260f8:	e7c7      	b.n	802608a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80260fa:	bf00      	nop

080260fc <uxr_serialize_OBJK_DataReader_Binary>:
 80260fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80260fe:	2202      	movs	r2, #2
 8026100:	460c      	mov	r4, r1
 8026102:	4606      	mov	r6, r0
 8026104:	f7fc f908 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8026108:	4605      	mov	r5, r0
 802610a:	78a1      	ldrb	r1, [r4, #2]
 802610c:	4630      	mov	r0, r6
 802610e:	f7fc fa7b 	bl	8022608 <ucdr_serialize_bool>
 8026112:	78a3      	ldrb	r3, [r4, #2]
 8026114:	4005      	ands	r5, r0
 8026116:	b2ed      	uxtb	r5, r5
 8026118:	b90b      	cbnz	r3, 802611e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 802611a:	4628      	mov	r0, r5
 802611c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802611e:	f104 0108 	add.w	r1, r4, #8
 8026122:	4630      	mov	r0, r6
 8026124:	f7ff ff96 	bl	8026054 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8026128:	4607      	mov	r7, r0
 802612a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 802612e:	4630      	mov	r0, r6
 8026130:	f7fc fa6a 	bl	8022608 <ucdr_serialize_bool>
 8026134:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8026138:	4038      	ands	r0, r7
 802613a:	b2c7      	uxtb	r7, r0
 802613c:	b95b      	cbnz	r3, 8026156 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 802613e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8026142:	4630      	mov	r0, r6
 8026144:	f7fc fa60 	bl	8022608 <ucdr_serialize_bool>
 8026148:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 802614c:	4007      	ands	r7, r0
 802614e:	b94b      	cbnz	r3, 8026164 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8026150:	403d      	ands	r5, r7
 8026152:	4628      	mov	r0, r5
 8026154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026156:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 802615a:	4630      	mov	r0, r6
 802615c:	f7fc feee 	bl	8022f3c <ucdr_serialize_uint64_t>
 8026160:	4007      	ands	r7, r0
 8026162:	e7ec      	b.n	802613e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8026164:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8026166:	4630      	mov	r0, r6
 8026168:	f001 fad4 	bl	8027714 <ucdr_serialize_string>
 802616c:	4007      	ands	r7, r0
 802616e:	b2ff      	uxtb	r7, r7
 8026170:	e7ee      	b.n	8026150 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8026172:	bf00      	nop

08026174 <uxr_deserialize_ObjectVariant>:
 8026174:	b570      	push	{r4, r5, r6, lr}
 8026176:	4605      	mov	r5, r0
 8026178:	460e      	mov	r6, r1
 802617a:	f7fc fa89 	bl	8022690 <ucdr_deserialize_uint8_t>
 802617e:	b168      	cbz	r0, 802619c <uxr_deserialize_ObjectVariant+0x28>
 8026180:	7833      	ldrb	r3, [r6, #0]
 8026182:	4604      	mov	r4, r0
 8026184:	3b01      	subs	r3, #1
 8026186:	2b0d      	cmp	r3, #13
 8026188:	d809      	bhi.n	802619e <uxr_deserialize_ObjectVariant+0x2a>
 802618a:	e8df f003 	tbb	[pc, r3]
 802618e:	0a41      	.short	0x0a41
 8026190:	0a0a2323 	.word	0x0a0a2323
 8026194:	10080a0a 	.word	0x10080a0a
 8026198:	565c1010 	.word	0x565c1010
 802619c:	2400      	movs	r4, #0
 802619e:	4620      	mov	r0, r4
 80261a0:	bd70      	pop	{r4, r5, r6, pc}
 80261a2:	1d31      	adds	r1, r6, #4
 80261a4:	4628      	mov	r0, r5
 80261a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80261aa:	f7ff be31 	b.w	8025e10 <uxr_deserialize_DATAWRITER_Representation>
 80261ae:	1d31      	adds	r1, r6, #4
 80261b0:	4628      	mov	r0, r5
 80261b2:	f7fc fa6d 	bl	8022690 <ucdr_deserialize_uint8_t>
 80261b6:	2800      	cmp	r0, #0
 80261b8:	d0f0      	beq.n	802619c <uxr_deserialize_ObjectVariant+0x28>
 80261ba:	7933      	ldrb	r3, [r6, #4]
 80261bc:	2b01      	cmp	r3, #1
 80261be:	d001      	beq.n	80261c4 <uxr_deserialize_ObjectVariant+0x50>
 80261c0:	2b02      	cmp	r3, #2
 80261c2:	d1ec      	bne.n	802619e <uxr_deserialize_ObjectVariant+0x2a>
 80261c4:	68b1      	ldr	r1, [r6, #8]
 80261c6:	4628      	mov	r0, r5
 80261c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80261cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80261d0:	f001 bab0 	b.w	8027734 <ucdr_deserialize_string>
 80261d4:	1d31      	adds	r1, r6, #4
 80261d6:	4628      	mov	r0, r5
 80261d8:	f7fc fa5a 	bl	8022690 <ucdr_deserialize_uint8_t>
 80261dc:	4604      	mov	r4, r0
 80261de:	b170      	cbz	r0, 80261fe <uxr_deserialize_ObjectVariant+0x8a>
 80261e0:	7933      	ldrb	r3, [r6, #4]
 80261e2:	2b02      	cmp	r3, #2
 80261e4:	d04c      	beq.n	8026280 <uxr_deserialize_ObjectVariant+0x10c>
 80261e6:	2b03      	cmp	r3, #3
 80261e8:	d109      	bne.n	80261fe <uxr_deserialize_ObjectVariant+0x8a>
 80261ea:	f106 0308 	add.w	r3, r6, #8
 80261ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80261f2:	f106 010c 	add.w	r1, r6, #12
 80261f6:	4628      	mov	r0, r5
 80261f8:	f7f6 fefa 	bl	801cff0 <ucdr_deserialize_sequence_uint8_t>
 80261fc:	4604      	mov	r4, r0
 80261fe:	2202      	movs	r2, #2
 8026200:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8026204:	4628      	mov	r0, r5
 8026206:	f7fc f8eb 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 802620a:	4020      	ands	r0, r4
 802620c:	b2c4      	uxtb	r4, r0
 802620e:	e7c6      	b.n	802619e <uxr_deserialize_ObjectVariant+0x2a>
 8026210:	1d31      	adds	r1, r6, #4
 8026212:	4628      	mov	r0, r5
 8026214:	f7fc fa3c 	bl	8022690 <ucdr_deserialize_uint8_t>
 8026218:	4604      	mov	r4, r0
 802621a:	b130      	cbz	r0, 802622a <uxr_deserialize_ObjectVariant+0xb6>
 802621c:	7933      	ldrb	r3, [r6, #4]
 802621e:	2b02      	cmp	r3, #2
 8026220:	d036      	beq.n	8026290 <uxr_deserialize_ObjectVariant+0x11c>
 8026222:	2b03      	cmp	r3, #3
 8026224:	d03c      	beq.n	80262a0 <uxr_deserialize_ObjectVariant+0x12c>
 8026226:	2b01      	cmp	r3, #1
 8026228:	d032      	beq.n	8026290 <uxr_deserialize_ObjectVariant+0x11c>
 802622a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 802622e:	4628      	mov	r0, r5
 8026230:	f7fc ffd4 	bl	80231dc <ucdr_deserialize_int16_t>
 8026234:	4020      	ands	r0, r4
 8026236:	b2c4      	uxtb	r4, r0
 8026238:	e7b1      	b.n	802619e <uxr_deserialize_ObjectVariant+0x2a>
 802623a:	1d31      	adds	r1, r6, #4
 802623c:	4628      	mov	r0, r5
 802623e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026242:	f7ff bc9b 	b.w	8025b7c <uxr_deserialize_CLIENT_Representation>
 8026246:	2204      	movs	r2, #4
 8026248:	4628      	mov	r0, r5
 802624a:	18b1      	adds	r1, r6, r2
 802624c:	f7fc f8c8 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 8026250:	4604      	mov	r4, r0
 8026252:	2202      	movs	r2, #2
 8026254:	f106 0108 	add.w	r1, r6, #8
 8026258:	4628      	mov	r0, r5
 802625a:	f7fc f8c1 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 802625e:	4004      	ands	r4, r0
 8026260:	2202      	movs	r2, #2
 8026262:	f106 010a 	add.w	r1, r6, #10
 8026266:	4628      	mov	r0, r5
 8026268:	b2e4      	uxtb	r4, r4
 802626a:	f7fc f8b9 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 802626e:	4603      	mov	r3, r0
 8026270:	f106 010c 	add.w	r1, r6, #12
 8026274:	4628      	mov	r0, r5
 8026276:	401c      	ands	r4, r3
 8026278:	f7fc f9dc 	bl	8022634 <ucdr_deserialize_bool>
 802627c:	4004      	ands	r4, r0
 802627e:	e78e      	b.n	802619e <uxr_deserialize_ObjectVariant+0x2a>
 8026280:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8026284:	68b1      	ldr	r1, [r6, #8]
 8026286:	4628      	mov	r0, r5
 8026288:	f001 fa54 	bl	8027734 <ucdr_deserialize_string>
 802628c:	4604      	mov	r4, r0
 802628e:	e7b6      	b.n	80261fe <uxr_deserialize_ObjectVariant+0x8a>
 8026290:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8026294:	68b1      	ldr	r1, [r6, #8]
 8026296:	4628      	mov	r0, r5
 8026298:	f001 fa4c 	bl	8027734 <ucdr_deserialize_string>
 802629c:	4604      	mov	r4, r0
 802629e:	e7c4      	b.n	802622a <uxr_deserialize_ObjectVariant+0xb6>
 80262a0:	f106 0308 	add.w	r3, r6, #8
 80262a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80262a8:	f106 010c 	add.w	r1, r6, #12
 80262ac:	4628      	mov	r0, r5
 80262ae:	f7f6 fe9f 	bl	801cff0 <ucdr_deserialize_sequence_uint8_t>
 80262b2:	4604      	mov	r4, r0
 80262b4:	e7b9      	b.n	802622a <uxr_deserialize_ObjectVariant+0xb6>
 80262b6:	bf00      	nop

080262b8 <uxr_deserialize_BaseObjectRequest>:
 80262b8:	b570      	push	{r4, r5, r6, lr}
 80262ba:	2202      	movs	r2, #2
 80262bc:	4605      	mov	r5, r0
 80262be:	460e      	mov	r6, r1
 80262c0:	f7fc f88e 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 80262c4:	2202      	movs	r2, #2
 80262c6:	4604      	mov	r4, r0
 80262c8:	4628      	mov	r0, r5
 80262ca:	18b1      	adds	r1, r6, r2
 80262cc:	f7fc f888 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 80262d0:	4020      	ands	r0, r4
 80262d2:	b2c0      	uxtb	r0, r0
 80262d4:	bd70      	pop	{r4, r5, r6, pc}
 80262d6:	bf00      	nop

080262d8 <uxr_serialize_ActivityInfoVariant>:
 80262d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80262dc:	460e      	mov	r6, r1
 80262de:	7809      	ldrb	r1, [r1, #0]
 80262e0:	4680      	mov	r8, r0
 80262e2:	f7fc f9bf 	bl	8022664 <ucdr_serialize_uint8_t>
 80262e6:	4607      	mov	r7, r0
 80262e8:	b138      	cbz	r0, 80262fa <uxr_serialize_ActivityInfoVariant+0x22>
 80262ea:	7833      	ldrb	r3, [r6, #0]
 80262ec:	2b06      	cmp	r3, #6
 80262ee:	f000 8081 	beq.w	80263f4 <uxr_serialize_ActivityInfoVariant+0x11c>
 80262f2:	2b0d      	cmp	r3, #13
 80262f4:	d014      	beq.n	8026320 <uxr_serialize_ActivityInfoVariant+0x48>
 80262f6:	2b05      	cmp	r3, #5
 80262f8:	d002      	beq.n	8026300 <uxr_serialize_ActivityInfoVariant+0x28>
 80262fa:	4638      	mov	r0, r7
 80262fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026300:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8026304:	4640      	mov	r0, r8
 8026306:	f7fc fee9 	bl	80230dc <ucdr_serialize_int16_t>
 802630a:	4607      	mov	r7, r0
 802630c:	4640      	mov	r0, r8
 802630e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8026312:	f7fc fe13 	bl	8022f3c <ucdr_serialize_uint64_t>
 8026316:	4038      	ands	r0, r7
 8026318:	b2c7      	uxtb	r7, r0
 802631a:	4638      	mov	r0, r7
 802631c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026320:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8026324:	4640      	mov	r0, r8
 8026326:	f7fc fed9 	bl	80230dc <ucdr_serialize_int16_t>
 802632a:	68f1      	ldr	r1, [r6, #12]
 802632c:	4607      	mov	r7, r0
 802632e:	4640      	mov	r0, r8
 8026330:	f7fc fbae 	bl	8022a90 <ucdr_serialize_uint32_t>
 8026334:	68f3      	ldr	r3, [r6, #12]
 8026336:	2b00      	cmp	r3, #0
 8026338:	d0ed      	beq.n	8026316 <uxr_serialize_ActivityInfoVariant+0x3e>
 802633a:	b318      	cbz	r0, 8026384 <uxr_serialize_ActivityInfoVariant+0xac>
 802633c:	f106 090c 	add.w	r9, r6, #12
 8026340:	2400      	movs	r4, #0
 8026342:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8026346:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 802634a:	7c29      	ldrb	r1, [r5, #16]
 802634c:	4640      	mov	r0, r8
 802634e:	f7fc f989 	bl	8022664 <ucdr_serialize_uint8_t>
 8026352:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8026356:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 802635a:	2800      	cmp	r0, #0
 802635c:	d051      	beq.n	8026402 <uxr_serialize_ActivityInfoVariant+0x12a>
 802635e:	7c2b      	ldrb	r3, [r5, #16]
 8026360:	00c9      	lsls	r1, r1, #3
 8026362:	2b03      	cmp	r3, #3
 8026364:	d854      	bhi.n	8026410 <uxr_serialize_ActivityInfoVariant+0x138>
 8026366:	e8df f003 	tbb	[pc, r3]
 802636a:	2133      	.short	0x2133
 802636c:	020f      	.short	0x020f
 802636e:	4449      	add	r1, r9
 8026370:	4640      	mov	r0, r8
 8026372:	6889      	ldr	r1, [r1, #8]
 8026374:	f001 f9ce 	bl	8027714 <ucdr_serialize_string>
 8026378:	3401      	adds	r4, #1
 802637a:	68f2      	ldr	r2, [r6, #12]
 802637c:	4294      	cmp	r4, r2
 802637e:	d244      	bcs.n	802640a <uxr_serialize_ActivityInfoVariant+0x132>
 8026380:	2800      	cmp	r0, #0
 8026382:	d1de      	bne.n	8026342 <uxr_serialize_ActivityInfoVariant+0x6a>
 8026384:	2700      	movs	r7, #0
 8026386:	e7b8      	b.n	80262fa <uxr_serialize_ActivityInfoVariant+0x22>
 8026388:	3108      	adds	r1, #8
 802638a:	44a2      	add	sl, r4
 802638c:	2210      	movs	r2, #16
 802638e:	4640      	mov	r0, r8
 8026390:	4449      	add	r1, r9
 8026392:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8026396:	f7fb ffbf 	bl	8022318 <ucdr_serialize_array_uint8_t>
 802639a:	4605      	mov	r5, r0
 802639c:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 80263a0:	4640      	mov	r0, r8
 80263a2:	f7fc fb75 	bl	8022a90 <ucdr_serialize_uint32_t>
 80263a6:	4028      	ands	r0, r5
 80263a8:	b2c0      	uxtb	r0, r0
 80263aa:	e7e5      	b.n	8026378 <uxr_serialize_ActivityInfoVariant+0xa0>
 80263ac:	3108      	adds	r1, #8
 80263ae:	44a2      	add	sl, r4
 80263b0:	2204      	movs	r2, #4
 80263b2:	4640      	mov	r0, r8
 80263b4:	4449      	add	r1, r9
 80263b6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80263ba:	f7fb ffad 	bl	8022318 <ucdr_serialize_array_uint8_t>
 80263be:	4605      	mov	r5, r0
 80263c0:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 80263c4:	4640      	mov	r0, r8
 80263c6:	f7fc f979 	bl	80226bc <ucdr_serialize_uint16_t>
 80263ca:	4028      	ands	r0, r5
 80263cc:	b2c0      	uxtb	r0, r0
 80263ce:	e7d3      	b.n	8026378 <uxr_serialize_ActivityInfoVariant+0xa0>
 80263d0:	3108      	adds	r1, #8
 80263d2:	44a2      	add	sl, r4
 80263d4:	2202      	movs	r2, #2
 80263d6:	4640      	mov	r0, r8
 80263d8:	4449      	add	r1, r9
 80263da:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80263de:	f7fb ff9b 	bl	8022318 <ucdr_serialize_array_uint8_t>
 80263e2:	4605      	mov	r5, r0
 80263e4:	f89a 1016 	ldrb.w	r1, [sl, #22]
 80263e8:	4640      	mov	r0, r8
 80263ea:	f7fc f93b 	bl	8022664 <ucdr_serialize_uint8_t>
 80263ee:	4028      	ands	r0, r5
 80263f0:	b2c0      	uxtb	r0, r0
 80263f2:	e7c1      	b.n	8026378 <uxr_serialize_ActivityInfoVariant+0xa0>
 80263f4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80263f8:	4640      	mov	r0, r8
 80263fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80263fe:	f7fc be6d 	b.w	80230dc <ucdr_serialize_int16_t>
 8026402:	3401      	adds	r4, #1
 8026404:	68f2      	ldr	r2, [r6, #12]
 8026406:	42a2      	cmp	r2, r4
 8026408:	d8bc      	bhi.n	8026384 <uxr_serialize_ActivityInfoVariant+0xac>
 802640a:	4007      	ands	r7, r0
 802640c:	b2ff      	uxtb	r7, r7
 802640e:	e774      	b.n	80262fa <uxr_serialize_ActivityInfoVariant+0x22>
 8026410:	3401      	adds	r4, #1
 8026412:	68f3      	ldr	r3, [r6, #12]
 8026414:	3518      	adds	r5, #24
 8026416:	429c      	cmp	r4, r3
 8026418:	d397      	bcc.n	802634a <uxr_serialize_ActivityInfoVariant+0x72>
 802641a:	e76e      	b.n	80262fa <uxr_serialize_ActivityInfoVariant+0x22>

0802641c <uxr_deserialize_BaseObjectReply>:
 802641c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026420:	2202      	movs	r2, #2
 8026422:	4606      	mov	r6, r0
 8026424:	460f      	mov	r7, r1
 8026426:	f7fb ffdb 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 802642a:	2202      	movs	r2, #2
 802642c:	4605      	mov	r5, r0
 802642e:	4630      	mov	r0, r6
 8026430:	18b9      	adds	r1, r7, r2
 8026432:	f7fb ffd5 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 8026436:	4680      	mov	r8, r0
 8026438:	1d39      	adds	r1, r7, #4
 802643a:	4630      	mov	r0, r6
 802643c:	f7fc f928 	bl	8022690 <ucdr_deserialize_uint8_t>
 8026440:	ea05 0508 	and.w	r5, r5, r8
 8026444:	4604      	mov	r4, r0
 8026446:	1d79      	adds	r1, r7, #5
 8026448:	4630      	mov	r0, r6
 802644a:	402c      	ands	r4, r5
 802644c:	f7fc f920 	bl	8022690 <ucdr_deserialize_uint8_t>
 8026450:	4020      	ands	r0, r4
 8026452:	b2c0      	uxtb	r0, r0
 8026454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08026458 <uxr_serialize_ReadSpecification>:
 8026458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802645a:	460e      	mov	r6, r1
 802645c:	4607      	mov	r7, r0
 802645e:	7809      	ldrb	r1, [r1, #0]
 8026460:	f7fc f900 	bl	8022664 <ucdr_serialize_uint8_t>
 8026464:	4604      	mov	r4, r0
 8026466:	7871      	ldrb	r1, [r6, #1]
 8026468:	4638      	mov	r0, r7
 802646a:	f7fc f8fb 	bl	8022664 <ucdr_serialize_uint8_t>
 802646e:	4004      	ands	r4, r0
 8026470:	78b1      	ldrb	r1, [r6, #2]
 8026472:	4638      	mov	r0, r7
 8026474:	f7fc f8c8 	bl	8022608 <ucdr_serialize_bool>
 8026478:	78b3      	ldrb	r3, [r6, #2]
 802647a:	b2e4      	uxtb	r4, r4
 802647c:	4004      	ands	r4, r0
 802647e:	b943      	cbnz	r3, 8026492 <uxr_serialize_ReadSpecification+0x3a>
 8026480:	7a31      	ldrb	r1, [r6, #8]
 8026482:	4638      	mov	r0, r7
 8026484:	f7fc f8c0 	bl	8022608 <ucdr_serialize_bool>
 8026488:	7a33      	ldrb	r3, [r6, #8]
 802648a:	4004      	ands	r4, r0
 802648c:	b93b      	cbnz	r3, 802649e <uxr_serialize_ReadSpecification+0x46>
 802648e:	4620      	mov	r0, r4
 8026490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026492:	6871      	ldr	r1, [r6, #4]
 8026494:	4638      	mov	r0, r7
 8026496:	f001 f93d 	bl	8027714 <ucdr_serialize_string>
 802649a:	4004      	ands	r4, r0
 802649c:	e7f0      	b.n	8026480 <uxr_serialize_ReadSpecification+0x28>
 802649e:	8971      	ldrh	r1, [r6, #10]
 80264a0:	4638      	mov	r0, r7
 80264a2:	f7fc f90b 	bl	80226bc <ucdr_serialize_uint16_t>
 80264a6:	4605      	mov	r5, r0
 80264a8:	89b1      	ldrh	r1, [r6, #12]
 80264aa:	4638      	mov	r0, r7
 80264ac:	f7fc f906 	bl	80226bc <ucdr_serialize_uint16_t>
 80264b0:	4005      	ands	r5, r0
 80264b2:	89f1      	ldrh	r1, [r6, #14]
 80264b4:	4638      	mov	r0, r7
 80264b6:	b2ed      	uxtb	r5, r5
 80264b8:	f7fc f900 	bl	80226bc <ucdr_serialize_uint16_t>
 80264bc:	8a31      	ldrh	r1, [r6, #16]
 80264be:	4025      	ands	r5, r4
 80264c0:	4604      	mov	r4, r0
 80264c2:	4638      	mov	r0, r7
 80264c4:	4025      	ands	r5, r4
 80264c6:	f7fc f8f9 	bl	80226bc <ucdr_serialize_uint16_t>
 80264ca:	ea00 0405 	and.w	r4, r0, r5
 80264ce:	4620      	mov	r0, r4
 80264d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80264d2:	bf00      	nop

080264d4 <uxr_serialize_CREATE_CLIENT_Payload>:
 80264d4:	f7ff bafa 	b.w	8025acc <uxr_serialize_CLIENT_Representation>

080264d8 <uxr_serialize_CREATE_Payload>:
 80264d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80264da:	2202      	movs	r2, #2
 80264dc:	4607      	mov	r7, r0
 80264de:	460e      	mov	r6, r1
 80264e0:	f7fb ff1a 	bl	8022318 <ucdr_serialize_array_uint8_t>
 80264e4:	2202      	movs	r2, #2
 80264e6:	4605      	mov	r5, r0
 80264e8:	4638      	mov	r0, r7
 80264ea:	18b1      	adds	r1, r6, r2
 80264ec:	f7fb ff14 	bl	8022318 <ucdr_serialize_array_uint8_t>
 80264f0:	7931      	ldrb	r1, [r6, #4]
 80264f2:	4604      	mov	r4, r0
 80264f4:	4638      	mov	r0, r7
 80264f6:	f7fc f8b5 	bl	8022664 <ucdr_serialize_uint8_t>
 80264fa:	b170      	cbz	r0, 802651a <uxr_serialize_CREATE_Payload+0x42>
 80264fc:	7933      	ldrb	r3, [r6, #4]
 80264fe:	402c      	ands	r4, r5
 8026500:	3b01      	subs	r3, #1
 8026502:	b2e4      	uxtb	r4, r4
 8026504:	2b0d      	cmp	r3, #13
 8026506:	d809      	bhi.n	802651c <uxr_serialize_CREATE_Payload+0x44>
 8026508:	e8df f003 	tbb	[pc, r3]
 802650c:	23230a4c 	.word	0x23230a4c
 8026510:	0a0a0a0a 	.word	0x0a0a0a0a
 8026514:	12121208 	.word	0x12121208
 8026518:	3e45      	.short	0x3e45
 802651a:	2400      	movs	r4, #0
 802651c:	4620      	mov	r0, r4
 802651e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026520:	f106 0108 	add.w	r1, r6, #8
 8026524:	4638      	mov	r0, r7
 8026526:	f7ff fbd7 	bl	8025cd8 <uxr_serialize_DATAWRITER_Representation>
 802652a:	4004      	ands	r4, r0
 802652c:	4620      	mov	r0, r4
 802652e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026530:	7a31      	ldrb	r1, [r6, #8]
 8026532:	4638      	mov	r0, r7
 8026534:	f7fc f896 	bl	8022664 <ucdr_serialize_uint8_t>
 8026538:	2800      	cmp	r0, #0
 802653a:	d0ee      	beq.n	802651a <uxr_serialize_CREATE_Payload+0x42>
 802653c:	7a33      	ldrb	r3, [r6, #8]
 802653e:	2b01      	cmp	r3, #1
 8026540:	d001      	beq.n	8026546 <uxr_serialize_CREATE_Payload+0x6e>
 8026542:	2b02      	cmp	r3, #2
 8026544:	d1ea      	bne.n	802651c <uxr_serialize_CREATE_Payload+0x44>
 8026546:	68f1      	ldr	r1, [r6, #12]
 8026548:	4638      	mov	r0, r7
 802654a:	f001 f8e3 	bl	8027714 <ucdr_serialize_string>
 802654e:	4004      	ands	r4, r0
 8026550:	e7e4      	b.n	802651c <uxr_serialize_CREATE_Payload+0x44>
 8026552:	7a31      	ldrb	r1, [r6, #8]
 8026554:	4638      	mov	r0, r7
 8026556:	f7fc f885 	bl	8022664 <ucdr_serialize_uint8_t>
 802655a:	4605      	mov	r5, r0
 802655c:	b158      	cbz	r0, 8026576 <uxr_serialize_CREATE_Payload+0x9e>
 802655e:	7a33      	ldrb	r3, [r6, #8]
 8026560:	2b02      	cmp	r3, #2
 8026562:	d034      	beq.n	80265ce <uxr_serialize_CREATE_Payload+0xf6>
 8026564:	2b03      	cmp	r3, #3
 8026566:	d106      	bne.n	8026576 <uxr_serialize_CREATE_Payload+0x9e>
 8026568:	68f2      	ldr	r2, [r6, #12]
 802656a:	f106 0110 	add.w	r1, r6, #16
 802656e:	4638      	mov	r0, r7
 8026570:	f7f6 fd2c 	bl	801cfcc <ucdr_serialize_sequence_uint8_t>
 8026574:	4605      	mov	r5, r0
 8026576:	2202      	movs	r2, #2
 8026578:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 802657c:	4638      	mov	r0, r7
 802657e:	f7fb fecb 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8026582:	4028      	ands	r0, r5
 8026584:	4004      	ands	r4, r0
 8026586:	e7c9      	b.n	802651c <uxr_serialize_CREATE_Payload+0x44>
 8026588:	f106 0108 	add.w	r1, r6, #8
 802658c:	4638      	mov	r0, r7
 802658e:	f7ff fa9d 	bl	8025acc <uxr_serialize_CLIENT_Representation>
 8026592:	4004      	ands	r4, r0
 8026594:	e7c2      	b.n	802651c <uxr_serialize_CREATE_Payload+0x44>
 8026596:	f106 0108 	add.w	r1, r6, #8
 802659a:	4638      	mov	r0, r7
 802659c:	f7ff fb52 	bl	8025c44 <uxr_serialize_AGENT_Representation>
 80265a0:	4004      	ands	r4, r0
 80265a2:	e7bb      	b.n	802651c <uxr_serialize_CREATE_Payload+0x44>
 80265a4:	7a31      	ldrb	r1, [r6, #8]
 80265a6:	4638      	mov	r0, r7
 80265a8:	f7fc f85c 	bl	8022664 <ucdr_serialize_uint8_t>
 80265ac:	4605      	mov	r5, r0
 80265ae:	b130      	cbz	r0, 80265be <uxr_serialize_CREATE_Payload+0xe6>
 80265b0:	7a33      	ldrb	r3, [r6, #8]
 80265b2:	2b02      	cmp	r3, #2
 80265b4:	d011      	beq.n	80265da <uxr_serialize_CREATE_Payload+0x102>
 80265b6:	2b03      	cmp	r3, #3
 80265b8:	d015      	beq.n	80265e6 <uxr_serialize_CREATE_Payload+0x10e>
 80265ba:	2b01      	cmp	r3, #1
 80265bc:	d00d      	beq.n	80265da <uxr_serialize_CREATE_Payload+0x102>
 80265be:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80265c2:	4638      	mov	r0, r7
 80265c4:	f7fc fd8a 	bl	80230dc <ucdr_serialize_int16_t>
 80265c8:	4028      	ands	r0, r5
 80265ca:	4004      	ands	r4, r0
 80265cc:	e7a6      	b.n	802651c <uxr_serialize_CREATE_Payload+0x44>
 80265ce:	68f1      	ldr	r1, [r6, #12]
 80265d0:	4638      	mov	r0, r7
 80265d2:	f001 f89f 	bl	8027714 <ucdr_serialize_string>
 80265d6:	4605      	mov	r5, r0
 80265d8:	e7cd      	b.n	8026576 <uxr_serialize_CREATE_Payload+0x9e>
 80265da:	68f1      	ldr	r1, [r6, #12]
 80265dc:	4638      	mov	r0, r7
 80265de:	f001 f899 	bl	8027714 <ucdr_serialize_string>
 80265e2:	4605      	mov	r5, r0
 80265e4:	e7eb      	b.n	80265be <uxr_serialize_CREATE_Payload+0xe6>
 80265e6:	68f2      	ldr	r2, [r6, #12]
 80265e8:	f106 0110 	add.w	r1, r6, #16
 80265ec:	4638      	mov	r0, r7
 80265ee:	f7f6 fced 	bl	801cfcc <ucdr_serialize_sequence_uint8_t>
 80265f2:	4605      	mov	r5, r0
 80265f4:	e7e3      	b.n	80265be <uxr_serialize_CREATE_Payload+0xe6>
 80265f6:	bf00      	nop

080265f8 <uxr_deserialize_GET_INFO_Payload>:
 80265f8:	b570      	push	{r4, r5, r6, lr}
 80265fa:	2202      	movs	r2, #2
 80265fc:	4605      	mov	r5, r0
 80265fe:	460e      	mov	r6, r1
 8026600:	f7fb feee 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 8026604:	2202      	movs	r2, #2
 8026606:	4604      	mov	r4, r0
 8026608:	4628      	mov	r0, r5
 802660a:	18b1      	adds	r1, r6, r2
 802660c:	f7fb fee8 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 8026610:	4603      	mov	r3, r0
 8026612:	1d31      	adds	r1, r6, #4
 8026614:	4628      	mov	r0, r5
 8026616:	401c      	ands	r4, r3
 8026618:	f7fc fb6a 	bl	8022cf0 <ucdr_deserialize_uint32_t>
 802661c:	b2e4      	uxtb	r4, r4
 802661e:	4020      	ands	r0, r4
 8026620:	bd70      	pop	{r4, r5, r6, pc}
 8026622:	bf00      	nop

08026624 <uxr_serialize_DELETE_Payload>:
 8026624:	b570      	push	{r4, r5, r6, lr}
 8026626:	2202      	movs	r2, #2
 8026628:	4605      	mov	r5, r0
 802662a:	460e      	mov	r6, r1
 802662c:	f7fb fe74 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8026630:	2202      	movs	r2, #2
 8026632:	4604      	mov	r4, r0
 8026634:	4628      	mov	r0, r5
 8026636:	18b1      	adds	r1, r6, r2
 8026638:	f7fb fe6e 	bl	8022318 <ucdr_serialize_array_uint8_t>
 802663c:	4020      	ands	r0, r4
 802663e:	b2c0      	uxtb	r0, r0
 8026640:	bd70      	pop	{r4, r5, r6, pc}
 8026642:	bf00      	nop

08026644 <uxr_deserialize_STATUS_AGENT_Payload>:
 8026644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026648:	460e      	mov	r6, r1
 802664a:	4605      	mov	r5, r0
 802664c:	f7fc f820 	bl	8022690 <ucdr_deserialize_uint8_t>
 8026650:	4604      	mov	r4, r0
 8026652:	1c71      	adds	r1, r6, #1
 8026654:	4628      	mov	r0, r5
 8026656:	f7fc f81b 	bl	8022690 <ucdr_deserialize_uint8_t>
 802665a:	2204      	movs	r2, #4
 802665c:	4681      	mov	r9, r0
 802665e:	4628      	mov	r0, r5
 8026660:	18b1      	adds	r1, r6, r2
 8026662:	f7fb febd 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 8026666:	f106 0108 	add.w	r1, r6, #8
 802666a:	4680      	mov	r8, r0
 802666c:	2202      	movs	r2, #2
 802666e:	4628      	mov	r0, r5
 8026670:	f7fb feb6 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 8026674:	ea04 0309 	and.w	r3, r4, r9
 8026678:	4607      	mov	r7, r0
 802667a:	2202      	movs	r2, #2
 802667c:	b2db      	uxtb	r3, r3
 802667e:	f106 010a 	add.w	r1, r6, #10
 8026682:	4628      	mov	r0, r5
 8026684:	ea03 0408 	and.w	r4, r3, r8
 8026688:	f7fb feaa 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 802668c:	4603      	mov	r3, r0
 802668e:	4628      	mov	r0, r5
 8026690:	403c      	ands	r4, r7
 8026692:	f106 010c 	add.w	r1, r6, #12
 8026696:	461d      	mov	r5, r3
 8026698:	f7fb ffcc 	bl	8022634 <ucdr_deserialize_bool>
 802669c:	4025      	ands	r5, r4
 802669e:	4028      	ands	r0, r5
 80266a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080266a4 <uxr_deserialize_STATUS_Payload>:
 80266a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80266a8:	2202      	movs	r2, #2
 80266aa:	4606      	mov	r6, r0
 80266ac:	460f      	mov	r7, r1
 80266ae:	f7fb fe97 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 80266b2:	2202      	movs	r2, #2
 80266b4:	4605      	mov	r5, r0
 80266b6:	4630      	mov	r0, r6
 80266b8:	18b9      	adds	r1, r7, r2
 80266ba:	f7fb fe91 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 80266be:	4680      	mov	r8, r0
 80266c0:	1d39      	adds	r1, r7, #4
 80266c2:	4630      	mov	r0, r6
 80266c4:	f7fb ffe4 	bl	8022690 <ucdr_deserialize_uint8_t>
 80266c8:	ea05 0508 	and.w	r5, r5, r8
 80266cc:	4604      	mov	r4, r0
 80266ce:	1d79      	adds	r1, r7, #5
 80266d0:	4630      	mov	r0, r6
 80266d2:	402c      	ands	r4, r5
 80266d4:	f7fb ffdc 	bl	8022690 <ucdr_deserialize_uint8_t>
 80266d8:	4020      	ands	r0, r4
 80266da:	b2c0      	uxtb	r0, r0
 80266dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080266e0 <uxr_serialize_INFO_Payload>:
 80266e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80266e4:	2202      	movs	r2, #2
 80266e6:	460c      	mov	r4, r1
 80266e8:	4605      	mov	r5, r0
 80266ea:	f7fb fe15 	bl	8022318 <ucdr_serialize_array_uint8_t>
 80266ee:	2202      	movs	r2, #2
 80266f0:	4680      	mov	r8, r0
 80266f2:	4628      	mov	r0, r5
 80266f4:	18a1      	adds	r1, r4, r2
 80266f6:	f7fb fe0f 	bl	8022318 <ucdr_serialize_array_uint8_t>
 80266fa:	4607      	mov	r7, r0
 80266fc:	7921      	ldrb	r1, [r4, #4]
 80266fe:	4628      	mov	r0, r5
 8026700:	f7fb ffb0 	bl	8022664 <ucdr_serialize_uint8_t>
 8026704:	ea08 0807 	and.w	r8, r8, r7
 8026708:	4606      	mov	r6, r0
 802670a:	7961      	ldrb	r1, [r4, #5]
 802670c:	4628      	mov	r0, r5
 802670e:	ea06 0608 	and.w	r6, r6, r8
 8026712:	f7fb ffa7 	bl	8022664 <ucdr_serialize_uint8_t>
 8026716:	7a21      	ldrb	r1, [r4, #8]
 8026718:	4030      	ands	r0, r6
 802671a:	b2c7      	uxtb	r7, r0
 802671c:	4628      	mov	r0, r5
 802671e:	f7fb ff73 	bl	8022608 <ucdr_serialize_bool>
 8026722:	7a23      	ldrb	r3, [r4, #8]
 8026724:	4606      	mov	r6, r0
 8026726:	b96b      	cbnz	r3, 8026744 <uxr_serialize_INFO_Payload+0x64>
 8026728:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 802672c:	4628      	mov	r0, r5
 802672e:	f7fb ff6b 	bl	8022608 <ucdr_serialize_bool>
 8026732:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8026736:	4030      	ands	r0, r6
 8026738:	b2c6      	uxtb	r6, r0
 802673a:	b983      	cbnz	r3, 802675e <uxr_serialize_INFO_Payload+0x7e>
 802673c:	ea06 0007 	and.w	r0, r6, r7
 8026740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026744:	7b21      	ldrb	r1, [r4, #12]
 8026746:	4628      	mov	r0, r5
 8026748:	f7fb ff8c 	bl	8022664 <ucdr_serialize_uint8_t>
 802674c:	b188      	cbz	r0, 8026772 <uxr_serialize_INFO_Payload+0x92>
 802674e:	f104 010c 	add.w	r1, r4, #12
 8026752:	4628      	mov	r0, r5
 8026754:	f7ff fae8 	bl	8025d28 <uxr_serialize_ObjectVariant.part.0>
 8026758:	4030      	ands	r0, r6
 802675a:	b2c6      	uxtb	r6, r0
 802675c:	e7e4      	b.n	8026728 <uxr_serialize_INFO_Payload+0x48>
 802675e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8026762:	4628      	mov	r0, r5
 8026764:	f7ff fdb8 	bl	80262d8 <uxr_serialize_ActivityInfoVariant>
 8026768:	4006      	ands	r6, r0
 802676a:	ea06 0007 	and.w	r0, r6, r7
 802676e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026772:	4606      	mov	r6, r0
 8026774:	e7d8      	b.n	8026728 <uxr_serialize_INFO_Payload+0x48>
 8026776:	bf00      	nop

08026778 <uxr_serialize_READ_DATA_Payload>:
 8026778:	b570      	push	{r4, r5, r6, lr}
 802677a:	2202      	movs	r2, #2
 802677c:	4605      	mov	r5, r0
 802677e:	460e      	mov	r6, r1
 8026780:	f7fb fdca 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8026784:	2202      	movs	r2, #2
 8026786:	4604      	mov	r4, r0
 8026788:	4628      	mov	r0, r5
 802678a:	18b1      	adds	r1, r6, r2
 802678c:	f7fb fdc4 	bl	8022318 <ucdr_serialize_array_uint8_t>
 8026790:	4603      	mov	r3, r0
 8026792:	1d31      	adds	r1, r6, #4
 8026794:	4628      	mov	r0, r5
 8026796:	401c      	ands	r4, r3
 8026798:	f7ff fe5e 	bl	8026458 <uxr_serialize_ReadSpecification>
 802679c:	b2e4      	uxtb	r4, r4
 802679e:	4020      	ands	r0, r4
 80267a0:	bd70      	pop	{r4, r5, r6, pc}
 80267a2:	bf00      	nop

080267a4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80267a4:	b570      	push	{r4, r5, r6, lr}
 80267a6:	2202      	movs	r2, #2
 80267a8:	4605      	mov	r5, r0
 80267aa:	460e      	mov	r6, r1
 80267ac:	f7fb fdb4 	bl	8022318 <ucdr_serialize_array_uint8_t>
 80267b0:	2202      	movs	r2, #2
 80267b2:	4604      	mov	r4, r0
 80267b4:	4628      	mov	r0, r5
 80267b6:	18b1      	adds	r1, r6, r2
 80267b8:	f7fb fdae 	bl	8022318 <ucdr_serialize_array_uint8_t>
 80267bc:	4020      	ands	r0, r4
 80267be:	b2c0      	uxtb	r0, r0
 80267c0:	bd70      	pop	{r4, r5, r6, pc}
 80267c2:	bf00      	nop

080267c4 <uxr_serialize_ACKNACK_Payload>:
 80267c4:	b570      	push	{r4, r5, r6, lr}
 80267c6:	460c      	mov	r4, r1
 80267c8:	4605      	mov	r5, r0
 80267ca:	460e      	mov	r6, r1
 80267cc:	f834 1b02 	ldrh.w	r1, [r4], #2
 80267d0:	f7fb ff74 	bl	80226bc <ucdr_serialize_uint16_t>
 80267d4:	2202      	movs	r2, #2
 80267d6:	4621      	mov	r1, r4
 80267d8:	4604      	mov	r4, r0
 80267da:	4628      	mov	r0, r5
 80267dc:	f7fb fd9c 	bl	8022318 <ucdr_serialize_array_uint8_t>
 80267e0:	4603      	mov	r3, r0
 80267e2:	7931      	ldrb	r1, [r6, #4]
 80267e4:	4628      	mov	r0, r5
 80267e6:	401c      	ands	r4, r3
 80267e8:	f7fb ff3c 	bl	8022664 <ucdr_serialize_uint8_t>
 80267ec:	b2e4      	uxtb	r4, r4
 80267ee:	4020      	ands	r0, r4
 80267f0:	bd70      	pop	{r4, r5, r6, pc}
 80267f2:	bf00      	nop

080267f4 <uxr_deserialize_ACKNACK_Payload>:
 80267f4:	b570      	push	{r4, r5, r6, lr}
 80267f6:	460e      	mov	r6, r1
 80267f8:	4605      	mov	r5, r0
 80267fa:	f7fc f85f 	bl	80228bc <ucdr_deserialize_uint16_t>
 80267fe:	2202      	movs	r2, #2
 8026800:	4604      	mov	r4, r0
 8026802:	4628      	mov	r0, r5
 8026804:	18b1      	adds	r1, r6, r2
 8026806:	f7fb fdeb 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 802680a:	4603      	mov	r3, r0
 802680c:	1d31      	adds	r1, r6, #4
 802680e:	4628      	mov	r0, r5
 8026810:	401c      	ands	r4, r3
 8026812:	f7fb ff3d 	bl	8022690 <ucdr_deserialize_uint8_t>
 8026816:	b2e4      	uxtb	r4, r4
 8026818:	4020      	ands	r0, r4
 802681a:	bd70      	pop	{r4, r5, r6, pc}

0802681c <uxr_serialize_HEARTBEAT_Payload>:
 802681c:	b570      	push	{r4, r5, r6, lr}
 802681e:	460d      	mov	r5, r1
 8026820:	4606      	mov	r6, r0
 8026822:	8809      	ldrh	r1, [r1, #0]
 8026824:	f7fb ff4a 	bl	80226bc <ucdr_serialize_uint16_t>
 8026828:	8869      	ldrh	r1, [r5, #2]
 802682a:	4604      	mov	r4, r0
 802682c:	4630      	mov	r0, r6
 802682e:	f7fb ff45 	bl	80226bc <ucdr_serialize_uint16_t>
 8026832:	4603      	mov	r3, r0
 8026834:	7929      	ldrb	r1, [r5, #4]
 8026836:	4630      	mov	r0, r6
 8026838:	401c      	ands	r4, r3
 802683a:	f7fb ff13 	bl	8022664 <ucdr_serialize_uint8_t>
 802683e:	b2e4      	uxtb	r4, r4
 8026840:	4020      	ands	r0, r4
 8026842:	bd70      	pop	{r4, r5, r6, pc}

08026844 <uxr_deserialize_HEARTBEAT_Payload>:
 8026844:	b570      	push	{r4, r5, r6, lr}
 8026846:	460e      	mov	r6, r1
 8026848:	4605      	mov	r5, r0
 802684a:	f7fc f837 	bl	80228bc <ucdr_deserialize_uint16_t>
 802684e:	4604      	mov	r4, r0
 8026850:	1cb1      	adds	r1, r6, #2
 8026852:	4628      	mov	r0, r5
 8026854:	f7fc f832 	bl	80228bc <ucdr_deserialize_uint16_t>
 8026858:	4603      	mov	r3, r0
 802685a:	1d31      	adds	r1, r6, #4
 802685c:	4628      	mov	r0, r5
 802685e:	401c      	ands	r4, r3
 8026860:	f7fb ff16 	bl	8022690 <ucdr_deserialize_uint8_t>
 8026864:	b2e4      	uxtb	r4, r4
 8026866:	4020      	ands	r0, r4
 8026868:	bd70      	pop	{r4, r5, r6, pc}
 802686a:	bf00      	nop

0802686c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 802686c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026870:	460e      	mov	r6, r1
 8026872:	4605      	mov	r5, r0
 8026874:	f7fc fdbe 	bl	80233f4 <ucdr_deserialize_int32_t>
 8026878:	4607      	mov	r7, r0
 802687a:	1d31      	adds	r1, r6, #4
 802687c:	4628      	mov	r0, r5
 802687e:	f7fc fa37 	bl	8022cf0 <ucdr_deserialize_uint32_t>
 8026882:	4680      	mov	r8, r0
 8026884:	f106 0108 	add.w	r1, r6, #8
 8026888:	4628      	mov	r0, r5
 802688a:	f7fc fdb3 	bl	80233f4 <ucdr_deserialize_int32_t>
 802688e:	ea07 0708 	and.w	r7, r7, r8
 8026892:	4604      	mov	r4, r0
 8026894:	f106 010c 	add.w	r1, r6, #12
 8026898:	4628      	mov	r0, r5
 802689a:	403c      	ands	r4, r7
 802689c:	f7fc fa28 	bl	8022cf0 <ucdr_deserialize_uint32_t>
 80268a0:	f106 0110 	add.w	r1, r6, #16
 80268a4:	4004      	ands	r4, r0
 80268a6:	4628      	mov	r0, r5
 80268a8:	f7fc fda4 	bl	80233f4 <ucdr_deserialize_int32_t>
 80268ac:	4603      	mov	r3, r0
 80268ae:	b2e4      	uxtb	r4, r4
 80268b0:	4628      	mov	r0, r5
 80268b2:	461d      	mov	r5, r3
 80268b4:	f106 0114 	add.w	r1, r6, #20
 80268b8:	f7fc fa1a 	bl	8022cf0 <ucdr_deserialize_uint32_t>
 80268bc:	402c      	ands	r4, r5
 80268be:	4020      	ands	r0, r4
 80268c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080268c4 <uxr_serialize_SampleIdentity>:
 80268c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80268c8:	4604      	mov	r4, r0
 80268ca:	460d      	mov	r5, r1
 80268cc:	220c      	movs	r2, #12
 80268ce:	f7fb fd23 	bl	8022318 <ucdr_serialize_array_uint8_t>
 80268d2:	2203      	movs	r2, #3
 80268d4:	f105 010c 	add.w	r1, r5, #12
 80268d8:	4607      	mov	r7, r0
 80268da:	4620      	mov	r0, r4
 80268dc:	f7fb fd1c 	bl	8022318 <ucdr_serialize_array_uint8_t>
 80268e0:	7be9      	ldrb	r1, [r5, #15]
 80268e2:	4680      	mov	r8, r0
 80268e4:	4620      	mov	r0, r4
 80268e6:	f7fb febd 	bl	8022664 <ucdr_serialize_uint8_t>
 80268ea:	6929      	ldr	r1, [r5, #16]
 80268ec:	4606      	mov	r6, r0
 80268ee:	4620      	mov	r0, r4
 80268f0:	f7fc fce8 	bl	80232c4 <ucdr_serialize_int32_t>
 80268f4:	ea07 0708 	and.w	r7, r7, r8
 80268f8:	4603      	mov	r3, r0
 80268fa:	4620      	mov	r0, r4
 80268fc:	403e      	ands	r6, r7
 80268fe:	6969      	ldr	r1, [r5, #20]
 8026900:	461c      	mov	r4, r3
 8026902:	f7fc f8c5 	bl	8022a90 <ucdr_serialize_uint32_t>
 8026906:	4034      	ands	r4, r6
 8026908:	4020      	ands	r0, r4
 802690a:	b2c0      	uxtb	r0, r0
 802690c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08026910 <uxr_deserialize_SampleIdentity>:
 8026910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026914:	4604      	mov	r4, r0
 8026916:	460d      	mov	r5, r1
 8026918:	220c      	movs	r2, #12
 802691a:	f7fb fd61 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 802691e:	2203      	movs	r2, #3
 8026920:	f105 010c 	add.w	r1, r5, #12
 8026924:	4607      	mov	r7, r0
 8026926:	4620      	mov	r0, r4
 8026928:	f7fb fd5a 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 802692c:	f105 010f 	add.w	r1, r5, #15
 8026930:	4680      	mov	r8, r0
 8026932:	4620      	mov	r0, r4
 8026934:	f7fb feac 	bl	8022690 <ucdr_deserialize_uint8_t>
 8026938:	f105 0110 	add.w	r1, r5, #16
 802693c:	4606      	mov	r6, r0
 802693e:	4620      	mov	r0, r4
 8026940:	f7fc fd58 	bl	80233f4 <ucdr_deserialize_int32_t>
 8026944:	ea07 0708 	and.w	r7, r7, r8
 8026948:	4603      	mov	r3, r0
 802694a:	4620      	mov	r0, r4
 802694c:	403e      	ands	r6, r7
 802694e:	f105 0114 	add.w	r1, r5, #20
 8026952:	461c      	mov	r4, r3
 8026954:	f7fc f9cc 	bl	8022cf0 <ucdr_deserialize_uint32_t>
 8026958:	4034      	ands	r4, r6
 802695a:	4020      	ands	r0, r4
 802695c:	b2c0      	uxtb	r0, r0
 802695e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026962:	bf00      	nop

08026964 <rcl_convert_rmw_ret_to_rcl_ret>:
 8026964:	280b      	cmp	r0, #11
 8026966:	dc0d      	bgt.n	8026984 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8026968:	2800      	cmp	r0, #0
 802696a:	db09      	blt.n	8026980 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 802696c:	280b      	cmp	r0, #11
 802696e:	d807      	bhi.n	8026980 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8026970:	e8df f000 	tbb	[pc, r0]
 8026974:	07060607 	.word	0x07060607
 8026978:	06060606 	.word	0x06060606
 802697c:	07070606 	.word	0x07070606
 8026980:	2001      	movs	r0, #1
 8026982:	4770      	bx	lr
 8026984:	28cb      	cmp	r0, #203	@ 0xcb
 8026986:	bf18      	it	ne
 8026988:	2001      	movne	r0, #1
 802698a:	4770      	bx	lr

0802698c <rcl_get_default_domain_id>:
 802698c:	b510      	push	{r4, lr}
 802698e:	2300      	movs	r3, #0
 8026990:	b082      	sub	sp, #8
 8026992:	9300      	str	r3, [sp, #0]
 8026994:	b1f0      	cbz	r0, 80269d4 <rcl_get_default_domain_id+0x48>
 8026996:	4604      	mov	r4, r0
 8026998:	4669      	mov	r1, sp
 802699a:	4814      	ldr	r0, [pc, #80]	@ (80269ec <rcl_get_default_domain_id+0x60>)
 802699c:	f7f9 f9f0 	bl	801fd80 <rcutils_get_env>
 80269a0:	4602      	mov	r2, r0
 80269a2:	b110      	cbz	r0, 80269aa <rcl_get_default_domain_id+0x1e>
 80269a4:	2001      	movs	r0, #1
 80269a6:	b002      	add	sp, #8
 80269a8:	bd10      	pop	{r4, pc}
 80269aa:	9b00      	ldr	r3, [sp, #0]
 80269ac:	b1ab      	cbz	r3, 80269da <rcl_get_default_domain_id+0x4e>
 80269ae:	7818      	ldrb	r0, [r3, #0]
 80269b0:	2800      	cmp	r0, #0
 80269b2:	d0f8      	beq.n	80269a6 <rcl_get_default_domain_id+0x1a>
 80269b4:	4618      	mov	r0, r3
 80269b6:	a901      	add	r1, sp, #4
 80269b8:	9201      	str	r2, [sp, #4]
 80269ba:	f001 ff35 	bl	8028828 <strtoul>
 80269be:	4603      	mov	r3, r0
 80269c0:	b170      	cbz	r0, 80269e0 <rcl_get_default_domain_id+0x54>
 80269c2:	1c42      	adds	r2, r0, #1
 80269c4:	d103      	bne.n	80269ce <rcl_get_default_domain_id+0x42>
 80269c6:	4a0a      	ldr	r2, [pc, #40]	@ (80269f0 <rcl_get_default_domain_id+0x64>)
 80269c8:	6812      	ldr	r2, [r2, #0]
 80269ca:	2a22      	cmp	r2, #34	@ 0x22
 80269cc:	d0ea      	beq.n	80269a4 <rcl_get_default_domain_id+0x18>
 80269ce:	2000      	movs	r0, #0
 80269d0:	6023      	str	r3, [r4, #0]
 80269d2:	e7e8      	b.n	80269a6 <rcl_get_default_domain_id+0x1a>
 80269d4:	200b      	movs	r0, #11
 80269d6:	b002      	add	sp, #8
 80269d8:	bd10      	pop	{r4, pc}
 80269da:	4618      	mov	r0, r3
 80269dc:	b002      	add	sp, #8
 80269de:	bd10      	pop	{r4, pc}
 80269e0:	9a01      	ldr	r2, [sp, #4]
 80269e2:	7812      	ldrb	r2, [r2, #0]
 80269e4:	2a00      	cmp	r2, #0
 80269e6:	d0f2      	beq.n	80269ce <rcl_get_default_domain_id+0x42>
 80269e8:	e7dc      	b.n	80269a4 <rcl_get_default_domain_id+0x18>
 80269ea:	bf00      	nop
 80269ec:	0802ffcc 	.word	0x0802ffcc
 80269f0:	20047370 	.word	0x20047370

080269f4 <rcl_expand_topic_name>:
 80269f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269f8:	b08d      	sub	sp, #52	@ 0x34
 80269fa:	4698      	mov	r8, r3
 80269fc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80269fe:	9207      	str	r2, [sp, #28]
 8026a00:	2b00      	cmp	r3, #0
 8026a02:	bf18      	it	ne
 8026a04:	f1b8 0f00 	cmpne.w	r8, #0
 8026a08:	bf0c      	ite	eq
 8026a0a:	2301      	moveq	r3, #1
 8026a0c:	2300      	movne	r3, #0
 8026a0e:	2a00      	cmp	r2, #0
 8026a10:	bf08      	it	eq
 8026a12:	f043 0301 	orreq.w	r3, r3, #1
 8026a16:	2900      	cmp	r1, #0
 8026a18:	bf08      	it	eq
 8026a1a:	f043 0301 	orreq.w	r3, r3, #1
 8026a1e:	2b00      	cmp	r3, #0
 8026a20:	d13d      	bne.n	8026a9e <rcl_expand_topic_name+0xaa>
 8026a22:	fab0 f280 	clz	r2, r0
 8026a26:	4604      	mov	r4, r0
 8026a28:	0952      	lsrs	r2, r2, #5
 8026a2a:	2800      	cmp	r0, #0
 8026a2c:	d037      	beq.n	8026a9e <rcl_expand_topic_name+0xaa>
 8026a2e:	460f      	mov	r7, r1
 8026a30:	a90b      	add	r1, sp, #44	@ 0x2c
 8026a32:	f000 fa15 	bl	8026e60 <rcl_validate_topic_name>
 8026a36:	4605      	mov	r5, r0
 8026a38:	bb68      	cbnz	r0, 8026a96 <rcl_expand_topic_name+0xa2>
 8026a3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026a3c:	2b00      	cmp	r3, #0
 8026a3e:	d137      	bne.n	8026ab0 <rcl_expand_topic_name+0xbc>
 8026a40:	4602      	mov	r2, r0
 8026a42:	a90b      	add	r1, sp, #44	@ 0x2c
 8026a44:	4638      	mov	r0, r7
 8026a46:	f7f9 fdb1 	bl	80205ac <rmw_validate_node_name>
 8026a4a:	bb68      	cbnz	r0, 8026aa8 <rcl_expand_topic_name+0xb4>
 8026a4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026a4e:	2b00      	cmp	r3, #0
 8026a50:	d133      	bne.n	8026aba <rcl_expand_topic_name+0xc6>
 8026a52:	462a      	mov	r2, r5
 8026a54:	a90b      	add	r1, sp, #44	@ 0x2c
 8026a56:	9807      	ldr	r0, [sp, #28]
 8026a58:	f7f9 fd8a 	bl	8020570 <rmw_validate_namespace>
 8026a5c:	bb20      	cbnz	r0, 8026aa8 <rcl_expand_topic_name+0xb4>
 8026a5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8026a60:	2d00      	cmp	r5, #0
 8026a62:	f040 80a2 	bne.w	8026baa <rcl_expand_topic_name+0x1b6>
 8026a66:	217b      	movs	r1, #123	@ 0x7b
 8026a68:	4620      	mov	r0, r4
 8026a6a:	f002 fde3 	bl	8029634 <strchr>
 8026a6e:	7823      	ldrb	r3, [r4, #0]
 8026a70:	4681      	mov	r9, r0
 8026a72:	bb20      	cbnz	r0, 8026abe <rcl_expand_topic_name+0xca>
 8026a74:	2b2f      	cmp	r3, #47	@ 0x2f
 8026a76:	d122      	bne.n	8026abe <rcl_expand_topic_name+0xca>
 8026a78:	ab19      	add	r3, sp, #100	@ 0x64
 8026a7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8026a7e:	ab16      	add	r3, sp, #88	@ 0x58
 8026a80:	e88d 0003 	stmia.w	sp, {r0, r1}
 8026a84:	4620      	mov	r0, r4
 8026a86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8026a88:	f7f9 fae4 	bl	8020054 <rcutils_strdup>
 8026a8c:	2800      	cmp	r0, #0
 8026a8e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026a90:	bf08      	it	eq
 8026a92:	250a      	moveq	r5, #10
 8026a94:	6018      	str	r0, [r3, #0]
 8026a96:	4628      	mov	r0, r5
 8026a98:	b00d      	add	sp, #52	@ 0x34
 8026a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a9e:	250b      	movs	r5, #11
 8026aa0:	4628      	mov	r0, r5
 8026aa2:	b00d      	add	sp, #52	@ 0x34
 8026aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026aa8:	f7ff ff5c 	bl	8026964 <rcl_convert_rmw_ret_to_rcl_ret>
 8026aac:	4605      	mov	r5, r0
 8026aae:	e7f2      	b.n	8026a96 <rcl_expand_topic_name+0xa2>
 8026ab0:	2567      	movs	r5, #103	@ 0x67
 8026ab2:	4628      	mov	r0, r5
 8026ab4:	b00d      	add	sp, #52	@ 0x34
 8026ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026aba:	25c9      	movs	r5, #201	@ 0xc9
 8026abc:	e7eb      	b.n	8026a96 <rcl_expand_topic_name+0xa2>
 8026abe:	2b7e      	cmp	r3, #126	@ 0x7e
 8026ac0:	d075      	beq.n	8026bae <rcl_expand_topic_name+0x1ba>
 8026ac2:	f1b9 0f00 	cmp.w	r9, #0
 8026ac6:	f000 80c2 	beq.w	8026c4e <rcl_expand_topic_name+0x25a>
 8026aca:	2300      	movs	r3, #0
 8026acc:	46a2      	mov	sl, r4
 8026ace:	461e      	mov	r6, r3
 8026ad0:	9508      	str	r5, [sp, #32]
 8026ad2:	4655      	mov	r5, sl
 8026ad4:	9409      	str	r4, [sp, #36]	@ 0x24
 8026ad6:	46b2      	mov	sl, r6
 8026ad8:	464c      	mov	r4, r9
 8026ada:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026ade:	2c00      	cmp	r4, #0
 8026ae0:	f000 80ae 	beq.w	8026c40 <rcl_expand_topic_name+0x24c>
 8026ae4:	217d      	movs	r1, #125	@ 0x7d
 8026ae6:	4628      	mov	r0, r5
 8026ae8:	f002 fda4 	bl	8029634 <strchr>
 8026aec:	eba0 0904 	sub.w	r9, r0, r4
 8026af0:	4621      	mov	r1, r4
 8026af2:	4869      	ldr	r0, [pc, #420]	@ (8026c98 <rcl_expand_topic_name+0x2a4>)
 8026af4:	f109 0601 	add.w	r6, r9, #1
 8026af8:	4632      	mov	r2, r6
 8026afa:	f002 fda8 	bl	802964e <strncmp>
 8026afe:	2800      	cmp	r0, #0
 8026b00:	d051      	beq.n	8026ba6 <rcl_expand_topic_name+0x1b2>
 8026b02:	4632      	mov	r2, r6
 8026b04:	4621      	mov	r1, r4
 8026b06:	4865      	ldr	r0, [pc, #404]	@ (8026c9c <rcl_expand_topic_name+0x2a8>)
 8026b08:	f002 fda1 	bl	802964e <strncmp>
 8026b0c:	b128      	cbz	r0, 8026b1a <rcl_expand_topic_name+0x126>
 8026b0e:	4632      	mov	r2, r6
 8026b10:	4621      	mov	r1, r4
 8026b12:	4863      	ldr	r0, [pc, #396]	@ (8026ca0 <rcl_expand_topic_name+0x2ac>)
 8026b14:	f002 fd9b 	bl	802964e <strncmp>
 8026b18:	bb38      	cbnz	r0, 8026b6a <rcl_expand_topic_name+0x176>
 8026b1a:	46d9      	mov	r9, fp
 8026b1c:	ab18      	add	r3, sp, #96	@ 0x60
 8026b1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8026b22:	ab16      	add	r3, sp, #88	@ 0x58
 8026b24:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8026b28:	4620      	mov	r0, r4
 8026b2a:	4631      	mov	r1, r6
 8026b2c:	cb0c      	ldmia	r3, {r2, r3}
 8026b2e:	f7f9 fab3 	bl	8020098 <rcutils_strndup>
 8026b32:	4604      	mov	r4, r0
 8026b34:	2800      	cmp	r0, #0
 8026b36:	f000 80a3 	beq.w	8026c80 <rcl_expand_topic_name+0x28c>
 8026b3a:	464a      	mov	r2, r9
 8026b3c:	4628      	mov	r0, r5
 8026b3e:	ab16      	add	r3, sp, #88	@ 0x58
 8026b40:	4621      	mov	r1, r4
 8026b42:	f7f9 f97f 	bl	801fe44 <rcutils_repl_str>
 8026b46:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8026b48:	4605      	mov	r5, r0
 8026b4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026b4c:	4620      	mov	r0, r4
 8026b4e:	4798      	blx	r3
 8026b50:	4650      	mov	r0, sl
 8026b52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026b54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8026b56:	4798      	blx	r3
 8026b58:	2d00      	cmp	r5, #0
 8026b5a:	d06c      	beq.n	8026c36 <rcl_expand_topic_name+0x242>
 8026b5c:	217b      	movs	r1, #123	@ 0x7b
 8026b5e:	4628      	mov	r0, r5
 8026b60:	f002 fd68 	bl	8029634 <strchr>
 8026b64:	46aa      	mov	sl, r5
 8026b66:	4604      	mov	r4, r0
 8026b68:	e7b9      	b.n	8026ade <rcl_expand_topic_name+0xea>
 8026b6a:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8026b6e:	1c61      	adds	r1, r4, #1
 8026b70:	4640      	mov	r0, r8
 8026b72:	f7f9 fba9 	bl	80202c8 <rcutils_string_map_getn>
 8026b76:	4681      	mov	r9, r0
 8026b78:	2800      	cmp	r0, #0
 8026b7a:	d1cf      	bne.n	8026b1c <rcl_expand_topic_name+0x128>
 8026b7c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026b7e:	aa18      	add	r2, sp, #96	@ 0x60
 8026b80:	2569      	movs	r5, #105	@ 0x69
 8026b82:	6018      	str	r0, [r3, #0]
 8026b84:	ab16      	add	r3, sp, #88	@ 0x58
 8026b86:	ca07      	ldmia	r2, {r0, r1, r2}
 8026b88:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8026b8c:	4631      	mov	r1, r6
 8026b8e:	4620      	mov	r0, r4
 8026b90:	cb0c      	ldmia	r3, {r2, r3}
 8026b92:	f7f9 fa81 	bl	8020098 <rcutils_strndup>
 8026b96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8026b98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026b9a:	4798      	blx	r3
 8026b9c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026b9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8026ba0:	4650      	mov	r0, sl
 8026ba2:	4798      	blx	r3
 8026ba4:	e777      	b.n	8026a96 <rcl_expand_topic_name+0xa2>
 8026ba6:	46b9      	mov	r9, r7
 8026ba8:	e7b8      	b.n	8026b1c <rcl_expand_topic_name+0x128>
 8026baa:	25ca      	movs	r5, #202	@ 0xca
 8026bac:	e773      	b.n	8026a96 <rcl_expand_topic_name+0xa2>
 8026bae:	9e07      	ldr	r6, [sp, #28]
 8026bb0:	4630      	mov	r0, r6
 8026bb2:	f7d9 fb8d 	bl	80002d0 <strlen>
 8026bb6:	4a3b      	ldr	r2, [pc, #236]	@ (8026ca4 <rcl_expand_topic_name+0x2b0>)
 8026bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8026ca8 <rcl_expand_topic_name+0x2b4>)
 8026bba:	9603      	str	r6, [sp, #12]
 8026bbc:	2801      	cmp	r0, #1
 8026bbe:	bf18      	it	ne
 8026bc0:	4613      	movne	r3, r2
 8026bc2:	9704      	str	r7, [sp, #16]
 8026bc4:	9302      	str	r3, [sp, #8]
 8026bc6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026bc8:	9300      	str	r3, [sp, #0]
 8026bca:	1c63      	adds	r3, r4, #1
 8026bcc:	9305      	str	r3, [sp, #20]
 8026bce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8026bd2:	9301      	str	r3, [sp, #4]
 8026bd4:	ab16      	add	r3, sp, #88	@ 0x58
 8026bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026bd8:	f7f9 f8fa 	bl	801fdd0 <rcutils_format_string_limit>
 8026bdc:	4606      	mov	r6, r0
 8026bde:	b350      	cbz	r0, 8026c36 <rcl_expand_topic_name+0x242>
 8026be0:	f1b9 0f00 	cmp.w	r9, #0
 8026be4:	d005      	beq.n	8026bf2 <rcl_expand_topic_name+0x1fe>
 8026be6:	217b      	movs	r1, #123	@ 0x7b
 8026be8:	46b2      	mov	sl, r6
 8026bea:	f002 fd23 	bl	8029634 <strchr>
 8026bee:	4681      	mov	r9, r0
 8026bf0:	e76e      	b.n	8026ad0 <rcl_expand_topic_name+0xdc>
 8026bf2:	7833      	ldrb	r3, [r6, #0]
 8026bf4:	2b2f      	cmp	r3, #47	@ 0x2f
 8026bf6:	d01b      	beq.n	8026c30 <rcl_expand_topic_name+0x23c>
 8026bf8:	9c07      	ldr	r4, [sp, #28]
 8026bfa:	4620      	mov	r0, r4
 8026bfc:	f7d9 fb68 	bl	80002d0 <strlen>
 8026c00:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8026c04:	4a29      	ldr	r2, [pc, #164]	@ (8026cac <rcl_expand_topic_name+0x2b8>)
 8026c06:	9301      	str	r3, [sp, #4]
 8026c08:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026c0a:	9604      	str	r6, [sp, #16]
 8026c0c:	9300      	str	r3, [sp, #0]
 8026c0e:	4b28      	ldr	r3, [pc, #160]	@ (8026cb0 <rcl_expand_topic_name+0x2bc>)
 8026c10:	9403      	str	r4, [sp, #12]
 8026c12:	2801      	cmp	r0, #1
 8026c14:	bf18      	it	ne
 8026c16:	4613      	movne	r3, r2
 8026c18:	9302      	str	r3, [sp, #8]
 8026c1a:	ab16      	add	r3, sp, #88	@ 0x58
 8026c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026c1e:	f7f9 f8d7 	bl	801fdd0 <rcutils_format_string_limit>
 8026c22:	4603      	mov	r3, r0
 8026c24:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8026c26:	4630      	mov	r0, r6
 8026c28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8026c2a:	461e      	mov	r6, r3
 8026c2c:	4790      	blx	r2
 8026c2e:	b116      	cbz	r6, 8026c36 <rcl_expand_topic_name+0x242>
 8026c30:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026c32:	601e      	str	r6, [r3, #0]
 8026c34:	e72f      	b.n	8026a96 <rcl_expand_topic_name+0xa2>
 8026c36:	2300      	movs	r3, #0
 8026c38:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8026c3a:	250a      	movs	r5, #10
 8026c3c:	6013      	str	r3, [r2, #0]
 8026c3e:	e72a      	b.n	8026a96 <rcl_expand_topic_name+0xa2>
 8026c40:	4653      	mov	r3, sl
 8026c42:	4656      	mov	r6, sl
 8026c44:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8026c48:	2b00      	cmp	r3, #0
 8026c4a:	d1d2      	bne.n	8026bf2 <rcl_expand_topic_name+0x1fe>
 8026c4c:	7823      	ldrb	r3, [r4, #0]
 8026c4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8026c50:	d01e      	beq.n	8026c90 <rcl_expand_topic_name+0x29c>
 8026c52:	9e07      	ldr	r6, [sp, #28]
 8026c54:	4630      	mov	r0, r6
 8026c56:	f7d9 fb3b 	bl	80002d0 <strlen>
 8026c5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8026c5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8026c60:	9603      	str	r6, [sp, #12]
 8026c62:	9404      	str	r4, [sp, #16]
 8026c64:	e9cd 2300 	strd	r2, r3, [sp]
 8026c68:	4a10      	ldr	r2, [pc, #64]	@ (8026cac <rcl_expand_topic_name+0x2b8>)
 8026c6a:	4b11      	ldr	r3, [pc, #68]	@ (8026cb0 <rcl_expand_topic_name+0x2bc>)
 8026c6c:	2801      	cmp	r0, #1
 8026c6e:	bf18      	it	ne
 8026c70:	4613      	movne	r3, r2
 8026c72:	9302      	str	r3, [sp, #8]
 8026c74:	ab16      	add	r3, sp, #88	@ 0x58
 8026c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026c78:	f7f9 f8aa 	bl	801fdd0 <rcutils_format_string_limit>
 8026c7c:	4606      	mov	r6, r0
 8026c7e:	e7d6      	b.n	8026c2e <rcl_expand_topic_name+0x23a>
 8026c80:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 8026c84:	4650      	mov	r0, sl
 8026c86:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026c88:	6014      	str	r4, [r2, #0]
 8026c8a:	250a      	movs	r5, #10
 8026c8c:	4798      	blx	r3
 8026c8e:	e702      	b.n	8026a96 <rcl_expand_topic_name+0xa2>
 8026c90:	2300      	movs	r3, #0
 8026c92:	461e      	mov	r6, r3
 8026c94:	e7cc      	b.n	8026c30 <rcl_expand_topic_name+0x23c>
 8026c96:	bf00      	nop
 8026c98:	0802ffe4 	.word	0x0802ffe4
 8026c9c:	0802ffec 	.word	0x0802ffec
 8026ca0:	0802fff4 	.word	0x0802fff4
 8026ca4:	0802ffdc 	.word	0x0802ffdc
 8026ca8:	0802fd60 	.word	0x0802fd60
 8026cac:	0802f7d8 	.word	0x0802f7d8
 8026cb0:	0802f7d0 	.word	0x0802f7d0

08026cb4 <rcl_get_default_topic_name_substitutions>:
 8026cb4:	2800      	cmp	r0, #0
 8026cb6:	bf0c      	ite	eq
 8026cb8:	200b      	moveq	r0, #11
 8026cba:	2000      	movne	r0, #0
 8026cbc:	4770      	bx	lr
 8026cbe:	bf00      	nop

08026cc0 <rcl_get_zero_initialized_guard_condition>:
 8026cc0:	4a03      	ldr	r2, [pc, #12]	@ (8026cd0 <rcl_get_zero_initialized_guard_condition+0x10>)
 8026cc2:	4603      	mov	r3, r0
 8026cc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026cc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8026ccc:	4618      	mov	r0, r3
 8026cce:	4770      	bx	lr
 8026cd0:	08030000 	.word	0x08030000

08026cd4 <rcl_guard_condition_init_from_rmw>:
 8026cd4:	b082      	sub	sp, #8
 8026cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026cda:	b086      	sub	sp, #24
 8026cdc:	4604      	mov	r4, r0
 8026cde:	460e      	mov	r6, r1
 8026ce0:	4615      	mov	r5, r2
 8026ce2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8026ce6:	f10d 0e04 	add.w	lr, sp, #4
 8026cea:	f84c 3f04 	str.w	r3, [ip, #4]!
 8026cee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8026cf2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8026cf6:	f8dc 3000 	ldr.w	r3, [ip]
 8026cfa:	a801      	add	r0, sp, #4
 8026cfc:	f8ce 3000 	str.w	r3, [lr]
 8026d00:	f7f5 feba 	bl	801ca78 <rcutils_allocator_is_valid>
 8026d04:	f080 0301 	eor.w	r3, r0, #1
 8026d08:	b2db      	uxtb	r3, r3
 8026d0a:	bb3b      	cbnz	r3, 8026d5c <rcl_guard_condition_init_from_rmw+0x88>
 8026d0c:	b334      	cbz	r4, 8026d5c <rcl_guard_condition_init_from_rmw+0x88>
 8026d0e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8026d12:	f1b8 0f00 	cmp.w	r8, #0
 8026d16:	d11a      	bne.n	8026d4e <rcl_guard_condition_init_from_rmw+0x7a>
 8026d18:	b305      	cbz	r5, 8026d5c <rcl_guard_condition_init_from_rmw+0x88>
 8026d1a:	4628      	mov	r0, r5
 8026d1c:	f7f6 fa48 	bl	801d1b0 <rcl_context_is_valid>
 8026d20:	b1f0      	cbz	r0, 8026d60 <rcl_guard_condition_init_from_rmw+0x8c>
 8026d22:	9b01      	ldr	r3, [sp, #4]
 8026d24:	201c      	movs	r0, #28
 8026d26:	9905      	ldr	r1, [sp, #20]
 8026d28:	4798      	blx	r3
 8026d2a:	4607      	mov	r7, r0
 8026d2c:	6060      	str	r0, [r4, #4]
 8026d2e:	b320      	cbz	r0, 8026d7a <rcl_guard_condition_init_from_rmw+0xa6>
 8026d30:	b1c6      	cbz	r6, 8026d64 <rcl_guard_condition_init_from_rmw+0x90>
 8026d32:	6006      	str	r6, [r0, #0]
 8026d34:	f880 8004 	strb.w	r8, [r0, #4]
 8026d38:	ac01      	add	r4, sp, #4
 8026d3a:	f107 0c08 	add.w	ip, r7, #8
 8026d3e:	2500      	movs	r5, #0
 8026d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026d42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8026d46:	6823      	ldr	r3, [r4, #0]
 8026d48:	f8cc 3000 	str.w	r3, [ip]
 8026d4c:	e000      	b.n	8026d50 <rcl_guard_condition_init_from_rmw+0x7c>
 8026d4e:	2564      	movs	r5, #100	@ 0x64
 8026d50:	4628      	mov	r0, r5
 8026d52:	b006      	add	sp, #24
 8026d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026d58:	b002      	add	sp, #8
 8026d5a:	4770      	bx	lr
 8026d5c:	250b      	movs	r5, #11
 8026d5e:	e7f7      	b.n	8026d50 <rcl_guard_condition_init_from_rmw+0x7c>
 8026d60:	2565      	movs	r5, #101	@ 0x65
 8026d62:	e7f5      	b.n	8026d50 <rcl_guard_condition_init_from_rmw+0x7c>
 8026d64:	6828      	ldr	r0, [r5, #0]
 8026d66:	3028      	adds	r0, #40	@ 0x28
 8026d68:	f000 fafc 	bl	8027364 <rmw_create_guard_condition>
 8026d6c:	6038      	str	r0, [r7, #0]
 8026d6e:	6867      	ldr	r7, [r4, #4]
 8026d70:	683e      	ldr	r6, [r7, #0]
 8026d72:	b126      	cbz	r6, 8026d7e <rcl_guard_condition_init_from_rmw+0xaa>
 8026d74:	2301      	movs	r3, #1
 8026d76:	713b      	strb	r3, [r7, #4]
 8026d78:	e7de      	b.n	8026d38 <rcl_guard_condition_init_from_rmw+0x64>
 8026d7a:	250a      	movs	r5, #10
 8026d7c:	e7e8      	b.n	8026d50 <rcl_guard_condition_init_from_rmw+0x7c>
 8026d7e:	9b02      	ldr	r3, [sp, #8]
 8026d80:	4638      	mov	r0, r7
 8026d82:	9905      	ldr	r1, [sp, #20]
 8026d84:	2501      	movs	r5, #1
 8026d86:	4798      	blx	r3
 8026d88:	6066      	str	r6, [r4, #4]
 8026d8a:	e7e1      	b.n	8026d50 <rcl_guard_condition_init_from_rmw+0x7c>

08026d8c <rcl_guard_condition_fini>:
 8026d8c:	b570      	push	{r4, r5, r6, lr}
 8026d8e:	b082      	sub	sp, #8
 8026d90:	b1f0      	cbz	r0, 8026dd0 <rcl_guard_condition_fini+0x44>
 8026d92:	6843      	ldr	r3, [r0, #4]
 8026d94:	4604      	mov	r4, r0
 8026d96:	b163      	cbz	r3, 8026db2 <rcl_guard_condition_fini+0x26>
 8026d98:	6818      	ldr	r0, [r3, #0]
 8026d9a:	68de      	ldr	r6, [r3, #12]
 8026d9c:	6999      	ldr	r1, [r3, #24]
 8026d9e:	b160      	cbz	r0, 8026dba <rcl_guard_condition_fini+0x2e>
 8026da0:	791d      	ldrb	r5, [r3, #4]
 8026da2:	b965      	cbnz	r5, 8026dbe <rcl_guard_condition_fini+0x32>
 8026da4:	4618      	mov	r0, r3
 8026da6:	47b0      	blx	r6
 8026da8:	2300      	movs	r3, #0
 8026daa:	4628      	mov	r0, r5
 8026dac:	6063      	str	r3, [r4, #4]
 8026dae:	b002      	add	sp, #8
 8026db0:	bd70      	pop	{r4, r5, r6, pc}
 8026db2:	461d      	mov	r5, r3
 8026db4:	4628      	mov	r0, r5
 8026db6:	b002      	add	sp, #8
 8026db8:	bd70      	pop	{r4, r5, r6, pc}
 8026dba:	4605      	mov	r5, r0
 8026dbc:	e7f2      	b.n	8026da4 <rcl_guard_condition_fini+0x18>
 8026dbe:	9101      	str	r1, [sp, #4]
 8026dc0:	f000 fae6 	bl	8027390 <rmw_destroy_guard_condition>
 8026dc4:	1e05      	subs	r5, r0, #0
 8026dc6:	6863      	ldr	r3, [r4, #4]
 8026dc8:	9901      	ldr	r1, [sp, #4]
 8026dca:	bf18      	it	ne
 8026dcc:	2501      	movne	r5, #1
 8026dce:	e7e9      	b.n	8026da4 <rcl_guard_condition_fini+0x18>
 8026dd0:	250b      	movs	r5, #11
 8026dd2:	4628      	mov	r0, r5
 8026dd4:	b002      	add	sp, #8
 8026dd6:	bd70      	pop	{r4, r5, r6, pc}

08026dd8 <rcl_guard_condition_get_default_options>:
 8026dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026dda:	b087      	sub	sp, #28
 8026ddc:	4606      	mov	r6, r0
 8026dde:	4c0b      	ldr	r4, [pc, #44]	@ (8026e0c <rcl_guard_condition_get_default_options+0x34>)
 8026de0:	4668      	mov	r0, sp
 8026de2:	f7f5 fe3b 	bl	801ca5c <rcutils_get_default_allocator>
 8026de6:	46ee      	mov	lr, sp
 8026de8:	46a4      	mov	ip, r4
 8026dea:	4625      	mov	r5, r4
 8026dec:	4634      	mov	r4, r6
 8026dee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8026df2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8026df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026df8:	f8de 7000 	ldr.w	r7, [lr]
 8026dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026dfe:	4630      	mov	r0, r6
 8026e00:	f8cc 7000 	str.w	r7, [ip]
 8026e04:	6027      	str	r7, [r4, #0]
 8026e06:	b007      	add	sp, #28
 8026e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026e0a:	bf00      	nop
 8026e0c:	20047178 	.word	0x20047178

08026e10 <rcl_guard_condition_get_rmw_handle>:
 8026e10:	b110      	cbz	r0, 8026e18 <rcl_guard_condition_get_rmw_handle+0x8>
 8026e12:	6840      	ldr	r0, [r0, #4]
 8026e14:	b100      	cbz	r0, 8026e18 <rcl_guard_condition_get_rmw_handle+0x8>
 8026e16:	6800      	ldr	r0, [r0, #0]
 8026e18:	4770      	bx	lr
 8026e1a:	bf00      	nop

08026e1c <rcl_publisher_is_valid>:
 8026e1c:	b1a0      	cbz	r0, 8026e48 <rcl_publisher_is_valid+0x2c>
 8026e1e:	6803      	ldr	r3, [r0, #0]
 8026e20:	b510      	push	{r4, lr}
 8026e22:	4604      	mov	r4, r0
 8026e24:	b173      	cbz	r3, 8026e44 <rcl_publisher_is_valid+0x28>
 8026e26:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8026e2a:	b15a      	cbz	r2, 8026e44 <rcl_publisher_is_valid+0x28>
 8026e2c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8026e30:	f7f6 f9be 	bl	801d1b0 <rcl_context_is_valid>
 8026e34:	b130      	cbz	r0, 8026e44 <rcl_publisher_is_valid+0x28>
 8026e36:	6823      	ldr	r3, [r4, #0]
 8026e38:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8026e3c:	3800      	subs	r0, #0
 8026e3e:	bf18      	it	ne
 8026e40:	2001      	movne	r0, #1
 8026e42:	bd10      	pop	{r4, pc}
 8026e44:	2000      	movs	r0, #0
 8026e46:	bd10      	pop	{r4, pc}
 8026e48:	2000      	movs	r0, #0
 8026e4a:	4770      	bx	lr

08026e4c <rcl_publisher_is_valid_except_context>:
 8026e4c:	b130      	cbz	r0, 8026e5c <rcl_publisher_is_valid_except_context+0x10>
 8026e4e:	6800      	ldr	r0, [r0, #0]
 8026e50:	b120      	cbz	r0, 8026e5c <rcl_publisher_is_valid_except_context+0x10>
 8026e52:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8026e56:	3800      	subs	r0, #0
 8026e58:	bf18      	it	ne
 8026e5a:	2001      	movne	r0, #1
 8026e5c:	4770      	bx	lr
 8026e5e:	bf00      	nop

08026e60 <rcl_validate_topic_name>:
 8026e60:	2800      	cmp	r0, #0
 8026e62:	f000 8089 	beq.w	8026f78 <rcl_validate_topic_name+0x118>
 8026e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026e6a:	460e      	mov	r6, r1
 8026e6c:	2900      	cmp	r1, #0
 8026e6e:	f000 8085 	beq.w	8026f7c <rcl_validate_topic_name+0x11c>
 8026e72:	4604      	mov	r4, r0
 8026e74:	4617      	mov	r7, r2
 8026e76:	f7d9 fa2b 	bl	80002d0 <strlen>
 8026e7a:	b1b0      	cbz	r0, 8026eaa <rcl_validate_topic_name+0x4a>
 8026e7c:	f894 e000 	ldrb.w	lr, [r4]
 8026e80:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8026fe4 <rcl_validate_topic_name+0x184>
 8026e84:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8026e88:	f013 0304 	ands.w	r3, r3, #4
 8026e8c:	d139      	bne.n	8026f02 <rcl_validate_topic_name+0xa2>
 8026e8e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8026e92:	f814 2008 	ldrb.w	r2, [r4, r8]
 8026e96:	2a2f      	cmp	r2, #47	@ 0x2f
 8026e98:	d10f      	bne.n	8026eba <rcl_validate_topic_name+0x5a>
 8026e9a:	2202      	movs	r2, #2
 8026e9c:	6032      	str	r2, [r6, #0]
 8026e9e:	b3a7      	cbz	r7, 8026f0a <rcl_validate_topic_name+0xaa>
 8026ea0:	4618      	mov	r0, r3
 8026ea2:	f8c7 8000 	str.w	r8, [r7]
 8026ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026eaa:	2301      	movs	r3, #1
 8026eac:	6033      	str	r3, [r6, #0]
 8026eae:	b367      	cbz	r7, 8026f0a <rcl_validate_topic_name+0xaa>
 8026eb0:	2300      	movs	r3, #0
 8026eb2:	4618      	mov	r0, r3
 8026eb4:	603b      	str	r3, [r7, #0]
 8026eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026eba:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 8026ebe:	461d      	mov	r5, r3
 8026ec0:	4619      	mov	r1, r3
 8026ec2:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8026ec6:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 8026eca:	f1b9 0f09 	cmp.w	r9, #9
 8026ece:	d91f      	bls.n	8026f10 <rcl_validate_topic_name+0xb0>
 8026ed0:	f022 0920 	bic.w	r9, r2, #32
 8026ed4:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 8026ed8:	f1b9 0f19 	cmp.w	r9, #25
 8026edc:	d918      	bls.n	8026f10 <rcl_validate_topic_name+0xb0>
 8026ede:	2a5f      	cmp	r2, #95	@ 0x5f
 8026ee0:	d024      	beq.n	8026f2c <rcl_validate_topic_name+0xcc>
 8026ee2:	2a2f      	cmp	r2, #47	@ 0x2f
 8026ee4:	d058      	beq.n	8026f98 <rcl_validate_topic_name+0x138>
 8026ee6:	2a7e      	cmp	r2, #126	@ 0x7e
 8026ee8:	d04a      	beq.n	8026f80 <rcl_validate_topic_name+0x120>
 8026eea:	2a7b      	cmp	r2, #123	@ 0x7b
 8026eec:	d05b      	beq.n	8026fa6 <rcl_validate_topic_name+0x146>
 8026eee:	2a7d      	cmp	r2, #125	@ 0x7d
 8026ef0:	d169      	bne.n	8026fc6 <rcl_validate_topic_name+0x166>
 8026ef2:	2d00      	cmp	r5, #0
 8026ef4:	d15c      	bne.n	8026fb0 <rcl_validate_topic_name+0x150>
 8026ef6:	2305      	movs	r3, #5
 8026ef8:	6033      	str	r3, [r6, #0]
 8026efa:	b137      	cbz	r7, 8026f0a <rcl_validate_topic_name+0xaa>
 8026efc:	2000      	movs	r0, #0
 8026efe:	6039      	str	r1, [r7, #0]
 8026f00:	e7d9      	b.n	8026eb6 <rcl_validate_topic_name+0x56>
 8026f02:	2304      	movs	r3, #4
 8026f04:	6033      	str	r3, [r6, #0]
 8026f06:	2f00      	cmp	r7, #0
 8026f08:	d1d2      	bne.n	8026eb0 <rcl_validate_topic_name+0x50>
 8026f0a:	2000      	movs	r0, #0
 8026f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026f10:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8026f14:	0752      	lsls	r2, r2, #29
 8026f16:	d509      	bpl.n	8026f2c <rcl_validate_topic_name+0xcc>
 8026f18:	2900      	cmp	r1, #0
 8026f1a:	bf0c      	ite	eq
 8026f1c:	2200      	moveq	r2, #0
 8026f1e:	f005 0201 	andne.w	r2, r5, #1
 8026f22:	b11a      	cbz	r2, 8026f2c <rcl_validate_topic_name+0xcc>
 8026f24:	1e4d      	subs	r5, r1, #1
 8026f26:	429d      	cmp	r5, r3
 8026f28:	d031      	beq.n	8026f8e <rcl_validate_topic_name+0x12e>
 8026f2a:	4615      	mov	r5, r2
 8026f2c:	3101      	adds	r1, #1
 8026f2e:	4288      	cmp	r0, r1
 8026f30:	d1c7      	bne.n	8026ec2 <rcl_validate_topic_name+0x62>
 8026f32:	2d00      	cmp	r5, #0
 8026f34:	d142      	bne.n	8026fbc <rcl_validate_topic_name+0x15c>
 8026f36:	4628      	mov	r0, r5
 8026f38:	2301      	movs	r3, #1
 8026f3a:	e00c      	b.n	8026f56 <rcl_validate_topic_name+0xf6>
 8026f3c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8026f40:	d101      	bne.n	8026f46 <rcl_validate_topic_name+0xe6>
 8026f42:	2801      	cmp	r0, #1
 8026f44:	d047      	beq.n	8026fd6 <rcl_validate_topic_name+0x176>
 8026f46:	1c5a      	adds	r2, r3, #1
 8026f48:	428b      	cmp	r3, r1
 8026f4a:	f100 0001 	add.w	r0, r0, #1
 8026f4e:	f104 0401 	add.w	r4, r4, #1
 8026f52:	4613      	mov	r3, r2
 8026f54:	d22e      	bcs.n	8026fb4 <rcl_validate_topic_name+0x154>
 8026f56:	4580      	cmp	r8, r0
 8026f58:	d0f5      	beq.n	8026f46 <rcl_validate_topic_name+0xe6>
 8026f5a:	7822      	ldrb	r2, [r4, #0]
 8026f5c:	2a2f      	cmp	r2, #47	@ 0x2f
 8026f5e:	d1ed      	bne.n	8026f3c <rcl_validate_topic_name+0xdc>
 8026f60:	7862      	ldrb	r2, [r4, #1]
 8026f62:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8026f66:	0752      	lsls	r2, r2, #29
 8026f68:	d5ed      	bpl.n	8026f46 <rcl_validate_topic_name+0xe6>
 8026f6a:	2204      	movs	r2, #4
 8026f6c:	6032      	str	r2, [r6, #0]
 8026f6e:	2f00      	cmp	r7, #0
 8026f70:	d0cb      	beq.n	8026f0a <rcl_validate_topic_name+0xaa>
 8026f72:	2000      	movs	r0, #0
 8026f74:	603b      	str	r3, [r7, #0]
 8026f76:	e79e      	b.n	8026eb6 <rcl_validate_topic_name+0x56>
 8026f78:	200b      	movs	r0, #11
 8026f7a:	4770      	bx	lr
 8026f7c:	200b      	movs	r0, #11
 8026f7e:	e79a      	b.n	8026eb6 <rcl_validate_topic_name+0x56>
 8026f80:	2900      	cmp	r1, #0
 8026f82:	d0d3      	beq.n	8026f2c <rcl_validate_topic_name+0xcc>
 8026f84:	2306      	movs	r3, #6
 8026f86:	6033      	str	r3, [r6, #0]
 8026f88:	2f00      	cmp	r7, #0
 8026f8a:	d1b7      	bne.n	8026efc <rcl_validate_topic_name+0x9c>
 8026f8c:	e7bd      	b.n	8026f0a <rcl_validate_topic_name+0xaa>
 8026f8e:	2309      	movs	r3, #9
 8026f90:	6033      	str	r3, [r6, #0]
 8026f92:	2f00      	cmp	r7, #0
 8026f94:	d1b2      	bne.n	8026efc <rcl_validate_topic_name+0x9c>
 8026f96:	e7b8      	b.n	8026f0a <rcl_validate_topic_name+0xaa>
 8026f98:	2d00      	cmp	r5, #0
 8026f9a:	d0c7      	beq.n	8026f2c <rcl_validate_topic_name+0xcc>
 8026f9c:	2308      	movs	r3, #8
 8026f9e:	6033      	str	r3, [r6, #0]
 8026fa0:	2f00      	cmp	r7, #0
 8026fa2:	d1ab      	bne.n	8026efc <rcl_validate_topic_name+0x9c>
 8026fa4:	e7b1      	b.n	8026f0a <rcl_validate_topic_name+0xaa>
 8026fa6:	2d00      	cmp	r5, #0
 8026fa8:	d1f8      	bne.n	8026f9c <rcl_validate_topic_name+0x13c>
 8026faa:	460b      	mov	r3, r1
 8026fac:	2501      	movs	r5, #1
 8026fae:	e7bd      	b.n	8026f2c <rcl_validate_topic_name+0xcc>
 8026fb0:	2500      	movs	r5, #0
 8026fb2:	e7bb      	b.n	8026f2c <rcl_validate_topic_name+0xcc>
 8026fb4:	2300      	movs	r3, #0
 8026fb6:	4618      	mov	r0, r3
 8026fb8:	6033      	str	r3, [r6, #0]
 8026fba:	e77c      	b.n	8026eb6 <rcl_validate_topic_name+0x56>
 8026fbc:	2205      	movs	r2, #5
 8026fbe:	6032      	str	r2, [r6, #0]
 8026fc0:	2f00      	cmp	r7, #0
 8026fc2:	d1d6      	bne.n	8026f72 <rcl_validate_topic_name+0x112>
 8026fc4:	e7a1      	b.n	8026f0a <rcl_validate_topic_name+0xaa>
 8026fc6:	2d00      	cmp	r5, #0
 8026fc8:	bf14      	ite	ne
 8026fca:	2308      	movne	r3, #8
 8026fcc:	2303      	moveq	r3, #3
 8026fce:	6033      	str	r3, [r6, #0]
 8026fd0:	2f00      	cmp	r7, #0
 8026fd2:	d193      	bne.n	8026efc <rcl_validate_topic_name+0x9c>
 8026fd4:	e799      	b.n	8026f0a <rcl_validate_topic_name+0xaa>
 8026fd6:	2307      	movs	r3, #7
 8026fd8:	6033      	str	r3, [r6, #0]
 8026fda:	2f00      	cmp	r7, #0
 8026fdc:	d095      	beq.n	8026f0a <rcl_validate_topic_name+0xaa>
 8026fde:	2301      	movs	r3, #1
 8026fe0:	e7c7      	b.n	8026f72 <rcl_validate_topic_name+0x112>
 8026fe2:	bf00      	nop
 8026fe4:	080301ce 	.word	0x080301ce

08026fe8 <rcutils_string_array_fini>:
 8026fe8:	b328      	cbz	r0, 8027036 <rcutils_string_array_fini+0x4e>
 8026fea:	b570      	push	{r4, r5, r6, lr}
 8026fec:	4604      	mov	r4, r0
 8026fee:	6840      	ldr	r0, [r0, #4]
 8026ff0:	b1e0      	cbz	r0, 802702c <rcutils_string_array_fini+0x44>
 8026ff2:	f104 0008 	add.w	r0, r4, #8
 8026ff6:	f7f5 fd3f 	bl	801ca78 <rcutils_allocator_is_valid>
 8026ffa:	b1c0      	cbz	r0, 802702e <rcutils_string_array_fini+0x46>
 8026ffc:	6823      	ldr	r3, [r4, #0]
 8026ffe:	b1c3      	cbz	r3, 8027032 <rcutils_string_array_fini+0x4a>
 8027000:	2500      	movs	r5, #0
 8027002:	6860      	ldr	r0, [r4, #4]
 8027004:	462e      	mov	r6, r5
 8027006:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 802700a:	68e3      	ldr	r3, [r4, #12]
 802700c:	69a1      	ldr	r1, [r4, #24]
 802700e:	4798      	blx	r3
 8027010:	e9d4 3000 	ldrd	r3, r0, [r4]
 8027014:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8027018:	3501      	adds	r5, #1
 802701a:	429d      	cmp	r5, r3
 802701c:	d3f3      	bcc.n	8027006 <rcutils_string_array_fini+0x1e>
 802701e:	68e3      	ldr	r3, [r4, #12]
 8027020:	69a1      	ldr	r1, [r4, #24]
 8027022:	4798      	blx	r3
 8027024:	2300      	movs	r3, #0
 8027026:	4618      	mov	r0, r3
 8027028:	e9c4 3300 	strd	r3, r3, [r4]
 802702c:	bd70      	pop	{r4, r5, r6, pc}
 802702e:	200b      	movs	r0, #11
 8027030:	bd70      	pop	{r4, r5, r6, pc}
 8027032:	6860      	ldr	r0, [r4, #4]
 8027034:	e7f3      	b.n	802701e <rcutils_string_array_fini+0x36>
 8027036:	200b      	movs	r0, #11
 8027038:	4770      	bx	lr
 802703a:	bf00      	nop

0802703c <rmw_time_equal>:
 802703c:	b4f0      	push	{r4, r5, r6, r7}
 802703e:	b084      	sub	sp, #16
 8027040:	ac04      	add	r4, sp, #16
 8027042:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8027046:	4603      	mov	r3, r0
 8027048:	4925      	ldr	r1, [pc, #148]	@ (80270e0 <rmw_time_equal+0xa4>)
 802704a:	9d01      	ldr	r5, [sp, #4]
 802704c:	4610      	mov	r0, r2
 802704e:	4299      	cmp	r1, r3
 8027050:	f04f 0202 	mov.w	r2, #2
 8027054:	9e03      	ldr	r6, [sp, #12]
 8027056:	41aa      	sbcs	r2, r5
 8027058:	d330      	bcc.n	80270bc <rmw_time_equal+0x80>
 802705a:	4c22      	ldr	r4, [pc, #136]	@ (80270e4 <rmw_time_equal+0xa8>)
 802705c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8027060:	fba3 3204 	umull	r3, r2, r3, r4
 8027064:	fb04 2205 	mla	r2, r4, r5, r2
 8027068:	43dd      	mvns	r5, r3
 802706a:	1a8c      	subs	r4, r1, r2
 802706c:	4285      	cmp	r5, r0
 802706e:	41b4      	sbcs	r4, r6
 8027070:	d332      	bcc.n	80270d8 <rmw_time_equal+0x9c>
 8027072:	eb10 0c03 	adds.w	ip, r0, r3
 8027076:	eb42 0106 	adc.w	r1, r2, r6
 802707a:	4819      	ldr	r0, [pc, #100]	@ (80270e0 <rmw_time_equal+0xa4>)
 802707c:	2202      	movs	r2, #2
 802707e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8027080:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8027082:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8027086:	4298      	cmp	r0, r3
 8027088:	41b2      	sbcs	r2, r6
 802708a:	d31c      	bcc.n	80270c6 <rmw_time_equal+0x8a>
 802708c:	4c15      	ldr	r4, [pc, #84]	@ (80270e4 <rmw_time_equal+0xa8>)
 802708e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8027092:	fba3 3204 	umull	r3, r2, r3, r4
 8027096:	fb04 2206 	mla	r2, r4, r6, r2
 802709a:	43de      	mvns	r6, r3
 802709c:	1a84      	subs	r4, r0, r2
 802709e:	42ae      	cmp	r6, r5
 80270a0:	41bc      	sbcs	r4, r7
 80270a2:	d315      	bcc.n	80270d0 <rmw_time_equal+0x94>
 80270a4:	195b      	adds	r3, r3, r5
 80270a6:	eb42 0207 	adc.w	r2, r2, r7
 80270aa:	428a      	cmp	r2, r1
 80270ac:	bf08      	it	eq
 80270ae:	4563      	cmpeq	r3, ip
 80270b0:	bf0c      	ite	eq
 80270b2:	2001      	moveq	r0, #1
 80270b4:	2000      	movne	r0, #0
 80270b6:	b004      	add	sp, #16
 80270b8:	bcf0      	pop	{r4, r5, r6, r7}
 80270ba:	4770      	bx	lr
 80270bc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80270c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80270c4:	e7d9      	b.n	802707a <rmw_time_equal+0x3e>
 80270c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80270ca:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80270ce:	e7ec      	b.n	80270aa <rmw_time_equal+0x6e>
 80270d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80270d4:	4602      	mov	r2, r0
 80270d6:	e7e8      	b.n	80270aa <rmw_time_equal+0x6e>
 80270d8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80270dc:	e7cd      	b.n	802707a <rmw_time_equal+0x3e>
 80270de:	bf00      	nop
 80270e0:	25c17d04 	.word	0x25c17d04
 80270e4:	3b9aca00 	.word	0x3b9aca00

080270e8 <rmw_time_total_nsec>:
 80270e8:	b470      	push	{r4, r5, r6}
 80270ea:	b085      	sub	sp, #20
 80270ec:	ac04      	add	r4, sp, #16
 80270ee:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80270f2:	4603      	mov	r3, r0
 80270f4:	4913      	ldr	r1, [pc, #76]	@ (8027144 <rmw_time_total_nsec+0x5c>)
 80270f6:	9d01      	ldr	r5, [sp, #4]
 80270f8:	4610      	mov	r0, r2
 80270fa:	4299      	cmp	r1, r3
 80270fc:	f04f 0202 	mov.w	r2, #2
 8027100:	9e03      	ldr	r6, [sp, #12]
 8027102:	41aa      	sbcs	r2, r5
 8027104:	d311      	bcc.n	802712a <rmw_time_total_nsec+0x42>
 8027106:	4c10      	ldr	r4, [pc, #64]	@ (8027148 <rmw_time_total_nsec+0x60>)
 8027108:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802710c:	fba3 3204 	umull	r3, r2, r3, r4
 8027110:	fb04 2205 	mla	r2, r4, r5, r2
 8027114:	43dd      	mvns	r5, r3
 8027116:	1a8c      	subs	r4, r1, r2
 8027118:	4285      	cmp	r5, r0
 802711a:	41b4      	sbcs	r4, r6
 802711c:	d30c      	bcc.n	8027138 <rmw_time_total_nsec+0x50>
 802711e:	1818      	adds	r0, r3, r0
 8027120:	eb42 0106 	adc.w	r1, r2, r6
 8027124:	b005      	add	sp, #20
 8027126:	bc70      	pop	{r4, r5, r6}
 8027128:	4770      	bx	lr
 802712a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802712e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8027132:	b005      	add	sp, #20
 8027134:	bc70      	pop	{r4, r5, r6}
 8027136:	4770      	bx	lr
 8027138:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802713c:	b005      	add	sp, #20
 802713e:	bc70      	pop	{r4, r5, r6}
 8027140:	4770      	bx	lr
 8027142:	bf00      	nop
 8027144:	25c17d04 	.word	0x25c17d04
 8027148:	3b9aca00 	.word	0x3b9aca00

0802714c <on_status>:
 802714c:	b082      	sub	sp, #8
 802714e:	b002      	add	sp, #8
 8027150:	4770      	bx	lr
 8027152:	bf00      	nop

08027154 <on_topic>:
 8027154:	4a23      	ldr	r2, [pc, #140]	@ (80271e4 <on_topic+0x90>)
 8027156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802715a:	6812      	ldr	r2, [r2, #0]
 802715c:	b094      	sub	sp, #80	@ 0x50
 802715e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8027160:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8027164:	9113      	str	r1, [sp, #76]	@ 0x4c
 8027166:	9312      	str	r3, [sp, #72]	@ 0x48
 8027168:	b3c2      	cbz	r2, 80271dc <on_topic+0x88>
 802716a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 802716e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8027172:	e001      	b.n	8027178 <on_topic+0x24>
 8027174:	6852      	ldr	r2, [r2, #4]
 8027176:	b38a      	cbz	r2, 80271dc <on_topic+0x88>
 8027178:	6894      	ldr	r4, [r2, #8]
 802717a:	8aa3      	ldrh	r3, [r4, #20]
 802717c:	428b      	cmp	r3, r1
 802717e:	d1f9      	bne.n	8027174 <on_topic+0x20>
 8027180:	7da3      	ldrb	r3, [r4, #22]
 8027182:	4283      	cmp	r3, r0
 8027184:	d1f6      	bne.n	8027174 <on_topic+0x20>
 8027186:	2248      	movs	r2, #72	@ 0x48
 8027188:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 802718c:	4668      	mov	r0, sp
 802718e:	f002 fb6c 	bl	802986a <memcpy>
 8027192:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8027196:	4620      	mov	r0, r4
 8027198:	cb0c      	ldmia	r3, {r2, r3}
 802719a:	f7fa fd51 	bl	8021c40 <rmw_uxrce_get_static_input_buffer_for_entity>
 802719e:	4607      	mov	r7, r0
 80271a0:	b1e0      	cbz	r0, 80271dc <on_topic+0x88>
 80271a2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80271a6:	462a      	mov	r2, r5
 80271a8:	4630      	mov	r0, r6
 80271aa:	f108 0110 	add.w	r1, r8, #16
 80271ae:	f7fb f917 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 80271b2:	b930      	cbnz	r0, 80271c2 <on_topic+0x6e>
 80271b4:	4639      	mov	r1, r7
 80271b6:	480c      	ldr	r0, [pc, #48]	@ (80271e8 <on_topic+0x94>)
 80271b8:	b014      	add	sp, #80	@ 0x50
 80271ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80271be:	f000 b8bd 	b.w	802733c <put_memory>
 80271c2:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80271c6:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80271ca:	f000 f967 	bl	802749c <rmw_uros_epoch_nanos>
 80271ce:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80271d2:	2305      	movs	r3, #5
 80271d4:	e942 0102 	strd	r0, r1, [r2, #-8]
 80271d8:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80271dc:	b014      	add	sp, #80	@ 0x50
 80271de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80271e2:	bf00      	nop
 80271e4:	20047144 	.word	0x20047144
 80271e8:	20047134 	.word	0x20047134

080271ec <on_request>:
 80271ec:	4824      	ldr	r0, [pc, #144]	@ (8027280 <on_request+0x94>)
 80271ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80271f2:	6800      	ldr	r0, [r0, #0]
 80271f4:	b094      	sub	sp, #80	@ 0x50
 80271f6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80271f8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 80271fc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80271fe:	2800      	cmp	r0, #0
 8027200:	d03b      	beq.n	802727a <on_request+0x8e>
 8027202:	461d      	mov	r5, r3
 8027204:	e001      	b.n	802720a <on_request+0x1e>
 8027206:	6840      	ldr	r0, [r0, #4]
 8027208:	b3b8      	cbz	r0, 802727a <on_request+0x8e>
 802720a:	6884      	ldr	r4, [r0, #8]
 802720c:	8b21      	ldrh	r1, [r4, #24]
 802720e:	4291      	cmp	r1, r2
 8027210:	d1f9      	bne.n	8027206 <on_request+0x1a>
 8027212:	2248      	movs	r2, #72	@ 0x48
 8027214:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8027218:	4668      	mov	r0, sp
 802721a:	f002 fb26 	bl	802986a <memcpy>
 802721e:	f104 0320 	add.w	r3, r4, #32
 8027222:	4620      	mov	r0, r4
 8027224:	cb0c      	ldmia	r3, {r2, r3}
 8027226:	f7fa fd0b 	bl	8021c40 <rmw_uxrce_get_static_input_buffer_for_entity>
 802722a:	4680      	mov	r8, r0
 802722c:	b328      	cbz	r0, 802727a <on_request+0x8e>
 802722e:	4630      	mov	r0, r6
 8027230:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8027234:	463a      	mov	r2, r7
 8027236:	f106 0110 	add.w	r1, r6, #16
 802723a:	f7fb f8d1 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 802723e:	b930      	cbnz	r0, 802724e <on_request+0x62>
 8027240:	4641      	mov	r1, r8
 8027242:	4810      	ldr	r0, [pc, #64]	@ (8027284 <on_request+0x98>)
 8027244:	b014      	add	sp, #80	@ 0x50
 8027246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802724a:	f000 b877 	b.w	802733c <put_memory>
 802724e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027250:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8027254:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8027258:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 802725c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8027260:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027264:	e88c 0003 	stmia.w	ip, {r0, r1}
 8027268:	f000 f918 	bl	802749c <rmw_uros_epoch_nanos>
 802726c:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8027270:	2303      	movs	r3, #3
 8027272:	e942 0102 	strd	r0, r1, [r2, #-8]
 8027276:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 802727a:	b014      	add	sp, #80	@ 0x50
 802727c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027280:	20047114 	.word	0x20047114
 8027284:	20047134 	.word	0x20047134

08027288 <on_reply>:
 8027288:	4822      	ldr	r0, [pc, #136]	@ (8027314 <on_reply+0x8c>)
 802728a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802728e:	6800      	ldr	r0, [r0, #0]
 8027290:	b094      	sub	sp, #80	@ 0x50
 8027292:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8027294:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8027298:	9113      	str	r1, [sp, #76]	@ 0x4c
 802729a:	b3b8      	cbz	r0, 802730c <on_reply+0x84>
 802729c:	461d      	mov	r5, r3
 802729e:	e001      	b.n	80272a4 <on_reply+0x1c>
 80272a0:	6840      	ldr	r0, [r0, #4]
 80272a2:	b398      	cbz	r0, 802730c <on_reply+0x84>
 80272a4:	6884      	ldr	r4, [r0, #8]
 80272a6:	8b21      	ldrh	r1, [r4, #24]
 80272a8:	4291      	cmp	r1, r2
 80272aa:	d1f9      	bne.n	80272a0 <on_reply+0x18>
 80272ac:	2248      	movs	r2, #72	@ 0x48
 80272ae:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80272b2:	4668      	mov	r0, sp
 80272b4:	f002 fad9 	bl	802986a <memcpy>
 80272b8:	f104 0320 	add.w	r3, r4, #32
 80272bc:	4620      	mov	r0, r4
 80272be:	cb0c      	ldmia	r3, {r2, r3}
 80272c0:	f7fa fcbe 	bl	8021c40 <rmw_uxrce_get_static_input_buffer_for_entity>
 80272c4:	4680      	mov	r8, r0
 80272c6:	b308      	cbz	r0, 802730c <on_reply+0x84>
 80272c8:	4630      	mov	r0, r6
 80272ca:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80272ce:	463a      	mov	r2, r7
 80272d0:	f106 0110 	add.w	r1, r6, #16
 80272d4:	f7fb f884 	bl	80223e0 <ucdr_deserialize_array_uint8_t>
 80272d8:	b930      	cbnz	r0, 80272e8 <on_reply+0x60>
 80272da:	4641      	mov	r1, r8
 80272dc:	480e      	ldr	r0, [pc, #56]	@ (8027318 <on_reply+0x90>)
 80272de:	b014      	add	sp, #80	@ 0x50
 80272e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80272e4:	f000 b82a 	b.w	802733c <put_memory>
 80272e8:	2200      	movs	r2, #0
 80272ea:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80272ee:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80272f2:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 80272f6:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 80272fa:	f000 f8cf 	bl	802749c <rmw_uros_epoch_nanos>
 80272fe:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8027302:	2304      	movs	r3, #4
 8027304:	e942 0102 	strd	r0, r1, [r2, #-8]
 8027308:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 802730c:	b014      	add	sp, #80	@ 0x50
 802730e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027312:	bf00      	nop
 8027314:	20042828 	.word	0x20042828
 8027318:	20047134 	.word	0x20047134

0802731c <get_memory>:
 802731c:	4603      	mov	r3, r0
 802731e:	6840      	ldr	r0, [r0, #4]
 8027320:	b158      	cbz	r0, 802733a <get_memory+0x1e>
 8027322:	6842      	ldr	r2, [r0, #4]
 8027324:	605a      	str	r2, [r3, #4]
 8027326:	b10a      	cbz	r2, 802732c <get_memory+0x10>
 8027328:	2100      	movs	r1, #0
 802732a:	6011      	str	r1, [r2, #0]
 802732c:	681a      	ldr	r2, [r3, #0]
 802732e:	6042      	str	r2, [r0, #4]
 8027330:	b102      	cbz	r2, 8027334 <get_memory+0x18>
 8027332:	6010      	str	r0, [r2, #0]
 8027334:	2200      	movs	r2, #0
 8027336:	6002      	str	r2, [r0, #0]
 8027338:	6018      	str	r0, [r3, #0]
 802733a:	4770      	bx	lr

0802733c <put_memory>:
 802733c:	680b      	ldr	r3, [r1, #0]
 802733e:	b10b      	cbz	r3, 8027344 <put_memory+0x8>
 8027340:	684a      	ldr	r2, [r1, #4]
 8027342:	605a      	str	r2, [r3, #4]
 8027344:	684a      	ldr	r2, [r1, #4]
 8027346:	b102      	cbz	r2, 802734a <put_memory+0xe>
 8027348:	6013      	str	r3, [r2, #0]
 802734a:	6803      	ldr	r3, [r0, #0]
 802734c:	428b      	cmp	r3, r1
 802734e:	6843      	ldr	r3, [r0, #4]
 8027350:	bf08      	it	eq
 8027352:	6002      	streq	r2, [r0, #0]
 8027354:	604b      	str	r3, [r1, #4]
 8027356:	b103      	cbz	r3, 802735a <put_memory+0x1e>
 8027358:	6019      	str	r1, [r3, #0]
 802735a:	2300      	movs	r3, #0
 802735c:	600b      	str	r3, [r1, #0]
 802735e:	6041      	str	r1, [r0, #4]
 8027360:	4770      	bx	lr
 8027362:	bf00      	nop

08027364 <rmw_create_guard_condition>:
 8027364:	b538      	push	{r3, r4, r5, lr}
 8027366:	4605      	mov	r5, r0
 8027368:	4808      	ldr	r0, [pc, #32]	@ (802738c <rmw_create_guard_condition+0x28>)
 802736a:	f7ff ffd7 	bl	802731c <get_memory>
 802736e:	4603      	mov	r3, r0
 8027370:	b148      	cbz	r0, 8027386 <rmw_create_guard_condition+0x22>
 8027372:	6884      	ldr	r4, [r0, #8]
 8027374:	2300      	movs	r3, #0
 8027376:	61e5      	str	r5, [r4, #28]
 8027378:	7423      	strb	r3, [r4, #16]
 802737a:	f7f9 f9bb 	bl	80206f4 <rmw_get_implementation_identifier>
 802737e:	f104 0314 	add.w	r3, r4, #20
 8027382:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8027386:	4618      	mov	r0, r3
 8027388:	bd38      	pop	{r3, r4, r5, pc}
 802738a:	bf00      	nop
 802738c:	200470d4 	.word	0x200470d4

08027390 <rmw_destroy_guard_condition>:
 8027390:	b508      	push	{r3, lr}
 8027392:	4b08      	ldr	r3, [pc, #32]	@ (80273b4 <rmw_destroy_guard_condition+0x24>)
 8027394:	6819      	ldr	r1, [r3, #0]
 8027396:	b911      	cbnz	r1, 802739e <rmw_destroy_guard_condition+0xe>
 8027398:	e00a      	b.n	80273b0 <rmw_destroy_guard_condition+0x20>
 802739a:	6849      	ldr	r1, [r1, #4]
 802739c:	b141      	cbz	r1, 80273b0 <rmw_destroy_guard_condition+0x20>
 802739e:	688b      	ldr	r3, [r1, #8]
 80273a0:	3314      	adds	r3, #20
 80273a2:	4298      	cmp	r0, r3
 80273a4:	d1f9      	bne.n	802739a <rmw_destroy_guard_condition+0xa>
 80273a6:	4803      	ldr	r0, [pc, #12]	@ (80273b4 <rmw_destroy_guard_condition+0x24>)
 80273a8:	f7ff ffc8 	bl	802733c <put_memory>
 80273ac:	2000      	movs	r0, #0
 80273ae:	bd08      	pop	{r3, pc}
 80273b0:	2001      	movs	r0, #1
 80273b2:	bd08      	pop	{r3, pc}
 80273b4:	200470d4 	.word	0x200470d4

080273b8 <create_topic>:
 80273b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80273bc:	4605      	mov	r5, r0
 80273be:	b084      	sub	sp, #16
 80273c0:	4822      	ldr	r0, [pc, #136]	@ (802744c <create_topic+0x94>)
 80273c2:	460f      	mov	r7, r1
 80273c4:	4616      	mov	r6, r2
 80273c6:	f7ff ffa9 	bl	802731c <get_memory>
 80273ca:	4604      	mov	r4, r0
 80273cc:	2800      	cmp	r0, #0
 80273ce:	d039      	beq.n	8027444 <create_topic+0x8c>
 80273d0:	692b      	ldr	r3, [r5, #16]
 80273d2:	2102      	movs	r1, #2
 80273d4:	6884      	ldr	r4, [r0, #8]
 80273d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80273da:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8027454 <create_topic+0x9c>
 80273de:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80273e2:	1c42      	adds	r2, r0, #1
 80273e4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80273e8:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80273ec:	f7fc faac 	bl	8023948 <uxr_object_id>
 80273f0:	223c      	movs	r2, #60	@ 0x3c
 80273f2:	6120      	str	r0, [r4, #16]
 80273f4:	4641      	mov	r1, r8
 80273f6:	4638      	mov	r0, r7
 80273f8:	f7fa fd86 	bl	8021f08 <generate_topic_name>
 80273fc:	b1f0      	cbz	r0, 802743c <create_topic+0x84>
 80273fe:	4f14      	ldr	r7, [pc, #80]	@ (8027450 <create_topic+0x98>)
 8027400:	4630      	mov	r0, r6
 8027402:	2264      	movs	r2, #100	@ 0x64
 8027404:	4639      	mov	r1, r7
 8027406:	f7fa fd51 	bl	8021eac <generate_type_name>
 802740a:	b1b8      	cbz	r0, 802743c <create_topic+0x84>
 802740c:	6928      	ldr	r0, [r5, #16]
 802740e:	2106      	movs	r1, #6
 8027410:	696b      	ldr	r3, [r5, #20]
 8027412:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8027416:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802741a:	f8cd 8000 	str.w	r8, [sp]
 802741e:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8027422:	6811      	ldr	r1, [r2, #0]
 8027424:	6922      	ldr	r2, [r4, #16]
 8027426:	f7fc f8f3 	bl	8023610 <uxr_buffer_create_topic_bin>
 802742a:	4602      	mov	r2, r0
 802742c:	6928      	ldr	r0, [r5, #16]
 802742e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8027432:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8027436:	f7fa fd05 	bl	8021e44 <run_xrce_session>
 802743a:	b918      	cbnz	r0, 8027444 <create_topic+0x8c>
 802743c:	4620      	mov	r0, r4
 802743e:	2400      	movs	r4, #0
 8027440:	f7fa fbf2 	bl	8021c28 <rmw_uxrce_fini_topic_memory>
 8027444:	4620      	mov	r0, r4
 8027446:	b004      	add	sp, #16
 8027448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802744c:	20047154 	.word	0x20047154
 8027450:	200471c8 	.word	0x200471c8
 8027454:	2004718c 	.word	0x2004718c

08027458 <destroy_topic>:
 8027458:	b538      	push	{r3, r4, r5, lr}
 802745a:	6985      	ldr	r5, [r0, #24]
 802745c:	b1dd      	cbz	r5, 8027496 <destroy_topic+0x3e>
 802745e:	4604      	mov	r4, r0
 8027460:	6928      	ldr	r0, [r5, #16]
 8027462:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8027466:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 802746a:	6922      	ldr	r2, [r4, #16]
 802746c:	6819      	ldr	r1, [r3, #0]
 802746e:	f7fc f851 	bl	8023514 <uxr_buffer_delete_entity>
 8027472:	4602      	mov	r2, r0
 8027474:	6928      	ldr	r0, [r5, #16]
 8027476:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 802747a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 802747e:	f7fa fce1 	bl	8021e44 <run_xrce_session>
 8027482:	4603      	mov	r3, r0
 8027484:	4620      	mov	r0, r4
 8027486:	2b00      	cmp	r3, #0
 8027488:	bf14      	ite	ne
 802748a:	2400      	movne	r4, #0
 802748c:	2402      	moveq	r4, #2
 802748e:	f7fa fbcb 	bl	8021c28 <rmw_uxrce_fini_topic_memory>
 8027492:	4620      	mov	r0, r4
 8027494:	bd38      	pop	{r3, r4, r5, pc}
 8027496:	2401      	movs	r4, #1
 8027498:	4620      	mov	r0, r4
 802749a:	bd38      	pop	{r3, r4, r5, pc}

0802749c <rmw_uros_epoch_nanos>:
 802749c:	4b05      	ldr	r3, [pc, #20]	@ (80274b4 <rmw_uros_epoch_nanos+0x18>)
 802749e:	681b      	ldr	r3, [r3, #0]
 80274a0:	b123      	cbz	r3, 80274ac <rmw_uros_epoch_nanos+0x10>
 80274a2:	6898      	ldr	r0, [r3, #8]
 80274a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80274a8:	f7fc bcc6 	b.w	8023e38 <uxr_epoch_nanos>
 80274ac:	2000      	movs	r0, #0
 80274ae:	2100      	movs	r1, #0
 80274b0:	4770      	bx	lr
 80274b2:	bf00      	nop
 80274b4:	20047124 	.word	0x20047124

080274b8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 80274b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80274bc:	b086      	sub	sp, #24
 80274be:	4689      	mov	r9, r1
 80274c0:	4682      	mov	sl, r0
 80274c2:	a801      	add	r0, sp, #4
 80274c4:	f7f5 faca 	bl	801ca5c <rcutils_get_default_allocator>
 80274c8:	f1b9 0f00 	cmp.w	r9, #0
 80274cc:	d02e      	beq.n	802752c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x74>
 80274ce:	2114      	movs	r1, #20
 80274d0:	4648      	mov	r0, r9
 80274d2:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 80274d6:	4642      	mov	r2, r8
 80274d8:	4798      	blx	r3
 80274da:	4607      	mov	r7, r0
 80274dc:	b380      	cbz	r0, 8027540 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x88>
 80274de:	4606      	mov	r6, r0
 80274e0:	2400      	movs	r4, #0
 80274e2:	e003      	b.n	80274ec <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x34>
 80274e4:	3401      	adds	r4, #1
 80274e6:	3614      	adds	r6, #20
 80274e8:	45a1      	cmp	r9, r4
 80274ea:	d020      	beq.n	802752e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 80274ec:	4630      	mov	r0, r6
 80274ee:	f000 fe71 	bl	80281d4 <rosidl_runtime_c__String__init>
 80274f2:	4605      	mov	r5, r0
 80274f4:	2800      	cmp	r0, #0
 80274f6:	d1f5      	bne.n	80274e4 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 80274f8:	4630      	mov	r0, r6
 80274fa:	f000 fe81 	bl	8028200 <rosidl_runtime_c__String__fini>
 80274fe:	45a1      	cmp	r9, r4
 8027500:	d915      	bls.n	802752e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 8027502:	b15c      	cbz	r4, 802751c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x64>
 8027504:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8027508:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 802750c:	3c14      	subs	r4, #20
 802750e:	4620      	mov	r0, r4
 8027510:	f000 fe76 	bl	8028200 <rosidl_runtime_c__String__fini>
 8027514:	42a7      	cmp	r7, r4
 8027516:	f1a4 0414 	sub.w	r4, r4, #20
 802751a:	d1f8      	bne.n	802750e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x56>
 802751c:	4638      	mov	r0, r7
 802751e:	9b02      	ldr	r3, [sp, #8]
 8027520:	4641      	mov	r1, r8
 8027522:	4798      	blx	r3
 8027524:	4628      	mov	r0, r5
 8027526:	b006      	add	sp, #24
 8027528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802752c:	464f      	mov	r7, r9
 802752e:	2501      	movs	r5, #1
 8027530:	f8ca 9008 	str.w	r9, [sl, #8]
 8027534:	e9ca 7900 	strd	r7, r9, [sl]
 8027538:	4628      	mov	r0, r5
 802753a:	b006      	add	sp, #24
 802753c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027540:	4605      	mov	r5, r0
 8027542:	e7f9      	b.n	8027538 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x80>

08027544 <std_msgs__msg__MultiArrayDimension__init>:
 8027544:	b538      	push	{r3, r4, r5, lr}
 8027546:	4604      	mov	r4, r0
 8027548:	b128      	cbz	r0, 8027556 <std_msgs__msg__MultiArrayDimension__init+0x12>
 802754a:	f000 fe43 	bl	80281d4 <rosidl_runtime_c__String__init>
 802754e:	4605      	mov	r5, r0
 8027550:	b120      	cbz	r0, 802755c <std_msgs__msg__MultiArrayDimension__init+0x18>
 8027552:	4628      	mov	r0, r5
 8027554:	bd38      	pop	{r3, r4, r5, pc}
 8027556:	4605      	mov	r5, r0
 8027558:	4628      	mov	r0, r5
 802755a:	bd38      	pop	{r3, r4, r5, pc}
 802755c:	4620      	mov	r0, r4
 802755e:	f000 fe4f 	bl	8028200 <rosidl_runtime_c__String__fini>
 8027562:	4628      	mov	r0, r5
 8027564:	bd38      	pop	{r3, r4, r5, pc}
 8027566:	bf00      	nop

08027568 <std_msgs__msg__MultiArrayDimension__fini>:
 8027568:	b108      	cbz	r0, 802756e <std_msgs__msg__MultiArrayDimension__fini+0x6>
 802756a:	f000 be49 	b.w	8028200 <rosidl_runtime_c__String__fini>
 802756e:	4770      	bx	lr

08027570 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8027570:	b108      	cbz	r0, 8027576 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 8027572:	f7ff bfa1 	b.w	80274b8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 8027576:	4770      	bx	lr

08027578 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8027578:	b320      	cbz	r0, 80275c4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 802757a:	b530      	push	{r4, r5, lr}
 802757c:	b087      	sub	sp, #28
 802757e:	4605      	mov	r5, r0
 8027580:	a801      	add	r0, sp, #4
 8027582:	f7f5 fa6b 	bl	801ca5c <rcutils_get_default_allocator>
 8027586:	682a      	ldr	r2, [r5, #0]
 8027588:	b1b2      	cbz	r2, 80275b8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 802758a:	68a9      	ldr	r1, [r5, #8]
 802758c:	b161      	cbz	r1, 80275a8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 802758e:	2400      	movs	r4, #0
 8027590:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8027594:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8027598:	d010      	beq.n	80275bc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 802759a:	f000 fe31 	bl	8028200 <rosidl_runtime_c__String__fini>
 802759e:	3401      	adds	r4, #1
 80275a0:	68a9      	ldr	r1, [r5, #8]
 80275a2:	682a      	ldr	r2, [r5, #0]
 80275a4:	428c      	cmp	r4, r1
 80275a6:	d3f3      	bcc.n	8027590 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80275a8:	9b02      	ldr	r3, [sp, #8]
 80275aa:	4610      	mov	r0, r2
 80275ac:	9905      	ldr	r1, [sp, #20]
 80275ae:	4798      	blx	r3
 80275b0:	2300      	movs	r3, #0
 80275b2:	e9c5 3300 	strd	r3, r3, [r5]
 80275b6:	60ab      	str	r3, [r5, #8]
 80275b8:	b007      	add	sp, #28
 80275ba:	bd30      	pop	{r4, r5, pc}
 80275bc:	3401      	adds	r4, #1
 80275be:	428c      	cmp	r4, r1
 80275c0:	d3e6      	bcc.n	8027590 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80275c2:	e7f1      	b.n	80275a8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80275c4:	4770      	bx	lr
 80275c6:	bf00      	nop

080275c8 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 80275c8:	f7ff bfbc 	b.w	8027544 <std_msgs__msg__MultiArrayDimension__init>

080275cc <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 80275cc:	f7ff bfcc 	b.w	8027568 <std_msgs__msg__MultiArrayDimension__fini>

080275d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80275d0:	4b04      	ldr	r3, [pc, #16]	@ (80275e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80275d2:	681a      	ldr	r2, [r3, #0]
 80275d4:	b10a      	cbz	r2, 80275da <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 80275d6:	4803      	ldr	r0, [pc, #12]	@ (80275e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80275d8:	4770      	bx	lr
 80275da:	4a03      	ldr	r2, [pc, #12]	@ (80275e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 80275dc:	4801      	ldr	r0, [pc, #4]	@ (80275e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80275de:	6812      	ldr	r2, [r2, #0]
 80275e0:	601a      	str	r2, [r3, #0]
 80275e2:	4770      	bx	lr
 80275e4:	20000274 	.word	0x20000274
 80275e8:	20000110 	.word	0x20000110

080275ec <_MultiArrayDimension__cdr_serialize>:
 80275ec:	b1d0      	cbz	r0, 8027624 <_MultiArrayDimension__cdr_serialize+0x38>
 80275ee:	b570      	push	{r4, r5, r6, lr}
 80275f0:	6806      	ldr	r6, [r0, #0]
 80275f2:	4604      	mov	r4, r0
 80275f4:	460d      	mov	r5, r1
 80275f6:	b196      	cbz	r6, 802761e <_MultiArrayDimension__cdr_serialize+0x32>
 80275f8:	4630      	mov	r0, r6
 80275fa:	f7d8 fe69 	bl	80002d0 <strlen>
 80275fe:	1c42      	adds	r2, r0, #1
 8027600:	4631      	mov	r1, r6
 8027602:	6060      	str	r0, [r4, #4]
 8027604:	4628      	mov	r0, r5
 8027606:	f7f5 fcb5 	bl	801cf74 <ucdr_serialize_sequence_char>
 802760a:	68e1      	ldr	r1, [r4, #12]
 802760c:	4628      	mov	r0, r5
 802760e:	f7fb fa3f 	bl	8022a90 <ucdr_serialize_uint32_t>
 8027612:	6921      	ldr	r1, [r4, #16]
 8027614:	4628      	mov	r0, r5
 8027616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802761a:	f7fb ba39 	b.w	8022a90 <ucdr_serialize_uint32_t>
 802761e:	4632      	mov	r2, r6
 8027620:	4630      	mov	r0, r6
 8027622:	e7ed      	b.n	8027600 <_MultiArrayDimension__cdr_serialize+0x14>
 8027624:	4770      	bx	lr
 8027626:	bf00      	nop

08027628 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8027628:	b570      	push	{r4, r5, r6, lr}
 802762a:	4604      	mov	r4, r0
 802762c:	b1b0      	cbz	r0, 802765c <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 802762e:	460d      	mov	r5, r1
 8027630:	2104      	movs	r1, #4
 8027632:	4628      	mov	r0, r5
 8027634:	f7f5 fc2e 	bl	801ce94 <ucdr_alignment>
 8027638:	6866      	ldr	r6, [r4, #4]
 802763a:	1d6b      	adds	r3, r5, #5
 802763c:	2104      	movs	r1, #4
 802763e:	f1c5 0504 	rsb	r5, r5, #4
 8027642:	4433      	add	r3, r6
 8027644:	181e      	adds	r6, r3, r0
 8027646:	4630      	mov	r0, r6
 8027648:	f7f5 fc24 	bl	801ce94 <ucdr_alignment>
 802764c:	2104      	movs	r1, #4
 802764e:	1844      	adds	r4, r0, r1
 8027650:	4434      	add	r4, r6
 8027652:	4620      	mov	r0, r4
 8027654:	f7f5 fc1e 	bl	801ce94 <ucdr_alignment>
 8027658:	4428      	add	r0, r5
 802765a:	4420      	add	r0, r4
 802765c:	bd70      	pop	{r4, r5, r6, pc}
 802765e:	bf00      	nop

08027660 <_MultiArrayDimension__cdr_deserialize>:
 8027660:	b570      	push	{r4, r5, r6, lr}
 8027662:	460c      	mov	r4, r1
 8027664:	b082      	sub	sp, #8
 8027666:	b1d9      	cbz	r1, 80276a0 <_MultiArrayDimension__cdr_deserialize+0x40>
 8027668:	688e      	ldr	r6, [r1, #8]
 802766a:	ab01      	add	r3, sp, #4
 802766c:	6809      	ldr	r1, [r1, #0]
 802766e:	4605      	mov	r5, r0
 8027670:	4632      	mov	r2, r6
 8027672:	f7f5 fc91 	bl	801cf98 <ucdr_deserialize_sequence_char>
 8027676:	9b01      	ldr	r3, [sp, #4]
 8027678:	b970      	cbnz	r0, 8027698 <_MultiArrayDimension__cdr_deserialize+0x38>
 802767a:	429e      	cmp	r6, r3
 802767c:	d313      	bcc.n	80276a6 <_MultiArrayDimension__cdr_deserialize+0x46>
 802767e:	f104 010c 	add.w	r1, r4, #12
 8027682:	4628      	mov	r0, r5
 8027684:	f7fb fb34 	bl	8022cf0 <ucdr_deserialize_uint32_t>
 8027688:	f104 0110 	add.w	r1, r4, #16
 802768c:	4628      	mov	r0, r5
 802768e:	b002      	add	sp, #8
 8027690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027694:	f7fb bb2c 	b.w	8022cf0 <ucdr_deserialize_uint32_t>
 8027698:	b103      	cbz	r3, 802769c <_MultiArrayDimension__cdr_deserialize+0x3c>
 802769a:	3b01      	subs	r3, #1
 802769c:	6063      	str	r3, [r4, #4]
 802769e:	e7ee      	b.n	802767e <_MultiArrayDimension__cdr_deserialize+0x1e>
 80276a0:	4608      	mov	r0, r1
 80276a2:	b002      	add	sp, #8
 80276a4:	bd70      	pop	{r4, r5, r6, pc}
 80276a6:	2101      	movs	r1, #1
 80276a8:	75a8      	strb	r0, [r5, #22]
 80276aa:	7569      	strb	r1, [r5, #21]
 80276ac:	6060      	str	r0, [r4, #4]
 80276ae:	4628      	mov	r0, r5
 80276b0:	f7f5 fc08 	bl	801cec4 <ucdr_align_to>
 80276b4:	9901      	ldr	r1, [sp, #4]
 80276b6:	4628      	mov	r0, r5
 80276b8:	f7f5 fc3c 	bl	801cf34 <ucdr_advance_buffer>
 80276bc:	e7df      	b.n	802767e <_MultiArrayDimension__cdr_deserialize+0x1e>
 80276be:	bf00      	nop

080276c0 <_MultiArrayDimension__max_serialized_size>:
 80276c0:	b510      	push	{r4, lr}
 80276c2:	2104      	movs	r1, #4
 80276c4:	2000      	movs	r0, #0
 80276c6:	f7f5 fbe5 	bl	801ce94 <ucdr_alignment>
 80276ca:	2104      	movs	r1, #4
 80276cc:	1844      	adds	r4, r0, r1
 80276ce:	4620      	mov	r0, r4
 80276d0:	f7f5 fbe0 	bl	801ce94 <ucdr_alignment>
 80276d4:	3004      	adds	r0, #4
 80276d6:	4420      	add	r0, r4
 80276d8:	bd10      	pop	{r4, pc}
 80276da:	bf00      	nop

080276dc <_MultiArrayDimension__get_serialized_size>:
 80276dc:	b510      	push	{r4, lr}
 80276de:	4604      	mov	r4, r0
 80276e0:	b190      	cbz	r0, 8027708 <_MultiArrayDimension__get_serialized_size+0x2c>
 80276e2:	2104      	movs	r1, #4
 80276e4:	2000      	movs	r0, #0
 80276e6:	f7f5 fbd5 	bl	801ce94 <ucdr_alignment>
 80276ea:	6863      	ldr	r3, [r4, #4]
 80276ec:	2104      	movs	r1, #4
 80276ee:	3305      	adds	r3, #5
 80276f0:	181c      	adds	r4, r3, r0
 80276f2:	4620      	mov	r0, r4
 80276f4:	f7f5 fbce 	bl	801ce94 <ucdr_alignment>
 80276f8:	2104      	movs	r1, #4
 80276fa:	4408      	add	r0, r1
 80276fc:	4404      	add	r4, r0
 80276fe:	4620      	mov	r0, r4
 8027700:	f7f5 fbc8 	bl	801ce94 <ucdr_alignment>
 8027704:	3004      	adds	r0, #4
 8027706:	4420      	add	r0, r4
 8027708:	bd10      	pop	{r4, pc}
 802770a:	bf00      	nop

0802770c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 802770c:	4800      	ldr	r0, [pc, #0]	@ (8027710 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 802770e:	4770      	bx	lr
 8027710:	20000280 	.word	0x20000280

08027714 <ucdr_serialize_string>:
 8027714:	b510      	push	{r4, lr}
 8027716:	b082      	sub	sp, #8
 8027718:	4604      	mov	r4, r0
 802771a:	4608      	mov	r0, r1
 802771c:	9101      	str	r1, [sp, #4]
 802771e:	f7d8 fdd7 	bl	80002d0 <strlen>
 8027722:	4602      	mov	r2, r0
 8027724:	9901      	ldr	r1, [sp, #4]
 8027726:	4620      	mov	r0, r4
 8027728:	3201      	adds	r2, #1
 802772a:	b002      	add	sp, #8
 802772c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027730:	f7f5 bc20 	b.w	801cf74 <ucdr_serialize_sequence_char>

08027734 <ucdr_deserialize_string>:
 8027734:	b500      	push	{lr}
 8027736:	b083      	sub	sp, #12
 8027738:	ab01      	add	r3, sp, #4
 802773a:	f7f5 fc2d 	bl	801cf98 <ucdr_deserialize_sequence_char>
 802773e:	b003      	add	sp, #12
 8027740:	f85d fb04 	ldr.w	pc, [sp], #4

08027744 <uxr_init_input_best_effort_stream>:
 8027744:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8027748:	8003      	strh	r3, [r0, #0]
 802774a:	4770      	bx	lr

0802774c <uxr_reset_input_best_effort_stream>:
 802774c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8027750:	8003      	strh	r3, [r0, #0]
 8027752:	4770      	bx	lr

08027754 <uxr_receive_best_effort_message>:
 8027754:	b538      	push	{r3, r4, r5, lr}
 8027756:	4604      	mov	r4, r0
 8027758:	8800      	ldrh	r0, [r0, #0]
 802775a:	460d      	mov	r5, r1
 802775c:	f000 fd22 	bl	80281a4 <uxr_seq_num_cmp>
 8027760:	4603      	mov	r3, r0
 8027762:	0fc0      	lsrs	r0, r0, #31
 8027764:	2b00      	cmp	r3, #0
 8027766:	bfb8      	it	lt
 8027768:	8025      	strhlt	r5, [r4, #0]
 802776a:	bd38      	pop	{r3, r4, r5, pc}

0802776c <on_full_input_buffer>:
 802776c:	b570      	push	{r4, r5, r6, lr}
 802776e:	460c      	mov	r4, r1
 8027770:	4605      	mov	r5, r0
 8027772:	8908      	ldrh	r0, [r1, #8]
 8027774:	682b      	ldr	r3, [r5, #0]
 8027776:	7d26      	ldrb	r6, [r4, #20]
 8027778:	e9d1 1200 	ldrd	r1, r2, [r1]
 802777c:	fbb2 f2f0 	udiv	r2, r2, r0
 8027780:	eba3 0c01 	sub.w	ip, r3, r1
 8027784:	fbbc fcf2 	udiv	ip, ip, r2
 8027788:	f10c 0c01 	add.w	ip, ip, #1
 802778c:	fa1f f38c 	uxth.w	r3, ip
 8027790:	fbb3 fcf0 	udiv	ip, r3, r0
 8027794:	fb00 331c 	mls	r3, r0, ip, r3
 8027798:	b29b      	uxth	r3, r3
 802779a:	fb02 f303 	mul.w	r3, r2, r3
 802779e:	1d18      	adds	r0, r3, #4
 80277a0:	4408      	add	r0, r1
 80277a2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80277a6:	b116      	cbz	r6, 80277ae <on_full_input_buffer+0x42>
 80277a8:	2600      	movs	r6, #0
 80277aa:	f840 6c04 	str.w	r6, [r0, #-4]
 80277ae:	2a03      	cmp	r2, #3
 80277b0:	d801      	bhi.n	80277b6 <on_full_input_buffer+0x4a>
 80277b2:	2001      	movs	r0, #1
 80277b4:	bd70      	pop	{r4, r5, r6, pc}
 80277b6:	3308      	adds	r3, #8
 80277b8:	4628      	mov	r0, r5
 80277ba:	3a04      	subs	r2, #4
 80277bc:	4419      	add	r1, r3
 80277be:	692b      	ldr	r3, [r5, #16]
 80277c0:	f7f5 fb5c 	bl	801ce7c <ucdr_init_buffer_origin>
 80277c4:	4628      	mov	r0, r5
 80277c6:	4622      	mov	r2, r4
 80277c8:	4902      	ldr	r1, [pc, #8]	@ (80277d4 <on_full_input_buffer+0x68>)
 80277ca:	f7f5 fb33 	bl	801ce34 <ucdr_set_on_full_buffer_callback>
 80277ce:	2000      	movs	r0, #0
 80277d0:	bd70      	pop	{r4, r5, r6, pc}
 80277d2:	bf00      	nop
 80277d4:	0802776d 	.word	0x0802776d

080277d8 <uxr_init_input_reliable_stream>:
 80277d8:	b510      	push	{r4, lr}
 80277da:	e9c0 1200 	strd	r1, r2, [r0]
 80277de:	2400      	movs	r4, #0
 80277e0:	9a02      	ldr	r2, [sp, #8]
 80277e2:	8103      	strh	r3, [r0, #8]
 80277e4:	6102      	str	r2, [r0, #16]
 80277e6:	7504      	strb	r4, [r0, #20]
 80277e8:	b1c3      	cbz	r3, 802781c <uxr_init_input_reliable_stream+0x44>
 80277ea:	600c      	str	r4, [r1, #0]
 80277ec:	8901      	ldrh	r1, [r0, #8]
 80277ee:	2901      	cmp	r1, #1
 80277f0:	d914      	bls.n	802781c <uxr_init_input_reliable_stream+0x44>
 80277f2:	f04f 0c01 	mov.w	ip, #1
 80277f6:	6843      	ldr	r3, [r0, #4]
 80277f8:	f10c 0e01 	add.w	lr, ip, #1
 80277fc:	fbbc f2f1 	udiv	r2, ip, r1
 8027800:	fbb3 f3f1 	udiv	r3, r3, r1
 8027804:	fb01 c212 	mls	r2, r1, r2, ip
 8027808:	fa1f fc8e 	uxth.w	ip, lr
 802780c:	b292      	uxth	r2, r2
 802780e:	fb02 f303 	mul.w	r3, r2, r3
 8027812:	6802      	ldr	r2, [r0, #0]
 8027814:	50d4      	str	r4, [r2, r3]
 8027816:	8901      	ldrh	r1, [r0, #8]
 8027818:	4561      	cmp	r1, ip
 802781a:	d8ec      	bhi.n	80277f6 <uxr_init_input_reliable_stream+0x1e>
 802781c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027820:	60c3      	str	r3, [r0, #12]
 8027822:	bd10      	pop	{r4, pc}

08027824 <uxr_reset_input_reliable_stream>:
 8027824:	8901      	ldrh	r1, [r0, #8]
 8027826:	b1d9      	cbz	r1, 8027860 <uxr_reset_input_reliable_stream+0x3c>
 8027828:	b510      	push	{r4, lr}
 802782a:	f04f 0e00 	mov.w	lr, #0
 802782e:	46f4      	mov	ip, lr
 8027830:	4674      	mov	r4, lr
 8027832:	6843      	ldr	r3, [r0, #4]
 8027834:	f10e 0e01 	add.w	lr, lr, #1
 8027838:	fbbc f2f1 	udiv	r2, ip, r1
 802783c:	fbb3 f3f1 	udiv	r3, r3, r1
 8027840:	fb01 c212 	mls	r2, r1, r2, ip
 8027844:	fa1f fc8e 	uxth.w	ip, lr
 8027848:	b292      	uxth	r2, r2
 802784a:	fb02 f303 	mul.w	r3, r2, r3
 802784e:	6802      	ldr	r2, [r0, #0]
 8027850:	50d4      	str	r4, [r2, r3]
 8027852:	8901      	ldrh	r1, [r0, #8]
 8027854:	4561      	cmp	r1, ip
 8027856:	d8ec      	bhi.n	8027832 <uxr_reset_input_reliable_stream+0xe>
 8027858:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802785c:	60c3      	str	r3, [r0, #12]
 802785e:	bd10      	pop	{r4, pc}
 8027860:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027864:	60c3      	str	r3, [r0, #12]
 8027866:	4770      	bx	lr

08027868 <uxr_receive_reliable_message>:
 8027868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802786c:	4604      	mov	r4, r0
 802786e:	460d      	mov	r5, r1
 8027870:	8901      	ldrh	r1, [r0, #8]
 8027872:	4617      	mov	r7, r2
 8027874:	8980      	ldrh	r0, [r0, #12]
 8027876:	4698      	mov	r8, r3
 8027878:	f000 fc8c 	bl	8028194 <uxr_seq_num_add>
 802787c:	4629      	mov	r1, r5
 802787e:	4606      	mov	r6, r0
 8027880:	89a0      	ldrh	r0, [r4, #12]
 8027882:	f000 fc8f 	bl	80281a4 <uxr_seq_num_cmp>
 8027886:	2800      	cmp	r0, #0
 8027888:	db0a      	blt.n	80278a0 <uxr_receive_reliable_message+0x38>
 802788a:	2600      	movs	r6, #0
 802788c:	4629      	mov	r1, r5
 802788e:	89e0      	ldrh	r0, [r4, #14]
 8027890:	f000 fc88 	bl	80281a4 <uxr_seq_num_cmp>
 8027894:	2800      	cmp	r0, #0
 8027896:	da00      	bge.n	802789a <uxr_receive_reliable_message+0x32>
 8027898:	81e5      	strh	r5, [r4, #14]
 802789a:	4630      	mov	r0, r6
 802789c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80278a0:	4630      	mov	r0, r6
 80278a2:	4629      	mov	r1, r5
 80278a4:	f000 fc7e 	bl	80281a4 <uxr_seq_num_cmp>
 80278a8:	2800      	cmp	r0, #0
 80278aa:	dbee      	blt.n	802788a <uxr_receive_reliable_message+0x22>
 80278ac:	6923      	ldr	r3, [r4, #16]
 80278ae:	4638      	mov	r0, r7
 80278b0:	4798      	blx	r3
 80278b2:	4681      	mov	r9, r0
 80278b4:	2101      	movs	r1, #1
 80278b6:	89a0      	ldrh	r0, [r4, #12]
 80278b8:	f000 fc6c 	bl	8028194 <uxr_seq_num_add>
 80278bc:	f1b9 0f00 	cmp.w	r9, #0
 80278c0:	bf08      	it	eq
 80278c2:	4285      	cmpeq	r5, r0
 80278c4:	bf0c      	ite	eq
 80278c6:	2601      	moveq	r6, #1
 80278c8:	2600      	movne	r6, #0
 80278ca:	d104      	bne.n	80278d6 <uxr_receive_reliable_message+0x6e>
 80278cc:	2300      	movs	r3, #0
 80278ce:	9a08      	ldr	r2, [sp, #32]
 80278d0:	81a0      	strh	r0, [r4, #12]
 80278d2:	7013      	strb	r3, [r2, #0]
 80278d4:	e7da      	b.n	802788c <uxr_receive_reliable_message+0x24>
 80278d6:	8922      	ldrh	r2, [r4, #8]
 80278d8:	6863      	ldr	r3, [r4, #4]
 80278da:	fbb5 f0f2 	udiv	r0, r5, r2
 80278de:	fbb3 f3f2 	udiv	r3, r3, r2
 80278e2:	fb02 5010 	mls	r0, r2, r0, r5
 80278e6:	b280      	uxth	r0, r0
 80278e8:	fb03 f000 	mul.w	r0, r3, r0
 80278ec:	6823      	ldr	r3, [r4, #0]
 80278ee:	3004      	adds	r0, #4
 80278f0:	4418      	add	r0, r3
 80278f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80278f6:	2b00      	cmp	r3, #0
 80278f8:	d1c7      	bne.n	802788a <uxr_receive_reliable_message+0x22>
 80278fa:	4639      	mov	r1, r7
 80278fc:	4642      	mov	r2, r8
 80278fe:	f001 ffb4 	bl	802986a <memcpy>
 8027902:	8921      	ldrh	r1, [r4, #8]
 8027904:	6863      	ldr	r3, [r4, #4]
 8027906:	fbb5 f2f1 	udiv	r2, r5, r1
 802790a:	fbb3 f3f1 	udiv	r3, r3, r1
 802790e:	fb01 5212 	mls	r2, r1, r2, r5
 8027912:	b292      	uxth	r2, r2
 8027914:	fb02 f303 	mul.w	r3, r2, r3
 8027918:	6822      	ldr	r2, [r4, #0]
 802791a:	f842 8003 	str.w	r8, [r2, r3]
 802791e:	2301      	movs	r3, #1
 8027920:	9a08      	ldr	r2, [sp, #32]
 8027922:	7013      	strb	r3, [r2, #0]
 8027924:	f1b9 0f00 	cmp.w	r9, #0
 8027928:	d0af      	beq.n	802788a <uxr_receive_reliable_message+0x22>
 802792a:	89a6      	ldrh	r6, [r4, #12]
 802792c:	2101      	movs	r1, #1
 802792e:	4630      	mov	r0, r6
 8027930:	f000 fc30 	bl	8028194 <uxr_seq_num_add>
 8027934:	8921      	ldrh	r1, [r4, #8]
 8027936:	6863      	ldr	r3, [r4, #4]
 8027938:	4606      	mov	r6, r0
 802793a:	fbb0 f2f1 	udiv	r2, r0, r1
 802793e:	fbb3 f3f1 	udiv	r3, r3, r1
 8027942:	fb01 0212 	mls	r2, r1, r2, r0
 8027946:	6820      	ldr	r0, [r4, #0]
 8027948:	b292      	uxth	r2, r2
 802794a:	fb02 f303 	mul.w	r3, r2, r3
 802794e:	3304      	adds	r3, #4
 8027950:	4418      	add	r0, r3
 8027952:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8027956:	2b00      	cmp	r3, #0
 8027958:	d097      	beq.n	802788a <uxr_receive_reliable_message+0x22>
 802795a:	6923      	ldr	r3, [r4, #16]
 802795c:	4798      	blx	r3
 802795e:	2802      	cmp	r0, #2
 8027960:	d002      	beq.n	8027968 <uxr_receive_reliable_message+0x100>
 8027962:	2801      	cmp	r0, #1
 8027964:	d0e2      	beq.n	802792c <uxr_receive_reliable_message+0xc4>
 8027966:	e790      	b.n	802788a <uxr_receive_reliable_message+0x22>
 8027968:	2601      	movs	r6, #1
 802796a:	e78f      	b.n	802788c <uxr_receive_reliable_message+0x24>

0802796c <uxr_next_input_reliable_buffer_available>:
 802796c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027970:	4604      	mov	r4, r0
 8027972:	460f      	mov	r7, r1
 8027974:	8980      	ldrh	r0, [r0, #12]
 8027976:	2101      	movs	r1, #1
 8027978:	4690      	mov	r8, r2
 802797a:	f000 fc0b 	bl	8028194 <uxr_seq_num_add>
 802797e:	8922      	ldrh	r2, [r4, #8]
 8027980:	6866      	ldr	r6, [r4, #4]
 8027982:	fbb0 f3f2 	udiv	r3, r0, r2
 8027986:	fbb6 f6f2 	udiv	r6, r6, r2
 802798a:	fb02 0313 	mls	r3, r2, r3, r0
 802798e:	b29b      	uxth	r3, r3
 8027990:	fb03 f606 	mul.w	r6, r3, r6
 8027994:	6823      	ldr	r3, [r4, #0]
 8027996:	3604      	adds	r6, #4
 8027998:	441e      	add	r6, r3
 802799a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 802799e:	f1b9 0f00 	cmp.w	r9, #0
 80279a2:	d023      	beq.n	80279ec <uxr_next_input_reliable_buffer_available+0x80>
 80279a4:	4605      	mov	r5, r0
 80279a6:	6923      	ldr	r3, [r4, #16]
 80279a8:	4630      	mov	r0, r6
 80279aa:	4798      	blx	r3
 80279ac:	4682      	mov	sl, r0
 80279ae:	b300      	cbz	r0, 80279f2 <uxr_next_input_reliable_buffer_available+0x86>
 80279b0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80279b4:	2101      	movs	r1, #1
 80279b6:	4650      	mov	r0, sl
 80279b8:	f000 fbec 	bl	8028194 <uxr_seq_num_add>
 80279bc:	8921      	ldrh	r1, [r4, #8]
 80279be:	4682      	mov	sl, r0
 80279c0:	6863      	ldr	r3, [r4, #4]
 80279c2:	6820      	ldr	r0, [r4, #0]
 80279c4:	fbba f2f1 	udiv	r2, sl, r1
 80279c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80279cc:	fb01 a212 	mls	r2, r1, r2, sl
 80279d0:	b292      	uxth	r2, r2
 80279d2:	fb02 f303 	mul.w	r3, r2, r3
 80279d6:	3304      	adds	r3, #4
 80279d8:	4418      	add	r0, r3
 80279da:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80279de:	b12b      	cbz	r3, 80279ec <uxr_next_input_reliable_buffer_available+0x80>
 80279e0:	6923      	ldr	r3, [r4, #16]
 80279e2:	4798      	blx	r3
 80279e4:	2802      	cmp	r0, #2
 80279e6:	d01b      	beq.n	8027a20 <uxr_next_input_reliable_buffer_available+0xb4>
 80279e8:	2801      	cmp	r0, #1
 80279ea:	d0e3      	beq.n	80279b4 <uxr_next_input_reliable_buffer_available+0x48>
 80279ec:	2000      	movs	r0, #0
 80279ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80279f2:	464a      	mov	r2, r9
 80279f4:	4631      	mov	r1, r6
 80279f6:	4638      	mov	r0, r7
 80279f8:	f7f5 fa48 	bl	801ce8c <ucdr_init_buffer>
 80279fc:	8921      	ldrh	r1, [r4, #8]
 80279fe:	6863      	ldr	r3, [r4, #4]
 8027a00:	2001      	movs	r0, #1
 8027a02:	fbb5 f2f1 	udiv	r2, r5, r1
 8027a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8027a0a:	fb01 5212 	mls	r2, r1, r2, r5
 8027a0e:	b292      	uxth	r2, r2
 8027a10:	fb02 f303 	mul.w	r3, r2, r3
 8027a14:	6822      	ldr	r2, [r4, #0]
 8027a16:	f842 a003 	str.w	sl, [r2, r3]
 8027a1a:	81a5      	strh	r5, [r4, #12]
 8027a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027a20:	8920      	ldrh	r0, [r4, #8]
 8027a22:	eb06 0108 	add.w	r1, r6, r8
 8027a26:	6863      	ldr	r3, [r4, #4]
 8027a28:	eba9 0208 	sub.w	r2, r9, r8
 8027a2c:	fbb5 f6f0 	udiv	r6, r5, r0
 8027a30:	fbb3 f3f0 	udiv	r3, r3, r0
 8027a34:	fb00 5516 	mls	r5, r0, r6, r5
 8027a38:	2000      	movs	r0, #0
 8027a3a:	b2ad      	uxth	r5, r5
 8027a3c:	fb03 f505 	mul.w	r5, r3, r5
 8027a40:	6823      	ldr	r3, [r4, #0]
 8027a42:	5158      	str	r0, [r3, r5]
 8027a44:	4638      	mov	r0, r7
 8027a46:	f7f5 fa21 	bl	801ce8c <ucdr_init_buffer>
 8027a4a:	4638      	mov	r0, r7
 8027a4c:	4622      	mov	r2, r4
 8027a4e:	4903      	ldr	r1, [pc, #12]	@ (8027a5c <uxr_next_input_reliable_buffer_available+0xf0>)
 8027a50:	f7f5 f9f0 	bl	801ce34 <ucdr_set_on_full_buffer_callback>
 8027a54:	2001      	movs	r0, #1
 8027a56:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8027a5a:	e7c8      	b.n	80279ee <uxr_next_input_reliable_buffer_available+0x82>
 8027a5c:	0802776d 	.word	0x0802776d

08027a60 <uxr_process_heartbeat>:
 8027a60:	b538      	push	{r3, r4, r5, lr}
 8027a62:	4611      	mov	r1, r2
 8027a64:	4604      	mov	r4, r0
 8027a66:	89c0      	ldrh	r0, [r0, #14]
 8027a68:	4615      	mov	r5, r2
 8027a6a:	f000 fb9b 	bl	80281a4 <uxr_seq_num_cmp>
 8027a6e:	2800      	cmp	r0, #0
 8027a70:	bfb8      	it	lt
 8027a72:	81e5      	strhlt	r5, [r4, #14]
 8027a74:	bd38      	pop	{r3, r4, r5, pc}
 8027a76:	bf00      	nop

08027a78 <uxr_compute_acknack>:
 8027a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027a7c:	8903      	ldrh	r3, [r0, #8]
 8027a7e:	4604      	mov	r4, r0
 8027a80:	460f      	mov	r7, r1
 8027a82:	8985      	ldrh	r5, [r0, #12]
 8027a84:	b1db      	cbz	r3, 8027abe <uxr_compute_acknack+0x46>
 8027a86:	4628      	mov	r0, r5
 8027a88:	2601      	movs	r6, #1
 8027a8a:	e004      	b.n	8027a96 <uxr_compute_acknack+0x1e>
 8027a8c:	4566      	cmp	r6, ip
 8027a8e:	f106 0601 	add.w	r6, r6, #1
 8027a92:	d214      	bcs.n	8027abe <uxr_compute_acknack+0x46>
 8027a94:	89a0      	ldrh	r0, [r4, #12]
 8027a96:	b2b1      	uxth	r1, r6
 8027a98:	f000 fb7c 	bl	8028194 <uxr_seq_num_add>
 8027a9c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8027aa0:	fbb0 f2fc 	udiv	r2, r0, ip
 8027aa4:	e9d4 1300 	ldrd	r1, r3, [r4]
 8027aa8:	fb0c 0212 	mls	r2, ip, r2, r0
 8027aac:	fbb3 f3fc 	udiv	r3, r3, ip
 8027ab0:	b292      	uxth	r2, r2
 8027ab2:	fb02 f303 	mul.w	r3, r2, r3
 8027ab6:	58cb      	ldr	r3, [r1, r3]
 8027ab8:	2b00      	cmp	r3, #0
 8027aba:	d1e7      	bne.n	8027a8c <uxr_compute_acknack+0x14>
 8027abc:	4605      	mov	r5, r0
 8027abe:	803d      	strh	r5, [r7, #0]
 8027ac0:	2101      	movs	r1, #1
 8027ac2:	89e6      	ldrh	r6, [r4, #14]
 8027ac4:	4628      	mov	r0, r5
 8027ac6:	f000 fb69 	bl	802819c <uxr_seq_num_sub>
 8027aca:	4601      	mov	r1, r0
 8027acc:	4630      	mov	r0, r6
 8027ace:	f000 fb65 	bl	802819c <uxr_seq_num_sub>
 8027ad2:	4606      	mov	r6, r0
 8027ad4:	b328      	cbz	r0, 8027b22 <uxr_compute_acknack+0xaa>
 8027ad6:	f04f 0900 	mov.w	r9, #0
 8027ada:	f04f 0801 	mov.w	r8, #1
 8027ade:	464d      	mov	r5, r9
 8027ae0:	fa1f f189 	uxth.w	r1, r9
 8027ae4:	8838      	ldrh	r0, [r7, #0]
 8027ae6:	f000 fb55 	bl	8028194 <uxr_seq_num_add>
 8027aea:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8027aee:	6861      	ldr	r1, [r4, #4]
 8027af0:	fa08 fe09 	lsl.w	lr, r8, r9
 8027af4:	6822      	ldr	r2, [r4, #0]
 8027af6:	f109 0901 	add.w	r9, r9, #1
 8027afa:	ea4e 0e05 	orr.w	lr, lr, r5
 8027afe:	fbb0 f3fc 	udiv	r3, r0, ip
 8027b02:	fbb1 f1fc 	udiv	r1, r1, ip
 8027b06:	fb03 001c 	mls	r0, r3, ip, r0
 8027b0a:	b283      	uxth	r3, r0
 8027b0c:	fb01 f303 	mul.w	r3, r1, r3
 8027b10:	58d3      	ldr	r3, [r2, r3]
 8027b12:	b90b      	cbnz	r3, 8027b18 <uxr_compute_acknack+0xa0>
 8027b14:	fa1f f58e 	uxth.w	r5, lr
 8027b18:	454e      	cmp	r6, r9
 8027b1a:	d1e1      	bne.n	8027ae0 <uxr_compute_acknack+0x68>
 8027b1c:	4628      	mov	r0, r5
 8027b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027b22:	4605      	mov	r5, r0
 8027b24:	4628      	mov	r0, r5
 8027b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027b2a:	bf00      	nop

08027b2c <uxr_init_output_best_effort_stream>:
 8027b2c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8027b30:	6001      	str	r1, [r0, #0]
 8027b32:	7303      	strb	r3, [r0, #12]
 8027b34:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8027b38:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8027b3c:	4770      	bx	lr
 8027b3e:	bf00      	nop

08027b40 <uxr_reset_output_best_effort_stream>:
 8027b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8027b44:	7b03      	ldrb	r3, [r0, #12]
 8027b46:	81c2      	strh	r2, [r0, #14]
 8027b48:	6043      	str	r3, [r0, #4]
 8027b4a:	4770      	bx	lr

08027b4c <uxr_prepare_best_effort_buffer_to_write>:
 8027b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027b4e:	4604      	mov	r4, r0
 8027b50:	b083      	sub	sp, #12
 8027b52:	6840      	ldr	r0, [r0, #4]
 8027b54:	460d      	mov	r5, r1
 8027b56:	4616      	mov	r6, r2
 8027b58:	f7fd feea 	bl	8025930 <uxr_submessage_padding>
 8027b5c:	6863      	ldr	r3, [r4, #4]
 8027b5e:	4418      	add	r0, r3
 8027b60:	68a3      	ldr	r3, [r4, #8]
 8027b62:	1942      	adds	r2, r0, r5
 8027b64:	4293      	cmp	r3, r2
 8027b66:	bf2c      	ite	cs
 8027b68:	2701      	movcs	r7, #1
 8027b6a:	2700      	movcc	r7, #0
 8027b6c:	d202      	bcs.n	8027b74 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8027b6e:	4638      	mov	r0, r7
 8027b70:	b003      	add	sp, #12
 8027b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027b74:	9000      	str	r0, [sp, #0]
 8027b76:	2300      	movs	r3, #0
 8027b78:	4630      	mov	r0, r6
 8027b7a:	6821      	ldr	r1, [r4, #0]
 8027b7c:	f7f5 f974 	bl	801ce68 <ucdr_init_buffer_origin_offset>
 8027b80:	6861      	ldr	r1, [r4, #4]
 8027b82:	4638      	mov	r0, r7
 8027b84:	4429      	add	r1, r5
 8027b86:	6061      	str	r1, [r4, #4]
 8027b88:	b003      	add	sp, #12
 8027b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027b8c <uxr_prepare_best_effort_buffer_to_send>:
 8027b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027b90:	4604      	mov	r4, r0
 8027b92:	461d      	mov	r5, r3
 8027b94:	6840      	ldr	r0, [r0, #4]
 8027b96:	7b23      	ldrb	r3, [r4, #12]
 8027b98:	4298      	cmp	r0, r3
 8027b9a:	bf8c      	ite	hi
 8027b9c:	2601      	movhi	r6, #1
 8027b9e:	2600      	movls	r6, #0
 8027ba0:	d802      	bhi.n	8027ba8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8027ba2:	4630      	mov	r0, r6
 8027ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027ba8:	4688      	mov	r8, r1
 8027baa:	89e0      	ldrh	r0, [r4, #14]
 8027bac:	2101      	movs	r1, #1
 8027bae:	4617      	mov	r7, r2
 8027bb0:	f000 faf0 	bl	8028194 <uxr_seq_num_add>
 8027bb4:	6823      	ldr	r3, [r4, #0]
 8027bb6:	81e0      	strh	r0, [r4, #14]
 8027bb8:	8028      	strh	r0, [r5, #0]
 8027bba:	4630      	mov	r0, r6
 8027bbc:	f8c8 3000 	str.w	r3, [r8]
 8027bc0:	6863      	ldr	r3, [r4, #4]
 8027bc2:	603b      	str	r3, [r7, #0]
 8027bc4:	7b23      	ldrb	r3, [r4, #12]
 8027bc6:	6063      	str	r3, [r4, #4]
 8027bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08027bcc <on_full_output_buffer>:
 8027bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027bce:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8027bd2:	460c      	mov	r4, r1
 8027bd4:	6803      	ldr	r3, [r0, #0]
 8027bd6:	4605      	mov	r5, r0
 8027bd8:	7b26      	ldrb	r6, [r4, #12]
 8027bda:	e9d1 1200 	ldrd	r1, r2, [r1]
 8027bde:	fbb2 f2fc 	udiv	r2, r2, ip
 8027be2:	eba3 0e01 	sub.w	lr, r3, r1
 8027be6:	6903      	ldr	r3, [r0, #16]
 8027be8:	fbbe fef2 	udiv	lr, lr, r2
 8027bec:	f10e 0e01 	add.w	lr, lr, #1
 8027bf0:	fa1f fe8e 	uxth.w	lr, lr
 8027bf4:	fbbe f7fc 	udiv	r7, lr, ip
 8027bf8:	fb0c ec17 	mls	ip, ip, r7, lr
 8027bfc:	fa1f fc8c 	uxth.w	ip, ip
 8027c00:	fb02 fc0c 	mul.w	ip, r2, ip
 8027c04:	f851 200c 	ldr.w	r2, [r1, ip]
 8027c08:	44b4      	add	ip, r6
 8027c0a:	1b92      	subs	r2, r2, r6
 8027c0c:	f10c 0c08 	add.w	ip, ip, #8
 8027c10:	3a04      	subs	r2, #4
 8027c12:	4461      	add	r1, ip
 8027c14:	f7f5 f932 	bl	801ce7c <ucdr_init_buffer_origin>
 8027c18:	4628      	mov	r0, r5
 8027c1a:	4622      	mov	r2, r4
 8027c1c:	4902      	ldr	r1, [pc, #8]	@ (8027c28 <on_full_output_buffer+0x5c>)
 8027c1e:	f7f5 f909 	bl	801ce34 <ucdr_set_on_full_buffer_callback>
 8027c22:	2000      	movs	r0, #0
 8027c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027c26:	bf00      	nop
 8027c28:	08027bcd 	.word	0x08027bcd

08027c2c <uxr_init_output_reliable_stream>:
 8027c2c:	b530      	push	{r4, r5, lr}
 8027c2e:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8027c32:	8103      	strh	r3, [r0, #8]
 8027c34:	7304      	strb	r4, [r0, #12]
 8027c36:	e9c0 1200 	strd	r1, r2, [r0]
 8027c3a:	b1e3      	cbz	r3, 8027c76 <uxr_init_output_reliable_stream+0x4a>
 8027c3c:	600c      	str	r4, [r1, #0]
 8027c3e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8027c42:	f1bc 0f01 	cmp.w	ip, #1
 8027c46:	d916      	bls.n	8027c76 <uxr_init_output_reliable_stream+0x4a>
 8027c48:	f04f 0e01 	mov.w	lr, #1
 8027c4c:	6843      	ldr	r3, [r0, #4]
 8027c4e:	f10e 0501 	add.w	r5, lr, #1
 8027c52:	7b04      	ldrb	r4, [r0, #12]
 8027c54:	6801      	ldr	r1, [r0, #0]
 8027c56:	fbbe f2fc 	udiv	r2, lr, ip
 8027c5a:	fbb3 f3fc 	udiv	r3, r3, ip
 8027c5e:	fb0c e212 	mls	r2, ip, r2, lr
 8027c62:	fa1f fe85 	uxth.w	lr, r5
 8027c66:	b292      	uxth	r2, r2
 8027c68:	fb02 f303 	mul.w	r3, r2, r3
 8027c6c:	50cc      	str	r4, [r1, r3]
 8027c6e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8027c72:	45f4      	cmp	ip, lr
 8027c74:	d8ea      	bhi.n	8027c4c <uxr_init_output_reliable_stream+0x20>
 8027c76:	4b07      	ldr	r3, [pc, #28]	@ (8027c94 <uxr_init_output_reliable_stream+0x68>)
 8027c78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8027c7c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8027c80:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8027c84:	f8c0 300e 	str.w	r3, [r0, #14]
 8027c88:	2300      	movs	r3, #0
 8027c8a:	8242      	strh	r2, [r0, #18]
 8027c8c:	8403      	strh	r3, [r0, #32]
 8027c8e:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8027c92:	bd30      	pop	{r4, r5, pc}
 8027c94:	ffff0000 	.word	0xffff0000

08027c98 <uxr_reset_output_reliable_stream>:
 8027c98:	8901      	ldrh	r1, [r0, #8]
 8027c9a:	b510      	push	{r4, lr}
 8027c9c:	b1b1      	cbz	r1, 8027ccc <uxr_reset_output_reliable_stream+0x34>
 8027c9e:	f04f 0e00 	mov.w	lr, #0
 8027ca2:	46f4      	mov	ip, lr
 8027ca4:	6843      	ldr	r3, [r0, #4]
 8027ca6:	f10e 0e01 	add.w	lr, lr, #1
 8027caa:	7b04      	ldrb	r4, [r0, #12]
 8027cac:	fbbc f2f1 	udiv	r2, ip, r1
 8027cb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8027cb4:	fb01 c212 	mls	r2, r1, r2, ip
 8027cb8:	fa1f fc8e 	uxth.w	ip, lr
 8027cbc:	b292      	uxth	r2, r2
 8027cbe:	fb02 f303 	mul.w	r3, r2, r3
 8027cc2:	6802      	ldr	r2, [r0, #0]
 8027cc4:	50d4      	str	r4, [r2, r3]
 8027cc6:	8901      	ldrh	r1, [r0, #8]
 8027cc8:	4561      	cmp	r1, ip
 8027cca:	d8eb      	bhi.n	8027ca4 <uxr_reset_output_reliable_stream+0xc>
 8027ccc:	4b08      	ldr	r3, [pc, #32]	@ (8027cf0 <uxr_reset_output_reliable_stream+0x58>)
 8027cce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8027cd2:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8027ce8 <uxr_reset_output_reliable_stream+0x50>
 8027cd6:	f8c0 300e 	str.w	r3, [r0, #14]
 8027cda:	2300      	movs	r3, #0
 8027cdc:	8242      	strh	r2, [r0, #18]
 8027cde:	8403      	strh	r3, [r0, #32]
 8027ce0:	ed80 7b06 	vstr	d7, [r0, #24]
 8027ce4:	bd10      	pop	{r4, pc}
 8027ce6:	bf00      	nop
 8027ce8:	ffffffff 	.word	0xffffffff
 8027cec:	7fffffff 	.word	0x7fffffff
 8027cf0:	ffff0000 	.word	0xffff0000

08027cf4 <uxr_prepare_reliable_buffer_to_write>:
 8027cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cf8:	4604      	mov	r4, r0
 8027cfa:	b091      	sub	sp, #68	@ 0x44
 8027cfc:	8900      	ldrh	r0, [r0, #8]
 8027cfe:	468b      	mov	fp, r1
 8027d00:	89e6      	ldrh	r6, [r4, #14]
 8027d02:	9204      	str	r2, [sp, #16]
 8027d04:	6865      	ldr	r5, [r4, #4]
 8027d06:	6823      	ldr	r3, [r4, #0]
 8027d08:	f894 900c 	ldrb.w	r9, [r4, #12]
 8027d0c:	fbb6 f2f0 	udiv	r2, r6, r0
 8027d10:	fbb5 f5f0 	udiv	r5, r5, r0
 8027d14:	fb00 6212 	mls	r2, r0, r2, r6
 8027d18:	1f2f      	subs	r7, r5, #4
 8027d1a:	b292      	uxth	r2, r2
 8027d1c:	fb05 3202 	mla	r2, r5, r2, r3
 8027d20:	1d11      	adds	r1, r2, #4
 8027d22:	f8d2 8000 	ldr.w	r8, [r2]
 8027d26:	9103      	str	r1, [sp, #12]
 8027d28:	2800      	cmp	r0, #0
 8027d2a:	f000 814a 	beq.w	8027fc2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8027d2e:	f04f 0c00 	mov.w	ip, #0
 8027d32:	46e2      	mov	sl, ip
 8027d34:	4661      	mov	r1, ip
 8027d36:	f10c 0c01 	add.w	ip, ip, #1
 8027d3a:	fbb1 f2f0 	udiv	r2, r1, r0
 8027d3e:	fb00 1212 	mls	r2, r0, r2, r1
 8027d42:	fa1f f18c 	uxth.w	r1, ip
 8027d46:	b292      	uxth	r2, r2
 8027d48:	fb05 f202 	mul.w	r2, r5, r2
 8027d4c:	589a      	ldr	r2, [r3, r2]
 8027d4e:	454a      	cmp	r2, r9
 8027d50:	d103      	bne.n	8027d5a <uxr_prepare_reliable_buffer_to_write+0x66>
 8027d52:	f10a 0a01 	add.w	sl, sl, #1
 8027d56:	fa1f fa8a 	uxth.w	sl, sl
 8027d5a:	4281      	cmp	r1, r0
 8027d5c:	d3eb      	bcc.n	8027d36 <uxr_prepare_reliable_buffer_to_write+0x42>
 8027d5e:	4640      	mov	r0, r8
 8027d60:	2104      	movs	r1, #4
 8027d62:	f8cd a014 	str.w	sl, [sp, #20]
 8027d66:	f7f5 f895 	bl	801ce94 <ucdr_alignment>
 8027d6a:	4480      	add	r8, r0
 8027d6c:	eb08 020b 	add.w	r2, r8, fp
 8027d70:	42ba      	cmp	r2, r7
 8027d72:	f240 80ca 	bls.w	8027f0a <uxr_prepare_reliable_buffer_to_write+0x216>
 8027d76:	7b22      	ldrb	r2, [r4, #12]
 8027d78:	445a      	add	r2, fp
 8027d7a:	42ba      	cmp	r2, r7
 8027d7c:	f240 80b2 	bls.w	8027ee4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8027d80:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8027d84:	b2bb      	uxth	r3, r7
 8027d86:	eba2 0209 	sub.w	r2, r2, r9
 8027d8a:	441a      	add	r2, r3
 8027d8c:	b292      	uxth	r2, r2
 8027d8e:	fb0a f902 	mul.w	r9, sl, r2
 8027d92:	9205      	str	r2, [sp, #20]
 8027d94:	45d9      	cmp	r9, fp
 8027d96:	9206      	str	r2, [sp, #24]
 8027d98:	f0c0 80b3 	bcc.w	8027f02 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8027d9c:	f108 0204 	add.w	r2, r8, #4
 8027da0:	42ba      	cmp	r2, r7
 8027da2:	f080 80da 	bcs.w	8027f5a <uxr_prepare_reliable_buffer_to_write+0x266>
 8027da6:	f1a3 0904 	sub.w	r9, r3, #4
 8027daa:	9b05      	ldr	r3, [sp, #20]
 8027dac:	eba9 0908 	sub.w	r9, r9, r8
 8027db0:	fa1f f989 	uxth.w	r9, r9
 8027db4:	ebab 0b09 	sub.w	fp, fp, r9
 8027db8:	fbbb f2f3 	udiv	r2, fp, r3
 8027dbc:	fb03 b312 	mls	r3, r3, r2, fp
 8027dc0:	2b00      	cmp	r3, #0
 8027dc2:	f040 80c4 	bne.w	8027f4e <uxr_prepare_reliable_buffer_to_write+0x25a>
 8027dc6:	b293      	uxth	r3, r2
 8027dc8:	4553      	cmp	r3, sl
 8027dca:	f200 809a 	bhi.w	8027f02 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8027dce:	2b00      	cmp	r3, #0
 8027dd0:	f000 80f9 	beq.w	8027fc6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8027dd4:	f8cd 801c 	str.w	r8, [sp, #28]
 8027dd8:	f04f 0a00 	mov.w	sl, #0
 8027ddc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8027de0:	f10d 0b20 	add.w	fp, sp, #32
 8027de4:	9505      	str	r5, [sp, #20]
 8027de6:	461d      	mov	r5, r3
 8027de8:	e000      	b.n	8027dec <uxr_prepare_reliable_buffer_to_write+0xf8>
 8027dea:	46c1      	mov	r9, r8
 8027dec:	8922      	ldrh	r2, [r4, #8]
 8027dee:	4658      	mov	r0, fp
 8027df0:	6863      	ldr	r3, [r4, #4]
 8027df2:	f10a 0a01 	add.w	sl, sl, #1
 8027df6:	fbb6 f1f2 	udiv	r1, r6, r2
 8027dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8027dfe:	fb02 6111 	mls	r1, r2, r1, r6
 8027e02:	463a      	mov	r2, r7
 8027e04:	b289      	uxth	r1, r1
 8027e06:	fb03 f101 	mul.w	r1, r3, r1
 8027e0a:	6823      	ldr	r3, [r4, #0]
 8027e0c:	3104      	adds	r1, #4
 8027e0e:	4419      	add	r1, r3
 8027e10:	2300      	movs	r3, #0
 8027e12:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8027e16:	f8cd c000 	str.w	ip, [sp]
 8027e1a:	f7f5 f825 	bl	801ce68 <ucdr_init_buffer_origin_offset>
 8027e1e:	464a      	mov	r2, r9
 8027e20:	2300      	movs	r3, #0
 8027e22:	210d      	movs	r1, #13
 8027e24:	4658      	mov	r0, fp
 8027e26:	f7fd fd43 	bl	80258b0 <uxr_buffer_submessage_header>
 8027e2a:	8921      	ldrh	r1, [r4, #8]
 8027e2c:	6863      	ldr	r3, [r4, #4]
 8027e2e:	4630      	mov	r0, r6
 8027e30:	fbb6 f2f1 	udiv	r2, r6, r1
 8027e34:	fbb3 f3f1 	udiv	r3, r3, r1
 8027e38:	fb01 6212 	mls	r2, r1, r2, r6
 8027e3c:	2101      	movs	r1, #1
 8027e3e:	b292      	uxth	r2, r2
 8027e40:	fb02 f303 	mul.w	r3, r2, r3
 8027e44:	6822      	ldr	r2, [r4, #0]
 8027e46:	50d7      	str	r7, [r2, r3]
 8027e48:	f000 f9a4 	bl	8028194 <uxr_seq_num_add>
 8027e4c:	4606      	mov	r6, r0
 8027e4e:	fa1f f38a 	uxth.w	r3, sl
 8027e52:	429d      	cmp	r5, r3
 8027e54:	d8c9      	bhi.n	8027dea <uxr_prepare_reliable_buffer_to_write+0xf6>
 8027e56:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027e5a:	9d05      	ldr	r5, [sp, #20]
 8027e5c:	8920      	ldrh	r0, [r4, #8]
 8027e5e:	463a      	mov	r2, r7
 8027e60:	6863      	ldr	r3, [r4, #4]
 8027e62:	fbb6 f1f0 	udiv	r1, r6, r0
 8027e66:	fbb3 f3f0 	udiv	r3, r3, r0
 8027e6a:	fb00 6111 	mls	r1, r0, r1, r6
 8027e6e:	4658      	mov	r0, fp
 8027e70:	b289      	uxth	r1, r1
 8027e72:	fb01 f303 	mul.w	r3, r1, r3
 8027e76:	6821      	ldr	r1, [r4, #0]
 8027e78:	3304      	adds	r3, #4
 8027e7a:	4419      	add	r1, r3
 8027e7c:	2300      	movs	r3, #0
 8027e7e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8027e82:	9700      	str	r7, [sp, #0]
 8027e84:	f7f4 fff0 	bl	801ce68 <ucdr_init_buffer_origin_offset>
 8027e88:	9f06      	ldr	r7, [sp, #24]
 8027e8a:	4658      	mov	r0, fp
 8027e8c:	2302      	movs	r3, #2
 8027e8e:	b2ba      	uxth	r2, r7
 8027e90:	210d      	movs	r1, #13
 8027e92:	f7fd fd0d 	bl	80258b0 <uxr_buffer_submessage_header>
 8027e96:	f108 0104 	add.w	r1, r8, #4
 8027e9a:	9b03      	ldr	r3, [sp, #12]
 8027e9c:	f1a5 0208 	sub.w	r2, r5, #8
 8027ea0:	8925      	ldrh	r5, [r4, #8]
 8027ea2:	440b      	add	r3, r1
 8027ea4:	eba2 0208 	sub.w	r2, r2, r8
 8027ea8:	fbb6 f0f5 	udiv	r0, r6, r5
 8027eac:	4619      	mov	r1, r3
 8027eae:	6863      	ldr	r3, [r4, #4]
 8027eb0:	fb05 6010 	mls	r0, r5, r0, r6
 8027eb4:	fbb3 f3f5 	udiv	r3, r3, r5
 8027eb8:	b280      	uxth	r0, r0
 8027eba:	6825      	ldr	r5, [r4, #0]
 8027ebc:	fb00 f303 	mul.w	r3, r0, r3
 8027ec0:	7b20      	ldrb	r0, [r4, #12]
 8027ec2:	3004      	adds	r0, #4
 8027ec4:	4438      	add	r0, r7
 8027ec6:	50e8      	str	r0, [r5, r3]
 8027ec8:	9d04      	ldr	r5, [sp, #16]
 8027eca:	4628      	mov	r0, r5
 8027ecc:	f7f4 ffde 	bl	801ce8c <ucdr_init_buffer>
 8027ed0:	4628      	mov	r0, r5
 8027ed2:	4622      	mov	r2, r4
 8027ed4:	493d      	ldr	r1, [pc, #244]	@ (8027fcc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8027ed6:	f7f4 ffad 	bl	801ce34 <ucdr_set_on_full_buffer_callback>
 8027eda:	2001      	movs	r0, #1
 8027edc:	81e6      	strh	r6, [r4, #14]
 8027ede:	b011      	add	sp, #68	@ 0x44
 8027ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ee4:	2101      	movs	r1, #1
 8027ee6:	89e0      	ldrh	r0, [r4, #14]
 8027ee8:	f000 f954 	bl	8028194 <uxr_seq_num_add>
 8027eec:	4605      	mov	r5, r0
 8027eee:	8921      	ldrh	r1, [r4, #8]
 8027ef0:	8a60      	ldrh	r0, [r4, #18]
 8027ef2:	f000 f94f 	bl	8028194 <uxr_seq_num_add>
 8027ef6:	4601      	mov	r1, r0
 8027ef8:	4628      	mov	r0, r5
 8027efa:	f000 f953 	bl	80281a4 <uxr_seq_num_cmp>
 8027efe:	2800      	cmp	r0, #0
 8027f00:	dd44      	ble.n	8027f8c <uxr_prepare_reliable_buffer_to_write+0x298>
 8027f02:	2000      	movs	r0, #0
 8027f04:	b011      	add	sp, #68	@ 0x44
 8027f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f0a:	8921      	ldrh	r1, [r4, #8]
 8027f0c:	8a60      	ldrh	r0, [r4, #18]
 8027f0e:	9205      	str	r2, [sp, #20]
 8027f10:	f000 f940 	bl	8028194 <uxr_seq_num_add>
 8027f14:	4601      	mov	r1, r0
 8027f16:	4630      	mov	r0, r6
 8027f18:	f000 f944 	bl	80281a4 <uxr_seq_num_cmp>
 8027f1c:	2800      	cmp	r0, #0
 8027f1e:	9a05      	ldr	r2, [sp, #20]
 8027f20:	dcef      	bgt.n	8027f02 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8027f22:	8925      	ldrh	r5, [r4, #8]
 8027f24:	e9d4 7300 	ldrd	r7, r3, [r4]
 8027f28:	fbb6 f4f5 	udiv	r4, r6, r5
 8027f2c:	fbb3 f3f5 	udiv	r3, r3, r5
 8027f30:	fb05 6414 	mls	r4, r5, r4, r6
 8027f34:	b2a4      	uxth	r4, r4
 8027f36:	fb04 f303 	mul.w	r3, r4, r3
 8027f3a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8027f3e:	50fa      	str	r2, [r7, r3]
 8027f40:	2300      	movs	r3, #0
 8027f42:	f8cd 8000 	str.w	r8, [sp]
 8027f46:	f7f4 ff8f 	bl	801ce68 <ucdr_init_buffer_origin_offset>
 8027f4a:	2001      	movs	r0, #1
 8027f4c:	e7da      	b.n	8027f04 <uxr_prepare_reliable_buffer_to_write+0x210>
 8027f4e:	3201      	adds	r2, #1
 8027f50:	9306      	str	r3, [sp, #24]
 8027f52:	b293      	uxth	r3, r2
 8027f54:	4553      	cmp	r3, sl
 8027f56:	d8d4      	bhi.n	8027f02 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8027f58:	e739      	b.n	8027dce <uxr_prepare_reliable_buffer_to_write+0xda>
 8027f5a:	4630      	mov	r0, r6
 8027f5c:	2101      	movs	r1, #1
 8027f5e:	9307      	str	r3, [sp, #28]
 8027f60:	f000 f918 	bl	8028194 <uxr_seq_num_add>
 8027f64:	4606      	mov	r6, r0
 8027f66:	8920      	ldrh	r0, [r4, #8]
 8027f68:	6862      	ldr	r2, [r4, #4]
 8027f6a:	fbb6 f1f0 	udiv	r1, r6, r0
 8027f6e:	fbb2 f2f0 	udiv	r2, r2, r0
 8027f72:	fb00 6111 	mls	r1, r0, r1, r6
 8027f76:	b289      	uxth	r1, r1
 8027f78:	fb01 f202 	mul.w	r2, r1, r2
 8027f7c:	6821      	ldr	r1, [r4, #0]
 8027f7e:	3204      	adds	r2, #4
 8027f80:	188b      	adds	r3, r1, r2
 8027f82:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8027f86:	9303      	str	r3, [sp, #12]
 8027f88:	9b07      	ldr	r3, [sp, #28]
 8027f8a:	e70c      	b.n	8027da6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8027f8c:	8921      	ldrh	r1, [r4, #8]
 8027f8e:	6863      	ldr	r3, [r4, #4]
 8027f90:	9804      	ldr	r0, [sp, #16]
 8027f92:	fbb5 f2f1 	udiv	r2, r5, r1
 8027f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8027f9a:	fb01 5212 	mls	r2, r1, r2, r5
 8027f9e:	6821      	ldr	r1, [r4, #0]
 8027fa0:	b292      	uxth	r2, r2
 8027fa2:	fb02 f303 	mul.w	r3, r2, r3
 8027fa6:	7b22      	ldrb	r2, [r4, #12]
 8027fa8:	3304      	adds	r3, #4
 8027faa:	445a      	add	r2, fp
 8027fac:	4419      	add	r1, r3
 8027fae:	f841 2c04 	str.w	r2, [r1, #-4]
 8027fb2:	7b23      	ldrb	r3, [r4, #12]
 8027fb4:	9300      	str	r3, [sp, #0]
 8027fb6:	2300      	movs	r3, #0
 8027fb8:	f7f4 ff56 	bl	801ce68 <ucdr_init_buffer_origin_offset>
 8027fbc:	2001      	movs	r0, #1
 8027fbe:	81e5      	strh	r5, [r4, #14]
 8027fc0:	e7a0      	b.n	8027f04 <uxr_prepare_reliable_buffer_to_write+0x210>
 8027fc2:	4682      	mov	sl, r0
 8027fc4:	e6cb      	b.n	8027d5e <uxr_prepare_reliable_buffer_to_write+0x6a>
 8027fc6:	f10d 0b20 	add.w	fp, sp, #32
 8027fca:	e747      	b.n	8027e5c <uxr_prepare_reliable_buffer_to_write+0x168>
 8027fcc:	08027bcd 	.word	0x08027bcd

08027fd0 <uxr_prepare_next_reliable_buffer_to_send>:
 8027fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027fd2:	4604      	mov	r4, r0
 8027fd4:	461d      	mov	r5, r3
 8027fd6:	460f      	mov	r7, r1
 8027fd8:	8a00      	ldrh	r0, [r0, #16]
 8027fda:	2101      	movs	r1, #1
 8027fdc:	4616      	mov	r6, r2
 8027fde:	f000 f8d9 	bl	8028194 <uxr_seq_num_add>
 8027fe2:	8028      	strh	r0, [r5, #0]
 8027fe4:	8922      	ldrh	r2, [r4, #8]
 8027fe6:	6863      	ldr	r3, [r4, #4]
 8027fe8:	fbb0 f1f2 	udiv	r1, r0, r2
 8027fec:	fbb3 f3f2 	udiv	r3, r3, r2
 8027ff0:	fb02 0c11 	mls	ip, r2, r1, r0
 8027ff4:	89e1      	ldrh	r1, [r4, #14]
 8027ff6:	fa1f fc8c 	uxth.w	ip, ip
 8027ffa:	fb0c fc03 	mul.w	ip, ip, r3
 8027ffe:	6823      	ldr	r3, [r4, #0]
 8028000:	f10c 0c04 	add.w	ip, ip, #4
 8028004:	4463      	add	r3, ip
 8028006:	603b      	str	r3, [r7, #0]
 8028008:	6823      	ldr	r3, [r4, #0]
 802800a:	449c      	add	ip, r3
 802800c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8028010:	6033      	str	r3, [r6, #0]
 8028012:	f000 f8c7 	bl	80281a4 <uxr_seq_num_cmp>
 8028016:	2800      	cmp	r0, #0
 8028018:	dd01      	ble.n	802801e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 802801a:	2000      	movs	r0, #0
 802801c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802801e:	7b23      	ldrb	r3, [r4, #12]
 8028020:	6832      	ldr	r2, [r6, #0]
 8028022:	429a      	cmp	r2, r3
 8028024:	d9f9      	bls.n	802801a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8028026:	8a61      	ldrh	r1, [r4, #18]
 8028028:	8a20      	ldrh	r0, [r4, #16]
 802802a:	f000 f8b7 	bl	802819c <uxr_seq_num_sub>
 802802e:	8923      	ldrh	r3, [r4, #8]
 8028030:	4283      	cmp	r3, r0
 8028032:	d0f2      	beq.n	802801a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8028034:	8828      	ldrh	r0, [r5, #0]
 8028036:	89e3      	ldrh	r3, [r4, #14]
 8028038:	8220      	strh	r0, [r4, #16]
 802803a:	4298      	cmp	r0, r3
 802803c:	d001      	beq.n	8028042 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 802803e:	2001      	movs	r0, #1
 8028040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028042:	2101      	movs	r1, #1
 8028044:	f000 f8a6 	bl	8028194 <uxr_seq_num_add>
 8028048:	4603      	mov	r3, r0
 802804a:	2001      	movs	r0, #1
 802804c:	81e3      	strh	r3, [r4, #14]
 802804e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08028050 <uxr_update_output_stream_heartbeat_timestamp>:
 8028050:	b570      	push	{r4, r5, r6, lr}
 8028052:	8a01      	ldrh	r1, [r0, #16]
 8028054:	4604      	mov	r4, r0
 8028056:	8a40      	ldrh	r0, [r0, #18]
 8028058:	4615      	mov	r5, r2
 802805a:	461e      	mov	r6, r3
 802805c:	f000 f8a2 	bl	80281a4 <uxr_seq_num_cmp>
 8028060:	2800      	cmp	r0, #0
 8028062:	db07      	blt.n	8028074 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8028064:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8028068:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 802806c:	2000      	movs	r0, #0
 802806e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8028072:	bd70      	pop	{r4, r5, r6, pc}
 8028074:	f894 0020 	ldrb.w	r0, [r4, #32]
 8028078:	b940      	cbnz	r0, 802808c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 802807a:	2301      	movs	r3, #1
 802807c:	f884 3020 	strb.w	r3, [r4, #32]
 8028080:	3564      	adds	r5, #100	@ 0x64
 8028082:	f146 0600 	adc.w	r6, r6, #0
 8028086:	e9c4 5606 	strd	r5, r6, [r4, #24]
 802808a:	bd70      	pop	{r4, r5, r6, pc}
 802808c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8028090:	4295      	cmp	r5, r2
 8028092:	eb76 0303 	sbcs.w	r3, r6, r3
 8028096:	db04      	blt.n	80280a2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8028098:	1c43      	adds	r3, r0, #1
 802809a:	2001      	movs	r0, #1
 802809c:	f884 3020 	strb.w	r3, [r4, #32]
 80280a0:	e7ee      	b.n	8028080 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80280a2:	2000      	movs	r0, #0
 80280a4:	e7ec      	b.n	8028080 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80280a6:	bf00      	nop

080280a8 <uxr_begin_output_nack_buffer_it>:
 80280a8:	8a40      	ldrh	r0, [r0, #18]
 80280aa:	4770      	bx	lr

080280ac <uxr_next_reliable_nack_buffer_to_send>:
 80280ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80280b0:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 80280b4:	b197      	cbz	r7, 80280dc <uxr_next_reliable_nack_buffer_to_send+0x30>
 80280b6:	4680      	mov	r8, r0
 80280b8:	460d      	mov	r5, r1
 80280ba:	4616      	mov	r6, r2
 80280bc:	461c      	mov	r4, r3
 80280be:	8818      	ldrh	r0, [r3, #0]
 80280c0:	2101      	movs	r1, #1
 80280c2:	f000 f867 	bl	8028194 <uxr_seq_num_add>
 80280c6:	8020      	strh	r0, [r4, #0]
 80280c8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 80280cc:	f000 f86a 	bl	80281a4 <uxr_seq_num_cmp>
 80280d0:	2800      	cmp	r0, #0
 80280d2:	dd06      	ble.n	80280e2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 80280d4:	2300      	movs	r3, #0
 80280d6:	461f      	mov	r7, r3
 80280d8:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 80280dc:	4638      	mov	r0, r7
 80280de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80280e2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 80280e6:	8820      	ldrh	r0, [r4, #0]
 80280e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80280ec:	fbb0 f3f2 	udiv	r3, r0, r2
 80280f0:	fbb1 fcf2 	udiv	ip, r1, r2
 80280f4:	fb02 0313 	mls	r3, r2, r3, r0
 80280f8:	b29b      	uxth	r3, r3
 80280fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80280fe:	f8d8 3000 	ldr.w	r3, [r8]
 8028102:	f10c 0c04 	add.w	ip, ip, #4
 8028106:	4463      	add	r3, ip
 8028108:	602b      	str	r3, [r5, #0]
 802810a:	f8d8 3000 	ldr.w	r3, [r8]
 802810e:	4463      	add	r3, ip
 8028110:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8028114:	6033      	str	r3, [r6, #0]
 8028116:	f898 200c 	ldrb.w	r2, [r8, #12]
 802811a:	429a      	cmp	r2, r3
 802811c:	d0d0      	beq.n	80280c0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 802811e:	e7dd      	b.n	80280dc <uxr_next_reliable_nack_buffer_to_send+0x30>

08028120 <uxr_process_acknack>:
 8028120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028122:	4604      	mov	r4, r0
 8028124:	460e      	mov	r6, r1
 8028126:	4610      	mov	r0, r2
 8028128:	2101      	movs	r1, #1
 802812a:	f000 f837 	bl	802819c <uxr_seq_num_sub>
 802812e:	8a61      	ldrh	r1, [r4, #18]
 8028130:	f000 f834 	bl	802819c <uxr_seq_num_sub>
 8028134:	b1c8      	cbz	r0, 802816a <uxr_process_acknack+0x4a>
 8028136:	4605      	mov	r5, r0
 8028138:	2700      	movs	r7, #0
 802813a:	2101      	movs	r1, #1
 802813c:	8a60      	ldrh	r0, [r4, #18]
 802813e:	f000 f829 	bl	8028194 <uxr_seq_num_add>
 8028142:	8923      	ldrh	r3, [r4, #8]
 8028144:	6862      	ldr	r2, [r4, #4]
 8028146:	3701      	adds	r7, #1
 8028148:	f894 c00c 	ldrb.w	ip, [r4, #12]
 802814c:	6821      	ldr	r1, [r4, #0]
 802814e:	42bd      	cmp	r5, r7
 8028150:	8260      	strh	r0, [r4, #18]
 8028152:	fbb0 fef3 	udiv	lr, r0, r3
 8028156:	fbb2 f2f3 	udiv	r2, r2, r3
 802815a:	fb03 031e 	mls	r3, r3, lr, r0
 802815e:	b29b      	uxth	r3, r3
 8028160:	fb02 f303 	mul.w	r3, r2, r3
 8028164:	f841 c003 	str.w	ip, [r1, r3]
 8028168:	d1e7      	bne.n	802813a <uxr_process_acknack+0x1a>
 802816a:	3e00      	subs	r6, #0
 802816c:	f04f 0300 	mov.w	r3, #0
 8028170:	bf18      	it	ne
 8028172:	2601      	movne	r6, #1
 8028174:	f884 3020 	strb.w	r3, [r4, #32]
 8028178:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 802817c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802817e:	bf00      	nop

08028180 <uxr_is_output_up_to_date>:
 8028180:	8a01      	ldrh	r1, [r0, #16]
 8028182:	8a40      	ldrh	r0, [r0, #18]
 8028184:	b508      	push	{r3, lr}
 8028186:	f000 f80d 	bl	80281a4 <uxr_seq_num_cmp>
 802818a:	fab0 f080 	clz	r0, r0
 802818e:	0940      	lsrs	r0, r0, #5
 8028190:	bd08      	pop	{r3, pc}
 8028192:	bf00      	nop

08028194 <uxr_seq_num_add>:
 8028194:	4408      	add	r0, r1
 8028196:	b280      	uxth	r0, r0
 8028198:	4770      	bx	lr
 802819a:	bf00      	nop

0802819c <uxr_seq_num_sub>:
 802819c:	1a40      	subs	r0, r0, r1
 802819e:	b280      	uxth	r0, r0
 80281a0:	4770      	bx	lr
 80281a2:	bf00      	nop

080281a4 <uxr_seq_num_cmp>:
 80281a4:	4288      	cmp	r0, r1
 80281a6:	d011      	beq.n	80281cc <uxr_seq_num_cmp+0x28>
 80281a8:	d309      	bcc.n	80281be <uxr_seq_num_cmp+0x1a>
 80281aa:	4288      	cmp	r0, r1
 80281ac:	d910      	bls.n	80281d0 <uxr_seq_num_cmp+0x2c>
 80281ae:	1a40      	subs	r0, r0, r1
 80281b0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80281b4:	bfd4      	ite	le
 80281b6:	2001      	movle	r0, #1
 80281b8:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80281bc:	4770      	bx	lr
 80281be:	1a0b      	subs	r3, r1, r0
 80281c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80281c4:	daf1      	bge.n	80281aa <uxr_seq_num_cmp+0x6>
 80281c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80281ca:	4770      	bx	lr
 80281cc:	2000      	movs	r0, #0
 80281ce:	4770      	bx	lr
 80281d0:	2001      	movs	r0, #1
 80281d2:	4770      	bx	lr

080281d4 <rosidl_runtime_c__String__init>:
 80281d4:	b510      	push	{r4, lr}
 80281d6:	4604      	mov	r4, r0
 80281d8:	b086      	sub	sp, #24
 80281da:	b170      	cbz	r0, 80281fa <rosidl_runtime_c__String__init+0x26>
 80281dc:	a801      	add	r0, sp, #4
 80281de:	f7f4 fc3d 	bl	801ca5c <rcutils_get_default_allocator>
 80281e2:	9b01      	ldr	r3, [sp, #4]
 80281e4:	9905      	ldr	r1, [sp, #20]
 80281e6:	2001      	movs	r0, #1
 80281e8:	4798      	blx	r3
 80281ea:	6020      	str	r0, [r4, #0]
 80281ec:	b128      	cbz	r0, 80281fa <rosidl_runtime_c__String__init+0x26>
 80281ee:	2100      	movs	r1, #0
 80281f0:	2201      	movs	r2, #1
 80281f2:	7001      	strb	r1, [r0, #0]
 80281f4:	4610      	mov	r0, r2
 80281f6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80281fa:	b006      	add	sp, #24
 80281fc:	bd10      	pop	{r4, pc}
 80281fe:	bf00      	nop

08028200 <rosidl_runtime_c__String__fini>:
 8028200:	b320      	cbz	r0, 802824c <rosidl_runtime_c__String__fini+0x4c>
 8028202:	6803      	ldr	r3, [r0, #0]
 8028204:	b510      	push	{r4, lr}
 8028206:	4604      	mov	r4, r0
 8028208:	b086      	sub	sp, #24
 802820a:	b173      	cbz	r3, 802822a <rosidl_runtime_c__String__fini+0x2a>
 802820c:	6883      	ldr	r3, [r0, #8]
 802820e:	b1f3      	cbz	r3, 802824e <rosidl_runtime_c__String__fini+0x4e>
 8028210:	a801      	add	r0, sp, #4
 8028212:	f7f4 fc23 	bl	801ca5c <rcutils_get_default_allocator>
 8028216:	9b02      	ldr	r3, [sp, #8]
 8028218:	9905      	ldr	r1, [sp, #20]
 802821a:	6820      	ldr	r0, [r4, #0]
 802821c:	4798      	blx	r3
 802821e:	2300      	movs	r3, #0
 8028220:	e9c4 3300 	strd	r3, r3, [r4]
 8028224:	60a3      	str	r3, [r4, #8]
 8028226:	b006      	add	sp, #24
 8028228:	bd10      	pop	{r4, pc}
 802822a:	6843      	ldr	r3, [r0, #4]
 802822c:	b9db      	cbnz	r3, 8028266 <rosidl_runtime_c__String__fini+0x66>
 802822e:	6883      	ldr	r3, [r0, #8]
 8028230:	2b00      	cmp	r3, #0
 8028232:	d0f8      	beq.n	8028226 <rosidl_runtime_c__String__fini+0x26>
 8028234:	4b12      	ldr	r3, [pc, #72]	@ (8028280 <rosidl_runtime_c__String__fini+0x80>)
 8028236:	2251      	movs	r2, #81	@ 0x51
 8028238:	2101      	movs	r1, #1
 802823a:	4812      	ldr	r0, [pc, #72]	@ (8028284 <rosidl_runtime_c__String__fini+0x84>)
 802823c:	681b      	ldr	r3, [r3, #0]
 802823e:	68db      	ldr	r3, [r3, #12]
 8028240:	f001 f862 	bl	8029308 <fwrite>
 8028244:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028248:	f000 f842 	bl	80282d0 <exit>
 802824c:	4770      	bx	lr
 802824e:	4b0c      	ldr	r3, [pc, #48]	@ (8028280 <rosidl_runtime_c__String__fini+0x80>)
 8028250:	224c      	movs	r2, #76	@ 0x4c
 8028252:	2101      	movs	r1, #1
 8028254:	480c      	ldr	r0, [pc, #48]	@ (8028288 <rosidl_runtime_c__String__fini+0x88>)
 8028256:	681b      	ldr	r3, [r3, #0]
 8028258:	68db      	ldr	r3, [r3, #12]
 802825a:	f001 f855 	bl	8029308 <fwrite>
 802825e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028262:	f000 f835 	bl	80282d0 <exit>
 8028266:	4b06      	ldr	r3, [pc, #24]	@ (8028280 <rosidl_runtime_c__String__fini+0x80>)
 8028268:	224e      	movs	r2, #78	@ 0x4e
 802826a:	2101      	movs	r1, #1
 802826c:	4807      	ldr	r0, [pc, #28]	@ (802828c <rosidl_runtime_c__String__fini+0x8c>)
 802826e:	681b      	ldr	r3, [r3, #0]
 8028270:	68db      	ldr	r3, [r3, #12]
 8028272:	f001 f849 	bl	8029308 <fwrite>
 8028276:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802827a:	f000 f829 	bl	80282d0 <exit>
 802827e:	bf00      	nop
 8028280:	200002b4 	.word	0x200002b4
 8028284:	0803010c 	.word	0x0803010c
 8028288:	0803006c 	.word	0x0803006c
 802828c:	080300bc 	.word	0x080300bc

08028290 <atoi>:
 8028290:	220a      	movs	r2, #10
 8028292:	2100      	movs	r1, #0
 8028294:	f000 ba50 	b.w	8028738 <strtol>

08028298 <calloc>:
 8028298:	4b02      	ldr	r3, [pc, #8]	@ (80282a4 <calloc+0xc>)
 802829a:	460a      	mov	r2, r1
 802829c:	4601      	mov	r1, r0
 802829e:	6818      	ldr	r0, [r3, #0]
 80282a0:	f000 b802 	b.w	80282a8 <_calloc_r>
 80282a4:	200002b4 	.word	0x200002b4

080282a8 <_calloc_r>:
 80282a8:	b570      	push	{r4, r5, r6, lr}
 80282aa:	fba1 5402 	umull	r5, r4, r1, r2
 80282ae:	b93c      	cbnz	r4, 80282c0 <_calloc_r+0x18>
 80282b0:	4629      	mov	r1, r5
 80282b2:	f000 f899 	bl	80283e8 <_malloc_r>
 80282b6:	4606      	mov	r6, r0
 80282b8:	b928      	cbnz	r0, 80282c6 <_calloc_r+0x1e>
 80282ba:	2600      	movs	r6, #0
 80282bc:	4630      	mov	r0, r6
 80282be:	bd70      	pop	{r4, r5, r6, pc}
 80282c0:	220c      	movs	r2, #12
 80282c2:	6002      	str	r2, [r0, #0]
 80282c4:	e7f9      	b.n	80282ba <_calloc_r+0x12>
 80282c6:	462a      	mov	r2, r5
 80282c8:	4621      	mov	r1, r4
 80282ca:	f001 f9ab 	bl	8029624 <memset>
 80282ce:	e7f5      	b.n	80282bc <_calloc_r+0x14>

080282d0 <exit>:
 80282d0:	b508      	push	{r3, lr}
 80282d2:	4b06      	ldr	r3, [pc, #24]	@ (80282ec <exit+0x1c>)
 80282d4:	4604      	mov	r4, r0
 80282d6:	b113      	cbz	r3, 80282de <exit+0xe>
 80282d8:	2100      	movs	r1, #0
 80282da:	f3af 8000 	nop.w
 80282de:	4b04      	ldr	r3, [pc, #16]	@ (80282f0 <exit+0x20>)
 80282e0:	681b      	ldr	r3, [r3, #0]
 80282e2:	b103      	cbz	r3, 80282e6 <exit+0x16>
 80282e4:	4798      	blx	r3
 80282e6:	4620      	mov	r0, r4
 80282e8:	f7d9 ff02 	bl	80020f0 <_exit>
 80282ec:	00000000 	.word	0x00000000
 80282f0:	2004736c 	.word	0x2004736c

080282f4 <getenv>:
 80282f4:	b507      	push	{r0, r1, r2, lr}
 80282f6:	4b04      	ldr	r3, [pc, #16]	@ (8028308 <getenv+0x14>)
 80282f8:	4601      	mov	r1, r0
 80282fa:	aa01      	add	r2, sp, #4
 80282fc:	6818      	ldr	r0, [r3, #0]
 80282fe:	f000 f805 	bl	802830c <_findenv_r>
 8028302:	b003      	add	sp, #12
 8028304:	f85d fb04 	ldr.w	pc, [sp], #4
 8028308:	200002b4 	.word	0x200002b4

0802830c <_findenv_r>:
 802830c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028310:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8028380 <_findenv_r+0x74>
 8028314:	4606      	mov	r6, r0
 8028316:	4689      	mov	r9, r1
 8028318:	4617      	mov	r7, r2
 802831a:	f002 f921 	bl	802a560 <__env_lock>
 802831e:	f8da 4000 	ldr.w	r4, [sl]
 8028322:	b134      	cbz	r4, 8028332 <_findenv_r+0x26>
 8028324:	464b      	mov	r3, r9
 8028326:	4698      	mov	r8, r3
 8028328:	f813 2b01 	ldrb.w	r2, [r3], #1
 802832c:	b13a      	cbz	r2, 802833e <_findenv_r+0x32>
 802832e:	2a3d      	cmp	r2, #61	@ 0x3d
 8028330:	d1f9      	bne.n	8028326 <_findenv_r+0x1a>
 8028332:	4630      	mov	r0, r6
 8028334:	f002 f91a 	bl	802a56c <__env_unlock>
 8028338:	2000      	movs	r0, #0
 802833a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802833e:	eba8 0809 	sub.w	r8, r8, r9
 8028342:	46a3      	mov	fp, r4
 8028344:	f854 0b04 	ldr.w	r0, [r4], #4
 8028348:	2800      	cmp	r0, #0
 802834a:	d0f2      	beq.n	8028332 <_findenv_r+0x26>
 802834c:	4642      	mov	r2, r8
 802834e:	4649      	mov	r1, r9
 8028350:	f001 f97d 	bl	802964e <strncmp>
 8028354:	2800      	cmp	r0, #0
 8028356:	d1f4      	bne.n	8028342 <_findenv_r+0x36>
 8028358:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802835c:	eb03 0508 	add.w	r5, r3, r8
 8028360:	f813 3008 	ldrb.w	r3, [r3, r8]
 8028364:	2b3d      	cmp	r3, #61	@ 0x3d
 8028366:	d1ec      	bne.n	8028342 <_findenv_r+0x36>
 8028368:	f8da 3000 	ldr.w	r3, [sl]
 802836c:	ebab 0303 	sub.w	r3, fp, r3
 8028370:	109b      	asrs	r3, r3, #2
 8028372:	4630      	mov	r0, r6
 8028374:	603b      	str	r3, [r7, #0]
 8028376:	f002 f8f9 	bl	802a56c <__env_unlock>
 802837a:	1c68      	adds	r0, r5, #1
 802837c:	e7dd      	b.n	802833a <_findenv_r+0x2e>
 802837e:	bf00      	nop
 8028380:	20000000 	.word	0x20000000

08028384 <malloc>:
 8028384:	4b02      	ldr	r3, [pc, #8]	@ (8028390 <malloc+0xc>)
 8028386:	4601      	mov	r1, r0
 8028388:	6818      	ldr	r0, [r3, #0]
 802838a:	f000 b82d 	b.w	80283e8 <_malloc_r>
 802838e:	bf00      	nop
 8028390:	200002b4 	.word	0x200002b4

08028394 <free>:
 8028394:	4b02      	ldr	r3, [pc, #8]	@ (80283a0 <free+0xc>)
 8028396:	4601      	mov	r1, r0
 8028398:	6818      	ldr	r0, [r3, #0]
 802839a:	f002 b8ed 	b.w	802a578 <_free_r>
 802839e:	bf00      	nop
 80283a0:	200002b4 	.word	0x200002b4

080283a4 <sbrk_aligned>:
 80283a4:	b570      	push	{r4, r5, r6, lr}
 80283a6:	4e0f      	ldr	r6, [pc, #60]	@ (80283e4 <sbrk_aligned+0x40>)
 80283a8:	460c      	mov	r4, r1
 80283aa:	6831      	ldr	r1, [r6, #0]
 80283ac:	4605      	mov	r5, r0
 80283ae:	b911      	cbnz	r1, 80283b6 <sbrk_aligned+0x12>
 80283b0:	f001 fa04 	bl	80297bc <_sbrk_r>
 80283b4:	6030      	str	r0, [r6, #0]
 80283b6:	4621      	mov	r1, r4
 80283b8:	4628      	mov	r0, r5
 80283ba:	f001 f9ff 	bl	80297bc <_sbrk_r>
 80283be:	1c43      	adds	r3, r0, #1
 80283c0:	d103      	bne.n	80283ca <sbrk_aligned+0x26>
 80283c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80283c6:	4620      	mov	r0, r4
 80283c8:	bd70      	pop	{r4, r5, r6, pc}
 80283ca:	1cc4      	adds	r4, r0, #3
 80283cc:	f024 0403 	bic.w	r4, r4, #3
 80283d0:	42a0      	cmp	r0, r4
 80283d2:	d0f8      	beq.n	80283c6 <sbrk_aligned+0x22>
 80283d4:	1a21      	subs	r1, r4, r0
 80283d6:	4628      	mov	r0, r5
 80283d8:	f001 f9f0 	bl	80297bc <_sbrk_r>
 80283dc:	3001      	adds	r0, #1
 80283de:	d1f2      	bne.n	80283c6 <sbrk_aligned+0x22>
 80283e0:	e7ef      	b.n	80283c2 <sbrk_aligned+0x1e>
 80283e2:	bf00      	nop
 80283e4:	2004722c 	.word	0x2004722c

080283e8 <_malloc_r>:
 80283e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80283ec:	1ccd      	adds	r5, r1, #3
 80283ee:	f025 0503 	bic.w	r5, r5, #3
 80283f2:	3508      	adds	r5, #8
 80283f4:	2d0c      	cmp	r5, #12
 80283f6:	bf38      	it	cc
 80283f8:	250c      	movcc	r5, #12
 80283fa:	2d00      	cmp	r5, #0
 80283fc:	4606      	mov	r6, r0
 80283fe:	db01      	blt.n	8028404 <_malloc_r+0x1c>
 8028400:	42a9      	cmp	r1, r5
 8028402:	d904      	bls.n	802840e <_malloc_r+0x26>
 8028404:	230c      	movs	r3, #12
 8028406:	6033      	str	r3, [r6, #0]
 8028408:	2000      	movs	r0, #0
 802840a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802840e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80284e4 <_malloc_r+0xfc>
 8028412:	f000 f869 	bl	80284e8 <__malloc_lock>
 8028416:	f8d8 3000 	ldr.w	r3, [r8]
 802841a:	461c      	mov	r4, r3
 802841c:	bb44      	cbnz	r4, 8028470 <_malloc_r+0x88>
 802841e:	4629      	mov	r1, r5
 8028420:	4630      	mov	r0, r6
 8028422:	f7ff ffbf 	bl	80283a4 <sbrk_aligned>
 8028426:	1c43      	adds	r3, r0, #1
 8028428:	4604      	mov	r4, r0
 802842a:	d158      	bne.n	80284de <_malloc_r+0xf6>
 802842c:	f8d8 4000 	ldr.w	r4, [r8]
 8028430:	4627      	mov	r7, r4
 8028432:	2f00      	cmp	r7, #0
 8028434:	d143      	bne.n	80284be <_malloc_r+0xd6>
 8028436:	2c00      	cmp	r4, #0
 8028438:	d04b      	beq.n	80284d2 <_malloc_r+0xea>
 802843a:	6823      	ldr	r3, [r4, #0]
 802843c:	4639      	mov	r1, r7
 802843e:	4630      	mov	r0, r6
 8028440:	eb04 0903 	add.w	r9, r4, r3
 8028444:	f001 f9ba 	bl	80297bc <_sbrk_r>
 8028448:	4581      	cmp	r9, r0
 802844a:	d142      	bne.n	80284d2 <_malloc_r+0xea>
 802844c:	6821      	ldr	r1, [r4, #0]
 802844e:	1a6d      	subs	r5, r5, r1
 8028450:	4629      	mov	r1, r5
 8028452:	4630      	mov	r0, r6
 8028454:	f7ff ffa6 	bl	80283a4 <sbrk_aligned>
 8028458:	3001      	adds	r0, #1
 802845a:	d03a      	beq.n	80284d2 <_malloc_r+0xea>
 802845c:	6823      	ldr	r3, [r4, #0]
 802845e:	442b      	add	r3, r5
 8028460:	6023      	str	r3, [r4, #0]
 8028462:	f8d8 3000 	ldr.w	r3, [r8]
 8028466:	685a      	ldr	r2, [r3, #4]
 8028468:	bb62      	cbnz	r2, 80284c4 <_malloc_r+0xdc>
 802846a:	f8c8 7000 	str.w	r7, [r8]
 802846e:	e00f      	b.n	8028490 <_malloc_r+0xa8>
 8028470:	6822      	ldr	r2, [r4, #0]
 8028472:	1b52      	subs	r2, r2, r5
 8028474:	d420      	bmi.n	80284b8 <_malloc_r+0xd0>
 8028476:	2a0b      	cmp	r2, #11
 8028478:	d917      	bls.n	80284aa <_malloc_r+0xc2>
 802847a:	1961      	adds	r1, r4, r5
 802847c:	42a3      	cmp	r3, r4
 802847e:	6025      	str	r5, [r4, #0]
 8028480:	bf18      	it	ne
 8028482:	6059      	strne	r1, [r3, #4]
 8028484:	6863      	ldr	r3, [r4, #4]
 8028486:	bf08      	it	eq
 8028488:	f8c8 1000 	streq.w	r1, [r8]
 802848c:	5162      	str	r2, [r4, r5]
 802848e:	604b      	str	r3, [r1, #4]
 8028490:	4630      	mov	r0, r6
 8028492:	f000 f82f 	bl	80284f4 <__malloc_unlock>
 8028496:	f104 000b 	add.w	r0, r4, #11
 802849a:	1d23      	adds	r3, r4, #4
 802849c:	f020 0007 	bic.w	r0, r0, #7
 80284a0:	1ac2      	subs	r2, r0, r3
 80284a2:	bf1c      	itt	ne
 80284a4:	1a1b      	subne	r3, r3, r0
 80284a6:	50a3      	strne	r3, [r4, r2]
 80284a8:	e7af      	b.n	802840a <_malloc_r+0x22>
 80284aa:	6862      	ldr	r2, [r4, #4]
 80284ac:	42a3      	cmp	r3, r4
 80284ae:	bf0c      	ite	eq
 80284b0:	f8c8 2000 	streq.w	r2, [r8]
 80284b4:	605a      	strne	r2, [r3, #4]
 80284b6:	e7eb      	b.n	8028490 <_malloc_r+0xa8>
 80284b8:	4623      	mov	r3, r4
 80284ba:	6864      	ldr	r4, [r4, #4]
 80284bc:	e7ae      	b.n	802841c <_malloc_r+0x34>
 80284be:	463c      	mov	r4, r7
 80284c0:	687f      	ldr	r7, [r7, #4]
 80284c2:	e7b6      	b.n	8028432 <_malloc_r+0x4a>
 80284c4:	461a      	mov	r2, r3
 80284c6:	685b      	ldr	r3, [r3, #4]
 80284c8:	42a3      	cmp	r3, r4
 80284ca:	d1fb      	bne.n	80284c4 <_malloc_r+0xdc>
 80284cc:	2300      	movs	r3, #0
 80284ce:	6053      	str	r3, [r2, #4]
 80284d0:	e7de      	b.n	8028490 <_malloc_r+0xa8>
 80284d2:	230c      	movs	r3, #12
 80284d4:	6033      	str	r3, [r6, #0]
 80284d6:	4630      	mov	r0, r6
 80284d8:	f000 f80c 	bl	80284f4 <__malloc_unlock>
 80284dc:	e794      	b.n	8028408 <_malloc_r+0x20>
 80284de:	6005      	str	r5, [r0, #0]
 80284e0:	e7d6      	b.n	8028490 <_malloc_r+0xa8>
 80284e2:	bf00      	nop
 80284e4:	20047230 	.word	0x20047230

080284e8 <__malloc_lock>:
 80284e8:	4801      	ldr	r0, [pc, #4]	@ (80284f0 <__malloc_lock+0x8>)
 80284ea:	f001 b9b4 	b.w	8029856 <__retarget_lock_acquire_recursive>
 80284ee:	bf00      	nop
 80284f0:	20047375 	.word	0x20047375

080284f4 <__malloc_unlock>:
 80284f4:	4801      	ldr	r0, [pc, #4]	@ (80284fc <__malloc_unlock+0x8>)
 80284f6:	f001 b9af 	b.w	8029858 <__retarget_lock_release_recursive>
 80284fa:	bf00      	nop
 80284fc:	20047375 	.word	0x20047375

08028500 <srand>:
 8028500:	b538      	push	{r3, r4, r5, lr}
 8028502:	4b10      	ldr	r3, [pc, #64]	@ (8028544 <srand+0x44>)
 8028504:	681d      	ldr	r5, [r3, #0]
 8028506:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8028508:	4604      	mov	r4, r0
 802850a:	b9b3      	cbnz	r3, 802853a <srand+0x3a>
 802850c:	2018      	movs	r0, #24
 802850e:	f7ff ff39 	bl	8028384 <malloc>
 8028512:	4602      	mov	r2, r0
 8028514:	6328      	str	r0, [r5, #48]	@ 0x30
 8028516:	b920      	cbnz	r0, 8028522 <srand+0x22>
 8028518:	4b0b      	ldr	r3, [pc, #44]	@ (8028548 <srand+0x48>)
 802851a:	480c      	ldr	r0, [pc, #48]	@ (802854c <srand+0x4c>)
 802851c:	2146      	movs	r1, #70	@ 0x46
 802851e:	f001 f9b3 	bl	8029888 <__assert_func>
 8028522:	490b      	ldr	r1, [pc, #44]	@ (8028550 <srand+0x50>)
 8028524:	4b0b      	ldr	r3, [pc, #44]	@ (8028554 <srand+0x54>)
 8028526:	e9c0 1300 	strd	r1, r3, [r0]
 802852a:	4b0b      	ldr	r3, [pc, #44]	@ (8028558 <srand+0x58>)
 802852c:	6083      	str	r3, [r0, #8]
 802852e:	230b      	movs	r3, #11
 8028530:	8183      	strh	r3, [r0, #12]
 8028532:	2100      	movs	r1, #0
 8028534:	2001      	movs	r0, #1
 8028536:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802853a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802853c:	2200      	movs	r2, #0
 802853e:	611c      	str	r4, [r3, #16]
 8028540:	615a      	str	r2, [r3, #20]
 8028542:	bd38      	pop	{r3, r4, r5, pc}
 8028544:	200002b4 	.word	0x200002b4
 8028548:	0803015e 	.word	0x0803015e
 802854c:	08030175 	.word	0x08030175
 8028550:	abcd330e 	.word	0xabcd330e
 8028554:	e66d1234 	.word	0xe66d1234
 8028558:	0005deec 	.word	0x0005deec

0802855c <rand>:
 802855c:	4b16      	ldr	r3, [pc, #88]	@ (80285b8 <rand+0x5c>)
 802855e:	b510      	push	{r4, lr}
 8028560:	681c      	ldr	r4, [r3, #0]
 8028562:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8028564:	b9b3      	cbnz	r3, 8028594 <rand+0x38>
 8028566:	2018      	movs	r0, #24
 8028568:	f7ff ff0c 	bl	8028384 <malloc>
 802856c:	4602      	mov	r2, r0
 802856e:	6320      	str	r0, [r4, #48]	@ 0x30
 8028570:	b920      	cbnz	r0, 802857c <rand+0x20>
 8028572:	4b12      	ldr	r3, [pc, #72]	@ (80285bc <rand+0x60>)
 8028574:	4812      	ldr	r0, [pc, #72]	@ (80285c0 <rand+0x64>)
 8028576:	2152      	movs	r1, #82	@ 0x52
 8028578:	f001 f986 	bl	8029888 <__assert_func>
 802857c:	4911      	ldr	r1, [pc, #68]	@ (80285c4 <rand+0x68>)
 802857e:	4b12      	ldr	r3, [pc, #72]	@ (80285c8 <rand+0x6c>)
 8028580:	e9c0 1300 	strd	r1, r3, [r0]
 8028584:	4b11      	ldr	r3, [pc, #68]	@ (80285cc <rand+0x70>)
 8028586:	6083      	str	r3, [r0, #8]
 8028588:	230b      	movs	r3, #11
 802858a:	8183      	strh	r3, [r0, #12]
 802858c:	2100      	movs	r1, #0
 802858e:	2001      	movs	r0, #1
 8028590:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8028594:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8028596:	480e      	ldr	r0, [pc, #56]	@ (80285d0 <rand+0x74>)
 8028598:	690b      	ldr	r3, [r1, #16]
 802859a:	694c      	ldr	r4, [r1, #20]
 802859c:	4a0d      	ldr	r2, [pc, #52]	@ (80285d4 <rand+0x78>)
 802859e:	4358      	muls	r0, r3
 80285a0:	fb02 0004 	mla	r0, r2, r4, r0
 80285a4:	fba3 3202 	umull	r3, r2, r3, r2
 80285a8:	3301      	adds	r3, #1
 80285aa:	eb40 0002 	adc.w	r0, r0, r2
 80285ae:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80285b2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80285b6:	bd10      	pop	{r4, pc}
 80285b8:	200002b4 	.word	0x200002b4
 80285bc:	0803015e 	.word	0x0803015e
 80285c0:	08030175 	.word	0x08030175
 80285c4:	abcd330e 	.word	0xabcd330e
 80285c8:	e66d1234 	.word	0xe66d1234
 80285cc:	0005deec 	.word	0x0005deec
 80285d0:	5851f42d 	.word	0x5851f42d
 80285d4:	4c957f2d 	.word	0x4c957f2d

080285d8 <realloc>:
 80285d8:	4b02      	ldr	r3, [pc, #8]	@ (80285e4 <realloc+0xc>)
 80285da:	460a      	mov	r2, r1
 80285dc:	4601      	mov	r1, r0
 80285de:	6818      	ldr	r0, [r3, #0]
 80285e0:	f000 b802 	b.w	80285e8 <_realloc_r>
 80285e4:	200002b4 	.word	0x200002b4

080285e8 <_realloc_r>:
 80285e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80285ec:	4680      	mov	r8, r0
 80285ee:	4615      	mov	r5, r2
 80285f0:	460c      	mov	r4, r1
 80285f2:	b921      	cbnz	r1, 80285fe <_realloc_r+0x16>
 80285f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80285f8:	4611      	mov	r1, r2
 80285fa:	f7ff bef5 	b.w	80283e8 <_malloc_r>
 80285fe:	b92a      	cbnz	r2, 802860c <_realloc_r+0x24>
 8028600:	f001 ffba 	bl	802a578 <_free_r>
 8028604:	2400      	movs	r4, #0
 8028606:	4620      	mov	r0, r4
 8028608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802860c:	f002 fb80 	bl	802ad10 <_malloc_usable_size_r>
 8028610:	4285      	cmp	r5, r0
 8028612:	4606      	mov	r6, r0
 8028614:	d802      	bhi.n	802861c <_realloc_r+0x34>
 8028616:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802861a:	d8f4      	bhi.n	8028606 <_realloc_r+0x1e>
 802861c:	4629      	mov	r1, r5
 802861e:	4640      	mov	r0, r8
 8028620:	f7ff fee2 	bl	80283e8 <_malloc_r>
 8028624:	4607      	mov	r7, r0
 8028626:	2800      	cmp	r0, #0
 8028628:	d0ec      	beq.n	8028604 <_realloc_r+0x1c>
 802862a:	42b5      	cmp	r5, r6
 802862c:	462a      	mov	r2, r5
 802862e:	4621      	mov	r1, r4
 8028630:	bf28      	it	cs
 8028632:	4632      	movcs	r2, r6
 8028634:	f001 f919 	bl	802986a <memcpy>
 8028638:	4621      	mov	r1, r4
 802863a:	4640      	mov	r0, r8
 802863c:	f001 ff9c 	bl	802a578 <_free_r>
 8028640:	463c      	mov	r4, r7
 8028642:	e7e0      	b.n	8028606 <_realloc_r+0x1e>

08028644 <_strtol_l.constprop.0>:
 8028644:	2b24      	cmp	r3, #36	@ 0x24
 8028646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802864a:	4686      	mov	lr, r0
 802864c:	4690      	mov	r8, r2
 802864e:	d801      	bhi.n	8028654 <_strtol_l.constprop.0+0x10>
 8028650:	2b01      	cmp	r3, #1
 8028652:	d106      	bne.n	8028662 <_strtol_l.constprop.0+0x1e>
 8028654:	f001 f8d4 	bl	8029800 <__errno>
 8028658:	2316      	movs	r3, #22
 802865a:	6003      	str	r3, [r0, #0]
 802865c:	2000      	movs	r0, #0
 802865e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028662:	4834      	ldr	r0, [pc, #208]	@ (8028734 <_strtol_l.constprop.0+0xf0>)
 8028664:	460d      	mov	r5, r1
 8028666:	462a      	mov	r2, r5
 8028668:	f815 4b01 	ldrb.w	r4, [r5], #1
 802866c:	5d06      	ldrb	r6, [r0, r4]
 802866e:	f016 0608 	ands.w	r6, r6, #8
 8028672:	d1f8      	bne.n	8028666 <_strtol_l.constprop.0+0x22>
 8028674:	2c2d      	cmp	r4, #45	@ 0x2d
 8028676:	d12d      	bne.n	80286d4 <_strtol_l.constprop.0+0x90>
 8028678:	782c      	ldrb	r4, [r5, #0]
 802867a:	2601      	movs	r6, #1
 802867c:	1c95      	adds	r5, r2, #2
 802867e:	f033 0210 	bics.w	r2, r3, #16
 8028682:	d109      	bne.n	8028698 <_strtol_l.constprop.0+0x54>
 8028684:	2c30      	cmp	r4, #48	@ 0x30
 8028686:	d12a      	bne.n	80286de <_strtol_l.constprop.0+0x9a>
 8028688:	782a      	ldrb	r2, [r5, #0]
 802868a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802868e:	2a58      	cmp	r2, #88	@ 0x58
 8028690:	d125      	bne.n	80286de <_strtol_l.constprop.0+0x9a>
 8028692:	786c      	ldrb	r4, [r5, #1]
 8028694:	2310      	movs	r3, #16
 8028696:	3502      	adds	r5, #2
 8028698:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802869c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80286a0:	2200      	movs	r2, #0
 80286a2:	fbbc f9f3 	udiv	r9, ip, r3
 80286a6:	4610      	mov	r0, r2
 80286a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80286ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80286b0:	2f09      	cmp	r7, #9
 80286b2:	d81b      	bhi.n	80286ec <_strtol_l.constprop.0+0xa8>
 80286b4:	463c      	mov	r4, r7
 80286b6:	42a3      	cmp	r3, r4
 80286b8:	dd27      	ble.n	802870a <_strtol_l.constprop.0+0xc6>
 80286ba:	1c57      	adds	r7, r2, #1
 80286bc:	d007      	beq.n	80286ce <_strtol_l.constprop.0+0x8a>
 80286be:	4581      	cmp	r9, r0
 80286c0:	d320      	bcc.n	8028704 <_strtol_l.constprop.0+0xc0>
 80286c2:	d101      	bne.n	80286c8 <_strtol_l.constprop.0+0x84>
 80286c4:	45a2      	cmp	sl, r4
 80286c6:	db1d      	blt.n	8028704 <_strtol_l.constprop.0+0xc0>
 80286c8:	fb00 4003 	mla	r0, r0, r3, r4
 80286cc:	2201      	movs	r2, #1
 80286ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80286d2:	e7eb      	b.n	80286ac <_strtol_l.constprop.0+0x68>
 80286d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80286d6:	bf04      	itt	eq
 80286d8:	782c      	ldrbeq	r4, [r5, #0]
 80286da:	1c95      	addeq	r5, r2, #2
 80286dc:	e7cf      	b.n	802867e <_strtol_l.constprop.0+0x3a>
 80286de:	2b00      	cmp	r3, #0
 80286e0:	d1da      	bne.n	8028698 <_strtol_l.constprop.0+0x54>
 80286e2:	2c30      	cmp	r4, #48	@ 0x30
 80286e4:	bf0c      	ite	eq
 80286e6:	2308      	moveq	r3, #8
 80286e8:	230a      	movne	r3, #10
 80286ea:	e7d5      	b.n	8028698 <_strtol_l.constprop.0+0x54>
 80286ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80286f0:	2f19      	cmp	r7, #25
 80286f2:	d801      	bhi.n	80286f8 <_strtol_l.constprop.0+0xb4>
 80286f4:	3c37      	subs	r4, #55	@ 0x37
 80286f6:	e7de      	b.n	80286b6 <_strtol_l.constprop.0+0x72>
 80286f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80286fc:	2f19      	cmp	r7, #25
 80286fe:	d804      	bhi.n	802870a <_strtol_l.constprop.0+0xc6>
 8028700:	3c57      	subs	r4, #87	@ 0x57
 8028702:	e7d8      	b.n	80286b6 <_strtol_l.constprop.0+0x72>
 8028704:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8028708:	e7e1      	b.n	80286ce <_strtol_l.constprop.0+0x8a>
 802870a:	1c53      	adds	r3, r2, #1
 802870c:	d108      	bne.n	8028720 <_strtol_l.constprop.0+0xdc>
 802870e:	2322      	movs	r3, #34	@ 0x22
 8028710:	f8ce 3000 	str.w	r3, [lr]
 8028714:	4660      	mov	r0, ip
 8028716:	f1b8 0f00 	cmp.w	r8, #0
 802871a:	d0a0      	beq.n	802865e <_strtol_l.constprop.0+0x1a>
 802871c:	1e69      	subs	r1, r5, #1
 802871e:	e006      	b.n	802872e <_strtol_l.constprop.0+0xea>
 8028720:	b106      	cbz	r6, 8028724 <_strtol_l.constprop.0+0xe0>
 8028722:	4240      	negs	r0, r0
 8028724:	f1b8 0f00 	cmp.w	r8, #0
 8028728:	d099      	beq.n	802865e <_strtol_l.constprop.0+0x1a>
 802872a:	2a00      	cmp	r2, #0
 802872c:	d1f6      	bne.n	802871c <_strtol_l.constprop.0+0xd8>
 802872e:	f8c8 1000 	str.w	r1, [r8]
 8028732:	e794      	b.n	802865e <_strtol_l.constprop.0+0x1a>
 8028734:	080301ce 	.word	0x080301ce

08028738 <strtol>:
 8028738:	4613      	mov	r3, r2
 802873a:	460a      	mov	r2, r1
 802873c:	4601      	mov	r1, r0
 802873e:	4802      	ldr	r0, [pc, #8]	@ (8028748 <strtol+0x10>)
 8028740:	6800      	ldr	r0, [r0, #0]
 8028742:	f7ff bf7f 	b.w	8028644 <_strtol_l.constprop.0>
 8028746:	bf00      	nop
 8028748:	200002b4 	.word	0x200002b4

0802874c <_strtoul_l.constprop.0>:
 802874c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028750:	4e34      	ldr	r6, [pc, #208]	@ (8028824 <_strtoul_l.constprop.0+0xd8>)
 8028752:	4686      	mov	lr, r0
 8028754:	460d      	mov	r5, r1
 8028756:	4628      	mov	r0, r5
 8028758:	f815 4b01 	ldrb.w	r4, [r5], #1
 802875c:	5d37      	ldrb	r7, [r6, r4]
 802875e:	f017 0708 	ands.w	r7, r7, #8
 8028762:	d1f8      	bne.n	8028756 <_strtoul_l.constprop.0+0xa>
 8028764:	2c2d      	cmp	r4, #45	@ 0x2d
 8028766:	d12f      	bne.n	80287c8 <_strtoul_l.constprop.0+0x7c>
 8028768:	782c      	ldrb	r4, [r5, #0]
 802876a:	2701      	movs	r7, #1
 802876c:	1c85      	adds	r5, r0, #2
 802876e:	f033 0010 	bics.w	r0, r3, #16
 8028772:	d109      	bne.n	8028788 <_strtoul_l.constprop.0+0x3c>
 8028774:	2c30      	cmp	r4, #48	@ 0x30
 8028776:	d12c      	bne.n	80287d2 <_strtoul_l.constprop.0+0x86>
 8028778:	7828      	ldrb	r0, [r5, #0]
 802877a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 802877e:	2858      	cmp	r0, #88	@ 0x58
 8028780:	d127      	bne.n	80287d2 <_strtoul_l.constprop.0+0x86>
 8028782:	786c      	ldrb	r4, [r5, #1]
 8028784:	2310      	movs	r3, #16
 8028786:	3502      	adds	r5, #2
 8028788:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 802878c:	2600      	movs	r6, #0
 802878e:	fbb8 f8f3 	udiv	r8, r8, r3
 8028792:	fb03 f908 	mul.w	r9, r3, r8
 8028796:	ea6f 0909 	mvn.w	r9, r9
 802879a:	4630      	mov	r0, r6
 802879c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80287a0:	f1bc 0f09 	cmp.w	ip, #9
 80287a4:	d81c      	bhi.n	80287e0 <_strtoul_l.constprop.0+0x94>
 80287a6:	4664      	mov	r4, ip
 80287a8:	42a3      	cmp	r3, r4
 80287aa:	dd2a      	ble.n	8028802 <_strtoul_l.constprop.0+0xb6>
 80287ac:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80287b0:	d007      	beq.n	80287c2 <_strtoul_l.constprop.0+0x76>
 80287b2:	4580      	cmp	r8, r0
 80287b4:	d322      	bcc.n	80287fc <_strtoul_l.constprop.0+0xb0>
 80287b6:	d101      	bne.n	80287bc <_strtoul_l.constprop.0+0x70>
 80287b8:	45a1      	cmp	r9, r4
 80287ba:	db1f      	blt.n	80287fc <_strtoul_l.constprop.0+0xb0>
 80287bc:	fb00 4003 	mla	r0, r0, r3, r4
 80287c0:	2601      	movs	r6, #1
 80287c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80287c6:	e7e9      	b.n	802879c <_strtoul_l.constprop.0+0x50>
 80287c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80287ca:	bf04      	itt	eq
 80287cc:	782c      	ldrbeq	r4, [r5, #0]
 80287ce:	1c85      	addeq	r5, r0, #2
 80287d0:	e7cd      	b.n	802876e <_strtoul_l.constprop.0+0x22>
 80287d2:	2b00      	cmp	r3, #0
 80287d4:	d1d8      	bne.n	8028788 <_strtoul_l.constprop.0+0x3c>
 80287d6:	2c30      	cmp	r4, #48	@ 0x30
 80287d8:	bf0c      	ite	eq
 80287da:	2308      	moveq	r3, #8
 80287dc:	230a      	movne	r3, #10
 80287de:	e7d3      	b.n	8028788 <_strtoul_l.constprop.0+0x3c>
 80287e0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80287e4:	f1bc 0f19 	cmp.w	ip, #25
 80287e8:	d801      	bhi.n	80287ee <_strtoul_l.constprop.0+0xa2>
 80287ea:	3c37      	subs	r4, #55	@ 0x37
 80287ec:	e7dc      	b.n	80287a8 <_strtoul_l.constprop.0+0x5c>
 80287ee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80287f2:	f1bc 0f19 	cmp.w	ip, #25
 80287f6:	d804      	bhi.n	8028802 <_strtoul_l.constprop.0+0xb6>
 80287f8:	3c57      	subs	r4, #87	@ 0x57
 80287fa:	e7d5      	b.n	80287a8 <_strtoul_l.constprop.0+0x5c>
 80287fc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8028800:	e7df      	b.n	80287c2 <_strtoul_l.constprop.0+0x76>
 8028802:	1c73      	adds	r3, r6, #1
 8028804:	d106      	bne.n	8028814 <_strtoul_l.constprop.0+0xc8>
 8028806:	2322      	movs	r3, #34	@ 0x22
 8028808:	f8ce 3000 	str.w	r3, [lr]
 802880c:	4630      	mov	r0, r6
 802880e:	b932      	cbnz	r2, 802881e <_strtoul_l.constprop.0+0xd2>
 8028810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028814:	b107      	cbz	r7, 8028818 <_strtoul_l.constprop.0+0xcc>
 8028816:	4240      	negs	r0, r0
 8028818:	2a00      	cmp	r2, #0
 802881a:	d0f9      	beq.n	8028810 <_strtoul_l.constprop.0+0xc4>
 802881c:	b106      	cbz	r6, 8028820 <_strtoul_l.constprop.0+0xd4>
 802881e:	1e69      	subs	r1, r5, #1
 8028820:	6011      	str	r1, [r2, #0]
 8028822:	e7f5      	b.n	8028810 <_strtoul_l.constprop.0+0xc4>
 8028824:	080301ce 	.word	0x080301ce

08028828 <strtoul>:
 8028828:	4613      	mov	r3, r2
 802882a:	460a      	mov	r2, r1
 802882c:	4601      	mov	r1, r0
 802882e:	4802      	ldr	r0, [pc, #8]	@ (8028838 <strtoul+0x10>)
 8028830:	6800      	ldr	r0, [r0, #0]
 8028832:	f7ff bf8b 	b.w	802874c <_strtoul_l.constprop.0>
 8028836:	bf00      	nop
 8028838:	200002b4 	.word	0x200002b4

0802883c <__cvt>:
 802883c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028840:	ec57 6b10 	vmov	r6, r7, d0
 8028844:	2f00      	cmp	r7, #0
 8028846:	460c      	mov	r4, r1
 8028848:	4619      	mov	r1, r3
 802884a:	463b      	mov	r3, r7
 802884c:	bfbb      	ittet	lt
 802884e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8028852:	461f      	movlt	r7, r3
 8028854:	2300      	movge	r3, #0
 8028856:	232d      	movlt	r3, #45	@ 0x2d
 8028858:	700b      	strb	r3, [r1, #0]
 802885a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802885c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8028860:	4691      	mov	r9, r2
 8028862:	f023 0820 	bic.w	r8, r3, #32
 8028866:	bfbc      	itt	lt
 8028868:	4632      	movlt	r2, r6
 802886a:	4616      	movlt	r6, r2
 802886c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8028870:	d005      	beq.n	802887e <__cvt+0x42>
 8028872:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8028876:	d100      	bne.n	802887a <__cvt+0x3e>
 8028878:	3401      	adds	r4, #1
 802887a:	2102      	movs	r1, #2
 802887c:	e000      	b.n	8028880 <__cvt+0x44>
 802887e:	2103      	movs	r1, #3
 8028880:	ab03      	add	r3, sp, #12
 8028882:	9301      	str	r3, [sp, #4]
 8028884:	ab02      	add	r3, sp, #8
 8028886:	9300      	str	r3, [sp, #0]
 8028888:	ec47 6b10 	vmov	d0, r6, r7
 802888c:	4653      	mov	r3, sl
 802888e:	4622      	mov	r2, r4
 8028890:	f001 f8a2 	bl	80299d8 <_dtoa_r>
 8028894:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8028898:	4605      	mov	r5, r0
 802889a:	d119      	bne.n	80288d0 <__cvt+0x94>
 802889c:	f019 0f01 	tst.w	r9, #1
 80288a0:	d00e      	beq.n	80288c0 <__cvt+0x84>
 80288a2:	eb00 0904 	add.w	r9, r0, r4
 80288a6:	2200      	movs	r2, #0
 80288a8:	2300      	movs	r3, #0
 80288aa:	4630      	mov	r0, r6
 80288ac:	4639      	mov	r1, r7
 80288ae:	f7d8 f93b 	bl	8000b28 <__aeabi_dcmpeq>
 80288b2:	b108      	cbz	r0, 80288b8 <__cvt+0x7c>
 80288b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80288b8:	2230      	movs	r2, #48	@ 0x30
 80288ba:	9b03      	ldr	r3, [sp, #12]
 80288bc:	454b      	cmp	r3, r9
 80288be:	d31e      	bcc.n	80288fe <__cvt+0xc2>
 80288c0:	9b03      	ldr	r3, [sp, #12]
 80288c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80288c4:	1b5b      	subs	r3, r3, r5
 80288c6:	4628      	mov	r0, r5
 80288c8:	6013      	str	r3, [r2, #0]
 80288ca:	b004      	add	sp, #16
 80288cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80288d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80288d4:	eb00 0904 	add.w	r9, r0, r4
 80288d8:	d1e5      	bne.n	80288a6 <__cvt+0x6a>
 80288da:	7803      	ldrb	r3, [r0, #0]
 80288dc:	2b30      	cmp	r3, #48	@ 0x30
 80288de:	d10a      	bne.n	80288f6 <__cvt+0xba>
 80288e0:	2200      	movs	r2, #0
 80288e2:	2300      	movs	r3, #0
 80288e4:	4630      	mov	r0, r6
 80288e6:	4639      	mov	r1, r7
 80288e8:	f7d8 f91e 	bl	8000b28 <__aeabi_dcmpeq>
 80288ec:	b918      	cbnz	r0, 80288f6 <__cvt+0xba>
 80288ee:	f1c4 0401 	rsb	r4, r4, #1
 80288f2:	f8ca 4000 	str.w	r4, [sl]
 80288f6:	f8da 3000 	ldr.w	r3, [sl]
 80288fa:	4499      	add	r9, r3
 80288fc:	e7d3      	b.n	80288a6 <__cvt+0x6a>
 80288fe:	1c59      	adds	r1, r3, #1
 8028900:	9103      	str	r1, [sp, #12]
 8028902:	701a      	strb	r2, [r3, #0]
 8028904:	e7d9      	b.n	80288ba <__cvt+0x7e>

08028906 <__exponent>:
 8028906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028908:	2900      	cmp	r1, #0
 802890a:	bfba      	itte	lt
 802890c:	4249      	neglt	r1, r1
 802890e:	232d      	movlt	r3, #45	@ 0x2d
 8028910:	232b      	movge	r3, #43	@ 0x2b
 8028912:	2909      	cmp	r1, #9
 8028914:	7002      	strb	r2, [r0, #0]
 8028916:	7043      	strb	r3, [r0, #1]
 8028918:	dd29      	ble.n	802896e <__exponent+0x68>
 802891a:	f10d 0307 	add.w	r3, sp, #7
 802891e:	461d      	mov	r5, r3
 8028920:	270a      	movs	r7, #10
 8028922:	461a      	mov	r2, r3
 8028924:	fbb1 f6f7 	udiv	r6, r1, r7
 8028928:	fb07 1416 	mls	r4, r7, r6, r1
 802892c:	3430      	adds	r4, #48	@ 0x30
 802892e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8028932:	460c      	mov	r4, r1
 8028934:	2c63      	cmp	r4, #99	@ 0x63
 8028936:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802893a:	4631      	mov	r1, r6
 802893c:	dcf1      	bgt.n	8028922 <__exponent+0x1c>
 802893e:	3130      	adds	r1, #48	@ 0x30
 8028940:	1e94      	subs	r4, r2, #2
 8028942:	f803 1c01 	strb.w	r1, [r3, #-1]
 8028946:	1c41      	adds	r1, r0, #1
 8028948:	4623      	mov	r3, r4
 802894a:	42ab      	cmp	r3, r5
 802894c:	d30a      	bcc.n	8028964 <__exponent+0x5e>
 802894e:	f10d 0309 	add.w	r3, sp, #9
 8028952:	1a9b      	subs	r3, r3, r2
 8028954:	42ac      	cmp	r4, r5
 8028956:	bf88      	it	hi
 8028958:	2300      	movhi	r3, #0
 802895a:	3302      	adds	r3, #2
 802895c:	4403      	add	r3, r0
 802895e:	1a18      	subs	r0, r3, r0
 8028960:	b003      	add	sp, #12
 8028962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028964:	f813 6b01 	ldrb.w	r6, [r3], #1
 8028968:	f801 6f01 	strb.w	r6, [r1, #1]!
 802896c:	e7ed      	b.n	802894a <__exponent+0x44>
 802896e:	2330      	movs	r3, #48	@ 0x30
 8028970:	3130      	adds	r1, #48	@ 0x30
 8028972:	7083      	strb	r3, [r0, #2]
 8028974:	70c1      	strb	r1, [r0, #3]
 8028976:	1d03      	adds	r3, r0, #4
 8028978:	e7f1      	b.n	802895e <__exponent+0x58>
	...

0802897c <_printf_float>:
 802897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028980:	b08d      	sub	sp, #52	@ 0x34
 8028982:	460c      	mov	r4, r1
 8028984:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8028988:	4616      	mov	r6, r2
 802898a:	461f      	mov	r7, r3
 802898c:	4605      	mov	r5, r0
 802898e:	f000 fe87 	bl	80296a0 <_localeconv_r>
 8028992:	6803      	ldr	r3, [r0, #0]
 8028994:	9304      	str	r3, [sp, #16]
 8028996:	4618      	mov	r0, r3
 8028998:	f7d7 fc9a 	bl	80002d0 <strlen>
 802899c:	2300      	movs	r3, #0
 802899e:	930a      	str	r3, [sp, #40]	@ 0x28
 80289a0:	f8d8 3000 	ldr.w	r3, [r8]
 80289a4:	9005      	str	r0, [sp, #20]
 80289a6:	3307      	adds	r3, #7
 80289a8:	f023 0307 	bic.w	r3, r3, #7
 80289ac:	f103 0208 	add.w	r2, r3, #8
 80289b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80289b4:	f8d4 b000 	ldr.w	fp, [r4]
 80289b8:	f8c8 2000 	str.w	r2, [r8]
 80289bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80289c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80289c4:	9307      	str	r3, [sp, #28]
 80289c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80289ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80289ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80289d2:	4b9c      	ldr	r3, [pc, #624]	@ (8028c44 <_printf_float+0x2c8>)
 80289d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80289d8:	f7d8 f8d8 	bl	8000b8c <__aeabi_dcmpun>
 80289dc:	bb70      	cbnz	r0, 8028a3c <_printf_float+0xc0>
 80289de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80289e2:	4b98      	ldr	r3, [pc, #608]	@ (8028c44 <_printf_float+0x2c8>)
 80289e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80289e8:	f7d8 f8b2 	bl	8000b50 <__aeabi_dcmple>
 80289ec:	bb30      	cbnz	r0, 8028a3c <_printf_float+0xc0>
 80289ee:	2200      	movs	r2, #0
 80289f0:	2300      	movs	r3, #0
 80289f2:	4640      	mov	r0, r8
 80289f4:	4649      	mov	r1, r9
 80289f6:	f7d8 f8a1 	bl	8000b3c <__aeabi_dcmplt>
 80289fa:	b110      	cbz	r0, 8028a02 <_printf_float+0x86>
 80289fc:	232d      	movs	r3, #45	@ 0x2d
 80289fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028a02:	4a91      	ldr	r2, [pc, #580]	@ (8028c48 <_printf_float+0x2cc>)
 8028a04:	4b91      	ldr	r3, [pc, #580]	@ (8028c4c <_printf_float+0x2d0>)
 8028a06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8028a0a:	bf94      	ite	ls
 8028a0c:	4690      	movls	r8, r2
 8028a0e:	4698      	movhi	r8, r3
 8028a10:	2303      	movs	r3, #3
 8028a12:	6123      	str	r3, [r4, #16]
 8028a14:	f02b 0304 	bic.w	r3, fp, #4
 8028a18:	6023      	str	r3, [r4, #0]
 8028a1a:	f04f 0900 	mov.w	r9, #0
 8028a1e:	9700      	str	r7, [sp, #0]
 8028a20:	4633      	mov	r3, r6
 8028a22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8028a24:	4621      	mov	r1, r4
 8028a26:	4628      	mov	r0, r5
 8028a28:	f000 f9d2 	bl	8028dd0 <_printf_common>
 8028a2c:	3001      	adds	r0, #1
 8028a2e:	f040 808d 	bne.w	8028b4c <_printf_float+0x1d0>
 8028a32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028a36:	b00d      	add	sp, #52	@ 0x34
 8028a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a3c:	4642      	mov	r2, r8
 8028a3e:	464b      	mov	r3, r9
 8028a40:	4640      	mov	r0, r8
 8028a42:	4649      	mov	r1, r9
 8028a44:	f7d8 f8a2 	bl	8000b8c <__aeabi_dcmpun>
 8028a48:	b140      	cbz	r0, 8028a5c <_printf_float+0xe0>
 8028a4a:	464b      	mov	r3, r9
 8028a4c:	2b00      	cmp	r3, #0
 8028a4e:	bfbc      	itt	lt
 8028a50:	232d      	movlt	r3, #45	@ 0x2d
 8028a52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8028a56:	4a7e      	ldr	r2, [pc, #504]	@ (8028c50 <_printf_float+0x2d4>)
 8028a58:	4b7e      	ldr	r3, [pc, #504]	@ (8028c54 <_printf_float+0x2d8>)
 8028a5a:	e7d4      	b.n	8028a06 <_printf_float+0x8a>
 8028a5c:	6863      	ldr	r3, [r4, #4]
 8028a5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8028a62:	9206      	str	r2, [sp, #24]
 8028a64:	1c5a      	adds	r2, r3, #1
 8028a66:	d13b      	bne.n	8028ae0 <_printf_float+0x164>
 8028a68:	2306      	movs	r3, #6
 8028a6a:	6063      	str	r3, [r4, #4]
 8028a6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8028a70:	2300      	movs	r3, #0
 8028a72:	6022      	str	r2, [r4, #0]
 8028a74:	9303      	str	r3, [sp, #12]
 8028a76:	ab0a      	add	r3, sp, #40	@ 0x28
 8028a78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8028a7c:	ab09      	add	r3, sp, #36	@ 0x24
 8028a7e:	9300      	str	r3, [sp, #0]
 8028a80:	6861      	ldr	r1, [r4, #4]
 8028a82:	ec49 8b10 	vmov	d0, r8, r9
 8028a86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8028a8a:	4628      	mov	r0, r5
 8028a8c:	f7ff fed6 	bl	802883c <__cvt>
 8028a90:	9b06      	ldr	r3, [sp, #24]
 8028a92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028a94:	2b47      	cmp	r3, #71	@ 0x47
 8028a96:	4680      	mov	r8, r0
 8028a98:	d129      	bne.n	8028aee <_printf_float+0x172>
 8028a9a:	1cc8      	adds	r0, r1, #3
 8028a9c:	db02      	blt.n	8028aa4 <_printf_float+0x128>
 8028a9e:	6863      	ldr	r3, [r4, #4]
 8028aa0:	4299      	cmp	r1, r3
 8028aa2:	dd41      	ble.n	8028b28 <_printf_float+0x1ac>
 8028aa4:	f1aa 0a02 	sub.w	sl, sl, #2
 8028aa8:	fa5f fa8a 	uxtb.w	sl, sl
 8028aac:	3901      	subs	r1, #1
 8028aae:	4652      	mov	r2, sl
 8028ab0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8028ab4:	9109      	str	r1, [sp, #36]	@ 0x24
 8028ab6:	f7ff ff26 	bl	8028906 <__exponent>
 8028aba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028abc:	1813      	adds	r3, r2, r0
 8028abe:	2a01      	cmp	r2, #1
 8028ac0:	4681      	mov	r9, r0
 8028ac2:	6123      	str	r3, [r4, #16]
 8028ac4:	dc02      	bgt.n	8028acc <_printf_float+0x150>
 8028ac6:	6822      	ldr	r2, [r4, #0]
 8028ac8:	07d2      	lsls	r2, r2, #31
 8028aca:	d501      	bpl.n	8028ad0 <_printf_float+0x154>
 8028acc:	3301      	adds	r3, #1
 8028ace:	6123      	str	r3, [r4, #16]
 8028ad0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8028ad4:	2b00      	cmp	r3, #0
 8028ad6:	d0a2      	beq.n	8028a1e <_printf_float+0xa2>
 8028ad8:	232d      	movs	r3, #45	@ 0x2d
 8028ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028ade:	e79e      	b.n	8028a1e <_printf_float+0xa2>
 8028ae0:	9a06      	ldr	r2, [sp, #24]
 8028ae2:	2a47      	cmp	r2, #71	@ 0x47
 8028ae4:	d1c2      	bne.n	8028a6c <_printf_float+0xf0>
 8028ae6:	2b00      	cmp	r3, #0
 8028ae8:	d1c0      	bne.n	8028a6c <_printf_float+0xf0>
 8028aea:	2301      	movs	r3, #1
 8028aec:	e7bd      	b.n	8028a6a <_printf_float+0xee>
 8028aee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8028af2:	d9db      	bls.n	8028aac <_printf_float+0x130>
 8028af4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8028af8:	d118      	bne.n	8028b2c <_printf_float+0x1b0>
 8028afa:	2900      	cmp	r1, #0
 8028afc:	6863      	ldr	r3, [r4, #4]
 8028afe:	dd0b      	ble.n	8028b18 <_printf_float+0x19c>
 8028b00:	6121      	str	r1, [r4, #16]
 8028b02:	b913      	cbnz	r3, 8028b0a <_printf_float+0x18e>
 8028b04:	6822      	ldr	r2, [r4, #0]
 8028b06:	07d0      	lsls	r0, r2, #31
 8028b08:	d502      	bpl.n	8028b10 <_printf_float+0x194>
 8028b0a:	3301      	adds	r3, #1
 8028b0c:	440b      	add	r3, r1
 8028b0e:	6123      	str	r3, [r4, #16]
 8028b10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8028b12:	f04f 0900 	mov.w	r9, #0
 8028b16:	e7db      	b.n	8028ad0 <_printf_float+0x154>
 8028b18:	b913      	cbnz	r3, 8028b20 <_printf_float+0x1a4>
 8028b1a:	6822      	ldr	r2, [r4, #0]
 8028b1c:	07d2      	lsls	r2, r2, #31
 8028b1e:	d501      	bpl.n	8028b24 <_printf_float+0x1a8>
 8028b20:	3302      	adds	r3, #2
 8028b22:	e7f4      	b.n	8028b0e <_printf_float+0x192>
 8028b24:	2301      	movs	r3, #1
 8028b26:	e7f2      	b.n	8028b0e <_printf_float+0x192>
 8028b28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8028b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028b2e:	4299      	cmp	r1, r3
 8028b30:	db05      	blt.n	8028b3e <_printf_float+0x1c2>
 8028b32:	6823      	ldr	r3, [r4, #0]
 8028b34:	6121      	str	r1, [r4, #16]
 8028b36:	07d8      	lsls	r0, r3, #31
 8028b38:	d5ea      	bpl.n	8028b10 <_printf_float+0x194>
 8028b3a:	1c4b      	adds	r3, r1, #1
 8028b3c:	e7e7      	b.n	8028b0e <_printf_float+0x192>
 8028b3e:	2900      	cmp	r1, #0
 8028b40:	bfd4      	ite	le
 8028b42:	f1c1 0202 	rsble	r2, r1, #2
 8028b46:	2201      	movgt	r2, #1
 8028b48:	4413      	add	r3, r2
 8028b4a:	e7e0      	b.n	8028b0e <_printf_float+0x192>
 8028b4c:	6823      	ldr	r3, [r4, #0]
 8028b4e:	055a      	lsls	r2, r3, #21
 8028b50:	d407      	bmi.n	8028b62 <_printf_float+0x1e6>
 8028b52:	6923      	ldr	r3, [r4, #16]
 8028b54:	4642      	mov	r2, r8
 8028b56:	4631      	mov	r1, r6
 8028b58:	4628      	mov	r0, r5
 8028b5a:	47b8      	blx	r7
 8028b5c:	3001      	adds	r0, #1
 8028b5e:	d12b      	bne.n	8028bb8 <_printf_float+0x23c>
 8028b60:	e767      	b.n	8028a32 <_printf_float+0xb6>
 8028b62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8028b66:	f240 80dd 	bls.w	8028d24 <_printf_float+0x3a8>
 8028b6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8028b6e:	2200      	movs	r2, #0
 8028b70:	2300      	movs	r3, #0
 8028b72:	f7d7 ffd9 	bl	8000b28 <__aeabi_dcmpeq>
 8028b76:	2800      	cmp	r0, #0
 8028b78:	d033      	beq.n	8028be2 <_printf_float+0x266>
 8028b7a:	4a37      	ldr	r2, [pc, #220]	@ (8028c58 <_printf_float+0x2dc>)
 8028b7c:	2301      	movs	r3, #1
 8028b7e:	4631      	mov	r1, r6
 8028b80:	4628      	mov	r0, r5
 8028b82:	47b8      	blx	r7
 8028b84:	3001      	adds	r0, #1
 8028b86:	f43f af54 	beq.w	8028a32 <_printf_float+0xb6>
 8028b8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8028b8e:	4543      	cmp	r3, r8
 8028b90:	db02      	blt.n	8028b98 <_printf_float+0x21c>
 8028b92:	6823      	ldr	r3, [r4, #0]
 8028b94:	07d8      	lsls	r0, r3, #31
 8028b96:	d50f      	bpl.n	8028bb8 <_printf_float+0x23c>
 8028b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028b9c:	4631      	mov	r1, r6
 8028b9e:	4628      	mov	r0, r5
 8028ba0:	47b8      	blx	r7
 8028ba2:	3001      	adds	r0, #1
 8028ba4:	f43f af45 	beq.w	8028a32 <_printf_float+0xb6>
 8028ba8:	f04f 0900 	mov.w	r9, #0
 8028bac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8028bb0:	f104 0a1a 	add.w	sl, r4, #26
 8028bb4:	45c8      	cmp	r8, r9
 8028bb6:	dc09      	bgt.n	8028bcc <_printf_float+0x250>
 8028bb8:	6823      	ldr	r3, [r4, #0]
 8028bba:	079b      	lsls	r3, r3, #30
 8028bbc:	f100 8103 	bmi.w	8028dc6 <_printf_float+0x44a>
 8028bc0:	68e0      	ldr	r0, [r4, #12]
 8028bc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028bc4:	4298      	cmp	r0, r3
 8028bc6:	bfb8      	it	lt
 8028bc8:	4618      	movlt	r0, r3
 8028bca:	e734      	b.n	8028a36 <_printf_float+0xba>
 8028bcc:	2301      	movs	r3, #1
 8028bce:	4652      	mov	r2, sl
 8028bd0:	4631      	mov	r1, r6
 8028bd2:	4628      	mov	r0, r5
 8028bd4:	47b8      	blx	r7
 8028bd6:	3001      	adds	r0, #1
 8028bd8:	f43f af2b 	beq.w	8028a32 <_printf_float+0xb6>
 8028bdc:	f109 0901 	add.w	r9, r9, #1
 8028be0:	e7e8      	b.n	8028bb4 <_printf_float+0x238>
 8028be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028be4:	2b00      	cmp	r3, #0
 8028be6:	dc39      	bgt.n	8028c5c <_printf_float+0x2e0>
 8028be8:	4a1b      	ldr	r2, [pc, #108]	@ (8028c58 <_printf_float+0x2dc>)
 8028bea:	2301      	movs	r3, #1
 8028bec:	4631      	mov	r1, r6
 8028bee:	4628      	mov	r0, r5
 8028bf0:	47b8      	blx	r7
 8028bf2:	3001      	adds	r0, #1
 8028bf4:	f43f af1d 	beq.w	8028a32 <_printf_float+0xb6>
 8028bf8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8028bfc:	ea59 0303 	orrs.w	r3, r9, r3
 8028c00:	d102      	bne.n	8028c08 <_printf_float+0x28c>
 8028c02:	6823      	ldr	r3, [r4, #0]
 8028c04:	07d9      	lsls	r1, r3, #31
 8028c06:	d5d7      	bpl.n	8028bb8 <_printf_float+0x23c>
 8028c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028c0c:	4631      	mov	r1, r6
 8028c0e:	4628      	mov	r0, r5
 8028c10:	47b8      	blx	r7
 8028c12:	3001      	adds	r0, #1
 8028c14:	f43f af0d 	beq.w	8028a32 <_printf_float+0xb6>
 8028c18:	f04f 0a00 	mov.w	sl, #0
 8028c1c:	f104 0b1a 	add.w	fp, r4, #26
 8028c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028c22:	425b      	negs	r3, r3
 8028c24:	4553      	cmp	r3, sl
 8028c26:	dc01      	bgt.n	8028c2c <_printf_float+0x2b0>
 8028c28:	464b      	mov	r3, r9
 8028c2a:	e793      	b.n	8028b54 <_printf_float+0x1d8>
 8028c2c:	2301      	movs	r3, #1
 8028c2e:	465a      	mov	r2, fp
 8028c30:	4631      	mov	r1, r6
 8028c32:	4628      	mov	r0, r5
 8028c34:	47b8      	blx	r7
 8028c36:	3001      	adds	r0, #1
 8028c38:	f43f aefb 	beq.w	8028a32 <_printf_float+0xb6>
 8028c3c:	f10a 0a01 	add.w	sl, sl, #1
 8028c40:	e7ee      	b.n	8028c20 <_printf_float+0x2a4>
 8028c42:	bf00      	nop
 8028c44:	7fefffff 	.word	0x7fefffff
 8028c48:	080302ce 	.word	0x080302ce
 8028c4c:	080302d2 	.word	0x080302d2
 8028c50:	080302d6 	.word	0x080302d6
 8028c54:	080302da 	.word	0x080302da
 8028c58:	080302de 	.word	0x080302de
 8028c5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8028c5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8028c62:	4553      	cmp	r3, sl
 8028c64:	bfa8      	it	ge
 8028c66:	4653      	movge	r3, sl
 8028c68:	2b00      	cmp	r3, #0
 8028c6a:	4699      	mov	r9, r3
 8028c6c:	dc36      	bgt.n	8028cdc <_printf_float+0x360>
 8028c6e:	f04f 0b00 	mov.w	fp, #0
 8028c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8028c76:	f104 021a 	add.w	r2, r4, #26
 8028c7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8028c7c:	9306      	str	r3, [sp, #24]
 8028c7e:	eba3 0309 	sub.w	r3, r3, r9
 8028c82:	455b      	cmp	r3, fp
 8028c84:	dc31      	bgt.n	8028cea <_printf_float+0x36e>
 8028c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028c88:	459a      	cmp	sl, r3
 8028c8a:	dc3a      	bgt.n	8028d02 <_printf_float+0x386>
 8028c8c:	6823      	ldr	r3, [r4, #0]
 8028c8e:	07da      	lsls	r2, r3, #31
 8028c90:	d437      	bmi.n	8028d02 <_printf_float+0x386>
 8028c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028c94:	ebaa 0903 	sub.w	r9, sl, r3
 8028c98:	9b06      	ldr	r3, [sp, #24]
 8028c9a:	ebaa 0303 	sub.w	r3, sl, r3
 8028c9e:	4599      	cmp	r9, r3
 8028ca0:	bfa8      	it	ge
 8028ca2:	4699      	movge	r9, r3
 8028ca4:	f1b9 0f00 	cmp.w	r9, #0
 8028ca8:	dc33      	bgt.n	8028d12 <_printf_float+0x396>
 8028caa:	f04f 0800 	mov.w	r8, #0
 8028cae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8028cb2:	f104 0b1a 	add.w	fp, r4, #26
 8028cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028cb8:	ebaa 0303 	sub.w	r3, sl, r3
 8028cbc:	eba3 0309 	sub.w	r3, r3, r9
 8028cc0:	4543      	cmp	r3, r8
 8028cc2:	f77f af79 	ble.w	8028bb8 <_printf_float+0x23c>
 8028cc6:	2301      	movs	r3, #1
 8028cc8:	465a      	mov	r2, fp
 8028cca:	4631      	mov	r1, r6
 8028ccc:	4628      	mov	r0, r5
 8028cce:	47b8      	blx	r7
 8028cd0:	3001      	adds	r0, #1
 8028cd2:	f43f aeae 	beq.w	8028a32 <_printf_float+0xb6>
 8028cd6:	f108 0801 	add.w	r8, r8, #1
 8028cda:	e7ec      	b.n	8028cb6 <_printf_float+0x33a>
 8028cdc:	4642      	mov	r2, r8
 8028cde:	4631      	mov	r1, r6
 8028ce0:	4628      	mov	r0, r5
 8028ce2:	47b8      	blx	r7
 8028ce4:	3001      	adds	r0, #1
 8028ce6:	d1c2      	bne.n	8028c6e <_printf_float+0x2f2>
 8028ce8:	e6a3      	b.n	8028a32 <_printf_float+0xb6>
 8028cea:	2301      	movs	r3, #1
 8028cec:	4631      	mov	r1, r6
 8028cee:	4628      	mov	r0, r5
 8028cf0:	9206      	str	r2, [sp, #24]
 8028cf2:	47b8      	blx	r7
 8028cf4:	3001      	adds	r0, #1
 8028cf6:	f43f ae9c 	beq.w	8028a32 <_printf_float+0xb6>
 8028cfa:	9a06      	ldr	r2, [sp, #24]
 8028cfc:	f10b 0b01 	add.w	fp, fp, #1
 8028d00:	e7bb      	b.n	8028c7a <_printf_float+0x2fe>
 8028d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028d06:	4631      	mov	r1, r6
 8028d08:	4628      	mov	r0, r5
 8028d0a:	47b8      	blx	r7
 8028d0c:	3001      	adds	r0, #1
 8028d0e:	d1c0      	bne.n	8028c92 <_printf_float+0x316>
 8028d10:	e68f      	b.n	8028a32 <_printf_float+0xb6>
 8028d12:	9a06      	ldr	r2, [sp, #24]
 8028d14:	464b      	mov	r3, r9
 8028d16:	4442      	add	r2, r8
 8028d18:	4631      	mov	r1, r6
 8028d1a:	4628      	mov	r0, r5
 8028d1c:	47b8      	blx	r7
 8028d1e:	3001      	adds	r0, #1
 8028d20:	d1c3      	bne.n	8028caa <_printf_float+0x32e>
 8028d22:	e686      	b.n	8028a32 <_printf_float+0xb6>
 8028d24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8028d28:	f1ba 0f01 	cmp.w	sl, #1
 8028d2c:	dc01      	bgt.n	8028d32 <_printf_float+0x3b6>
 8028d2e:	07db      	lsls	r3, r3, #31
 8028d30:	d536      	bpl.n	8028da0 <_printf_float+0x424>
 8028d32:	2301      	movs	r3, #1
 8028d34:	4642      	mov	r2, r8
 8028d36:	4631      	mov	r1, r6
 8028d38:	4628      	mov	r0, r5
 8028d3a:	47b8      	blx	r7
 8028d3c:	3001      	adds	r0, #1
 8028d3e:	f43f ae78 	beq.w	8028a32 <_printf_float+0xb6>
 8028d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028d46:	4631      	mov	r1, r6
 8028d48:	4628      	mov	r0, r5
 8028d4a:	47b8      	blx	r7
 8028d4c:	3001      	adds	r0, #1
 8028d4e:	f43f ae70 	beq.w	8028a32 <_printf_float+0xb6>
 8028d52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8028d56:	2200      	movs	r2, #0
 8028d58:	2300      	movs	r3, #0
 8028d5a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8028d5e:	f7d7 fee3 	bl	8000b28 <__aeabi_dcmpeq>
 8028d62:	b9c0      	cbnz	r0, 8028d96 <_printf_float+0x41a>
 8028d64:	4653      	mov	r3, sl
 8028d66:	f108 0201 	add.w	r2, r8, #1
 8028d6a:	4631      	mov	r1, r6
 8028d6c:	4628      	mov	r0, r5
 8028d6e:	47b8      	blx	r7
 8028d70:	3001      	adds	r0, #1
 8028d72:	d10c      	bne.n	8028d8e <_printf_float+0x412>
 8028d74:	e65d      	b.n	8028a32 <_printf_float+0xb6>
 8028d76:	2301      	movs	r3, #1
 8028d78:	465a      	mov	r2, fp
 8028d7a:	4631      	mov	r1, r6
 8028d7c:	4628      	mov	r0, r5
 8028d7e:	47b8      	blx	r7
 8028d80:	3001      	adds	r0, #1
 8028d82:	f43f ae56 	beq.w	8028a32 <_printf_float+0xb6>
 8028d86:	f108 0801 	add.w	r8, r8, #1
 8028d8a:	45d0      	cmp	r8, sl
 8028d8c:	dbf3      	blt.n	8028d76 <_printf_float+0x3fa>
 8028d8e:	464b      	mov	r3, r9
 8028d90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8028d94:	e6df      	b.n	8028b56 <_printf_float+0x1da>
 8028d96:	f04f 0800 	mov.w	r8, #0
 8028d9a:	f104 0b1a 	add.w	fp, r4, #26
 8028d9e:	e7f4      	b.n	8028d8a <_printf_float+0x40e>
 8028da0:	2301      	movs	r3, #1
 8028da2:	4642      	mov	r2, r8
 8028da4:	e7e1      	b.n	8028d6a <_printf_float+0x3ee>
 8028da6:	2301      	movs	r3, #1
 8028da8:	464a      	mov	r2, r9
 8028daa:	4631      	mov	r1, r6
 8028dac:	4628      	mov	r0, r5
 8028dae:	47b8      	blx	r7
 8028db0:	3001      	adds	r0, #1
 8028db2:	f43f ae3e 	beq.w	8028a32 <_printf_float+0xb6>
 8028db6:	f108 0801 	add.w	r8, r8, #1
 8028dba:	68e3      	ldr	r3, [r4, #12]
 8028dbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028dbe:	1a5b      	subs	r3, r3, r1
 8028dc0:	4543      	cmp	r3, r8
 8028dc2:	dcf0      	bgt.n	8028da6 <_printf_float+0x42a>
 8028dc4:	e6fc      	b.n	8028bc0 <_printf_float+0x244>
 8028dc6:	f04f 0800 	mov.w	r8, #0
 8028dca:	f104 0919 	add.w	r9, r4, #25
 8028dce:	e7f4      	b.n	8028dba <_printf_float+0x43e>

08028dd0 <_printf_common>:
 8028dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028dd4:	4616      	mov	r6, r2
 8028dd6:	4698      	mov	r8, r3
 8028dd8:	688a      	ldr	r2, [r1, #8]
 8028dda:	690b      	ldr	r3, [r1, #16]
 8028ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8028de0:	4293      	cmp	r3, r2
 8028de2:	bfb8      	it	lt
 8028de4:	4613      	movlt	r3, r2
 8028de6:	6033      	str	r3, [r6, #0]
 8028de8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8028dec:	4607      	mov	r7, r0
 8028dee:	460c      	mov	r4, r1
 8028df0:	b10a      	cbz	r2, 8028df6 <_printf_common+0x26>
 8028df2:	3301      	adds	r3, #1
 8028df4:	6033      	str	r3, [r6, #0]
 8028df6:	6823      	ldr	r3, [r4, #0]
 8028df8:	0699      	lsls	r1, r3, #26
 8028dfa:	bf42      	ittt	mi
 8028dfc:	6833      	ldrmi	r3, [r6, #0]
 8028dfe:	3302      	addmi	r3, #2
 8028e00:	6033      	strmi	r3, [r6, #0]
 8028e02:	6825      	ldr	r5, [r4, #0]
 8028e04:	f015 0506 	ands.w	r5, r5, #6
 8028e08:	d106      	bne.n	8028e18 <_printf_common+0x48>
 8028e0a:	f104 0a19 	add.w	sl, r4, #25
 8028e0e:	68e3      	ldr	r3, [r4, #12]
 8028e10:	6832      	ldr	r2, [r6, #0]
 8028e12:	1a9b      	subs	r3, r3, r2
 8028e14:	42ab      	cmp	r3, r5
 8028e16:	dc26      	bgt.n	8028e66 <_printf_common+0x96>
 8028e18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8028e1c:	6822      	ldr	r2, [r4, #0]
 8028e1e:	3b00      	subs	r3, #0
 8028e20:	bf18      	it	ne
 8028e22:	2301      	movne	r3, #1
 8028e24:	0692      	lsls	r2, r2, #26
 8028e26:	d42b      	bmi.n	8028e80 <_printf_common+0xb0>
 8028e28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8028e2c:	4641      	mov	r1, r8
 8028e2e:	4638      	mov	r0, r7
 8028e30:	47c8      	blx	r9
 8028e32:	3001      	adds	r0, #1
 8028e34:	d01e      	beq.n	8028e74 <_printf_common+0xa4>
 8028e36:	6823      	ldr	r3, [r4, #0]
 8028e38:	6922      	ldr	r2, [r4, #16]
 8028e3a:	f003 0306 	and.w	r3, r3, #6
 8028e3e:	2b04      	cmp	r3, #4
 8028e40:	bf02      	ittt	eq
 8028e42:	68e5      	ldreq	r5, [r4, #12]
 8028e44:	6833      	ldreq	r3, [r6, #0]
 8028e46:	1aed      	subeq	r5, r5, r3
 8028e48:	68a3      	ldr	r3, [r4, #8]
 8028e4a:	bf0c      	ite	eq
 8028e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028e50:	2500      	movne	r5, #0
 8028e52:	4293      	cmp	r3, r2
 8028e54:	bfc4      	itt	gt
 8028e56:	1a9b      	subgt	r3, r3, r2
 8028e58:	18ed      	addgt	r5, r5, r3
 8028e5a:	2600      	movs	r6, #0
 8028e5c:	341a      	adds	r4, #26
 8028e5e:	42b5      	cmp	r5, r6
 8028e60:	d11a      	bne.n	8028e98 <_printf_common+0xc8>
 8028e62:	2000      	movs	r0, #0
 8028e64:	e008      	b.n	8028e78 <_printf_common+0xa8>
 8028e66:	2301      	movs	r3, #1
 8028e68:	4652      	mov	r2, sl
 8028e6a:	4641      	mov	r1, r8
 8028e6c:	4638      	mov	r0, r7
 8028e6e:	47c8      	blx	r9
 8028e70:	3001      	adds	r0, #1
 8028e72:	d103      	bne.n	8028e7c <_printf_common+0xac>
 8028e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028e7c:	3501      	adds	r5, #1
 8028e7e:	e7c6      	b.n	8028e0e <_printf_common+0x3e>
 8028e80:	18e1      	adds	r1, r4, r3
 8028e82:	1c5a      	adds	r2, r3, #1
 8028e84:	2030      	movs	r0, #48	@ 0x30
 8028e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8028e8a:	4422      	add	r2, r4
 8028e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8028e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8028e94:	3302      	adds	r3, #2
 8028e96:	e7c7      	b.n	8028e28 <_printf_common+0x58>
 8028e98:	2301      	movs	r3, #1
 8028e9a:	4622      	mov	r2, r4
 8028e9c:	4641      	mov	r1, r8
 8028e9e:	4638      	mov	r0, r7
 8028ea0:	47c8      	blx	r9
 8028ea2:	3001      	adds	r0, #1
 8028ea4:	d0e6      	beq.n	8028e74 <_printf_common+0xa4>
 8028ea6:	3601      	adds	r6, #1
 8028ea8:	e7d9      	b.n	8028e5e <_printf_common+0x8e>
	...

08028eac <_printf_i>:
 8028eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028eb0:	7e0f      	ldrb	r7, [r1, #24]
 8028eb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8028eb4:	2f78      	cmp	r7, #120	@ 0x78
 8028eb6:	4691      	mov	r9, r2
 8028eb8:	4680      	mov	r8, r0
 8028eba:	460c      	mov	r4, r1
 8028ebc:	469a      	mov	sl, r3
 8028ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8028ec2:	d807      	bhi.n	8028ed4 <_printf_i+0x28>
 8028ec4:	2f62      	cmp	r7, #98	@ 0x62
 8028ec6:	d80a      	bhi.n	8028ede <_printf_i+0x32>
 8028ec8:	2f00      	cmp	r7, #0
 8028eca:	f000 80d2 	beq.w	8029072 <_printf_i+0x1c6>
 8028ece:	2f58      	cmp	r7, #88	@ 0x58
 8028ed0:	f000 80b9 	beq.w	8029046 <_printf_i+0x19a>
 8028ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8028ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8028edc:	e03a      	b.n	8028f54 <_printf_i+0xa8>
 8028ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8028ee2:	2b15      	cmp	r3, #21
 8028ee4:	d8f6      	bhi.n	8028ed4 <_printf_i+0x28>
 8028ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8028eec <_printf_i+0x40>)
 8028ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028eec:	08028f45 	.word	0x08028f45
 8028ef0:	08028f59 	.word	0x08028f59
 8028ef4:	08028ed5 	.word	0x08028ed5
 8028ef8:	08028ed5 	.word	0x08028ed5
 8028efc:	08028ed5 	.word	0x08028ed5
 8028f00:	08028ed5 	.word	0x08028ed5
 8028f04:	08028f59 	.word	0x08028f59
 8028f08:	08028ed5 	.word	0x08028ed5
 8028f0c:	08028ed5 	.word	0x08028ed5
 8028f10:	08028ed5 	.word	0x08028ed5
 8028f14:	08028ed5 	.word	0x08028ed5
 8028f18:	08029059 	.word	0x08029059
 8028f1c:	08028f83 	.word	0x08028f83
 8028f20:	08029013 	.word	0x08029013
 8028f24:	08028ed5 	.word	0x08028ed5
 8028f28:	08028ed5 	.word	0x08028ed5
 8028f2c:	0802907b 	.word	0x0802907b
 8028f30:	08028ed5 	.word	0x08028ed5
 8028f34:	08028f83 	.word	0x08028f83
 8028f38:	08028ed5 	.word	0x08028ed5
 8028f3c:	08028ed5 	.word	0x08028ed5
 8028f40:	0802901b 	.word	0x0802901b
 8028f44:	6833      	ldr	r3, [r6, #0]
 8028f46:	1d1a      	adds	r2, r3, #4
 8028f48:	681b      	ldr	r3, [r3, #0]
 8028f4a:	6032      	str	r2, [r6, #0]
 8028f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8028f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8028f54:	2301      	movs	r3, #1
 8028f56:	e09d      	b.n	8029094 <_printf_i+0x1e8>
 8028f58:	6833      	ldr	r3, [r6, #0]
 8028f5a:	6820      	ldr	r0, [r4, #0]
 8028f5c:	1d19      	adds	r1, r3, #4
 8028f5e:	6031      	str	r1, [r6, #0]
 8028f60:	0606      	lsls	r6, r0, #24
 8028f62:	d501      	bpl.n	8028f68 <_printf_i+0xbc>
 8028f64:	681d      	ldr	r5, [r3, #0]
 8028f66:	e003      	b.n	8028f70 <_printf_i+0xc4>
 8028f68:	0645      	lsls	r5, r0, #25
 8028f6a:	d5fb      	bpl.n	8028f64 <_printf_i+0xb8>
 8028f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8028f70:	2d00      	cmp	r5, #0
 8028f72:	da03      	bge.n	8028f7c <_printf_i+0xd0>
 8028f74:	232d      	movs	r3, #45	@ 0x2d
 8028f76:	426d      	negs	r5, r5
 8028f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028f7c:	4859      	ldr	r0, [pc, #356]	@ (80290e4 <_printf_i+0x238>)
 8028f7e:	230a      	movs	r3, #10
 8028f80:	e011      	b.n	8028fa6 <_printf_i+0xfa>
 8028f82:	6821      	ldr	r1, [r4, #0]
 8028f84:	6833      	ldr	r3, [r6, #0]
 8028f86:	0608      	lsls	r0, r1, #24
 8028f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8028f8c:	d402      	bmi.n	8028f94 <_printf_i+0xe8>
 8028f8e:	0649      	lsls	r1, r1, #25
 8028f90:	bf48      	it	mi
 8028f92:	b2ad      	uxthmi	r5, r5
 8028f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8028f96:	4853      	ldr	r0, [pc, #332]	@ (80290e4 <_printf_i+0x238>)
 8028f98:	6033      	str	r3, [r6, #0]
 8028f9a:	bf14      	ite	ne
 8028f9c:	230a      	movne	r3, #10
 8028f9e:	2308      	moveq	r3, #8
 8028fa0:	2100      	movs	r1, #0
 8028fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8028fa6:	6866      	ldr	r6, [r4, #4]
 8028fa8:	60a6      	str	r6, [r4, #8]
 8028faa:	2e00      	cmp	r6, #0
 8028fac:	bfa2      	ittt	ge
 8028fae:	6821      	ldrge	r1, [r4, #0]
 8028fb0:	f021 0104 	bicge.w	r1, r1, #4
 8028fb4:	6021      	strge	r1, [r4, #0]
 8028fb6:	b90d      	cbnz	r5, 8028fbc <_printf_i+0x110>
 8028fb8:	2e00      	cmp	r6, #0
 8028fba:	d04b      	beq.n	8029054 <_printf_i+0x1a8>
 8028fbc:	4616      	mov	r6, r2
 8028fbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8028fc2:	fb03 5711 	mls	r7, r3, r1, r5
 8028fc6:	5dc7      	ldrb	r7, [r0, r7]
 8028fc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8028fcc:	462f      	mov	r7, r5
 8028fce:	42bb      	cmp	r3, r7
 8028fd0:	460d      	mov	r5, r1
 8028fd2:	d9f4      	bls.n	8028fbe <_printf_i+0x112>
 8028fd4:	2b08      	cmp	r3, #8
 8028fd6:	d10b      	bne.n	8028ff0 <_printf_i+0x144>
 8028fd8:	6823      	ldr	r3, [r4, #0]
 8028fda:	07df      	lsls	r7, r3, #31
 8028fdc:	d508      	bpl.n	8028ff0 <_printf_i+0x144>
 8028fde:	6923      	ldr	r3, [r4, #16]
 8028fe0:	6861      	ldr	r1, [r4, #4]
 8028fe2:	4299      	cmp	r1, r3
 8028fe4:	bfde      	ittt	le
 8028fe6:	2330      	movle	r3, #48	@ 0x30
 8028fe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8028fec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8028ff0:	1b92      	subs	r2, r2, r6
 8028ff2:	6122      	str	r2, [r4, #16]
 8028ff4:	f8cd a000 	str.w	sl, [sp]
 8028ff8:	464b      	mov	r3, r9
 8028ffa:	aa03      	add	r2, sp, #12
 8028ffc:	4621      	mov	r1, r4
 8028ffe:	4640      	mov	r0, r8
 8029000:	f7ff fee6 	bl	8028dd0 <_printf_common>
 8029004:	3001      	adds	r0, #1
 8029006:	d14a      	bne.n	802909e <_printf_i+0x1f2>
 8029008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802900c:	b004      	add	sp, #16
 802900e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029012:	6823      	ldr	r3, [r4, #0]
 8029014:	f043 0320 	orr.w	r3, r3, #32
 8029018:	6023      	str	r3, [r4, #0]
 802901a:	4833      	ldr	r0, [pc, #204]	@ (80290e8 <_printf_i+0x23c>)
 802901c:	2778      	movs	r7, #120	@ 0x78
 802901e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8029022:	6823      	ldr	r3, [r4, #0]
 8029024:	6831      	ldr	r1, [r6, #0]
 8029026:	061f      	lsls	r7, r3, #24
 8029028:	f851 5b04 	ldr.w	r5, [r1], #4
 802902c:	d402      	bmi.n	8029034 <_printf_i+0x188>
 802902e:	065f      	lsls	r7, r3, #25
 8029030:	bf48      	it	mi
 8029032:	b2ad      	uxthmi	r5, r5
 8029034:	6031      	str	r1, [r6, #0]
 8029036:	07d9      	lsls	r1, r3, #31
 8029038:	bf44      	itt	mi
 802903a:	f043 0320 	orrmi.w	r3, r3, #32
 802903e:	6023      	strmi	r3, [r4, #0]
 8029040:	b11d      	cbz	r5, 802904a <_printf_i+0x19e>
 8029042:	2310      	movs	r3, #16
 8029044:	e7ac      	b.n	8028fa0 <_printf_i+0xf4>
 8029046:	4827      	ldr	r0, [pc, #156]	@ (80290e4 <_printf_i+0x238>)
 8029048:	e7e9      	b.n	802901e <_printf_i+0x172>
 802904a:	6823      	ldr	r3, [r4, #0]
 802904c:	f023 0320 	bic.w	r3, r3, #32
 8029050:	6023      	str	r3, [r4, #0]
 8029052:	e7f6      	b.n	8029042 <_printf_i+0x196>
 8029054:	4616      	mov	r6, r2
 8029056:	e7bd      	b.n	8028fd4 <_printf_i+0x128>
 8029058:	6833      	ldr	r3, [r6, #0]
 802905a:	6825      	ldr	r5, [r4, #0]
 802905c:	6961      	ldr	r1, [r4, #20]
 802905e:	1d18      	adds	r0, r3, #4
 8029060:	6030      	str	r0, [r6, #0]
 8029062:	062e      	lsls	r6, r5, #24
 8029064:	681b      	ldr	r3, [r3, #0]
 8029066:	d501      	bpl.n	802906c <_printf_i+0x1c0>
 8029068:	6019      	str	r1, [r3, #0]
 802906a:	e002      	b.n	8029072 <_printf_i+0x1c6>
 802906c:	0668      	lsls	r0, r5, #25
 802906e:	d5fb      	bpl.n	8029068 <_printf_i+0x1bc>
 8029070:	8019      	strh	r1, [r3, #0]
 8029072:	2300      	movs	r3, #0
 8029074:	6123      	str	r3, [r4, #16]
 8029076:	4616      	mov	r6, r2
 8029078:	e7bc      	b.n	8028ff4 <_printf_i+0x148>
 802907a:	6833      	ldr	r3, [r6, #0]
 802907c:	1d1a      	adds	r2, r3, #4
 802907e:	6032      	str	r2, [r6, #0]
 8029080:	681e      	ldr	r6, [r3, #0]
 8029082:	6862      	ldr	r2, [r4, #4]
 8029084:	2100      	movs	r1, #0
 8029086:	4630      	mov	r0, r6
 8029088:	f7d7 f8d2 	bl	8000230 <memchr>
 802908c:	b108      	cbz	r0, 8029092 <_printf_i+0x1e6>
 802908e:	1b80      	subs	r0, r0, r6
 8029090:	6060      	str	r0, [r4, #4]
 8029092:	6863      	ldr	r3, [r4, #4]
 8029094:	6123      	str	r3, [r4, #16]
 8029096:	2300      	movs	r3, #0
 8029098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802909c:	e7aa      	b.n	8028ff4 <_printf_i+0x148>
 802909e:	6923      	ldr	r3, [r4, #16]
 80290a0:	4632      	mov	r2, r6
 80290a2:	4649      	mov	r1, r9
 80290a4:	4640      	mov	r0, r8
 80290a6:	47d0      	blx	sl
 80290a8:	3001      	adds	r0, #1
 80290aa:	d0ad      	beq.n	8029008 <_printf_i+0x15c>
 80290ac:	6823      	ldr	r3, [r4, #0]
 80290ae:	079b      	lsls	r3, r3, #30
 80290b0:	d413      	bmi.n	80290da <_printf_i+0x22e>
 80290b2:	68e0      	ldr	r0, [r4, #12]
 80290b4:	9b03      	ldr	r3, [sp, #12]
 80290b6:	4298      	cmp	r0, r3
 80290b8:	bfb8      	it	lt
 80290ba:	4618      	movlt	r0, r3
 80290bc:	e7a6      	b.n	802900c <_printf_i+0x160>
 80290be:	2301      	movs	r3, #1
 80290c0:	4632      	mov	r2, r6
 80290c2:	4649      	mov	r1, r9
 80290c4:	4640      	mov	r0, r8
 80290c6:	47d0      	blx	sl
 80290c8:	3001      	adds	r0, #1
 80290ca:	d09d      	beq.n	8029008 <_printf_i+0x15c>
 80290cc:	3501      	adds	r5, #1
 80290ce:	68e3      	ldr	r3, [r4, #12]
 80290d0:	9903      	ldr	r1, [sp, #12]
 80290d2:	1a5b      	subs	r3, r3, r1
 80290d4:	42ab      	cmp	r3, r5
 80290d6:	dcf2      	bgt.n	80290be <_printf_i+0x212>
 80290d8:	e7eb      	b.n	80290b2 <_printf_i+0x206>
 80290da:	2500      	movs	r5, #0
 80290dc:	f104 0619 	add.w	r6, r4, #25
 80290e0:	e7f5      	b.n	80290ce <_printf_i+0x222>
 80290e2:	bf00      	nop
 80290e4:	080302e0 	.word	0x080302e0
 80290e8:	080302f1 	.word	0x080302f1

080290ec <std>:
 80290ec:	2300      	movs	r3, #0
 80290ee:	b510      	push	{r4, lr}
 80290f0:	4604      	mov	r4, r0
 80290f2:	e9c0 3300 	strd	r3, r3, [r0]
 80290f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80290fa:	6083      	str	r3, [r0, #8]
 80290fc:	8181      	strh	r1, [r0, #12]
 80290fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8029100:	81c2      	strh	r2, [r0, #14]
 8029102:	6183      	str	r3, [r0, #24]
 8029104:	4619      	mov	r1, r3
 8029106:	2208      	movs	r2, #8
 8029108:	305c      	adds	r0, #92	@ 0x5c
 802910a:	f000 fa8b 	bl	8029624 <memset>
 802910e:	4b0d      	ldr	r3, [pc, #52]	@ (8029144 <std+0x58>)
 8029110:	6263      	str	r3, [r4, #36]	@ 0x24
 8029112:	4b0d      	ldr	r3, [pc, #52]	@ (8029148 <std+0x5c>)
 8029114:	62a3      	str	r3, [r4, #40]	@ 0x28
 8029116:	4b0d      	ldr	r3, [pc, #52]	@ (802914c <std+0x60>)
 8029118:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802911a:	4b0d      	ldr	r3, [pc, #52]	@ (8029150 <std+0x64>)
 802911c:	6323      	str	r3, [r4, #48]	@ 0x30
 802911e:	4b0d      	ldr	r3, [pc, #52]	@ (8029154 <std+0x68>)
 8029120:	6224      	str	r4, [r4, #32]
 8029122:	429c      	cmp	r4, r3
 8029124:	d006      	beq.n	8029134 <std+0x48>
 8029126:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802912a:	4294      	cmp	r4, r2
 802912c:	d002      	beq.n	8029134 <std+0x48>
 802912e:	33d0      	adds	r3, #208	@ 0xd0
 8029130:	429c      	cmp	r4, r3
 8029132:	d105      	bne.n	8029140 <std+0x54>
 8029134:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8029138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802913c:	f000 bb8a 	b.w	8029854 <__retarget_lock_init_recursive>
 8029140:	bd10      	pop	{r4, pc}
 8029142:	bf00      	nop
 8029144:	080293b1 	.word	0x080293b1
 8029148:	080293d3 	.word	0x080293d3
 802914c:	0802940b 	.word	0x0802940b
 8029150:	0802942f 	.word	0x0802942f
 8029154:	20047234 	.word	0x20047234

08029158 <stdio_exit_handler>:
 8029158:	4a02      	ldr	r2, [pc, #8]	@ (8029164 <stdio_exit_handler+0xc>)
 802915a:	4903      	ldr	r1, [pc, #12]	@ (8029168 <stdio_exit_handler+0x10>)
 802915c:	4803      	ldr	r0, [pc, #12]	@ (802916c <stdio_exit_handler+0x14>)
 802915e:	f000 b869 	b.w	8029234 <_fwalk_sglue>
 8029162:	bf00      	nop
 8029164:	200002a8 	.word	0x200002a8
 8029168:	0802b35d 	.word	0x0802b35d
 802916c:	200002b8 	.word	0x200002b8

08029170 <cleanup_stdio>:
 8029170:	6841      	ldr	r1, [r0, #4]
 8029172:	4b0c      	ldr	r3, [pc, #48]	@ (80291a4 <cleanup_stdio+0x34>)
 8029174:	4299      	cmp	r1, r3
 8029176:	b510      	push	{r4, lr}
 8029178:	4604      	mov	r4, r0
 802917a:	d001      	beq.n	8029180 <cleanup_stdio+0x10>
 802917c:	f002 f8ee 	bl	802b35c <_fflush_r>
 8029180:	68a1      	ldr	r1, [r4, #8]
 8029182:	4b09      	ldr	r3, [pc, #36]	@ (80291a8 <cleanup_stdio+0x38>)
 8029184:	4299      	cmp	r1, r3
 8029186:	d002      	beq.n	802918e <cleanup_stdio+0x1e>
 8029188:	4620      	mov	r0, r4
 802918a:	f002 f8e7 	bl	802b35c <_fflush_r>
 802918e:	68e1      	ldr	r1, [r4, #12]
 8029190:	4b06      	ldr	r3, [pc, #24]	@ (80291ac <cleanup_stdio+0x3c>)
 8029192:	4299      	cmp	r1, r3
 8029194:	d004      	beq.n	80291a0 <cleanup_stdio+0x30>
 8029196:	4620      	mov	r0, r4
 8029198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802919c:	f002 b8de 	b.w	802b35c <_fflush_r>
 80291a0:	bd10      	pop	{r4, pc}
 80291a2:	bf00      	nop
 80291a4:	20047234 	.word	0x20047234
 80291a8:	2004729c 	.word	0x2004729c
 80291ac:	20047304 	.word	0x20047304

080291b0 <global_stdio_init.part.0>:
 80291b0:	b510      	push	{r4, lr}
 80291b2:	4b0b      	ldr	r3, [pc, #44]	@ (80291e0 <global_stdio_init.part.0+0x30>)
 80291b4:	4c0b      	ldr	r4, [pc, #44]	@ (80291e4 <global_stdio_init.part.0+0x34>)
 80291b6:	4a0c      	ldr	r2, [pc, #48]	@ (80291e8 <global_stdio_init.part.0+0x38>)
 80291b8:	601a      	str	r2, [r3, #0]
 80291ba:	4620      	mov	r0, r4
 80291bc:	2200      	movs	r2, #0
 80291be:	2104      	movs	r1, #4
 80291c0:	f7ff ff94 	bl	80290ec <std>
 80291c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80291c8:	2201      	movs	r2, #1
 80291ca:	2109      	movs	r1, #9
 80291cc:	f7ff ff8e 	bl	80290ec <std>
 80291d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80291d4:	2202      	movs	r2, #2
 80291d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80291da:	2112      	movs	r1, #18
 80291dc:	f7ff bf86 	b.w	80290ec <std>
 80291e0:	2004736c 	.word	0x2004736c
 80291e4:	20047234 	.word	0x20047234
 80291e8:	08029159 	.word	0x08029159

080291ec <__sfp_lock_acquire>:
 80291ec:	4801      	ldr	r0, [pc, #4]	@ (80291f4 <__sfp_lock_acquire+0x8>)
 80291ee:	f000 bb32 	b.w	8029856 <__retarget_lock_acquire_recursive>
 80291f2:	bf00      	nop
 80291f4:	20047376 	.word	0x20047376

080291f8 <__sfp_lock_release>:
 80291f8:	4801      	ldr	r0, [pc, #4]	@ (8029200 <__sfp_lock_release+0x8>)
 80291fa:	f000 bb2d 	b.w	8029858 <__retarget_lock_release_recursive>
 80291fe:	bf00      	nop
 8029200:	20047376 	.word	0x20047376

08029204 <__sinit>:
 8029204:	b510      	push	{r4, lr}
 8029206:	4604      	mov	r4, r0
 8029208:	f7ff fff0 	bl	80291ec <__sfp_lock_acquire>
 802920c:	6a23      	ldr	r3, [r4, #32]
 802920e:	b11b      	cbz	r3, 8029218 <__sinit+0x14>
 8029210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029214:	f7ff bff0 	b.w	80291f8 <__sfp_lock_release>
 8029218:	4b04      	ldr	r3, [pc, #16]	@ (802922c <__sinit+0x28>)
 802921a:	6223      	str	r3, [r4, #32]
 802921c:	4b04      	ldr	r3, [pc, #16]	@ (8029230 <__sinit+0x2c>)
 802921e:	681b      	ldr	r3, [r3, #0]
 8029220:	2b00      	cmp	r3, #0
 8029222:	d1f5      	bne.n	8029210 <__sinit+0xc>
 8029224:	f7ff ffc4 	bl	80291b0 <global_stdio_init.part.0>
 8029228:	e7f2      	b.n	8029210 <__sinit+0xc>
 802922a:	bf00      	nop
 802922c:	08029171 	.word	0x08029171
 8029230:	2004736c 	.word	0x2004736c

08029234 <_fwalk_sglue>:
 8029234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029238:	4607      	mov	r7, r0
 802923a:	4688      	mov	r8, r1
 802923c:	4614      	mov	r4, r2
 802923e:	2600      	movs	r6, #0
 8029240:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029244:	f1b9 0901 	subs.w	r9, r9, #1
 8029248:	d505      	bpl.n	8029256 <_fwalk_sglue+0x22>
 802924a:	6824      	ldr	r4, [r4, #0]
 802924c:	2c00      	cmp	r4, #0
 802924e:	d1f7      	bne.n	8029240 <_fwalk_sglue+0xc>
 8029250:	4630      	mov	r0, r6
 8029252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029256:	89ab      	ldrh	r3, [r5, #12]
 8029258:	2b01      	cmp	r3, #1
 802925a:	d907      	bls.n	802926c <_fwalk_sglue+0x38>
 802925c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029260:	3301      	adds	r3, #1
 8029262:	d003      	beq.n	802926c <_fwalk_sglue+0x38>
 8029264:	4629      	mov	r1, r5
 8029266:	4638      	mov	r0, r7
 8029268:	47c0      	blx	r8
 802926a:	4306      	orrs	r6, r0
 802926c:	3568      	adds	r5, #104	@ 0x68
 802926e:	e7e9      	b.n	8029244 <_fwalk_sglue+0x10>

08029270 <_fwrite_r>:
 8029270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029274:	9c08      	ldr	r4, [sp, #32]
 8029276:	468a      	mov	sl, r1
 8029278:	4690      	mov	r8, r2
 802927a:	fb02 f903 	mul.w	r9, r2, r3
 802927e:	4606      	mov	r6, r0
 8029280:	b118      	cbz	r0, 802928a <_fwrite_r+0x1a>
 8029282:	6a03      	ldr	r3, [r0, #32]
 8029284:	b90b      	cbnz	r3, 802928a <_fwrite_r+0x1a>
 8029286:	f7ff ffbd 	bl	8029204 <__sinit>
 802928a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802928c:	07dd      	lsls	r5, r3, #31
 802928e:	d405      	bmi.n	802929c <_fwrite_r+0x2c>
 8029290:	89a3      	ldrh	r3, [r4, #12]
 8029292:	0598      	lsls	r0, r3, #22
 8029294:	d402      	bmi.n	802929c <_fwrite_r+0x2c>
 8029296:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029298:	f000 fadd 	bl	8029856 <__retarget_lock_acquire_recursive>
 802929c:	89a3      	ldrh	r3, [r4, #12]
 802929e:	0719      	lsls	r1, r3, #28
 80292a0:	d516      	bpl.n	80292d0 <_fwrite_r+0x60>
 80292a2:	6923      	ldr	r3, [r4, #16]
 80292a4:	b1a3      	cbz	r3, 80292d0 <_fwrite_r+0x60>
 80292a6:	2500      	movs	r5, #0
 80292a8:	454d      	cmp	r5, r9
 80292aa:	d01f      	beq.n	80292ec <_fwrite_r+0x7c>
 80292ac:	68a7      	ldr	r7, [r4, #8]
 80292ae:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80292b2:	3f01      	subs	r7, #1
 80292b4:	2f00      	cmp	r7, #0
 80292b6:	60a7      	str	r7, [r4, #8]
 80292b8:	da04      	bge.n	80292c4 <_fwrite_r+0x54>
 80292ba:	69a3      	ldr	r3, [r4, #24]
 80292bc:	429f      	cmp	r7, r3
 80292be:	db0f      	blt.n	80292e0 <_fwrite_r+0x70>
 80292c0:	290a      	cmp	r1, #10
 80292c2:	d00d      	beq.n	80292e0 <_fwrite_r+0x70>
 80292c4:	6823      	ldr	r3, [r4, #0]
 80292c6:	1c5a      	adds	r2, r3, #1
 80292c8:	6022      	str	r2, [r4, #0]
 80292ca:	7019      	strb	r1, [r3, #0]
 80292cc:	3501      	adds	r5, #1
 80292ce:	e7eb      	b.n	80292a8 <_fwrite_r+0x38>
 80292d0:	4621      	mov	r1, r4
 80292d2:	4630      	mov	r0, r6
 80292d4:	f000 f926 	bl	8029524 <__swsetup_r>
 80292d8:	2800      	cmp	r0, #0
 80292da:	d0e4      	beq.n	80292a6 <_fwrite_r+0x36>
 80292dc:	2500      	movs	r5, #0
 80292de:	e005      	b.n	80292ec <_fwrite_r+0x7c>
 80292e0:	4622      	mov	r2, r4
 80292e2:	4630      	mov	r0, r6
 80292e4:	f000 f8e0 	bl	80294a8 <__swbuf_r>
 80292e8:	3001      	adds	r0, #1
 80292ea:	d1ef      	bne.n	80292cc <_fwrite_r+0x5c>
 80292ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80292ee:	07da      	lsls	r2, r3, #31
 80292f0:	d405      	bmi.n	80292fe <_fwrite_r+0x8e>
 80292f2:	89a3      	ldrh	r3, [r4, #12]
 80292f4:	059b      	lsls	r3, r3, #22
 80292f6:	d402      	bmi.n	80292fe <_fwrite_r+0x8e>
 80292f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80292fa:	f000 faad 	bl	8029858 <__retarget_lock_release_recursive>
 80292fe:	fbb5 f0f8 	udiv	r0, r5, r8
 8029302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08029308 <fwrite>:
 8029308:	b507      	push	{r0, r1, r2, lr}
 802930a:	9300      	str	r3, [sp, #0]
 802930c:	4613      	mov	r3, r2
 802930e:	460a      	mov	r2, r1
 8029310:	4601      	mov	r1, r0
 8029312:	4803      	ldr	r0, [pc, #12]	@ (8029320 <fwrite+0x18>)
 8029314:	6800      	ldr	r0, [r0, #0]
 8029316:	f7ff ffab 	bl	8029270 <_fwrite_r>
 802931a:	b003      	add	sp, #12
 802931c:	f85d fb04 	ldr.w	pc, [sp], #4
 8029320:	200002b4 	.word	0x200002b4

08029324 <iprintf>:
 8029324:	b40f      	push	{r0, r1, r2, r3}
 8029326:	b507      	push	{r0, r1, r2, lr}
 8029328:	4906      	ldr	r1, [pc, #24]	@ (8029344 <iprintf+0x20>)
 802932a:	ab04      	add	r3, sp, #16
 802932c:	6808      	ldr	r0, [r1, #0]
 802932e:	f853 2b04 	ldr.w	r2, [r3], #4
 8029332:	6881      	ldr	r1, [r0, #8]
 8029334:	9301      	str	r3, [sp, #4]
 8029336:	f001 fe75 	bl	802b024 <_vfiprintf_r>
 802933a:	b003      	add	sp, #12
 802933c:	f85d eb04 	ldr.w	lr, [sp], #4
 8029340:	b004      	add	sp, #16
 8029342:	4770      	bx	lr
 8029344:	200002b4 	.word	0x200002b4

08029348 <sniprintf>:
 8029348:	b40c      	push	{r2, r3}
 802934a:	b530      	push	{r4, r5, lr}
 802934c:	4b17      	ldr	r3, [pc, #92]	@ (80293ac <sniprintf+0x64>)
 802934e:	1e0c      	subs	r4, r1, #0
 8029350:	681d      	ldr	r5, [r3, #0]
 8029352:	b09d      	sub	sp, #116	@ 0x74
 8029354:	da08      	bge.n	8029368 <sniprintf+0x20>
 8029356:	238b      	movs	r3, #139	@ 0x8b
 8029358:	602b      	str	r3, [r5, #0]
 802935a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802935e:	b01d      	add	sp, #116	@ 0x74
 8029360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029364:	b002      	add	sp, #8
 8029366:	4770      	bx	lr
 8029368:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802936c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8029370:	bf14      	ite	ne
 8029372:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8029376:	4623      	moveq	r3, r4
 8029378:	9304      	str	r3, [sp, #16]
 802937a:	9307      	str	r3, [sp, #28]
 802937c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8029380:	9002      	str	r0, [sp, #8]
 8029382:	9006      	str	r0, [sp, #24]
 8029384:	f8ad 3016 	strh.w	r3, [sp, #22]
 8029388:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802938a:	ab21      	add	r3, sp, #132	@ 0x84
 802938c:	a902      	add	r1, sp, #8
 802938e:	4628      	mov	r0, r5
 8029390:	9301      	str	r3, [sp, #4]
 8029392:	f001 fd21 	bl	802add8 <_svfiprintf_r>
 8029396:	1c43      	adds	r3, r0, #1
 8029398:	bfbc      	itt	lt
 802939a:	238b      	movlt	r3, #139	@ 0x8b
 802939c:	602b      	strlt	r3, [r5, #0]
 802939e:	2c00      	cmp	r4, #0
 80293a0:	d0dd      	beq.n	802935e <sniprintf+0x16>
 80293a2:	9b02      	ldr	r3, [sp, #8]
 80293a4:	2200      	movs	r2, #0
 80293a6:	701a      	strb	r2, [r3, #0]
 80293a8:	e7d9      	b.n	802935e <sniprintf+0x16>
 80293aa:	bf00      	nop
 80293ac:	200002b4 	.word	0x200002b4

080293b0 <__sread>:
 80293b0:	b510      	push	{r4, lr}
 80293b2:	460c      	mov	r4, r1
 80293b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80293b8:	f000 f9ee 	bl	8029798 <_read_r>
 80293bc:	2800      	cmp	r0, #0
 80293be:	bfab      	itete	ge
 80293c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80293c2:	89a3      	ldrhlt	r3, [r4, #12]
 80293c4:	181b      	addge	r3, r3, r0
 80293c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80293ca:	bfac      	ite	ge
 80293cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80293ce:	81a3      	strhlt	r3, [r4, #12]
 80293d0:	bd10      	pop	{r4, pc}

080293d2 <__swrite>:
 80293d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80293d6:	461f      	mov	r7, r3
 80293d8:	898b      	ldrh	r3, [r1, #12]
 80293da:	05db      	lsls	r3, r3, #23
 80293dc:	4605      	mov	r5, r0
 80293de:	460c      	mov	r4, r1
 80293e0:	4616      	mov	r6, r2
 80293e2:	d505      	bpl.n	80293f0 <__swrite+0x1e>
 80293e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80293e8:	2302      	movs	r3, #2
 80293ea:	2200      	movs	r2, #0
 80293ec:	f000 f9c2 	bl	8029774 <_lseek_r>
 80293f0:	89a3      	ldrh	r3, [r4, #12]
 80293f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80293f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80293fa:	81a3      	strh	r3, [r4, #12]
 80293fc:	4632      	mov	r2, r6
 80293fe:	463b      	mov	r3, r7
 8029400:	4628      	mov	r0, r5
 8029402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029406:	f000 b9e9 	b.w	80297dc <_write_r>

0802940a <__sseek>:
 802940a:	b510      	push	{r4, lr}
 802940c:	460c      	mov	r4, r1
 802940e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029412:	f000 f9af 	bl	8029774 <_lseek_r>
 8029416:	1c43      	adds	r3, r0, #1
 8029418:	89a3      	ldrh	r3, [r4, #12]
 802941a:	bf15      	itete	ne
 802941c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802941e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8029422:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8029426:	81a3      	strheq	r3, [r4, #12]
 8029428:	bf18      	it	ne
 802942a:	81a3      	strhne	r3, [r4, #12]
 802942c:	bd10      	pop	{r4, pc}

0802942e <__sclose>:
 802942e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029432:	f000 b939 	b.w	80296a8 <_close_r>

08029436 <_vsniprintf_r>:
 8029436:	b530      	push	{r4, r5, lr}
 8029438:	4614      	mov	r4, r2
 802943a:	2c00      	cmp	r4, #0
 802943c:	b09b      	sub	sp, #108	@ 0x6c
 802943e:	4605      	mov	r5, r0
 8029440:	461a      	mov	r2, r3
 8029442:	da05      	bge.n	8029450 <_vsniprintf_r+0x1a>
 8029444:	238b      	movs	r3, #139	@ 0x8b
 8029446:	6003      	str	r3, [r0, #0]
 8029448:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802944c:	b01b      	add	sp, #108	@ 0x6c
 802944e:	bd30      	pop	{r4, r5, pc}
 8029450:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8029454:	f8ad 300c 	strh.w	r3, [sp, #12]
 8029458:	bf14      	ite	ne
 802945a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802945e:	4623      	moveq	r3, r4
 8029460:	9302      	str	r3, [sp, #8]
 8029462:	9305      	str	r3, [sp, #20]
 8029464:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8029468:	9100      	str	r1, [sp, #0]
 802946a:	9104      	str	r1, [sp, #16]
 802946c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029470:	4669      	mov	r1, sp
 8029472:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8029474:	f001 fcb0 	bl	802add8 <_svfiprintf_r>
 8029478:	1c43      	adds	r3, r0, #1
 802947a:	bfbc      	itt	lt
 802947c:	238b      	movlt	r3, #139	@ 0x8b
 802947e:	602b      	strlt	r3, [r5, #0]
 8029480:	2c00      	cmp	r4, #0
 8029482:	d0e3      	beq.n	802944c <_vsniprintf_r+0x16>
 8029484:	9b00      	ldr	r3, [sp, #0]
 8029486:	2200      	movs	r2, #0
 8029488:	701a      	strb	r2, [r3, #0]
 802948a:	e7df      	b.n	802944c <_vsniprintf_r+0x16>

0802948c <vsniprintf>:
 802948c:	b507      	push	{r0, r1, r2, lr}
 802948e:	9300      	str	r3, [sp, #0]
 8029490:	4613      	mov	r3, r2
 8029492:	460a      	mov	r2, r1
 8029494:	4601      	mov	r1, r0
 8029496:	4803      	ldr	r0, [pc, #12]	@ (80294a4 <vsniprintf+0x18>)
 8029498:	6800      	ldr	r0, [r0, #0]
 802949a:	f7ff ffcc 	bl	8029436 <_vsniprintf_r>
 802949e:	b003      	add	sp, #12
 80294a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80294a4:	200002b4 	.word	0x200002b4

080294a8 <__swbuf_r>:
 80294a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80294aa:	460e      	mov	r6, r1
 80294ac:	4614      	mov	r4, r2
 80294ae:	4605      	mov	r5, r0
 80294b0:	b118      	cbz	r0, 80294ba <__swbuf_r+0x12>
 80294b2:	6a03      	ldr	r3, [r0, #32]
 80294b4:	b90b      	cbnz	r3, 80294ba <__swbuf_r+0x12>
 80294b6:	f7ff fea5 	bl	8029204 <__sinit>
 80294ba:	69a3      	ldr	r3, [r4, #24]
 80294bc:	60a3      	str	r3, [r4, #8]
 80294be:	89a3      	ldrh	r3, [r4, #12]
 80294c0:	071a      	lsls	r2, r3, #28
 80294c2:	d501      	bpl.n	80294c8 <__swbuf_r+0x20>
 80294c4:	6923      	ldr	r3, [r4, #16]
 80294c6:	b943      	cbnz	r3, 80294da <__swbuf_r+0x32>
 80294c8:	4621      	mov	r1, r4
 80294ca:	4628      	mov	r0, r5
 80294cc:	f000 f82a 	bl	8029524 <__swsetup_r>
 80294d0:	b118      	cbz	r0, 80294da <__swbuf_r+0x32>
 80294d2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80294d6:	4638      	mov	r0, r7
 80294d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80294da:	6823      	ldr	r3, [r4, #0]
 80294dc:	6922      	ldr	r2, [r4, #16]
 80294de:	1a98      	subs	r0, r3, r2
 80294e0:	6963      	ldr	r3, [r4, #20]
 80294e2:	b2f6      	uxtb	r6, r6
 80294e4:	4283      	cmp	r3, r0
 80294e6:	4637      	mov	r7, r6
 80294e8:	dc05      	bgt.n	80294f6 <__swbuf_r+0x4e>
 80294ea:	4621      	mov	r1, r4
 80294ec:	4628      	mov	r0, r5
 80294ee:	f001 ff35 	bl	802b35c <_fflush_r>
 80294f2:	2800      	cmp	r0, #0
 80294f4:	d1ed      	bne.n	80294d2 <__swbuf_r+0x2a>
 80294f6:	68a3      	ldr	r3, [r4, #8]
 80294f8:	3b01      	subs	r3, #1
 80294fa:	60a3      	str	r3, [r4, #8]
 80294fc:	6823      	ldr	r3, [r4, #0]
 80294fe:	1c5a      	adds	r2, r3, #1
 8029500:	6022      	str	r2, [r4, #0]
 8029502:	701e      	strb	r6, [r3, #0]
 8029504:	6962      	ldr	r2, [r4, #20]
 8029506:	1c43      	adds	r3, r0, #1
 8029508:	429a      	cmp	r2, r3
 802950a:	d004      	beq.n	8029516 <__swbuf_r+0x6e>
 802950c:	89a3      	ldrh	r3, [r4, #12]
 802950e:	07db      	lsls	r3, r3, #31
 8029510:	d5e1      	bpl.n	80294d6 <__swbuf_r+0x2e>
 8029512:	2e0a      	cmp	r6, #10
 8029514:	d1df      	bne.n	80294d6 <__swbuf_r+0x2e>
 8029516:	4621      	mov	r1, r4
 8029518:	4628      	mov	r0, r5
 802951a:	f001 ff1f 	bl	802b35c <_fflush_r>
 802951e:	2800      	cmp	r0, #0
 8029520:	d0d9      	beq.n	80294d6 <__swbuf_r+0x2e>
 8029522:	e7d6      	b.n	80294d2 <__swbuf_r+0x2a>

08029524 <__swsetup_r>:
 8029524:	b538      	push	{r3, r4, r5, lr}
 8029526:	4b29      	ldr	r3, [pc, #164]	@ (80295cc <__swsetup_r+0xa8>)
 8029528:	4605      	mov	r5, r0
 802952a:	6818      	ldr	r0, [r3, #0]
 802952c:	460c      	mov	r4, r1
 802952e:	b118      	cbz	r0, 8029538 <__swsetup_r+0x14>
 8029530:	6a03      	ldr	r3, [r0, #32]
 8029532:	b90b      	cbnz	r3, 8029538 <__swsetup_r+0x14>
 8029534:	f7ff fe66 	bl	8029204 <__sinit>
 8029538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802953c:	0719      	lsls	r1, r3, #28
 802953e:	d422      	bmi.n	8029586 <__swsetup_r+0x62>
 8029540:	06da      	lsls	r2, r3, #27
 8029542:	d407      	bmi.n	8029554 <__swsetup_r+0x30>
 8029544:	2209      	movs	r2, #9
 8029546:	602a      	str	r2, [r5, #0]
 8029548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802954c:	81a3      	strh	r3, [r4, #12]
 802954e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029552:	e033      	b.n	80295bc <__swsetup_r+0x98>
 8029554:	0758      	lsls	r0, r3, #29
 8029556:	d512      	bpl.n	802957e <__swsetup_r+0x5a>
 8029558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802955a:	b141      	cbz	r1, 802956e <__swsetup_r+0x4a>
 802955c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8029560:	4299      	cmp	r1, r3
 8029562:	d002      	beq.n	802956a <__swsetup_r+0x46>
 8029564:	4628      	mov	r0, r5
 8029566:	f001 f807 	bl	802a578 <_free_r>
 802956a:	2300      	movs	r3, #0
 802956c:	6363      	str	r3, [r4, #52]	@ 0x34
 802956e:	89a3      	ldrh	r3, [r4, #12]
 8029570:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8029574:	81a3      	strh	r3, [r4, #12]
 8029576:	2300      	movs	r3, #0
 8029578:	6063      	str	r3, [r4, #4]
 802957a:	6923      	ldr	r3, [r4, #16]
 802957c:	6023      	str	r3, [r4, #0]
 802957e:	89a3      	ldrh	r3, [r4, #12]
 8029580:	f043 0308 	orr.w	r3, r3, #8
 8029584:	81a3      	strh	r3, [r4, #12]
 8029586:	6923      	ldr	r3, [r4, #16]
 8029588:	b94b      	cbnz	r3, 802959e <__swsetup_r+0x7a>
 802958a:	89a3      	ldrh	r3, [r4, #12]
 802958c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8029590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8029594:	d003      	beq.n	802959e <__swsetup_r+0x7a>
 8029596:	4621      	mov	r1, r4
 8029598:	4628      	mov	r0, r5
 802959a:	f001 ff3f 	bl	802b41c <__smakebuf_r>
 802959e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80295a2:	f013 0201 	ands.w	r2, r3, #1
 80295a6:	d00a      	beq.n	80295be <__swsetup_r+0x9a>
 80295a8:	2200      	movs	r2, #0
 80295aa:	60a2      	str	r2, [r4, #8]
 80295ac:	6962      	ldr	r2, [r4, #20]
 80295ae:	4252      	negs	r2, r2
 80295b0:	61a2      	str	r2, [r4, #24]
 80295b2:	6922      	ldr	r2, [r4, #16]
 80295b4:	b942      	cbnz	r2, 80295c8 <__swsetup_r+0xa4>
 80295b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80295ba:	d1c5      	bne.n	8029548 <__swsetup_r+0x24>
 80295bc:	bd38      	pop	{r3, r4, r5, pc}
 80295be:	0799      	lsls	r1, r3, #30
 80295c0:	bf58      	it	pl
 80295c2:	6962      	ldrpl	r2, [r4, #20]
 80295c4:	60a2      	str	r2, [r4, #8]
 80295c6:	e7f4      	b.n	80295b2 <__swsetup_r+0x8e>
 80295c8:	2000      	movs	r0, #0
 80295ca:	e7f7      	b.n	80295bc <__swsetup_r+0x98>
 80295cc:	200002b4 	.word	0x200002b4

080295d0 <memcmp>:
 80295d0:	b510      	push	{r4, lr}
 80295d2:	3901      	subs	r1, #1
 80295d4:	4402      	add	r2, r0
 80295d6:	4290      	cmp	r0, r2
 80295d8:	d101      	bne.n	80295de <memcmp+0xe>
 80295da:	2000      	movs	r0, #0
 80295dc:	e005      	b.n	80295ea <memcmp+0x1a>
 80295de:	7803      	ldrb	r3, [r0, #0]
 80295e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80295e4:	42a3      	cmp	r3, r4
 80295e6:	d001      	beq.n	80295ec <memcmp+0x1c>
 80295e8:	1b18      	subs	r0, r3, r4
 80295ea:	bd10      	pop	{r4, pc}
 80295ec:	3001      	adds	r0, #1
 80295ee:	e7f2      	b.n	80295d6 <memcmp+0x6>

080295f0 <memmove>:
 80295f0:	4288      	cmp	r0, r1
 80295f2:	b510      	push	{r4, lr}
 80295f4:	eb01 0402 	add.w	r4, r1, r2
 80295f8:	d902      	bls.n	8029600 <memmove+0x10>
 80295fa:	4284      	cmp	r4, r0
 80295fc:	4623      	mov	r3, r4
 80295fe:	d807      	bhi.n	8029610 <memmove+0x20>
 8029600:	1e43      	subs	r3, r0, #1
 8029602:	42a1      	cmp	r1, r4
 8029604:	d008      	beq.n	8029618 <memmove+0x28>
 8029606:	f811 2b01 	ldrb.w	r2, [r1], #1
 802960a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802960e:	e7f8      	b.n	8029602 <memmove+0x12>
 8029610:	4402      	add	r2, r0
 8029612:	4601      	mov	r1, r0
 8029614:	428a      	cmp	r2, r1
 8029616:	d100      	bne.n	802961a <memmove+0x2a>
 8029618:	bd10      	pop	{r4, pc}
 802961a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802961e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8029622:	e7f7      	b.n	8029614 <memmove+0x24>

08029624 <memset>:
 8029624:	4402      	add	r2, r0
 8029626:	4603      	mov	r3, r0
 8029628:	4293      	cmp	r3, r2
 802962a:	d100      	bne.n	802962e <memset+0xa>
 802962c:	4770      	bx	lr
 802962e:	f803 1b01 	strb.w	r1, [r3], #1
 8029632:	e7f9      	b.n	8029628 <memset+0x4>

08029634 <strchr>:
 8029634:	b2c9      	uxtb	r1, r1
 8029636:	4603      	mov	r3, r0
 8029638:	4618      	mov	r0, r3
 802963a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802963e:	b112      	cbz	r2, 8029646 <strchr+0x12>
 8029640:	428a      	cmp	r2, r1
 8029642:	d1f9      	bne.n	8029638 <strchr+0x4>
 8029644:	4770      	bx	lr
 8029646:	2900      	cmp	r1, #0
 8029648:	bf18      	it	ne
 802964a:	2000      	movne	r0, #0
 802964c:	4770      	bx	lr

0802964e <strncmp>:
 802964e:	b510      	push	{r4, lr}
 8029650:	b16a      	cbz	r2, 802966e <strncmp+0x20>
 8029652:	3901      	subs	r1, #1
 8029654:	1884      	adds	r4, r0, r2
 8029656:	f810 2b01 	ldrb.w	r2, [r0], #1
 802965a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802965e:	429a      	cmp	r2, r3
 8029660:	d103      	bne.n	802966a <strncmp+0x1c>
 8029662:	42a0      	cmp	r0, r4
 8029664:	d001      	beq.n	802966a <strncmp+0x1c>
 8029666:	2a00      	cmp	r2, #0
 8029668:	d1f5      	bne.n	8029656 <strncmp+0x8>
 802966a:	1ad0      	subs	r0, r2, r3
 802966c:	bd10      	pop	{r4, pc}
 802966e:	4610      	mov	r0, r2
 8029670:	e7fc      	b.n	802966c <strncmp+0x1e>

08029672 <strstr>:
 8029672:	780a      	ldrb	r2, [r1, #0]
 8029674:	b570      	push	{r4, r5, r6, lr}
 8029676:	b96a      	cbnz	r2, 8029694 <strstr+0x22>
 8029678:	bd70      	pop	{r4, r5, r6, pc}
 802967a:	429a      	cmp	r2, r3
 802967c:	d109      	bne.n	8029692 <strstr+0x20>
 802967e:	460c      	mov	r4, r1
 8029680:	4605      	mov	r5, r0
 8029682:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8029686:	2b00      	cmp	r3, #0
 8029688:	d0f6      	beq.n	8029678 <strstr+0x6>
 802968a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802968e:	429e      	cmp	r6, r3
 8029690:	d0f7      	beq.n	8029682 <strstr+0x10>
 8029692:	3001      	adds	r0, #1
 8029694:	7803      	ldrb	r3, [r0, #0]
 8029696:	2b00      	cmp	r3, #0
 8029698:	d1ef      	bne.n	802967a <strstr+0x8>
 802969a:	4618      	mov	r0, r3
 802969c:	e7ec      	b.n	8029678 <strstr+0x6>
	...

080296a0 <_localeconv_r>:
 80296a0:	4800      	ldr	r0, [pc, #0]	@ (80296a4 <_localeconv_r+0x4>)
 80296a2:	4770      	bx	lr
 80296a4:	200003f4 	.word	0x200003f4

080296a8 <_close_r>:
 80296a8:	b538      	push	{r3, r4, r5, lr}
 80296aa:	4d06      	ldr	r5, [pc, #24]	@ (80296c4 <_close_r+0x1c>)
 80296ac:	2300      	movs	r3, #0
 80296ae:	4604      	mov	r4, r0
 80296b0:	4608      	mov	r0, r1
 80296b2:	602b      	str	r3, [r5, #0]
 80296b4:	f7d8 fd60 	bl	8002178 <_close>
 80296b8:	1c43      	adds	r3, r0, #1
 80296ba:	d102      	bne.n	80296c2 <_close_r+0x1a>
 80296bc:	682b      	ldr	r3, [r5, #0]
 80296be:	b103      	cbz	r3, 80296c2 <_close_r+0x1a>
 80296c0:	6023      	str	r3, [r4, #0]
 80296c2:	bd38      	pop	{r3, r4, r5, pc}
 80296c4:	20047370 	.word	0x20047370

080296c8 <_reclaim_reent>:
 80296c8:	4b29      	ldr	r3, [pc, #164]	@ (8029770 <_reclaim_reent+0xa8>)
 80296ca:	681b      	ldr	r3, [r3, #0]
 80296cc:	4283      	cmp	r3, r0
 80296ce:	b570      	push	{r4, r5, r6, lr}
 80296d0:	4604      	mov	r4, r0
 80296d2:	d04b      	beq.n	802976c <_reclaim_reent+0xa4>
 80296d4:	69c3      	ldr	r3, [r0, #28]
 80296d6:	b1ab      	cbz	r3, 8029704 <_reclaim_reent+0x3c>
 80296d8:	68db      	ldr	r3, [r3, #12]
 80296da:	b16b      	cbz	r3, 80296f8 <_reclaim_reent+0x30>
 80296dc:	2500      	movs	r5, #0
 80296de:	69e3      	ldr	r3, [r4, #28]
 80296e0:	68db      	ldr	r3, [r3, #12]
 80296e2:	5959      	ldr	r1, [r3, r5]
 80296e4:	2900      	cmp	r1, #0
 80296e6:	d13b      	bne.n	8029760 <_reclaim_reent+0x98>
 80296e8:	3504      	adds	r5, #4
 80296ea:	2d80      	cmp	r5, #128	@ 0x80
 80296ec:	d1f7      	bne.n	80296de <_reclaim_reent+0x16>
 80296ee:	69e3      	ldr	r3, [r4, #28]
 80296f0:	4620      	mov	r0, r4
 80296f2:	68d9      	ldr	r1, [r3, #12]
 80296f4:	f000 ff40 	bl	802a578 <_free_r>
 80296f8:	69e3      	ldr	r3, [r4, #28]
 80296fa:	6819      	ldr	r1, [r3, #0]
 80296fc:	b111      	cbz	r1, 8029704 <_reclaim_reent+0x3c>
 80296fe:	4620      	mov	r0, r4
 8029700:	f000 ff3a 	bl	802a578 <_free_r>
 8029704:	6961      	ldr	r1, [r4, #20]
 8029706:	b111      	cbz	r1, 802970e <_reclaim_reent+0x46>
 8029708:	4620      	mov	r0, r4
 802970a:	f000 ff35 	bl	802a578 <_free_r>
 802970e:	69e1      	ldr	r1, [r4, #28]
 8029710:	b111      	cbz	r1, 8029718 <_reclaim_reent+0x50>
 8029712:	4620      	mov	r0, r4
 8029714:	f000 ff30 	bl	802a578 <_free_r>
 8029718:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802971a:	b111      	cbz	r1, 8029722 <_reclaim_reent+0x5a>
 802971c:	4620      	mov	r0, r4
 802971e:	f000 ff2b 	bl	802a578 <_free_r>
 8029722:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029724:	b111      	cbz	r1, 802972c <_reclaim_reent+0x64>
 8029726:	4620      	mov	r0, r4
 8029728:	f000 ff26 	bl	802a578 <_free_r>
 802972c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802972e:	b111      	cbz	r1, 8029736 <_reclaim_reent+0x6e>
 8029730:	4620      	mov	r0, r4
 8029732:	f000 ff21 	bl	802a578 <_free_r>
 8029736:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8029738:	b111      	cbz	r1, 8029740 <_reclaim_reent+0x78>
 802973a:	4620      	mov	r0, r4
 802973c:	f000 ff1c 	bl	802a578 <_free_r>
 8029740:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8029742:	b111      	cbz	r1, 802974a <_reclaim_reent+0x82>
 8029744:	4620      	mov	r0, r4
 8029746:	f000 ff17 	bl	802a578 <_free_r>
 802974a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802974c:	b111      	cbz	r1, 8029754 <_reclaim_reent+0x8c>
 802974e:	4620      	mov	r0, r4
 8029750:	f000 ff12 	bl	802a578 <_free_r>
 8029754:	6a23      	ldr	r3, [r4, #32]
 8029756:	b14b      	cbz	r3, 802976c <_reclaim_reent+0xa4>
 8029758:	4620      	mov	r0, r4
 802975a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802975e:	4718      	bx	r3
 8029760:	680e      	ldr	r6, [r1, #0]
 8029762:	4620      	mov	r0, r4
 8029764:	f000 ff08 	bl	802a578 <_free_r>
 8029768:	4631      	mov	r1, r6
 802976a:	e7bb      	b.n	80296e4 <_reclaim_reent+0x1c>
 802976c:	bd70      	pop	{r4, r5, r6, pc}
 802976e:	bf00      	nop
 8029770:	200002b4 	.word	0x200002b4

08029774 <_lseek_r>:
 8029774:	b538      	push	{r3, r4, r5, lr}
 8029776:	4d07      	ldr	r5, [pc, #28]	@ (8029794 <_lseek_r+0x20>)
 8029778:	4604      	mov	r4, r0
 802977a:	4608      	mov	r0, r1
 802977c:	4611      	mov	r1, r2
 802977e:	2200      	movs	r2, #0
 8029780:	602a      	str	r2, [r5, #0]
 8029782:	461a      	mov	r2, r3
 8029784:	f7d8 fd1f 	bl	80021c6 <_lseek>
 8029788:	1c43      	adds	r3, r0, #1
 802978a:	d102      	bne.n	8029792 <_lseek_r+0x1e>
 802978c:	682b      	ldr	r3, [r5, #0]
 802978e:	b103      	cbz	r3, 8029792 <_lseek_r+0x1e>
 8029790:	6023      	str	r3, [r4, #0]
 8029792:	bd38      	pop	{r3, r4, r5, pc}
 8029794:	20047370 	.word	0x20047370

08029798 <_read_r>:
 8029798:	b538      	push	{r3, r4, r5, lr}
 802979a:	4d07      	ldr	r5, [pc, #28]	@ (80297b8 <_read_r+0x20>)
 802979c:	4604      	mov	r4, r0
 802979e:	4608      	mov	r0, r1
 80297a0:	4611      	mov	r1, r2
 80297a2:	2200      	movs	r2, #0
 80297a4:	602a      	str	r2, [r5, #0]
 80297a6:	461a      	mov	r2, r3
 80297a8:	f7d8 fcad 	bl	8002106 <_read>
 80297ac:	1c43      	adds	r3, r0, #1
 80297ae:	d102      	bne.n	80297b6 <_read_r+0x1e>
 80297b0:	682b      	ldr	r3, [r5, #0]
 80297b2:	b103      	cbz	r3, 80297b6 <_read_r+0x1e>
 80297b4:	6023      	str	r3, [r4, #0]
 80297b6:	bd38      	pop	{r3, r4, r5, pc}
 80297b8:	20047370 	.word	0x20047370

080297bc <_sbrk_r>:
 80297bc:	b538      	push	{r3, r4, r5, lr}
 80297be:	4d06      	ldr	r5, [pc, #24]	@ (80297d8 <_sbrk_r+0x1c>)
 80297c0:	2300      	movs	r3, #0
 80297c2:	4604      	mov	r4, r0
 80297c4:	4608      	mov	r0, r1
 80297c6:	602b      	str	r3, [r5, #0]
 80297c8:	f7d8 fd0a 	bl	80021e0 <_sbrk>
 80297cc:	1c43      	adds	r3, r0, #1
 80297ce:	d102      	bne.n	80297d6 <_sbrk_r+0x1a>
 80297d0:	682b      	ldr	r3, [r5, #0]
 80297d2:	b103      	cbz	r3, 80297d6 <_sbrk_r+0x1a>
 80297d4:	6023      	str	r3, [r4, #0]
 80297d6:	bd38      	pop	{r3, r4, r5, pc}
 80297d8:	20047370 	.word	0x20047370

080297dc <_write_r>:
 80297dc:	b538      	push	{r3, r4, r5, lr}
 80297de:	4d07      	ldr	r5, [pc, #28]	@ (80297fc <_write_r+0x20>)
 80297e0:	4604      	mov	r4, r0
 80297e2:	4608      	mov	r0, r1
 80297e4:	4611      	mov	r1, r2
 80297e6:	2200      	movs	r2, #0
 80297e8:	602a      	str	r2, [r5, #0]
 80297ea:	461a      	mov	r2, r3
 80297ec:	f7d8 fca8 	bl	8002140 <_write>
 80297f0:	1c43      	adds	r3, r0, #1
 80297f2:	d102      	bne.n	80297fa <_write_r+0x1e>
 80297f4:	682b      	ldr	r3, [r5, #0]
 80297f6:	b103      	cbz	r3, 80297fa <_write_r+0x1e>
 80297f8:	6023      	str	r3, [r4, #0]
 80297fa:	bd38      	pop	{r3, r4, r5, pc}
 80297fc:	20047370 	.word	0x20047370

08029800 <__errno>:
 8029800:	4b01      	ldr	r3, [pc, #4]	@ (8029808 <__errno+0x8>)
 8029802:	6818      	ldr	r0, [r3, #0]
 8029804:	4770      	bx	lr
 8029806:	bf00      	nop
 8029808:	200002b4 	.word	0x200002b4

0802980c <__libc_init_array>:
 802980c:	b570      	push	{r4, r5, r6, lr}
 802980e:	4d0d      	ldr	r5, [pc, #52]	@ (8029844 <__libc_init_array+0x38>)
 8029810:	4c0d      	ldr	r4, [pc, #52]	@ (8029848 <__libc_init_array+0x3c>)
 8029812:	1b64      	subs	r4, r4, r5
 8029814:	10a4      	asrs	r4, r4, #2
 8029816:	2600      	movs	r6, #0
 8029818:	42a6      	cmp	r6, r4
 802981a:	d109      	bne.n	8029830 <__libc_init_array+0x24>
 802981c:	4d0b      	ldr	r5, [pc, #44]	@ (802984c <__libc_init_array+0x40>)
 802981e:	4c0c      	ldr	r4, [pc, #48]	@ (8029850 <__libc_init_array+0x44>)
 8029820:	f001 fec4 	bl	802b5ac <_init>
 8029824:	1b64      	subs	r4, r4, r5
 8029826:	10a4      	asrs	r4, r4, #2
 8029828:	2600      	movs	r6, #0
 802982a:	42a6      	cmp	r6, r4
 802982c:	d105      	bne.n	802983a <__libc_init_array+0x2e>
 802982e:	bd70      	pop	{r4, r5, r6, pc}
 8029830:	f855 3b04 	ldr.w	r3, [r5], #4
 8029834:	4798      	blx	r3
 8029836:	3601      	adds	r6, #1
 8029838:	e7ee      	b.n	8029818 <__libc_init_array+0xc>
 802983a:	f855 3b04 	ldr.w	r3, [r5], #4
 802983e:	4798      	blx	r3
 8029840:	3601      	adds	r6, #1
 8029842:	e7f2      	b.n	802982a <__libc_init_array+0x1e>
 8029844:	08030534 	.word	0x08030534
 8029848:	08030534 	.word	0x08030534
 802984c:	08030534 	.word	0x08030534
 8029850:	0803053c 	.word	0x0803053c

08029854 <__retarget_lock_init_recursive>:
 8029854:	4770      	bx	lr

08029856 <__retarget_lock_acquire_recursive>:
 8029856:	4770      	bx	lr

08029858 <__retarget_lock_release_recursive>:
 8029858:	4770      	bx	lr

0802985a <strcpy>:
 802985a:	4603      	mov	r3, r0
 802985c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029860:	f803 2b01 	strb.w	r2, [r3], #1
 8029864:	2a00      	cmp	r2, #0
 8029866:	d1f9      	bne.n	802985c <strcpy+0x2>
 8029868:	4770      	bx	lr

0802986a <memcpy>:
 802986a:	440a      	add	r2, r1
 802986c:	4291      	cmp	r1, r2
 802986e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8029872:	d100      	bne.n	8029876 <memcpy+0xc>
 8029874:	4770      	bx	lr
 8029876:	b510      	push	{r4, lr}
 8029878:	f811 4b01 	ldrb.w	r4, [r1], #1
 802987c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029880:	4291      	cmp	r1, r2
 8029882:	d1f9      	bne.n	8029878 <memcpy+0xe>
 8029884:	bd10      	pop	{r4, pc}
	...

08029888 <__assert_func>:
 8029888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802988a:	4614      	mov	r4, r2
 802988c:	461a      	mov	r2, r3
 802988e:	4b09      	ldr	r3, [pc, #36]	@ (80298b4 <__assert_func+0x2c>)
 8029890:	681b      	ldr	r3, [r3, #0]
 8029892:	4605      	mov	r5, r0
 8029894:	68d8      	ldr	r0, [r3, #12]
 8029896:	b954      	cbnz	r4, 80298ae <__assert_func+0x26>
 8029898:	4b07      	ldr	r3, [pc, #28]	@ (80298b8 <__assert_func+0x30>)
 802989a:	461c      	mov	r4, r3
 802989c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80298a0:	9100      	str	r1, [sp, #0]
 80298a2:	462b      	mov	r3, r5
 80298a4:	4905      	ldr	r1, [pc, #20]	@ (80298bc <__assert_func+0x34>)
 80298a6:	f001 fd81 	bl	802b3ac <fiprintf>
 80298aa:	f001 fe15 	bl	802b4d8 <abort>
 80298ae:	4b04      	ldr	r3, [pc, #16]	@ (80298c0 <__assert_func+0x38>)
 80298b0:	e7f4      	b.n	802989c <__assert_func+0x14>
 80298b2:	bf00      	nop
 80298b4:	200002b4 	.word	0x200002b4
 80298b8:	0803033d 	.word	0x0803033d
 80298bc:	0803030f 	.word	0x0803030f
 80298c0:	08030302 	.word	0x08030302

080298c4 <quorem>:
 80298c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80298c8:	6903      	ldr	r3, [r0, #16]
 80298ca:	690c      	ldr	r4, [r1, #16]
 80298cc:	42a3      	cmp	r3, r4
 80298ce:	4607      	mov	r7, r0
 80298d0:	db7e      	blt.n	80299d0 <quorem+0x10c>
 80298d2:	3c01      	subs	r4, #1
 80298d4:	f101 0814 	add.w	r8, r1, #20
 80298d8:	00a3      	lsls	r3, r4, #2
 80298da:	f100 0514 	add.w	r5, r0, #20
 80298de:	9300      	str	r3, [sp, #0]
 80298e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80298e4:	9301      	str	r3, [sp, #4]
 80298e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80298ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80298ee:	3301      	adds	r3, #1
 80298f0:	429a      	cmp	r2, r3
 80298f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80298f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80298fa:	d32e      	bcc.n	802995a <quorem+0x96>
 80298fc:	f04f 0a00 	mov.w	sl, #0
 8029900:	46c4      	mov	ip, r8
 8029902:	46ae      	mov	lr, r5
 8029904:	46d3      	mov	fp, sl
 8029906:	f85c 3b04 	ldr.w	r3, [ip], #4
 802990a:	b298      	uxth	r0, r3
 802990c:	fb06 a000 	mla	r0, r6, r0, sl
 8029910:	0c02      	lsrs	r2, r0, #16
 8029912:	0c1b      	lsrs	r3, r3, #16
 8029914:	fb06 2303 	mla	r3, r6, r3, r2
 8029918:	f8de 2000 	ldr.w	r2, [lr]
 802991c:	b280      	uxth	r0, r0
 802991e:	b292      	uxth	r2, r2
 8029920:	1a12      	subs	r2, r2, r0
 8029922:	445a      	add	r2, fp
 8029924:	f8de 0000 	ldr.w	r0, [lr]
 8029928:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802992c:	b29b      	uxth	r3, r3
 802992e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8029932:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8029936:	b292      	uxth	r2, r2
 8029938:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802993c:	45e1      	cmp	r9, ip
 802993e:	f84e 2b04 	str.w	r2, [lr], #4
 8029942:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8029946:	d2de      	bcs.n	8029906 <quorem+0x42>
 8029948:	9b00      	ldr	r3, [sp, #0]
 802994a:	58eb      	ldr	r3, [r5, r3]
 802994c:	b92b      	cbnz	r3, 802995a <quorem+0x96>
 802994e:	9b01      	ldr	r3, [sp, #4]
 8029950:	3b04      	subs	r3, #4
 8029952:	429d      	cmp	r5, r3
 8029954:	461a      	mov	r2, r3
 8029956:	d32f      	bcc.n	80299b8 <quorem+0xf4>
 8029958:	613c      	str	r4, [r7, #16]
 802995a:	4638      	mov	r0, r7
 802995c:	f001 f8d0 	bl	802ab00 <__mcmp>
 8029960:	2800      	cmp	r0, #0
 8029962:	db25      	blt.n	80299b0 <quorem+0xec>
 8029964:	4629      	mov	r1, r5
 8029966:	2000      	movs	r0, #0
 8029968:	f858 2b04 	ldr.w	r2, [r8], #4
 802996c:	f8d1 c000 	ldr.w	ip, [r1]
 8029970:	fa1f fe82 	uxth.w	lr, r2
 8029974:	fa1f f38c 	uxth.w	r3, ip
 8029978:	eba3 030e 	sub.w	r3, r3, lr
 802997c:	4403      	add	r3, r0
 802997e:	0c12      	lsrs	r2, r2, #16
 8029980:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8029984:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8029988:	b29b      	uxth	r3, r3
 802998a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802998e:	45c1      	cmp	r9, r8
 8029990:	f841 3b04 	str.w	r3, [r1], #4
 8029994:	ea4f 4022 	mov.w	r0, r2, asr #16
 8029998:	d2e6      	bcs.n	8029968 <quorem+0xa4>
 802999a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802999e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80299a2:	b922      	cbnz	r2, 80299ae <quorem+0xea>
 80299a4:	3b04      	subs	r3, #4
 80299a6:	429d      	cmp	r5, r3
 80299a8:	461a      	mov	r2, r3
 80299aa:	d30b      	bcc.n	80299c4 <quorem+0x100>
 80299ac:	613c      	str	r4, [r7, #16]
 80299ae:	3601      	adds	r6, #1
 80299b0:	4630      	mov	r0, r6
 80299b2:	b003      	add	sp, #12
 80299b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80299b8:	6812      	ldr	r2, [r2, #0]
 80299ba:	3b04      	subs	r3, #4
 80299bc:	2a00      	cmp	r2, #0
 80299be:	d1cb      	bne.n	8029958 <quorem+0x94>
 80299c0:	3c01      	subs	r4, #1
 80299c2:	e7c6      	b.n	8029952 <quorem+0x8e>
 80299c4:	6812      	ldr	r2, [r2, #0]
 80299c6:	3b04      	subs	r3, #4
 80299c8:	2a00      	cmp	r2, #0
 80299ca:	d1ef      	bne.n	80299ac <quorem+0xe8>
 80299cc:	3c01      	subs	r4, #1
 80299ce:	e7ea      	b.n	80299a6 <quorem+0xe2>
 80299d0:	2000      	movs	r0, #0
 80299d2:	e7ee      	b.n	80299b2 <quorem+0xee>
 80299d4:	0000      	movs	r0, r0
	...

080299d8 <_dtoa_r>:
 80299d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299dc:	69c7      	ldr	r7, [r0, #28]
 80299de:	b099      	sub	sp, #100	@ 0x64
 80299e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80299e4:	ec55 4b10 	vmov	r4, r5, d0
 80299e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80299ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80299ec:	4683      	mov	fp, r0
 80299ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80299f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80299f2:	b97f      	cbnz	r7, 8029a14 <_dtoa_r+0x3c>
 80299f4:	2010      	movs	r0, #16
 80299f6:	f7fe fcc5 	bl	8028384 <malloc>
 80299fa:	4602      	mov	r2, r0
 80299fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8029a00:	b920      	cbnz	r0, 8029a0c <_dtoa_r+0x34>
 8029a02:	4ba7      	ldr	r3, [pc, #668]	@ (8029ca0 <_dtoa_r+0x2c8>)
 8029a04:	21ef      	movs	r1, #239	@ 0xef
 8029a06:	48a7      	ldr	r0, [pc, #668]	@ (8029ca4 <_dtoa_r+0x2cc>)
 8029a08:	f7ff ff3e 	bl	8029888 <__assert_func>
 8029a0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8029a10:	6007      	str	r7, [r0, #0]
 8029a12:	60c7      	str	r7, [r0, #12]
 8029a14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8029a18:	6819      	ldr	r1, [r3, #0]
 8029a1a:	b159      	cbz	r1, 8029a34 <_dtoa_r+0x5c>
 8029a1c:	685a      	ldr	r2, [r3, #4]
 8029a1e:	604a      	str	r2, [r1, #4]
 8029a20:	2301      	movs	r3, #1
 8029a22:	4093      	lsls	r3, r2
 8029a24:	608b      	str	r3, [r1, #8]
 8029a26:	4658      	mov	r0, fp
 8029a28:	f000 fe30 	bl	802a68c <_Bfree>
 8029a2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8029a30:	2200      	movs	r2, #0
 8029a32:	601a      	str	r2, [r3, #0]
 8029a34:	1e2b      	subs	r3, r5, #0
 8029a36:	bfb9      	ittee	lt
 8029a38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8029a3c:	9303      	strlt	r3, [sp, #12]
 8029a3e:	2300      	movge	r3, #0
 8029a40:	6033      	strge	r3, [r6, #0]
 8029a42:	9f03      	ldr	r7, [sp, #12]
 8029a44:	4b98      	ldr	r3, [pc, #608]	@ (8029ca8 <_dtoa_r+0x2d0>)
 8029a46:	bfbc      	itt	lt
 8029a48:	2201      	movlt	r2, #1
 8029a4a:	6032      	strlt	r2, [r6, #0]
 8029a4c:	43bb      	bics	r3, r7
 8029a4e:	d112      	bne.n	8029a76 <_dtoa_r+0x9e>
 8029a50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029a52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8029a56:	6013      	str	r3, [r2, #0]
 8029a58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8029a5c:	4323      	orrs	r3, r4
 8029a5e:	f000 854d 	beq.w	802a4fc <_dtoa_r+0xb24>
 8029a62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029a64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8029cbc <_dtoa_r+0x2e4>
 8029a68:	2b00      	cmp	r3, #0
 8029a6a:	f000 854f 	beq.w	802a50c <_dtoa_r+0xb34>
 8029a6e:	f10a 0303 	add.w	r3, sl, #3
 8029a72:	f000 bd49 	b.w	802a508 <_dtoa_r+0xb30>
 8029a76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029a7a:	2200      	movs	r2, #0
 8029a7c:	ec51 0b17 	vmov	r0, r1, d7
 8029a80:	2300      	movs	r3, #0
 8029a82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8029a86:	f7d7 f84f 	bl	8000b28 <__aeabi_dcmpeq>
 8029a8a:	4680      	mov	r8, r0
 8029a8c:	b158      	cbz	r0, 8029aa6 <_dtoa_r+0xce>
 8029a8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029a90:	2301      	movs	r3, #1
 8029a92:	6013      	str	r3, [r2, #0]
 8029a94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029a96:	b113      	cbz	r3, 8029a9e <_dtoa_r+0xc6>
 8029a98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8029a9a:	4b84      	ldr	r3, [pc, #528]	@ (8029cac <_dtoa_r+0x2d4>)
 8029a9c:	6013      	str	r3, [r2, #0]
 8029a9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8029cc0 <_dtoa_r+0x2e8>
 8029aa2:	f000 bd33 	b.w	802a50c <_dtoa_r+0xb34>
 8029aa6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8029aaa:	aa16      	add	r2, sp, #88	@ 0x58
 8029aac:	a917      	add	r1, sp, #92	@ 0x5c
 8029aae:	4658      	mov	r0, fp
 8029ab0:	f001 f8d6 	bl	802ac60 <__d2b>
 8029ab4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8029ab8:	4681      	mov	r9, r0
 8029aba:	2e00      	cmp	r6, #0
 8029abc:	d077      	beq.n	8029bae <_dtoa_r+0x1d6>
 8029abe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029ac0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8029ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8029ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8029acc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8029ad0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8029ad4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8029ad8:	4619      	mov	r1, r3
 8029ada:	2200      	movs	r2, #0
 8029adc:	4b74      	ldr	r3, [pc, #464]	@ (8029cb0 <_dtoa_r+0x2d8>)
 8029ade:	f7d6 fc03 	bl	80002e8 <__aeabi_dsub>
 8029ae2:	a369      	add	r3, pc, #420	@ (adr r3, 8029c88 <_dtoa_r+0x2b0>)
 8029ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029ae8:	f7d6 fdb6 	bl	8000658 <__aeabi_dmul>
 8029aec:	a368      	add	r3, pc, #416	@ (adr r3, 8029c90 <_dtoa_r+0x2b8>)
 8029aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029af2:	f7d6 fbfb 	bl	80002ec <__adddf3>
 8029af6:	4604      	mov	r4, r0
 8029af8:	4630      	mov	r0, r6
 8029afa:	460d      	mov	r5, r1
 8029afc:	f7d6 fd42 	bl	8000584 <__aeabi_i2d>
 8029b00:	a365      	add	r3, pc, #404	@ (adr r3, 8029c98 <_dtoa_r+0x2c0>)
 8029b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029b06:	f7d6 fda7 	bl	8000658 <__aeabi_dmul>
 8029b0a:	4602      	mov	r2, r0
 8029b0c:	460b      	mov	r3, r1
 8029b0e:	4620      	mov	r0, r4
 8029b10:	4629      	mov	r1, r5
 8029b12:	f7d6 fbeb 	bl	80002ec <__adddf3>
 8029b16:	4604      	mov	r4, r0
 8029b18:	460d      	mov	r5, r1
 8029b1a:	f7d7 f84d 	bl	8000bb8 <__aeabi_d2iz>
 8029b1e:	2200      	movs	r2, #0
 8029b20:	4607      	mov	r7, r0
 8029b22:	2300      	movs	r3, #0
 8029b24:	4620      	mov	r0, r4
 8029b26:	4629      	mov	r1, r5
 8029b28:	f7d7 f808 	bl	8000b3c <__aeabi_dcmplt>
 8029b2c:	b140      	cbz	r0, 8029b40 <_dtoa_r+0x168>
 8029b2e:	4638      	mov	r0, r7
 8029b30:	f7d6 fd28 	bl	8000584 <__aeabi_i2d>
 8029b34:	4622      	mov	r2, r4
 8029b36:	462b      	mov	r3, r5
 8029b38:	f7d6 fff6 	bl	8000b28 <__aeabi_dcmpeq>
 8029b3c:	b900      	cbnz	r0, 8029b40 <_dtoa_r+0x168>
 8029b3e:	3f01      	subs	r7, #1
 8029b40:	2f16      	cmp	r7, #22
 8029b42:	d851      	bhi.n	8029be8 <_dtoa_r+0x210>
 8029b44:	4b5b      	ldr	r3, [pc, #364]	@ (8029cb4 <_dtoa_r+0x2dc>)
 8029b46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8029b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029b4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8029b52:	f7d6 fff3 	bl	8000b3c <__aeabi_dcmplt>
 8029b56:	2800      	cmp	r0, #0
 8029b58:	d048      	beq.n	8029bec <_dtoa_r+0x214>
 8029b5a:	3f01      	subs	r7, #1
 8029b5c:	2300      	movs	r3, #0
 8029b5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8029b60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029b62:	1b9b      	subs	r3, r3, r6
 8029b64:	1e5a      	subs	r2, r3, #1
 8029b66:	bf44      	itt	mi
 8029b68:	f1c3 0801 	rsbmi	r8, r3, #1
 8029b6c:	2300      	movmi	r3, #0
 8029b6e:	9208      	str	r2, [sp, #32]
 8029b70:	bf54      	ite	pl
 8029b72:	f04f 0800 	movpl.w	r8, #0
 8029b76:	9308      	strmi	r3, [sp, #32]
 8029b78:	2f00      	cmp	r7, #0
 8029b7a:	db39      	blt.n	8029bf0 <_dtoa_r+0x218>
 8029b7c:	9b08      	ldr	r3, [sp, #32]
 8029b7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8029b80:	443b      	add	r3, r7
 8029b82:	9308      	str	r3, [sp, #32]
 8029b84:	2300      	movs	r3, #0
 8029b86:	930a      	str	r3, [sp, #40]	@ 0x28
 8029b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b8a:	2b09      	cmp	r3, #9
 8029b8c:	d864      	bhi.n	8029c58 <_dtoa_r+0x280>
 8029b8e:	2b05      	cmp	r3, #5
 8029b90:	bfc4      	itt	gt
 8029b92:	3b04      	subgt	r3, #4
 8029b94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8029b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b98:	f1a3 0302 	sub.w	r3, r3, #2
 8029b9c:	bfcc      	ite	gt
 8029b9e:	2400      	movgt	r4, #0
 8029ba0:	2401      	movle	r4, #1
 8029ba2:	2b03      	cmp	r3, #3
 8029ba4:	d863      	bhi.n	8029c6e <_dtoa_r+0x296>
 8029ba6:	e8df f003 	tbb	[pc, r3]
 8029baa:	372a      	.short	0x372a
 8029bac:	5535      	.short	0x5535
 8029bae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8029bb2:	441e      	add	r6, r3
 8029bb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8029bb8:	2b20      	cmp	r3, #32
 8029bba:	bfc1      	itttt	gt
 8029bbc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8029bc0:	409f      	lslgt	r7, r3
 8029bc2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8029bc6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8029bca:	bfd6      	itet	le
 8029bcc:	f1c3 0320 	rsble	r3, r3, #32
 8029bd0:	ea47 0003 	orrgt.w	r0, r7, r3
 8029bd4:	fa04 f003 	lslle.w	r0, r4, r3
 8029bd8:	f7d6 fcc4 	bl	8000564 <__aeabi_ui2d>
 8029bdc:	2201      	movs	r2, #1
 8029bde:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8029be2:	3e01      	subs	r6, #1
 8029be4:	9214      	str	r2, [sp, #80]	@ 0x50
 8029be6:	e777      	b.n	8029ad8 <_dtoa_r+0x100>
 8029be8:	2301      	movs	r3, #1
 8029bea:	e7b8      	b.n	8029b5e <_dtoa_r+0x186>
 8029bec:	9012      	str	r0, [sp, #72]	@ 0x48
 8029bee:	e7b7      	b.n	8029b60 <_dtoa_r+0x188>
 8029bf0:	427b      	negs	r3, r7
 8029bf2:	930a      	str	r3, [sp, #40]	@ 0x28
 8029bf4:	2300      	movs	r3, #0
 8029bf6:	eba8 0807 	sub.w	r8, r8, r7
 8029bfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029bfc:	e7c4      	b.n	8029b88 <_dtoa_r+0x1b0>
 8029bfe:	2300      	movs	r3, #0
 8029c00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029c02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029c04:	2b00      	cmp	r3, #0
 8029c06:	dc35      	bgt.n	8029c74 <_dtoa_r+0x29c>
 8029c08:	2301      	movs	r3, #1
 8029c0a:	9300      	str	r3, [sp, #0]
 8029c0c:	9307      	str	r3, [sp, #28]
 8029c0e:	461a      	mov	r2, r3
 8029c10:	920e      	str	r2, [sp, #56]	@ 0x38
 8029c12:	e00b      	b.n	8029c2c <_dtoa_r+0x254>
 8029c14:	2301      	movs	r3, #1
 8029c16:	e7f3      	b.n	8029c00 <_dtoa_r+0x228>
 8029c18:	2300      	movs	r3, #0
 8029c1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029c1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029c1e:	18fb      	adds	r3, r7, r3
 8029c20:	9300      	str	r3, [sp, #0]
 8029c22:	3301      	adds	r3, #1
 8029c24:	2b01      	cmp	r3, #1
 8029c26:	9307      	str	r3, [sp, #28]
 8029c28:	bfb8      	it	lt
 8029c2a:	2301      	movlt	r3, #1
 8029c2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8029c30:	2100      	movs	r1, #0
 8029c32:	2204      	movs	r2, #4
 8029c34:	f102 0514 	add.w	r5, r2, #20
 8029c38:	429d      	cmp	r5, r3
 8029c3a:	d91f      	bls.n	8029c7c <_dtoa_r+0x2a4>
 8029c3c:	6041      	str	r1, [r0, #4]
 8029c3e:	4658      	mov	r0, fp
 8029c40:	f000 fce4 	bl	802a60c <_Balloc>
 8029c44:	4682      	mov	sl, r0
 8029c46:	2800      	cmp	r0, #0
 8029c48:	d13c      	bne.n	8029cc4 <_dtoa_r+0x2ec>
 8029c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8029cb8 <_dtoa_r+0x2e0>)
 8029c4c:	4602      	mov	r2, r0
 8029c4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8029c52:	e6d8      	b.n	8029a06 <_dtoa_r+0x2e>
 8029c54:	2301      	movs	r3, #1
 8029c56:	e7e0      	b.n	8029c1a <_dtoa_r+0x242>
 8029c58:	2401      	movs	r4, #1
 8029c5a:	2300      	movs	r3, #0
 8029c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8029c5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8029c60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029c64:	9300      	str	r3, [sp, #0]
 8029c66:	9307      	str	r3, [sp, #28]
 8029c68:	2200      	movs	r2, #0
 8029c6a:	2312      	movs	r3, #18
 8029c6c:	e7d0      	b.n	8029c10 <_dtoa_r+0x238>
 8029c6e:	2301      	movs	r3, #1
 8029c70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029c72:	e7f5      	b.n	8029c60 <_dtoa_r+0x288>
 8029c74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029c76:	9300      	str	r3, [sp, #0]
 8029c78:	9307      	str	r3, [sp, #28]
 8029c7a:	e7d7      	b.n	8029c2c <_dtoa_r+0x254>
 8029c7c:	3101      	adds	r1, #1
 8029c7e:	0052      	lsls	r2, r2, #1
 8029c80:	e7d8      	b.n	8029c34 <_dtoa_r+0x25c>
 8029c82:	bf00      	nop
 8029c84:	f3af 8000 	nop.w
 8029c88:	636f4361 	.word	0x636f4361
 8029c8c:	3fd287a7 	.word	0x3fd287a7
 8029c90:	8b60c8b3 	.word	0x8b60c8b3
 8029c94:	3fc68a28 	.word	0x3fc68a28
 8029c98:	509f79fb 	.word	0x509f79fb
 8029c9c:	3fd34413 	.word	0x3fd34413
 8029ca0:	0803015e 	.word	0x0803015e
 8029ca4:	0803034b 	.word	0x0803034b
 8029ca8:	7ff00000 	.word	0x7ff00000
 8029cac:	080302df 	.word	0x080302df
 8029cb0:	3ff80000 	.word	0x3ff80000
 8029cb4:	08030448 	.word	0x08030448
 8029cb8:	080303a3 	.word	0x080303a3
 8029cbc:	08030347 	.word	0x08030347
 8029cc0:	080302de 	.word	0x080302de
 8029cc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8029cc8:	6018      	str	r0, [r3, #0]
 8029cca:	9b07      	ldr	r3, [sp, #28]
 8029ccc:	2b0e      	cmp	r3, #14
 8029cce:	f200 80a4 	bhi.w	8029e1a <_dtoa_r+0x442>
 8029cd2:	2c00      	cmp	r4, #0
 8029cd4:	f000 80a1 	beq.w	8029e1a <_dtoa_r+0x442>
 8029cd8:	2f00      	cmp	r7, #0
 8029cda:	dd33      	ble.n	8029d44 <_dtoa_r+0x36c>
 8029cdc:	4bad      	ldr	r3, [pc, #692]	@ (8029f94 <_dtoa_r+0x5bc>)
 8029cde:	f007 020f 	and.w	r2, r7, #15
 8029ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8029ce6:	ed93 7b00 	vldr	d7, [r3]
 8029cea:	05f8      	lsls	r0, r7, #23
 8029cec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8029cf0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8029cf4:	d516      	bpl.n	8029d24 <_dtoa_r+0x34c>
 8029cf6:	4ba8      	ldr	r3, [pc, #672]	@ (8029f98 <_dtoa_r+0x5c0>)
 8029cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8029cfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8029d00:	f7d6 fdd4 	bl	80008ac <__aeabi_ddiv>
 8029d04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029d08:	f004 040f 	and.w	r4, r4, #15
 8029d0c:	2603      	movs	r6, #3
 8029d0e:	4da2      	ldr	r5, [pc, #648]	@ (8029f98 <_dtoa_r+0x5c0>)
 8029d10:	b954      	cbnz	r4, 8029d28 <_dtoa_r+0x350>
 8029d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8029d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029d1a:	f7d6 fdc7 	bl	80008ac <__aeabi_ddiv>
 8029d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029d22:	e028      	b.n	8029d76 <_dtoa_r+0x39e>
 8029d24:	2602      	movs	r6, #2
 8029d26:	e7f2      	b.n	8029d0e <_dtoa_r+0x336>
 8029d28:	07e1      	lsls	r1, r4, #31
 8029d2a:	d508      	bpl.n	8029d3e <_dtoa_r+0x366>
 8029d2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029d30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8029d34:	f7d6 fc90 	bl	8000658 <__aeabi_dmul>
 8029d38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8029d3c:	3601      	adds	r6, #1
 8029d3e:	1064      	asrs	r4, r4, #1
 8029d40:	3508      	adds	r5, #8
 8029d42:	e7e5      	b.n	8029d10 <_dtoa_r+0x338>
 8029d44:	f000 80d2 	beq.w	8029eec <_dtoa_r+0x514>
 8029d48:	427c      	negs	r4, r7
 8029d4a:	4b92      	ldr	r3, [pc, #584]	@ (8029f94 <_dtoa_r+0x5bc>)
 8029d4c:	4d92      	ldr	r5, [pc, #584]	@ (8029f98 <_dtoa_r+0x5c0>)
 8029d4e:	f004 020f 	and.w	r2, r4, #15
 8029d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8029d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029d5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8029d5e:	f7d6 fc7b 	bl	8000658 <__aeabi_dmul>
 8029d62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029d66:	1124      	asrs	r4, r4, #4
 8029d68:	2300      	movs	r3, #0
 8029d6a:	2602      	movs	r6, #2
 8029d6c:	2c00      	cmp	r4, #0
 8029d6e:	f040 80b2 	bne.w	8029ed6 <_dtoa_r+0x4fe>
 8029d72:	2b00      	cmp	r3, #0
 8029d74:	d1d3      	bne.n	8029d1e <_dtoa_r+0x346>
 8029d76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029d78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8029d7c:	2b00      	cmp	r3, #0
 8029d7e:	f000 80b7 	beq.w	8029ef0 <_dtoa_r+0x518>
 8029d82:	4b86      	ldr	r3, [pc, #536]	@ (8029f9c <_dtoa_r+0x5c4>)
 8029d84:	2200      	movs	r2, #0
 8029d86:	4620      	mov	r0, r4
 8029d88:	4629      	mov	r1, r5
 8029d8a:	f7d6 fed7 	bl	8000b3c <__aeabi_dcmplt>
 8029d8e:	2800      	cmp	r0, #0
 8029d90:	f000 80ae 	beq.w	8029ef0 <_dtoa_r+0x518>
 8029d94:	9b07      	ldr	r3, [sp, #28]
 8029d96:	2b00      	cmp	r3, #0
 8029d98:	f000 80aa 	beq.w	8029ef0 <_dtoa_r+0x518>
 8029d9c:	9b00      	ldr	r3, [sp, #0]
 8029d9e:	2b00      	cmp	r3, #0
 8029da0:	dd37      	ble.n	8029e12 <_dtoa_r+0x43a>
 8029da2:	1e7b      	subs	r3, r7, #1
 8029da4:	9304      	str	r3, [sp, #16]
 8029da6:	4620      	mov	r0, r4
 8029da8:	4b7d      	ldr	r3, [pc, #500]	@ (8029fa0 <_dtoa_r+0x5c8>)
 8029daa:	2200      	movs	r2, #0
 8029dac:	4629      	mov	r1, r5
 8029dae:	f7d6 fc53 	bl	8000658 <__aeabi_dmul>
 8029db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029db6:	9c00      	ldr	r4, [sp, #0]
 8029db8:	3601      	adds	r6, #1
 8029dba:	4630      	mov	r0, r6
 8029dbc:	f7d6 fbe2 	bl	8000584 <__aeabi_i2d>
 8029dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8029dc4:	f7d6 fc48 	bl	8000658 <__aeabi_dmul>
 8029dc8:	4b76      	ldr	r3, [pc, #472]	@ (8029fa4 <_dtoa_r+0x5cc>)
 8029dca:	2200      	movs	r2, #0
 8029dcc:	f7d6 fa8e 	bl	80002ec <__adddf3>
 8029dd0:	4605      	mov	r5, r0
 8029dd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8029dd6:	2c00      	cmp	r4, #0
 8029dd8:	f040 808d 	bne.w	8029ef6 <_dtoa_r+0x51e>
 8029ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029de0:	4b71      	ldr	r3, [pc, #452]	@ (8029fa8 <_dtoa_r+0x5d0>)
 8029de2:	2200      	movs	r2, #0
 8029de4:	f7d6 fa80 	bl	80002e8 <__aeabi_dsub>
 8029de8:	4602      	mov	r2, r0
 8029dea:	460b      	mov	r3, r1
 8029dec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8029df0:	462a      	mov	r2, r5
 8029df2:	4633      	mov	r3, r6
 8029df4:	f7d6 fec0 	bl	8000b78 <__aeabi_dcmpgt>
 8029df8:	2800      	cmp	r0, #0
 8029dfa:	f040 828b 	bne.w	802a314 <_dtoa_r+0x93c>
 8029dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029e02:	462a      	mov	r2, r5
 8029e04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8029e08:	f7d6 fe98 	bl	8000b3c <__aeabi_dcmplt>
 8029e0c:	2800      	cmp	r0, #0
 8029e0e:	f040 8128 	bne.w	802a062 <_dtoa_r+0x68a>
 8029e12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8029e16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8029e1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029e1c:	2b00      	cmp	r3, #0
 8029e1e:	f2c0 815a 	blt.w	802a0d6 <_dtoa_r+0x6fe>
 8029e22:	2f0e      	cmp	r7, #14
 8029e24:	f300 8157 	bgt.w	802a0d6 <_dtoa_r+0x6fe>
 8029e28:	4b5a      	ldr	r3, [pc, #360]	@ (8029f94 <_dtoa_r+0x5bc>)
 8029e2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8029e2e:	ed93 7b00 	vldr	d7, [r3]
 8029e32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029e34:	2b00      	cmp	r3, #0
 8029e36:	ed8d 7b00 	vstr	d7, [sp]
 8029e3a:	da03      	bge.n	8029e44 <_dtoa_r+0x46c>
 8029e3c:	9b07      	ldr	r3, [sp, #28]
 8029e3e:	2b00      	cmp	r3, #0
 8029e40:	f340 8101 	ble.w	802a046 <_dtoa_r+0x66e>
 8029e44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8029e48:	4656      	mov	r6, sl
 8029e4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029e4e:	4620      	mov	r0, r4
 8029e50:	4629      	mov	r1, r5
 8029e52:	f7d6 fd2b 	bl	80008ac <__aeabi_ddiv>
 8029e56:	f7d6 feaf 	bl	8000bb8 <__aeabi_d2iz>
 8029e5a:	4680      	mov	r8, r0
 8029e5c:	f7d6 fb92 	bl	8000584 <__aeabi_i2d>
 8029e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029e64:	f7d6 fbf8 	bl	8000658 <__aeabi_dmul>
 8029e68:	4602      	mov	r2, r0
 8029e6a:	460b      	mov	r3, r1
 8029e6c:	4620      	mov	r0, r4
 8029e6e:	4629      	mov	r1, r5
 8029e70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8029e74:	f7d6 fa38 	bl	80002e8 <__aeabi_dsub>
 8029e78:	f806 4b01 	strb.w	r4, [r6], #1
 8029e7c:	9d07      	ldr	r5, [sp, #28]
 8029e7e:	eba6 040a 	sub.w	r4, r6, sl
 8029e82:	42a5      	cmp	r5, r4
 8029e84:	4602      	mov	r2, r0
 8029e86:	460b      	mov	r3, r1
 8029e88:	f040 8117 	bne.w	802a0ba <_dtoa_r+0x6e2>
 8029e8c:	f7d6 fa2e 	bl	80002ec <__adddf3>
 8029e90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029e94:	4604      	mov	r4, r0
 8029e96:	460d      	mov	r5, r1
 8029e98:	f7d6 fe6e 	bl	8000b78 <__aeabi_dcmpgt>
 8029e9c:	2800      	cmp	r0, #0
 8029e9e:	f040 80f9 	bne.w	802a094 <_dtoa_r+0x6bc>
 8029ea2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029ea6:	4620      	mov	r0, r4
 8029ea8:	4629      	mov	r1, r5
 8029eaa:	f7d6 fe3d 	bl	8000b28 <__aeabi_dcmpeq>
 8029eae:	b118      	cbz	r0, 8029eb8 <_dtoa_r+0x4e0>
 8029eb0:	f018 0f01 	tst.w	r8, #1
 8029eb4:	f040 80ee 	bne.w	802a094 <_dtoa_r+0x6bc>
 8029eb8:	4649      	mov	r1, r9
 8029eba:	4658      	mov	r0, fp
 8029ebc:	f000 fbe6 	bl	802a68c <_Bfree>
 8029ec0:	2300      	movs	r3, #0
 8029ec2:	7033      	strb	r3, [r6, #0]
 8029ec4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029ec6:	3701      	adds	r7, #1
 8029ec8:	601f      	str	r7, [r3, #0]
 8029eca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029ecc:	2b00      	cmp	r3, #0
 8029ece:	f000 831d 	beq.w	802a50c <_dtoa_r+0xb34>
 8029ed2:	601e      	str	r6, [r3, #0]
 8029ed4:	e31a      	b.n	802a50c <_dtoa_r+0xb34>
 8029ed6:	07e2      	lsls	r2, r4, #31
 8029ed8:	d505      	bpl.n	8029ee6 <_dtoa_r+0x50e>
 8029eda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8029ede:	f7d6 fbbb 	bl	8000658 <__aeabi_dmul>
 8029ee2:	3601      	adds	r6, #1
 8029ee4:	2301      	movs	r3, #1
 8029ee6:	1064      	asrs	r4, r4, #1
 8029ee8:	3508      	adds	r5, #8
 8029eea:	e73f      	b.n	8029d6c <_dtoa_r+0x394>
 8029eec:	2602      	movs	r6, #2
 8029eee:	e742      	b.n	8029d76 <_dtoa_r+0x39e>
 8029ef0:	9c07      	ldr	r4, [sp, #28]
 8029ef2:	9704      	str	r7, [sp, #16]
 8029ef4:	e761      	b.n	8029dba <_dtoa_r+0x3e2>
 8029ef6:	4b27      	ldr	r3, [pc, #156]	@ (8029f94 <_dtoa_r+0x5bc>)
 8029ef8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029efa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8029efe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8029f02:	4454      	add	r4, sl
 8029f04:	2900      	cmp	r1, #0
 8029f06:	d053      	beq.n	8029fb0 <_dtoa_r+0x5d8>
 8029f08:	4928      	ldr	r1, [pc, #160]	@ (8029fac <_dtoa_r+0x5d4>)
 8029f0a:	2000      	movs	r0, #0
 8029f0c:	f7d6 fcce 	bl	80008ac <__aeabi_ddiv>
 8029f10:	4633      	mov	r3, r6
 8029f12:	462a      	mov	r2, r5
 8029f14:	f7d6 f9e8 	bl	80002e8 <__aeabi_dsub>
 8029f18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8029f1c:	4656      	mov	r6, sl
 8029f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029f22:	f7d6 fe49 	bl	8000bb8 <__aeabi_d2iz>
 8029f26:	4605      	mov	r5, r0
 8029f28:	f7d6 fb2c 	bl	8000584 <__aeabi_i2d>
 8029f2c:	4602      	mov	r2, r0
 8029f2e:	460b      	mov	r3, r1
 8029f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029f34:	f7d6 f9d8 	bl	80002e8 <__aeabi_dsub>
 8029f38:	3530      	adds	r5, #48	@ 0x30
 8029f3a:	4602      	mov	r2, r0
 8029f3c:	460b      	mov	r3, r1
 8029f3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8029f42:	f806 5b01 	strb.w	r5, [r6], #1
 8029f46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8029f4a:	f7d6 fdf7 	bl	8000b3c <__aeabi_dcmplt>
 8029f4e:	2800      	cmp	r0, #0
 8029f50:	d171      	bne.n	802a036 <_dtoa_r+0x65e>
 8029f52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8029f56:	4911      	ldr	r1, [pc, #68]	@ (8029f9c <_dtoa_r+0x5c4>)
 8029f58:	2000      	movs	r0, #0
 8029f5a:	f7d6 f9c5 	bl	80002e8 <__aeabi_dsub>
 8029f5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8029f62:	f7d6 fdeb 	bl	8000b3c <__aeabi_dcmplt>
 8029f66:	2800      	cmp	r0, #0
 8029f68:	f040 8095 	bne.w	802a096 <_dtoa_r+0x6be>
 8029f6c:	42a6      	cmp	r6, r4
 8029f6e:	f43f af50 	beq.w	8029e12 <_dtoa_r+0x43a>
 8029f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8029f76:	4b0a      	ldr	r3, [pc, #40]	@ (8029fa0 <_dtoa_r+0x5c8>)
 8029f78:	2200      	movs	r2, #0
 8029f7a:	f7d6 fb6d 	bl	8000658 <__aeabi_dmul>
 8029f7e:	4b08      	ldr	r3, [pc, #32]	@ (8029fa0 <_dtoa_r+0x5c8>)
 8029f80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8029f84:	2200      	movs	r2, #0
 8029f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029f8a:	f7d6 fb65 	bl	8000658 <__aeabi_dmul>
 8029f8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029f92:	e7c4      	b.n	8029f1e <_dtoa_r+0x546>
 8029f94:	08030448 	.word	0x08030448
 8029f98:	08030420 	.word	0x08030420
 8029f9c:	3ff00000 	.word	0x3ff00000
 8029fa0:	40240000 	.word	0x40240000
 8029fa4:	401c0000 	.word	0x401c0000
 8029fa8:	40140000 	.word	0x40140000
 8029fac:	3fe00000 	.word	0x3fe00000
 8029fb0:	4631      	mov	r1, r6
 8029fb2:	4628      	mov	r0, r5
 8029fb4:	f7d6 fb50 	bl	8000658 <__aeabi_dmul>
 8029fb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8029fbc:	9415      	str	r4, [sp, #84]	@ 0x54
 8029fbe:	4656      	mov	r6, sl
 8029fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029fc4:	f7d6 fdf8 	bl	8000bb8 <__aeabi_d2iz>
 8029fc8:	4605      	mov	r5, r0
 8029fca:	f7d6 fadb 	bl	8000584 <__aeabi_i2d>
 8029fce:	4602      	mov	r2, r0
 8029fd0:	460b      	mov	r3, r1
 8029fd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029fd6:	f7d6 f987 	bl	80002e8 <__aeabi_dsub>
 8029fda:	3530      	adds	r5, #48	@ 0x30
 8029fdc:	f806 5b01 	strb.w	r5, [r6], #1
 8029fe0:	4602      	mov	r2, r0
 8029fe2:	460b      	mov	r3, r1
 8029fe4:	42a6      	cmp	r6, r4
 8029fe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8029fea:	f04f 0200 	mov.w	r2, #0
 8029fee:	d124      	bne.n	802a03a <_dtoa_r+0x662>
 8029ff0:	4bac      	ldr	r3, [pc, #688]	@ (802a2a4 <_dtoa_r+0x8cc>)
 8029ff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8029ff6:	f7d6 f979 	bl	80002ec <__adddf3>
 8029ffa:	4602      	mov	r2, r0
 8029ffc:	460b      	mov	r3, r1
 8029ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802a002:	f7d6 fdb9 	bl	8000b78 <__aeabi_dcmpgt>
 802a006:	2800      	cmp	r0, #0
 802a008:	d145      	bne.n	802a096 <_dtoa_r+0x6be>
 802a00a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802a00e:	49a5      	ldr	r1, [pc, #660]	@ (802a2a4 <_dtoa_r+0x8cc>)
 802a010:	2000      	movs	r0, #0
 802a012:	f7d6 f969 	bl	80002e8 <__aeabi_dsub>
 802a016:	4602      	mov	r2, r0
 802a018:	460b      	mov	r3, r1
 802a01a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802a01e:	f7d6 fd8d 	bl	8000b3c <__aeabi_dcmplt>
 802a022:	2800      	cmp	r0, #0
 802a024:	f43f aef5 	beq.w	8029e12 <_dtoa_r+0x43a>
 802a028:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802a02a:	1e73      	subs	r3, r6, #1
 802a02c:	9315      	str	r3, [sp, #84]	@ 0x54
 802a02e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802a032:	2b30      	cmp	r3, #48	@ 0x30
 802a034:	d0f8      	beq.n	802a028 <_dtoa_r+0x650>
 802a036:	9f04      	ldr	r7, [sp, #16]
 802a038:	e73e      	b.n	8029eb8 <_dtoa_r+0x4e0>
 802a03a:	4b9b      	ldr	r3, [pc, #620]	@ (802a2a8 <_dtoa_r+0x8d0>)
 802a03c:	f7d6 fb0c 	bl	8000658 <__aeabi_dmul>
 802a040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802a044:	e7bc      	b.n	8029fc0 <_dtoa_r+0x5e8>
 802a046:	d10c      	bne.n	802a062 <_dtoa_r+0x68a>
 802a048:	4b98      	ldr	r3, [pc, #608]	@ (802a2ac <_dtoa_r+0x8d4>)
 802a04a:	2200      	movs	r2, #0
 802a04c:	e9dd 0100 	ldrd	r0, r1, [sp]
 802a050:	f7d6 fb02 	bl	8000658 <__aeabi_dmul>
 802a054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802a058:	f7d6 fd84 	bl	8000b64 <__aeabi_dcmpge>
 802a05c:	2800      	cmp	r0, #0
 802a05e:	f000 8157 	beq.w	802a310 <_dtoa_r+0x938>
 802a062:	2400      	movs	r4, #0
 802a064:	4625      	mov	r5, r4
 802a066:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a068:	43db      	mvns	r3, r3
 802a06a:	9304      	str	r3, [sp, #16]
 802a06c:	4656      	mov	r6, sl
 802a06e:	2700      	movs	r7, #0
 802a070:	4621      	mov	r1, r4
 802a072:	4658      	mov	r0, fp
 802a074:	f000 fb0a 	bl	802a68c <_Bfree>
 802a078:	2d00      	cmp	r5, #0
 802a07a:	d0dc      	beq.n	802a036 <_dtoa_r+0x65e>
 802a07c:	b12f      	cbz	r7, 802a08a <_dtoa_r+0x6b2>
 802a07e:	42af      	cmp	r7, r5
 802a080:	d003      	beq.n	802a08a <_dtoa_r+0x6b2>
 802a082:	4639      	mov	r1, r7
 802a084:	4658      	mov	r0, fp
 802a086:	f000 fb01 	bl	802a68c <_Bfree>
 802a08a:	4629      	mov	r1, r5
 802a08c:	4658      	mov	r0, fp
 802a08e:	f000 fafd 	bl	802a68c <_Bfree>
 802a092:	e7d0      	b.n	802a036 <_dtoa_r+0x65e>
 802a094:	9704      	str	r7, [sp, #16]
 802a096:	4633      	mov	r3, r6
 802a098:	461e      	mov	r6, r3
 802a09a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802a09e:	2a39      	cmp	r2, #57	@ 0x39
 802a0a0:	d107      	bne.n	802a0b2 <_dtoa_r+0x6da>
 802a0a2:	459a      	cmp	sl, r3
 802a0a4:	d1f8      	bne.n	802a098 <_dtoa_r+0x6c0>
 802a0a6:	9a04      	ldr	r2, [sp, #16]
 802a0a8:	3201      	adds	r2, #1
 802a0aa:	9204      	str	r2, [sp, #16]
 802a0ac:	2230      	movs	r2, #48	@ 0x30
 802a0ae:	f88a 2000 	strb.w	r2, [sl]
 802a0b2:	781a      	ldrb	r2, [r3, #0]
 802a0b4:	3201      	adds	r2, #1
 802a0b6:	701a      	strb	r2, [r3, #0]
 802a0b8:	e7bd      	b.n	802a036 <_dtoa_r+0x65e>
 802a0ba:	4b7b      	ldr	r3, [pc, #492]	@ (802a2a8 <_dtoa_r+0x8d0>)
 802a0bc:	2200      	movs	r2, #0
 802a0be:	f7d6 facb 	bl	8000658 <__aeabi_dmul>
 802a0c2:	2200      	movs	r2, #0
 802a0c4:	2300      	movs	r3, #0
 802a0c6:	4604      	mov	r4, r0
 802a0c8:	460d      	mov	r5, r1
 802a0ca:	f7d6 fd2d 	bl	8000b28 <__aeabi_dcmpeq>
 802a0ce:	2800      	cmp	r0, #0
 802a0d0:	f43f aebb 	beq.w	8029e4a <_dtoa_r+0x472>
 802a0d4:	e6f0      	b.n	8029eb8 <_dtoa_r+0x4e0>
 802a0d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802a0d8:	2a00      	cmp	r2, #0
 802a0da:	f000 80db 	beq.w	802a294 <_dtoa_r+0x8bc>
 802a0de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a0e0:	2a01      	cmp	r2, #1
 802a0e2:	f300 80bf 	bgt.w	802a264 <_dtoa_r+0x88c>
 802a0e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802a0e8:	2a00      	cmp	r2, #0
 802a0ea:	f000 80b7 	beq.w	802a25c <_dtoa_r+0x884>
 802a0ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802a0f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802a0f4:	4646      	mov	r6, r8
 802a0f6:	9a08      	ldr	r2, [sp, #32]
 802a0f8:	2101      	movs	r1, #1
 802a0fa:	441a      	add	r2, r3
 802a0fc:	4658      	mov	r0, fp
 802a0fe:	4498      	add	r8, r3
 802a100:	9208      	str	r2, [sp, #32]
 802a102:	f000 fb77 	bl	802a7f4 <__i2b>
 802a106:	4605      	mov	r5, r0
 802a108:	b15e      	cbz	r6, 802a122 <_dtoa_r+0x74a>
 802a10a:	9b08      	ldr	r3, [sp, #32]
 802a10c:	2b00      	cmp	r3, #0
 802a10e:	dd08      	ble.n	802a122 <_dtoa_r+0x74a>
 802a110:	42b3      	cmp	r3, r6
 802a112:	9a08      	ldr	r2, [sp, #32]
 802a114:	bfa8      	it	ge
 802a116:	4633      	movge	r3, r6
 802a118:	eba8 0803 	sub.w	r8, r8, r3
 802a11c:	1af6      	subs	r6, r6, r3
 802a11e:	1ad3      	subs	r3, r2, r3
 802a120:	9308      	str	r3, [sp, #32]
 802a122:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a124:	b1f3      	cbz	r3, 802a164 <_dtoa_r+0x78c>
 802a126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a128:	2b00      	cmp	r3, #0
 802a12a:	f000 80b7 	beq.w	802a29c <_dtoa_r+0x8c4>
 802a12e:	b18c      	cbz	r4, 802a154 <_dtoa_r+0x77c>
 802a130:	4629      	mov	r1, r5
 802a132:	4622      	mov	r2, r4
 802a134:	4658      	mov	r0, fp
 802a136:	f000 fc1d 	bl	802a974 <__pow5mult>
 802a13a:	464a      	mov	r2, r9
 802a13c:	4601      	mov	r1, r0
 802a13e:	4605      	mov	r5, r0
 802a140:	4658      	mov	r0, fp
 802a142:	f000 fb6d 	bl	802a820 <__multiply>
 802a146:	4649      	mov	r1, r9
 802a148:	9004      	str	r0, [sp, #16]
 802a14a:	4658      	mov	r0, fp
 802a14c:	f000 fa9e 	bl	802a68c <_Bfree>
 802a150:	9b04      	ldr	r3, [sp, #16]
 802a152:	4699      	mov	r9, r3
 802a154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a156:	1b1a      	subs	r2, r3, r4
 802a158:	d004      	beq.n	802a164 <_dtoa_r+0x78c>
 802a15a:	4649      	mov	r1, r9
 802a15c:	4658      	mov	r0, fp
 802a15e:	f000 fc09 	bl	802a974 <__pow5mult>
 802a162:	4681      	mov	r9, r0
 802a164:	2101      	movs	r1, #1
 802a166:	4658      	mov	r0, fp
 802a168:	f000 fb44 	bl	802a7f4 <__i2b>
 802a16c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802a16e:	4604      	mov	r4, r0
 802a170:	2b00      	cmp	r3, #0
 802a172:	f000 81cf 	beq.w	802a514 <_dtoa_r+0xb3c>
 802a176:	461a      	mov	r2, r3
 802a178:	4601      	mov	r1, r0
 802a17a:	4658      	mov	r0, fp
 802a17c:	f000 fbfa 	bl	802a974 <__pow5mult>
 802a180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a182:	2b01      	cmp	r3, #1
 802a184:	4604      	mov	r4, r0
 802a186:	f300 8095 	bgt.w	802a2b4 <_dtoa_r+0x8dc>
 802a18a:	9b02      	ldr	r3, [sp, #8]
 802a18c:	2b00      	cmp	r3, #0
 802a18e:	f040 8087 	bne.w	802a2a0 <_dtoa_r+0x8c8>
 802a192:	9b03      	ldr	r3, [sp, #12]
 802a194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802a198:	2b00      	cmp	r3, #0
 802a19a:	f040 8089 	bne.w	802a2b0 <_dtoa_r+0x8d8>
 802a19e:	9b03      	ldr	r3, [sp, #12]
 802a1a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a1a4:	0d1b      	lsrs	r3, r3, #20
 802a1a6:	051b      	lsls	r3, r3, #20
 802a1a8:	b12b      	cbz	r3, 802a1b6 <_dtoa_r+0x7de>
 802a1aa:	9b08      	ldr	r3, [sp, #32]
 802a1ac:	3301      	adds	r3, #1
 802a1ae:	9308      	str	r3, [sp, #32]
 802a1b0:	f108 0801 	add.w	r8, r8, #1
 802a1b4:	2301      	movs	r3, #1
 802a1b6:	930a      	str	r3, [sp, #40]	@ 0x28
 802a1b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802a1ba:	2b00      	cmp	r3, #0
 802a1bc:	f000 81b0 	beq.w	802a520 <_dtoa_r+0xb48>
 802a1c0:	6923      	ldr	r3, [r4, #16]
 802a1c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802a1c6:	6918      	ldr	r0, [r3, #16]
 802a1c8:	f000 fac8 	bl	802a75c <__hi0bits>
 802a1cc:	f1c0 0020 	rsb	r0, r0, #32
 802a1d0:	9b08      	ldr	r3, [sp, #32]
 802a1d2:	4418      	add	r0, r3
 802a1d4:	f010 001f 	ands.w	r0, r0, #31
 802a1d8:	d077      	beq.n	802a2ca <_dtoa_r+0x8f2>
 802a1da:	f1c0 0320 	rsb	r3, r0, #32
 802a1de:	2b04      	cmp	r3, #4
 802a1e0:	dd6b      	ble.n	802a2ba <_dtoa_r+0x8e2>
 802a1e2:	9b08      	ldr	r3, [sp, #32]
 802a1e4:	f1c0 001c 	rsb	r0, r0, #28
 802a1e8:	4403      	add	r3, r0
 802a1ea:	4480      	add	r8, r0
 802a1ec:	4406      	add	r6, r0
 802a1ee:	9308      	str	r3, [sp, #32]
 802a1f0:	f1b8 0f00 	cmp.w	r8, #0
 802a1f4:	dd05      	ble.n	802a202 <_dtoa_r+0x82a>
 802a1f6:	4649      	mov	r1, r9
 802a1f8:	4642      	mov	r2, r8
 802a1fa:	4658      	mov	r0, fp
 802a1fc:	f000 fc14 	bl	802aa28 <__lshift>
 802a200:	4681      	mov	r9, r0
 802a202:	9b08      	ldr	r3, [sp, #32]
 802a204:	2b00      	cmp	r3, #0
 802a206:	dd05      	ble.n	802a214 <_dtoa_r+0x83c>
 802a208:	4621      	mov	r1, r4
 802a20a:	461a      	mov	r2, r3
 802a20c:	4658      	mov	r0, fp
 802a20e:	f000 fc0b 	bl	802aa28 <__lshift>
 802a212:	4604      	mov	r4, r0
 802a214:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a216:	2b00      	cmp	r3, #0
 802a218:	d059      	beq.n	802a2ce <_dtoa_r+0x8f6>
 802a21a:	4621      	mov	r1, r4
 802a21c:	4648      	mov	r0, r9
 802a21e:	f000 fc6f 	bl	802ab00 <__mcmp>
 802a222:	2800      	cmp	r0, #0
 802a224:	da53      	bge.n	802a2ce <_dtoa_r+0x8f6>
 802a226:	1e7b      	subs	r3, r7, #1
 802a228:	9304      	str	r3, [sp, #16]
 802a22a:	4649      	mov	r1, r9
 802a22c:	2300      	movs	r3, #0
 802a22e:	220a      	movs	r2, #10
 802a230:	4658      	mov	r0, fp
 802a232:	f000 fa4d 	bl	802a6d0 <__multadd>
 802a236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a238:	4681      	mov	r9, r0
 802a23a:	2b00      	cmp	r3, #0
 802a23c:	f000 8172 	beq.w	802a524 <_dtoa_r+0xb4c>
 802a240:	2300      	movs	r3, #0
 802a242:	4629      	mov	r1, r5
 802a244:	220a      	movs	r2, #10
 802a246:	4658      	mov	r0, fp
 802a248:	f000 fa42 	bl	802a6d0 <__multadd>
 802a24c:	9b00      	ldr	r3, [sp, #0]
 802a24e:	2b00      	cmp	r3, #0
 802a250:	4605      	mov	r5, r0
 802a252:	dc67      	bgt.n	802a324 <_dtoa_r+0x94c>
 802a254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a256:	2b02      	cmp	r3, #2
 802a258:	dc41      	bgt.n	802a2de <_dtoa_r+0x906>
 802a25a:	e063      	b.n	802a324 <_dtoa_r+0x94c>
 802a25c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a25e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802a262:	e746      	b.n	802a0f2 <_dtoa_r+0x71a>
 802a264:	9b07      	ldr	r3, [sp, #28]
 802a266:	1e5c      	subs	r4, r3, #1
 802a268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a26a:	42a3      	cmp	r3, r4
 802a26c:	bfbf      	itttt	lt
 802a26e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802a270:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802a272:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802a274:	1ae3      	sublt	r3, r4, r3
 802a276:	bfb4      	ite	lt
 802a278:	18d2      	addlt	r2, r2, r3
 802a27a:	1b1c      	subge	r4, r3, r4
 802a27c:	9b07      	ldr	r3, [sp, #28]
 802a27e:	bfbc      	itt	lt
 802a280:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802a282:	2400      	movlt	r4, #0
 802a284:	2b00      	cmp	r3, #0
 802a286:	bfb5      	itete	lt
 802a288:	eba8 0603 	sublt.w	r6, r8, r3
 802a28c:	9b07      	ldrge	r3, [sp, #28]
 802a28e:	2300      	movlt	r3, #0
 802a290:	4646      	movge	r6, r8
 802a292:	e730      	b.n	802a0f6 <_dtoa_r+0x71e>
 802a294:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802a296:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802a298:	4646      	mov	r6, r8
 802a29a:	e735      	b.n	802a108 <_dtoa_r+0x730>
 802a29c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a29e:	e75c      	b.n	802a15a <_dtoa_r+0x782>
 802a2a0:	2300      	movs	r3, #0
 802a2a2:	e788      	b.n	802a1b6 <_dtoa_r+0x7de>
 802a2a4:	3fe00000 	.word	0x3fe00000
 802a2a8:	40240000 	.word	0x40240000
 802a2ac:	40140000 	.word	0x40140000
 802a2b0:	9b02      	ldr	r3, [sp, #8]
 802a2b2:	e780      	b.n	802a1b6 <_dtoa_r+0x7de>
 802a2b4:	2300      	movs	r3, #0
 802a2b6:	930a      	str	r3, [sp, #40]	@ 0x28
 802a2b8:	e782      	b.n	802a1c0 <_dtoa_r+0x7e8>
 802a2ba:	d099      	beq.n	802a1f0 <_dtoa_r+0x818>
 802a2bc:	9a08      	ldr	r2, [sp, #32]
 802a2be:	331c      	adds	r3, #28
 802a2c0:	441a      	add	r2, r3
 802a2c2:	4498      	add	r8, r3
 802a2c4:	441e      	add	r6, r3
 802a2c6:	9208      	str	r2, [sp, #32]
 802a2c8:	e792      	b.n	802a1f0 <_dtoa_r+0x818>
 802a2ca:	4603      	mov	r3, r0
 802a2cc:	e7f6      	b.n	802a2bc <_dtoa_r+0x8e4>
 802a2ce:	9b07      	ldr	r3, [sp, #28]
 802a2d0:	9704      	str	r7, [sp, #16]
 802a2d2:	2b00      	cmp	r3, #0
 802a2d4:	dc20      	bgt.n	802a318 <_dtoa_r+0x940>
 802a2d6:	9300      	str	r3, [sp, #0]
 802a2d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a2da:	2b02      	cmp	r3, #2
 802a2dc:	dd1e      	ble.n	802a31c <_dtoa_r+0x944>
 802a2de:	9b00      	ldr	r3, [sp, #0]
 802a2e0:	2b00      	cmp	r3, #0
 802a2e2:	f47f aec0 	bne.w	802a066 <_dtoa_r+0x68e>
 802a2e6:	4621      	mov	r1, r4
 802a2e8:	2205      	movs	r2, #5
 802a2ea:	4658      	mov	r0, fp
 802a2ec:	f000 f9f0 	bl	802a6d0 <__multadd>
 802a2f0:	4601      	mov	r1, r0
 802a2f2:	4604      	mov	r4, r0
 802a2f4:	4648      	mov	r0, r9
 802a2f6:	f000 fc03 	bl	802ab00 <__mcmp>
 802a2fa:	2800      	cmp	r0, #0
 802a2fc:	f77f aeb3 	ble.w	802a066 <_dtoa_r+0x68e>
 802a300:	4656      	mov	r6, sl
 802a302:	2331      	movs	r3, #49	@ 0x31
 802a304:	f806 3b01 	strb.w	r3, [r6], #1
 802a308:	9b04      	ldr	r3, [sp, #16]
 802a30a:	3301      	adds	r3, #1
 802a30c:	9304      	str	r3, [sp, #16]
 802a30e:	e6ae      	b.n	802a06e <_dtoa_r+0x696>
 802a310:	9c07      	ldr	r4, [sp, #28]
 802a312:	9704      	str	r7, [sp, #16]
 802a314:	4625      	mov	r5, r4
 802a316:	e7f3      	b.n	802a300 <_dtoa_r+0x928>
 802a318:	9b07      	ldr	r3, [sp, #28]
 802a31a:	9300      	str	r3, [sp, #0]
 802a31c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a31e:	2b00      	cmp	r3, #0
 802a320:	f000 8104 	beq.w	802a52c <_dtoa_r+0xb54>
 802a324:	2e00      	cmp	r6, #0
 802a326:	dd05      	ble.n	802a334 <_dtoa_r+0x95c>
 802a328:	4629      	mov	r1, r5
 802a32a:	4632      	mov	r2, r6
 802a32c:	4658      	mov	r0, fp
 802a32e:	f000 fb7b 	bl	802aa28 <__lshift>
 802a332:	4605      	mov	r5, r0
 802a334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a336:	2b00      	cmp	r3, #0
 802a338:	d05a      	beq.n	802a3f0 <_dtoa_r+0xa18>
 802a33a:	6869      	ldr	r1, [r5, #4]
 802a33c:	4658      	mov	r0, fp
 802a33e:	f000 f965 	bl	802a60c <_Balloc>
 802a342:	4606      	mov	r6, r0
 802a344:	b928      	cbnz	r0, 802a352 <_dtoa_r+0x97a>
 802a346:	4b84      	ldr	r3, [pc, #528]	@ (802a558 <_dtoa_r+0xb80>)
 802a348:	4602      	mov	r2, r0
 802a34a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802a34e:	f7ff bb5a 	b.w	8029a06 <_dtoa_r+0x2e>
 802a352:	692a      	ldr	r2, [r5, #16]
 802a354:	3202      	adds	r2, #2
 802a356:	0092      	lsls	r2, r2, #2
 802a358:	f105 010c 	add.w	r1, r5, #12
 802a35c:	300c      	adds	r0, #12
 802a35e:	f7ff fa84 	bl	802986a <memcpy>
 802a362:	2201      	movs	r2, #1
 802a364:	4631      	mov	r1, r6
 802a366:	4658      	mov	r0, fp
 802a368:	f000 fb5e 	bl	802aa28 <__lshift>
 802a36c:	f10a 0301 	add.w	r3, sl, #1
 802a370:	9307      	str	r3, [sp, #28]
 802a372:	9b00      	ldr	r3, [sp, #0]
 802a374:	4453      	add	r3, sl
 802a376:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a378:	9b02      	ldr	r3, [sp, #8]
 802a37a:	f003 0301 	and.w	r3, r3, #1
 802a37e:	462f      	mov	r7, r5
 802a380:	930a      	str	r3, [sp, #40]	@ 0x28
 802a382:	4605      	mov	r5, r0
 802a384:	9b07      	ldr	r3, [sp, #28]
 802a386:	4621      	mov	r1, r4
 802a388:	3b01      	subs	r3, #1
 802a38a:	4648      	mov	r0, r9
 802a38c:	9300      	str	r3, [sp, #0]
 802a38e:	f7ff fa99 	bl	80298c4 <quorem>
 802a392:	4639      	mov	r1, r7
 802a394:	9002      	str	r0, [sp, #8]
 802a396:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802a39a:	4648      	mov	r0, r9
 802a39c:	f000 fbb0 	bl	802ab00 <__mcmp>
 802a3a0:	462a      	mov	r2, r5
 802a3a2:	9008      	str	r0, [sp, #32]
 802a3a4:	4621      	mov	r1, r4
 802a3a6:	4658      	mov	r0, fp
 802a3a8:	f000 fbc6 	bl	802ab38 <__mdiff>
 802a3ac:	68c2      	ldr	r2, [r0, #12]
 802a3ae:	4606      	mov	r6, r0
 802a3b0:	bb02      	cbnz	r2, 802a3f4 <_dtoa_r+0xa1c>
 802a3b2:	4601      	mov	r1, r0
 802a3b4:	4648      	mov	r0, r9
 802a3b6:	f000 fba3 	bl	802ab00 <__mcmp>
 802a3ba:	4602      	mov	r2, r0
 802a3bc:	4631      	mov	r1, r6
 802a3be:	4658      	mov	r0, fp
 802a3c0:	920e      	str	r2, [sp, #56]	@ 0x38
 802a3c2:	f000 f963 	bl	802a68c <_Bfree>
 802a3c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a3c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a3ca:	9e07      	ldr	r6, [sp, #28]
 802a3cc:	ea43 0102 	orr.w	r1, r3, r2
 802a3d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a3d2:	4319      	orrs	r1, r3
 802a3d4:	d110      	bne.n	802a3f8 <_dtoa_r+0xa20>
 802a3d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802a3da:	d029      	beq.n	802a430 <_dtoa_r+0xa58>
 802a3dc:	9b08      	ldr	r3, [sp, #32]
 802a3de:	2b00      	cmp	r3, #0
 802a3e0:	dd02      	ble.n	802a3e8 <_dtoa_r+0xa10>
 802a3e2:	9b02      	ldr	r3, [sp, #8]
 802a3e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802a3e8:	9b00      	ldr	r3, [sp, #0]
 802a3ea:	f883 8000 	strb.w	r8, [r3]
 802a3ee:	e63f      	b.n	802a070 <_dtoa_r+0x698>
 802a3f0:	4628      	mov	r0, r5
 802a3f2:	e7bb      	b.n	802a36c <_dtoa_r+0x994>
 802a3f4:	2201      	movs	r2, #1
 802a3f6:	e7e1      	b.n	802a3bc <_dtoa_r+0x9e4>
 802a3f8:	9b08      	ldr	r3, [sp, #32]
 802a3fa:	2b00      	cmp	r3, #0
 802a3fc:	db04      	blt.n	802a408 <_dtoa_r+0xa30>
 802a3fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a400:	430b      	orrs	r3, r1
 802a402:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802a404:	430b      	orrs	r3, r1
 802a406:	d120      	bne.n	802a44a <_dtoa_r+0xa72>
 802a408:	2a00      	cmp	r2, #0
 802a40a:	dded      	ble.n	802a3e8 <_dtoa_r+0xa10>
 802a40c:	4649      	mov	r1, r9
 802a40e:	2201      	movs	r2, #1
 802a410:	4658      	mov	r0, fp
 802a412:	f000 fb09 	bl	802aa28 <__lshift>
 802a416:	4621      	mov	r1, r4
 802a418:	4681      	mov	r9, r0
 802a41a:	f000 fb71 	bl	802ab00 <__mcmp>
 802a41e:	2800      	cmp	r0, #0
 802a420:	dc03      	bgt.n	802a42a <_dtoa_r+0xa52>
 802a422:	d1e1      	bne.n	802a3e8 <_dtoa_r+0xa10>
 802a424:	f018 0f01 	tst.w	r8, #1
 802a428:	d0de      	beq.n	802a3e8 <_dtoa_r+0xa10>
 802a42a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802a42e:	d1d8      	bne.n	802a3e2 <_dtoa_r+0xa0a>
 802a430:	9a00      	ldr	r2, [sp, #0]
 802a432:	2339      	movs	r3, #57	@ 0x39
 802a434:	7013      	strb	r3, [r2, #0]
 802a436:	4633      	mov	r3, r6
 802a438:	461e      	mov	r6, r3
 802a43a:	3b01      	subs	r3, #1
 802a43c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802a440:	2a39      	cmp	r2, #57	@ 0x39
 802a442:	d052      	beq.n	802a4ea <_dtoa_r+0xb12>
 802a444:	3201      	adds	r2, #1
 802a446:	701a      	strb	r2, [r3, #0]
 802a448:	e612      	b.n	802a070 <_dtoa_r+0x698>
 802a44a:	2a00      	cmp	r2, #0
 802a44c:	dd07      	ble.n	802a45e <_dtoa_r+0xa86>
 802a44e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802a452:	d0ed      	beq.n	802a430 <_dtoa_r+0xa58>
 802a454:	9a00      	ldr	r2, [sp, #0]
 802a456:	f108 0301 	add.w	r3, r8, #1
 802a45a:	7013      	strb	r3, [r2, #0]
 802a45c:	e608      	b.n	802a070 <_dtoa_r+0x698>
 802a45e:	9b07      	ldr	r3, [sp, #28]
 802a460:	9a07      	ldr	r2, [sp, #28]
 802a462:	f803 8c01 	strb.w	r8, [r3, #-1]
 802a466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a468:	4293      	cmp	r3, r2
 802a46a:	d028      	beq.n	802a4be <_dtoa_r+0xae6>
 802a46c:	4649      	mov	r1, r9
 802a46e:	2300      	movs	r3, #0
 802a470:	220a      	movs	r2, #10
 802a472:	4658      	mov	r0, fp
 802a474:	f000 f92c 	bl	802a6d0 <__multadd>
 802a478:	42af      	cmp	r7, r5
 802a47a:	4681      	mov	r9, r0
 802a47c:	f04f 0300 	mov.w	r3, #0
 802a480:	f04f 020a 	mov.w	r2, #10
 802a484:	4639      	mov	r1, r7
 802a486:	4658      	mov	r0, fp
 802a488:	d107      	bne.n	802a49a <_dtoa_r+0xac2>
 802a48a:	f000 f921 	bl	802a6d0 <__multadd>
 802a48e:	4607      	mov	r7, r0
 802a490:	4605      	mov	r5, r0
 802a492:	9b07      	ldr	r3, [sp, #28]
 802a494:	3301      	adds	r3, #1
 802a496:	9307      	str	r3, [sp, #28]
 802a498:	e774      	b.n	802a384 <_dtoa_r+0x9ac>
 802a49a:	f000 f919 	bl	802a6d0 <__multadd>
 802a49e:	4629      	mov	r1, r5
 802a4a0:	4607      	mov	r7, r0
 802a4a2:	2300      	movs	r3, #0
 802a4a4:	220a      	movs	r2, #10
 802a4a6:	4658      	mov	r0, fp
 802a4a8:	f000 f912 	bl	802a6d0 <__multadd>
 802a4ac:	4605      	mov	r5, r0
 802a4ae:	e7f0      	b.n	802a492 <_dtoa_r+0xaba>
 802a4b0:	9b00      	ldr	r3, [sp, #0]
 802a4b2:	2b00      	cmp	r3, #0
 802a4b4:	bfcc      	ite	gt
 802a4b6:	461e      	movgt	r6, r3
 802a4b8:	2601      	movle	r6, #1
 802a4ba:	4456      	add	r6, sl
 802a4bc:	2700      	movs	r7, #0
 802a4be:	4649      	mov	r1, r9
 802a4c0:	2201      	movs	r2, #1
 802a4c2:	4658      	mov	r0, fp
 802a4c4:	f000 fab0 	bl	802aa28 <__lshift>
 802a4c8:	4621      	mov	r1, r4
 802a4ca:	4681      	mov	r9, r0
 802a4cc:	f000 fb18 	bl	802ab00 <__mcmp>
 802a4d0:	2800      	cmp	r0, #0
 802a4d2:	dcb0      	bgt.n	802a436 <_dtoa_r+0xa5e>
 802a4d4:	d102      	bne.n	802a4dc <_dtoa_r+0xb04>
 802a4d6:	f018 0f01 	tst.w	r8, #1
 802a4da:	d1ac      	bne.n	802a436 <_dtoa_r+0xa5e>
 802a4dc:	4633      	mov	r3, r6
 802a4de:	461e      	mov	r6, r3
 802a4e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802a4e4:	2a30      	cmp	r2, #48	@ 0x30
 802a4e6:	d0fa      	beq.n	802a4de <_dtoa_r+0xb06>
 802a4e8:	e5c2      	b.n	802a070 <_dtoa_r+0x698>
 802a4ea:	459a      	cmp	sl, r3
 802a4ec:	d1a4      	bne.n	802a438 <_dtoa_r+0xa60>
 802a4ee:	9b04      	ldr	r3, [sp, #16]
 802a4f0:	3301      	adds	r3, #1
 802a4f2:	9304      	str	r3, [sp, #16]
 802a4f4:	2331      	movs	r3, #49	@ 0x31
 802a4f6:	f88a 3000 	strb.w	r3, [sl]
 802a4fa:	e5b9      	b.n	802a070 <_dtoa_r+0x698>
 802a4fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802a4fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 802a55c <_dtoa_r+0xb84>
 802a502:	b11b      	cbz	r3, 802a50c <_dtoa_r+0xb34>
 802a504:	f10a 0308 	add.w	r3, sl, #8
 802a508:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802a50a:	6013      	str	r3, [r2, #0]
 802a50c:	4650      	mov	r0, sl
 802a50e:	b019      	add	sp, #100	@ 0x64
 802a510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a516:	2b01      	cmp	r3, #1
 802a518:	f77f ae37 	ble.w	802a18a <_dtoa_r+0x7b2>
 802a51c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802a51e:	930a      	str	r3, [sp, #40]	@ 0x28
 802a520:	2001      	movs	r0, #1
 802a522:	e655      	b.n	802a1d0 <_dtoa_r+0x7f8>
 802a524:	9b00      	ldr	r3, [sp, #0]
 802a526:	2b00      	cmp	r3, #0
 802a528:	f77f aed6 	ble.w	802a2d8 <_dtoa_r+0x900>
 802a52c:	4656      	mov	r6, sl
 802a52e:	4621      	mov	r1, r4
 802a530:	4648      	mov	r0, r9
 802a532:	f7ff f9c7 	bl	80298c4 <quorem>
 802a536:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802a53a:	f806 8b01 	strb.w	r8, [r6], #1
 802a53e:	9b00      	ldr	r3, [sp, #0]
 802a540:	eba6 020a 	sub.w	r2, r6, sl
 802a544:	4293      	cmp	r3, r2
 802a546:	ddb3      	ble.n	802a4b0 <_dtoa_r+0xad8>
 802a548:	4649      	mov	r1, r9
 802a54a:	2300      	movs	r3, #0
 802a54c:	220a      	movs	r2, #10
 802a54e:	4658      	mov	r0, fp
 802a550:	f000 f8be 	bl	802a6d0 <__multadd>
 802a554:	4681      	mov	r9, r0
 802a556:	e7ea      	b.n	802a52e <_dtoa_r+0xb56>
 802a558:	080303a3 	.word	0x080303a3
 802a55c:	0803033e 	.word	0x0803033e

0802a560 <__env_lock>:
 802a560:	4801      	ldr	r0, [pc, #4]	@ (802a568 <__env_lock+0x8>)
 802a562:	f7ff b978 	b.w	8029856 <__retarget_lock_acquire_recursive>
 802a566:	bf00      	nop
 802a568:	20047374 	.word	0x20047374

0802a56c <__env_unlock>:
 802a56c:	4801      	ldr	r0, [pc, #4]	@ (802a574 <__env_unlock+0x8>)
 802a56e:	f7ff b973 	b.w	8029858 <__retarget_lock_release_recursive>
 802a572:	bf00      	nop
 802a574:	20047374 	.word	0x20047374

0802a578 <_free_r>:
 802a578:	b538      	push	{r3, r4, r5, lr}
 802a57a:	4605      	mov	r5, r0
 802a57c:	2900      	cmp	r1, #0
 802a57e:	d041      	beq.n	802a604 <_free_r+0x8c>
 802a580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a584:	1f0c      	subs	r4, r1, #4
 802a586:	2b00      	cmp	r3, #0
 802a588:	bfb8      	it	lt
 802a58a:	18e4      	addlt	r4, r4, r3
 802a58c:	f7fd ffac 	bl	80284e8 <__malloc_lock>
 802a590:	4a1d      	ldr	r2, [pc, #116]	@ (802a608 <_free_r+0x90>)
 802a592:	6813      	ldr	r3, [r2, #0]
 802a594:	b933      	cbnz	r3, 802a5a4 <_free_r+0x2c>
 802a596:	6063      	str	r3, [r4, #4]
 802a598:	6014      	str	r4, [r2, #0]
 802a59a:	4628      	mov	r0, r5
 802a59c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a5a0:	f7fd bfa8 	b.w	80284f4 <__malloc_unlock>
 802a5a4:	42a3      	cmp	r3, r4
 802a5a6:	d908      	bls.n	802a5ba <_free_r+0x42>
 802a5a8:	6820      	ldr	r0, [r4, #0]
 802a5aa:	1821      	adds	r1, r4, r0
 802a5ac:	428b      	cmp	r3, r1
 802a5ae:	bf01      	itttt	eq
 802a5b0:	6819      	ldreq	r1, [r3, #0]
 802a5b2:	685b      	ldreq	r3, [r3, #4]
 802a5b4:	1809      	addeq	r1, r1, r0
 802a5b6:	6021      	streq	r1, [r4, #0]
 802a5b8:	e7ed      	b.n	802a596 <_free_r+0x1e>
 802a5ba:	461a      	mov	r2, r3
 802a5bc:	685b      	ldr	r3, [r3, #4]
 802a5be:	b10b      	cbz	r3, 802a5c4 <_free_r+0x4c>
 802a5c0:	42a3      	cmp	r3, r4
 802a5c2:	d9fa      	bls.n	802a5ba <_free_r+0x42>
 802a5c4:	6811      	ldr	r1, [r2, #0]
 802a5c6:	1850      	adds	r0, r2, r1
 802a5c8:	42a0      	cmp	r0, r4
 802a5ca:	d10b      	bne.n	802a5e4 <_free_r+0x6c>
 802a5cc:	6820      	ldr	r0, [r4, #0]
 802a5ce:	4401      	add	r1, r0
 802a5d0:	1850      	adds	r0, r2, r1
 802a5d2:	4283      	cmp	r3, r0
 802a5d4:	6011      	str	r1, [r2, #0]
 802a5d6:	d1e0      	bne.n	802a59a <_free_r+0x22>
 802a5d8:	6818      	ldr	r0, [r3, #0]
 802a5da:	685b      	ldr	r3, [r3, #4]
 802a5dc:	6053      	str	r3, [r2, #4]
 802a5de:	4408      	add	r0, r1
 802a5e0:	6010      	str	r0, [r2, #0]
 802a5e2:	e7da      	b.n	802a59a <_free_r+0x22>
 802a5e4:	d902      	bls.n	802a5ec <_free_r+0x74>
 802a5e6:	230c      	movs	r3, #12
 802a5e8:	602b      	str	r3, [r5, #0]
 802a5ea:	e7d6      	b.n	802a59a <_free_r+0x22>
 802a5ec:	6820      	ldr	r0, [r4, #0]
 802a5ee:	1821      	adds	r1, r4, r0
 802a5f0:	428b      	cmp	r3, r1
 802a5f2:	bf04      	itt	eq
 802a5f4:	6819      	ldreq	r1, [r3, #0]
 802a5f6:	685b      	ldreq	r3, [r3, #4]
 802a5f8:	6063      	str	r3, [r4, #4]
 802a5fa:	bf04      	itt	eq
 802a5fc:	1809      	addeq	r1, r1, r0
 802a5fe:	6021      	streq	r1, [r4, #0]
 802a600:	6054      	str	r4, [r2, #4]
 802a602:	e7ca      	b.n	802a59a <_free_r+0x22>
 802a604:	bd38      	pop	{r3, r4, r5, pc}
 802a606:	bf00      	nop
 802a608:	20047230 	.word	0x20047230

0802a60c <_Balloc>:
 802a60c:	b570      	push	{r4, r5, r6, lr}
 802a60e:	69c6      	ldr	r6, [r0, #28]
 802a610:	4604      	mov	r4, r0
 802a612:	460d      	mov	r5, r1
 802a614:	b976      	cbnz	r6, 802a634 <_Balloc+0x28>
 802a616:	2010      	movs	r0, #16
 802a618:	f7fd feb4 	bl	8028384 <malloc>
 802a61c:	4602      	mov	r2, r0
 802a61e:	61e0      	str	r0, [r4, #28]
 802a620:	b920      	cbnz	r0, 802a62c <_Balloc+0x20>
 802a622:	4b18      	ldr	r3, [pc, #96]	@ (802a684 <_Balloc+0x78>)
 802a624:	4818      	ldr	r0, [pc, #96]	@ (802a688 <_Balloc+0x7c>)
 802a626:	216b      	movs	r1, #107	@ 0x6b
 802a628:	f7ff f92e 	bl	8029888 <__assert_func>
 802a62c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a630:	6006      	str	r6, [r0, #0]
 802a632:	60c6      	str	r6, [r0, #12]
 802a634:	69e6      	ldr	r6, [r4, #28]
 802a636:	68f3      	ldr	r3, [r6, #12]
 802a638:	b183      	cbz	r3, 802a65c <_Balloc+0x50>
 802a63a:	69e3      	ldr	r3, [r4, #28]
 802a63c:	68db      	ldr	r3, [r3, #12]
 802a63e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802a642:	b9b8      	cbnz	r0, 802a674 <_Balloc+0x68>
 802a644:	2101      	movs	r1, #1
 802a646:	fa01 f605 	lsl.w	r6, r1, r5
 802a64a:	1d72      	adds	r2, r6, #5
 802a64c:	0092      	lsls	r2, r2, #2
 802a64e:	4620      	mov	r0, r4
 802a650:	f7fd fe2a 	bl	80282a8 <_calloc_r>
 802a654:	b160      	cbz	r0, 802a670 <_Balloc+0x64>
 802a656:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802a65a:	e00e      	b.n	802a67a <_Balloc+0x6e>
 802a65c:	2221      	movs	r2, #33	@ 0x21
 802a65e:	2104      	movs	r1, #4
 802a660:	4620      	mov	r0, r4
 802a662:	f7fd fe21 	bl	80282a8 <_calloc_r>
 802a666:	69e3      	ldr	r3, [r4, #28]
 802a668:	60f0      	str	r0, [r6, #12]
 802a66a:	68db      	ldr	r3, [r3, #12]
 802a66c:	2b00      	cmp	r3, #0
 802a66e:	d1e4      	bne.n	802a63a <_Balloc+0x2e>
 802a670:	2000      	movs	r0, #0
 802a672:	bd70      	pop	{r4, r5, r6, pc}
 802a674:	6802      	ldr	r2, [r0, #0]
 802a676:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802a67a:	2300      	movs	r3, #0
 802a67c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a680:	e7f7      	b.n	802a672 <_Balloc+0x66>
 802a682:	bf00      	nop
 802a684:	0803015e 	.word	0x0803015e
 802a688:	080303b4 	.word	0x080303b4

0802a68c <_Bfree>:
 802a68c:	b570      	push	{r4, r5, r6, lr}
 802a68e:	69c6      	ldr	r6, [r0, #28]
 802a690:	4605      	mov	r5, r0
 802a692:	460c      	mov	r4, r1
 802a694:	b976      	cbnz	r6, 802a6b4 <_Bfree+0x28>
 802a696:	2010      	movs	r0, #16
 802a698:	f7fd fe74 	bl	8028384 <malloc>
 802a69c:	4602      	mov	r2, r0
 802a69e:	61e8      	str	r0, [r5, #28]
 802a6a0:	b920      	cbnz	r0, 802a6ac <_Bfree+0x20>
 802a6a2:	4b09      	ldr	r3, [pc, #36]	@ (802a6c8 <_Bfree+0x3c>)
 802a6a4:	4809      	ldr	r0, [pc, #36]	@ (802a6cc <_Bfree+0x40>)
 802a6a6:	218f      	movs	r1, #143	@ 0x8f
 802a6a8:	f7ff f8ee 	bl	8029888 <__assert_func>
 802a6ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a6b0:	6006      	str	r6, [r0, #0]
 802a6b2:	60c6      	str	r6, [r0, #12]
 802a6b4:	b13c      	cbz	r4, 802a6c6 <_Bfree+0x3a>
 802a6b6:	69eb      	ldr	r3, [r5, #28]
 802a6b8:	6862      	ldr	r2, [r4, #4]
 802a6ba:	68db      	ldr	r3, [r3, #12]
 802a6bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802a6c0:	6021      	str	r1, [r4, #0]
 802a6c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802a6c6:	bd70      	pop	{r4, r5, r6, pc}
 802a6c8:	0803015e 	.word	0x0803015e
 802a6cc:	080303b4 	.word	0x080303b4

0802a6d0 <__multadd>:
 802a6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a6d4:	690d      	ldr	r5, [r1, #16]
 802a6d6:	4607      	mov	r7, r0
 802a6d8:	460c      	mov	r4, r1
 802a6da:	461e      	mov	r6, r3
 802a6dc:	f101 0c14 	add.w	ip, r1, #20
 802a6e0:	2000      	movs	r0, #0
 802a6e2:	f8dc 3000 	ldr.w	r3, [ip]
 802a6e6:	b299      	uxth	r1, r3
 802a6e8:	fb02 6101 	mla	r1, r2, r1, r6
 802a6ec:	0c1e      	lsrs	r6, r3, #16
 802a6ee:	0c0b      	lsrs	r3, r1, #16
 802a6f0:	fb02 3306 	mla	r3, r2, r6, r3
 802a6f4:	b289      	uxth	r1, r1
 802a6f6:	3001      	adds	r0, #1
 802a6f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a6fc:	4285      	cmp	r5, r0
 802a6fe:	f84c 1b04 	str.w	r1, [ip], #4
 802a702:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802a706:	dcec      	bgt.n	802a6e2 <__multadd+0x12>
 802a708:	b30e      	cbz	r6, 802a74e <__multadd+0x7e>
 802a70a:	68a3      	ldr	r3, [r4, #8]
 802a70c:	42ab      	cmp	r3, r5
 802a70e:	dc19      	bgt.n	802a744 <__multadd+0x74>
 802a710:	6861      	ldr	r1, [r4, #4]
 802a712:	4638      	mov	r0, r7
 802a714:	3101      	adds	r1, #1
 802a716:	f7ff ff79 	bl	802a60c <_Balloc>
 802a71a:	4680      	mov	r8, r0
 802a71c:	b928      	cbnz	r0, 802a72a <__multadd+0x5a>
 802a71e:	4602      	mov	r2, r0
 802a720:	4b0c      	ldr	r3, [pc, #48]	@ (802a754 <__multadd+0x84>)
 802a722:	480d      	ldr	r0, [pc, #52]	@ (802a758 <__multadd+0x88>)
 802a724:	21ba      	movs	r1, #186	@ 0xba
 802a726:	f7ff f8af 	bl	8029888 <__assert_func>
 802a72a:	6922      	ldr	r2, [r4, #16]
 802a72c:	3202      	adds	r2, #2
 802a72e:	f104 010c 	add.w	r1, r4, #12
 802a732:	0092      	lsls	r2, r2, #2
 802a734:	300c      	adds	r0, #12
 802a736:	f7ff f898 	bl	802986a <memcpy>
 802a73a:	4621      	mov	r1, r4
 802a73c:	4638      	mov	r0, r7
 802a73e:	f7ff ffa5 	bl	802a68c <_Bfree>
 802a742:	4644      	mov	r4, r8
 802a744:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802a748:	3501      	adds	r5, #1
 802a74a:	615e      	str	r6, [r3, #20]
 802a74c:	6125      	str	r5, [r4, #16]
 802a74e:	4620      	mov	r0, r4
 802a750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a754:	080303a3 	.word	0x080303a3
 802a758:	080303b4 	.word	0x080303b4

0802a75c <__hi0bits>:
 802a75c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802a760:	4603      	mov	r3, r0
 802a762:	bf36      	itet	cc
 802a764:	0403      	lslcc	r3, r0, #16
 802a766:	2000      	movcs	r0, #0
 802a768:	2010      	movcc	r0, #16
 802a76a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802a76e:	bf3c      	itt	cc
 802a770:	021b      	lslcc	r3, r3, #8
 802a772:	3008      	addcc	r0, #8
 802a774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802a778:	bf3c      	itt	cc
 802a77a:	011b      	lslcc	r3, r3, #4
 802a77c:	3004      	addcc	r0, #4
 802a77e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802a782:	bf3c      	itt	cc
 802a784:	009b      	lslcc	r3, r3, #2
 802a786:	3002      	addcc	r0, #2
 802a788:	2b00      	cmp	r3, #0
 802a78a:	db05      	blt.n	802a798 <__hi0bits+0x3c>
 802a78c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802a790:	f100 0001 	add.w	r0, r0, #1
 802a794:	bf08      	it	eq
 802a796:	2020      	moveq	r0, #32
 802a798:	4770      	bx	lr

0802a79a <__lo0bits>:
 802a79a:	6803      	ldr	r3, [r0, #0]
 802a79c:	4602      	mov	r2, r0
 802a79e:	f013 0007 	ands.w	r0, r3, #7
 802a7a2:	d00b      	beq.n	802a7bc <__lo0bits+0x22>
 802a7a4:	07d9      	lsls	r1, r3, #31
 802a7a6:	d421      	bmi.n	802a7ec <__lo0bits+0x52>
 802a7a8:	0798      	lsls	r0, r3, #30
 802a7aa:	bf49      	itett	mi
 802a7ac:	085b      	lsrmi	r3, r3, #1
 802a7ae:	089b      	lsrpl	r3, r3, #2
 802a7b0:	2001      	movmi	r0, #1
 802a7b2:	6013      	strmi	r3, [r2, #0]
 802a7b4:	bf5c      	itt	pl
 802a7b6:	6013      	strpl	r3, [r2, #0]
 802a7b8:	2002      	movpl	r0, #2
 802a7ba:	4770      	bx	lr
 802a7bc:	b299      	uxth	r1, r3
 802a7be:	b909      	cbnz	r1, 802a7c4 <__lo0bits+0x2a>
 802a7c0:	0c1b      	lsrs	r3, r3, #16
 802a7c2:	2010      	movs	r0, #16
 802a7c4:	b2d9      	uxtb	r1, r3
 802a7c6:	b909      	cbnz	r1, 802a7cc <__lo0bits+0x32>
 802a7c8:	3008      	adds	r0, #8
 802a7ca:	0a1b      	lsrs	r3, r3, #8
 802a7cc:	0719      	lsls	r1, r3, #28
 802a7ce:	bf04      	itt	eq
 802a7d0:	091b      	lsreq	r3, r3, #4
 802a7d2:	3004      	addeq	r0, #4
 802a7d4:	0799      	lsls	r1, r3, #30
 802a7d6:	bf04      	itt	eq
 802a7d8:	089b      	lsreq	r3, r3, #2
 802a7da:	3002      	addeq	r0, #2
 802a7dc:	07d9      	lsls	r1, r3, #31
 802a7de:	d403      	bmi.n	802a7e8 <__lo0bits+0x4e>
 802a7e0:	085b      	lsrs	r3, r3, #1
 802a7e2:	f100 0001 	add.w	r0, r0, #1
 802a7e6:	d003      	beq.n	802a7f0 <__lo0bits+0x56>
 802a7e8:	6013      	str	r3, [r2, #0]
 802a7ea:	4770      	bx	lr
 802a7ec:	2000      	movs	r0, #0
 802a7ee:	4770      	bx	lr
 802a7f0:	2020      	movs	r0, #32
 802a7f2:	4770      	bx	lr

0802a7f4 <__i2b>:
 802a7f4:	b510      	push	{r4, lr}
 802a7f6:	460c      	mov	r4, r1
 802a7f8:	2101      	movs	r1, #1
 802a7fa:	f7ff ff07 	bl	802a60c <_Balloc>
 802a7fe:	4602      	mov	r2, r0
 802a800:	b928      	cbnz	r0, 802a80e <__i2b+0x1a>
 802a802:	4b05      	ldr	r3, [pc, #20]	@ (802a818 <__i2b+0x24>)
 802a804:	4805      	ldr	r0, [pc, #20]	@ (802a81c <__i2b+0x28>)
 802a806:	f240 1145 	movw	r1, #325	@ 0x145
 802a80a:	f7ff f83d 	bl	8029888 <__assert_func>
 802a80e:	2301      	movs	r3, #1
 802a810:	6144      	str	r4, [r0, #20]
 802a812:	6103      	str	r3, [r0, #16]
 802a814:	bd10      	pop	{r4, pc}
 802a816:	bf00      	nop
 802a818:	080303a3 	.word	0x080303a3
 802a81c:	080303b4 	.word	0x080303b4

0802a820 <__multiply>:
 802a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a824:	4614      	mov	r4, r2
 802a826:	690a      	ldr	r2, [r1, #16]
 802a828:	6923      	ldr	r3, [r4, #16]
 802a82a:	429a      	cmp	r2, r3
 802a82c:	bfa8      	it	ge
 802a82e:	4623      	movge	r3, r4
 802a830:	460f      	mov	r7, r1
 802a832:	bfa4      	itt	ge
 802a834:	460c      	movge	r4, r1
 802a836:	461f      	movge	r7, r3
 802a838:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802a83c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802a840:	68a3      	ldr	r3, [r4, #8]
 802a842:	6861      	ldr	r1, [r4, #4]
 802a844:	eb0a 0609 	add.w	r6, sl, r9
 802a848:	42b3      	cmp	r3, r6
 802a84a:	b085      	sub	sp, #20
 802a84c:	bfb8      	it	lt
 802a84e:	3101      	addlt	r1, #1
 802a850:	f7ff fedc 	bl	802a60c <_Balloc>
 802a854:	b930      	cbnz	r0, 802a864 <__multiply+0x44>
 802a856:	4602      	mov	r2, r0
 802a858:	4b44      	ldr	r3, [pc, #272]	@ (802a96c <__multiply+0x14c>)
 802a85a:	4845      	ldr	r0, [pc, #276]	@ (802a970 <__multiply+0x150>)
 802a85c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802a860:	f7ff f812 	bl	8029888 <__assert_func>
 802a864:	f100 0514 	add.w	r5, r0, #20
 802a868:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802a86c:	462b      	mov	r3, r5
 802a86e:	2200      	movs	r2, #0
 802a870:	4543      	cmp	r3, r8
 802a872:	d321      	bcc.n	802a8b8 <__multiply+0x98>
 802a874:	f107 0114 	add.w	r1, r7, #20
 802a878:	f104 0214 	add.w	r2, r4, #20
 802a87c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802a880:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802a884:	9302      	str	r3, [sp, #8]
 802a886:	1b13      	subs	r3, r2, r4
 802a888:	3b15      	subs	r3, #21
 802a88a:	f023 0303 	bic.w	r3, r3, #3
 802a88e:	3304      	adds	r3, #4
 802a890:	f104 0715 	add.w	r7, r4, #21
 802a894:	42ba      	cmp	r2, r7
 802a896:	bf38      	it	cc
 802a898:	2304      	movcc	r3, #4
 802a89a:	9301      	str	r3, [sp, #4]
 802a89c:	9b02      	ldr	r3, [sp, #8]
 802a89e:	9103      	str	r1, [sp, #12]
 802a8a0:	428b      	cmp	r3, r1
 802a8a2:	d80c      	bhi.n	802a8be <__multiply+0x9e>
 802a8a4:	2e00      	cmp	r6, #0
 802a8a6:	dd03      	ble.n	802a8b0 <__multiply+0x90>
 802a8a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802a8ac:	2b00      	cmp	r3, #0
 802a8ae:	d05b      	beq.n	802a968 <__multiply+0x148>
 802a8b0:	6106      	str	r6, [r0, #16]
 802a8b2:	b005      	add	sp, #20
 802a8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a8b8:	f843 2b04 	str.w	r2, [r3], #4
 802a8bc:	e7d8      	b.n	802a870 <__multiply+0x50>
 802a8be:	f8b1 a000 	ldrh.w	sl, [r1]
 802a8c2:	f1ba 0f00 	cmp.w	sl, #0
 802a8c6:	d024      	beq.n	802a912 <__multiply+0xf2>
 802a8c8:	f104 0e14 	add.w	lr, r4, #20
 802a8cc:	46a9      	mov	r9, r5
 802a8ce:	f04f 0c00 	mov.w	ip, #0
 802a8d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 802a8d6:	f8d9 3000 	ldr.w	r3, [r9]
 802a8da:	fa1f fb87 	uxth.w	fp, r7
 802a8de:	b29b      	uxth	r3, r3
 802a8e0:	fb0a 330b 	mla	r3, sl, fp, r3
 802a8e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802a8e8:	f8d9 7000 	ldr.w	r7, [r9]
 802a8ec:	4463      	add	r3, ip
 802a8ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802a8f2:	fb0a c70b 	mla	r7, sl, fp, ip
 802a8f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802a8fa:	b29b      	uxth	r3, r3
 802a8fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802a900:	4572      	cmp	r2, lr
 802a902:	f849 3b04 	str.w	r3, [r9], #4
 802a906:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802a90a:	d8e2      	bhi.n	802a8d2 <__multiply+0xb2>
 802a90c:	9b01      	ldr	r3, [sp, #4]
 802a90e:	f845 c003 	str.w	ip, [r5, r3]
 802a912:	9b03      	ldr	r3, [sp, #12]
 802a914:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802a918:	3104      	adds	r1, #4
 802a91a:	f1b9 0f00 	cmp.w	r9, #0
 802a91e:	d021      	beq.n	802a964 <__multiply+0x144>
 802a920:	682b      	ldr	r3, [r5, #0]
 802a922:	f104 0c14 	add.w	ip, r4, #20
 802a926:	46ae      	mov	lr, r5
 802a928:	f04f 0a00 	mov.w	sl, #0
 802a92c:	f8bc b000 	ldrh.w	fp, [ip]
 802a930:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802a934:	fb09 770b 	mla	r7, r9, fp, r7
 802a938:	4457      	add	r7, sl
 802a93a:	b29b      	uxth	r3, r3
 802a93c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802a940:	f84e 3b04 	str.w	r3, [lr], #4
 802a944:	f85c 3b04 	ldr.w	r3, [ip], #4
 802a948:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802a94c:	f8be 3000 	ldrh.w	r3, [lr]
 802a950:	fb09 330a 	mla	r3, r9, sl, r3
 802a954:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802a958:	4562      	cmp	r2, ip
 802a95a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802a95e:	d8e5      	bhi.n	802a92c <__multiply+0x10c>
 802a960:	9f01      	ldr	r7, [sp, #4]
 802a962:	51eb      	str	r3, [r5, r7]
 802a964:	3504      	adds	r5, #4
 802a966:	e799      	b.n	802a89c <__multiply+0x7c>
 802a968:	3e01      	subs	r6, #1
 802a96a:	e79b      	b.n	802a8a4 <__multiply+0x84>
 802a96c:	080303a3 	.word	0x080303a3
 802a970:	080303b4 	.word	0x080303b4

0802a974 <__pow5mult>:
 802a974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a978:	4615      	mov	r5, r2
 802a97a:	f012 0203 	ands.w	r2, r2, #3
 802a97e:	4607      	mov	r7, r0
 802a980:	460e      	mov	r6, r1
 802a982:	d007      	beq.n	802a994 <__pow5mult+0x20>
 802a984:	4c25      	ldr	r4, [pc, #148]	@ (802aa1c <__pow5mult+0xa8>)
 802a986:	3a01      	subs	r2, #1
 802a988:	2300      	movs	r3, #0
 802a98a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802a98e:	f7ff fe9f 	bl	802a6d0 <__multadd>
 802a992:	4606      	mov	r6, r0
 802a994:	10ad      	asrs	r5, r5, #2
 802a996:	d03d      	beq.n	802aa14 <__pow5mult+0xa0>
 802a998:	69fc      	ldr	r4, [r7, #28]
 802a99a:	b97c      	cbnz	r4, 802a9bc <__pow5mult+0x48>
 802a99c:	2010      	movs	r0, #16
 802a99e:	f7fd fcf1 	bl	8028384 <malloc>
 802a9a2:	4602      	mov	r2, r0
 802a9a4:	61f8      	str	r0, [r7, #28]
 802a9a6:	b928      	cbnz	r0, 802a9b4 <__pow5mult+0x40>
 802a9a8:	4b1d      	ldr	r3, [pc, #116]	@ (802aa20 <__pow5mult+0xac>)
 802a9aa:	481e      	ldr	r0, [pc, #120]	@ (802aa24 <__pow5mult+0xb0>)
 802a9ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802a9b0:	f7fe ff6a 	bl	8029888 <__assert_func>
 802a9b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802a9b8:	6004      	str	r4, [r0, #0]
 802a9ba:	60c4      	str	r4, [r0, #12]
 802a9bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802a9c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802a9c4:	b94c      	cbnz	r4, 802a9da <__pow5mult+0x66>
 802a9c6:	f240 2171 	movw	r1, #625	@ 0x271
 802a9ca:	4638      	mov	r0, r7
 802a9cc:	f7ff ff12 	bl	802a7f4 <__i2b>
 802a9d0:	2300      	movs	r3, #0
 802a9d2:	f8c8 0008 	str.w	r0, [r8, #8]
 802a9d6:	4604      	mov	r4, r0
 802a9d8:	6003      	str	r3, [r0, #0]
 802a9da:	f04f 0900 	mov.w	r9, #0
 802a9de:	07eb      	lsls	r3, r5, #31
 802a9e0:	d50a      	bpl.n	802a9f8 <__pow5mult+0x84>
 802a9e2:	4631      	mov	r1, r6
 802a9e4:	4622      	mov	r2, r4
 802a9e6:	4638      	mov	r0, r7
 802a9e8:	f7ff ff1a 	bl	802a820 <__multiply>
 802a9ec:	4631      	mov	r1, r6
 802a9ee:	4680      	mov	r8, r0
 802a9f0:	4638      	mov	r0, r7
 802a9f2:	f7ff fe4b 	bl	802a68c <_Bfree>
 802a9f6:	4646      	mov	r6, r8
 802a9f8:	106d      	asrs	r5, r5, #1
 802a9fa:	d00b      	beq.n	802aa14 <__pow5mult+0xa0>
 802a9fc:	6820      	ldr	r0, [r4, #0]
 802a9fe:	b938      	cbnz	r0, 802aa10 <__pow5mult+0x9c>
 802aa00:	4622      	mov	r2, r4
 802aa02:	4621      	mov	r1, r4
 802aa04:	4638      	mov	r0, r7
 802aa06:	f7ff ff0b 	bl	802a820 <__multiply>
 802aa0a:	6020      	str	r0, [r4, #0]
 802aa0c:	f8c0 9000 	str.w	r9, [r0]
 802aa10:	4604      	mov	r4, r0
 802aa12:	e7e4      	b.n	802a9de <__pow5mult+0x6a>
 802aa14:	4630      	mov	r0, r6
 802aa16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802aa1a:	bf00      	nop
 802aa1c:	08030410 	.word	0x08030410
 802aa20:	0803015e 	.word	0x0803015e
 802aa24:	080303b4 	.word	0x080303b4

0802aa28 <__lshift>:
 802aa28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802aa2c:	460c      	mov	r4, r1
 802aa2e:	6849      	ldr	r1, [r1, #4]
 802aa30:	6923      	ldr	r3, [r4, #16]
 802aa32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802aa36:	68a3      	ldr	r3, [r4, #8]
 802aa38:	4607      	mov	r7, r0
 802aa3a:	4691      	mov	r9, r2
 802aa3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802aa40:	f108 0601 	add.w	r6, r8, #1
 802aa44:	42b3      	cmp	r3, r6
 802aa46:	db0b      	blt.n	802aa60 <__lshift+0x38>
 802aa48:	4638      	mov	r0, r7
 802aa4a:	f7ff fddf 	bl	802a60c <_Balloc>
 802aa4e:	4605      	mov	r5, r0
 802aa50:	b948      	cbnz	r0, 802aa66 <__lshift+0x3e>
 802aa52:	4602      	mov	r2, r0
 802aa54:	4b28      	ldr	r3, [pc, #160]	@ (802aaf8 <__lshift+0xd0>)
 802aa56:	4829      	ldr	r0, [pc, #164]	@ (802aafc <__lshift+0xd4>)
 802aa58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802aa5c:	f7fe ff14 	bl	8029888 <__assert_func>
 802aa60:	3101      	adds	r1, #1
 802aa62:	005b      	lsls	r3, r3, #1
 802aa64:	e7ee      	b.n	802aa44 <__lshift+0x1c>
 802aa66:	2300      	movs	r3, #0
 802aa68:	f100 0114 	add.w	r1, r0, #20
 802aa6c:	f100 0210 	add.w	r2, r0, #16
 802aa70:	4618      	mov	r0, r3
 802aa72:	4553      	cmp	r3, sl
 802aa74:	db33      	blt.n	802aade <__lshift+0xb6>
 802aa76:	6920      	ldr	r0, [r4, #16]
 802aa78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802aa7c:	f104 0314 	add.w	r3, r4, #20
 802aa80:	f019 091f 	ands.w	r9, r9, #31
 802aa84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802aa88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802aa8c:	d02b      	beq.n	802aae6 <__lshift+0xbe>
 802aa8e:	f1c9 0e20 	rsb	lr, r9, #32
 802aa92:	468a      	mov	sl, r1
 802aa94:	2200      	movs	r2, #0
 802aa96:	6818      	ldr	r0, [r3, #0]
 802aa98:	fa00 f009 	lsl.w	r0, r0, r9
 802aa9c:	4310      	orrs	r0, r2
 802aa9e:	f84a 0b04 	str.w	r0, [sl], #4
 802aaa2:	f853 2b04 	ldr.w	r2, [r3], #4
 802aaa6:	459c      	cmp	ip, r3
 802aaa8:	fa22 f20e 	lsr.w	r2, r2, lr
 802aaac:	d8f3      	bhi.n	802aa96 <__lshift+0x6e>
 802aaae:	ebac 0304 	sub.w	r3, ip, r4
 802aab2:	3b15      	subs	r3, #21
 802aab4:	f023 0303 	bic.w	r3, r3, #3
 802aab8:	3304      	adds	r3, #4
 802aaba:	f104 0015 	add.w	r0, r4, #21
 802aabe:	4584      	cmp	ip, r0
 802aac0:	bf38      	it	cc
 802aac2:	2304      	movcc	r3, #4
 802aac4:	50ca      	str	r2, [r1, r3]
 802aac6:	b10a      	cbz	r2, 802aacc <__lshift+0xa4>
 802aac8:	f108 0602 	add.w	r6, r8, #2
 802aacc:	3e01      	subs	r6, #1
 802aace:	4638      	mov	r0, r7
 802aad0:	612e      	str	r6, [r5, #16]
 802aad2:	4621      	mov	r1, r4
 802aad4:	f7ff fdda 	bl	802a68c <_Bfree>
 802aad8:	4628      	mov	r0, r5
 802aada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802aade:	f842 0f04 	str.w	r0, [r2, #4]!
 802aae2:	3301      	adds	r3, #1
 802aae4:	e7c5      	b.n	802aa72 <__lshift+0x4a>
 802aae6:	3904      	subs	r1, #4
 802aae8:	f853 2b04 	ldr.w	r2, [r3], #4
 802aaec:	f841 2f04 	str.w	r2, [r1, #4]!
 802aaf0:	459c      	cmp	ip, r3
 802aaf2:	d8f9      	bhi.n	802aae8 <__lshift+0xc0>
 802aaf4:	e7ea      	b.n	802aacc <__lshift+0xa4>
 802aaf6:	bf00      	nop
 802aaf8:	080303a3 	.word	0x080303a3
 802aafc:	080303b4 	.word	0x080303b4

0802ab00 <__mcmp>:
 802ab00:	690a      	ldr	r2, [r1, #16]
 802ab02:	4603      	mov	r3, r0
 802ab04:	6900      	ldr	r0, [r0, #16]
 802ab06:	1a80      	subs	r0, r0, r2
 802ab08:	b530      	push	{r4, r5, lr}
 802ab0a:	d10e      	bne.n	802ab2a <__mcmp+0x2a>
 802ab0c:	3314      	adds	r3, #20
 802ab0e:	3114      	adds	r1, #20
 802ab10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802ab14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802ab18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802ab1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802ab20:	4295      	cmp	r5, r2
 802ab22:	d003      	beq.n	802ab2c <__mcmp+0x2c>
 802ab24:	d205      	bcs.n	802ab32 <__mcmp+0x32>
 802ab26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802ab2a:	bd30      	pop	{r4, r5, pc}
 802ab2c:	42a3      	cmp	r3, r4
 802ab2e:	d3f3      	bcc.n	802ab18 <__mcmp+0x18>
 802ab30:	e7fb      	b.n	802ab2a <__mcmp+0x2a>
 802ab32:	2001      	movs	r0, #1
 802ab34:	e7f9      	b.n	802ab2a <__mcmp+0x2a>
	...

0802ab38 <__mdiff>:
 802ab38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ab3c:	4689      	mov	r9, r1
 802ab3e:	4606      	mov	r6, r0
 802ab40:	4611      	mov	r1, r2
 802ab42:	4648      	mov	r0, r9
 802ab44:	4614      	mov	r4, r2
 802ab46:	f7ff ffdb 	bl	802ab00 <__mcmp>
 802ab4a:	1e05      	subs	r5, r0, #0
 802ab4c:	d112      	bne.n	802ab74 <__mdiff+0x3c>
 802ab4e:	4629      	mov	r1, r5
 802ab50:	4630      	mov	r0, r6
 802ab52:	f7ff fd5b 	bl	802a60c <_Balloc>
 802ab56:	4602      	mov	r2, r0
 802ab58:	b928      	cbnz	r0, 802ab66 <__mdiff+0x2e>
 802ab5a:	4b3f      	ldr	r3, [pc, #252]	@ (802ac58 <__mdiff+0x120>)
 802ab5c:	f240 2137 	movw	r1, #567	@ 0x237
 802ab60:	483e      	ldr	r0, [pc, #248]	@ (802ac5c <__mdiff+0x124>)
 802ab62:	f7fe fe91 	bl	8029888 <__assert_func>
 802ab66:	2301      	movs	r3, #1
 802ab68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802ab6c:	4610      	mov	r0, r2
 802ab6e:	b003      	add	sp, #12
 802ab70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab74:	bfbc      	itt	lt
 802ab76:	464b      	movlt	r3, r9
 802ab78:	46a1      	movlt	r9, r4
 802ab7a:	4630      	mov	r0, r6
 802ab7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802ab80:	bfba      	itte	lt
 802ab82:	461c      	movlt	r4, r3
 802ab84:	2501      	movlt	r5, #1
 802ab86:	2500      	movge	r5, #0
 802ab88:	f7ff fd40 	bl	802a60c <_Balloc>
 802ab8c:	4602      	mov	r2, r0
 802ab8e:	b918      	cbnz	r0, 802ab98 <__mdiff+0x60>
 802ab90:	4b31      	ldr	r3, [pc, #196]	@ (802ac58 <__mdiff+0x120>)
 802ab92:	f240 2145 	movw	r1, #581	@ 0x245
 802ab96:	e7e3      	b.n	802ab60 <__mdiff+0x28>
 802ab98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802ab9c:	6926      	ldr	r6, [r4, #16]
 802ab9e:	60c5      	str	r5, [r0, #12]
 802aba0:	f109 0310 	add.w	r3, r9, #16
 802aba4:	f109 0514 	add.w	r5, r9, #20
 802aba8:	f104 0e14 	add.w	lr, r4, #20
 802abac:	f100 0b14 	add.w	fp, r0, #20
 802abb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802abb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802abb8:	9301      	str	r3, [sp, #4]
 802abba:	46d9      	mov	r9, fp
 802abbc:	f04f 0c00 	mov.w	ip, #0
 802abc0:	9b01      	ldr	r3, [sp, #4]
 802abc2:	f85e 0b04 	ldr.w	r0, [lr], #4
 802abc6:	f853 af04 	ldr.w	sl, [r3, #4]!
 802abca:	9301      	str	r3, [sp, #4]
 802abcc:	fa1f f38a 	uxth.w	r3, sl
 802abd0:	4619      	mov	r1, r3
 802abd2:	b283      	uxth	r3, r0
 802abd4:	1acb      	subs	r3, r1, r3
 802abd6:	0c00      	lsrs	r0, r0, #16
 802abd8:	4463      	add	r3, ip
 802abda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802abde:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802abe2:	b29b      	uxth	r3, r3
 802abe4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802abe8:	4576      	cmp	r6, lr
 802abea:	f849 3b04 	str.w	r3, [r9], #4
 802abee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802abf2:	d8e5      	bhi.n	802abc0 <__mdiff+0x88>
 802abf4:	1b33      	subs	r3, r6, r4
 802abf6:	3b15      	subs	r3, #21
 802abf8:	f023 0303 	bic.w	r3, r3, #3
 802abfc:	3415      	adds	r4, #21
 802abfe:	3304      	adds	r3, #4
 802ac00:	42a6      	cmp	r6, r4
 802ac02:	bf38      	it	cc
 802ac04:	2304      	movcc	r3, #4
 802ac06:	441d      	add	r5, r3
 802ac08:	445b      	add	r3, fp
 802ac0a:	461e      	mov	r6, r3
 802ac0c:	462c      	mov	r4, r5
 802ac0e:	4544      	cmp	r4, r8
 802ac10:	d30e      	bcc.n	802ac30 <__mdiff+0xf8>
 802ac12:	f108 0103 	add.w	r1, r8, #3
 802ac16:	1b49      	subs	r1, r1, r5
 802ac18:	f021 0103 	bic.w	r1, r1, #3
 802ac1c:	3d03      	subs	r5, #3
 802ac1e:	45a8      	cmp	r8, r5
 802ac20:	bf38      	it	cc
 802ac22:	2100      	movcc	r1, #0
 802ac24:	440b      	add	r3, r1
 802ac26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802ac2a:	b191      	cbz	r1, 802ac52 <__mdiff+0x11a>
 802ac2c:	6117      	str	r7, [r2, #16]
 802ac2e:	e79d      	b.n	802ab6c <__mdiff+0x34>
 802ac30:	f854 1b04 	ldr.w	r1, [r4], #4
 802ac34:	46e6      	mov	lr, ip
 802ac36:	0c08      	lsrs	r0, r1, #16
 802ac38:	fa1c fc81 	uxtah	ip, ip, r1
 802ac3c:	4471      	add	r1, lr
 802ac3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802ac42:	b289      	uxth	r1, r1
 802ac44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802ac48:	f846 1b04 	str.w	r1, [r6], #4
 802ac4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802ac50:	e7dd      	b.n	802ac0e <__mdiff+0xd6>
 802ac52:	3f01      	subs	r7, #1
 802ac54:	e7e7      	b.n	802ac26 <__mdiff+0xee>
 802ac56:	bf00      	nop
 802ac58:	080303a3 	.word	0x080303a3
 802ac5c:	080303b4 	.word	0x080303b4

0802ac60 <__d2b>:
 802ac60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802ac64:	460f      	mov	r7, r1
 802ac66:	2101      	movs	r1, #1
 802ac68:	ec59 8b10 	vmov	r8, r9, d0
 802ac6c:	4616      	mov	r6, r2
 802ac6e:	f7ff fccd 	bl	802a60c <_Balloc>
 802ac72:	4604      	mov	r4, r0
 802ac74:	b930      	cbnz	r0, 802ac84 <__d2b+0x24>
 802ac76:	4602      	mov	r2, r0
 802ac78:	4b23      	ldr	r3, [pc, #140]	@ (802ad08 <__d2b+0xa8>)
 802ac7a:	4824      	ldr	r0, [pc, #144]	@ (802ad0c <__d2b+0xac>)
 802ac7c:	f240 310f 	movw	r1, #783	@ 0x30f
 802ac80:	f7fe fe02 	bl	8029888 <__assert_func>
 802ac84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802ac88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802ac8c:	b10d      	cbz	r5, 802ac92 <__d2b+0x32>
 802ac8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802ac92:	9301      	str	r3, [sp, #4]
 802ac94:	f1b8 0300 	subs.w	r3, r8, #0
 802ac98:	d023      	beq.n	802ace2 <__d2b+0x82>
 802ac9a:	4668      	mov	r0, sp
 802ac9c:	9300      	str	r3, [sp, #0]
 802ac9e:	f7ff fd7c 	bl	802a79a <__lo0bits>
 802aca2:	e9dd 1200 	ldrd	r1, r2, [sp]
 802aca6:	b1d0      	cbz	r0, 802acde <__d2b+0x7e>
 802aca8:	f1c0 0320 	rsb	r3, r0, #32
 802acac:	fa02 f303 	lsl.w	r3, r2, r3
 802acb0:	430b      	orrs	r3, r1
 802acb2:	40c2      	lsrs	r2, r0
 802acb4:	6163      	str	r3, [r4, #20]
 802acb6:	9201      	str	r2, [sp, #4]
 802acb8:	9b01      	ldr	r3, [sp, #4]
 802acba:	61a3      	str	r3, [r4, #24]
 802acbc:	2b00      	cmp	r3, #0
 802acbe:	bf0c      	ite	eq
 802acc0:	2201      	moveq	r2, #1
 802acc2:	2202      	movne	r2, #2
 802acc4:	6122      	str	r2, [r4, #16]
 802acc6:	b1a5      	cbz	r5, 802acf2 <__d2b+0x92>
 802acc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802accc:	4405      	add	r5, r0
 802acce:	603d      	str	r5, [r7, #0]
 802acd0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802acd4:	6030      	str	r0, [r6, #0]
 802acd6:	4620      	mov	r0, r4
 802acd8:	b003      	add	sp, #12
 802acda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802acde:	6161      	str	r1, [r4, #20]
 802ace0:	e7ea      	b.n	802acb8 <__d2b+0x58>
 802ace2:	a801      	add	r0, sp, #4
 802ace4:	f7ff fd59 	bl	802a79a <__lo0bits>
 802ace8:	9b01      	ldr	r3, [sp, #4]
 802acea:	6163      	str	r3, [r4, #20]
 802acec:	3020      	adds	r0, #32
 802acee:	2201      	movs	r2, #1
 802acf0:	e7e8      	b.n	802acc4 <__d2b+0x64>
 802acf2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802acf6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802acfa:	6038      	str	r0, [r7, #0]
 802acfc:	6918      	ldr	r0, [r3, #16]
 802acfe:	f7ff fd2d 	bl	802a75c <__hi0bits>
 802ad02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802ad06:	e7e5      	b.n	802acd4 <__d2b+0x74>
 802ad08:	080303a3 	.word	0x080303a3
 802ad0c:	080303b4 	.word	0x080303b4

0802ad10 <_malloc_usable_size_r>:
 802ad10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ad14:	1f18      	subs	r0, r3, #4
 802ad16:	2b00      	cmp	r3, #0
 802ad18:	bfbc      	itt	lt
 802ad1a:	580b      	ldrlt	r3, [r1, r0]
 802ad1c:	18c0      	addlt	r0, r0, r3
 802ad1e:	4770      	bx	lr

0802ad20 <__ssputs_r>:
 802ad20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ad24:	688e      	ldr	r6, [r1, #8]
 802ad26:	461f      	mov	r7, r3
 802ad28:	42be      	cmp	r6, r7
 802ad2a:	680b      	ldr	r3, [r1, #0]
 802ad2c:	4682      	mov	sl, r0
 802ad2e:	460c      	mov	r4, r1
 802ad30:	4690      	mov	r8, r2
 802ad32:	d82d      	bhi.n	802ad90 <__ssputs_r+0x70>
 802ad34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802ad38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802ad3c:	d026      	beq.n	802ad8c <__ssputs_r+0x6c>
 802ad3e:	6965      	ldr	r5, [r4, #20]
 802ad40:	6909      	ldr	r1, [r1, #16]
 802ad42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802ad46:	eba3 0901 	sub.w	r9, r3, r1
 802ad4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ad4e:	1c7b      	adds	r3, r7, #1
 802ad50:	444b      	add	r3, r9
 802ad52:	106d      	asrs	r5, r5, #1
 802ad54:	429d      	cmp	r5, r3
 802ad56:	bf38      	it	cc
 802ad58:	461d      	movcc	r5, r3
 802ad5a:	0553      	lsls	r3, r2, #21
 802ad5c:	d527      	bpl.n	802adae <__ssputs_r+0x8e>
 802ad5e:	4629      	mov	r1, r5
 802ad60:	f7fd fb42 	bl	80283e8 <_malloc_r>
 802ad64:	4606      	mov	r6, r0
 802ad66:	b360      	cbz	r0, 802adc2 <__ssputs_r+0xa2>
 802ad68:	6921      	ldr	r1, [r4, #16]
 802ad6a:	464a      	mov	r2, r9
 802ad6c:	f7fe fd7d 	bl	802986a <memcpy>
 802ad70:	89a3      	ldrh	r3, [r4, #12]
 802ad72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802ad76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802ad7a:	81a3      	strh	r3, [r4, #12]
 802ad7c:	6126      	str	r6, [r4, #16]
 802ad7e:	6165      	str	r5, [r4, #20]
 802ad80:	444e      	add	r6, r9
 802ad82:	eba5 0509 	sub.w	r5, r5, r9
 802ad86:	6026      	str	r6, [r4, #0]
 802ad88:	60a5      	str	r5, [r4, #8]
 802ad8a:	463e      	mov	r6, r7
 802ad8c:	42be      	cmp	r6, r7
 802ad8e:	d900      	bls.n	802ad92 <__ssputs_r+0x72>
 802ad90:	463e      	mov	r6, r7
 802ad92:	6820      	ldr	r0, [r4, #0]
 802ad94:	4632      	mov	r2, r6
 802ad96:	4641      	mov	r1, r8
 802ad98:	f7fe fc2a 	bl	80295f0 <memmove>
 802ad9c:	68a3      	ldr	r3, [r4, #8]
 802ad9e:	1b9b      	subs	r3, r3, r6
 802ada0:	60a3      	str	r3, [r4, #8]
 802ada2:	6823      	ldr	r3, [r4, #0]
 802ada4:	4433      	add	r3, r6
 802ada6:	6023      	str	r3, [r4, #0]
 802ada8:	2000      	movs	r0, #0
 802adaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802adae:	462a      	mov	r2, r5
 802adb0:	f7fd fc1a 	bl	80285e8 <_realloc_r>
 802adb4:	4606      	mov	r6, r0
 802adb6:	2800      	cmp	r0, #0
 802adb8:	d1e0      	bne.n	802ad7c <__ssputs_r+0x5c>
 802adba:	6921      	ldr	r1, [r4, #16]
 802adbc:	4650      	mov	r0, sl
 802adbe:	f7ff fbdb 	bl	802a578 <_free_r>
 802adc2:	230c      	movs	r3, #12
 802adc4:	f8ca 3000 	str.w	r3, [sl]
 802adc8:	89a3      	ldrh	r3, [r4, #12]
 802adca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802adce:	81a3      	strh	r3, [r4, #12]
 802add0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802add4:	e7e9      	b.n	802adaa <__ssputs_r+0x8a>
	...

0802add8 <_svfiprintf_r>:
 802add8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802addc:	4698      	mov	r8, r3
 802adde:	898b      	ldrh	r3, [r1, #12]
 802ade0:	061b      	lsls	r3, r3, #24
 802ade2:	b09d      	sub	sp, #116	@ 0x74
 802ade4:	4607      	mov	r7, r0
 802ade6:	460d      	mov	r5, r1
 802ade8:	4614      	mov	r4, r2
 802adea:	d510      	bpl.n	802ae0e <_svfiprintf_r+0x36>
 802adec:	690b      	ldr	r3, [r1, #16]
 802adee:	b973      	cbnz	r3, 802ae0e <_svfiprintf_r+0x36>
 802adf0:	2140      	movs	r1, #64	@ 0x40
 802adf2:	f7fd faf9 	bl	80283e8 <_malloc_r>
 802adf6:	6028      	str	r0, [r5, #0]
 802adf8:	6128      	str	r0, [r5, #16]
 802adfa:	b930      	cbnz	r0, 802ae0a <_svfiprintf_r+0x32>
 802adfc:	230c      	movs	r3, #12
 802adfe:	603b      	str	r3, [r7, #0]
 802ae00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802ae04:	b01d      	add	sp, #116	@ 0x74
 802ae06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ae0a:	2340      	movs	r3, #64	@ 0x40
 802ae0c:	616b      	str	r3, [r5, #20]
 802ae0e:	2300      	movs	r3, #0
 802ae10:	9309      	str	r3, [sp, #36]	@ 0x24
 802ae12:	2320      	movs	r3, #32
 802ae14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802ae18:	f8cd 800c 	str.w	r8, [sp, #12]
 802ae1c:	2330      	movs	r3, #48	@ 0x30
 802ae1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802afbc <_svfiprintf_r+0x1e4>
 802ae22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802ae26:	f04f 0901 	mov.w	r9, #1
 802ae2a:	4623      	mov	r3, r4
 802ae2c:	469a      	mov	sl, r3
 802ae2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ae32:	b10a      	cbz	r2, 802ae38 <_svfiprintf_r+0x60>
 802ae34:	2a25      	cmp	r2, #37	@ 0x25
 802ae36:	d1f9      	bne.n	802ae2c <_svfiprintf_r+0x54>
 802ae38:	ebba 0b04 	subs.w	fp, sl, r4
 802ae3c:	d00b      	beq.n	802ae56 <_svfiprintf_r+0x7e>
 802ae3e:	465b      	mov	r3, fp
 802ae40:	4622      	mov	r2, r4
 802ae42:	4629      	mov	r1, r5
 802ae44:	4638      	mov	r0, r7
 802ae46:	f7ff ff6b 	bl	802ad20 <__ssputs_r>
 802ae4a:	3001      	adds	r0, #1
 802ae4c:	f000 80a7 	beq.w	802af9e <_svfiprintf_r+0x1c6>
 802ae50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802ae52:	445a      	add	r2, fp
 802ae54:	9209      	str	r2, [sp, #36]	@ 0x24
 802ae56:	f89a 3000 	ldrb.w	r3, [sl]
 802ae5a:	2b00      	cmp	r3, #0
 802ae5c:	f000 809f 	beq.w	802af9e <_svfiprintf_r+0x1c6>
 802ae60:	2300      	movs	r3, #0
 802ae62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802ae66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ae6a:	f10a 0a01 	add.w	sl, sl, #1
 802ae6e:	9304      	str	r3, [sp, #16]
 802ae70:	9307      	str	r3, [sp, #28]
 802ae72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802ae76:	931a      	str	r3, [sp, #104]	@ 0x68
 802ae78:	4654      	mov	r4, sl
 802ae7a:	2205      	movs	r2, #5
 802ae7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ae80:	484e      	ldr	r0, [pc, #312]	@ (802afbc <_svfiprintf_r+0x1e4>)
 802ae82:	f7d5 f9d5 	bl	8000230 <memchr>
 802ae86:	9a04      	ldr	r2, [sp, #16]
 802ae88:	b9d8      	cbnz	r0, 802aec2 <_svfiprintf_r+0xea>
 802ae8a:	06d0      	lsls	r0, r2, #27
 802ae8c:	bf44      	itt	mi
 802ae8e:	2320      	movmi	r3, #32
 802ae90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ae94:	0711      	lsls	r1, r2, #28
 802ae96:	bf44      	itt	mi
 802ae98:	232b      	movmi	r3, #43	@ 0x2b
 802ae9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ae9e:	f89a 3000 	ldrb.w	r3, [sl]
 802aea2:	2b2a      	cmp	r3, #42	@ 0x2a
 802aea4:	d015      	beq.n	802aed2 <_svfiprintf_r+0xfa>
 802aea6:	9a07      	ldr	r2, [sp, #28]
 802aea8:	4654      	mov	r4, sl
 802aeaa:	2000      	movs	r0, #0
 802aeac:	f04f 0c0a 	mov.w	ip, #10
 802aeb0:	4621      	mov	r1, r4
 802aeb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 802aeb6:	3b30      	subs	r3, #48	@ 0x30
 802aeb8:	2b09      	cmp	r3, #9
 802aeba:	d94b      	bls.n	802af54 <_svfiprintf_r+0x17c>
 802aebc:	b1b0      	cbz	r0, 802aeec <_svfiprintf_r+0x114>
 802aebe:	9207      	str	r2, [sp, #28]
 802aec0:	e014      	b.n	802aeec <_svfiprintf_r+0x114>
 802aec2:	eba0 0308 	sub.w	r3, r0, r8
 802aec6:	fa09 f303 	lsl.w	r3, r9, r3
 802aeca:	4313      	orrs	r3, r2
 802aecc:	9304      	str	r3, [sp, #16]
 802aece:	46a2      	mov	sl, r4
 802aed0:	e7d2      	b.n	802ae78 <_svfiprintf_r+0xa0>
 802aed2:	9b03      	ldr	r3, [sp, #12]
 802aed4:	1d19      	adds	r1, r3, #4
 802aed6:	681b      	ldr	r3, [r3, #0]
 802aed8:	9103      	str	r1, [sp, #12]
 802aeda:	2b00      	cmp	r3, #0
 802aedc:	bfbb      	ittet	lt
 802aede:	425b      	neglt	r3, r3
 802aee0:	f042 0202 	orrlt.w	r2, r2, #2
 802aee4:	9307      	strge	r3, [sp, #28]
 802aee6:	9307      	strlt	r3, [sp, #28]
 802aee8:	bfb8      	it	lt
 802aeea:	9204      	strlt	r2, [sp, #16]
 802aeec:	7823      	ldrb	r3, [r4, #0]
 802aeee:	2b2e      	cmp	r3, #46	@ 0x2e
 802aef0:	d10a      	bne.n	802af08 <_svfiprintf_r+0x130>
 802aef2:	7863      	ldrb	r3, [r4, #1]
 802aef4:	2b2a      	cmp	r3, #42	@ 0x2a
 802aef6:	d132      	bne.n	802af5e <_svfiprintf_r+0x186>
 802aef8:	9b03      	ldr	r3, [sp, #12]
 802aefa:	1d1a      	adds	r2, r3, #4
 802aefc:	681b      	ldr	r3, [r3, #0]
 802aefe:	9203      	str	r2, [sp, #12]
 802af00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802af04:	3402      	adds	r4, #2
 802af06:	9305      	str	r3, [sp, #20]
 802af08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802afcc <_svfiprintf_r+0x1f4>
 802af0c:	7821      	ldrb	r1, [r4, #0]
 802af0e:	2203      	movs	r2, #3
 802af10:	4650      	mov	r0, sl
 802af12:	f7d5 f98d 	bl	8000230 <memchr>
 802af16:	b138      	cbz	r0, 802af28 <_svfiprintf_r+0x150>
 802af18:	9b04      	ldr	r3, [sp, #16]
 802af1a:	eba0 000a 	sub.w	r0, r0, sl
 802af1e:	2240      	movs	r2, #64	@ 0x40
 802af20:	4082      	lsls	r2, r0
 802af22:	4313      	orrs	r3, r2
 802af24:	3401      	adds	r4, #1
 802af26:	9304      	str	r3, [sp, #16]
 802af28:	f814 1b01 	ldrb.w	r1, [r4], #1
 802af2c:	4824      	ldr	r0, [pc, #144]	@ (802afc0 <_svfiprintf_r+0x1e8>)
 802af2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802af32:	2206      	movs	r2, #6
 802af34:	f7d5 f97c 	bl	8000230 <memchr>
 802af38:	2800      	cmp	r0, #0
 802af3a:	d036      	beq.n	802afaa <_svfiprintf_r+0x1d2>
 802af3c:	4b21      	ldr	r3, [pc, #132]	@ (802afc4 <_svfiprintf_r+0x1ec>)
 802af3e:	bb1b      	cbnz	r3, 802af88 <_svfiprintf_r+0x1b0>
 802af40:	9b03      	ldr	r3, [sp, #12]
 802af42:	3307      	adds	r3, #7
 802af44:	f023 0307 	bic.w	r3, r3, #7
 802af48:	3308      	adds	r3, #8
 802af4a:	9303      	str	r3, [sp, #12]
 802af4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802af4e:	4433      	add	r3, r6
 802af50:	9309      	str	r3, [sp, #36]	@ 0x24
 802af52:	e76a      	b.n	802ae2a <_svfiprintf_r+0x52>
 802af54:	fb0c 3202 	mla	r2, ip, r2, r3
 802af58:	460c      	mov	r4, r1
 802af5a:	2001      	movs	r0, #1
 802af5c:	e7a8      	b.n	802aeb0 <_svfiprintf_r+0xd8>
 802af5e:	2300      	movs	r3, #0
 802af60:	3401      	adds	r4, #1
 802af62:	9305      	str	r3, [sp, #20]
 802af64:	4619      	mov	r1, r3
 802af66:	f04f 0c0a 	mov.w	ip, #10
 802af6a:	4620      	mov	r0, r4
 802af6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 802af70:	3a30      	subs	r2, #48	@ 0x30
 802af72:	2a09      	cmp	r2, #9
 802af74:	d903      	bls.n	802af7e <_svfiprintf_r+0x1a6>
 802af76:	2b00      	cmp	r3, #0
 802af78:	d0c6      	beq.n	802af08 <_svfiprintf_r+0x130>
 802af7a:	9105      	str	r1, [sp, #20]
 802af7c:	e7c4      	b.n	802af08 <_svfiprintf_r+0x130>
 802af7e:	fb0c 2101 	mla	r1, ip, r1, r2
 802af82:	4604      	mov	r4, r0
 802af84:	2301      	movs	r3, #1
 802af86:	e7f0      	b.n	802af6a <_svfiprintf_r+0x192>
 802af88:	ab03      	add	r3, sp, #12
 802af8a:	9300      	str	r3, [sp, #0]
 802af8c:	462a      	mov	r2, r5
 802af8e:	4b0e      	ldr	r3, [pc, #56]	@ (802afc8 <_svfiprintf_r+0x1f0>)
 802af90:	a904      	add	r1, sp, #16
 802af92:	4638      	mov	r0, r7
 802af94:	f7fd fcf2 	bl	802897c <_printf_float>
 802af98:	1c42      	adds	r2, r0, #1
 802af9a:	4606      	mov	r6, r0
 802af9c:	d1d6      	bne.n	802af4c <_svfiprintf_r+0x174>
 802af9e:	89ab      	ldrh	r3, [r5, #12]
 802afa0:	065b      	lsls	r3, r3, #25
 802afa2:	f53f af2d 	bmi.w	802ae00 <_svfiprintf_r+0x28>
 802afa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802afa8:	e72c      	b.n	802ae04 <_svfiprintf_r+0x2c>
 802afaa:	ab03      	add	r3, sp, #12
 802afac:	9300      	str	r3, [sp, #0]
 802afae:	462a      	mov	r2, r5
 802afb0:	4b05      	ldr	r3, [pc, #20]	@ (802afc8 <_svfiprintf_r+0x1f0>)
 802afb2:	a904      	add	r1, sp, #16
 802afb4:	4638      	mov	r0, r7
 802afb6:	f7fd ff79 	bl	8028eac <_printf_i>
 802afba:	e7ed      	b.n	802af98 <_svfiprintf_r+0x1c0>
 802afbc:	08030510 	.word	0x08030510
 802afc0:	0803051a 	.word	0x0803051a
 802afc4:	0802897d 	.word	0x0802897d
 802afc8:	0802ad21 	.word	0x0802ad21
 802afcc:	08030516 	.word	0x08030516

0802afd0 <__sfputc_r>:
 802afd0:	6893      	ldr	r3, [r2, #8]
 802afd2:	3b01      	subs	r3, #1
 802afd4:	2b00      	cmp	r3, #0
 802afd6:	b410      	push	{r4}
 802afd8:	6093      	str	r3, [r2, #8]
 802afda:	da08      	bge.n	802afee <__sfputc_r+0x1e>
 802afdc:	6994      	ldr	r4, [r2, #24]
 802afde:	42a3      	cmp	r3, r4
 802afe0:	db01      	blt.n	802afe6 <__sfputc_r+0x16>
 802afe2:	290a      	cmp	r1, #10
 802afe4:	d103      	bne.n	802afee <__sfputc_r+0x1e>
 802afe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 802afea:	f7fe ba5d 	b.w	80294a8 <__swbuf_r>
 802afee:	6813      	ldr	r3, [r2, #0]
 802aff0:	1c58      	adds	r0, r3, #1
 802aff2:	6010      	str	r0, [r2, #0]
 802aff4:	7019      	strb	r1, [r3, #0]
 802aff6:	4608      	mov	r0, r1
 802aff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802affc:	4770      	bx	lr

0802affe <__sfputs_r>:
 802affe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b000:	4606      	mov	r6, r0
 802b002:	460f      	mov	r7, r1
 802b004:	4614      	mov	r4, r2
 802b006:	18d5      	adds	r5, r2, r3
 802b008:	42ac      	cmp	r4, r5
 802b00a:	d101      	bne.n	802b010 <__sfputs_r+0x12>
 802b00c:	2000      	movs	r0, #0
 802b00e:	e007      	b.n	802b020 <__sfputs_r+0x22>
 802b010:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b014:	463a      	mov	r2, r7
 802b016:	4630      	mov	r0, r6
 802b018:	f7ff ffda 	bl	802afd0 <__sfputc_r>
 802b01c:	1c43      	adds	r3, r0, #1
 802b01e:	d1f3      	bne.n	802b008 <__sfputs_r+0xa>
 802b020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b024 <_vfiprintf_r>:
 802b024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b028:	460d      	mov	r5, r1
 802b02a:	b09d      	sub	sp, #116	@ 0x74
 802b02c:	4614      	mov	r4, r2
 802b02e:	4698      	mov	r8, r3
 802b030:	4606      	mov	r6, r0
 802b032:	b118      	cbz	r0, 802b03c <_vfiprintf_r+0x18>
 802b034:	6a03      	ldr	r3, [r0, #32]
 802b036:	b90b      	cbnz	r3, 802b03c <_vfiprintf_r+0x18>
 802b038:	f7fe f8e4 	bl	8029204 <__sinit>
 802b03c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b03e:	07d9      	lsls	r1, r3, #31
 802b040:	d405      	bmi.n	802b04e <_vfiprintf_r+0x2a>
 802b042:	89ab      	ldrh	r3, [r5, #12]
 802b044:	059a      	lsls	r2, r3, #22
 802b046:	d402      	bmi.n	802b04e <_vfiprintf_r+0x2a>
 802b048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b04a:	f7fe fc04 	bl	8029856 <__retarget_lock_acquire_recursive>
 802b04e:	89ab      	ldrh	r3, [r5, #12]
 802b050:	071b      	lsls	r3, r3, #28
 802b052:	d501      	bpl.n	802b058 <_vfiprintf_r+0x34>
 802b054:	692b      	ldr	r3, [r5, #16]
 802b056:	b99b      	cbnz	r3, 802b080 <_vfiprintf_r+0x5c>
 802b058:	4629      	mov	r1, r5
 802b05a:	4630      	mov	r0, r6
 802b05c:	f7fe fa62 	bl	8029524 <__swsetup_r>
 802b060:	b170      	cbz	r0, 802b080 <_vfiprintf_r+0x5c>
 802b062:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b064:	07dc      	lsls	r4, r3, #31
 802b066:	d504      	bpl.n	802b072 <_vfiprintf_r+0x4e>
 802b068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b06c:	b01d      	add	sp, #116	@ 0x74
 802b06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b072:	89ab      	ldrh	r3, [r5, #12]
 802b074:	0598      	lsls	r0, r3, #22
 802b076:	d4f7      	bmi.n	802b068 <_vfiprintf_r+0x44>
 802b078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b07a:	f7fe fbed 	bl	8029858 <__retarget_lock_release_recursive>
 802b07e:	e7f3      	b.n	802b068 <_vfiprintf_r+0x44>
 802b080:	2300      	movs	r3, #0
 802b082:	9309      	str	r3, [sp, #36]	@ 0x24
 802b084:	2320      	movs	r3, #32
 802b086:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802b08a:	f8cd 800c 	str.w	r8, [sp, #12]
 802b08e:	2330      	movs	r3, #48	@ 0x30
 802b090:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802b240 <_vfiprintf_r+0x21c>
 802b094:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802b098:	f04f 0901 	mov.w	r9, #1
 802b09c:	4623      	mov	r3, r4
 802b09e:	469a      	mov	sl, r3
 802b0a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b0a4:	b10a      	cbz	r2, 802b0aa <_vfiprintf_r+0x86>
 802b0a6:	2a25      	cmp	r2, #37	@ 0x25
 802b0a8:	d1f9      	bne.n	802b09e <_vfiprintf_r+0x7a>
 802b0aa:	ebba 0b04 	subs.w	fp, sl, r4
 802b0ae:	d00b      	beq.n	802b0c8 <_vfiprintf_r+0xa4>
 802b0b0:	465b      	mov	r3, fp
 802b0b2:	4622      	mov	r2, r4
 802b0b4:	4629      	mov	r1, r5
 802b0b6:	4630      	mov	r0, r6
 802b0b8:	f7ff ffa1 	bl	802affe <__sfputs_r>
 802b0bc:	3001      	adds	r0, #1
 802b0be:	f000 80a7 	beq.w	802b210 <_vfiprintf_r+0x1ec>
 802b0c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b0c4:	445a      	add	r2, fp
 802b0c6:	9209      	str	r2, [sp, #36]	@ 0x24
 802b0c8:	f89a 3000 	ldrb.w	r3, [sl]
 802b0cc:	2b00      	cmp	r3, #0
 802b0ce:	f000 809f 	beq.w	802b210 <_vfiprintf_r+0x1ec>
 802b0d2:	2300      	movs	r3, #0
 802b0d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802b0d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b0dc:	f10a 0a01 	add.w	sl, sl, #1
 802b0e0:	9304      	str	r3, [sp, #16]
 802b0e2:	9307      	str	r3, [sp, #28]
 802b0e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802b0e8:	931a      	str	r3, [sp, #104]	@ 0x68
 802b0ea:	4654      	mov	r4, sl
 802b0ec:	2205      	movs	r2, #5
 802b0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b0f2:	4853      	ldr	r0, [pc, #332]	@ (802b240 <_vfiprintf_r+0x21c>)
 802b0f4:	f7d5 f89c 	bl	8000230 <memchr>
 802b0f8:	9a04      	ldr	r2, [sp, #16]
 802b0fa:	b9d8      	cbnz	r0, 802b134 <_vfiprintf_r+0x110>
 802b0fc:	06d1      	lsls	r1, r2, #27
 802b0fe:	bf44      	itt	mi
 802b100:	2320      	movmi	r3, #32
 802b102:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b106:	0713      	lsls	r3, r2, #28
 802b108:	bf44      	itt	mi
 802b10a:	232b      	movmi	r3, #43	@ 0x2b
 802b10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b110:	f89a 3000 	ldrb.w	r3, [sl]
 802b114:	2b2a      	cmp	r3, #42	@ 0x2a
 802b116:	d015      	beq.n	802b144 <_vfiprintf_r+0x120>
 802b118:	9a07      	ldr	r2, [sp, #28]
 802b11a:	4654      	mov	r4, sl
 802b11c:	2000      	movs	r0, #0
 802b11e:	f04f 0c0a 	mov.w	ip, #10
 802b122:	4621      	mov	r1, r4
 802b124:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b128:	3b30      	subs	r3, #48	@ 0x30
 802b12a:	2b09      	cmp	r3, #9
 802b12c:	d94b      	bls.n	802b1c6 <_vfiprintf_r+0x1a2>
 802b12e:	b1b0      	cbz	r0, 802b15e <_vfiprintf_r+0x13a>
 802b130:	9207      	str	r2, [sp, #28]
 802b132:	e014      	b.n	802b15e <_vfiprintf_r+0x13a>
 802b134:	eba0 0308 	sub.w	r3, r0, r8
 802b138:	fa09 f303 	lsl.w	r3, r9, r3
 802b13c:	4313      	orrs	r3, r2
 802b13e:	9304      	str	r3, [sp, #16]
 802b140:	46a2      	mov	sl, r4
 802b142:	e7d2      	b.n	802b0ea <_vfiprintf_r+0xc6>
 802b144:	9b03      	ldr	r3, [sp, #12]
 802b146:	1d19      	adds	r1, r3, #4
 802b148:	681b      	ldr	r3, [r3, #0]
 802b14a:	9103      	str	r1, [sp, #12]
 802b14c:	2b00      	cmp	r3, #0
 802b14e:	bfbb      	ittet	lt
 802b150:	425b      	neglt	r3, r3
 802b152:	f042 0202 	orrlt.w	r2, r2, #2
 802b156:	9307      	strge	r3, [sp, #28]
 802b158:	9307      	strlt	r3, [sp, #28]
 802b15a:	bfb8      	it	lt
 802b15c:	9204      	strlt	r2, [sp, #16]
 802b15e:	7823      	ldrb	r3, [r4, #0]
 802b160:	2b2e      	cmp	r3, #46	@ 0x2e
 802b162:	d10a      	bne.n	802b17a <_vfiprintf_r+0x156>
 802b164:	7863      	ldrb	r3, [r4, #1]
 802b166:	2b2a      	cmp	r3, #42	@ 0x2a
 802b168:	d132      	bne.n	802b1d0 <_vfiprintf_r+0x1ac>
 802b16a:	9b03      	ldr	r3, [sp, #12]
 802b16c:	1d1a      	adds	r2, r3, #4
 802b16e:	681b      	ldr	r3, [r3, #0]
 802b170:	9203      	str	r2, [sp, #12]
 802b172:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802b176:	3402      	adds	r4, #2
 802b178:	9305      	str	r3, [sp, #20]
 802b17a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802b250 <_vfiprintf_r+0x22c>
 802b17e:	7821      	ldrb	r1, [r4, #0]
 802b180:	2203      	movs	r2, #3
 802b182:	4650      	mov	r0, sl
 802b184:	f7d5 f854 	bl	8000230 <memchr>
 802b188:	b138      	cbz	r0, 802b19a <_vfiprintf_r+0x176>
 802b18a:	9b04      	ldr	r3, [sp, #16]
 802b18c:	eba0 000a 	sub.w	r0, r0, sl
 802b190:	2240      	movs	r2, #64	@ 0x40
 802b192:	4082      	lsls	r2, r0
 802b194:	4313      	orrs	r3, r2
 802b196:	3401      	adds	r4, #1
 802b198:	9304      	str	r3, [sp, #16]
 802b19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b19e:	4829      	ldr	r0, [pc, #164]	@ (802b244 <_vfiprintf_r+0x220>)
 802b1a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802b1a4:	2206      	movs	r2, #6
 802b1a6:	f7d5 f843 	bl	8000230 <memchr>
 802b1aa:	2800      	cmp	r0, #0
 802b1ac:	d03f      	beq.n	802b22e <_vfiprintf_r+0x20a>
 802b1ae:	4b26      	ldr	r3, [pc, #152]	@ (802b248 <_vfiprintf_r+0x224>)
 802b1b0:	bb1b      	cbnz	r3, 802b1fa <_vfiprintf_r+0x1d6>
 802b1b2:	9b03      	ldr	r3, [sp, #12]
 802b1b4:	3307      	adds	r3, #7
 802b1b6:	f023 0307 	bic.w	r3, r3, #7
 802b1ba:	3308      	adds	r3, #8
 802b1bc:	9303      	str	r3, [sp, #12]
 802b1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b1c0:	443b      	add	r3, r7
 802b1c2:	9309      	str	r3, [sp, #36]	@ 0x24
 802b1c4:	e76a      	b.n	802b09c <_vfiprintf_r+0x78>
 802b1c6:	fb0c 3202 	mla	r2, ip, r2, r3
 802b1ca:	460c      	mov	r4, r1
 802b1cc:	2001      	movs	r0, #1
 802b1ce:	e7a8      	b.n	802b122 <_vfiprintf_r+0xfe>
 802b1d0:	2300      	movs	r3, #0
 802b1d2:	3401      	adds	r4, #1
 802b1d4:	9305      	str	r3, [sp, #20]
 802b1d6:	4619      	mov	r1, r3
 802b1d8:	f04f 0c0a 	mov.w	ip, #10
 802b1dc:	4620      	mov	r0, r4
 802b1de:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b1e2:	3a30      	subs	r2, #48	@ 0x30
 802b1e4:	2a09      	cmp	r2, #9
 802b1e6:	d903      	bls.n	802b1f0 <_vfiprintf_r+0x1cc>
 802b1e8:	2b00      	cmp	r3, #0
 802b1ea:	d0c6      	beq.n	802b17a <_vfiprintf_r+0x156>
 802b1ec:	9105      	str	r1, [sp, #20]
 802b1ee:	e7c4      	b.n	802b17a <_vfiprintf_r+0x156>
 802b1f0:	fb0c 2101 	mla	r1, ip, r1, r2
 802b1f4:	4604      	mov	r4, r0
 802b1f6:	2301      	movs	r3, #1
 802b1f8:	e7f0      	b.n	802b1dc <_vfiprintf_r+0x1b8>
 802b1fa:	ab03      	add	r3, sp, #12
 802b1fc:	9300      	str	r3, [sp, #0]
 802b1fe:	462a      	mov	r2, r5
 802b200:	4b12      	ldr	r3, [pc, #72]	@ (802b24c <_vfiprintf_r+0x228>)
 802b202:	a904      	add	r1, sp, #16
 802b204:	4630      	mov	r0, r6
 802b206:	f7fd fbb9 	bl	802897c <_printf_float>
 802b20a:	4607      	mov	r7, r0
 802b20c:	1c78      	adds	r0, r7, #1
 802b20e:	d1d6      	bne.n	802b1be <_vfiprintf_r+0x19a>
 802b210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b212:	07d9      	lsls	r1, r3, #31
 802b214:	d405      	bmi.n	802b222 <_vfiprintf_r+0x1fe>
 802b216:	89ab      	ldrh	r3, [r5, #12]
 802b218:	059a      	lsls	r2, r3, #22
 802b21a:	d402      	bmi.n	802b222 <_vfiprintf_r+0x1fe>
 802b21c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b21e:	f7fe fb1b 	bl	8029858 <__retarget_lock_release_recursive>
 802b222:	89ab      	ldrh	r3, [r5, #12]
 802b224:	065b      	lsls	r3, r3, #25
 802b226:	f53f af1f 	bmi.w	802b068 <_vfiprintf_r+0x44>
 802b22a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802b22c:	e71e      	b.n	802b06c <_vfiprintf_r+0x48>
 802b22e:	ab03      	add	r3, sp, #12
 802b230:	9300      	str	r3, [sp, #0]
 802b232:	462a      	mov	r2, r5
 802b234:	4b05      	ldr	r3, [pc, #20]	@ (802b24c <_vfiprintf_r+0x228>)
 802b236:	a904      	add	r1, sp, #16
 802b238:	4630      	mov	r0, r6
 802b23a:	f7fd fe37 	bl	8028eac <_printf_i>
 802b23e:	e7e4      	b.n	802b20a <_vfiprintf_r+0x1e6>
 802b240:	08030510 	.word	0x08030510
 802b244:	0803051a 	.word	0x0803051a
 802b248:	0802897d 	.word	0x0802897d
 802b24c:	0802afff 	.word	0x0802afff
 802b250:	08030516 	.word	0x08030516

0802b254 <__sflush_r>:
 802b254:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802b258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b25c:	0716      	lsls	r6, r2, #28
 802b25e:	4605      	mov	r5, r0
 802b260:	460c      	mov	r4, r1
 802b262:	d454      	bmi.n	802b30e <__sflush_r+0xba>
 802b264:	684b      	ldr	r3, [r1, #4]
 802b266:	2b00      	cmp	r3, #0
 802b268:	dc02      	bgt.n	802b270 <__sflush_r+0x1c>
 802b26a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802b26c:	2b00      	cmp	r3, #0
 802b26e:	dd48      	ble.n	802b302 <__sflush_r+0xae>
 802b270:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b272:	2e00      	cmp	r6, #0
 802b274:	d045      	beq.n	802b302 <__sflush_r+0xae>
 802b276:	2300      	movs	r3, #0
 802b278:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802b27c:	682f      	ldr	r7, [r5, #0]
 802b27e:	6a21      	ldr	r1, [r4, #32]
 802b280:	602b      	str	r3, [r5, #0]
 802b282:	d030      	beq.n	802b2e6 <__sflush_r+0x92>
 802b284:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802b286:	89a3      	ldrh	r3, [r4, #12]
 802b288:	0759      	lsls	r1, r3, #29
 802b28a:	d505      	bpl.n	802b298 <__sflush_r+0x44>
 802b28c:	6863      	ldr	r3, [r4, #4]
 802b28e:	1ad2      	subs	r2, r2, r3
 802b290:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802b292:	b10b      	cbz	r3, 802b298 <__sflush_r+0x44>
 802b294:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802b296:	1ad2      	subs	r2, r2, r3
 802b298:	2300      	movs	r3, #0
 802b29a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b29c:	6a21      	ldr	r1, [r4, #32]
 802b29e:	4628      	mov	r0, r5
 802b2a0:	47b0      	blx	r6
 802b2a2:	1c43      	adds	r3, r0, #1
 802b2a4:	89a3      	ldrh	r3, [r4, #12]
 802b2a6:	d106      	bne.n	802b2b6 <__sflush_r+0x62>
 802b2a8:	6829      	ldr	r1, [r5, #0]
 802b2aa:	291d      	cmp	r1, #29
 802b2ac:	d82b      	bhi.n	802b306 <__sflush_r+0xb2>
 802b2ae:	4a2a      	ldr	r2, [pc, #168]	@ (802b358 <__sflush_r+0x104>)
 802b2b0:	410a      	asrs	r2, r1
 802b2b2:	07d6      	lsls	r6, r2, #31
 802b2b4:	d427      	bmi.n	802b306 <__sflush_r+0xb2>
 802b2b6:	2200      	movs	r2, #0
 802b2b8:	6062      	str	r2, [r4, #4]
 802b2ba:	04d9      	lsls	r1, r3, #19
 802b2bc:	6922      	ldr	r2, [r4, #16]
 802b2be:	6022      	str	r2, [r4, #0]
 802b2c0:	d504      	bpl.n	802b2cc <__sflush_r+0x78>
 802b2c2:	1c42      	adds	r2, r0, #1
 802b2c4:	d101      	bne.n	802b2ca <__sflush_r+0x76>
 802b2c6:	682b      	ldr	r3, [r5, #0]
 802b2c8:	b903      	cbnz	r3, 802b2cc <__sflush_r+0x78>
 802b2ca:	6560      	str	r0, [r4, #84]	@ 0x54
 802b2cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b2ce:	602f      	str	r7, [r5, #0]
 802b2d0:	b1b9      	cbz	r1, 802b302 <__sflush_r+0xae>
 802b2d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b2d6:	4299      	cmp	r1, r3
 802b2d8:	d002      	beq.n	802b2e0 <__sflush_r+0x8c>
 802b2da:	4628      	mov	r0, r5
 802b2dc:	f7ff f94c 	bl	802a578 <_free_r>
 802b2e0:	2300      	movs	r3, #0
 802b2e2:	6363      	str	r3, [r4, #52]	@ 0x34
 802b2e4:	e00d      	b.n	802b302 <__sflush_r+0xae>
 802b2e6:	2301      	movs	r3, #1
 802b2e8:	4628      	mov	r0, r5
 802b2ea:	47b0      	blx	r6
 802b2ec:	4602      	mov	r2, r0
 802b2ee:	1c50      	adds	r0, r2, #1
 802b2f0:	d1c9      	bne.n	802b286 <__sflush_r+0x32>
 802b2f2:	682b      	ldr	r3, [r5, #0]
 802b2f4:	2b00      	cmp	r3, #0
 802b2f6:	d0c6      	beq.n	802b286 <__sflush_r+0x32>
 802b2f8:	2b1d      	cmp	r3, #29
 802b2fa:	d001      	beq.n	802b300 <__sflush_r+0xac>
 802b2fc:	2b16      	cmp	r3, #22
 802b2fe:	d11e      	bne.n	802b33e <__sflush_r+0xea>
 802b300:	602f      	str	r7, [r5, #0]
 802b302:	2000      	movs	r0, #0
 802b304:	e022      	b.n	802b34c <__sflush_r+0xf8>
 802b306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b30a:	b21b      	sxth	r3, r3
 802b30c:	e01b      	b.n	802b346 <__sflush_r+0xf2>
 802b30e:	690f      	ldr	r7, [r1, #16]
 802b310:	2f00      	cmp	r7, #0
 802b312:	d0f6      	beq.n	802b302 <__sflush_r+0xae>
 802b314:	0793      	lsls	r3, r2, #30
 802b316:	680e      	ldr	r6, [r1, #0]
 802b318:	bf08      	it	eq
 802b31a:	694b      	ldreq	r3, [r1, #20]
 802b31c:	600f      	str	r7, [r1, #0]
 802b31e:	bf18      	it	ne
 802b320:	2300      	movne	r3, #0
 802b322:	eba6 0807 	sub.w	r8, r6, r7
 802b326:	608b      	str	r3, [r1, #8]
 802b328:	f1b8 0f00 	cmp.w	r8, #0
 802b32c:	dde9      	ble.n	802b302 <__sflush_r+0xae>
 802b32e:	6a21      	ldr	r1, [r4, #32]
 802b330:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802b332:	4643      	mov	r3, r8
 802b334:	463a      	mov	r2, r7
 802b336:	4628      	mov	r0, r5
 802b338:	47b0      	blx	r6
 802b33a:	2800      	cmp	r0, #0
 802b33c:	dc08      	bgt.n	802b350 <__sflush_r+0xfc>
 802b33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b346:	81a3      	strh	r3, [r4, #12]
 802b348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b350:	4407      	add	r7, r0
 802b352:	eba8 0800 	sub.w	r8, r8, r0
 802b356:	e7e7      	b.n	802b328 <__sflush_r+0xd4>
 802b358:	dfbffffe 	.word	0xdfbffffe

0802b35c <_fflush_r>:
 802b35c:	b538      	push	{r3, r4, r5, lr}
 802b35e:	690b      	ldr	r3, [r1, #16]
 802b360:	4605      	mov	r5, r0
 802b362:	460c      	mov	r4, r1
 802b364:	b913      	cbnz	r3, 802b36c <_fflush_r+0x10>
 802b366:	2500      	movs	r5, #0
 802b368:	4628      	mov	r0, r5
 802b36a:	bd38      	pop	{r3, r4, r5, pc}
 802b36c:	b118      	cbz	r0, 802b376 <_fflush_r+0x1a>
 802b36e:	6a03      	ldr	r3, [r0, #32]
 802b370:	b90b      	cbnz	r3, 802b376 <_fflush_r+0x1a>
 802b372:	f7fd ff47 	bl	8029204 <__sinit>
 802b376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b37a:	2b00      	cmp	r3, #0
 802b37c:	d0f3      	beq.n	802b366 <_fflush_r+0xa>
 802b37e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802b380:	07d0      	lsls	r0, r2, #31
 802b382:	d404      	bmi.n	802b38e <_fflush_r+0x32>
 802b384:	0599      	lsls	r1, r3, #22
 802b386:	d402      	bmi.n	802b38e <_fflush_r+0x32>
 802b388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b38a:	f7fe fa64 	bl	8029856 <__retarget_lock_acquire_recursive>
 802b38e:	4628      	mov	r0, r5
 802b390:	4621      	mov	r1, r4
 802b392:	f7ff ff5f 	bl	802b254 <__sflush_r>
 802b396:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b398:	07da      	lsls	r2, r3, #31
 802b39a:	4605      	mov	r5, r0
 802b39c:	d4e4      	bmi.n	802b368 <_fflush_r+0xc>
 802b39e:	89a3      	ldrh	r3, [r4, #12]
 802b3a0:	059b      	lsls	r3, r3, #22
 802b3a2:	d4e1      	bmi.n	802b368 <_fflush_r+0xc>
 802b3a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b3a6:	f7fe fa57 	bl	8029858 <__retarget_lock_release_recursive>
 802b3aa:	e7dd      	b.n	802b368 <_fflush_r+0xc>

0802b3ac <fiprintf>:
 802b3ac:	b40e      	push	{r1, r2, r3}
 802b3ae:	b503      	push	{r0, r1, lr}
 802b3b0:	4601      	mov	r1, r0
 802b3b2:	ab03      	add	r3, sp, #12
 802b3b4:	4805      	ldr	r0, [pc, #20]	@ (802b3cc <fiprintf+0x20>)
 802b3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 802b3ba:	6800      	ldr	r0, [r0, #0]
 802b3bc:	9301      	str	r3, [sp, #4]
 802b3be:	f7ff fe31 	bl	802b024 <_vfiprintf_r>
 802b3c2:	b002      	add	sp, #8
 802b3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 802b3c8:	b003      	add	sp, #12
 802b3ca:	4770      	bx	lr
 802b3cc:	200002b4 	.word	0x200002b4

0802b3d0 <__swhatbuf_r>:
 802b3d0:	b570      	push	{r4, r5, r6, lr}
 802b3d2:	460c      	mov	r4, r1
 802b3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b3d8:	2900      	cmp	r1, #0
 802b3da:	b096      	sub	sp, #88	@ 0x58
 802b3dc:	4615      	mov	r5, r2
 802b3de:	461e      	mov	r6, r3
 802b3e0:	da0d      	bge.n	802b3fe <__swhatbuf_r+0x2e>
 802b3e2:	89a3      	ldrh	r3, [r4, #12]
 802b3e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802b3e8:	f04f 0100 	mov.w	r1, #0
 802b3ec:	bf14      	ite	ne
 802b3ee:	2340      	movne	r3, #64	@ 0x40
 802b3f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802b3f4:	2000      	movs	r0, #0
 802b3f6:	6031      	str	r1, [r6, #0]
 802b3f8:	602b      	str	r3, [r5, #0]
 802b3fa:	b016      	add	sp, #88	@ 0x58
 802b3fc:	bd70      	pop	{r4, r5, r6, pc}
 802b3fe:	466a      	mov	r2, sp
 802b400:	f000 f848 	bl	802b494 <_fstat_r>
 802b404:	2800      	cmp	r0, #0
 802b406:	dbec      	blt.n	802b3e2 <__swhatbuf_r+0x12>
 802b408:	9901      	ldr	r1, [sp, #4]
 802b40a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802b40e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802b412:	4259      	negs	r1, r3
 802b414:	4159      	adcs	r1, r3
 802b416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b41a:	e7eb      	b.n	802b3f4 <__swhatbuf_r+0x24>

0802b41c <__smakebuf_r>:
 802b41c:	898b      	ldrh	r3, [r1, #12]
 802b41e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b420:	079d      	lsls	r5, r3, #30
 802b422:	4606      	mov	r6, r0
 802b424:	460c      	mov	r4, r1
 802b426:	d507      	bpl.n	802b438 <__smakebuf_r+0x1c>
 802b428:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802b42c:	6023      	str	r3, [r4, #0]
 802b42e:	6123      	str	r3, [r4, #16]
 802b430:	2301      	movs	r3, #1
 802b432:	6163      	str	r3, [r4, #20]
 802b434:	b003      	add	sp, #12
 802b436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b438:	ab01      	add	r3, sp, #4
 802b43a:	466a      	mov	r2, sp
 802b43c:	f7ff ffc8 	bl	802b3d0 <__swhatbuf_r>
 802b440:	9f00      	ldr	r7, [sp, #0]
 802b442:	4605      	mov	r5, r0
 802b444:	4639      	mov	r1, r7
 802b446:	4630      	mov	r0, r6
 802b448:	f7fc ffce 	bl	80283e8 <_malloc_r>
 802b44c:	b948      	cbnz	r0, 802b462 <__smakebuf_r+0x46>
 802b44e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b452:	059a      	lsls	r2, r3, #22
 802b454:	d4ee      	bmi.n	802b434 <__smakebuf_r+0x18>
 802b456:	f023 0303 	bic.w	r3, r3, #3
 802b45a:	f043 0302 	orr.w	r3, r3, #2
 802b45e:	81a3      	strh	r3, [r4, #12]
 802b460:	e7e2      	b.n	802b428 <__smakebuf_r+0xc>
 802b462:	89a3      	ldrh	r3, [r4, #12]
 802b464:	6020      	str	r0, [r4, #0]
 802b466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b46a:	81a3      	strh	r3, [r4, #12]
 802b46c:	9b01      	ldr	r3, [sp, #4]
 802b46e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802b472:	b15b      	cbz	r3, 802b48c <__smakebuf_r+0x70>
 802b474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b478:	4630      	mov	r0, r6
 802b47a:	f000 f81d 	bl	802b4b8 <_isatty_r>
 802b47e:	b128      	cbz	r0, 802b48c <__smakebuf_r+0x70>
 802b480:	89a3      	ldrh	r3, [r4, #12]
 802b482:	f023 0303 	bic.w	r3, r3, #3
 802b486:	f043 0301 	orr.w	r3, r3, #1
 802b48a:	81a3      	strh	r3, [r4, #12]
 802b48c:	89a3      	ldrh	r3, [r4, #12]
 802b48e:	431d      	orrs	r5, r3
 802b490:	81a5      	strh	r5, [r4, #12]
 802b492:	e7cf      	b.n	802b434 <__smakebuf_r+0x18>

0802b494 <_fstat_r>:
 802b494:	b538      	push	{r3, r4, r5, lr}
 802b496:	4d07      	ldr	r5, [pc, #28]	@ (802b4b4 <_fstat_r+0x20>)
 802b498:	2300      	movs	r3, #0
 802b49a:	4604      	mov	r4, r0
 802b49c:	4608      	mov	r0, r1
 802b49e:	4611      	mov	r1, r2
 802b4a0:	602b      	str	r3, [r5, #0]
 802b4a2:	f7d6 fe75 	bl	8002190 <_fstat>
 802b4a6:	1c43      	adds	r3, r0, #1
 802b4a8:	d102      	bne.n	802b4b0 <_fstat_r+0x1c>
 802b4aa:	682b      	ldr	r3, [r5, #0]
 802b4ac:	b103      	cbz	r3, 802b4b0 <_fstat_r+0x1c>
 802b4ae:	6023      	str	r3, [r4, #0]
 802b4b0:	bd38      	pop	{r3, r4, r5, pc}
 802b4b2:	bf00      	nop
 802b4b4:	20047370 	.word	0x20047370

0802b4b8 <_isatty_r>:
 802b4b8:	b538      	push	{r3, r4, r5, lr}
 802b4ba:	4d06      	ldr	r5, [pc, #24]	@ (802b4d4 <_isatty_r+0x1c>)
 802b4bc:	2300      	movs	r3, #0
 802b4be:	4604      	mov	r4, r0
 802b4c0:	4608      	mov	r0, r1
 802b4c2:	602b      	str	r3, [r5, #0]
 802b4c4:	f7d6 fe74 	bl	80021b0 <_isatty>
 802b4c8:	1c43      	adds	r3, r0, #1
 802b4ca:	d102      	bne.n	802b4d2 <_isatty_r+0x1a>
 802b4cc:	682b      	ldr	r3, [r5, #0]
 802b4ce:	b103      	cbz	r3, 802b4d2 <_isatty_r+0x1a>
 802b4d0:	6023      	str	r3, [r4, #0]
 802b4d2:	bd38      	pop	{r3, r4, r5, pc}
 802b4d4:	20047370 	.word	0x20047370

0802b4d8 <abort>:
 802b4d8:	b508      	push	{r3, lr}
 802b4da:	2006      	movs	r0, #6
 802b4dc:	f000 f84a 	bl	802b574 <raise>
 802b4e0:	2001      	movs	r0, #1
 802b4e2:	f7d6 fe05 	bl	80020f0 <_exit>

0802b4e6 <__ascii_mbtowc>:
 802b4e6:	b082      	sub	sp, #8
 802b4e8:	b901      	cbnz	r1, 802b4ec <__ascii_mbtowc+0x6>
 802b4ea:	a901      	add	r1, sp, #4
 802b4ec:	b142      	cbz	r2, 802b500 <__ascii_mbtowc+0x1a>
 802b4ee:	b14b      	cbz	r3, 802b504 <__ascii_mbtowc+0x1e>
 802b4f0:	7813      	ldrb	r3, [r2, #0]
 802b4f2:	600b      	str	r3, [r1, #0]
 802b4f4:	7812      	ldrb	r2, [r2, #0]
 802b4f6:	1e10      	subs	r0, r2, #0
 802b4f8:	bf18      	it	ne
 802b4fa:	2001      	movne	r0, #1
 802b4fc:	b002      	add	sp, #8
 802b4fe:	4770      	bx	lr
 802b500:	4610      	mov	r0, r2
 802b502:	e7fb      	b.n	802b4fc <__ascii_mbtowc+0x16>
 802b504:	f06f 0001 	mvn.w	r0, #1
 802b508:	e7f8      	b.n	802b4fc <__ascii_mbtowc+0x16>

0802b50a <__ascii_wctomb>:
 802b50a:	4603      	mov	r3, r0
 802b50c:	4608      	mov	r0, r1
 802b50e:	b141      	cbz	r1, 802b522 <__ascii_wctomb+0x18>
 802b510:	2aff      	cmp	r2, #255	@ 0xff
 802b512:	d904      	bls.n	802b51e <__ascii_wctomb+0x14>
 802b514:	228a      	movs	r2, #138	@ 0x8a
 802b516:	601a      	str	r2, [r3, #0]
 802b518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b51c:	4770      	bx	lr
 802b51e:	700a      	strb	r2, [r1, #0]
 802b520:	2001      	movs	r0, #1
 802b522:	4770      	bx	lr

0802b524 <_raise_r>:
 802b524:	291f      	cmp	r1, #31
 802b526:	b538      	push	{r3, r4, r5, lr}
 802b528:	4605      	mov	r5, r0
 802b52a:	460c      	mov	r4, r1
 802b52c:	d904      	bls.n	802b538 <_raise_r+0x14>
 802b52e:	2316      	movs	r3, #22
 802b530:	6003      	str	r3, [r0, #0]
 802b532:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b536:	bd38      	pop	{r3, r4, r5, pc}
 802b538:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802b53a:	b112      	cbz	r2, 802b542 <_raise_r+0x1e>
 802b53c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b540:	b94b      	cbnz	r3, 802b556 <_raise_r+0x32>
 802b542:	4628      	mov	r0, r5
 802b544:	f000 f830 	bl	802b5a8 <_getpid_r>
 802b548:	4622      	mov	r2, r4
 802b54a:	4601      	mov	r1, r0
 802b54c:	4628      	mov	r0, r5
 802b54e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b552:	f000 b817 	b.w	802b584 <_kill_r>
 802b556:	2b01      	cmp	r3, #1
 802b558:	d00a      	beq.n	802b570 <_raise_r+0x4c>
 802b55a:	1c59      	adds	r1, r3, #1
 802b55c:	d103      	bne.n	802b566 <_raise_r+0x42>
 802b55e:	2316      	movs	r3, #22
 802b560:	6003      	str	r3, [r0, #0]
 802b562:	2001      	movs	r0, #1
 802b564:	e7e7      	b.n	802b536 <_raise_r+0x12>
 802b566:	2100      	movs	r1, #0
 802b568:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802b56c:	4620      	mov	r0, r4
 802b56e:	4798      	blx	r3
 802b570:	2000      	movs	r0, #0
 802b572:	e7e0      	b.n	802b536 <_raise_r+0x12>

0802b574 <raise>:
 802b574:	4b02      	ldr	r3, [pc, #8]	@ (802b580 <raise+0xc>)
 802b576:	4601      	mov	r1, r0
 802b578:	6818      	ldr	r0, [r3, #0]
 802b57a:	f7ff bfd3 	b.w	802b524 <_raise_r>
 802b57e:	bf00      	nop
 802b580:	200002b4 	.word	0x200002b4

0802b584 <_kill_r>:
 802b584:	b538      	push	{r3, r4, r5, lr}
 802b586:	4d07      	ldr	r5, [pc, #28]	@ (802b5a4 <_kill_r+0x20>)
 802b588:	2300      	movs	r3, #0
 802b58a:	4604      	mov	r4, r0
 802b58c:	4608      	mov	r0, r1
 802b58e:	4611      	mov	r1, r2
 802b590:	602b      	str	r3, [r5, #0]
 802b592:	f7d6 fd9b 	bl	80020cc <_kill>
 802b596:	1c43      	adds	r3, r0, #1
 802b598:	d102      	bne.n	802b5a0 <_kill_r+0x1c>
 802b59a:	682b      	ldr	r3, [r5, #0]
 802b59c:	b103      	cbz	r3, 802b5a0 <_kill_r+0x1c>
 802b59e:	6023      	str	r3, [r4, #0]
 802b5a0:	bd38      	pop	{r3, r4, r5, pc}
 802b5a2:	bf00      	nop
 802b5a4:	20047370 	.word	0x20047370

0802b5a8 <_getpid_r>:
 802b5a8:	f7d6 bd88 	b.w	80020bc <_getpid>

0802b5ac <_init>:
 802b5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b5ae:	bf00      	nop
 802b5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b5b2:	bc08      	pop	{r3}
 802b5b4:	469e      	mov	lr, r3
 802b5b6:	4770      	bx	lr

0802b5b8 <_fini>:
 802b5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b5ba:	bf00      	nop
 802b5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b5be:	bc08      	pop	{r3}
 802b5c0:	469e      	mov	lr, r3
 802b5c2:	4770      	bx	lr
